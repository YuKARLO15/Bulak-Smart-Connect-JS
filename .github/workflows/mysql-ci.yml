name: MySQL Authentication CI

on:
  push:
    paths:
      - 'bsc-js-backend/**'
      - '.github/workflows/mysql-ci.yml'
  pull_request:
    branches:
      - main
      - production
    paths:
      - 'bsc-js-backend/**'
      - '.github/workflows/mysql-ci.yml'
  workflow_dispatch:

jobs:
  backend-tests:
    name: Backend Tests with MySQL
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: bulak_smart_connect_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'
    
    - name: Install dependencies
      run: |
        cd bsc-js-backend
        npm ci
    
    - name: Build
      run: |
        cd bsc-js-backend
        npm run build
    
    - name: Set up database
      run: |
        mysql -h 127.0.0.1 -uroot -proot -e "
        USE bulak_smart_connect_test;
        
        -- Create roles table with the SAME column order as TypeORM entity
        CREATE TABLE IF NOT EXISTS roles (
          id INT AUTO_INCREMENT PRIMARY KEY,
          name VARCHAR(255) NOT NULL,
          description VARCHAR(255) DEFAULT NULL,
          UNIQUE KEY IDX_648e3f5447f725579d7d4ffdfb (name)
        );
        
        -- Create users table with default_role_id
        CREATE TABLE IF NOT EXISTS users (
          id INT AUTO_INCREMENT PRIMARY KEY,
          email VARCHAR(255) NOT NULL,
          password VARCHAR(255) NOT NULL,
          name VARCHAR(255) NOT NULL,
          created_at DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
          default_role_id INT DEFAULT NULL,
          UNIQUE KEY IDX_97672ac88f789774dd47f7c8be (email),
          FOREIGN KEY FK_2fb360b97dd407361f763e9c463 (default_role_id) REFERENCES roles(id)
        );
        
        -- Create junction table with SAME indices as TypeORM entity
        CREATE TABLE IF NOT EXISTS user_roles (
          user_id INT NOT NULL,
          role_id INT NOT NULL,
          PRIMARY KEY (user_id, role_id),
          KEY IDX_87b8888186ca9769c960e92687 (user_id),
          KEY IDX_b23c65e50a758245a33ee35fda (role_id),
          CONSTRAINT FK_87b8888186ca9769c960e926870 FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
          CONSTRAINT FK_b23c65e50a758245a33ee35fda1 FOREIGN KEY (role_id) REFERENCES roles(id) ON DELETE CASCADE
        );
        
        -- Insert roles from your seed function
        INSERT INTO roles (name, description) VALUES 
          ('super_admin', 'Has all permissions'),
          ('admin', 'Can manage staff and citizens'),
          ('staff', 'Can process applications'),
          ('citizen', 'Regular user');
        
        -- Insert test user with known password hash for 'password123'
        INSERT INTO users (email, password, name, default_role_id) 
        VALUES ('test@example.com', '$2b$10$Fv79BPbJ3qNpwM427v7hYuXrYTCZfGbcEGm2iFgiYVCV0vKxXGsm2', 'Test User', 
               (SELECT id FROM roles WHERE name = 'citizen'));
        
        -- Assign citizen role to test user
        INSERT INTO user_roles (user_id, role_id)
        VALUES (1, (SELECT id FROM roles WHERE name = 'citizen'));"
    
    - name: Test authentication system
      run: |
        cd bsc-js-backend
        npm test
      env:
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_USERNAME: root
        DB_PASSWORD: root
        DB_NAME: bulak_smart_connect_test
        JWT_SECRET: test_jwt_secret
  
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: backend-tests
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: bulak_smart_connect_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'
    
    - name: Install backend dependencies
      run: |
        cd bsc-js-backend
        npm ci
    
    - name: Install frontend dependencies
      run: |
        cd bulak-smart-connect-js
        npm ci
    
    - name: Set up database with test user
      run: |
        # Generate a fresh hash using Node.js
        HASH=$(cd bsc-js-backend && node -e "const bcrypt = require('bcrypt'); bcrypt.hash('password123', 10).then(hash => console.log(hash))")
        
        # Use the generated hash in the SQL command
        mysql -h 127.0.0.1 -uroot -proot -e "
        USE bulak_smart_connect_test;
        
        -- Create roles table with the SAME column order as TypeORM entity
        CREATE TABLE IF NOT EXISTS roles (
          id INT AUTO_INCREMENT PRIMARY KEY,
          name VARCHAR(255) NOT NULL,
          description VARCHAR(255) DEFAULT NULL,
          UNIQUE KEY IDX_648e3f5447f725579d7d4ffdfb (name)
        );
        
        -- Create users table with default_role_id
        CREATE TABLE IF NOT EXISTS users (
          id INT AUTO_INCREMENT PRIMARY KEY,
          email VARCHAR(255) NOT NULL,
          password VARCHAR(255) NOT NULL,
          name VARCHAR(255) NOT NULL,
          created_at DATETIME(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
          default_role_id INT DEFAULT NULL,
          UNIQUE KEY IDX_97672ac88f789774dd47f7c8be (email),
          FOREIGN KEY FK_2fb360b97dd407361f763e9c463 (default_role_id) REFERENCES roles(id)
        );
        
        -- Create junction table with SAME indices as TypeORM entity
        CREATE TABLE IF NOT EXISTS user_roles (
          user_id INT NOT NULL,
          role_id INT NOT NULL,
          PRIMARY KEY (user_id, role_id),
          KEY IDX_87b8888186ca9769c960e92687 (user_id),
          KEY IDX_b23c65e50a758245a33ee35fda (role_id),
          CONSTRAINT FK_87b8888186ca9769c960e926870 FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
          CONSTRAINT FK_b23c65e50a758245a33ee35fda1 FOREIGN KEY (role_id) REFERENCES roles(id) ON DELETE CASCADE
        );
        
        -- Insert roles from your seed function
        INSERT INTO roles (name, description) VALUES 
          ('super_admin', 'Has all permissions'),
          ('admin', 'Can manage staff and citizens'),
          ('staff', 'Can process applications'),
          ('citizen', 'Regular user');
        
        -- Insert test user with properly escaped hash
        INSERT INTO users (email, password, name, default_role_id) 
        VALUES ('test@example.com', \"$HASH\", 'Test User', 
               (SELECT id FROM roles WHERE name = 'citizen'));
        
        -- Assign citizen role to test user
        INSERT INTO user_roles (user_id, role_id)
        VALUES (1, (SELECT id FROM roles WHERE name = 'citizen'));"
    
    - name: Start backend server
      run: |
        cd bsc-js-backend
        npm run start:dev > backend.log 2>&1 &
        echo $! > backend.pid
        
        # Wait for server to be ready with timeout
        echo "Waiting for backend to be ready..."
        max_retries=30
        count=0
        while ! curl -s http://localhost:3000/health > /dev/null; do
          if [ $count -ge $max_retries ]; then
            echo "Backend failed to start properly. Server logs:"
            cat backend.log
            exit 1
          fi
          count=$((count+1))
          echo "Waiting for backend (attempt $count/$max_retries)..."
          sleep 2
        done
        
        echo "Backend is ready!"
      env:
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_USERNAME: root
        DB_PASSWORD: root
        DB_NAME: bulak_smart_connect_test
        JWT_SECRET: test_jwt_secret
    
    - name: Verify test user in database
      run: |
        echo "Checking test user in database:"
        DB_HASH=$(mysql -h 127.0.0.1 -uroot -proot -s -N -e "SELECT password FROM bulak_smart_connect_test.users WHERE email='test@example.com';")
        
        echo "Database hash: $DB_HASH"
        
        # Correctly pass the environment variable BEFORE the node command
        cd bsc-js-backend
        DB_HASH="$DB_HASH" node -e "
          const bcrypt = require('bcrypt'); 
          const stored = process.env.DB_HASH; 
          console.log('Hash from environment:', stored);
          const plain = 'password123';
          
          if (!stored) {
            console.error('ERROR: DB_HASH environment variable is empty');
            process.exit(1);
          }
          
          bcrypt.compare(plain, stored).then(result => {
            console.log('Bcrypt verification result:', result);
            if (!result) process.exit(1);
          });"
    
    - name: Test login endpoint
      run: |
        response=$(curl -s -X POST http://localhost:3000/auth/login \
          -H "Content-Type: application/json" \
          -d '{"emailOrUsername":"test@example.com","password":"password123"}')
        
        # Check if response contains access_token
        if echo "$response" | grep -q "access_token"; then
          echo "Login successful"
        else
          echo "Login failed. Response:"
          echo "$response"
          exit 1
        fi