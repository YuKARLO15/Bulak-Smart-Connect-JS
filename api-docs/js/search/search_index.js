var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AdminUpdateUserDto.html",[0,0.176,1,2.124]],["body/classes/AdminUpdateUserDto.html",[0,0.297,1,3.131,2,0.966,3,0.098,4,0.098,5,0.098,6,4.784,7,2.701,8,1.998,9,3.853,10,2.477,11,2.197,12,1.683,13,2.477,14,4.135,15,0.188,16,0.587,17,1.51,18,3.281,19,3.449,20,2.683,21,3.131,22,1.988,23,2.278,24,2.278,25,3.131,26,3.131,27,2.43,28,2.912,29,0.465,30,0.013,31,1.386,32,1.156,33,5.001,34,1.195,35,2.014,36,1.014,37,2.637,38,3.715,39,0.674,40,3.715,41,2.704,42,4.132,43,2.979,44,1.176,45,3.715,46,3.715,47,0.739,48,4.57,49,4.57,50,4.57,51,4.57,52,4.57,53,4.57,54,3.243,55,7.675,56,3.715,57,3.545,58,3.243,59,3.715,60,3.243,61,3.715,62,3.141,63,1.278,64,3.243,65,3.715,66,2.979,67,2.933,68,3.715,69,3.545,70,2.933,71,3.715,72,3.545,73,3.805,74,4.104,75,3.805,76,2.933,77,3.715,78,3.805,79,2.752,80,2.585,81,3.545,82,2.994,83,3.243,84,3.715,85,3.243,86,3.715,87,0.156,88,2.477,89,2.782,90,2.689,91,3.545,92,4.132,93,1.176,94,3.465,95,1.065,96,2.516,97,2.516,98,1.919,99,0.156,100,1.835,101,2.933,102,2.933,103,2.229,104,2.933,105,2.362,106,2.701,107,3.243,108,3.545,109,1.56,110,0.008,111,0.008]],["title/entities/Announcement.html",[112,1.259,113,2.785]],["body/entities/Announcement.html",[0,0.217,3,0.134,4,0.134,5,0.134,8,1.784,10,3.051,15,0.257,16,0.722,29,0.486,30,0.013,31,1.208,32,1.19,34,1.704,36,1.374,39,0.694,47,0.728,87,0.151,99,0.151,110,0.01,111,0.01,112,1.551,113,4.365,114,2.211,115,4.424,116,3.219,117,6.189,118,6.189,119,3.838,120,6.189,121,4.801,122,2.804,123,4.034,124,5.067,125,4.897,126,7.875,127,4.068,128,3.051,129,5.067,130,5.089,131,5.067,132,3.662,133,5.067,134,5.628,135,3.33,136,1.94,137,5.067,138,2.707,139,5.067,140,5.628,141,5.067,142,5.154,143,5.067,144,3.89,145,1.715,146,5.067]],["title/controllers/AnnouncementController.html",[147,1.662,148,2.99]],["body/controllers/AnnouncementController.html",[0,0.205,3,0.127,4,0.127,5,0.127,11,2.895,15,0.242,17,1.371,29,0.439,30,0.013,31,1.55,32,1.139,34,1.091,36,1.503,39,0.664,63,1.28,87,0.218,99,0.142,110,0.009,111,0.009,147,1.932,148,4.513,149,1.932,150,4.172,151,2.868,152,4.778,153,2.252,154,2.819,155,3.952,156,3.361,157,5.42,158,3.066,159,4.172,160,4.929,161,4.383,162,4.778,163,2.843,164,2.717,165,4.778,166,2.36,167,3.946,168,4.778,169,4.172,170,6.207,171,4.778,172,2.085,173,3.361,174,4.204,175,2.587,176,4.513,177,4.778,178,3.038,179,5.419,180,4.513,181,4.778,182,4.204,183,3.474,184,2.868,185,3.038,186,7.565,187,3.236,188,0.957,189,4.383,190,4.172,191,2.587,192,4.901,193,2.719,194,4.778,195,2.261,196,1.862,197,4.778,198,2.082,199,4.778,200,4.778,201,4.778,202,4.778,203,4.172,204,4.778,205,3.474,206,4.778,207,3.773,208,4.778]],["title/modules/AnnouncementModule.html",[209,1.392,210,2.785]],["body/modules/AnnouncementModule.html",[0,0.251,3,0.155,4,0.155,5,0.155,30,0.013,87,0.239,99,0.174,110,0.01,111,0.01,113,3.962,148,5.497,149,2.849,188,1.172,189,5.399,190,5.108,209,2.56,210,5.587,211,2.89,212,2.89,213,3.168,214,3.168,215,2.89,216,4.094,217,4.094,218,5.108,219,5.108,220,5.108,221,3.815,222,2.89,223,3.022,224,5.85,225,3.329,226,2.199,227,5.85,228,5.108,229,3.329,230,5.85]],["title/injectables/AnnouncementService.html",[189,2.614,231,1.002]],["body/injectables/AnnouncementService.html",[0,0.184,3,0.114,4,0.114,5,0.114,11,2.742,15,0.217,17,1.363,29,0.436,30,0.013,31,1.524,34,0.978,36,1.489,39,0.658,63,1.273,87,0.224,99,0.128,110,0.009,111,0.009,113,5.204,116,2.623,119,3.537,136,1.698,145,1.45,153,2.095,154,2.967,155,3.785,156,3.127,157,5.042,158,2.853,159,3.74,160,4.885,163,2.826,164,2.634,166,2.853,169,5.042,172,1.87,173,3.127,174,3.911,175,3.127,178,2.724,179,5.292,185,2.724,188,0.858,189,3.671,191,2.32,192,4.559,193,2.438,198,1.96,226,1.61,228,3.74,231,1.407,232,2.028,233,3.74,234,3.142,235,2.335,236,4.284,237,3.611,238,4.284,239,5.775,240,4.284,241,3.549,242,4.284,243,4.284,244,4.284,245,4.284,246,4.284,247,2.724,248,2.32,249,4.284,250,1.669,251,2.07,252,4.284,253,2.937,254,6.532,255,5.775,256,3.911,257,3.911,258,4.284,259,1.61,260,1.15,261,4.284,262,2.028,263,3.911,264,4.284,265,4.284,266,1.402,267,4.284,268,2.901]],["title/controllers/AppController.html",[147,1.662,269,2.99]],["body/controllers/AppController.html",[0,0.255,3,0.158,4,0.158,5,0.158,15,0.301,30,0.013,32,1.046,39,0.61,47,0.684,87,0.212,99,0.177,110,0.011,111,0.011,147,2.877,149,2.405,153,2.582,164,2.494,188,1.192,195,2.815,196,2.318,198,1.911,269,5.175,270,5.194,271,6.89,272,7.892,273,5.949,274,7.117,275,5.949,276,1.791,277,4.841,278,5.194,279,5.949,280,5.949]],["title/modules/AppModule.html",[209,1.392,281,2.99]],["body/modules/AppModule.html",[0,0.167,3,0.103,4,0.103,5,0.103,27,1.363,28,1.634,29,0.226,30,0.013,47,0.486,87,0.246,99,0.116,110,0.008,111,0.008,114,1.698,136,1.834,149,2.186,187,3.662,188,0.78,209,2.103,210,4.946,211,1.922,212,1.922,213,2.107,214,2.107,215,1.922,216,3.364,217,2.107,221,2.927,222,1.922,223,2.01,225,2.214,226,1.463,229,3.536,234,2.032,241,2.93,251,1.152,253,2.335,266,2.033,269,4.518,277,4.643,278,3.397,281,6.114,282,3.397,283,3.397,284,3.397,285,4.946,286,4.946,287,4.946,288,4.946,289,4.383,290,4.946,291,4.643,292,4.383,293,3.891,294,4.721,295,3.821,296,2.107,297,3.397,298,2.829,299,3.072,300,3.891,301,3.891,302,3.891,303,3.891,304,3.072,305,3.891,306,3.891,307,3.891,308,3.891,309,2.829,310,3.891,311,1.698,312,3.072,313,3.072,314,3.072,315,3.891,316,3.891,317,3.891,318,3.072,319,3.397,320,4.721,321,3.397,322,3.891,323,2.829,324,3.891,325,3.891,326,3.891,327,2.829,328,3.891,329,3.397,330,3.397,331,4.721,332,3.891,333,2.927,334,3.729,335,5.425,336,2.829,337,3.891,338,1.634,339,3.891,340,3.891,341,3.891,342,5.407,343,3.397,344,6.213,345,4.882,346,3.891,347,3.891,348,7.055,349,3.891,350,3.891,351,3.891,352,3.891,353,1.767,354,3.891,355,5.407,356,3.891,357,3.072,358,2.335,359,3.891,360,5.301,361,3.891,362,2.01,363,3.891,364,3.891,365,3.891,366,3.891,367,3.891,368,5.407,369,3.072,370,3.891,371,2.829,372,3.397,373,3.891,374,3.891,375,3.931,376,2.335,377,3.891,378,2.635,379,3.891,380,3.891,381,3.891,382,3.891,383,3.891,384,3.891,385,3.891,386,3.397,387,3.891]],["title/injectables/AppService.html",[231,1.002,277,2.614]],["body/injectables/AppService.html",[0,0.271,3,0.167,4,0.167,5,0.167,15,0.32,30,0.013,39,0.541,47,0.662,87,0.188,99,0.188,110,0.011,111,0.011,153,2.674,164,2.211,188,1.265,198,1.695,231,1.796,232,2.987,271,7.024,277,4.685,388,5.511,389,6.311,390,6.311,391,6.311]],["title/classes/ApplicationNotificationDto.html",[0,0.176,392,2.226]],["body/classes/ApplicationNotificationDto.html",[0,0.315,2,0.946,3,0.096,4,0.096,5,0.096,8,2.022,15,0.184,16,0.578,20,2.914,22,2.418,27,2.099,29,0.415,30,0.013,32,0.958,34,1.178,36,1,37,2.596,39,0.558,47,0.737,79,2.342,80,2.548,82,2.96,87,0.154,88,3.478,89,2.099,90,2.676,93,1.151,94,2.615,95,1.043,99,0.213,100,1.797,110,0.008,111,0.008,127,1.879,128,1.722,260,0.977,276,1.732,311,3.452,362,2.664,392,2.792,393,2.183,394,3.244,395,3.095,396,3.085,397,3.119,398,2.664,399,3.638,400,3.638,401,2.664,402,3.638,403,3.638,404,2.935,405,3.87,406,3.478,407,2.313,408,3.225,409,3.98,410,4.411,411,4.183,412,3.638,413,3.095,414,2.737,415,3.176,416,3.638,417,2.894,418,2.183,419,1.97,420,1.797,421,3.529,422,3.946,423,2.935,424,1.97,425,4.001,426,3.095,427,2.935,428,3.279,429,3.596,430,2.251,431,3.912,432,3.279,433,3.279,434,3.095,435,3.279,436,3.596,437,3.809,438,1.97,439,2.183,440,1.97,441,2.183,442,2.183,443,2.183,444,2.183,445,2.183,446,2.183,447,3.095,448,2.183,449,3.095,450,2.183,451,2.313,452,2.313,453,2.313,454,2.313,455,2.313,456,2.07,457,2.07,458,2.07,459,2.07,460,1.97,461,1.97,462,2.183,463,2.07,464,1.588,465,1.97,466,1.797,467,1.879,468,1.879]],["title/entities/ApplicationStatusHistory.html",[112,1.259,469,2.785]],["body/entities/ApplicationStatusHistory.html",[0,0.197,3,0.122,4,0.122,5,0.122,15,0.307,16,0.679,29,0.47,30,0.013,31,1.349,32,1.166,36,1.312,39,0.68,47,0.714,63,1.324,87,0.181,99,0.137,110,0.009,111,0.009,112,1.409,114,2.009,122,2.277,123,3.447,127,3.964,130,4.783,132,3.498,135,4.101,136,1.995,144,3.791,145,1.558,266,1.506,276,2.021,394,3.666,397,2.955,398,3.129,469,4.103,470,4.149,471,7.012,472,4.019,473,6.771,474,6.771,475,5.912,476,6.771,477,4.304,478,4.574,479,2.927,480,6.058,481,4.783,482,4.405,483,4.603,484,6.281,485,4.603,486,4.486,487,5.58,488,4.603,489,3.118,490,6.058,491,4.603,492,6.058,493,4.603,494,4.603,495,6.058,496,4.603,497,6.058,498,4.603,499,5.289,500,4.603,501,3.851,502,3.636,503,2.62,504,2.927,505,4.603,506,4.019,507,4.603,508,2.274]],["title/entities/Appointment.html",[112,1.259,509,2.34]],["body/entities/Appointment.html",[0,0.182,3,0.113,4,0.113,5,0.113,12,1.641,15,0.216,16,0.644,20,2.361,23,2.446,24,2.446,29,0.485,30,0.013,31,1.306,32,1.219,34,1.486,36,1.261,39,0.711,44,1.346,47,0.751,63,0.72,87,0.171,99,0.171,110,0.009,111,0.009,112,1.302,114,1.856,116,2.956,121,4.407,122,2.82,123,3.704,125,3.653,132,3.362,135,3.601,136,1.994,138,2.085,142,4.732,144,4.139,145,1.44,266,1.881,276,1.638,414,3.056,464,2.508,479,2.704,501,3.653,502,3.449,509,3.27,510,3.358,511,5.138,512,4.407,513,5.138,514,4.732,515,4.407,516,3.906,517,4.407,518,2.837,519,4.253,520,4.253,521,3.358,522,4.253,523,4.253,524,4.253,525,4.253,526,4.253,527,3.713,528,4.253,529,4.253,530,4.537,531,4.253,532,4.253,533,4.253,534,4.628,535,4.253,536,4.253,537,2.88,538,4.537,539,5.746,540,4.253,541,4.253,542,2.42,543,3.892,544,3.653,545,3.449,546,4.253,547,3.092,548,3.713]],["title/controllers/AppointmentController.html",[147,1.662,549,2.99]],["body/controllers/AppointmentController.html",[0,0.112,3,0.069,4,0.069,5,0.069,8,1.017,10,2.627,11,2.774,12,1.724,15,0.133,17,1.319,29,0.422,30,0.013,31,0.491,32,1.085,36,1.505,39,0.633,47,0.742,63,1.232,87,0.217,95,0.75,96,1.773,99,0.078,110,0.006,111,0.006,122,2.777,147,1.059,149,1.059,151,1.571,153,1.466,154,2.724,155,2.188,156,2.673,158,1.996,161,2.569,163,2.777,164,2.589,166,1.293,167,1.664,175,1.418,176,1.904,178,1.664,180,1.904,182,3.343,183,1.904,184,1.571,185,3.528,187,1.773,188,0.525,191,1.418,193,1.49,195,1.239,196,1.575,198,1.955,205,3.589,207,2.067,234,3.122,250,1.02,251,1.644,253,1.855,259,2.383,260,1.88,266,1.323,276,1.717,338,1.697,375,1.904,508,2.742,509,4.585,512,3.343,518,1.02,534,3.528,549,2.938,550,2.286,551,6.114,552,3.529,553,4.041,554,3.529,555,4.041,556,4.936,557,3.528,558,3.343,559,2.286,560,4.03,561,3.697,562,2.286,563,2.618,564,2.938,565,2.3,566,2.3,567,2.618,568,3.596,569,2.618,570,2.286,571,5.372,572,2.286,573,4.041,574,2.618,575,5.769,576,2.737,577,2.286,578,5.55,579,4.041,580,2.618,581,2.286,582,2.618,583,2.618,584,2.618,585,2.618,586,2.286,587,4.041,588,4.31,589,2.618,590,2.618,591,2.618,592,4.846,593,4.451,594,2.618,595,2.618,596,5.534,597,4.041,598,2.618,599,2.618,600,5.237,601,2.618,602,2.618,603,2.618,604,2.618,605,4.621,606,2.286,607,2.618,608,1.571,609,2.618,610,2.618,611,1.773,612,3.413,613,2.618,614,2.618,615,3.138,616,2.286,617,3.191,618,1.49,619,1.904,620,1.773,621,3.248,622,1.904,623,0.95,624,1.904,625,1.773,626,2.286,627,2.067,628,1.904,629,4.804,630,2.938,631,1.904,632,2.618,633,2.618,634,4.062,635,2.067,636,1.571,637,2.618,638,4.609,639,2.618,640,2.618,641,4.735,642,2.618,643,2.618,644,2.067,645,4.062,646,2.618,647,4.041,648,2.618,649,2.618,650,2.618,651,6.339,652,2.618,653,2.286,654,1.904,655,2.618,656,2.618,657,4.041,658,4.041,659,2.673,660,2.618,661,2.286,662,2.618,663,2.618,664,2.286,665,2.286,666,2.618,667,2.618,668,2.067,669,2.618,670,2.286,671,4.936,672,2.618,673,2.618,674,2.188,675,4.041,676,4.041,677,3.529,678,3.529,679,3.529,680,3.529,681,4.041,682,4.041,683,2.618,684,2.618,685,2.067,686,2.618,687,2.618,688,2.286,689,2.067,690,2.618,691,1.571,692,2.618,693,2.618,694,2.618,695,2.618,696,2.618]],["title/modules/AppointmentModule.html",[209,1.392,285,2.785]],["body/modules/AppointmentModule.html",[0,0.251,3,0.155,4,0.155,5,0.155,30,0.013,87,0.239,99,0.174,110,0.01,111,0.01,149,2.849,188,1.172,209,2.56,211,2.89,212,2.89,213,3.168,214,3.168,215,2.89,216,4.094,217,4.094,221,3.815,222,2.89,223,3.022,225,3.329,226,2.199,229,3.329,285,5.587,509,3.329,549,5.497,615,5.399,616,5.108,625,3.962,697,5.108,698,5.108,699,5.108,700,5.85,701,5.85,702,5.85]],["title/classes/AppointmentNotificationDto.html",[0,0.176,703,2.99]],["body/classes/AppointmentNotificationDto.html",[0,0.258,2,1.187,3,0.121,4,0.121,5,0.121,8,1.927,15,0.231,16,0.675,17,1.3,20,2.187,22,2.137,23,1.717,24,1.717,29,0.484,30,0.013,32,1.125,33,3.831,37,2.562,39,0.656,44,1.445,47,0.746,87,0.18,88,2.852,89,2.363,90,2.612,93,1.445,94,2.944,95,1.309,99,0.136,110,0.009,111,0.009,122,1.717,136,1.567,260,1.618,276,1.965,376,2.741,396,3.394,405,2.473,414,2.53,417,2.705,420,2.977,463,2.599,509,4.51,512,4.568,516,2.741,543,3.093,545,3.617,703,4.382,704,6.818,705,3.606,706,5.889,707,5.886,708,2.904,709,4.081,710,4.56,711,6.027,712,4.568,713,5.262,714,5.262,715,4.758,716,4.568,717,3.988,718,5.262,719,4.568,720,3.988,721,5.886,722,5.262,723,4.568,724,4.568,725,3.831,726,4.568,727,4.568,728,6.262,729,5.325,730,5.889,731,4.382,732,4.568,733,3.988,734,4.305,735,3.988,736,3.988]],["title/injectables/AppointmentService.html",[231,1.002,615,2.614]],["body/injectables/AppointmentService.html",[0,0.096,3,0.059,4,0.059,5,0.059,11,2.14,12,0.765,15,0.114,16,0.401,17,1.308,29,0.438,30,0.013,31,1.387,34,0.512,36,1.475,39,0.641,47,0.712,63,1.222,79,1.018,87,0.186,96,2.423,99,0.067,109,0.941,110,0.005,111,0.005,122,2.989,145,0.759,153,1.298,154,2.028,155,1.937,156,2.417,158,1.767,163,2.713,164,2.563,166,1.107,172,0.978,175,1.937,178,1.425,188,0.449,191,1.214,193,1.276,196,1.74,198,1.875,226,0.843,231,0.872,232,1.061,234,3.089,235,1.446,237,2.633,241,3.425,247,1.425,248,1.214,250,2.665,251,2.313,253,2.57,256,3.451,257,1.518,259,2.81,260,1.909,262,2.113,263,2.423,276,1.816,338,2.14,376,4.104,398,1.158,406,2.113,425,1.158,430,3.102,464,0.978,508,2.205,509,4.33,511,5.108,512,3.451,513,4.687,518,1.394,534,3.24,543,1.518,544,1.425,545,1.345,548,3.898,551,4.862,552,3.898,554,3.123,558,3.023,559,1.957,560,3.774,568,1.107,576,2.423,577,1.957,586,3.123,588,4.449,596,4.862,600,3.898,605,4.381,608,1.345,612,1.276,615,2.274,617,2.824,625,1.518,661,1.957,668,2.824,674,3.015,708,3.24,737,1.957,738,4.464,739,3.577,740,5.096,741,3.577,742,4.464,743,5.096,744,2.241,745,3.577,746,3.577,747,2.241,748,2.241,749,2.241,750,1.63,751,2.241,752,3.705,753,3.577,754,2.241,755,2.241,756,2.241,757,2.241,758,3.577,759,2.241,760,2.241,761,2.241,762,2.241,763,2.241,764,2.241,765,2.241,766,2.241,767,3.577,768,1.957,769,2.241,770,2.241,771,1.77,772,1.957,773,2.241,774,3.294,775,2.241,776,2.241,777,2.241,778,3.525,779,2.241,780,4.464,781,2.241,782,2.241,783,2.241,784,2.241,785,2.241,786,3.898,787,3.577,788,5.569,789,3.577,790,5.936,791,4.464,792,4.464,793,2.241,794,3.577,795,3.577,796,3.577,797,3.577,798,3.577,799,4.464,800,3.577,801,2.241,802,2.147,803,2.241,804,3.577,805,2.241,806,3.196,807,4.124,808,5.096,809,1.518,810,2.241,811,2.241,812,2.241,813,1.957,814,2.241,815,2.241,816,2.241,817,3.577,818,3.577,819,3.577,820,1.957,821,2.241,822,4.464,823,2.241,824,2.241,825,2.241,826,2.241,827,1.345,828,2.241,829,2.241,830,1.957,831,2.241,832,2.241,833,2.241,834,2.241,835,2.241,836,2.241,837,3.525,838,3.705,839,2.241,840,2.241,841,2.241,842,2.241,843,2.241,844,2.241,845,1.957,846,3.577,847,3.577,848,3.577,849,3.123,850,3.577,851,1.77,852,5.936,853,2.241,854,2.241,855,2.241,856,3.577,857,2.241,858,2.241,859,2.241,860,2.241,861,1.276,862,1.158,863,1.63,864,4.464,865,2.036,866,3.577,867,3.577,868,2.241,869,1.957,870,3.577,871,2.241]],["title/modules/AuthModule.html",[209,1.392,286,2.785]],["body/modules/AuthModule.html",[0,0.207,3,0.128,4,0.128,5,0.128,12,1.035,30,0.013,87,0.248,99,0.144,110,0.009,111,0.009,149,2.53,188,0.969,209,2.348,211,2.39,212,2.39,213,2.619,214,2.619,215,2.39,216,3.755,217,3.755,221,3.388,222,2.39,223,2.499,225,2.753,226,1.818,229,3.947,286,5.733,289,4.669,291,5.265,292,4.971,294,5.463,295,4.173,296,2.619,304,3.819,311,2.731,312,3.819,313,3.819,314,3.819,318,3.819,319,4.224,542,2.753,872,4.224,873,4.837,874,4.224,875,4.224,876,5.609,877,4.971,878,4.837,879,5.476,880,4.837,881,3.819,882,6.257,883,3.075,884,4.224,885,4.837,886,3.819,887,4.224,888,4.837,889,4.837,890,3.075,891,4.837,892,4.224,893,3.517,894,4.837,895,4.837,896,4.837]],["title/interfaces/AuthenticatedUser.html",[561,2.031,897,1.392]],["body/interfaces/AuthenticatedUser.html",[0,0.219,3,0.135,4,0.135,5,0.135,13,2.419,15,0.259,16,0.726,22,2.298,29,0.413,30,0.013,31,1.403,35,1.565,36,1.497,39,0.438,41,3.677,44,1.617,47,0.694,63,0.865,87,0.223,99,0.193,110,0.01,111,0.01,188,1.024,195,2.419,198,1.373,231,1.579,251,2.217,259,2.436,260,1.74,266,1.673,295,4.051,296,2.768,334,3.068,518,2.526,561,3.516,623,2.908,877,3.068,883,3.249,890,4.121,893,3.716,897,2.194,898,2.768,899,3.716,900,3.461,901,4.035,902,4.035,903,5.117,904,3.716,905,4.389,906,3.716,907,4.035,908,4.035,909,3.716,910,4.035,911,4.82,912,4.035,913,3.461,914,4.035,915,4.035,916,4.035,917,4.035,918,4.035,919,4.035,920,3.461,921,5.175,922,4.035,923,4.035,924,3.461,925,3.716,926,4.035,927,4.035,928,4.035,929,4.035]],["title/entities/Counter.html",[112,1.259,930,2.34]],["body/entities/Counter.html",[0,0.222,3,0.137,4,0.137,5,0.137,15,0.263,16,0.733,29,0.46,30,0.013,31,1.41,32,1.14,34,1.494,36,1.389,39,0.665,44,1.641,47,0.588,63,1.313,87,0.195,99,0.195,110,0.01,111,0.01,112,1.588,114,2.263,125,3.297,132,3.702,135,3.887,136,1.863,144,3.832,145,1.756,276,1.804,414,3.257,486,3.113,502,3.926,537,3.512,538,5.165,930,3.723,931,4.095,932,7.166,933,7.166,934,3.913,935,5.096,936,4.528,937,6.542,938,7.525,939,6.542,940,5.187,941,5.187,942,5.187,943,5.187,944,6.774,945,5.187,946,5.712,947,5.187,948,4.159,949,4.756,950,5.187,951,5.187]],["title/classes/CreateAnnouncementDto.html",[0,0.176,160,2.614]],["body/classes/CreateAnnouncementDto.html",[0,0.294,2,1.458,3,0.149,4,0.149,5,0.149,8,1.868,15,0.284,16,0.77,17,1.464,29,0.461,30,0.013,32,1.166,39,0.68,47,0.742,87,0.167,89,2.71,90,2.781,93,1.775,99,0.167,110,0.01,111,0.01,117,6.481,118,6.481,119,4.019,120,6.481,138,2.491,160,4.366,734,4.455,952,7.051,953,4.427,954,5.996,955,5.608,956,5.996,957,5.608,958,5.608,959,5.608,960,5.608,961,5.608,962,5.422]],["title/classes/CreateAppointmentDto.html",[0,0.176,560,2.614]],["body/classes/CreateAppointmentDto.html",[0,0.27,2,1.268,3,0.129,4,0.129,5,0.129,15,0.247,16,0.705,17,1.413,20,2.526,23,2.617,24,2.617,29,0.478,30,0.013,31,1.179,32,1.211,39,0.706,47,0.757,87,0.188,89,2.779,90,2.816,93,1.544,99,0.145,110,0.009,111,0.009,138,2.282,276,1.752,511,5.497,513,5.497,514,5.063,515,4.715,516,4.179,517,4.715,518,2.713,534,4.426,560,3.999,625,3.303,734,4.823,735,5.492,954,4.259,963,7.24,964,3.851,965,7.796,966,4.878,967,4.878,968,4.878,969,4.878,970,4.878,971,4.878,972,4.878,973,4.878,974,4.878,975,4.878,976,4.259,977,4.878,978,4.878,979,3.303,980,4.259]],["title/classes/CreateDocumentApplicationDto.html",[0,0.176,981,2.785]],["body/classes/CreateDocumentApplicationDto.html",[0,0.271,2,1.275,3,0.13,4,0.13,5,0.13,8,1.92,15,0.249,16,0.708,17,1.458,23,1.844,24,1.844,29,0.453,30,0.013,32,1.083,37,2.546,39,0.631,47,0.663,87,0.208,89,2.446,90,2.446,93,1.552,95,1.406,99,0.146,110,0.009,111,0.009,266,2.066,276,1.589,358,3.789,395,4.156,396,3.304,397,3.511,401,3.261,408,2.552,414,2.059,417,2.767,468,3.261,470,3.94,477,4.438,503,4.52,504,3.118,659,3.991,709,4.275,979,3.322,981,4.275,982,6.659,983,3.872,984,5.512,985,6.095,986,6.313,987,6.313,988,4.984,989,4.905,990,4.282,991,4.905,992,4.905,993,4.984,994,6.313,995,6.313,996,4.905,997,4.905,998,6.313,999,6.313,1000,4.905,1001,6.313,1002,3.566,1003,4.905,1004,4.905,1005,4.905,1006,4.905,1007,4.905,1008,4.905,1009,4.905,1010,4.984,1011,4.905,1012,4.905]],["title/classes/CreateQueueDto.html",[0,0.176,1013,3.246]],["body/classes/CreateQueueDto.html",[0,0.276,2,1.317,3,0.134,4,0.134,5,0.134,15,0.257,16,0.722,17,1.493,20,2.572,23,2.665,24,2.665,29,0.475,30,0.013,31,1.208,32,1.201,39,0.7,47,0.76,87,0.151,89,2.803,90,2.838,93,1.603,99,0.151,110,0.01,111,0.01,138,2.339,514,5.154,515,4.801,516,4.255,517,4.801,518,2.762,734,4.624,956,6.514,962,5.089,1013,5.089,1014,7.194,1015,4.001,1016,6.189,1017,6.189,1018,5.067,1019,5.067,1020,5.067,1021,5.067,1022,5.067,1023,5.067,1024,5.067,1025,5.067,1026,5.067,1027,5.067]],["title/classes/CreateUserDto.html",[0,0.176,1028,2.34]],["body/classes/CreateUserDto.html",[0,0.229,2,0.991,3,0.101,4,0.101,5,0.101,7,2.771,8,2.102,12,1.72,15,0.193,16,0.597,17,1.489,18,3.327,19,3.497,20,1.383,21,3.174,22,2.134,23,2.31,24,2.31,25,3.174,26,3.174,27,2.453,28,2.94,29,0.466,30,0.013,31,1.36,32,1.161,34,1.217,35,2.037,36,1.033,37,2.501,39,0.677,41,2.753,42,4.207,43,3.033,44,1.206,47,0.741,57,3.609,62,3.198,63,1.338,66,3.033,69,3.609,72,3.609,73,3.875,74,4.913,75,2.771,80,2.632,81,3.609,82,3.035,87,0.159,88,2.522,89,2.662,90,2.705,91,4.161,92,4.207,93,1.206,94,3.316,95,1.092,99,0.114,103,3.994,105,4.23,108,2.581,110,0.008,111,0.008,136,1.385,333,2.885,417,2.54,425,3.174,734,3.994,1028,3.033,1029,6.964,1030,5.88,1031,4.653,1032,3.811,1033,3.811,1034,3.388,1035,3.811,1036,3.811,1037,4.23,1038,4.653,1039,3.811,1040,3.811,1041,5.329,1042,3.811,1043,3.328,1044,5.81,1045,3.811,1046,3.328,1047,3.033,1048,3.609,1049,4.207,1050,3.811,1051,3.328,1052,5.329,1053,3.811,1054,3.328,1055,4.207,1056,3.811,1057,3.811,1058,3.811,1059,5.329,1060,3.811,1061,4.653,1062,3.811,1063,3.328,1064,3.609,1065,3.811,1066,2.771]],["title/entities/DocumentApplication.html",[112,1.259,478,2.614]],["body/entities/DocumentApplication.html",[0,0.158,3,0.138,4,0.098,5,0.16,12,1.579,15,0.264,16,0.584,29,0.479,30,0.013,31,1.229,32,1.174,34,1.189,36,1.17,39,0.685,44,1.167,47,0.645,63,1.315,87,0.196,99,0.18,110,0.008,111,0.008,112,1.129,114,1.609,116,2.741,121,4.088,122,2.465,123,2.963,125,3.31,127,3.118,128,2.464,130,4.111,135,4.012,136,2.042,142,3.786,144,3.722,145,1.248,266,2.146,276,1.65,395,3.893,397,1.609,401,1.905,413,2.69,414,3.261,464,2.272,465,2.819,466,1.822,467,1.905,468,3.118,469,4.441,470,4.158,477,3.837,478,3.31,479,2.344,482,4.768,486,4.151,487,3.786,489,2.497,499,4.546,501,3.31,502,3.125,503,2.098,508,1.822,518,2.352,537,2.497,542,2.098,984,4.765,985,5.27,993,4.111,1067,5.853,1068,2.911,1069,4.765,1070,6.036,1071,6.036,1072,5.207,1073,3.687,1074,5.207,1075,3.687,1076,4.111,1077,3.687,1078,4.441,1079,4.546,1080,5.207,1081,3.687,1082,5.207,1083,5.207,1084,3.687,1085,3.687,1086,3.687,1087,5.207,1088,3.687,1089,5.029,1090,3.687,1091,5.207,1092,5.207,1093,5.207,1094,3.687,1095,3.687,1096,3.22,1097,4.546,1098,3.687,1099,5.178,1100,3.687,1101,3.687,1102,5.207,1103,5.27,1104,3.22,1105,3.22,1106,3.22,1107,3.22,1108,4.546,1109,3.22,1110,2.681,1111,3.22,1112,3.22,1113,3.22,1114,3.22,1115,3.22,1116,4.546,1117,4.546,1118,3.22,1119,3.22,1120,3.22,1121,2.911,1122,3.687,1123,3.687,1124,3.687,1125,3.687,1126,3.687,1127,3.687]],["title/controllers/DocumentApplicationsController.html",[147,1.662,1128,2.99]],["body/controllers/DocumentApplicationsController.html",[0,0.094,3,0.058,4,0.058,5,0.18,8,1.708,10,3.395,11,2.59,12,1.782,15,0.111,17,1.23,29,0.41,30,0.013,32,1.037,36,1.489,39,0.605,44,2.029,47,0.737,63,1.149,87,0.211,95,0.627,99,0.065,110,0.005,111,0.005,136,1.142,147,0.884,149,0.884,151,1.313,153,1.273,154,2.498,155,2.378,156,2.378,158,1.733,161,2.23,163,2.551,164,2.474,166,1.08,167,1.39,173,1.184,175,1.184,176,1.59,178,1.39,180,1.59,182,3.403,183,1.59,184,1.313,185,2.792,187,1.481,188,0.438,191,1.184,193,1.245,196,1.367,198,1.926,205,4.269,207,1.727,234,3.069,235,0.884,241,1.531,250,1.367,251,2.054,253,1.889,259,0.822,260,1.477,262,2.378,266,0.716,276,1.708,309,5.216,333,1.184,338,1.473,353,0.993,358,1.313,397,3.412,408,0.884,470,3.706,477,1.39,503,3.764,504,1.39,508,2.482,518,2.834,557,3.195,558,2.974,561,3.983,562,1.91,564,2.551,565,1.996,566,3.131,568,3.425,571,3.654,575,5.598,576,3.403,581,1.91,593,4.408,606,1.91,608,1.313,611,1.481,612,1.996,618,1.245,619,1.59,620,1.481,621,1.184,622,1.59,623,0.794,624,1.59,626,1.91,627,1.727,628,1.59,629,5.216,630,4.269,631,1.59,634,1.481,635,1.727,636,1.313,638,5.134,641,5.358,644,3.468,645,2.974,654,2.551,659,1.184,670,3.063,679,5.386,685,1.727,691,1.313,708,2.23,710,1.39,838,1.59,981,3.403,1002,1.59,1069,5.358,1089,2.551,1128,2.551,1129,1.91,1130,5.386,1131,4.392,1132,5.025,1133,4.392,1134,4.392,1135,4.392,1136,2.187,1137,2.187,1138,2.187,1139,3.508,1140,2.187,1141,2.187,1142,2.187,1143,2.376,1144,2.187,1145,2.187,1146,2.187,1147,5.872,1148,3.033,1149,1.91,1150,3.968,1151,3.654,1152,3.063,1153,3.968,1154,2.187,1155,2.187,1156,4.392,1157,2.187,1158,2.187,1159,2.187,1160,3.508,1161,2.77,1162,2.187,1163,2.187,1164,2.187,1165,2.187,1166,3.508,1167,3.968,1168,2.187,1169,4.392,1170,2.187,1171,3.508,1172,2.187,1173,2.187,1174,2.187,1175,5.025,1176,3.654,1177,2.187,1178,4.392,1179,2.187,1180,2.187,1181,2.187,1182,3.468,1183,5.127,1184,2.187,1185,2.187,1186,3.063,1187,2.187,1188,3.508,1189,3.508,1190,2.105,1191,1.91,1192,1.727,1193,2.187,1194,1.91,1195,1.91,1196,3.193,1197,1.91,1198,3.063,1199,2.187,1200,2.187,1201,2.187,1202,2.187,1203,2.187,1204,2.187,1205,2.187,1206,2.187,1207,1.91,1208,3.508,1209,2.187,1210,2.187,1211,1.727,1212,3.508,1213,2.187,1214,2.187,1215,2.187,1216,2.187,1217,2.187,1218,2.187,1219,2.187,1220,2.187,1221,2.187,1222,4.392,1223,1.91,1224,1.59,1225,2.187,1226,2.187,1227,2.187,1228,2.187,1229,6.412,1230,2.187,1231,2.77,1232,3.508,1233,3.508,1234,3.508,1235,2.187,1236,2.187,1237,1.481,1238,2.187,1239,2.187,1240,2.187,1241,2.187,1242,2.187,1243,2.187,1244,2.187,1245,2.187,1246,3.063,1247,2.187,1248,2.187,1249,2.187,1250,2.187,1251,2.187,1252,1.313,1253,1.91,1254,2.187,1255,2.187,1256,2.187,1257,2.187]],["title/modules/DocumentApplicationsModule.html",[209,1.392,287,2.785]],["body/modules/DocumentApplicationsModule.html",[0,0.233,3,0.144,4,0.144,5,0.144,30,0.013,87,0.245,99,0.162,110,0.01,111,0.01,149,2.726,188,1.091,209,2.48,211,2.689,212,2.689,213,2.947,214,2.947,215,2.689,216,3.966,217,3.966,221,3.651,222,2.689,223,2.812,225,3.098,226,2.046,229,3.098,276,1.37,287,5.644,309,3.958,469,4.566,470,2.812,478,4.286,503,3.837,504,3.46,1002,4.902,1078,4.566,1104,4.752,1105,4.752,1128,5.326,1196,6.119,1197,4.752,1258,4.752,1259,4.752,1260,4.752,1261,5.051,1262,5.443,1263,5.443,1264,5.443,1265,5.443,1266,5.443]],["title/entities/DocumentFile.html",[112,1.259,1078,2.785]],["body/entities/DocumentFile.html",[0,0.196,3,0.121,4,0.121,5,0.121,15,0.305,16,0.675,29,0.474,30,0.013,31,1.344,32,1.178,36,1.307,39,0.687,47,0.728,63,1.341,87,0.18,99,0.136,110,0.009,111,0.009,112,1.398,114,1.993,122,2.265,123,3.43,127,4.182,128,2.852,132,3.484,134,5.262,135,3.113,136,1.567,140,5.262,144,3.857,145,1.546,394,3.652,397,2.944,398,3.113,470,4.182,478,4.56,479,2.904,481,4.758,482,3.321,484,6.262,486,4.596,487,4.382,489,3.093,501,3.831,502,3.617,503,2.599,504,2.904,506,3.988,508,2.256,1067,5.886,1078,4.081,1183,5.889,1207,5.889,1267,3.988,1268,6.745,1269,6.745,1270,6.745,1271,6.745,1272,6.027,1273,3.988,1274,4.568,1275,4.568,1276,6.027,1277,6.027,1278,4.568,1279,6.027,1280,4.568,1281,6.027,1282,6.027,1283,4.568,1284,6.027,1285,4.568,1286,4.568,1287,6.027,1288,4.568,1289,6.027,1290,4.568,1291,4.568,1292,4.568]],["title/interfaces/FindAllOptions.html",[897,1.392,1293,2.785]],["body/interfaces/FindAllOptions.html",[0,0.105,1,1.976,3,0.065,4,0.065,5,0.065,10,1.154,11,2.243,12,1.664,14,1.976,15,0.124,16,0.429,17,1.052,18,3.333,19,3.503,21,2.997,22,2.048,23,2.505,24,2.419,25,3.622,26,3.54,27,2.157,28,3.049,29,0.31,30,0.013,31,1.397,34,0.557,35,2.223,36,1.46,43,2.176,44,2.109,47,0.616,63,1.042,66,1.388,87,0.204,98,2.437,99,0.114,109,1.024,110,0.006,111,0.006,116,1.108,119,2.554,136,0.634,138,0.885,145,0.826,154,1.108,158,2.33,166,1.205,173,3.608,175,1.32,188,0.489,191,1.32,196,0.95,198,1.919,209,0.826,226,0.917,231,0.932,234,2.576,235,0.986,237,1.976,241,2.809,247,1.55,248,1.32,250,1.838,251,2.423,253,2.942,256,1.651,257,1.651,259,2.576,260,1.883,262,2.528,263,2.59,268,1.651,338,1.606,353,1.737,406,1.154,408,0.986,430,1.669,508,2.866,557,1.55,608,1.464,612,1.388,623,2.635,636,1.464,674,2.554,750,1.773,752,1.773,774,1.205,802,2.295,806,1.205,807,2.437,827,1.464,861,2.176,862,1.26,865,3.302,897,1.295,898,1.32,1028,2.685,1034,1.55,1047,1.388,1064,3.195,1148,2.437,1237,2.59,1252,1.464,1293,3.195,1294,1.773,1295,4.092,1296,4.988,1297,1.773,1298,1.773,1299,1.773,1300,2.431,1301,2.437,1302,1.773,1303,2.295,1304,1.651,1305,3.618,1306,3.618,1307,3.195,1308,3.195,1309,3.195,1310,3.396,1311,3.195,1312,3.019,1313,1.388,1314,1.925,1315,1.651,1316,1.651,1317,1.925,1318,1.925,1319,3.725,1320,3.019,1321,1.925,1322,3.863,1323,1.925,1324,3.019,1325,2.78,1326,1.925,1327,2.78,1328,2.78,1329,2.78,1330,1.925,1331,1.925,1332,1.925,1333,1.925,1334,1.925,1335,2.295,1336,3.019,1337,1.925,1338,4.169,1339,3.019,1340,2.78,1341,2.78,1342,1.773,1343,1.925,1344,4.748,1345,4.217,1346,1.773,1347,1.925,1348,3.019,1349,2.78,1350,4.217,1351,2.78,1352,3.689,1353,2.78,1354,2.59,1355,3.019,1356,1.925,1357,1.925,1358,1.925,1359,1.925,1360,1.925,1361,1.464,1362,1.925,1363,1.925,1364,1.925,1365,1.925,1366,1.773,1367,3.019,1368,3.725,1369,1.773,1370,1.925,1371,3.019,1372,1.773,1373,1.925,1374,1.925,1375,3.019,1376,1.55,1377,1.925,1378,1.925,1379,1.925,1380,1.925,1381,1.925,1382,3.019,1383,1.925,1384,1.925,1385,3.019,1386,1.925,1387,1.925,1388,1.925,1389,1.925,1390,1.925,1391,1.925,1392,1.925,1393,1.925,1394,1.925,1395,1.925,1396,1.925,1397,3.019,1398,1.925,1399,1.925,1400,1.925,1401,1.925,1402,2.78,1403,1.773,1404,2.78,1405,2.78,1406,1.773,1407,1.773,1408,1.925,1409,1.651,1410,1.773,1411,1.925]],["title/classes/ForgotPasswordDto.html",[0,0.176,438,2.226]],["body/classes/ForgotPasswordDto.html",[0,0.32,2,0.993,3,0.101,4,0.101,5,0.101,8,2.037,15,0.194,16,0.598,20,2.936,22,2.428,27,2.155,29,0.31,30,0.013,32,0.561,34,1.219,36,0.74,37,2.576,39,0.327,47,0.732,79,2.424,80,2.636,82,3.039,87,0.159,88,3.527,89,2.155,90,2.706,93,1.209,94,2.685,95,1.095,99,0.216,100,1.887,110,0.008,111,0.008,127,1.973,128,1.808,260,1.026,276,1.343,311,3.482,362,2.757,392,2.068,393,2.292,394,2.068,395,1.973,396,1.808,397,2.685,398,1.973,401,1.973,404,2.174,405,3.931,406,3.527,407,2.428,408,3.251,409,4.035,410,4.473,411,4.241,413,2.757,414,2.583,417,2.917,418,2.292,419,2.068,420,1.887,421,3.606,422,3.99,423,3.037,424,2.068,425,4.042,426,3.203,427,3.037,428,3.393,429,3.692,430,2.329,431,3.997,432,3.393,433,3.393,434,3.203,435,3.393,436,3.692,437,3.911,438,2.89,439,3.203,440,2.068,441,2.292,442,2.292,443,2.292,444,2.292,445,2.292,446,2.292,447,3.203,448,2.292,449,3.203,450,2.292,451,2.428,452,2.428,453,2.428,454,2.428,455,2.428,456,2.174,457,2.174,458,2.174,459,2.174,460,2.068,461,2.068,462,2.292,463,2.174,464,1.667,465,2.068,466,1.887,467,1.973,468,1.973,1412,3.819]],["title/injectables/JwtAuthGuard.html",[231,1.002,618,2.34]],["body/injectables/JwtAuthGuard.html",[0,0.275,3,0.17,4,0.17,5,0.17,13,3.521,30,0.012,87,0.222,99,0.191,110,0.011,111,0.011,188,1.285,231,1.813,232,3.036,618,4.234,883,4.078,1413,5.601,1414,5.601,1415,7.44,1416,6.415]],["title/interfaces/JwtPayload.html",[897,1.392,905,2.785]],["body/interfaces/JwtPayload.html",[0,0.219,3,0.135,4,0.135,5,0.135,13,2.412,15,0.258,16,0.725,17,1.173,22,2.296,29,0.413,30,0.013,31,1.401,35,1.56,36,1.254,39,0.437,41,2.633,44,1.613,47,0.72,63,0.863,87,0.223,99,0.193,110,0.01,111,0.01,188,1.021,195,2.412,198,1.369,231,1.576,251,2.214,259,2.432,260,1.737,266,1.668,295,4.045,296,2.759,334,3.059,518,2.521,561,3.196,623,2.907,877,3.059,883,3.24,890,4.113,893,3.706,897,2.19,898,2.759,899,3.706,900,3.451,901,4.024,902,4.024,903,5.108,904,3.706,905,4.814,906,5.436,907,4.024,908,4.024,909,3.706,910,4.024,911,4.814,912,4.024,913,3.451,914,4.024,915,4.024,916,4.024,917,4.024,918,4.024,919,4.024,920,3.451,921,5.168,922,4.024,923,4.024,924,3.451,925,3.706,926,4.024,927,4.024,928,4.024,929,4.024]],["title/injectables/JwtStrategy.html",[231,1.002,877,2.468]],["body/injectables/JwtStrategy.html",[0,0.216,3,0.134,4,0.134,5,0.134,13,3.042,15,0.256,17,1.165,22,2.135,29,0.373,30,0.013,31,1.205,35,1.544,36,1.246,39,0.606,41,2.606,44,1.597,47,0.636,63,1.197,87,0.222,99,0.192,110,0.01,111,0.01,153,2.332,163,2.416,164,1.768,188,1.011,195,2.388,198,1.355,231,1.566,232,2.388,235,2.04,251,2.206,259,2.416,260,1.726,266,1.651,295,4.476,296,2.732,334,3.028,518,2.505,561,3.495,623,2.703,877,3.858,883,3.207,890,4.087,893,3.668,897,2.176,899,3.668,900,3.417,901,3.983,902,3.983,903,5.075,904,3.668,905,5.045,906,3.668,907,3.983,908,3.983,909,3.668,910,5.075,911,4.791,912,3.983,913,3.417,914,3.983,915,3.983,916,3.983,917,3.983,918,3.983,919,5.075,920,3.417,921,5.416,922,3.983,923,3.983,924,3.417,925,3.668,926,3.983,927,3.983,928,3.983,929,3.983,1417,5.075,1418,4.405,1419,5.045,1420,5.045]],["title/interfaces/LockoutData.html",[897,1.392,1421,2.99]],["body/interfaces/LockoutData.html",[0,0.06,1,1.248,3,0.037,4,0.037,5,0.037,9,0.889,10,2.379,11,2.789,12,1.727,14,2.597,15,0.071,16,0.271,17,0.438,18,1.308,19,0.796,21,1.248,22,2.024,23,1.427,24,1.198,25,2.214,26,1.961,27,2.66,28,2.425,29,0.185,30,0.013,31,0.996,34,1.214,35,2.162,36,1.119,43,1.814,44,1.201,47,0.519,62,1.45,63,0.851,87,0.172,96,2.159,97,1.636,98,2.873,99,0.042,110,0.004,111,0.004,112,0.739,122,2.09,136,0.829,138,0.876,145,0.473,154,0.635,158,2.316,174,2.159,185,1.536,188,0.28,193,0.796,196,1.242,198,1.896,226,0.526,231,0.589,234,2.305,235,0.565,237,1.248,241,1.656,248,0.757,250,2.167,251,2.405,253,2.919,259,2.937,260,2.085,262,2.515,266,1.534,327,2.318,333,2.055,334,0.839,338,1.014,343,1.221,353,0.635,362,0.722,369,3.968,371,2.318,375,1.756,406,1.796,408,1.896,411,1.375,430,1.391,436,2.278,456,0.796,457,0.796,458,0.796,459,0.796,508,2.117,518,1.959,542,0.796,566,0.796,568,0.691,576,0.947,593,1.536,612,3.287,623,2.479,641,2.517,659,0.757,674,2.877,689,2.997,691,2.278,710,0.889,725,0.889,771,3.968,774,3.281,778,1.907,802,3.769,806,3.281,807,4.109,809,3.175,827,1.914,862,2.597,865,2.861,876,0.947,881,1.104,890,0.889,897,0.473,898,0.757,900,2.57,906,1.756,920,0.947,921,1.756,924,2.159,925,3.116,935,2.57,1047,1.375,1064,2.159,1066,2.318,1143,1.636,1151,1.017,1223,1.221,1224,1.017,1237,2.159,1246,2.784,1297,2.76,1300,0.889,1301,1.647,1302,1.017,1303,2.572,1315,0.947,1316,0.947,1322,3.189,1327,1.017,1328,1.017,1329,1.017,1335,2.278,1338,2.57,1340,2.76,1341,1.756,1344,4.152,1346,3.409,1349,2.318,1351,2.318,1352,3.378,1353,1.756,1354,2.159,1361,1.914,1366,1.756,1369,1.017,1372,1.017,1376,0.889,1402,1.756,1403,1.017,1404,2.76,1405,2.76,1406,1.017,1409,1.636,1410,1.017,1417,3.383,1421,2.318,1422,1.221,1423,4.855,1424,4.285,1425,3.742,1426,3.188,1427,2.57,1428,1.221,1429,2.159,1430,1.221,1431,1.398,1432,3.116,1433,2.109,1434,1.221,1435,1.104,1436,1.221,1437,1.221,1438,1.221,1439,1.398,1440,1.017,1441,1.398,1442,3.796,1443,3.314,1444,1.398,1445,2.109,1446,1.221,1447,1.398,1448,1.398,1449,1.398,1450,1.398,1451,3.796,1452,1.398,1453,3.188,1454,4.389,1455,5.027,1456,5.027,1457,3.968,1458,4.389,1459,4.389,1460,4.389,1461,4.285,1462,1.398,1463,3.188,1464,2.415,1465,1.398,1466,1.907,1467,4.285,1468,1.398,1469,1.398,1470,3.314,1471,2.76,1472,1.017,1473,3.188,1474,1.398,1475,2.415,1476,2.784,1477,1.221,1478,2.784,1479,2.517,1480,4.195,1481,1.398,1482,1.221,1483,2.109,1484,1.398,1485,2.109,1486,1.398,1487,1.398,1488,1.398,1489,1.221,1490,1.398,1491,1.907,1492,1.398,1493,1.398,1494,1.398,1495,1.221,1496,1.221,1497,1.221,1498,1.221,1499,2.415,1500,1.398,1501,1.398,1502,1.398,1503,1.398,1504,1.398,1505,1.221,1506,1.221,1507,1.398,1508,1.398,1509,1.398,1510,1.398,1511,2.415,1512,3.188,1513,1.398,1514,1.398,1515,1.398,1516,3.968,1517,3.188,1518,2.415,1519,1.398,1520,2.109,1521,1.398,1522,1.398,1523,1.398,1524,3.188,1525,2.784,1526,3.188,1527,1.398,1528,3.188,1529,3.188,1530,4.094,1531,1.398,1532,1.398,1533,1.398,1534,2.415,1535,1.398,1536,3.188,1537,1.398,1538,1.398,1539,1.398,1540,1.398,1541,1.398,1542,1.104,1543,1.398,1544,1.398,1545,1.221,1546,1.398,1547,1.398,1548,1.398,1549,1.398,1550,1.398,1551,1.398,1552,2.415,1553,2.415,1554,1.398,1555,3.188,1556,1.398,1557,1.398,1558,3.188,1559,1.398,1560,1.398,1561,3.796,1562,1.398,1563,1.398,1564,1.398,1565,3.188,1566,1.398,1567,2.415,1568,3.188,1569,2.415,1570,3.188,1571,1.398,1572,1.398,1573,2.415,1574,1.398,1575,2.415,1576,1.398,1577,1.398,1578,1.221,1579,1.398,1580,2.109,1581,2.415,1582,1.398,1583,4.285,1584,2.109,1585,1.398,1586,1.398,1587,2.415,1588,1.104,1589,1.398,1590,1.398,1591,3.188,1592,3.188,1593,4.639,1594,2.415,1595,1.221,1596,4.389,1597,1.398,1598,3.314,1599,1.221,1600,2.109,1601,1.398,1602,1.398,1603,1.398,1604,1.398,1605,1.398,1606,2.415,1607,1.398,1608,1.398,1609,1.398,1610,2.415,1611,1.398,1612,1.398,1613,2.415,1614,1.398,1615,1.221,1616,1.398,1617,1.398,1618,2.784,1619,1.104,1620,1.398,1621,1.398,1622,3.796,1623,1.398,1624,1.398,1625,2.415,1626,1.398,1627,2.415,1628,1.398,1629,1.398,1630,3.188,1631,1.398,1632,2.109,1633,4.285,1634,1.398,1635,1.104,1636,1.398,1637,2.415,1638,1.398,1639,1.398,1640,2.415,1641,1.398,1642,1.398,1643,1.398,1644,1.398,1645,1.398,1646,1.907,1647,1.398,1648,1.398,1649,1.398,1650,1.907,1651,1.398,1652,1.398,1653,1.398,1654,1.398,1655,1.398,1656,1.398,1657,1.398,1658,1.398,1659,1.398,1660,1.398,1661,1.398,1662,1.398,1663,1.398,1664,2.109,1665,1.398,1666,1.398,1667,1.398,1668,1.221]],["title/classes/LoginDto.html",[0,0.176,1427,2.785]],["body/classes/LoginDto.html",[0,0.321,2,1.489,3,0.152,4,0.152,5,0.152,8,1.885,9,4.422,12,1.667,15,0.29,16,0.78,22,1.993,27,2.797,28,2.92,29,0.404,30,0.013,32,1.022,37,2.466,39,0.596,47,0.7,81,3.878,87,0.207,90,2.437,93,1.812,95,1.641,99,0.171,100,2.829,110,0.01,111,0.01,396,3.292,417,2.718,734,4.496,1427,5.073,1669,5,1670,6.151,1671,7.491,1672,5.726,1673,5.726,1674,5.491,1675,5.726,1676,5.726]],["title/injectables/MinioService.html",[231,1.002,1261,2.468]],["body/injectables/MinioService.html",[0,0.181,3,0.112,4,0.112,5,0.172,15,0.213,16,0.64,17,1.174,29,0.434,30,0.013,31,0.79,34,1.304,39,0.655,47,0.741,63,1.175,87,0.17,99,0.126,110,0.008,111,0.008,136,1.684,138,2.071,153,2.071,163,2.434,164,2.269,172,1.838,188,0.844,196,2.524,198,1.533,231,1.391,232,1.994,234,2.965,235,2.618,241,3.265,250,3.074,251,1.691,253,2.434,259,2.434,260,1.739,266,1.379,323,4.151,338,2.915,659,2.281,774,3.199,806,3.199,807,4.076,911,3.866,1048,3.866,1167,3.326,1182,5.113,1231,3.326,1252,2.528,1261,3.426,1480,5.113,1677,3.678,1678,5.654,1679,5.654,1680,4.985,1681,5.709,1682,5.654,1683,5.709,1684,4.985,1685,4.212,1686,7.028,1687,5.709,1688,4.212,1689,3.678,1690,4.212,1691,4.985,1692,4.212,1693,4.985,1694,4.212,1695,4.507,1696,4.985,1697,4.212,1698,3.326,1699,5.113,1700,3.678,1701,4.507,1702,4.985,1703,4.985,1704,5.654,1705,4.985,1706,4.212,1707,3.326,1708,4.212,1709,4.212,1710,3.678,1711,4.212,1712,3.678,1713,5.654,1714,3.326,1715,3.678,1716,3.678,1717,4.212,1718,3.678,1719,3.678,1720,3.678,1721,5.654,1722,4.212,1723,3.063,1724,3.326,1725,3.063,1726,3.678,1727,3.678,1728,3.678,1729,3.326,1730,3.678,1731,3.678,1732,3.678,1733,4.985,1734,3.678,1735,4.212,1736,3.678,1737,3.678,1738,4.212,1739,3.678,1740,4.212]],["title/injectables/MinioService-1.html",[109,1.441,231,0.836,1261,2.06]],["body/injectables/MinioService-1.html",[0,0.127,3,0.118,4,0.078,5,0.183,15,0.15,16,0.497,17,1.25,29,0.429,30,0.013,31,1.292,34,1.35,39,0.651,47,0.735,63,1.2,87,0.159,99,0.088,109,1.243,110,0.007,111,0.007,122,1.113,136,1.647,138,1.61,151,2.664,153,1.61,163,2.592,164,2.485,172,2.323,188,0.593,195,1.402,196,2.075,198,1.701,231,1.082,232,1.402,234,3.074,235,1.197,241,3.384,250,2.826,251,2.296,253,2.666,259,2.5,260,1.701,266,1.453,295,3.784,296,1.604,323,4.606,333,1.604,338,2.483,470,3.967,565,1.685,566,3.03,576,3.006,659,1.604,691,1.778,774,3.285,806,3.285,807,4.119,813,2.586,838,2.153,862,3.435,865,1.685,911,4.005,1048,3.606,1069,2.338,1167,5.25,1182,4.203,1186,2.586,1224,2.153,1231,2.338,1252,1.778,1261,2.664,1335,1.778,1352,3.759,1418,2.586,1440,2.153,1678,4.648,1679,4.648,1680,3.876,1682,4.648,1684,3.876,1686,6.962,1689,2.586,1691,3.876,1693,3.876,1695,4.203,1696,4.648,1698,2.338,1699,4.669,1700,2.586,1701,5.001,1702,5.163,1703,5.163,1704,4.648,1705,3.876,1707,2.338,1710,2.586,1712,2.586,1713,5.531,1714,2.338,1715,2.586,1716,2.586,1718,2.586,1719,2.586,1720,2.586,1721,6.02,1723,2.153,1724,2.338,1725,2.153,1726,2.586,1727,2.586,1728,2.586,1729,3.505,1730,2.586,1731,2.586,1732,2.586,1733,3.876,1734,2.586,1736,3.876,1737,5.163,1739,2.586,1741,2.586,1742,5.914,1743,4.439,1744,5.324,1745,5.324,1746,4.439,1747,6.65,1748,4.439,1749,2.962,1750,2.962,1751,4.439,1752,2.962,1753,2.962,1754,6.192,1755,2.962,1756,2.962,1757,2.962,1758,4.439,1759,2.962,1760,2.962,1761,2.962,1762,2.962,1763,2.962,1764,2.153,1765,5.914,1766,2.962,1767,2.962,1768,2.962,1769,2.962,1770,2.962,1771,2.962,1772,2.962,1773,2.962,1774,2.962,1775,2.962,1776,2.962,1777,2.962,1778,2.962,1779,2.962,1780,2.962,1781,2.962,1782,4.439,1783,2.962,1784,2.962,1785,3.876,1786,2.962,1787,2.962,1788,2.962,1789,2.962,1790,4.439,1791,5.324,1792,2.962,1793,2.586,1794,2.962,1795,2.962,1796,2.586,1797,2.962,1798,2.962,1799,2.338,1800,2.962,1801,2.962,1802,2.962,1803,4.439,1804,2.962,1805,2.962,1806,2.962,1807,2.962,1808,2.962,1809,2.962,1810,2.962,1811,2.962]],["title/entities/OTP.html",[112,1.259,311,1.794]],["body/entities/OTP.html",[0,0.233,3,0.144,4,0.144,5,0.144,15,0.275,16,0.754,22,2.096,29,0.476,30,0.013,31,1.261,32,1.193,34,1.239,36,1.418,39,0.696,47,0.72,87,0.162,99,0.162,110,0.01,111,0.01,112,1.661,114,2.368,116,3.322,122,2.875,123,4.163,125,3.45,132,3.779,138,2.441,144,4.088,145,1.837,266,2.202,311,3.431,421,3.961,422,2.803,423,3.088,527,4.738,1812,4.738,1813,6.387,1814,5.775,1815,5.426,1816,5.426,1817,5.875,1818,5.426,1819,5.426,1820,5.426,1821,5.426,1822,5.426,1823,5.426,1824,5.426]],["title/injectables/OTPService.html",[231,1.002,292,2.468]],["body/injectables/OTPService.html",[0,0.178,3,0.11,4,0.11,5,0.11,15,0.21,17,1.164,22,2.253,29,0.373,30,0.013,34,1.466,39,0.591,47,0.74,63,1.087,87,0.231,99,0.124,110,0.008,111,0.008,122,2.414,136,1.669,145,1.911,153,2.048,163,2.414,164,2.25,172,2.464,174,3.823,188,0.83,198,1.937,226,1.557,231,1.375,232,1.961,234,2.955,235,2.282,237,3.562,241,3.249,248,2.243,250,2.502,251,2.205,253,2.798,260,1.724,266,2.361,291,4.843,292,3.388,295,4.335,296,2.243,311,3.502,312,3.271,327,3.012,371,3.012,376,2.487,420,2.047,421,4.346,422,3.562,425,2.14,434,2.487,461,2.243,674,2.243,827,2.487,892,4.929,1376,2.634,1435,3.271,1471,3.012,1754,3.617,1813,5.606,1814,5.696,1825,3.617,1826,6.895,1827,6.421,1828,5.606,1829,4.143,1830,4.143,1831,5.645,1832,4.143,1833,4.143,1834,4.143,1835,4.143,1836,4.143,1837,4.143,1838,4.929,1839,4.143,1840,4.143,1841,4.143,1842,3.617,1843,4.143,1844,4.929,1845,3.617,1846,5.645,1847,4.143,1848,4.143,1849,4.143,1850,4.143,1851,4.143,1852,4.143,1853,4.143,1854,4.143,1855,5.645,1856,4.143,1857,4.143,1858,4.143,1859,6.421,1860,4.143,1861,5.645,1862,4.143,1863,3.617,1864,4.143,1865,3.617,1866,4.143,1867,4.143,1868,4.143,1869,4.143]],["title/classes/PaginatedUsersResponseDto.html",[0,0.176,1870,3.246]],["body/classes/PaginatedUsersResponseDto.html",[0,0.22,2,1.336,3,0.136,4,0.136,5,0.136,8,2.079,12,1.1,15,0.261,16,0.729,29,0.459,30,0.013,31,1.588,32,1.137,37,2.374,39,0.663,41,3.361,44,1.627,87,0.194,95,1.473,99,0.153,109,2.731,110,0.01,111,0.01,128,3.079,173,3.864,353,3.407,417,2.868,861,4.568,1037,4.768,1148,4.334,1161,5.136,1295,5.103,1342,5.189,1466,5.136,1870,5.136,1871,6.901,1872,3.482,1873,5.136,1874,5.141,1875,5.141,1876,4.489,1877,6.506,1878,5.141,1879,4.502,1880,4.489,1881,4.489,1882,3.738]],["title/entities/Queue.html",[112,1.259,934,2.031]],["body/entities/Queue.html",[0,0.198,3,0.122,4,0.122,5,0.122,15,0.234,16,0.68,29,0.471,30,0.013,31,1.35,32,1.18,34,1.386,36,1.314,39,0.688,44,1.461,47,0.647,63,1.266,87,0.202,99,0.181,110,0.009,111,0.009,112,1.413,114,2.014,116,3.079,122,2.707,123,3.453,125,2.934,132,3.502,135,4.104,136,2.108,144,3.794,145,1.563,276,1.706,414,3.141,464,2.648,486,4.322,489,3.126,544,3.858,545,3.642,547,4.412,709,5.066,930,4.573,934,3.349,936,4.03,946,5.298,1076,4.791,1079,4.03,1103,5.298,1883,3.644,1884,5.353,1885,5.353,1886,5.919,1887,4.929,1888,6.068,1889,4.615,1890,6.068,1891,4.615,1892,6.068,1893,4.615,1894,4.615,1895,4.578,1896,6.068,1897,4.615,1898,6.068,1899,4.615,1900,4.615,1901,6.068,1902,4.615,1903,5.066,1904,4.615,1905,4.03,1906,4.03,1907,4.412,1908,4.615,1909,4.03]],["title/entities/QueueDetails.html",[112,1.259,1895,2.614]],["body/entities/QueueDetails.html",[0,0.179,3,0.111,4,0.111,5,0.111,12,1.634,15,0.212,16,0.637,20,2.341,23,2.425,24,2.425,29,0.473,30,0.013,31,1.399,32,1.198,34,1.297,36,1.251,39,0.699,47,0.737,63,1.361,87,0.192,99,0.125,110,0.008,111,0.008,112,1.28,114,1.825,132,3.333,135,4.07,136,2.048,138,2.061,144,3.971,145,1.416,266,1.859,375,4.131,479,3.612,481,5.465,482,3.041,486,4.728,501,4.102,502,3.873,514,4.691,515,4.37,516,3.873,517,4.37,518,2.514,530,3.302,537,2.832,538,5.465,542,2.38,934,3.891,935,3.848,1016,5.634,1099,5.465,1273,3.652,1895,3.612,1910,7.16,1911,3.652,1912,5.094,1913,4.182,1914,5.682,1915,4.182,1916,4.961,1917,4.182,1918,4.182,1919,5.682,1920,4.182,1921,4.961,1922,4.182,1923,5.682,1924,4.182,1925,5.682,1926,4.182,1927,4.961,1928,6.922,1929,5.682,1930,4.182,1931,4.182,1932,5.682,1933,4.182,1934,5.682,1935,4.182,1936,4.182,1937,4.182,1938,4.182]],["title/classes/QueueGateway.html",[0,0.176,1939,2.614]],["body/classes/QueueGateway.html",[0,0.158,2,0.961,3,0.098,4,0.098,5,0.098,11,2.189,15,0.187,16,0.584,17,1.389,29,0.456,30,0.013,31,1.519,32,1.017,34,0.844,39,0.673,63,1.298,87,0.206,99,0.11,110,0.008,111,0.008,136,1.356,153,2.192,161,2.349,163,2.882,164,2.642,172,1.613,188,0.74,196,2.698,198,1.763,234,2.982,235,2.108,250,2.698,251,1.544,253,2.602,260,1.4,295,4.201,296,2.001,318,2.917,338,2.756,358,4.601,420,1.825,566,2.103,568,3.243,691,2.218,725,3.842,930,2.103,934,2.985,1143,2.502,1432,2.687,1440,2.687,1491,2.917,1729,2.917,1764,3.791,1912,5.829,1939,3.315,1940,3.226,1941,6.043,1942,6.043,1943,6.272,1944,5.215,1945,5.215,1946,5.215,1947,5.215,1948,5.215,1949,5.215,1950,5.215,1951,5.215,1952,3.695,1953,5,1954,5.215,1955,5.215,1956,3.695,1957,6.043,1958,5.215,1959,8.249,1960,3.695,1961,7.383,1962,7.54,1963,5.215,1964,3.695,1965,5.215,1966,5.215,1967,3.695,1968,5.215,1969,6.564,1970,5.215,1971,3.695,1972,5.215,1973,5.215,1974,3.695,1975,5.215,1976,5.215,1977,3.695,1978,5.215,1979,3.695,1980,5.215,1981,3.695,1982,5.215,1983,3.695,1984,3.226,1985,4.553,1986,2.917,1987,3.226,1988,5.215,1989,5.215,1990,3.695,1991,3.695,1992,3.226,1993,3.695,1994,3.695,1995,3.695,1996,3.695,1997,3.695,1998,3.695,1999,5.215,2000,3.695,2001,6.043,2002,3.695,2003,3.695,2004,3.695,2005,5.215,2006,3.695,2007,4.117,2008,3.695,2009,3.695,2010,3.695,2011,6.043,2012,3.695,2013,3.695,2014,3.226,2015,3.695,2016,3.695,2017,3.695,2018,5.215,2019,3.695,2020,3.695]],["title/modules/QueueModule.html",[209,1.392,288,2.785]],["body/modules/QueueModule.html",[0,0.225,3,0.139,4,0.139,5,0.139,30,0.013,87,0.248,99,0.156,110,0.01,111,0.01,149,2.662,188,1.05,209,2.438,211,2.589,212,2.589,213,2.838,214,2.838,215,2.589,216,3.899,217,3.899,221,3.565,222,2.589,223,2.707,225,2.982,226,1.97,229,2.982,288,5.643,297,4.576,298,3.81,333,2.838,386,4.576,930,3.747,934,3.253,1191,4.576,1192,4.138,1895,4.186,1905,4.576,1906,4.576,1939,5.183,1953,5.671,1986,4.138,1987,5.749,2021,4.576,2022,4.576,2023,4.576,2024,5.671,2025,5.241,2026,6.286,2027,5.235,2028,5.241,2029,5.241,2030,4.576,2031,5.241,2032,3.81,2033,5.241,2034,5.241]],["title/classes/QueueNotificationDto.html",[0,0.176,2035,2.99]],["body/classes/QueueNotificationDto.html",[0,0.257,2,1.177,3,0.12,4,0.12,5,0.12,8,1.961,15,0.229,16,0.671,17,1.434,20,2.173,22,2.131,29,0.476,30,0.013,31,1.34,32,1.145,37,2.623,39,0.667,47,0.737,87,0.179,88,2.835,89,2.605,90,2.676,91,4.057,93,1.432,95,1.297,99,0.135,110,0.009,111,0.009,266,2.339,276,1.961,353,2.721,376,3.596,396,3.687,404,3.409,405,2.451,408,3.005,409,3.244,414,2.515,415,3.952,417,2.87,659,4.283,705,3.574,717,3.952,720,3.952,725,3.809,729,3.574,731,4.356,733,3.952,930,3.409,934,3.773,988,5.302,1066,4.356,1121,4.73,1471,4.356,1887,4.882,2007,6.151,2035,4.356,2036,6.906,2037,5.863,2038,4.526,2039,4.526,2040,5.991,2041,5.991,2042,4.526,2043,5.231,2044,4.526,2045,5.231,2046,4.526,2047,4.526,2048,5.231,2049,4.526,2050,5.863,2051,4.526]],["title/injectables/QueueSchedulerService.html",[231,1.002,2024,2.785]],["body/injectables/QueueSchedulerService.html",[0,0.131,3,0.081,4,0.081,5,0.081,10,1.448,15,0.155,16,0.51,17,0.984,29,0.264,30,0.013,32,0.449,34,1.039,39,0.597,63,1.017,87,0.201,99,0.091,110,0.007,111,0.007,116,3.057,122,2.955,136,0.795,145,1.036,153,1.65,163,1.709,164,2.106,172,1.985,188,0.613,196,2.115,198,1.614,222,3.614,226,1.15,231,1.108,232,1.448,234,2.875,235,1.839,237,3.104,241,1.985,248,1.657,250,2.944,251,2.265,253,2.691,259,1.15,260,2.029,262,1.448,266,1.776,276,1.754,298,2.224,333,1.657,336,2.224,338,2.523,357,2.415,408,1.237,420,1.511,430,3.338,461,1.657,464,2.937,544,4.279,545,4.297,565,1.741,566,1.741,568,1.511,654,3.947,665,2.671,691,4.59,707,2.415,721,2.415,722,2.671,731,2.224,768,3.971,774,2.247,786,5.247,806,2.247,807,3.6,809,2.072,830,2.671,837,2.415,849,2.671,851,2.415,861,3.655,862,1.58,865,1.741,934,3.818,1048,2.072,1224,2.224,1310,1.945,1477,2.671,1599,2.671,1619,2.415,1796,2.671,1817,2.671,1844,2.671,1884,3.591,1903,2.072,1907,3.307,1909,3.971,1939,4.431,2014,2.671,2024,3.08,2030,2.671,2032,2.224,2052,6.251,2053,2.671,2054,5.428,2055,6.009,2056,6.009,2057,4.548,2058,6.009,2059,3.059,2060,4.548,2061,4.548,2062,3.059,2063,4.548,2064,6.009,2065,7.555,2066,5.428,2067,4.548,2068,3.059,2069,4.548,2070,7.648,2071,3.059,2072,5.428,2073,3.059,2074,4.548,2075,3.059,2076,3.059,2077,3.059,2078,2.671,2079,4.548,2080,3.059,2081,3.059,2082,6.422,2083,3.059,2084,3.059,2085,5.428,2086,3.059,2087,3.059,2088,3.059,2089,2.671,2090,4.548,2091,6.009,2092,6.009,2093,6.009,2094,6.009,2095,4.548,2096,3.059,2097,6.5,2098,3.059,2099,3.059,2100,3.059,2101,4.548,2102,6.731,2103,4.548,2104,4.548,2105,4.548,2106,4.548,2107,3.059,2108,5.428,2109,4.548,2110,3.059,2111,3.059,2112,3.059,2113,3.059,2114,3.059,2115,3.059,2116,3.059,2117,3.059,2118,3.059,2119,3.059,2120,3.059,2121,3.059,2122,3.059,2123,3.059,2124,3.059,2125,3.059,2126,6.009,2127,3.059,2128,3.059,2129,3.059,2130,2.671,2131,3.059,2132,4.548,2133,3.059,2134,3.059,2135,3.059]],["title/controllers/QueuesController.html",[147,1.662,2027,2.99]],["body/controllers/QueuesController.html",[0,0.156,3,0.096,4,0.096,5,0.096,12,1.281,15,0.184,17,0.934,20,1.87,23,2.449,24,2.449,29,0.299,30,0.013,32,0.88,36,1.424,39,0.513,47,0.711,63,0.872,87,0.179,99,0.108,110,0.008,111,0.008,116,2.719,147,1.469,149,1.469,151,2.181,153,2.172,163,1.937,164,2.098,167,3.276,184,2.181,188,0.728,195,1.72,196,2.008,198,1.847,234,2.87,250,1.416,251,2.293,253,2.251,259,2.586,260,1.608,262,1.72,276,1.64,338,2.164,353,1.65,378,3.49,464,2.249,515,3.49,516,3.093,517,4.412,518,2.333,544,2.31,568,3.219,709,4.839,774,2.958,806,2.958,809,4.412,851,2.869,862,3.093,897,1.23,934,3.398,935,5.4,1143,2.461,1361,2.181,1618,6.668,1650,2.869,1701,5.144,1799,2.869,1884,4.728,1885,4.728,1886,3.173,1887,4.354,1895,4.142,1903,2.461,1907,3.747,1912,2.869,1927,5.228,1953,4.055,1986,2.869,2027,3.747,2032,2.642,2097,6.839,2136,3.173,2137,5.153,2138,5.153,2139,6.515,2140,3.634,2141,3.634,2142,3.634,2143,4.499,2144,3.634,2145,5.153,2146,3.634,2147,3.634,2148,3.634,2149,3.634,2150,3.634,2151,3.173,2152,3.634,2153,4.499,2154,5.988,2155,3.634,2156,5.988,2157,2.869,2158,3.173,2159,5.153,2160,5.153,2161,3.634,2162,3.634,2163,5.988,2164,3.634,2165,3.634,2166,3.634,2167,3.634,2168,3.634,2169,3.634,2170,3.634,2171,3.634,2172,3.634,2173,3.634,2174,6.515,2175,6.515,2176,3.634,2177,3.634,2178,5.988,2179,5.988,2180,5.988,2181,5.988,2182,5.988,2183,5.988,2184,3.634,2185,5.988,2186,5.988,2187,3.634,2188,5.988,2189,3.634,2190,3.634,2191,3.634,2192,3.634,2193,5.153,2194,5.988,2195,3.634,2196,3.634,2197,3.634,2198,3.634,2199,3.634,2200,3.634,2201,3.634,2202,3.634,2203,3.634,2204,3.634,2205,3.634,2206,3.634]],["title/classes/RegisterDto.html",[0,0.176,1429,2.785]],["body/classes/RegisterDto.html",[0,0.272,2,1.051,3,0.107,4,0.107,5,0.107,8,2.011,9,3.529,12,1.724,15,0.205,16,0.622,17,1.479,20,2.014,21,3.275,22,2.209,23,2.383,24,2.383,25,3.275,26,3.275,27,2.506,28,3.003,29,0.459,30,0.013,31,1.041,32,1.163,33,4.547,37,2.645,39,0.678,47,0.751,57,3.76,62,3.332,63,1.373,66,3.159,67,3.192,69,3.76,70,3.192,72,3.76,73,4.036,74,4.294,75,4.036,76,3.192,78,4.036,79,2.879,80,2.742,81,3.76,82,3.132,87,0.166,88,2.627,89,2.506,90,2.773,93,1.279,94,3.225,95,1.159,99,0.121,100,1.997,101,3.192,102,3.192,103,3.805,104,5.006,105,3.529,106,2.94,110,0.008,111,0.008,311,3.225,362,2.868,396,3.385,417,2.681,422,3.275,427,2.301,734,4.435,1047,3.159,1048,3.76,1049,4.383,1429,4.294,1542,4.383,1670,4.383,2207,3.53,2208,4.043,2209,4.043,2210,4.043,2211,4.043,2212,4.043,2213,4.043,2214,4.043,2215,4.043,2216,4.043,2217,4.043,2218,4.043,2219,4.043,2220,4.043,2221,4.043,2222,4.043,2223,4.043,2224,4.043,2225,4.043]],["title/interfaces/RequestWithUser.html",[897,1.392,2226,2.34]],["body/interfaces/RequestWithUser.html",[0,0.037,1,1.13,3,0.023,4,0.023,5,0.023,8,1.998,9,1.714,10,1.276,11,2.627,12,1.388,13,0.752,14,2.135,15,0.044,16,0.734,20,1.824,22,2.357,23,0.328,24,0.328,27,2.378,28,1.315,29,0.475,30,0.013,31,0.867,34,0.616,35,0.487,36,0.852,37,2.415,39,0.075,41,0.821,44,1.308,47,0.732,62,0.524,63,0.148,79,0.722,80,0.431,82,0.431,87,0.164,94,0.381,95,0.25,97,1.077,99,0.026,100,0.431,103,0.524,105,0.555,106,0.635,108,1.482,109,1.612,110,0.002,111,0.002,122,0.598,136,1.647,138,1.273,147,0.353,158,0.431,161,0.555,164,0.945,174,1.826,182,3.276,184,0.524,188,0.175,193,0.497,196,0.34,198,1.777,222,3.131,234,2.352,235,0.353,250,1.05,251,1.739,253,2.487,259,2.607,260,1.907,262,0.752,266,0.716,276,1.938,291,1.391,292,1.313,311,3.418,313,0.689,314,0.689,333,2.379,334,0.524,336,0.635,338,0.667,345,2.792,353,0.397,357,0.689,358,1.618,360,2.128,362,3.034,372,1.388,376,0.954,378,0.591,392,0.473,394,2.379,395,2.27,397,3.046,398,0.451,401,0.821,404,0.497,405,2.379,406,2.536,408,2.744,409,0.473,410,0.954,411,0.497,413,1.393,414,0.919,417,0.317,418,0.524,419,1.185,420,3.378,421,2.979,422,3.274,423,1.997,424,1.185,425,1.618,426,1.879,427,1.245,429,1.313,430,1.176,431,0.954,438,0.473,439,1.618,440,0.473,441,1.313,442,0.524,443,0.524,444,0.954,445,1.313,446,0.524,447,0.524,448,0.524,449,0.524,450,0.524,456,0.497,457,0.497,458,0.497,459,1.782,460,0.473,461,2.08,462,1.618,463,1.534,464,0.694,465,0.861,466,0.785,467,0.821,468,0.821,475,0.762,477,1.714,509,3.947,512,4.116,516,0.524,518,0.34,543,1.077,545,0.954,561,1.332,564,0.635,565,0.497,566,3.69,593,0.555,611,0.591,612,2.633,618,0.497,620,0.591,621,0.861,623,0.978,628,0.635,629,4.663,630,4.854,631,0.635,634,1.826,635,1.728,636,1.313,638,4.608,645,0.591,659,3.052,668,2.128,674,1.695,677,1.388,688,4.389,689,0.689,691,1.879,703,1.591,706,5.307,707,2.128,709,2.799,710,4.123,713,1.911,714,1.911,715,2.128,718,1.911,721,3.263,725,1.391,728,4.678,729,1.255,730,3.064,731,5.409,736,0.762,771,1.255,774,3.091,778,1.255,802,0.954,806,3.091,807,4.011,809,1.826,820,0.762,827,0.524,837,2.771,845,0.762,862,2.39,865,1.245,869,0.762,876,1.482,879,0.689,884,0.762,886,0.689,897,0.296,898,0.473,900,1.826,920,0.591,924,2.377,930,0.497,934,1.734,935,2.121,984,2.128,993,1.255,1010,0.689,1028,0.497,1034,1.391,1049,2.128,1055,0.689,1066,1.591,1143,0.591,1150,3.653,1151,0.635,1153,0.689,1190,3.216,1211,1.728,1253,1.911,1300,0.555,1303,0.524,1322,0.954,1335,0.524,1352,2.628,1354,2.601,1376,1.991,1417,2.128,1421,0.635,1423,1.388,1425,0.762,1427,2.121,1428,0.762,1429,1.482,1430,0.762,1432,2.277,1438,3.609,1443,1.388,1470,3.064,1471,1.96,1472,0.635,1476,0.762,1478,0.762,1479,2.771,1480,3.653,1482,1.911,1483,1.388,1485,0.762,1489,3.064,1491,5.063,1495,0.762,1496,1.388,1497,0.762,1498,0.762,1505,0.762,1506,2.354,1520,1.388,1525,0.762,1542,1.728,1545,0.762,1578,0.762,1580,1.911,1584,4.04,1593,1.911,1595,0.762,1596,1.388,1598,1.911,1600,0.762,1619,0.689,1632,1.911,1646,3.032,1664,1.388,1668,0.762,1670,2.472,1674,2.472,1714,0.689,1723,0.635,1725,0.635,1799,0.689,1814,2.472,1828,0.762,1842,1.388,1845,0.762,1863,0.762,1865,4.04,1873,1.255,1887,1.591,1992,1.911,2007,3.263,2035,1.156,2037,1.388,2043,0.762,2045,1.388,2048,0.762,2050,0.762,2089,3.064,2130,0.762,2153,0.762,2158,2.734,2226,1.782,2227,0.762,2228,0.873,2229,0.689,2230,0.873,2231,1.59,2232,5.503,2233,0.873,2234,0.873,2235,0.873,2236,1.59,2237,0.873,2238,0.873,2239,0.873,2240,0.873,2241,2.188,2242,6.17,2243,4.133,2244,4.133,2245,0.873,2246,0.873,2247,0.873,2248,3.131,2249,3.131,2250,2.188,2251,2.188,2252,0.873,2253,0.873,2254,0.873,2255,2.696,2256,1.59,2257,2.696,2258,1.59,2259,0.873,2260,2.188,2261,1.59,2262,0.873,2263,0.762,2264,0.762,2265,1.59,2266,1.911,2267,3.509,2268,0.873,2269,1.59,2270,0.873,2271,0.873,2272,0.873,2273,1.59,2274,0.873,2275,0.873,2276,0.873,2277,0.873,2278,0.873,2279,2.188,2280,2.188,2281,0.873,2282,0.873,2283,0.873,2284,0.873,2285,0.873,2286,0.635,2287,0.762,2288,0.873,2289,0.873,2290,0.873,2291,0.873,2292,1.59,2293,0.873,2294,0.873,2295,0.873,2296,0.873,2297,0.873,2298,0.873,2299,2.696,2300,2.188,2301,0.873,2302,0.873,2303,0.873,2304,0.873,2305,2.734,2306,1.59,2307,0.873,2308,0.873,2309,0.873,2310,0.873,2311,1.59,2312,1.59,2313,0.873,2314,1.59,2315,2.188,2316,1.59,2317,0.873,2318,0.873,2319,5.873,2320,2.696,2321,2.696,2322,2.188,2323,0.873,2324,0.873,2325,2.188,2326,5.503,2327,1.59,2328,0.873,2329,2.188,2330,1.59,2331,2.188,2332,0.873,2333,0.762,2334,0.873,2335,0.873,2336,0.873,2337,0.873,2338,0.873,2339,0.873,2340,0.873,2341,1.59,2342,0.873,2343,0.873,2344,1.59,2345,0.873,2346,0.873,2347,1.59,2348,0.873,2349,0.873,2350,0.873,2351,0.873,2352,1.59,2353,0.873,2354,0.873,2355,0.873,2356,0.873,2357,0.873,2358,0.873,2359,0.873,2360,0.873,2361,0.873,2362,1.59,2363,0.873,2364,0.873,2365,1.59,2366,0.873,2367,0.873,2368,0.873,2369,0.873,2370,0.873,2371,0.762,2372,0.873,2373,0.873,2374,0.873,2375,1.388,2376,0.873,2377,0.873,2378,0.873,2379,2.696,2380,0.873,2381,0.873,2382,0.873,2383,0.873,2384,0.873,2385,0.873,2386,0.873,2387,0.873,2388,5.027,2389,0.873,2390,0.762,2391,0.873,2392,0.873,2393,0.873,2394,0.873,2395,0.873,2396,0.873,2397,0.873,2398,0.873,2399,0.873,2400,0.873,2401,0.873,2402,0.873,2403,2.696,2404,0.873,2405,0.873,2406,0.873,2407,0.873,2408,0.873,2409,0.873,2410,0.873,2411,0.873,2412,0.873,2413,0.873,2414,0.873,2415,2.696,2416,0.873,2417,2.696,2418,0.873,2419,4.133,2420,0.873,2421,2.696,2422,2.696,2423,2.696,2424,2.696,2425,0.873,2426,0.873,2427,0.873,2428,1.59,2429,1.59,2430,0.873,2431,0.873,2432,2.188,2433,3.509,2434,0.873,2435,3.509,2436,0.873,2437,0.873,2438,0.873,2439,0.873,2440,0.873,2441,0.873,2442,0.873,2443,0.873,2444,0.873,2445,0.873,2446,0.873,2447,0.873,2448,0.873,2449,0.873,2450,0.873,2451,1.59,2452,0.873,2453,0.873,2454,0.873]],["title/interfaces/RequestWithUser-1.html",[109,1.441,897,1.162,2226,1.953]],["body/interfaces/RequestWithUser-1.html",[3,0.162,4,0.162,5,0.162,12,1.739,15,0.31,16,0.811,29,0.355,30,0.013,87,0.216,99,0.182,110,0.011,111,0.011,188,1.225,198,1.642,251,2.142,358,3.67,561,4.015,568,3.02,886,4.827,897,2.07,898,3.311,1190,3.67,2226,4.117,2455,4.827,2456,6.316,2457,5.26,2458,5.338,2459,5.338,2460,5.338]],["title/interfaces/RequestWithUser-2.html",[108,2.324,897,1.162,2226,1.953]],["body/interfaces/RequestWithUser-2.html",[0,0.23,3,0.142,4,0.142,5,0.142,12,1.677,13,3.164,15,0.272,16,0.749,17,1.211,29,0.422,30,0.013,35,2.228,41,3.761,47,0.718,63,1.232,87,0.217,99,0.16,110,0.01,111,0.01,136,1.396,138,1.948,188,1.076,195,2.541,198,1.795,231,1.629,251,2.256,621,2.907,623,1.948,708,4.25,710,3.413,897,2.263,898,2.907,1190,4.572,1361,3.222,1516,4.238,1588,4.238,1635,4.238,1764,3.903,2157,4.238,2226,3.804,2229,4.238,2457,4.86,2461,4.238,2462,5.836,2463,6.356,2464,4.238,2465,4.86,2466,4.687,2467,4.687,2468,5.836,2469,4.687,2470,4.687,2471,4.687,2472,4.687,2473,4.687,2474,4.687,2475,4.687,2476,4.687,2477,4.687]],["title/classes/ResetPasswordDto.html",[0,0.176,440,2.226]],["body/classes/ResetPasswordDto.html",[0,0.312,2,0.915,3,0.093,4,0.093,5,0.093,8,2.011,15,0.178,16,0.565,20,2.899,22,2.416,27,2.477,29,0.373,30,0.013,32,0.864,34,1.151,36,0.683,37,2.573,39,0.504,47,0.731,79,2.917,80,3.173,82,3.357,87,0.15,88,3.446,89,2.062,90,2.656,93,1.114,94,2.568,95,1.009,99,0.211,100,1.74,110,0.007,111,0.007,127,1.819,128,2.385,260,1.353,276,1.268,311,3.548,362,3.04,392,1.907,393,2.114,394,1.907,395,1.819,396,2.785,397,2.568,398,1.819,401,1.819,404,2.004,405,3.828,406,3.446,407,2.239,408,3.287,409,3.942,410,4.369,411,4.143,413,2.603,414,2.471,417,2.878,418,2.114,419,1.907,420,1.74,421,3.478,422,3.916,423,2.868,424,1.907,425,4.155,426,3.532,427,3.349,428,3.741,429,4.079,430,2.568,431,4.079,432,3.204,433,3.741,434,3.024,435,3.204,436,4.079,437,4.321,438,1.907,439,2.114,440,2.728,441,3.024,442,3.024,443,3.024,444,3.024,445,3.024,446,3.024,447,3.855,448,2.114,449,3.855,450,2.114,451,2.239,452,2.239,453,2.239,454,3.741,455,3.204,456,2.868,457,2.868,458,2.868,459,3.349,460,1.907,461,1.907,462,2.114,463,2.004,464,1.537,465,1.907,466,1.74,467,1.819,468,1.819,2478,3.521,2479,3.521,2480,3.521,2481,3.521,2482,3.075,2483,3.075,2484,3.521]],["title/entities/Role.html",[35,1.259,112,1.259]],["body/entities/Role.html",[0,0.242,3,0.15,4,0.15,5,0.15,8,1.875,12,1.731,15,0.286,16,0.773,29,0.45,30,0.013,31,1.293,32,1.14,35,2.112,36,1.444,39,0.665,47,0.697,63,1.261,87,0.206,99,0.169,110,0.01,111,0.01,112,1.73,114,2.467,132,3.848,135,3.848,136,2.017,144,3.68,145,1.914,266,2.258,521,4.463,530,4.463,542,3.217,547,4.11,1148,3.848,2485,4.936,2486,5.653,2487,5.653,2488,5.653,2489,5.653,2490,6.025,2491,5.653,2492,6.025,2493,5.653]],["title/controllers/RolesController.html",[147,1.662,2494,2.99]],["body/controllers/RolesController.html",[0,0.232,3,0.143,4,0.143,5,0.143,15,0.274,17,1.217,29,0.39,30,0.013,32,1.073,36,1.302,39,0.626,47,0.72,63,1.137,87,0.234,99,0.161,110,0.01,111,0.01,147,2.187,149,2.187,151,3.247,153,2.437,155,4.136,156,3.637,163,2.525,164,2.559,166,2.672,167,3.439,184,3.247,188,1.084,195,2.56,196,2.108,198,1.962,203,4.723,518,2.617,593,5.089,611,3.664,618,3.079,619,3.933,620,3.664,621,3.637,622,3.933,623,2.437,624,3.933,634,3.664,645,4.947,1301,3.774,2143,4.723,2494,4.883,2495,4.723,2496,5.864,2497,5.41,2498,5.41,2499,5.41,2500,5.41,2501,4.723,2502,5.41,2503,5.41,2504,4.723,2505,5.41,2506,5.41,2507,5.41,2508,5.41,2509,5.41]],["title/guards/RolesGuard.html",[621,2.226,2286,2.99]],["body/guards/RolesGuard.html",[0,0.225,3,0.139,4,0.139,5,0.139,12,1.41,13,2.484,15,0.266,17,1.194,29,0.383,30,0.013,35,2.205,39,0.565,41,3.722,47,0.714,63,1.318,87,0.215,99,0.156,110,0.01,111,0.01,136,1.364,138,2.391,153,2.391,163,2.477,164,1.839,188,1.052,195,2.484,198,1.77,231,1.606,235,2.122,251,2.238,621,3.569,623,1.904,710,3.337,897,2.231,1190,4.324,1361,3.15,1516,4.144,1588,4.144,1635,4.144,1764,3.816,2157,4.144,2226,2.987,2229,4.144,2457,5.495,2461,4.144,2462,6.598,2463,6.937,2464,4.144,2465,4.792,2466,4.582,2467,5.754,2468,5.754,2469,4.582,2470,4.582,2471,4.582,2472,4.582,2473,4.582,2474,4.582,2475,4.582,2476,4.582,2477,4.582,2510,5.248,2511,5.248,2512,5.248,2513,5.248,2514,5.248]],["title/modules/RolesModule.html",[209,1.392,289,2.468]],["body/modules/RolesModule.html",[0,0.248,3,0.154,4,0.154,5,0.154,12,1.499,30,0.013,35,1.773,87,0.243,99,0.173,110,0.01,111,0.01,149,2.832,188,1.16,209,2.549,211,2.861,212,2.861,213,3.136,214,3.136,215,2.861,216,4.076,217,4.076,221,3.792,222,2.861,223,2.992,225,3.296,226,2.177,229,3.296,289,4.942,542,3.296,1301,4.382,2494,5.474,2504,5.057,2515,5.057,2516,5.057,2517,5.057,2518,5.792,2519,5.057,2520,5.792,2521,5.792]],["title/injectables/RolesService.html",[231,1.002,1301,2.124]],["body/injectables/RolesService.html",[0,0.185,3,0.115,4,0.115,5,0.115,12,1.648,15,0.219,17,1.327,19,3.734,29,0.425,30,0.013,31,1.526,35,2.357,36,1.493,39,0.646,43,2.459,47,0.59,63,1.342,87,0.218,99,0.129,110,0.009,111,0.009,145,1.463,153,2.107,155,3.798,156,3.145,163,2.751,164,2.565,166,2.869,188,0.866,198,1.884,226,1.624,231,1.415,232,2.045,234,3.111,235,2.348,237,3.978,241,3.498,247,2.747,248,2.34,250,2.263,251,2.168,253,2.833,259,2.466,260,1.762,262,3.105,378,2.926,508,2.869,518,2.734,542,2.459,623,2.735,1301,3,1315,2.926,1316,4.443,1344,3.933,1409,2.926,1650,4.586,2490,5.071,2496,5.071,2501,5.071,2519,3.773,2522,3.773,2523,5.808,2524,5.808,2525,4.321,2526,4.321,2527,5.808,2528,5.808,2529,4.321,2530,4.321,2531,5.808,2532,4.321,2533,4.321,2534,4.321,2535,4.321,2536,4.321,2537,5.808,2538,5.808,2539,4.321,2540,4.321,2541,4.321,2542,4.321,2543,4.321,2544,4.321,2545,4.321]],["title/classes/SendOtpDto.html",[0,0.176,419,2.226]],["body/classes/SendOtpDto.html",[0,0.317,2,0.967,3,0.099,4,0.099,5,0.099,8,2.029,15,0.188,16,0.587,17,0.949,20,2.924,22,2.423,27,2.125,29,0.352,30,0.013,32,0.769,33,2.364,34,1.503,36,0.721,37,2.58,39,0.449,44,1.177,47,0.733,79,2.379,80,2.587,82,2.995,87,0.156,88,3.5,89,2.125,90,2.69,93,1.177,94,2.646,95,1.066,99,0.215,100,1.837,110,0.008,111,0.008,127,1.921,128,1.76,172,1.623,260,0.999,276,1.318,311,3.518,362,2.706,392,2.013,393,2.232,394,2.013,395,1.921,396,1.76,397,2.646,398,1.921,401,1.921,404,2.116,405,3.898,406,3.5,407,2.364,408,3.236,409,4.005,410,4.439,411,4.209,413,2.706,414,2.764,417,2.904,418,2.232,419,2.836,420,2.587,421,4.005,422,4.064,423,2.981,424,2.013,425,4.019,426,3.144,427,2.981,428,3.33,429,3.639,430,2.286,431,3.951,432,3.33,433,3.33,434,3.144,435,3.33,436,3.639,437,3.855,438,2.013,439,2.232,440,2.013,441,2.232,442,2.232,443,2.232,444,2.232,445,2.232,446,2.232,447,3.144,448,2.232,449,3.144,450,2.232,451,2.364,452,2.364,453,2.364,454,2.364,455,2.364,456,2.116,457,2.116,458,2.116,459,2.116,460,2.013,461,2.013,462,2.232,463,2.116,464,1.623,465,2.013,466,1.837,467,1.921,468,1.921,2546,3.719,2547,3.247,2548,3.719]],["title/classes/TestOtpDto.html",[0,0.176,460,2.226]],["body/classes/TestOtpDto.html",[0,0.319,2,0.991,3,0.101,4,0.101,5,0.101,8,2.036,15,0.193,16,0.597,20,2.935,22,2.427,27,2.153,29,0.309,30,0.013,32,0.56,34,1.217,36,0.739,37,2.575,39,0.326,47,0.731,79,2.42,80,2.632,82,3.035,87,0.159,88,3.525,89,2.153,90,2.705,93,1.206,94,2.682,95,1.092,99,0.216,100,2.632,110,0.008,111,0.008,127,1.969,128,1.804,260,1.023,276,1.341,311,3.508,362,2.753,392,2.064,393,2.287,394,2.064,395,1.969,396,1.804,397,2.682,398,1.969,401,1.969,404,2.169,405,3.791,406,3.525,407,2.423,408,3.25,409,4.032,410,4.47,411,4.238,413,2.753,414,2.58,417,2.916,418,2.287,419,2.064,420,1.883,421,3.603,422,3.988,423,3.033,424,2.064,425,4.04,426,3.198,427,3.033,428,3.388,429,3.688,430,2.326,431,3.994,432,3.388,433,3.388,434,3.198,435,3.388,436,3.688,437,3.906,438,2.064,439,2.287,440,2.064,441,2.287,442,2.287,443,2.287,444,2.287,445,2.287,446,2.287,447,3.198,448,2.287,449,3.198,450,2.287,451,2.423,452,2.423,453,2.423,454,2.423,455,2.423,456,2.169,457,2.169,458,2.169,459,2.169,460,2.885,461,2.885,462,3.198,463,2.169,464,1.663,465,2.064,466,1.883,467,1.969,468,1.969,2549,3.811]],["title/classes/UpdateAnnouncementDto.html",[0,0.176,179,2.785]],["body/classes/UpdateAnnouncementDto.html",[0,0.275,2,1.665,3,0.17,4,0.17,5,0.17,13,3.518,30,0.012,87,0.222,99,0.191,110,0.011,111,0.011,154,2.908,160,4.071,179,5.033,192,5.055,953,5.055,2550,5.591,2551,7.432,2552,5.055,2553,5.055,2554,5.055]],["title/classes/UpdateAppointmentDto.html",[0,0.176,605,2.785]],["body/classes/UpdateAppointmentDto.html",[0,0.308,2,1.57,3,0.16,4,0.16,5,0.16,13,3.399,15,0.306,16,0.805,17,1.302,29,0.351,30,0.013,32,0.887,39,0.517,87,0.236,89,2.517,93,1.912,99,0.18,110,0.011,111,0.011,154,2.743,276,1.929,534,4.873,560,3.84,605,4.864,617,4.769,625,4.091,964,4.769,976,5.274,979,4.091,980,5.274,2552,4.769,2553,4.769,2554,4.769,2555,6.271,2556,7.182,2557,6.041]],["title/classes/UpdateDocumentApplicationDto.html",[0,0.176,1176,2.99]],["body/classes/UpdateDocumentApplicationDto.html",[0,0.286,2,1.391,3,0.142,4,0.142,5,0.142,8,1.83,13,3.158,15,0.271,16,0.748,17,1.379,29,0.387,30,0.013,32,0.98,37,2.408,39,0.572,44,1.694,47,0.6,87,0.233,89,2.547,90,2.338,93,1.694,95,1.534,99,0.16,110,0.01,111,0.01,154,2.431,266,2.183,276,2.038,396,2.533,397,3.321,408,2.697,413,3.447,414,2.247,417,2.637,466,3.296,467,3.447,470,3.755,477,4.621,503,4.331,504,3.402,659,4.121,979,3.625,981,4.923,983,4.226,988,4.226,990,4.673,1002,3.891,1089,5.693,1176,4.851,1198,4.673,2552,5.739,2553,4.226,2554,4.226,2558,6.347,2559,5.352,2560,5.352,2561,5.352,2562,5.352,2563,5.352]],["title/classes/UpdateQueueDto.html",[0,0.176,2564,3.246]],["body/classes/UpdateQueueDto.html",[0,0.307,2,1.565,3,0.16,4,0.16,5,0.16,15,0.305,16,0.803,17,1.436,29,0.416,30,0.013,32,1.053,39,0.614,47,0.644,87,0.214,89,2.682,90,2.511,93,1.905,99,0.179,110,0.011,111,0.011,276,1.926,979,4.077,1015,4.753,1017,5.256,1885,6.043,1903,5.183,2032,4.377,2564,5.659,2565,6.683,2566,6.02,2567,6.02,2568,6.02,2569,6.02]],["title/classes/UpdateUserDto.html",[0,0.176,14,2.124]],["body/classes/UpdateUserDto.html",[0,0.304,1,2.81,2,1.021,3,0.104,4,0.104,5,0.104,6,6.212,7,2.854,8,2.018,9,3.969,10,1.858,11,1.648,12,1.663,13,1.858,14,3.482,15,0.199,16,0.61,17,1.5,18,2.126,19,2.234,20,2.724,21,3.225,22,2.029,23,2.347,24,2.347,25,3.225,26,3.225,27,2.48,28,2.972,29,0.457,30,0.013,31,1.327,32,1.142,33,4.941,34,0.897,35,1.665,36,0.761,37,2.637,39,0.666,41,2.028,42,3.1,43,2.234,47,0.744,48,4.75,49,4.75,50,4.75,51,4.75,52,4.75,53,4.75,54,3.428,57,3.684,58,3.428,60,3.428,62,3.265,63,1.296,64,3.428,66,3.096,67,3.1,69,3.684,70,3.1,72,3.684,73,3.955,74,4.228,75,3.955,76,3.1,78,3.955,79,2.835,80,2.687,81,3.684,82,3.084,83,3.428,85,3.428,87,0.162,88,2.575,89,2.809,90,2.723,91,3.684,92,4.295,93,1.242,94,3.499,95,1.125,96,3.684,97,3.684,98,2.81,99,0.162,100,1.939,101,3.1,102,3.1,103,2.356,104,3.1,105,2.496,106,2.854,107,3.428,108,3.684,109,1.648,110,0.008,111,0.008,1043,3.428,1046,3.428,1051,3.428,1054,3.428,1063,3.428,2570,3.926,2571,3.926,2572,3.926,2573,3.926]],["title/classes/UpdateUserStatusDto.html",[0,0.176,2574,2.99]],["body/classes/UpdateUserStatusDto.html",[0,0.31,2,1.584,3,0.161,4,0.161,5,0.161,8,1.817,12,1.702,15,0.309,16,0.809,29,0.354,30,0.013,32,0.895,37,1.928,39,0.522,87,0.215,93,1.928,95,1.746,99,0.182,110,0.011,111,0.011,119,4.165,136,1.877,138,2.619,276,1.533,417,2.619,948,4.589,962,5.7,1037,3.874,2574,5.249,2575,6.303,2576,5.32,2577,6.093,2578,6.093]],["title/entities/User.html",[12,0.88,112,1.259]],["body/entities/User.html",[0,0.174,3,0.107,4,0.107,5,0.107,12,1.189,15,0.205,16,0.623,18,3.435,21,3.277,22,1.818,23,2.385,24,2.385,25,3.277,26,3.277,27,2.223,28,2.663,29,0.478,30,0.013,31,1.28,32,1.211,34,1.269,35,2.317,36,1.387,39,0.706,44,1.758,47,0.747,63,1.395,87,0.166,99,0.121,110,0.008,111,0.008,112,1.239,114,1.766,116,2.881,119,3.435,121,4.296,122,2.567,123,3.162,132,3.277,135,4.089,136,2.133,138,2.016,142,4.04,144,4.032,145,1.37,479,2.573,486,4.544,489,2.741,501,3.532,502,4.098,521,4.387,537,2.741,547,4.04,623,2.302,1076,4.387,1096,3.534,1097,4.851,1099,3.196,1322,3.807,1698,3.196,1699,3.196,1916,4.851,1921,4.851,2492,4.851,2579,3.534,2580,5.556,2581,4.048,2582,4.048,2583,6.828,2584,4.048,2585,4.048,2586,4.048,2587,4.048,2588,4.048,2589,5.556,2590,4.048,2591,4.048,2592,5.556,2593,4.048,2594,4.048,2595,5.556,2596,4.048,2597,4.048,2598,4.048,2599,5.556,2600,5.556,2601,4.048,2602,4.048,2603,4.048,2604,5.556,2605,4.048,2606,4.048,2607,4.048,2608,5.556,2609,4.048]],["title/classes/UserQueryDto.html",[0,0.176,2610,2.99]],["body/classes/UserQueryDto.html",[0,0.301,2,1.293,3,0.132,4,0.132,5,0.132,8,2.031,15,0.252,16,0.714,17,1.462,22,1.826,28,2.088,29,0.462,30,0.013,31,1.54,32,1.089,34,1.455,35,2.268,37,2.345,39,0.635,47,0.666,63,1.078,78,3.617,87,0.21,89,2.684,90,2.462,91,4.759,93,1.574,94,3.343,95,1.426,98,3.291,99,0.148,103,3.823,109,3.29,110,0.009,111,0.009,172,2.78,173,3.805,353,3.365,1030,5.85,1055,5.85,1161,5.029,1295,5.065,1296,5.188,1325,4.632,1873,5.029,2610,4.632,2611,5.188,2612,4.343,2613,6.37,2614,4.974,2615,4.974,2616,4.974,2617,4.974,2618,6.37,2619,4.974,2620,4.974,2621,4.343,2622,6.37]],["title/classes/UserResponseDto.html",[0,0.176,1879,2.468]],["body/classes/UserResponseDto.html",[0,0.159,2,0.967,3,0.099,4,0.099,5,0.099,8,2.131,11,2.199,12,1.76,15,0.188,16,0.587,17,1.369,18,3.283,20,1.9,21,3.132,22,1.989,23,2.279,24,2.279,25,3.132,26,3.132,28,2.913,29,0.475,30,0.013,31,1.349,32,1.191,34,1.503,35,2.015,36,1.433,37,2.566,39,0.695,44,1.657,47,0.747,57,3.547,62,3.144,63,1.372,66,3.746,69,3.547,72,3.547,74,3.547,87,0.111,94,3.028,95,1.066,98,3.132,99,0.111,103,3.951,105,4.185,109,2.199,110,0.008,111,0.008,116,2.754,119,3.283,121,4.106,122,2.839,136,1.362,138,1.9,276,1.318,417,2.881,571,2.704,623,2.517,715,5.197,948,3.33,1010,5.197,1030,5.197,1031,4.573,1034,3.33,1037,5.002,1038,4.573,1044,5.747,1047,2.981,1061,4.573,1322,3.639,1872,2.518,1879,3.144,2611,5.521,2623,3.719,2624,6.582,2625,5.238,2626,3.719,2627,3.719,2628,3.719,2629,3.719,2630,3.719,2631,3.719,2632,3.719,2633,3.719,2634,3.719,2635,3.719,2636,3.719,2637,3.719,2638,3.719,2639,3.719]],["title/interfaces/UserStats.html",[897,1.392,1304,2.785]],["body/interfaces/UserStats.html",[0,0.104,1,1.97,3,0.064,4,0.064,5,0.064,10,1.15,11,2.238,12,1.663,14,1.97,15,0.123,16,0.427,17,0.44,18,3.328,19,3.498,21,2.992,22,2.046,23,2.502,24,2.416,25,3.618,26,3.536,27,2.154,28,3.047,29,0.373,30,0.013,31,1.425,34,0.555,35,2.095,36,1.459,43,2.17,44,2.106,47,0.521,63,1.04,66,1.383,87,0.204,98,2.432,99,0.114,109,1.02,110,0.006,111,0.006,116,1.104,119,2.549,136,0.632,138,0.882,145,0.823,154,1.104,158,2.325,166,1.2,173,3.136,175,1.316,188,0.487,191,1.316,196,0.947,198,1.917,209,0.823,226,0.913,231,0.929,234,2.573,235,0.983,237,1.97,241,2.805,247,1.545,248,1.316,250,1.834,251,2.423,253,2.94,256,1.646,257,1.646,259,2.573,260,1.881,262,2.523,263,2.583,268,1.646,338,1.601,353,1.732,406,1.15,408,0.983,430,1.664,508,2.861,557,1.545,608,1.459,612,1.383,623,2.633,636,1.459,674,2.549,708,2.425,750,1.767,752,1.767,774,1.2,802,2.289,806,1.2,807,2.432,827,1.459,861,2.17,862,1.255,865,3.296,897,1.291,898,1.316,1028,2.679,1034,1.545,1047,1.383,1064,3.188,1148,2.432,1237,2.583,1252,1.459,1293,2.583,1294,1.767,1295,3.389,1296,4.743,1297,1.767,1298,1.767,1299,1.767,1300,2.425,1301,2.432,1302,1.767,1303,2.289,1304,2.583,1305,4.353,1306,4.353,1307,4.163,1308,4.163,1309,3.188,1310,3.389,1311,4.163,1312,4.209,1313,1.383,1314,1.919,1315,1.646,1316,1.646,1317,1.919,1318,1.919,1319,3.716,1320,3.011,1321,1.919,1322,3.858,1323,1.919,1324,3.011,1325,2.773,1326,1.919,1327,2.773,1328,2.773,1329,2.773,1330,1.919,1331,1.919,1332,1.919,1333,1.919,1334,1.919,1335,2.289,1336,3.011,1337,1.919,1338,4.163,1339,3.011,1340,2.773,1341,2.773,1342,1.767,1343,1.919,1344,4.743,1345,4.209,1346,1.767,1347,1.919,1348,3.011,1349,2.773,1350,4.209,1351,2.773,1352,3.682,1353,2.773,1354,2.583,1355,3.011,1356,1.919,1357,1.919,1358,1.919,1359,1.919,1360,1.919,1361,1.459,1362,1.919,1363,1.919,1364,1.919,1365,1.919,1366,1.767,1367,3.011,1368,3.716,1369,1.767,1370,1.919,1371,3.011,1372,1.767,1373,1.919,1374,1.919,1375,3.011,1376,1.545,1377,1.919,1378,1.919,1379,1.919,1380,1.919,1381,1.919,1382,3.011,1383,1.919,1384,1.919,1385,3.011,1386,1.919,1387,1.919,1388,1.919,1389,1.919,1390,1.919,1391,1.919,1392,1.919,1393,1.919,1394,1.919,1395,1.919,1396,1.919,1397,3.011,1398,1.919,1399,1.919,1400,1.919,1401,1.919,1402,2.773,1403,1.767,1404,2.773,1405,2.773,1406,1.767,1407,1.767,1408,1.919,1409,1.646,1410,1.767,1411,1.919]],["title/classes/UserStatsResponseDto.html",[0,0.176,2640,2.99]],["body/classes/UserStatsResponseDto.html",[0,0.273,2,1.293,3,0.132,4,0.132,5,0.132,8,2.093,12,1.504,15,0.252,16,0.714,29,0.462,30,0.013,31,1.572,32,1.125,35,2.268,37,2.424,39,0.656,44,2.016,47,0.447,63,0.842,87,0.19,95,1.426,98,2.57,99,0.148,110,0.009,111,0.009,128,3.015,417,2.927,565,3.625,861,3.625,863,5.698,948,4.05,949,4.632,1037,4.468,1148,4.21,1305,4.759,1306,4.759,1307,4.759,1308,4.759,1309,3.369,1310,4.468,1311,4.759,1472,4.632,1872,3.369,1879,4.447,1880,5.562,1882,3.617,2611,5.307,2640,4.632,2641,5.562,2642,4.974,2643,4.974,2644,5.562,2645,4.974,2646,4.974,2647,5.388,2648,4.974,2649,4.343]],["title/classes/UsersByRoleDto.html",[0,0.176,2647,2.99]],["body/classes/UsersByRoleDto.html",[0,0.287,2,1.396,3,0.142,4,0.142,5,0.142,8,2.079,12,1.43,15,0.272,16,0.749,29,0.442,30,0.013,31,1.559,32,0.982,35,2.399,37,2.48,39,0.573,47,0.601,63,1.131,87,0.199,95,1.539,98,3.453,99,0.16,110,0.01,111,0.01,128,2.541,417,2.972,565,3.055,861,3.055,863,5.293,948,3.413,949,3.903,1037,4.25,1148,4.128,1305,3.636,1306,3.636,1307,3.636,1308,3.636,1309,4.93,1310,4.843,1311,3.636,1472,3.903,1872,3.636,1876,4.687,1879,4.369,1881,4.687,1882,3.903,2611,4.93,2640,3.903,2641,4.687,2644,4.687,2647,5.539,2649,5.836]],["title/controllers/UsersController.html",[147,1.662,2650,2.99]],["body/controllers/UsersController.html",[0,0.108,1,2.808,3,0.067,4,0.067,5,0.067,8,2.017,10,3.622,11,2.735,12,1.795,14,2.808,15,0.128,17,1.181,27,1.905,29,0.459,30,0.013,32,0.99,35,1.664,36,1.397,39,0.577,47,0.658,63,1.103,87,0.224,95,0.722,99,0.075,109,1.058,110,0.006,111,0.006,147,1.018,149,1.018,151,1.512,153,1.423,154,2.187,155,2.608,156,2.608,158,2.379,161,1.601,163,2.449,164,2.361,166,1.244,167,1.601,173,2.124,175,1.364,176,1.831,178,1.601,180,1.831,182,3.682,183,1.831,184,1.512,185,3.062,187,3.99,188,0.505,191,1.364,193,1.433,195,1.192,196,1.877,198,1.9,205,3.953,209,0.853,231,0.956,234,3.013,241,1.712,250,1.528,251,2.05,253,2.043,259,1.474,260,1.053,262,3.276,276,1.926,333,1.364,334,2.354,338,1.647,353,1.781,369,3.803,518,1.528,557,3.456,558,3.262,561,3.218,564,2.852,565,2.232,566,4.102,568,3.218,570,2.199,571,4.737,572,5.688,592,2.199,593,4.141,608,1.512,611,1.706,618,1.433,619,1.831,620,1.706,621,2.124,622,1.831,623,1.423,624,1.831,627,1.989,628,1.831,629,5.032,630,5.395,631,2.852,634,2.656,636,1.512,638,4.898,644,4.926,645,4.412,653,2.199,654,3.953,678,2.199,680,2.199,685,1.989,708,4.654,774,1.244,802,3.536,806,1.244,807,2.488,862,1.301,1028,3.707,1148,3.223,1149,5.448,1150,5.927,1151,4.537,1152,4.205,1153,5.319,1190,3.745,1211,6.09,1252,2.354,1295,2.493,1296,2.656,1299,1.831,1300,2.493,1303,3.263,1313,2.741,1335,1.512,1338,1.706,1407,1.831,1432,1.831,1433,3.424,1434,2.199,1435,1.989,1436,2.199,1437,2.199,1440,1.831,1445,3.424,1446,2.199,1454,4.205,1457,3.803,1458,4.205,1459,2.199,1460,2.199,1466,3.097,1530,3.424,1646,4.292,1879,2.891,1882,1.831,2263,2.199,2264,2.199,2266,2.199,2574,3.953,2610,3.953,2650,2.852,2651,2.199,2652,4.817,2653,3.922,2654,2.519,2655,3.922,2656,2.519,2657,3.922,2658,2.519,2659,2.519,2660,2.519,2661,2.519,2662,2.519,2663,2.519,2664,2.519,2665,2.519,2666,2.519,2667,2.519,2668,2.519,2669,2.519,2670,2.519,2671,2.519,2672,2.519,2673,2.519,2674,2.519,2675,4.817,2676,2.519,2677,2.519,2678,3.922,2679,3.922,2680,2.199,2681,2.519,2682,3.922,2683,2.519,2684,2.519,2685,2.519,2686,2.519,2687,2.519,2688,2.519,2689,2.519,2690,2.519,2691,2.519,2692,2.519,2693,2.519,2694,2.519,2695,2.519,2696,2.519,2697,2.519,2698,2.519,2699,2.519,2700,2.519,2701,2.519,2702,2.519,2703,2.519,2704,3.922,2705,2.519]],["title/modules/UsersModule.html",[209,1.392,290,2.785]],["body/modules/UsersModule.html",[0,0.244,3,0.151,4,0.151,5,0.151,12,1.219,30,0.013,87,0.242,99,0.17,110,0.01,111,0.01,149,2.804,188,1.142,209,2.531,211,2.815,212,2.815,213,3.086,214,3.086,215,2.815,216,4.047,217,4.047,221,3.755,222,2.815,223,2.944,225,3.946,226,2.142,229,3.946,289,4.866,290,5.65,304,4.499,887,4.975,1298,4.143,1313,4.817,2650,5.435,2680,4.975,2706,4.975,2707,4.975,2708,5.699,2709,4.975,2710,5.699,2711,5.699]],["title/injectables/UsersService.html",[231,1.002,1313,2.34]],["body/injectables/UsersService.html",[0,0.094,1,2.601,3,0.058,4,0.058,5,0.058,10,1.038,11,2.114,12,1.634,14,2.601,15,0.111,16,0.394,17,1.231,18,3.184,19,3.346,21,2.846,22,2.026,23,2.413,24,2.322,25,3.509,26,3.421,27,2.06,28,3.014,29,0.384,30,0.013,31,1.42,34,0.803,35,2.027,36,1.48,39,0.595,43,2.001,44,2.031,47,0.595,63,1.247,66,1.249,87,0.197,98,2.274,99,0.105,109,0.921,110,0.005,111,0.005,116,0.996,119,2.983,136,0.57,138,1.597,145,0.743,153,1.276,154,1.999,155,1.904,156,1.904,158,2.722,163,2.489,164,2.32,166,1.737,172,0.957,173,2.983,175,1.904,188,0.44,191,1.188,196,1.715,198,1.864,209,0.743,226,0.825,231,0.857,232,1.038,234,2.992,235,1.422,237,2.601,241,3.176,247,1.395,248,1.188,250,2.147,251,2.395,253,2.89,256,1.486,257,1.486,259,2.489,260,1.864,262,2.383,263,2.382,268,1.486,338,2.114,353,1.597,406,1.038,408,0.887,430,1.535,508,2.722,557,3.2,558,2.382,568,1.737,608,2.111,612,1.249,623,2.564,636,1.317,674,2.383,750,2.557,752,2.557,774,1.084,802,2.111,806,1.084,807,2.274,827,1.317,861,2.001,862,1.133,865,3.136,897,1.191,1028,3.346,1034,1.395,1047,1.249,1064,2.981,1148,2.274,1237,2.382,1252,1.317,1293,3.409,1294,1.595,1295,3.2,1296,4.6,1297,1.595,1298,1.595,1299,1.595,1300,2.236,1301,3.191,1302,1.595,1303,2.111,1304,1.486,1305,3.409,1306,3.409,1307,2.981,1308,2.981,1309,2.981,1310,3.2,1311,2.981,1312,2.776,1313,2.001,1314,2.776,1315,1.486,1316,2.382,1317,1.732,1318,1.732,1319,3.475,1320,2.776,1321,1.732,1322,3.707,1323,1.732,1324,2.776,1325,2.557,1326,1.732,1327,2.557,1328,2.557,1329,2.557,1330,1.732,1331,1.732,1332,1.732,1333,1.732,1334,1.732,1335,2.111,1336,2.776,1337,1.732,1338,3.982,1339,2.776,1340,2.557,1341,2.557,1342,1.595,1343,1.732,1344,4.6,1345,3.975,1346,1.595,1347,3.475,1348,2.776,1349,2.557,1350,3.975,1351,2.557,1352,3.503,1353,2.557,1354,2.382,1355,2.776,1356,1.732,1357,1.732,1358,1.732,1359,1.732,1360,1.732,1361,1.317,1362,1.732,1363,1.732,1364,1.732,1365,1.732,1366,1.595,1367,2.776,1368,3.475,1369,1.595,1370,1.732,1371,2.776,1372,1.595,1373,1.732,1374,1.732,1375,2.776,1376,1.395,1377,1.732,1378,1.732,1379,1.732,1380,1.732,1381,1.732,1382,2.776,1383,1.732,1384,1.732,1385,2.776,1386,1.732,1387,1.732,1388,1.732,1389,1.732,1390,1.732,1391,1.732,1392,1.732,1393,1.732,1394,1.732,1395,1.732,1396,1.732,1397,2.776,1398,1.732,1399,2.776,1400,2.776,1401,2.776,1402,2.557,1403,1.595,1404,2.557,1405,2.557,1406,1.595,1407,1.595,1408,1.732,1409,1.486,1410,1.595,1411,1.732,2712,3.517,2713,3.517,2714,2.194,2715,3.517,2716,2.194,2717,2.194,2718,2.194,2719,2.194,2720,2.194,2721,2.194,2722,2.194,2723,2.194,2724,2.194,2725,2.194]],["title/classes/VerifyOtpDto.html",[0,0.176,424,2.226]],["body/classes/VerifyOtpDto.html",[0,0.314,2,0.934,3,0.095,4,0.095,5,0.095,8,2.018,15,0.182,16,0.573,17,0.927,20,2.909,22,2.416,27,2.085,29,0.376,30,0.013,32,0.874,33,2.284,34,1.48,36,0.696,37,2.58,39,0.51,44,1.137,47,0.733,79,2.322,80,2.525,82,3.202,87,0.152,88,3.466,89,2.085,90,2.669,93,1.137,94,2.597,95,1.03,99,0.212,100,1.775,110,0.008,111,0.008,127,1.856,128,1.701,172,1.568,260,0.965,276,1.287,311,3.574,362,3.074,392,1.946,393,2.157,394,1.946,395,1.856,396,2.42,397,2.597,398,1.856,401,1.856,404,2.045,405,3.854,406,3.466,407,2.284,408,3.262,409,3.965,410,4.395,411,4.168,413,2.641,414,2.722,417,2.888,418,2.157,419,1.946,420,1.775,421,3.965,422,4.077,423,2.909,424,2.768,425,4.168,426,3.572,427,3.387,428,3.783,429,3.891,430,2.597,431,4.111,432,3.25,433,3.783,434,3.068,435,3.25,436,3.891,437,4.121,438,1.946,439,2.157,440,1.946,441,2.157,442,2.157,443,2.157,444,2.157,445,2.157,446,2.157,447,3.068,448,2.157,449,3.068,450,2.157,451,2.284,452,2.284,453,2.284,454,2.284,455,2.284,456,2.045,457,2.045,458,2.045,459,2.045,460,1.946,461,1.946,462,2.157,463,2.045,464,1.568,465,1.946,466,1.775,467,1.856,468,1.856,2482,3.137,2483,3.137,2547,3.137,2726,3.593,2727,3.593,2728,3.593]],["title/coverage.html",[2729,4.434]],["body/coverage.html",[0,0.36,1,1.667,5,0.086,6,3.735,7,4.072,12,1.198,14,1.667,29,0.187,30,0.013,35,0.988,79,1.466,110,0.007,111,0.007,112,2.34,113,2.186,115,2.818,147,2.999,148,2.347,150,2.818,160,2.052,179,2.186,189,2.052,215,1.594,231,1.946,233,2.818,260,0.867,269,2.347,270,2.818,276,1.191,277,2.052,291,2.052,292,1.937,299,2.548,309,3.44,311,1.409,335,5.385,353,1.466,388,2.818,392,1.748,393,4.118,419,1.748,424,1.748,430,3.782,438,1.748,440,1.748,460,1.748,469,3.204,470,3.949,471,4.131,472,4.131,478,3.008,487,2.347,503,2.692,509,1.837,510,2.548,549,2.347,550,2.818,560,2.052,561,1.594,605,2.186,615,2.052,618,1.837,621,1.748,623,1.171,703,2.347,704,2.818,705,3.735,737,2.818,863,3.44,876,2.186,877,1.937,879,2.548,897,2.512,899,4.072,905,2.186,930,1.837,931,2.548,934,1.594,952,2.818,953,3.735,963,2.818,964,3.735,981,2.186,982,2.818,983,3.735,1013,2.548,1014,2.818,1015,3.735,1028,1.837,1029,2.818,1067,4.484,1068,3.735,1078,3.204,1128,2.347,1129,2.818,1148,1.667,1176,2.347,1196,2.347,1261,2.839,1267,4.131,1293,2.186,1294,4.072,1301,1.667,1304,2.186,1313,1.837,1413,2.818,1414,2.818,1421,2.347,1422,4.131,1427,2.186,1429,2.186,1479,2.548,1669,2.818,1677,2.818,1741,2.818,1812,2.818,1825,2.818,1870,2.548,1871,2.818,1872,4.177,1879,1.937,1883,2.548,1895,3.008,1910,2.818,1911,2.818,1939,2.052,1940,2.818,1953,2.186,2024,2.186,2026,2.818,2027,2.347,2035,2.347,2036,2.818,2052,2.818,2053,2.818,2136,4.131,2207,2.818,2226,3.187,2227,4.131,2286,2.347,2455,3.735,2461,3.735,2465,2.347,2485,2.818,2494,2.347,2495,2.818,2522,2.818,2550,2.818,2555,2.818,2558,2.818,2564,2.548,2565,2.818,2574,2.347,2575,2.818,2576,2.818,2579,2.818,2610,2.347,2611,4.177,2612,2.818,2640,2.347,2647,2.347,2650,3.44,2651,4.131,2729,2.548,2730,2.818,2731,3.228,2732,7.09,2733,7.271,2734,4.731,2735,4.731,2736,7.09,2737,4.131,2738,8.177,2739,6.167,2740,3.228,2741,3.228,2742,6.566,2743,6.167,2744,2.818,2745,3.228,2746,3.228,2747,3.228,2748,2.818,2749,5.385,2750,6.167,2751,2.818,2752,2.818,2753,2.818,2754,6.167,2755,5.601,2756,3.228,2757,6.566,2758,3.228,2759,4.731,2760,4.731,2761,3.228,2762,4.731,2763,3.228,2764,3.228,2765,3.228,2766,3.228,2767,3.228,2768,3.228]],["title/dependencies.html",[212,2.444,2769,2.996]],["body/dependencies.html",[0,0.292,30,0.013,93,1.755,95,1.59,110,0.01,111,0.01,122,2.085,145,1.878,188,1.111,212,2.74,226,2.085,296,3.003,298,4.032,772,4.842,881,4.379,883,3.526,890,3.526,904,4.959,1194,5.955,1195,5.955,1303,3.329,1695,4.379,1785,4.842,1838,4.842,1984,4.842,1985,5.955,2464,4.379,2621,4.842,2770,7.911,2771,5.546,2772,6.821,2773,5.546,2774,5.546,2775,5.546,2776,5.546,2777,5.546,2778,5.546,2779,5.546,2780,5.546,2781,5.546,2782,5.546,2783,5.546,2784,5.546,2785,5.546,2786,5.546,2787,5.546,2788,5.546,2789,5.546,2790,5.546,2791,5.546,2792,5.546,2793,5.546,2794,6.821,2795,5.546,2796,5.546,2797,5.546,2798,5.546,2799,5.546,2800,5.546,2801,5.546,2802,5.546,2803,5.546,2804,5.546,2805,5.546,2806,5.546,2807,5.546,2808,5.546,2809,5.546,2810,5.546,2811,5.546]],["title/miscellaneous/enumerations.html",[2812,2.182,2813,4.319]],["body/miscellaneous/enumerations.html",[3,0.145,15,0.277,30,0.013,110,0.01,111,0.01,172,3.758,395,3.49,401,2.821,413,3.49,464,3.502,465,3.658,466,2.697,467,2.821,468,3.789,470,2.821,510,4.311,534,4.294,543,4.575,544,4.872,545,4.6,931,4.311,944,5.898,948,4.294,949,4.912,1067,3.97,1068,5.791,1089,4.912,1106,4.767,1107,4.767,1108,5.898,1109,4.767,1110,3.97,1111,4.767,1112,4.767,1113,4.767,1114,4.767,1115,4.767,1116,5.898,1117,5.898,1118,4.767,1119,4.767,1120,4.767,1121,4.311,1883,4.311,1903,4.575,1907,4.912,2812,3.471,2813,4.767,2814,6.755,2815,5.46,2816,5.46,2817,5.46]],["title/miscellaneous/functions.html",[2812,2.182,2818,4.319]],["body/miscellaneous/functions.html",[15,0.324,17,1.158,29,0.371,30,0.012,63,1.082,110,0.011,111,0.011,163,2.403,215,3.876,2749,5.581,2751,6.852,2752,6.482,2753,6.852,2812,4.063,2818,5.581,2819,8.077,2820,6.392,2821,7.847]],["title/index.html",[15,0.174,838,2.495,2822,3.432]],["body/index.html",[4,0.121,8,1.147,30,0.012,37,2.267,97,3.085,110,0.009,111,0.009,223,3.953,237,2.353,268,3.085,345,4.374,360,3.597,371,3.312,376,4.043,378,3.085,397,3.339,409,3.258,466,2.25,664,3.978,674,4.143,725,2.896,909,5.759,1047,2.593,1110,3.312,1130,5.253,1192,3.597,1457,3.597,1615,3.978,1674,4.75,1723,3.312,1724,3.597,1725,3.312,1793,5.253,1943,3.978,2078,6.813,2151,3.978,2287,3.978,2305,3.978,2333,3.978,2371,5.253,2390,3.978,2729,3.597,2730,5.253,2823,6.016,2824,4.556,2825,4.556,2826,4.556,2827,6.736,2828,4.556,2829,4.556,2830,6.736,2831,6.016,2832,4.556,2833,4.556,2834,4.556,2835,6.736,2836,4.556,2837,7.165,2838,4.556,2839,7.921,2840,4.556,2841,4.556,2842,4.556,2843,4.556,2844,6.736,2845,4.556,2846,4.556,2847,4.556,2848,4.556,2849,4.556,2850,7.165,2851,6.016,2852,4.556,2853,4.556,2854,4.556,2855,6.016,2856,7.165,2857,6.016,2858,4.556,2859,7.652,2860,7.165,2861,4.556,2862,4.556,2863,4.556,2864,4.556,2865,4.556,2866,7.165,2867,4.556,2868,4.556,2869,4.556,2870,4.556,2871,6.016,2872,4.556,2873,4.556,2874,4.556,2875,4.556,2876,6.016,2877,4.556,2878,4.556,2879,6.016,2880,4.556,2881,4.556,2882,6.256,2883,4.556,2884,4.556,2885,4.556,2886,4.556,2887,4.556,2888,4.556,2889,4.556,2890,4.556,2891,6.016,2892,4.556,2893,4.556,2894,4.556,2895,4.556,2896,4.556,2897,4.556,2898,4.556,2899,6.016,2900,4.556,2901,4.556,2902,4.556,2903,4.556,2904,6.016,2905,4.556,2906,4.556,2907,4.556,2908,6.016,2909,6.016,2910,4.556,2911,4.556,2912,4.556,2913,4.556,2914,4.556,2915,4.556,2916,4.556,2917,4.556,2918,4.556,2919,4.556,2920,3.978,2921,4.556,2922,4.556,2923,4.556,2924,4.556,2925,4.556,2926,4.556]],["title/modules.html",[211,2.774]],["body/modules.html",[30,0.011,110,0.011,111,0.011,210,4.229,211,3.085,281,4.54,285,4.229,286,4.229,287,4.229,288,4.229,289,3.748,290,4.229,2882,7.348,2927,8.416,2928,8.416,2929,8.416]],["title/overview.html",[2930,4.903]],["body/overview.html",[2,1.16,30,0.013,79,2.027,109,1.874,110,0.009,111,0.009,114,1.948,149,1.805,189,4.936,209,1.511,210,5.152,211,2.205,212,2.205,213,2.417,214,2.417,215,2.205,216,2.417,217,2.417,218,3.897,219,3.897,220,3.897,221,3.214,222,2.205,223,2.306,232,2.112,277,4.239,281,6.163,282,3.897,283,3.897,284,3.897,285,5.152,286,5.669,287,5.406,288,5.46,289,4.733,290,5.34,291,5.013,292,4.733,615,4.936,697,3.897,698,3.897,699,3.897,872,3.897,874,3.897,875,3.897,876,5.258,877,4.66,898,2.417,1196,5.645,1258,3.897,1259,3.897,1260,3.897,1261,4.66,1301,4.011,1313,4.418,1939,4.518,1953,5.258,2021,3.897,2022,3.897,2023,3.897,2024,5.258,2286,3.245,2515,3.897,2516,3.897,2517,3.897,2706,3.897,2707,3.897,2709,3.897,2744,5.182,2930,3.897,2931,4.463,2932,4.463,2933,4.463]],["title/properties.html",[16,0.554,2769,2.996]],["body/properties.html",[8,1.66,16,0.739,30,0.012,110,0.011,111,0.011,1110,4.795,2920,5.758,2934,6.595,2935,6.595,2936,6.595]],["title/miscellaneous/variables.html",[913,3.35,2812,2.182]],["body/miscellaneous/variables.html",[12,1.485,15,0.289,27,2,28,2.396,29,0.434,30,0.013,34,1.777,47,0.624,110,0.01,111,0.01,114,2.491,172,3.396,198,1.533,251,1.69,299,5.48,320,4.984,321,4.984,323,4.15,327,4.15,329,4.984,330,4.984,331,4.984,336,4.15,345,5.047,358,3.426,561,2.82,568,2.82,623,2.894,913,3.866,1190,3.426,1707,4.506,2375,6.061,2455,4.506,2456,4.984,2457,4.15,2458,4.984,2459,4.984,2460,4.984,2465,5.047,2737,4.984,2748,4.984,2812,3.629,2937,5.708,2938,6.942,2939,5.708,2940,5.708,2941,5.708,2942,5.708,2943,5.708,2944,5.708,2945,5.708,2946,5.708,2947,5.708,2948,5.708,2949,5.708]]],"invertedIndex":[["",{"_index":30,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"classes/ResetPasswordDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":430,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/LockoutData.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{}}}],["0.0.1",{"_index":2935,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":2784,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":2804,"title":{},"body":{"dependencies.html":{}}}],["0.3.22",{"_index":2811,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":2783,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":2799,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":2738,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":2762,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":2757,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":2755,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":2761,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":2759,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":2756,"title":{},"body":{"coverage.html":{}}}],["0/19",{"_index":2735,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":2733,"title":{},"body":{"coverage.html":{}}}],["0/24",{"_index":2734,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":2732,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2736,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":2742,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":2754,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":2739,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":2743,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":2760,"title":{},"body":{"coverage.html":{}}}],["001",{"_index":463,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/AppointmentNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["001'})@isstring",{"_index":399,"title":{},"body":{"classes/ApplicationNotificationDto.html":{}}}],["001'})@isstring()@isnotempty",{"_index":716,"title":{},"body":{"classes/AppointmentNotificationDto.html":{}}}],["01",{"_index":1010,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UserResponseDto.html":{}}}],["01t00:00:00.000z",{"_index":2624,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["08:00",{"_index":382,"title":{},"body":{"modules/AppModule.html":{}}}],["09123456789",{"_index":106,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{}}}],["09123456789'})@isstring",{"_index":2208,"title":{},"body":{"classes/RegisterDto.html":{}}}],["09123456789'})@isstring()@isoptional",{"_index":58,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["1",{"_index":109,"title":{"injectables/MinioService-1.html":{},"interfaces/RequestWithUser-1.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService-1.html":{},"classes/PaginatedUsersResponseDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["1.5.4",{"_index":2802,"title":{},"body":{"dependencies.html":{}}}],["1.5.5",{"_index":2779,"title":{},"body":{"dependencies.html":{}}}],["1.8.0",{"_index":2786,"title":{},"body":{"dependencies.html":{}}}],["1/10",{"_index":2747,"title":{},"body":{"coverage.html":{}}}],["1/11",{"_index":2745,"title":{},"body":{"coverage.html":{}}}],["1/12",{"_index":2746,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":2741,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":353,"title":{},"body":{"modules/AppModule.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/QueueNotificationDto.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"classes/UserQueryDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["100",{"_index":128,"title":{},"body":{"entities/Announcement.html":{},"classes/ApplicationNotificationDto.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"classes/ForgotPasswordDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"classes/VerifyOtpDto.html":{}}}],["100).tofixed(1",{"_index":2131,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["1000",{"_index":1476,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["1024",{"_index":1208,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["10:00",{"_index":2401,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["10:30",{"_index":2402,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["10mb",{"_index":1209,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["11",{"_index":2931,"title":{},"body":{"overview.html":{}}}],["11.0.0",{"_index":2772,"title":{},"body":{"dependencies.html":{}}}],["11.0.5",{"_index":2773,"title":{},"body":{"dependencies.html":{}}}],["11.1.0",{"_index":2770,"title":{},"body":{"dependencies.html":{}}}],["11.2.0",{"_index":2775,"title":{},"body":{"dependencies.html":{}}}],["11:59",{"_index":2080,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["12",{"_index":1437,"title":{},"body":{"interfaces/LockoutData.html":{},"controllers/UsersController.html":{}}}],["123",{"_index":49,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["123456",{"_index":427,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["123456'})@isstring()@isoptional",{"_index":2219,"title":{},"body":{"classes/RegisterDto.html":{}}}],["15",{"_index":1472,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{}}}],["16",{"_index":2932,"title":{},"body":{"overview.html":{}}}],["16.5.0",{"_index":2789,"title":{},"body":{"dependencies.html":{}}}],["1990",{"_index":1009,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["1})@isoptional()@type(undefined)@isnumber()@min(1",{"_index":2613,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["2",{"_index":108,"title":{"interfaces/RequestWithUser-2.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{}}}],["2.0.0",{"_index":2794,"title":{},"body":{"dependencies.html":{}}}],["2.0.10",{"_index":2781,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":1150,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":564,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["2024",{"_index":715,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UserResponseDto.html":{}}}],["23",{"_index":2064,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["23:59",{"_index":2081,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["24",{"_index":2411,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["24h",{"_index":896,"title":{},"body":{"modules/AuthModule.html":{}}}],["25",{"_index":2649,"title":{},"body":{"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{}}}],["250",{"_index":1277,"title":{},"body":{"entities/DocumentFile.html":{}}}],["255",{"_index":140,"title":{},"body":{"entities/Announcement.html":{},"entities/DocumentFile.html":{}}}],["2})@isnumber()@isoptional",{"_index":38,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["3",{"_index":1066,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/LockoutData.html":{},"classes/QueueNotificationDto.html":{},"interfaces/RequestWithUser.html":{}}}],["3.14.1",{"_index":2796,"title":{},"body":{"dependencies.html":{}}}],["300",{"_index":1851,"title":{},"body":{"injectables/OTPService.html":{}}}],["30min",{"_index":831,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["31",{"_index":2933,"title":{},"body":{"overview.html":{}}}],["33",{"_index":2740,"title":{},"body":{"coverage.html":{}}}],["3306",{"_index":2943,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3600",{"_index":1737,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["4",{"_index":1034,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/RequestWithUser.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["4.0.1",{"_index":2800,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":2771,"title":{},"body":{"dependencies.html":{}}}],["4.1.0",{"_index":2787,"title":{},"body":{"dependencies.html":{}}}],["4.8.1",{"_index":2807,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":2248,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["401",{"_index":2243,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["403",{"_index":2279,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["404",{"_index":1153,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["409",{"_index":2250,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["5",{"_index":174,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"interfaces/LockoutData.html":{},"injectables/OTPService.html":{},"interfaces/RequestWithUser.html":{}}}],["5.0.1",{"_index":2810,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":2782,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":487,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"coverage.html":{}}}],["500",{"_index":134,"title":{},"body":{"entities/Announcement.html":{},"entities/DocumentFile.html":{}}}],["59",{"_index":2094,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["5:00",{"_index":829,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["6",{"_index":425,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"injectables/AppointmentService.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"injectables/OTPService.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["6.0.0",{"_index":2774,"title":{},"body":{"dependencies.html":{}}}],["6.4.17",{"_index":2777,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":1475,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["60000",{"_index":355,"title":{},"body":{"modules/AppModule.html":{}}}],["639123456789",{"_index":1031,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["6})@isstring()@minlength(6",{"_index":1056,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["7.0.4",{"_index":2798,"title":{},"body":{"dependencies.html":{}}}],["7.8.2",{"_index":2806,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":79,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/ApplicationNotificationDto.html":{},"injectables/AppointmentService.html":{},"classes/ForgotPasswordDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateUserDto.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{},"overview.html":{}}}],["8.0.5",{"_index":2792,"title":{},"body":{"dependencies.html":{}}}],["8.1.0",{"_index":2791,"title":{},"body":{"dependencies.html":{}}}],["8/16",{"_index":2766,"title":{},"body":{"coverage.html":{}}}],["85",{"_index":2641,"title":{},"body":{"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{}}}],["8:00",{"_index":828,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["8})@isstring()@isnotempty()@minlength(8",{"_index":2221,"title":{},"body":{"classes/RegisterDto.html":{}}}],["8})@isstring()@isoptional()@minlength(8",{"_index":83,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["9",{"_index":2744,"title":{},"body":{"coverage.html":{},"overview.html":{}}}],["9000",{"_index":1718,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["999",{"_index":2095,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["9]{6",{"_index":431,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["9]{6}$'})@isstring()@length(6",{"_index":2482,"title":{},"body":{"classes/ResetPasswordDto.html":{},"classes/VerifyOtpDto.html":{}}}],["_",{"_index":1627,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["__dirname",{"_index":329,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["__password",{"_index":1461,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["access_token",{"_index":1520,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["accesskey",{"_index":1703,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["account",{"_index":1470,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["acquiretimeout",{"_index":354,"title":{},"body":{"modules/AppModule.html":{}}}],["action",{"_index":2112,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["active",{"_index":948,"title":{},"body":{"entities/Counter.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"miscellaneous/enumerations.html":{}}}],["activeusers",{"_index":1306,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["add",{"_index":1432,"title":{},"body":{"interfaces/LockoutData.html":{},"classes/QueueGateway.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["adddays",{"_index":769,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["adddays(today",{"_index":841,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["additional",{"_index":1121,"title":{},"body":{"entities/DocumentApplication.html":{},"classes/QueueNotificationDto.html":{},"miscellaneous/enumerations.html":{}}}],["additionalproperties",{"_index":711,"title":{},"body":{"classes/AppointmentNotificationDto.html":{}}}],["address",{"_index":20,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/ApplicationNotificationDto.html":{},"entities/Appointment.html":{},"classes/AppointmentNotificationDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"entities/QueueDetails.html":{},"classes/QueueNotificationDto.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{},"classes/VerifyOtpDto.html":{}}}],["address'})@isemail()@isnotempty",{"_index":1039,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["addselect('count(user.id",{"_index":1389,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["admin",{"_index":10,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["admin/staff",{"_index":573,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["admin/super",{"_index":1171,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["admincreateuser",{"_index":2652,"title":{},"body":{"controllers/UsersController.html":{}}}],["admincreateuser(createuserdto",{"_index":2654,"title":{},"body":{"controllers/UsersController.html":{}}}],["adminid",{"_index":1246,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"interfaces/LockoutData.html":{}}}],["administrator",{"_index":736,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"interfaces/RequestWithUser.html":{}}}],["administrator'})@isstring()@isoptional",{"_index":723,"title":{},"body":{"classes/AppointmentNotificationDto.html":{}}}],["administrators",{"_index":2274,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["adminrolenames",{"_index":1604,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["adminrolenames.some",{"_index":1607,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["adminroles",{"_index":1602,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["adminroles.map((role",{"_index":1605,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["adminupdate",{"_index":1347,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["adminupdate(id",{"_index":2716,"title":{},"body":{"injectables/UsersService.html":{}}}],["adminupdateuser",{"_index":1595,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["adminupdateuserdto",{"_index":1,"title":{"classes/AdminUpdateUserDto.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["advanced",{"_index":339,"title":{},"body":{"modules/AppModule.html":{}}}],["afterconnect",{"_index":383,"title":{},"body":{"modules/AppModule.html":{}}}],["again",{"_index":1503,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["against",{"_index":2328,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["aiven",{"_index":341,"title":{},"body":{"modules/AppModule.html":{}}}],["alert",{"_index":2318,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["alerts",{"_index":2045,"title":{},"body":{"classes/QueueNotificationDto.html":{},"interfaces/RequestWithUser.html":{}}}],["allow",{"_index":678,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/UsersController.html":{}}}],["allowed",{"_index":1217,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["allowedheaders",{"_index":1993,"title":{},"body":{"classes/QueueGateway.html":{}}}],["allowing",{"_index":2872,"title":{},"body":{"index.html":{}}}],["allows",{"_index":2269,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["allqueues",{"_index":2167,"title":{},"body":{"controllers/QueuesController.html":{}}}],["allqueues.map((queue",{"_index":2172,"title":{},"body":{"controllers/QueuesController.html":{}}}],["alltimeslots",{"_index":833,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["alltimeslots.filter((slot",{"_index":835,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["already",{"_index":865,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService-1.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["always",{"_index":2124,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["amazing",{"_index":2914,"title":{},"body":{"index.html":{}}}],["announcement",{"_index":113,"title":{"entities/Announcement.html":{}},"body":{"entities/Announcement.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"coverage.html":{}}}],["announcement.controller",{"_index":227,"title":{},"body":{"modules/AnnouncementModule.html":{}}}],["announcement.dto",{"_index":192,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"classes/UpdateAnnouncementDto.html":{}}}],["announcement.dto.ts",{"_index":953,"title":{},"body":{"classes/CreateAnnouncementDto.html":{},"classes/UpdateAnnouncementDto.html":{},"coverage.html":{}}}],["announcement.dto.ts:10",{"_index":957,"title":{},"body":{"classes/CreateAnnouncementDto.html":{}}}],["announcement.dto.ts:14",{"_index":958,"title":{},"body":{"classes/CreateAnnouncementDto.html":{}}}],["announcement.dto.ts:18",{"_index":955,"title":{},"body":{"classes/CreateAnnouncementDto.html":{}}}],["announcement.dto.ts:22",{"_index":960,"title":{},"body":{"classes/CreateAnnouncementDto.html":{}}}],["announcement.dto.ts:6",{"_index":961,"title":{},"body":{"classes/CreateAnnouncementDto.html":{}}}],["announcement.isactive",{"_index":265,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["announcement.service",{"_index":190,"title":{},"body":{"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{}}}],["announcementcontroller",{"_index":148,"title":{"controllers/AnnouncementController.html":{}},"body":{"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"coverage.html":{}}}],["announcementmodule",{"_index":210,"title":{"modules/AnnouncementModule.html":{}},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["announcementrepository",{"_index":239,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["announcements",{"_index":152,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["announcementservice",{"_index":189,"title":{"injectables/AnnouncementService.html":{}},"body":{"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"coverage.html":{},"overview.html":{}}}],["api",{"_index":2151,"title":{},"body":{"controllers/QueuesController.html":{},"index.html":{}}}],["apibearerauth",{"_index":631,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["apibearerauth('jwt",{"_index":635,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{}}}],["apibody",{"_index":2232,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["apiconsumes",{"_index":1199,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["apiconsumes('multipart/form",{"_index":1219,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["apioperation",{"_index":629,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["apiparam",{"_index":2231,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["apiproperty",{"_index":417,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/AppointmentNotificationDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/QueueNotificationDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"classes/VerifyOtpDto.html":{}}}],["apiproperty({description",{"_index":396,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/AppointmentNotificationDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{},"classes/QueueNotificationDto.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/VerifyOtpDto.html":{}}}],["apiproperty({enum",{"_index":990,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["apiproperty({example",{"_index":1037,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{}}}],["apiproperty({type",{"_index":1880,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{},"classes/UserStatsResponseDto.html":{}}}],["apipropertyoptional",{"_index":94,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/ApplicationNotificationDto.html":{},"classes/AppointmentNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/VerifyOtpDto.html":{}}}],["apipropertyoptional({description",{"_index":33,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AppointmentNotificationDto.html":{},"classes/RegisterDto.html":{},"classes/SendOtpDto.html":{},"classes/UpdateUserDto.html":{},"classes/VerifyOtpDto.html":{}}}],["apipropertyoptional({example",{"_index":1030,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{}}}],["apiquery",{"_index":2233,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["apiresponse",{"_index":630,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":628,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["apitags('appointments",{"_index":632,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["apitags('authentication",{"_index":2238,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["apitags('document",{"_index":1200,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["apitags('users",{"_index":2684,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":398,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"injectables/AppointmentService.html":{},"entities/DocumentFile.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["app.appointmenttime",{"_index":826,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["app.controller",{"_index":303,"title":{},"body":{"modules/AppModule.html":{}}}],["app.files",{"_index":1272,"title":{},"body":{"entities/DocumentFile.html":{}}}],["app.service",{"_index":278,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app.statushistory",{"_index":480,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["appcontroller",{"_index":269,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applicantname",{"_index":2417,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["application",{"_index":397,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/VerifyOtpDto.html":{},"index.html":{}}}],["application'})@apiresponse({status",{"_index":1137,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["application.dto",{"_index":1198,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["application.dto.ts",{"_index":983,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"coverage.html":{}}}],["application.dto.ts:12",{"_index":992,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["application.dto.ts:18",{"_index":2560,"title":{},"body":{"classes/UpdateDocumentApplicationDto.html":{}}}],["application.dto.ts:21",{"_index":989,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["application.dto.ts:27",{"_index":2561,"title":{},"body":{"classes/UpdateDocumentApplicationDto.html":{}}}],["application.dto.ts:33",{"_index":997,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["application.dto.ts:42",{"_index":1000,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["application.entity",{"_index":504,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"classes/CreateDocumentApplicationDto.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["application.entity.ts",{"_index":1068,"title":{},"body":{"entities/DocumentApplication.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["application.entity.ts:41",{"_index":1086,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:44",{"_index":1101,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:51",{"_index":1075,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:54",{"_index":1073,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:61",{"_index":1090,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:64",{"_index":1095,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:67",{"_index":1084,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:70",{"_index":1077,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:73",{"_index":1098,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:76",{"_index":1088,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:81",{"_index":1100,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:84",{"_index":1081,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:90",{"_index":1094,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application_id",{"_index":484,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentFile.html":{}}}],["application_subtype",{"_index":1072,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application_type",{"_index":1074,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["applicationid",{"_index":394,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/DocumentFile.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["applicationnotificationdto",{"_index":392,"title":{"classes/ApplicationNotificationDto.html":{}},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{}}}],["applications",{"_index":1130,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"index.html":{}}}],["applications.controller",{"_index":1263,"title":{},"body":{"modules/DocumentApplicationsModule.html":{}}}],["applications.controller.ts",{"_index":1129,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"coverage.html":{}}}],["applications.controller.ts:120",{"_index":1163,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:146",{"_index":1154,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:164",{"_index":1144,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:183",{"_index":1168,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:201",{"_index":1177,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:231",{"_index":1180,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:246",{"_index":1174,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:261",{"_index":1157,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:271",{"_index":1172,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:49",{"_index":1138,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:77",{"_index":1187,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:99",{"_index":1142,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.module",{"_index":310,"title":{},"body":{"modules/AppModule.html":{}}}],["applications.module.ts",{"_index":1262,"title":{},"body":{"modules/DocumentApplicationsModule.html":{}}}],["applications.service",{"_index":1197,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{}}}],["applications.service.ts",{"_index":2758,"title":{},"body":{"coverage.html":{}}}],["applications/document",{"_index":309,"title":{},"body":{"modules/AppModule.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"coverage.html":{}}}],["applications/dto/create",{"_index":982,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"coverage.html":{}}}],["applications/dto/update",{"_index":2558,"title":{},"body":{"classes/UpdateDocumentApplicationDto.html":{},"coverage.html":{}}}],["applications/entities/application",{"_index":471,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"coverage.html":{}}}],["applications/entities/document",{"_index":1067,"title":{},"body":{"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["applications/services/minio.service.ts",{"_index":1741,"title":{},"body":{"injectables/MinioService-1.html":{},"coverage.html":{}}}],["applications/services/minio.service.ts:114",{"_index":1755,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:130",{"_index":1757,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:154",{"_index":1749,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:164",{"_index":1752,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:173",{"_index":1759,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:67",{"_index":1760,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:7",{"_index":1762,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:71",{"_index":1750,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:8",{"_index":1763,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:86",{"_index":1761,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:9",{"_index":1748,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applicationstatus",{"_index":1089,"title":{},"body":{"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"classes/UpdateDocumentApplicationDto.html":{},"miscellaneous/enumerations.html":{}}}],["applicationstatus.approved",{"_index":2562,"title":{},"body":{"classes/UpdateDocumentApplicationDto.html":{}}}],["applicationstatus.pending",{"_index":1127,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["applicationstatushistory",{"_index":469,"title":{"entities/ApplicationStatusHistory.html":{}},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentApplication.html":{},"modules/DocumentApplicationsModule.html":{},"coverage.html":{}}}],["applicationsubtype",{"_index":984,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"interfaces/RequestWithUser.html":{}}}],["applicationtype",{"_index":395,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{},"miscellaneous/enumerations.html":{}}}],["applicationtype.birth_certificate",{"_index":1003,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["apply",{"_index":1324,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["appmodule",{"_index":281,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appointment",{"_index":509,"title":{"entities/Appointment.html":{}},"body":{"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["appointment'})@apiresponse({status",{"_index":563,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["appointment.appointmentdate",{"_index":798,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointment.appointmenttime",{"_index":800,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointment.controller",{"_index":701,"title":{},"body":{"modules/AppointmentModule.html":{}}}],["appointment.dto",{"_index":617,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"classes/UpdateAppointmentDto.html":{}}}],["appointment.dto.ts",{"_index":964,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{},"coverage.html":{}}}],["appointment.dto.ts:13",{"_index":970,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:17",{"_index":972,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:21",{"_index":973,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:25",{"_index":966,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:29",{"_index":974,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:33",{"_index":975,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:37",{"_index":968,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:41",{"_index":969,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:45",{"_index":977,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:48",{"_index":978,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:51",{"_index":971,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:9",{"_index":2557,"title":{},"body":{"classes/UpdateAppointmentDto.html":{}}}],["appointment.service",{"_index":616,"title":{},"body":{"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{}}}],["appointment.status",{"_index":814,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointment.userid",{"_index":681,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["appointment_type",{"_index":1914,"title":{},"body":{"entities/QueueDetails.html":{}}}],["appointmentcontroller",{"_index":549,"title":{"controllers/AppointmentController.html":{}},"body":{"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"coverage.html":{}}}],["appointmentdate",{"_index":511,"title":{},"body":{"entities/Appointment.html":{},"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{}}}],["appointmentdetails",{"_index":706,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"interfaces/RequestWithUser.html":{}}}],["appointmentmodule",{"_index":285,"title":{"modules/AppointmentModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules.html":{},"overview.html":{}}}],["appointmentnotificationdto",{"_index":703,"title":{"classes/AppointmentNotificationDto.html":{}},"body":{"classes/AppointmentNotificationDto.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["appointmentnumber",{"_index":512,"title":{},"body":{"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"interfaces/RequestWithUser.html":{}}}],["appointmentrepository",{"_index":746,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointments",{"_index":551,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["appointmentservice",{"_index":615,"title":{"injectables/AppointmentService.html":{}},"body":{"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"coverage.html":{},"overview.html":{}}}],["appointmentstatus",{"_index":534,"title":{},"body":{"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{},"miscellaneous/enumerations.html":{}}}],["appointmentstatus.cancelled",{"_index":854,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointmentstatus.completed",{"_index":853,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointmentstatus.confirmed",{"_index":822,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointmentstatus.pending",{"_index":548,"title":{},"body":{"entities/Appointment.html":{},"injectables/AppointmentService.html":{}}}],["appointmenttime",{"_index":513,"title":{},"body":{"entities/Appointment.html":{},"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{}}}],["appointmenttype",{"_index":1016,"title":{},"body":{"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{}}}],["appropriately",{"_index":1616,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["approval",{"_index":2433,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["approved",{"_index":413,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"entities/DocumentApplication.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/VerifyOtpDto.html":{},"miscellaneous/enumerations.html":{}}}],["appservice",{"_index":277,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["appt",{"_index":714,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"interfaces/RequestWithUser.html":{}}}],["array",{"_index":41,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"interfaces/AuthenticatedUser.html":{},"classes/CreateUserDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/PaginatedUsersResponseDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{}}}],["array.isarray(payload.roles",{"_index":928,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["array.isarray(queue.details",{"_index":2178,"title":{},"body":{"controllers/QueuesController.html":{}}}],["asc",{"_index":790,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["asia/manila",{"_index":2067,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["assign",{"_index":43,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["assigned",{"_index":1630,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["assigning",{"_index":1536,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["assignment",{"_index":2679,"title":{},"body":{"controllers/UsersController.html":{}}}],["assignment'})@apiresponse({status",{"_index":2658,"title":{},"body":{"controllers/UsersController.html":{}}}],["assignments",{"_index":2277,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["assignrolestouser",{"_index":2523,"title":{},"body":{"injectables/RolesService.html":{}}}],["assignrolestouser(userid",{"_index":2528,"title":{},"body":{"injectables/RolesService.html":{}}}],["async",{"_index":234,"title":{},"body":{"injectables/AnnouncementService.html":{},"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["attempt",{"_index":1506,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["attempting",{"_index":1597,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["attempts",{"_index":1423,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["attemptsused",{"_index":2443,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["audit",{"_index":1439,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["auth",{"_index":636,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth.controller",{"_index":885,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":620,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["auth.guard.ts",{"_index":1414,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":884,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/RequestWithUser.html":{}}}],["auth/auth.module",{"_index":302,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/decorators/roles.decorator",{"_index":624,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["auth/decorators/user.decorator",{"_index":626,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{}}}],["auth/dto/update",{"_index":1299,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth/guards/jwt",{"_index":619,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["auth/guards/roles.guard",{"_index":622,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["auth/jwt.strategy",{"_index":627,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["authcontroller",{"_index":879,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["authenticated",{"_index":639,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["authenticateduser",{"_index":561,"title":{"interfaces/AuthenticatedUser.html":{}},"body":{"controllers/AppointmentController.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authentication",{"_index":2304,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["authguard",{"_index":1416,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":1415,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":286,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":2920,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authorization",{"_index":1994,"title":{},"body":{"classes/QueueGateway.html":{}}}],["authservice",{"_index":876,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{},"overview.html":{}}}],["auto",{"_index":1048,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/QueueSchedulerService.html":{},"classes/RegisterDto.html":{}}}],["automatically",{"_index":2370,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["availability",{"_index":794,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["available",{"_index":668,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"interfaces/RequestWithUser.html":{}}}],["avoid",{"_index":2395,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["await",{"_index":253,"title":{},"body":{"injectables/AnnouncementService.html":{},"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["aws",{"_index":1793,"title":{},"body":{"injectables/MinioService-1.html":{},"index.html":{}}}],["back",{"_index":1544,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["backend",{"_index":2823,"title":{},"body":{"index.html":{}}}],["backers",{"_index":2915,"title":{},"body":{"index.html":{}}}],["backward",{"_index":1698,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/User.html":{}}}],["bad",{"_index":2249,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["badrequestexception",{"_index":612,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('cannot",{"_index":782,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["badrequestexception('date",{"_index":657,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["badrequestexception('document",{"_index":1225,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["badrequestexception('failed",{"_index":1584,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["badrequestexception('invalid",{"_index":778,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["badrequestexception('this",{"_index":868,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["badrequestexception('user",{"_index":1656,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["badrequestexception(`role",{"_index":1628,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["badrequestexception(`user",{"_index":1611,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["badrequestexception(passwordvalidation.message",{"_index":1529,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["base32",{"_index":1853,"title":{},"body":{"injectables/OTPService.html":{}}}],["based",{"_index":2333,"title":{},"body":{"interfaces/RequestWithUser.html":{},"index.html":{}}}],["basic",{"_index":1613,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["bcrypt",{"_index":1303,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare",{"_index":1513,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["bcrypt.compare(logindto.password",{"_index":1452,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["bcrypt.gensalt(this.bcryptrounds",{"_index":1446,"title":{},"body":{"interfaces/LockoutData.html":{},"controllers/UsersController.html":{}}}],["bcrypt.hash(createuserdto.password",{"_index":2700,"title":{},"body":{"controllers/UsersController.html":{}}}],["bcrypt.hash(password",{"_index":1447,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["bcryptrounds",{"_index":1434,"title":{},"body":{"interfaces/LockoutData.html":{},"controllers/UsersController.html":{}}}],["before",{"_index":1580,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["beforeconnect",{"_index":366,"title":{},"body":{"modules/AppModule.html":{}}}],["being",{"_index":1349,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["belongs",{"_index":675,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["below",{"_index":361,"title":{},"body":{"modules/AppModule.html":{}}}],["best",{"_index":2342,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["better",{"_index":1796,"title":{},"body":{"injectables/MinioService-1.html":{},"injectables/QueueSchedulerService.html":{}}}],["between",{"_index":768,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueSchedulerService.html":{}}}],["between(startdate",{"_index":839,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["between(startofday",{"_index":2102,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["bigint",{"_index":1282,"title":{},"body":{"entities/DocumentFile.html":{}}}],["birth",{"_index":401,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{},"miscellaneous/enumerations.html":{}}}],["birth_certificate",{"_index":1106,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["birthdate",{"_index":1008,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["birthplace",{"_index":1011,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["blue",{"_index":2312,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["board",{"_index":2907,"title":{},"body":{"index.html":{}}}],["body",{"_index":182,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["body('documentcategory",{"_index":1220,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["body('status",{"_index":686,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["book",{"_index":783,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["booked",{"_index":866,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["bookedslots",{"_index":824,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["bookedslots.includes(slot",{"_index":836,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["boolean",{"_index":138,"title":{},"body":{"entities/Announcement.html":{},"entities/Appointment.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"entities/QueueDetails.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["bootstrap",{"_index":215,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["both",{"_index":2157,"title":{},"body":{"controllers/QueuesController.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["branded",{"_index":2381,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["breaking",{"_index":2396,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["browse",{"_index":2929,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2927,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":1784,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["bucketname",{"_index":1678,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["building",{"_index":2831,"title":{},"body":{"index.html":{}}}],["bulacan",{"_index":107,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["bulacan'})@isstring()@isoptional",{"_index":54,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["bulak",{"_index":1723,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"interfaces/RequestWithUser.html":{},"index.html":{}}}],["bulak_smart_connect",{"_index":2948,"title":{},"body":{"miscellaneous/variables.html":{}}}],["business",{"_index":1114,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["business_permit",{"_index":1113,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["calculate",{"_index":1854,"title":{},"body":{"injectables/OTPService.html":{}}}],["callback",{"_index":1212,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["callback(null",{"_index":1218,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["called",{"_index":2156,"title":{},"body":{"controllers/QueuesController.html":{}}}],["caller",{"_index":1408,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["canactivate",{"_index":2462,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":2467,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["cancel",{"_index":2104,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cancellation",{"_index":721,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{}}}],["cancellations",{"_index":722,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"injectables/QueueSchedulerService.html":{}}}],["cancelled",{"_index":545,"title":{},"body":{"entities/Appointment.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"entities/Queue.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"miscellaneous/enumerations.html":{}}}],["cancelledcount",{"_index":849,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueSchedulerService.html":{}}}],["cancelledqueues",{"_index":2105,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cancelledqueues.length",{"_index":2109,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cancelledservingqueues",{"_index":2118,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cancelledservingqueues.length",{"_index":2120,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cascade",{"_index":482,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/QueueDetails.html":{}}}],["cascade'})@joincolumn({name",{"_index":1273,"title":{},"body":{"entities/DocumentFile.html":{},"entities/QueueDetails.html":{}}}],["cases",{"_index":2301,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["catch",{"_index":806,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["category",{"_index":1222,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["category)'})@apiresponse({status",{"_index":1162,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["caught",{"_index":1620,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["centralized",{"_index":1442,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["certificate",{"_index":468,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{},"miscellaneous/enumerations.html":{}}}],["certificate'})@isstring",{"_index":402,"title":{},"body":{"classes/ApplicationNotificationDto.html":{}}}],["change",{"_index":1560,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["changed",{"_index":1366,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["changed_at",{"_index":490,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["changed_by",{"_index":492,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["changedat",{"_index":473,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["changedby",{"_index":474,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["changes",{"_index":2406,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["changing",{"_index":793,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["channel",{"_index":2884,"title":{},"body":{"index.html":{}}}],["character",{"_index":1668,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["characters",{"_index":80,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/ApplicationNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateUserDto.html":{},"classes/VerifyOtpDto.html":{}}}],["check",{"_index":674,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/OTPService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["checkaccountlockout(@body",{"_index":2441,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["checking",{"_index":869,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/RequestWithUser.html":{}}}],["checks",{"_index":372,"title":{},"body":{"modules/AppModule.html":{},"interfaces/RequestWithUser.html":{}}}],["checktimeslotavailability",{"_index":738,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["checktimeslotavailability(date",{"_index":747,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["citizen",{"_index":98,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["citizenrole",{"_index":1532,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["citizenrole.id",{"_index":1534,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["class",{"_index":0,"title":{"classes/AdminUpdateUserDto.html":{},"classes/ApplicationNotificationDto.html":{},"classes/AppointmentNotificationDto.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/QueueGateway.html":{},"classes/QueueNotificationDto.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"classes/VerifyOtpDto.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"classes/ResetPasswordDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/ApplicationNotificationDto.html":{},"classes/AppointmentNotificationDto.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/QueueGateway.html":{},"classes/QueueNotificationDto.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"classes/VerifyOtpDto.html":{},"overview.html":{}}}],["cleanupexpiredotps",{"_index":1826,"title":{},"body":{"injectables/OTPService.html":{}}}],["clear",{"_index":2451,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["clearaccountlockout(@body",{"_index":2452,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["clearaccountlockout(identifier",{"_index":1486,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["cleared",{"_index":1490,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["clearing",{"_index":2454,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["clicks",{"_index":2871,"title":{},"body":{"index.html":{}}}],["client",{"_index":1961,"title":{},"body":{"classes/QueueGateway.html":{}}}],["client.id",{"_index":2001,"title":{},"body":{"classes/QueueGateway.html":{}}}],["client.join('queue_updates",{"_index":2012,"title":{},"body":{"classes/QueueGateway.html":{}}}],["client.join(`counter_${counterid",{"_index":2009,"title":{},"body":{"classes/QueueGateway.html":{}}}],["client.join(`queue_${queueid",{"_index":2004,"title":{},"body":{"classes/QueueGateway.html":{}}}],["clients",{"_index":2014,"title":{},"body":{"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{}}}],["cloud",{"_index":2858,"title":{},"body":{"index.html":{}}}],["cluster_announcementmodule",{"_index":218,"title":{},"body":{"modules/AnnouncementModule.html":{},"overview.html":{}}}],["cluster_announcementmodule_exports",{"_index":219,"title":{},"body":{"modules/AnnouncementModule.html":{},"overview.html":{}}}],["cluster_announcementmodule_providers",{"_index":220,"title":{},"body":{"modules/AnnouncementModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":282,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":284,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":283,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appointmentmodule",{"_index":697,"title":{},"body":{"modules/AppointmentModule.html":{},"overview.html":{}}}],["cluster_appointmentmodule_exports",{"_index":698,"title":{},"body":{"modules/AppointmentModule.html":{},"overview.html":{}}}],["cluster_appointmentmodule_providers",{"_index":699,"title":{},"body":{"modules/AppointmentModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":872,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":874,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":873,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":875,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_documentapplicationsmodule",{"_index":1258,"title":{},"body":{"modules/DocumentApplicationsModule.html":{},"overview.html":{}}}],["cluster_documentapplicationsmodule_exports",{"_index":1259,"title":{},"body":{"modules/DocumentApplicationsModule.html":{},"overview.html":{}}}],["cluster_documentapplicationsmodule_providers",{"_index":1260,"title":{},"body":{"modules/DocumentApplicationsModule.html":{},"overview.html":{}}}],["cluster_queuemodule",{"_index":2021,"title":{},"body":{"modules/QueueModule.html":{},"overview.html":{}}}],["cluster_queuemodule_exports",{"_index":2023,"title":{},"body":{"modules/QueueModule.html":{},"overview.html":{}}}],["cluster_queuemodule_providers",{"_index":2022,"title":{},"body":{"modules/QueueModule.html":{},"overview.html":{}}}],["cluster_rolesmodule",{"_index":2515,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_rolesmodule_exports",{"_index":2517,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_rolesmodule_providers",{"_index":2516,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":2706,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":2707,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":2708,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":2709,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":362,"title":{},"body":{"modules/AppModule.html":{},"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/LockoutData.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["coding",{"_index":2383,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["color",{"_index":2382,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["column",{"_index":144,"title":{},"body":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/OTP.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["column({default",{"_index":527,"title":{},"body":{"entities/Appointment.html":{},"entities/OTP.html":{}}}],["column({name",{"_index":486,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["column({nullable",{"_index":530,"title":{},"body":{"entities/Appointment.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{}}}],["column({type",{"_index":125,"title":{},"body":{"entities/Announcement.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/OTP.html":{},"entities/Queue.html":{}}}],["column({unique",{"_index":521,"title":{},"body":{"entities/Appointment.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["combine",{"_index":2166,"title":{},"body":{"controllers/QueuesController.html":{}}}],["come",{"_index":2877,"title":{},"body":{"index.html":{}}}],["compatibility",{"_index":1699,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/User.html":{}}}],["complete",{"_index":48,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["completed",{"_index":544,"title":{},"body":{"entities/Appointment.html":{},"injectables/AppointmentService.html":{},"entities/Queue.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"miscellaneous/enumerations.html":{}}}],["completed_at",{"_index":1888,"title":{},"body":{"entities/Queue.html":{}}}],["completedat",{"_index":1884,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{}}}],["completedcount",{"_index":848,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["completes",{"_index":2357,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["completion",{"_index":2129,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["complexity",{"_index":444,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["component",{"_index":1571,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["components",{"_index":1365,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["compression",{"_index":2785,"title":{},"body":{"dependencies.html":{}}}],["concurrent",{"_index":2083,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["conditionally",{"_index":1715,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["config/database.config",{"_index":300,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":294,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":315,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":295,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{}}}],["configservice.get('db_host",{"_index":322,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_logging",{"_index":337,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_name",{"_index":328,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_password",{"_index":326,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_port",{"_index":324,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_ssl_reject_unauthorized",{"_index":347,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_synchronize",{"_index":332,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_timezone",{"_index":381,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_username",{"_index":325,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('jwt_secret",{"_index":893,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('node_env",{"_index":344,"title":{},"body":{"modules/AppModule.html":{}}}],["configuration",{"_index":343,"title":{},"body":{"modules/AppModule.html":{},"interfaces/LockoutData.html":{}}}],["configured",{"_index":1440,"title":{},"body":{"interfaces/LockoutData.html":{},"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{},"controllers/UsersController.html":{}}}],["confirmation",{"_index":728,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"interfaces/RequestWithUser.html":{}}}],["confirmation'})@isstring()@isnotempty",{"_index":732,"title":{},"body":{"classes/AppointmentNotificationDto.html":{}}}],["confirmed",{"_index":543,"title":{},"body":{"entities/Appointment.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"interfaces/RequestWithUser.html":{},"miscellaneous/enumerations.html":{}}}],["confirmed'})@isstring()@isoptional",{"_index":726,"title":{},"body":{"classes/AppointmentNotificationDto.html":{}}}],["confirmedcount",{"_index":847,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["conflict",{"_index":2251,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["conflictexception",{"_index":1297,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["conflictexception('email",{"_index":1351,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["conflictexception('username",{"_index":1353,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["conn",{"_index":367,"title":{},"body":{"modules/AppModule.html":{}}}],["conn.query",{"_index":379,"title":{},"body":{"modules/AppModule.html":{}}}],["conn.query('set",{"_index":373,"title":{},"body":{"modules/AppModule.html":{}}}],["connect",{"_index":1725,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"interfaces/RequestWithUser.html":{},"index.html":{}}}],["connected",{"_index":2000,"title":{},"body":{"classes/QueueGateway.html":{}}}],["connection",{"_index":348,"title":{},"body":{"modules/AppModule.html":{}}}],["connectionlimit",{"_index":352,"title":{},"body":{"modules/AppModule.html":{}}}],["consistent",{"_index":1539,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["console",{"_index":340,"title":{},"body":{"modules/AppModule.html":{}}}],["const",{"_index":251,"title":{},"body":{"injectables/AnnouncementService.html":{},"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":235,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["constructor(announcementrepository",{"_index":236,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["constructor(appointmentrepository",{"_index":744,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["constructor(configservice",{"_index":1418,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/MinioService-1.html":{}}}],["constructor(otprepository",{"_index":1829,"title":{},"body":{"injectables/OTPService.html":{}}}],["constructor(private",{"_index":195,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppController.html":{},"controllers/AppointmentController.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService-1.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser-2.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{}}}],["constructor(queuerepository",{"_index":2059,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["constructor(queueservice",{"_index":1952,"title":{},"body":{"classes/QueueGateway.html":{}}}],["constructor(reflector",{"_index":2511,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(rolesrepository",{"_index":2525,"title":{},"body":{"injectables/RolesService.html":{}}}],["constructor(usersrepository",{"_index":2714,"title":{},"body":{"injectables/UsersService.html":{}}}],["contact",{"_index":57,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["contact_number",{"_index":2580,"title":{},"body":{"entities/User.html":{}}}],["contactnumber",{"_index":21,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["contain",{"_index":436,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/LockoutData.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["containing",{"_index":995,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["content",{"_index":1729,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{}}}],["context",{"_index":2514,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":2471,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":2470,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":2472,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["continues",{"_index":2400,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["controller",{"_index":147,"title":{"controllers/AnnouncementController.html":{},"controllers/AppController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AnnouncementController.html":{},"controllers/AppController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('announcements",{"_index":194,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["controller('appointments",{"_index":633,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["controller('auth",{"_index":2239,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["controller('document",{"_index":1201,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["controller('queues",{"_index":2147,"title":{},"body":{"controllers/QueuesController.html":{}}}],["controller('roles",{"_index":2505,"title":{},"body":{"controllers/RolesController.html":{}}}],["controller('users",{"_index":2685,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":149,"title":{},"body":{"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["converting",{"_index":2265,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["copy",{"_index":987,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["cors",{"_index":1988,"title":{},"body":{"classes/QueueGateway.html":{}}}],["count",{"_index":1310,"title":{},"body":{"interfaces/FindAllOptions.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["counter",{"_index":930,"title":{"entities/Counter.html":{}},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"classes/QueueNotificationDto.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["counter.currentqueue",{"_index":1890,"title":{},"body":{"entities/Queue.html":{}}}],["counter/entities/counter.entity",{"_index":1906,"title":{},"body":{"entities/Queue.html":{},"modules/QueueModule.html":{}}}],["counter_number",{"_index":1892,"title":{},"body":{"entities/Queue.html":{}}}],["counterid",{"_index":1969,"title":{},"body":{"classes/QueueGateway.html":{}}}],["counternumber",{"_index":1885,"title":{},"body":{"entities/Queue.html":{},"controllers/QueuesController.html":{},"classes/UpdateQueueDto.html":{}}}],["counterstatus",{"_index":944,"title":{},"body":{"entities/Counter.html":{},"miscellaneous/enumerations.html":{}}}],["counterstatus.active",{"_index":951,"title":{},"body":{"entities/Counter.html":{}}}],["counts",{"_index":843,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["courses",{"_index":2890,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":2729,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":154,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create')@useguards(jwtauthguard",{"_index":2656,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(@body",{"_index":197,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["create(createannouncementdto",{"_index":159,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{}}}],["create(createappointmentdto",{"_index":559,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["create(createdto",{"_index":1136,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["create(createuserdto",{"_index":1401,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["createannouncementdto",{"_index":160,"title":{"classes/CreateAnnouncementDto.html":{}},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"classes/CreateAnnouncementDto.html":{},"classes/UpdateAnnouncementDto.html":{},"coverage.html":{}}}],["createappointmentdto",{"_index":560,"title":{"classes/CreateAppointmentDto.html":{}},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{},"coverage.html":{}}}],["createappointmentdto.userid",{"_index":640,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["created",{"_index":565,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/MinioService-1.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{}}}],["created_at",{"_index":1076,"title":{},"body":{"entities/DocumentApplication.html":{},"entities/Queue.html":{},"entities/User.html":{}}}],["createdat",{"_index":116,"title":{},"body":{"entities/Announcement.html":{},"injectables/AnnouncementService.html":{},"entities/Appointment.html":{},"entities/DocumentApplication.html":{},"interfaces/FindAllOptions.html":{},"entities/OTP.html":{},"entities/Queue.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["createdatecolumn",{"_index":123,"title":{},"body":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/OTP.html":{},"entities/Queue.html":{},"entities/User.html":{}}}],["createdatecolumn({name",{"_index":489,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/Queue.html":{},"entities/User.html":{}}}],["createdby",{"_index":117,"title":{},"body":{"entities/Announcement.html":{},"classes/CreateAnnouncementDto.html":{}}}],["createdocumentapplicationdto",{"_index":981,"title":{"classes/CreateDocumentApplicationDto.html":{}},"body":{"classes/CreateDocumentApplicationDto.html":{},"controllers/DocumentApplicationsController.html":{},"classes/UpdateDocumentApplicationDto.html":{},"coverage.html":{}}}],["createdto",{"_index":1139,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["createparamdecorator",{"_index":2456,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"miscellaneous/variables.html":{}}}],["createquerybuilder",{"_index":1378,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["createquerybuilder('user",{"_index":1320,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["createqueuedto",{"_index":1013,"title":{"classes/CreateQueueDto.html":{}},"body":{"classes/CreateQueueDto.html":{},"coverage.html":{}}}],["creates",{"_index":2657,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuserdto",{"_index":1028,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":2255,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["createuserdto.otp",{"_index":2256,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["creating",{"_index":1411,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["creation",{"_index":2625,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["credentials",{"_index":1992,"title":{},"body":{"classes/QueueGateway.html":{},"interfaces/RequestWithUser.html":{}}}],["critical",{"_index":1577,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["cron",{"_index":2076,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cron('59",{"_index":2063,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cruz",{"_index":1007,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["ctx",{"_index":2458,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":2459,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"miscellaneous/variables.html":{}}}],["current",{"_index":1466,"title":{},"body":{"interfaces/LockoutData.html":{},"classes/PaginatedUsersResponseDto.html":{},"controllers/UsersController.html":{}}}],["current.attempts",{"_index":1467,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["current.lastattempt",{"_index":1468,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["current.lockeduntil",{"_index":1473,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["current_queue_id",{"_index":938,"title":{},"body":{"entities/Counter.html":{}}}],["currentqueue",{"_index":932,"title":{},"body":{"entities/Counter.html":{}}}],["currentqueueid",{"_index":933,"title":{},"body":{"entities/Counter.html":{}}}],["currentuser",{"_index":2691,"title":{},"body":{"controllers/UsersController.html":{}}}],["currentuser.id",{"_index":2692,"title":{},"body":{"controllers/UsersController.html":{}}}],["currentuser.roles.some((role",{"_index":2693,"title":{},"body":{"controllers/UsersController.html":{}}}],["daily",{"_index":2065,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["data",{"_index":358,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateDocumentApplicationDto.html":{},"controllers/DocumentApplicationsController.html":{},"classes/QueueGateway.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"miscellaneous/variables.html":{}}}],["data')@apioperation({summary",{"_index":1185,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["database",{"_index":327,"title":{},"body":{"modules/AppModule.html":{},"interfaces/LockoutData.html":{},"injectables/OTPService.html":{},"miscellaneous/variables.html":{}}}],["databaseconfig",{"_index":299,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["datasource",{"_index":2821,"title":{},"body":{"miscellaneous/functions.html":{}}}],["date",{"_index":122,"title":{},"body":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"entities/Queue.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"dependencies.html":{}}}],["date')@useguards(jwtauthguard",{"_index":591,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["date().toisostring",{"_index":1786,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["date(date.now",{"_index":1474,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["date.getday",{"_index":781,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["date.now",{"_index":1485,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["day",{"_index":2079,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["dayofweek",{"_index":780,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["dd",{"_index":860,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["death",{"_index":1112,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["death_certificate",{"_index":1111,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["debug",{"_index":1223,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"interfaces/LockoutData.html":{}}}],["debugging",{"_index":1799,"title":{},"body":{"injectables/MinioService-1.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["declarations",{"_index":214,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decline",{"_index":1117,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["decorators",{"_index":32,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"controllers/AppController.html":{},"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"classes/AppointmentNotificationDto.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{},"entities/OTP.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"classes/VerifyOtpDto.html":{}}}],["decorators/roles.decorator",{"_index":2229,"title":{},"body":{"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["dedicated",{"_index":2345,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["deeper",{"_index":2886,"title":{},"body":{"index.html":{}}}],["default",{"_index":34,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"classes/ApplicationNotificationDto.html":{},"entities/Appointment.html":{},"injectables/AppointmentService.html":{},"entities/Counter.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{},"miscellaneous/variables.html":{}}}],["default_role_id",{"_index":2583,"title":{},"body":{"entities/User.html":{}}}],["defaultrole",{"_index":1322,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["defaultroleid",{"_index":18,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["defaultstrategy",{"_index":889,"title":{},"body":{"modules/AuthModule.html":{}}}],["define",{"_index":2466,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["defined",{"_index":39,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{}}}],["dela",{"_index":1006,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["delete",{"_index":185,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/LockoutData.html":{},"controllers/UsersController.html":{}}}],["delete(':id",{"_index":176,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["delete(':id')@apioperation({summary",{"_index":1173,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["delete(':id')@httpcode(httpstatus.no_content)@apioperation({summary",{"_index":603,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["delete(':id')@useguards(rolesguard)@roles('admin",{"_index":2671,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleted",{"_index":1252,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deletefile",{"_index":1680,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["deletefile(objectname",{"_index":1684,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["deleting",{"_index":813,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/MinioService-1.html":{}}}],["deletion",{"_index":694,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["dependencies",{"_index":212,"title":{"dependencies.html":{}},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":2850,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":2861,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":2855,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":2870,"title":{},"body":{"index.html":{}}}],["deprecated",{"_index":2542,"title":{},"body":{"injectables/RolesService.html":{}}}],["desc",{"_index":257,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["desc').skip(skip).take(limit",{"_index":1332,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["description",{"_index":8,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"classes/ApplicationNotificationDto.html":{},"controllers/AppointmentController.html":{},"classes/AppointmentNotificationDto.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentApplicationsController.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/QueueNotificationDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"entities/Role.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"classes/VerifyOtpDto.html":{},"index.html":{},"properties.html":{}}}],["design",{"_index":2386,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["details",{"_index":709,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/Queue.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["details.entity",{"_index":1905,"title":{},"body":{"entities/Queue.html":{},"modules/QueueModule.html":{}}}],["details.entity.ts",{"_index":1911,"title":{},"body":{"entities/QueueDetails.html":{},"coverage.html":{}}}],["details.entity.ts:14",{"_index":1918,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:17",{"_index":1931,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:21",{"_index":1930,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:24",{"_index":1936,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:28",{"_index":1935,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:31",{"_index":1917,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:34",{"_index":1922,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:37",{"_index":1924,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:40",{"_index":1913,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:43",{"_index":1926,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:46",{"_index":1933,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:49",{"_index":1915,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:52",{"_index":1920,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.queue",{"_index":1896,"title":{},"body":{"entities/Queue.html":{}}}],["details?.address",{"_index":2189,"title":{},"body":{"controllers/QueuesController.html":{}}}],["details?.firstname",{"_index":2185,"title":{},"body":{"controllers/QueuesController.html":{}}}],["details?.lastname",{"_index":2186,"title":{},"body":{"controllers/QueuesController.html":{}}}],["details?.middleinitial",{"_index":2187,"title":{},"body":{"controllers/QueuesController.html":{}}}],["details?.phonenumber",{"_index":2190,"title":{},"body":{"controllers/QueuesController.html":{}}}],["details?.reasonofvisit",{"_index":2188,"title":{},"body":{"controllers/QueuesController.html":{}}}],["development",{"_index":360,"title":{},"body":{"modules/AppModule.html":{},"interfaces/RequestWithUser.html":{},"index.html":{}}}],["devtools",{"_index":2896,"title":{},"body":{"index.html":{}}}],["different",{"_index":844,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["digit",{"_index":426,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["digital",{"_index":2826,"title":{},"body":{"index.html":{}}}],["digits",{"_index":434,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"injectables/OTPService.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["digits'})@matches(/^[0",{"_index":2483,"title":{},"body":{"classes/ResetPasswordDto.html":{},"classes/VerifyOtpDto.html":{}}}],["direct",{"_index":1792,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["disable",{"_index":369,"title":{},"body":{"modules/AppModule.html":{},"interfaces/LockoutData.html":{},"controllers/UsersController.html":{}}}],["disabled",{"_index":2365,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["disconnected",{"_index":2003,"title":{},"body":{"classes/QueueGateway.html":{}}}],["discord",{"_index":2883,"title":{},"body":{"index.html":{}}}],["disposition",{"_index":1797,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["dive",{"_index":2885,"title":{},"body":{"index.html":{}}}],["document",{"_index":503,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"classes/UpdateDocumentApplicationDto.html":{},"coverage.html":{}}}],["document_category",{"_index":1276,"title":{},"body":{"entities/DocumentFile.html":{}}}],["documentapplication",{"_index":478,"title":{"entities/DocumentApplication.html":{}},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentApplication.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"coverage.html":{}}}],["documentapplicationscontroller",{"_index":1128,"title":{"controllers/DocumentApplicationsController.html":{}},"body":{"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"coverage.html":{}}}],["documentapplicationsmodule",{"_index":287,"title":{"modules/DocumentApplicationsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules.html":{},"overview.html":{}}}],["documentapplicationsservice",{"_index":1196,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"coverage.html":{},"overview.html":{}}}],["documentation",{"_index":2730,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["documentcategory",{"_index":1183,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{}}}],["documentfile",{"_index":1078,"title":{"entities/DocumentFile.html":{}},"body":{"entities/DocumentApplication.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"coverage.html":{}}}],["doe",{"_index":105,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["doe'})@isstring()@isnotempty",{"_index":2214,"title":{},"body":{"classes/RegisterDto.html":{}}}],["doe'})@isstring()@isoptional",{"_index":67,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["don't",{"_index":677,"title":{},"body":{"controllers/AppointmentController.html":{},"interfaces/RequestWithUser.html":{}}}],["dotenv",{"_index":2788,"title":{},"body":{"dependencies.html":{}}}],["download",{"_index":1166,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["dropschema",{"_index":364,"title":{},"body":{"modules/AppModule.html":{}}}],["dto",{"_index":9,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{}}}],["dto.applicantname",{"_index":2424,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["dto.applicationid",{"_index":2421,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["dto.applicationsubtype",{"_index":2423,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["dto.applicationtype",{"_index":2422,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["dto.email",{"_index":2419,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["dto.newstatus",{"_index":2430,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["dto.previousstatus",{"_index":2431,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["dto.rejectionreason",{"_index":2439,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["dto.status",{"_index":2426,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["dto.statusmessage",{"_index":2432,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["dto.submissiondate",{"_index":2425,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["dto/appointment",{"_index":2237,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["dto/create",{"_index":191,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/login.dto",{"_index":1428,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["dto/otp.dto",{"_index":2234,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["dto/queue",{"_index":2235,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["dto/register.dto",{"_index":1430,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["dto/update",{"_index":193,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["dto/user",{"_index":2682,"title":{},"body":{"controllers/UsersController.html":{}}}],["due",{"_index":1501,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["during",{"_index":1619,"title":{},"body":{"interfaces/LockoutData.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{}}}],["e.g",{"_index":73,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["e2e",{"_index":2846,"title":{},"body":{"index.html":{}}}],["each",{"_index":1059,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["eager",{"_index":1093,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["efficient",{"_index":2832,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":2853,"title":{},"body":{"index.html":{}}}],["email",{"_index":22,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/ApplicationNotificationDto.html":{},"classes/AppointmentNotificationDto.html":{},"interfaces/AuthenticatedUser.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/QueueNotificationDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{}}}],["email'})@isemail",{"_index":407,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["email.service",{"_index":1839,"title":{},"body":{"injectables/OTPService.html":{}}}],["emailorusername",{"_index":1671,"title":{},"body":{"classes/LoginDto.html":{}}}],["emailregex",{"_index":1547,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["emailregex.test(email",{"_index":1549,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["emailservice",{"_index":291,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/OTPService.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{},"overview.html":{}}}],["enabled",{"_index":2254,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["enableport",{"_index":1696,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["encoding",{"_index":1852,"title":{},"body":{"injectables/OTPService.html":{}}}],["end",{"_index":665,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/QueueSchedulerService.html":{}}}],["enddate",{"_index":596,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["endofday",{"_index":2070,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["endofday.toisostring",{"_index":2099,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["endpoint",{"_index":1701,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"controllers/QueuesController.html":{}}}],["endpoints",{"_index":1253,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{}}}],["endpoint}${portdisplay",{"_index":1778,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["enforcement",{"_index":2359,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["ensure",{"_index":2390,"title":{},"body":{"interfaces/RequestWithUser.html":{},"index.html":{}}}],["ensurebucketexists",{"_index":1742,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["ensuring",{"_index":1783,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["enterprise",{"_index":2898,"title":{},"body":{"index.html":{}}}],["entities",{"_index":114,"title":{},"body":{"entities/Announcement.html":{},"modules/AppModule.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/OTP.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["entities/announcement.entity",{"_index":228,"title":{},"body":{"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{}}}],["entities/application",{"_index":1264,"title":{},"body":{"modules/DocumentApplicationsModule.html":{}}}],["entities/appointment.entity",{"_index":625,"title":{},"body":{"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["entities/document",{"_index":1002,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["entities/otp.entity",{"_index":312,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/OTPService.html":{}}}],["entities/queue",{"_index":2033,"title":{},"body":{"modules/QueueModule.html":{}}}],["entities/queue.entity",{"_index":2032,"title":{},"body":{"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"classes/UpdateQueueDto.html":{}}}],["entities/role.entity",{"_index":2519,"title":{},"body":{"modules/RolesModule.html":{},"injectables/RolesService.html":{}}}],["entities/user.entity",{"_index":1298,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entity",{"_index":112,"title":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/OTP.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{}},"body":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"interfaces/LockoutData.html":{},"entities/OTP.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{},"coverage.html":{}}}],["entity('announcements",{"_index":146,"title":{},"body":{"entities/Announcement.html":{}}}],["entity('application_status_history",{"_index":505,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["entity('appointments",{"_index":546,"title":{},"body":{"entities/Appointment.html":{}}}],["entity('counters",{"_index":950,"title":{},"body":{"entities/Counter.html":{}}}],["entity('document_applications",{"_index":1122,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["entity('document_files",{"_index":1291,"title":{},"body":{"entities/DocumentFile.html":{}}}],["entity('otps",{"_index":1823,"title":{},"body":{"entities/OTP.html":{}}}],["entity('queue_details",{"_index":1938,"title":{},"body":{"entities/QueueDetails.html":{}}}],["entity('queues",{"_index":1908,"title":{},"body":{"entities/Queue.html":{}}}],["entity('roles",{"_index":2493,"title":{},"body":{"entities/Role.html":{}}}],["entity('users",{"_index":2606,"title":{},"body":{"entities/User.html":{}}}],["entity{.ts,.js",{"_index":330,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["enum",{"_index":414,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"entities/Appointment.html":{},"classes/AppointmentNotificationDto.html":{},"entities/Counter.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"classes/ForgotPasswordDto.html":{},"entities/Queue.html":{},"classes/QueueNotificationDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/VerifyOtpDto.html":{}}}],["enumerations",{"_index":2813,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":334,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["environments",{"_index":365,"title":{},"body":{"modules/AppModule.html":{}}}],["er_dup_entry",{"_index":1590,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["err",{"_index":1618,"title":{},"body":{"interfaces/LockoutData.html":{},"controllers/QueuesController.html":{}}}],["error",{"_index":807,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["error('invalid",{"_index":2204,"title":{},"body":{"controllers/QueuesController.html":{}}}],["error('jwt_secret",{"_index":912,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["error('queue",{"_index":2206,"title":{},"body":{"controllers/QueuesController.html":{}}}],["error('unauthorized",{"_index":2695,"title":{},"body":{"controllers/UsersController.html":{}}}],["error('user",{"_index":2539,"title":{},"body":{"injectables/RolesService.html":{}}}],["error.code",{"_index":1589,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["error.message",{"_index":1632,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["errors",{"_index":1592,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["eslint",{"_index":1454,"title":{},"body":{"interfaces/LockoutData.html":{},"controllers/UsersController.html":{}}}],["eslint/no",{"_index":1458,"title":{},"body":{"interfaces/LockoutData.html":{},"controllers/UsersController.html":{}}}],["estimated",{"_index":2040,"title":{},"body":{"classes/QueueNotificationDto.html":{}}}],["estimated_wait_time",{"_index":1898,"title":{},"body":{"entities/Queue.html":{}}}],["estimatedtime",{"_index":2037,"title":{},"body":{"classes/QueueNotificationDto.html":{},"interfaces/RequestWithUser.html":{}}}],["estimatedwaittime",{"_index":1886,"title":{},"body":{"entities/Queue.html":{},"controllers/QueuesController.html":{}}}],["etc",{"_index":1824,"title":{},"body":{"entities/OTP.html":{}}}],["event",{"_index":2013,"title":{},"body":{"classes/QueueGateway.html":{}}}],["exactly",{"_index":433,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["example",{"_index":37,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/ApplicationNotificationDto.html":{},"classes/AppointmentNotificationDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/QueueNotificationDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"classes/VerifyOtpDto.html":{},"index.html":{}}}],["exceptions",{"_index":1648,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["execution",{"_index":2084,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["executioncontext",{"_index":2457,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":1624,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["existence",{"_index":2350,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["existing",{"_index":1376,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/OTPService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["existingappointment",{"_index":867,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["existingappointments",{"_index":821,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["existingappointments.map",{"_index":825,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["existinguser",{"_index":1350,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["existinguserbyemail",{"_index":1404,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["existinguserbyemail.id",{"_index":1557,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["existinguserbyusername",{"_index":1405,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["existinguserbyusername.id",{"_index":1559,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["exists",{"_index":1352,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService-1.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["expectation",{"_index":1997,"title":{},"body":{"classes/QueueGateway.html":{}}}],["experience",{"_index":2888,"title":{},"body":{"index.html":{}}}],["expiration",{"_index":2334,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["expired",{"_index":1865,"title":{},"body":{"injectables/OTPService.html":{},"interfaces/RequestWithUser.html":{}}}],["expires",{"_index":2306,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["expiresat",{"_index":1813,"title":{},"body":{"entities/OTP.html":{},"injectables/OTPService.html":{}}}],["expiresat.setminutes(expiresat.getminutes",{"_index":1857,"title":{},"body":{"injectables/OTPService.html":{}}}],["expiresin",{"_index":895,"title":{},"body":{"modules/AuthModule.html":{}}}],["expiry",{"_index":1754,"title":{},"body":{"injectables/MinioService-1.html":{},"injectables/OTPService.html":{}}}],["expiryminutes",{"_index":1855,"title":{},"body":{"injectables/OTPService.html":{}}}],["export",{"_index":99,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"classes/ResetPasswordDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{}}}],["exports",{"_index":217,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":1195,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":1182,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["extends",{"_index":13,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"interfaces/AuthenticatedUser.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateUserDto.html":{}}}],["extension",{"_index":72,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["extra",{"_index":351,"title":{},"body":{"modules/AppModule.html":{}}}],["extract",{"_index":2168,"title":{},"body":{"controllers/QueuesController.html":{}}}],["extractjwt",{"_index":902,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":916,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["factor",{"_index":2303,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["failed",{"_index":1480,"title":{},"body":{"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"interfaces/RequestWithUser.html":{}}}],["failedattempts",{"_index":1448,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["false",{"_index":266,"title":{},"body":{"injectables/AnnouncementService.html":{},"modules/AppModule.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"interfaces/AuthenticatedUser.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"entities/QueueDetails.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["false})@isoptional()@isenum(applicationstatus",{"_index":2559,"title":{},"body":{"classes/UpdateDocumentApplicationDto.html":{}}}],["false})@isoptional()@isnumber",{"_index":2046,"title":{},"body":{"classes/QueueNotificationDto.html":{}}}],["false})@isoptional()@isstring",{"_index":988,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"classes/QueueNotificationDto.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["false})@joincolumn({name",{"_index":483,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["fast",{"_index":2864,"title":{},"body":{"index.html":{}}}],["features",{"_index":2305,"title":{},"body":{"interfaces/RequestWithUser.html":{},"index.html":{}}}],["fetching",{"_index":2194,"title":{},"body":{"controllers/QueuesController.html":{}}}],["few",{"_index":2866,"title":{},"body":{"index.html":{}}}],["field",{"_index":2225,"title":{},"body":{"classes/RegisterDto.html":{}}}],["fields",{"_index":1354,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"classes/ResetPasswordDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{}}}],["file.application",{"_index":1080,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["file.buffer",{"_index":1727,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["file.entity",{"_index":1104,"title":{},"body":{"entities/DocumentApplication.html":{},"modules/DocumentApplicationsModule.html":{}}}],["file.entity.ts",{"_index":1267,"title":{},"body":{"entities/DocumentFile.html":{},"coverage.html":{}}}],["file.entity.ts:17",{"_index":1286,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.entity.ts:20",{"_index":1275,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.entity.ts:23",{"_index":1280,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.entity.ts:26",{"_index":1285,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.entity.ts:29",{"_index":1283,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.entity.ts:32",{"_index":1288,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.entity.ts:35",{"_index":1278,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.entity.ts:38",{"_index":1290,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.entity.ts:45",{"_index":1274,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.mimetype",{"_index":1730,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["file.mimetype.match(/\\/(jpg|jpeg|png|pdf",{"_index":1213,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["file.originalname",{"_index":1732,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["file.size",{"_index":1728,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["file.size.tostring",{"_index":1788,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["file_name",{"_index":1279,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file_size",{"_index":1281,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file_type",{"_index":1284,"title":{},"body":{"entities/DocumentFile.html":{}}}],["filefilter",{"_index":1210,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["fileid",{"_index":1169,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["fileinterceptor",{"_index":1193,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["fileinterceptor('file",{"_index":1205,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["filename",{"_index":1268,"title":{},"body":{"entities/DocumentFile.html":{}}}],["files",{"_index":1069,"title":{},"body":{"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/MinioService-1.html":{}}}],["files.push(obj",{"_index":1808,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["filesize",{"_index":1207,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{}}}],["filetype",{"_index":1269,"title":{},"body":{"entities/DocumentFile.html":{}}}],["filter",{"_index":1325,"title":{},"body":{"interfaces/FindAllOptions.html":{},"classes/UserQueryDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["finally",{"_index":2123,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["find",{"_index":1650,"title":{},"body":{"interfaces/LockoutData.html":{},"controllers/QueuesController.html":{},"injectables/RolesService.html":{}}}],["findall",{"_index":155,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findall(@query('includeuser",{"_index":646,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["findall(includeuser",{"_index":569,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["findall(options",{"_index":750,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["findall(query",{"_index":2660,"title":{},"body":{"controllers/UsersController.html":{}}}],["findall(status",{"_index":1140,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["findallbyuser",{"_index":739,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["findallbyuser(userid",{"_index":753,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["findalloptions",{"_index":1293,"title":{"interfaces/FindAllOptions.html":{}},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["findbyappointmentnumber",{"_index":552,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["findbyappointmentnumber(@param('number",{"_index":672,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["findbyappointmentnumber(appointmentnumber",{"_index":577,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["findbyemail",{"_index":2712,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyemail(email",{"_index":1399,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["findbyids",{"_index":2543,"title":{},"body":{"injectables/RolesService.html":{}}}],["findbyname",{"_index":2524,"title":{},"body":{"injectables/RolesService.html":{}}}],["findbyname(name",{"_index":2531,"title":{},"body":{"injectables/RolesService.html":{}}}],["findbyusername",{"_index":2713,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyusername(username",{"_index":1400,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["finding",{"_index":1652,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["findone",{"_index":156,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone(@param('id",{"_index":203,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/RolesController.html":{}}}],["findone(id",{"_index":166,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["finduserappointments",{"_index":553,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["finduserappointments(@user",{"_index":650,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["finduserappointments(user",{"_index":583,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["finduserbyemail(email",{"_index":1651,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["first",{"_index":62,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"interfaces/LockoutData.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["first_name",{"_index":1916,"title":{},"body":{"entities/QueueDetails.html":{},"entities/User.html":{}}}],["firstname",{"_index":23,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Appointment.html":{},"classes/AppointmentNotificationDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"entities/QueueDetails.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["fix",{"_index":1578,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["fixed",{"_index":2082,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["fk_appointment_user",{"_index":539,"title":{},"body":{"entities/Appointment.html":{}}}],["fk_current_queue",{"_index":939,"title":{},"body":{"entities/Counter.html":{}}}],["fk_queue_id",{"_index":1929,"title":{},"body":{"entities/QueueDetails.html":{}}}],["fk_user_id",{"_index":1934,"title":{},"body":{"entities/QueueDetails.html":{}}}],["flag",{"_index":2125,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["flatten",{"_index":2171,"title":{},"body":{"controllers/QueuesController.html":{}}}],["fns",{"_index":772,"title":{},"body":{"injectables/AppointmentService.html":{},"dependencies.html":{}}}],["focus",{"_index":2873,"title":{},"body":{"index.html":{}}}],["follow",{"_index":2901,"title":{},"body":{"index.html":{}}}],["forbidden",{"_index":2280,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["foreign",{"_index":370,"title":{},"body":{"modules/AppModule.html":{}}}],["foreign_key_checks=0",{"_index":374,"title":{},"body":{"modules/AppModule.html":{}}}],["foreign_key_checks=1",{"_index":385,"title":{},"body":{"modules/AppModule.html":{}}}],["foreignkeyconstraintname",{"_index":538,"title":{},"body":{"entities/Appointment.html":{},"entities/Counter.html":{},"entities/QueueDetails.html":{}}}],["forgot",{"_index":1504,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["forgotpassword(@body",{"_index":2354,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["forgotpassworddto",{"_index":438,"title":{"classes/ForgotPasswordDto.html":{}},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{}}}],["form",{"_index":994,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["form_data",{"_index":1082,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["format",{"_index":406,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{}}}],["format(today",{"_index":857,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["formats",{"_index":2474,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["formatted",{"_index":2347,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["formdata",{"_index":985,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{}}}],["forwardref",{"_index":1987,"title":{},"body":{"classes/QueueGateway.html":{},"modules/QueueModule.html":{}}}],["found",{"_index":262,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["found'})@apiresponse({status",{"_index":2663,"title":{},"body":{"controllers/UsersController.html":{}}}],["framework",{"_index":2830,"title":{},"body":{"index.html":{}}}],["frontend",{"_index":2153,"title":{},"body":{"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["full",{"_index":1047,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"classes/RegisterDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["fullname",{"_index":1402,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["fully",{"_index":1643,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["function",{"_index":2750,"title":{},"body":{"coverage.html":{}}}],["functionality",{"_index":2397,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["functions",{"_index":2818,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":2869,"title":{},"body":{"index.html":{}}}],["general",{"_index":2113,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["generate",{"_index":827,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/OTPService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["generatealltimeslots",{"_index":740,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["generated",{"_index":1049,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{}}}],["generateotp",{"_index":1827,"title":{},"body":{"injectables/OTPService.html":{}}}],["generateotp(email",{"_index":1833,"title":{},"body":{"injectables/OTPService.html":{}}}],["generates",{"_index":2299,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["generating",{"_index":1790,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["generation",{"_index":462,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["get(':id",{"_index":167,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["get(':id')@apioperation({summary",{"_index":581,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{}}}],["get(':id')@roles('admin",{"_index":2499,"title":{},"body":{"controllers/RolesController.html":{}}}],["get(':id')@useguards(rolesguard)@roles('admin",{"_index":2662,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':id/files",{"_index":1236,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get(':id/files')@apioperation({summary",{"_index":1159,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get(':id/files/all",{"_index":1240,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get(':id/files/all')@apioperation({summary",{"_index":1146,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get('admin/all",{"_index":1254,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get('admin/all')@roles('admin",{"_index":1155,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get('admin/stats",{"_index":1256,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get('admin/stats')@roles('admin",{"_index":1170,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get('available",{"_index":587,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["get('by",{"_index":578,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["get('date",{"_index":597,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["get('files/:fileid/download",{"_index":1243,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get('files/:fileid/download')@apioperation({summary",{"_index":1165,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get('health",{"_index":274,"title":{},"body":{"controllers/AppController.html":{}}}],["get('mine",{"_index":649,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["get('mine')@apioperation({summary",{"_index":584,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["get('minio_use_ssl",{"_index":1771,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["get('profile",{"_index":2263,"title":{},"body":{"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["get('profile')@apioperation({summary",{"_index":2666,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('recent",{"_index":170,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["get('stats",{"_index":653,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/UsersController.html":{}}}],["get('stats')@useguards(jwtauthguard",{"_index":601,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["get('stats')@useguards(rolesguard)@roles('admin",{"_index":2669,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('user/:userid",{"_index":2143,"title":{},"body":{"controllers/QueuesController.html":{},"controllers/RolesController.html":{}}}],["get('user/:userid')@roles('admin",{"_index":2502,"title":{},"body":{"controllers/RolesController.html":{}}}],["get('walk",{"_index":2145,"title":{},"body":{"controllers/QueuesController.html":{}}}],["get()@apioperation({summary",{"_index":1141,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get()@roles('admin",{"_index":2497,"title":{},"body":{"controllers/RolesController.html":{}}}],["get()@useguards(rolesguard)@roles('admin",{"_index":570,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/UsersController.html":{}}}],["getaccountlockout(identifier",{"_index":1462,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["getallapplicationfiles",{"_index":1131,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["getallapplicationfiles(id",{"_index":1145,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["getallapplications",{"_index":1132,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["getapplicationfiles",{"_index":1133,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["getapplicationfiles(id",{"_index":1158,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["getappointmentsbydate",{"_index":741,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["getappointmentsbydate(date",{"_index":758,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["getappointmentsbydaterange",{"_index":742,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["getappointmentsbydaterange(startdate",{"_index":760,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["getappointmentsstats",{"_index":743,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["getavailableslots",{"_index":554,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["getavailableslots(@query('date",{"_index":667,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["getavailableslots(date",{"_index":586,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["getbydate",{"_index":555,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["getbydate(@query('date",{"_index":656,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["getbydate(date",{"_index":590,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["getbydaterange",{"_index":556,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["getbydaterange(startdate",{"_index":595,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["getdownloadurl",{"_index":1681,"title":{},"body":{"injectables/MinioService.html":{}}}],["getdownloadurl(objectname",{"_index":1687,"title":{},"body":{"injectables/MinioService.html":{}}}],["getfiledownloadurl",{"_index":1134,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["getfiledownloadurl(fileid",{"_index":1164,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["getfileinfo",{"_index":1743,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["getfileinfo(objectname",{"_index":1751,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["gethello",{"_index":271,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getpresignedurl",{"_index":1744,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["getpresignedurl(objectname",{"_index":1753,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["getprofile",{"_index":2653,"title":{},"body":{"controllers/UsersController.html":{}}}],["getprofile(@request",{"_index":2264,"title":{},"body":{"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["getprofile(req",{"_index":2665,"title":{},"body":{"controllers/UsersController.html":{}}}],["getprofile(userid",{"_index":1550,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["getqueuebyid",{"_index":2137,"title":{},"body":{"controllers/QueuesController.html":{}}}],["getqueuebyid(@param('id",{"_index":2201,"title":{},"body":{"controllers/QueuesController.html":{}}}],["getqueuebyid(id",{"_index":2140,"title":{},"body":{"controllers/QueuesController.html":{}}}],["getr2presignedurl",{"_index":1745,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["getr2presignedurl(objectname",{"_index":1756,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["getrawmany",{"_index":1391,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["getrecentannouncements",{"_index":157,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{}}}],["getrecentannouncements(@query('limit",{"_index":201,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["getrecentannouncements(limit",{"_index":169,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{}}}],["getstats",{"_index":557,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getting",{"_index":838,"title":{"index.html":{}},"body":{"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/MinioService-1.html":{}}}],["gettodaypendingcount",{"_index":2055,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["getuserqueues",{"_index":2138,"title":{},"body":{"controllers/QueuesController.html":{}}}],["getuserqueues(@param('userid",{"_index":2195,"title":{},"body":{"controllers/QueuesController.html":{}}}],["getuserqueues(userid",{"_index":2142,"title":{},"body":{"controllers/QueuesController.html":{}}}],["getuserroles",{"_index":2496,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["getuserroles(@param('userid",{"_index":2508,"title":{},"body":{"controllers/RolesController.html":{}}}],["getuserroles(userid",{"_index":2501,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["getwalkinqueues",{"_index":2139,"title":{},"body":{"controllers/QueuesController.html":{}}}],["global",{"_index":2018,"title":{},"body":{"classes/QueueGateway.html":{}}}],["gradient",{"_index":2313,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["graph",{"_index":2893,"title":{},"body":{"index.html":{}}}],["green",{"_index":2380,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["groupby('role.name",{"_index":1390,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["grow",{"_index":2911,"title":{},"body":{"index.html":{}}}],["guaranteed",{"_index":2393,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["guard",{"_index":2286,"title":{"guards/RolesGuard.html":{}},"body":{"interfaces/RequestWithUser.html":{},"coverage.html":{},"overview.html":{}}}],["guards",{"_index":2510,"title":{},"body":{"guards/RolesGuard.html":{}}}],["guards/jwt",{"_index":2228,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["guards/roles.guard",{"_index":2230,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["handle",{"_index":1361,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["handleconnection",{"_index":1944,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handleconnection(client",{"_index":1958,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handledailyqueuereset",{"_index":2056,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["handledisconnect",{"_index":1945,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handledisconnect(client",{"_index":1963,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlegetqueueposition",{"_index":1946,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlegetqueueposition(client",{"_index":1965,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoincounter",{"_index":1947,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoincounter(client",{"_index":1968,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoinqueue",{"_index":1948,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoinqueue(client",{"_index":1972,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoinqueueupdates",{"_index":1949,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoinqueueupdates(client",{"_index":1975,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handling",{"_index":2090,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["hands",{"_index":2887,"title":{},"body":{"index.html":{}}}],["handy",{"_index":2878,"title":{},"body":{"index.html":{}}}],["happening",{"_index":2291,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["hash",{"_index":1509,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["hashed",{"_index":1407,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["hashedpassword",{"_index":1530,"title":{},"body":{"interfaces/LockoutData.html":{},"controllers/UsersController.html":{}}}],["hashing",{"_index":1443,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["hashpassword(password",{"_index":1444,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["haslowercase",{"_index":1665,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["hasnumbers",{"_index":1666,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["hasroleassigned",{"_index":1637,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["hasspecialchars",{"_index":1667,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["hasuppercase",{"_index":1663,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["healthcheck",{"_index":272,"title":{},"body":{"controllers/AppController.html":{}}}],["hello",{"_index":390,"title":{},"body":{"injectables/AppService.html":{}}}],["helmet",{"_index":2790,"title":{},"body":{"dependencies.html":{}}}],["help",{"_index":2891,"title":{},"body":{"index.html":{}}}],["here",{"_index":1615,"title":{},"body":{"interfaces/LockoutData.html":{},"index.html":{}}}],["history",{"_index":1091,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["history.application",{"_index":1092,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["history.entity",{"_index":1105,"title":{},"body":{"entities/DocumentApplication.html":{},"modules/DocumentApplicationsModule.html":{}}}],["history.entity.ts",{"_index":472,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"coverage.html":{}}}],["history.entity.ts:17",{"_index":494,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["history.entity.ts:20",{"_index":488,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["history.entity.ts:23",{"_index":498,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["history.entity.ts:26",{"_index":496,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["history.entity.ts:29",{"_index":500,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["history.entity.ts:32",{"_index":493,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["history.entity.ts:35",{"_index":491,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["history.entity.ts:43",{"_index":485,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["holder",{"_index":718,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"interfaces/RequestWithUser.html":{}}}],["host",{"_index":321,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["hour",{"_index":870,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["hours",{"_index":2412,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["http://localhost:5173",{"_index":1991,"title":{},"body":{"classes/QueueGateway.html":{}}}],["httpcode",{"_index":613,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["httpcode(httpstatus.no_content",{"_index":693,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["https://nestjs.com",{"_index":2924,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":614,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["id",{"_index":36,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"entities/OTP.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{}}}],["identifier",{"_index":1479,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["identifier.tolowercase",{"_index":1463,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["ids",{"_index":42,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["ignoreexpiration",{"_index":917,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["iii",{"_index":75,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["iii)'})@isoptional()@isstring",{"_index":1053,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ildefonso",{"_index":53,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["image",{"_index":118,"title":{},"body":{"entities/Announcement.html":{},"classes/CreateAnnouncementDto.html":{}}}],["implementation",{"_index":2374,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["implements",{"_index":1764,"title":{},"body":{"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["import",{"_index":87,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"classes/ResetPasswordDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{}}}],["imports",{"_index":229,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}}}],["in(roleids",{"_index":2545,"title":{},"body":{"injectables/RolesService.html":{}}}],["inactive",{"_index":949,"title":{},"body":{"entities/Counter.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"miscellaneous/enumerations.html":{}}}],["inactiveusers",{"_index":1307,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["include",{"_index":1231,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["included",{"_index":2384,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["includeuser",{"_index":575,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{}}}],["including",{"_index":2276,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["index",{"_index":15,"title":{"index.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"classes/ResetPasswordDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["index(['applicationid",{"_index":506,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentFile.html":{}}}],["index(['applicationtype",{"_index":1124,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["index(['changedat",{"_index":507,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["index(['createdat",{"_index":1126,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["index(['documentcategory",{"_index":1292,"title":{},"body":{"entities/DocumentFile.html":{}}}],["index(['status",{"_index":1125,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["index(['userid",{"_index":1123,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"classes/ResetPasswordDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{},"miscellaneous/enumerations.html":{}}}],["information",{"_index":97,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"index.html":{}}}],["infrastructure",{"_index":2875,"title":{},"body":{"index.html":{}}}],["inherited",{"_index":55,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["initial",{"_index":998,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["initiated",{"_index":2351,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["initiates",{"_index":2340,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["inject",{"_index":318,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/QueueGateway.html":{}}}],["inject(forwardref",{"_index":1998,"title":{},"body":{"classes/QueueGateway.html":{}}}],["injectable",{"_index":231,"title":{"injectables/AnnouncementService.html":{},"injectables/AppService.html":{},"injectables/AppointmentService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"injectables/QueueSchedulerService.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AnnouncementService.html":{},"injectables/AppService.html":{},"injectables/AppointmentService.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":232,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppService.html":{},"injectables/AppointmentService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"injectables/QueueSchedulerService.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":248,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/OTPService.html":{},"injectables/QueueSchedulerService.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["injectrepository(announcement",{"_index":249,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["injectrepository(appointment",{"_index":773,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["injectrepository(otp",{"_index":1840,"title":{},"body":{"injectables/OTPService.html":{}}}],["injectrepository(queue",{"_index":2077,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["injectrepository(role",{"_index":2535,"title":{},"body":{"injectables/RolesService.html":{}}}],["injectrepository(user",{"_index":1315,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["inline",{"_index":1798,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["input",{"_index":2278,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["install",{"_index":2868,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":2840,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":1593,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["instructions",{"_index":2348,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["insufficient",{"_index":2281,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["integration",{"_index":2368,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["interact",{"_index":2894,"title":{},"body":{"index.html":{}}}],["interface",{"_index":897,"title":{"interfaces/AuthenticatedUser.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"interfaces/UserStats.html":{}},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["interfaces",{"_index":898,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"interfaces/UserStats.html":{},"overview.html":{}}}],["internally",{"_index":2346,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["intervals",{"_index":832,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["invalid",{"_index":688,"title":{},"body":{"controllers/AppointmentController.html":{},"interfaces/RequestWithUser.html":{}}}],["invalidate",{"_index":1841,"title":{},"body":{"injectables/OTPService.html":{}}}],["invalidated",{"_index":2308,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["inversejoincolumn",{"_index":2600,"title":{},"body":{"entities/User.html":{}}}],["is_active",{"_index":2589,"title":{},"body":{"entities/User.html":{}}}],["is_guest",{"_index":1919,"title":{},"body":{"entities/QueueDetails.html":{}}}],["isactive",{"_index":119,"title":{},"body":{"entities/Announcement.html":{},"injectables/AnnouncementService.html":{},"classes/CreateAnnouncementDto.html":{},"interfaces/FindAllOptions.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["isarray",{"_index":92,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["isauthorized",{"_index":1606,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["isboolean",{"_index":962,"title":{},"body":{"classes/CreateAnnouncementDto.html":{},"classes/CreateQueueDto.html":{},"classes/UpdateUserStatusDto.html":{}}}],["isboolean()@isoptional",{"_index":1021,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["isdatestring",{"_index":735,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"classes/CreateAppointmentDto.html":{}}}],["isemail",{"_index":88,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/ApplicationNotificationDto.html":{},"classes/AppointmentNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/QueueNotificationDto.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateUserDto.html":{},"classes/VerifyOtpDto.html":{}}}],["isenum",{"_index":979,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{}}}],["isenum(applicationstatus",{"_index":2563,"title":{},"body":{"classes/UpdateDocumentApplicationDto.html":{}}}],["isenum(applicationtype",{"_index":1004,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["isenum(appointmentstatus",{"_index":980,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["isenum(queuestatus",{"_index":2569,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["isenum(queuestatus)@isoptional",{"_index":2567,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["isglobal",{"_index":316,"title":{},"body":{"modules/AppModule.html":{}}}],["isguest",{"_index":514,"title":{},"body":{"entities/Appointment.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{}}}],["islocked",{"_index":1482,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["isnan(number(payload.sub",{"_index":923,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["isnan(queueid",{"_index":2203,"title":{},"body":{"controllers/QueuesController.html":{}}}],["isnan(userid",{"_index":1551,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["isnotempty",{"_index":734,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["isnotempty()@isdatestring",{"_index":967,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["isnotempty()@isstring",{"_index":965,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["isnumber",{"_index":91,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/QueueNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{}}}],["isobject",{"_index":1001,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["isolation",{"_index":2335,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["isoptional",{"_index":89,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/ApplicationNotificationDto.html":{},"classes/AppointmentNotificationDto.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/QueueNotificationDto.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"classes/VerifyOtpDto.html":{}}}],["isoptional()@isboolean",{"_index":959,"title":{},"body":{"classes/CreateAnnouncementDto.html":{}}}],["isoptional()@isenum(appointmentstatus",{"_index":976,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["isoptional()@isstring",{"_index":954,"title":{},"body":{"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{}}}],["isotpvalid",{"_index":2257,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["ispasswordvalid",{"_index":1512,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["isprivileged",{"_index":1238,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["isresetinprogress",{"_index":2054,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["isstring",{"_index":90,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/ApplicationNotificationDto.html":{},"classes/AppointmentNotificationDto.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{},"classes/QueueNotificationDto.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"classes/VerifyOtpDto.html":{}}}],["isstring()@isnotempty",{"_index":956,"title":{},"body":{"classes/CreateAnnouncementDto.html":{},"classes/CreateQueueDto.html":{}}}],["isstring()@isoptional",{"_index":1017,"title":{},"body":{"classes/CreateQueueDto.html":{},"classes/UpdateQueueDto.html":{}}}],["isvalid",{"_index":771,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["isvalid(date",{"_index":777,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["isvalid(parseddate",{"_index":819,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["isvalidemail(email",{"_index":1546,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["items",{"_index":1873,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UserQueryDto.html":{}}}],["job",{"_index":2904,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":2906,"title":{},"body":{"index.html":{}}}],["john",{"_index":103,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{}}}],["john'})@isstring()@isnotempty",{"_index":2212,"title":{},"body":{"classes/RegisterDto.html":{}}}],["john'})@isstring()@isoptional",{"_index":64,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["john.doe@example.com",{"_index":1038,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["john_doe",{"_index":101,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["john_doe'})@isstring()@isnotempty",{"_index":2223,"title":{},"body":{"classes/RegisterDto.html":{}}}],["john_doe'})@isstring()@isoptional",{"_index":85,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["johndoe",{"_index":1061,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["join",{"_index":2917,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":502,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["joined",{"_index":2011,"title":{},"body":{"classes/QueueGateway.html":{}}}],["jointable",{"_index":2604,"title":{},"body":{"entities/User.html":{}}}],["jpeg",{"_index":1214,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["jr",{"_index":74,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["jr.'})@isstring()@isoptional",{"_index":76,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["json",{"_index":1083,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["juan",{"_index":1005,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["jwt",{"_index":890,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":886,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{}}}],["jwtauthguard",{"_index":618,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":915,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":880,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":891,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":905,"title":{"interfaces/JwtPayload.html":{}},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["jwtservice",{"_index":1426,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["jwtstrategy",{"_index":877,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":2921,"title":{},"body":{"index.html":{}}}],["keep",{"_index":2607,"title":{},"body":{"entities/User.html":{}}}],["key",{"_index":371,"title":{},"body":{"modules/AppModule.html":{},"interfaces/LockoutData.html":{},"injectables/OTPService.html":{},"index.html":{}}}],["last",{"_index":66,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["last_modified_by",{"_index":1087,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["last_name",{"_index":1921,"title":{},"body":{"entities/QueueDetails.html":{},"entities/User.html":{}}}],["lastattempt",{"_index":1424,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["lastmodifiedby",{"_index":1070,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["lastname",{"_index":24,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Appointment.html":{},"classes/AppointmentNotificationDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"entities/QueueDetails.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["lastname}${nameextension",{"_index":1403,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["latest",{"_index":1160,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["learn",{"_index":2880,"title":{},"body":{"index.html":{}}}],["leftjoin('user.roles",{"_index":1387,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["leftjoinandselect('user.defaultrole",{"_index":1321,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["leftjoinandselect('user.roles",{"_index":1323,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["legacy",{"_index":2150,"title":{},"body":{"controllers/QueuesController.html":{}}}],["legend",{"_index":213,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":127,"title":{},"body":{"entities/Announcement.html":{},"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"classes/ForgotPasswordDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["length(6",{"_index":432,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["length(8",{"_index":451,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["lessthan",{"_index":1837,"title":{},"body":{"injectables/OTPService.html":{}}}],["lessthan(new",{"_index":1869,"title":{},"body":{"injectables/OTPService.html":{}}}],["letter",{"_index":1664,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["lgu",{"_index":2262,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["license",{"_index":1110,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"properties.html":{}}}],["licensed",{"_index":2909,"title":{},"body":{"index.html":{}}}],["limit",{"_index":173,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/UserQueryDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["limiting",{"_index":2309,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["limits",{"_index":1206,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["line",{"_index":1456,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["linkedin",{"_index":2903,"title":{},"body":{"index.html":{}}}],["listfiles",{"_index":1746,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["listfiles(prefix",{"_index":1758,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["literal",{"_index":708,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser-2.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{}}}],["localhost",{"_index":1707,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"miscellaneous/variables.html":{}}}],["lock",{"_index":1469,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["locked",{"_index":1478,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["lockeduntil",{"_index":1425,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["lockout",{"_index":1489,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["lockoutdata",{"_index":1421,"title":{"interfaces/LockoutData.html":{}},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["lockoutdata.attempts",{"_index":2444,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["lockoutdata.lockeduntil",{"_index":1496,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["lockoutdata.lockeduntil.gettime",{"_index":1498,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["lockoutdata?.attempts",{"_index":2445,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["lockoutdata?.lockeduntil",{"_index":1495,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["log",{"_index":1224,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService-1.html":{},"injectables/QueueSchedulerService.html":{}}}],["logdailystatistics",{"_index":2057,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["logdailystatistics(startofday",{"_index":2069,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["logger",{"_index":338,"title":{},"body":{"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["logger(appointmentcontroller.name",{"_index":637,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["logger(appointmentservice.name",{"_index":767,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["logger(authcontroller.name",{"_index":2240,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["logger(authservice.name",{"_index":1431,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["logger(documentapplicationscontroller.name",{"_index":1202,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["logger(minioservice.name",{"_index":1691,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["logger(queuegateway.name",{"_index":1955,"title":{},"body":{"classes/QueueGateway.html":{}}}],["logger(queueschedulerservice.name",{"_index":2074,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["logger(queuescontroller.name",{"_index":2148,"title":{},"body":{"controllers/QueuesController.html":{}}}],["logger(userscontroller.name",{"_index":2686,"title":{},"body":{"controllers/UsersController.html":{}}}],["logger(usersservice.name",{"_index":1314,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["logging",{"_index":336,"title":{},"body":{"modules/AppModule.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"miscellaneous/variables.html":{}}}],["login",{"_index":1670,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{}}}],["login(@body",{"_index":2246,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["login(logindto",{"_index":1492,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["logindto",{"_index":1427,"title":{"classes/LoginDto.html":{}},"body":{"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["logindto.emailorusername",{"_index":1451,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["logindto.emailorusername.tolowercase",{"_index":1493,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["logindto.password",{"_index":1511,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["long",{"_index":452,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["long'})@matches(/^(?=.*[a",{"_index":2480,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["looking",{"_index":2857,"title":{},"body":{"index.html":{}}}],["loop",{"_index":2900,"title":{},"body":{"index.html":{}}}],["loss",{"_index":359,"title":{},"body":{"modules/AppModule.html":{}}}],["lowercase",{"_index":457,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["main",{"_index":50,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["maintain",{"_index":1538,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["make",{"_index":2284,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["makes",{"_index":2862,"title":{},"body":{"index.html":{}}}],["managing",{"_index":2874,"title":{},"body":{"index.html":{}}}],["manila",{"_index":1012,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["manual",{"_index":2132,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["manualdailyreset",{"_index":2058,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["manytomany",{"_index":2492,"title":{},"body":{"entities/Role.html":{},"entities/User.html":{}}}],["manytomany(undefined",{"_index":2489,"title":{},"body":{"entities/Role.html":{}}}],["manytomany(undefined)@jointable({name",{"_index":2598,"title":{},"body":{"entities/User.html":{}}}],["manytoone",{"_index":501,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["manytoone(undefined",{"_index":479,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["map",{"_index":1449,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["mark",{"_index":1844,"title":{},"body":{"injectables/OTPService.html":{},"injectables/QueueSchedulerService.html":{}}}],["marked",{"_index":2332,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["marks",{"_index":2330,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["marriage",{"_index":1108,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["marriage_certificate",{"_index":1107,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["marriage_license",{"_index":1109,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["match",{"_index":1996,"title":{},"body":{"classes/QueueGateway.html":{}}}],["matches",{"_index":418,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["matches(/^(?=.*[a",{"_index":453,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["matches(/^[0",{"_index":435,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["matching",{"_index":111,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"classes/ResetPasswordDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.ceil",{"_index":1497,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["math.ceil((current.lockeduntil.gettime",{"_index":1484,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["math.ceil(timeremaining",{"_index":1500,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["math.ceil(total",{"_index":1343,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["mau",{"_index":2859,"title":{},"body":{"index.html":{}}}],["maxlength",{"_index":428,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["meet",{"_index":443,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["meets",{"_index":2358,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["message",{"_index":408,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/LockoutData.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{}}}],["metadata",{"_index":1785,"title":{},"body":{"injectables/MinioService-1.html":{},"dependencies.html":{}}}],["method",{"_index":1346,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["methods",{"_index":153,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["middle",{"_index":69,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["middle_initial",{"_index":1923,"title":{},"body":{"entities/QueueDetails.html":{}}}],["middle_name",{"_index":2592,"title":{},"body":{"entities/User.html":{}}}],["middleinitial",{"_index":515,"title":{},"body":{"entities/Appointment.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"controllers/QueuesController.html":{}}}],["middlename",{"_index":25,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["migrationsrun",{"_index":363,"title":{},"body":{"modules/AppModule.html":{}}}],["miguel",{"_index":1044,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["min",{"_index":78,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{}}}],["min(1",{"_index":2622,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["minimum",{"_index":1055,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UserQueryDto.html":{}}}],["minio",{"_index":1695,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"dependencies.html":{}}}],["minio.client",{"_index":1693,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["minio.client(minioconfig",{"_index":1720,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["minio_access_key",{"_index":1774,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["minio_bucket_name",{"_index":1776,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["minio_endpoint",{"_index":1766,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["minio_object_name",{"_index":1287,"title":{},"body":{"entities/DocumentFile.html":{}}}],["minio_secret_key",{"_index":1775,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["minioadmin",{"_index":1710,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["minioadmin123",{"_index":1712,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["minioclient",{"_index":1679,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["minioconfig",{"_index":1700,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["minioconfig.port",{"_index":1716,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["minioobjectname",{"_index":1270,"title":{},"body":{"entities/DocumentFile.html":{}}}],["minioservice",{"_index":1261,"title":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}},"body":{"modules/DocumentApplicationsModule.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"coverage.html":{},"overview.html":{}}}],["minlength",{"_index":82,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/ApplicationNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateUserDto.html":{},"classes/VerifyOtpDto.html":{}}}],["minlength(6",{"_index":1065,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(8",{"_index":102,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["minute",{"_index":871,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["minutes",{"_index":1471,"title":{},"body":{"interfaces/LockoutData.html":{},"injectables/OTPService.html":{},"classes/QueueNotificationDto.html":{},"interfaces/RequestWithUser.html":{}}}],["minutesremaining",{"_index":1499,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["miscellaneous",{"_index":2812,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":2320,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["mit",{"_index":2908,"title":{},"body":{"index.html":{}}}],["mm",{"_index":859,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["mode",{"_index":2371,"title":{},"body":{"interfaces/RequestWithUser.html":{},"index.html":{}}}],["module",{"_index":209,"title":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"interfaces/FindAllOptions.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["modules",{"_index":211,"title":{"modules.html":{}},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/announcement/announcement.module",{"_index":307,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/appointment/appointment.module",{"_index":306,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/document",{"_index":308,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/queue/queue.module",{"_index":305,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":2856,"title":{},"body":{"index.html":{}}}],["multer",{"_index":2793,"title":{},"body":{"dependencies.html":{}}}],["multiple",{"_index":1502,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["municipal",{"_index":2824,"title":{},"body":{"index.html":{}}}],["mysql",{"_index":320,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["mysql2",{"_index":2795,"title":{},"body":{"dependencies.html":{}}}],["myśliwiec",{"_index":2922,"title":{},"body":{"index.html":{}}}],["name",{"_index":63,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["name'})@isstring()@isnotempty",{"_index":1041,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["name_extension",{"_index":2595,"title":{},"body":{"entities/User.html":{}}}],["namecomponents",{"_index":1566,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["namecomponents.firstname",{"_index":1572,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["namecomponents.lastname",{"_index":1574,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["namecomponents.middlename",{"_index":1573,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["namecomponents.nameextension",{"_index":1575,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["nameextension",{"_index":26,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["namespace",{"_index":1995,"title":{},"body":{"classes/QueueGateway.html":{}}}],["need",{"_index":1192,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"modules/QueueModule.html":{},"index.html":{}}}],["nest",{"_index":2835,"title":{},"body":{"index.html":{}}}],["nested",{"_index":2169,"title":{},"body":{"controllers/QueuesController.html":{}}}],["nestframework",{"_index":2926,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":909,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"index.html":{}}}],["nestjs/common",{"_index":188,"title":{},"body":{"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":296,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":2464,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":881,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/LockoutData.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":2553,"title":{},"body":{"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["nestjs/passport",{"_index":883,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1194,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"dependencies.html":{}}}],["nestjs/schedule",{"_index":298,"title":{},"body":{"modules/AppModule.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":95,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/ApplicationNotificationDto.html":{},"controllers/AppointmentController.html":{},"classes/AppointmentNotificationDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentApplicationsController.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/QueueNotificationDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"classes/VerifyOtpDto.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":226,"title":{},"body":{"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/OTPService.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":1984,"title":{},"body":{"classes/QueueGateway.html":{},"dependencies.html":{}}}],["new",{"_index":260,"title":{},"body":{"injectables/AnnouncementService.html":{},"classes/ApplicationNotificationDto.html":{},"controllers/AppointmentController.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"injectables/RolesService.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{}}}],["new_status",{"_index":495,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["newdate",{"_index":797,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["newfirstname",{"_index":1367,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["newlastname",{"_index":1370,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["newlastname}${newnameextension",{"_index":1374,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["newmiddlename",{"_index":1368,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["newnameextension",{"_index":1371,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["newpassword",{"_index":459,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["newsecure123",{"_index":446,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["newstatus",{"_index":475,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"interfaces/RequestWithUser.html":{}}}],["newtime",{"_index":799,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["next",{"_index":1455,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["node.js",{"_index":2829,"title":{},"body":{"index.html":{}}}],["node_env=development",{"_index":2369,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["nodemailer",{"_index":2797,"title":{},"body":{"dependencies.html":{}}}],["notfoundexception",{"_index":247,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["notfoundexception(`announcement",{"_index":261,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["notfoundexception(`appointment",{"_index":792,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["notfoundexception(`role",{"_index":2538,"title":{},"body":{"injectables/RolesService.html":{}}}],["notfoundexception(`user",{"_index":1345,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["notification",{"_index":731,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{}}}],["notification.dto",{"_index":2236,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["notification.dto.ts",{"_index":705,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"classes/QueueNotificationDto.html":{},"coverage.html":{}}}],["notification.dto.ts:10",{"_index":2039,"title":{},"body":{"classes/QueueNotificationDto.html":{}}}],["notification.dto.ts:17",{"_index":720,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"classes/QueueNotificationDto.html":{}}}],["notification.dto.ts:25",{"_index":717,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"classes/QueueNotificationDto.html":{}}}],["notification.dto.ts:34",{"_index":733,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"classes/QueueNotificationDto.html":{}}}],["notification.dto.ts:42",{"_index":727,"title":{},"body":{"classes/AppointmentNotificationDto.html":{}}}],["notification.dto.ts:43",{"_index":2042,"title":{},"body":{"classes/QueueNotificationDto.html":{}}}],["notification.dto.ts:50",{"_index":724,"title":{},"body":{"classes/AppointmentNotificationDto.html":{}}}],["notification.dto.ts:52",{"_index":2049,"title":{},"body":{"classes/QueueNotificationDto.html":{}}}],["notification.dto.ts:57",{"_index":712,"title":{},"body":{"classes/AppointmentNotificationDto.html":{}}}],["notification.dto.ts:61",{"_index":2044,"title":{},"body":{"classes/QueueNotificationDto.html":{}}}],["notificationdto",{"_index":2388,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["notifications",{"_index":1234,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["notify",{"_index":2110,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["notifycounterupdate",{"_index":1950,"title":{},"body":{"classes/QueueGateway.html":{}}}],["notifycounterupdate(counterid",{"_index":1978,"title":{},"body":{"classes/QueueGateway.html":{}}}],["notifyqueueupdate",{"_index":1951,"title":{},"body":{"classes/QueueGateway.html":{}}}],["notifyqueueupdate(queueid",{"_index":1980,"title":{},"body":{"classes/QueueGateway.html":{}}}],["now",{"_index":2392,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["now_serving",{"_index":2048,"title":{},"body":{"classes/QueueNotificationDto.html":{},"interfaces/RequestWithUser.html":{}}}],["npm",{"_index":2839,"title":{},"body":{"index.html":{}}}],["null",{"_index":935,"title":{},"body":{"entities/Counter.html":{},"interfaces/LockoutData.html":{},"entities/QueueDetails.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["null/undefined",{"_index":2177,"title":{},"body":{"controllers/QueuesController.html":{}}}],["nullable",{"_index":135,"title":{},"body":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["number",{"_index":31,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"classes/QueueNotificationDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["number'})@isoptional()@isstring",{"_index":1032,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["number(payload.sub",{"_index":926,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["number(req.user.id",{"_index":2273,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["number(targetuserid",{"_index":2298,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["number/:number",{"_index":579,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["number/id",{"_index":713,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"interfaces/RequestWithUser.html":{}}}],["numbers",{"_index":437,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["obj",{"_index":1807,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["object",{"_index":710,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["object.assign(announcement",{"_index":264,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["object.assign(appointment",{"_index":803,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["object.values(appointmentstatus).includes(status",{"_index":687,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["object.values(appointmentstatus).join",{"_index":690,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["objectname",{"_index":1686,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["occurred",{"_index":1649,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["of(id",{"_index":1380,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["offer",{"_index":2905,"title":{},"body":{"index.html":{}}}],["official",{"_index":2860,"title":{},"body":{"index.html":{}}}],["ok",{"_index":280,"title":{},"body":{"controllers/AppController.html":{}}}],["old_status",{"_index":497,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["oldstatus",{"_index":476,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["omit",{"_index":1312,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["on'].includes(usesslvalue",{"_index":1773,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["ondelete",{"_index":481,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentFile.html":{},"entities/QueueDetails.html":{}}}],["one",{"_index":689,"title":{},"body":{"controllers/AppointmentController.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["ones",{"_index":1377,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["onetomany",{"_index":1103,"title":{},"body":{"entities/DocumentApplication.html":{},"entities/Queue.html":{}}}],["onetomany(undefined",{"_index":1079,"title":{},"body":{"entities/DocumentApplication.html":{},"entities/Queue.html":{}}}],["onetoone",{"_index":946,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{}}}],["onetoone(undefined",{"_index":936,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{}}}],["ongatewayconnection",{"_index":1941,"title":{},"body":{"classes/QueueGateway.html":{}}}],["ongatewaydisconnect",{"_index":1942,"title":{},"body":{"classes/QueueGateway.html":{}}}],["only)'})@apiresponse({status",{"_index":1149,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["onmoduleinit",{"_index":1747,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["open",{"_index":2910,"title":{},"body":{"index.html":{}}}],["operation",{"_index":2399,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["operator",{"_index":2540,"title":{},"body":{"injectables/RolesService.html":{}}}],["optional",{"_index":17,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser-2.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/SendOtpDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{},"miscellaneous/functions.html":{}}}],["optional)'})@isoptional()@isstring",{"_index":1045,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["optionally",{"_index":2366,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["options",{"_index":752,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["options?.relations",{"_index":789,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["orange",{"_index":2378,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["order",{"_index":256,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["origin",{"_index":1989,"title":{},"body":{"classes/QueueGateway.html":{}}}],["original",{"_index":1731,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["otp",{"_index":311,"title":{"entities/OTP.html":{}},"body":{"modules/AppModule.html":{},"classes/ApplicationNotificationDto.html":{},"modules/AuthModule.html":{},"classes/ForgotPasswordDto.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{}}}],["otpentity",{"_index":1859,"title":{},"body":{"injectables/OTPService.html":{}}}],["otpentity.expiresat",{"_index":1866,"title":{},"body":{"injectables/OTPService.html":{}}}],["otpentity.verified",{"_index":1867,"title":{},"body":{"injectables/OTPService.html":{}}}],["otplength",{"_index":1846,"title":{},"body":{"injectables/OTPService.html":{}}}],["otprepository",{"_index":1831,"title":{},"body":{"injectables/OTPService.html":{}}}],["otps",{"_index":1842,"title":{},"body":{"injectables/OTPService.html":{},"interfaces/RequestWithUser.html":{}}}],["otpservice",{"_index":292,"title":{"injectables/OTPService.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/OTPService.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{},"overview.html":{}}}],["out",{"_index":223,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["outer",{"_index":1621,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["overrideconsoleinproduction",{"_index":2751,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["overview",{"_index":2930,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":676,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["package",{"_index":2769,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":1295,"title":{},"body":{"interfaces/FindAllOptions.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/UserQueryDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["pages",{"_index":1877,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{}}}],["paginatedusersresponsedto",{"_index":1870,"title":{"classes/PaginatedUsersResponseDto.html":{}},"body":{"classes/PaginatedUsersResponseDto.html":{},"coverage.html":{}}}],["param",{"_index":184,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["param('fileid",{"_index":1244,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["param('id",{"_index":205,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["param('userid",{"_index":2288,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["parameter",{"_index":658,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["parameters",{"_index":163,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["parse",{"_index":816,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["parseddate",{"_index":817,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["parseint",{"_index":1435,"title":{},"body":{"interfaces/LockoutData.html":{},"injectables/OTPService.html":{},"controllers/UsersController.html":{}}}],["parseint(id",{"_index":2202,"title":{},"body":{"controllers/QueuesController.html":{}}}],["parseint(process.env.db_port",{"_index":2942,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseint(process.env.minio_port",{"_index":1717,"title":{},"body":{"injectables/MinioService.html":{}}}],["parseint(stat.count",{"_index":1394,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["parseint(this.configservice.get('otp_length",{"_index":1847,"title":{},"body":{"injectables/OTPService.html":{}}}],["parseintpipe",{"_index":186,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["parseiso",{"_index":770,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["parseiso(createappointmentdto.appointmentdate",{"_index":776,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["parseiso(date",{"_index":818,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["part",{"_index":2897,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":2552,"title":{},"body":{"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["partialtype(createannouncementdto",{"_index":2551,"title":{},"body":{"classes/UpdateAnnouncementDto.html":{}}}],["partialtype(createappointmentdto",{"_index":2556,"title":{},"body":{"classes/UpdateAppointmentDto.html":{}}}],["parts",{"_index":1564,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["passport",{"_index":904,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":882,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":888,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":901,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":910,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["password",{"_index":27,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"modules/AppModule.html":{},"classes/ApplicationNotificationDto.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{},"miscellaneous/variables.html":{}}}],["password.length",{"_index":1661,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["password123",{"_index":81,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["password123'})@isstring()@isnotempty",{"_index":1675,"title":{},"body":{"classes/LoginDto.html":{}}}],["password_reset",{"_index":423,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"entities/OTP.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["passwords",{"_index":1334,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["passwordvalidation",{"_index":1526,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["passwordvalidation.isvalid",{"_index":1528,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["past",{"_index":785,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["patch",{"_index":183,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["patch(':id",{"_index":180,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["patch(':id')@apioperation({summary",{"_index":606,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{}}}],["patch(':id')@useguards(rolesguard)@roles('admin",{"_index":2673,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(':id/status",{"_index":685,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["patch(':id/status')@roles('admin",{"_index":1179,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["patch(':id/status')@useguards(jwtauthguard",{"_index":609,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["patch(':id/status')@useguards(rolesguard)@roles('admin",{"_index":2676,"title":{},"body":{"controllers/UsersController.html":{}}}],["path",{"_index":2152,"title":{},"body":{"controllers/QueuesController.html":{}}}],["pathstyle",{"_index":1705,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["pattern",{"_index":429,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["payload",{"_index":921,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{}}}],["payload.roles.map((role",{"_index":929,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":922,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["pdf",{"_index":1216,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["pending",{"_index":464,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"entities/Appointment.html":{},"injectables/AppointmentService.html":{},"entities/DocumentApplication.html":{},"classes/ForgotPasswordDto.html":{},"entities/Queue.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{},"miscellaneous/enumerations.html":{}}}],["pendingcount",{"_index":846,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["pendingqueues",{"_index":2100,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["pendingqueues.length",{"_index":2103,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["pendingqueues.map((queue",{"_index":2107,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["pendingqueueswithdetails",{"_index":2159,"title":{},"body":{"controllers/QueuesController.html":{}}}],["pendingqueueswithdetails.length",{"_index":2164,"title":{},"body":{"controllers/QueuesController.html":{}}}],["per",{"_index":1161,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/UserQueryDto.html":{}}}],["perform",{"_index":1612,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["permission",{"_index":682,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["permissions",{"_index":1600,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["permit",{"_index":1115,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["phone_number",{"_index":1925,"title":{},"body":{"entities/QueueDetails.html":{}}}],["phonenumber",{"_index":516,"title":{},"body":{"entities/Appointment.html":{},"classes/AppointmentNotificationDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["pickup",{"_index":467,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"entities/DocumentApplication.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/VerifyOtpDto.html":{},"miscellaneous/enumerations.html":{}}}],["platform",{"_index":2827,"title":{},"body":{"index.html":{}}}],["please",{"_index":409,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/QueueNotificationDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{},"index.html":{}}}],["pm",{"_index":830,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueSchedulerService.html":{}}}],["png",{"_index":1215,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["pool",{"_index":349,"title":{},"body":{"modules/AppModule.html":{}}}],["port",{"_index":323,"title":{},"body":{"modules/AppModule.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"miscellaneous/variables.html":{}}}],["portdisplay",{"_index":1777,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["position",{"_index":2007,"title":{},"body":{"classes/QueueGateway.html":{},"classes/QueueNotificationDto.html":{},"interfaces/RequestWithUser.html":{}}}],["position_alert",{"_index":2050,"title":{},"body":{"classes/QueueNotificationDto.html":{},"interfaces/RequestWithUser.html":{}}}],["possible",{"_index":2854,"title":{},"body":{"index.html":{}}}],["post",{"_index":161,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"classes/QueueGateway.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["post(':id/files",{"_index":1204,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["post(':id/files')@useinterceptors(undefined)@apiconsumes('multipart/form",{"_index":1184,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["post('admin",{"_index":2655,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('admin/update",{"_index":2282,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["post('check",{"_index":2440,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["post('clear",{"_index":2450,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["post('forgot",{"_index":2353,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["post('login",{"_index":2245,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["post('notifications/application",{"_index":2415,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["post('notifications/appointment",{"_index":2403,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["post('record",{"_index":2446,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["post('register",{"_index":2252,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["post('reset",{"_index":2360,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["post('send",{"_index":2322,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["post('test",{"_index":2372,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["post('update",{"_index":2270,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["post('verify",{"_index":2337,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["post()@apioperation({summary",{"_index":562,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{}}}],["potential",{"_index":2176,"title":{},"body":{"controllers/QueuesController.html":{}}}],["practice",{"_index":2343,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["prefix",{"_index":151,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/MinioService-1.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["presigned",{"_index":1791,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["prevent",{"_index":357,"title":{},"body":{"modules/AppModule.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{}}}],["previous",{"_index":2307,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["previousstatus",{"_index":2428,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["primarycolumn",{"_index":1102,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["primarycolumn({length",{"_index":1085,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["primarygeneratedcolumn",{"_index":132,"title":{},"body":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentFile.html":{},"entities/OTP.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["private",{"_index":250,"title":{},"body":{"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["privileged",{"_index":1147,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["proceed",{"_index":2043,"title":{},"body":{"classes/QueueNotificationDto.html":{},"interfaces/RequestWithUser.html":{}}}],["process",{"_index":2089,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{}}}],["process.env.bcrypt_rounds",{"_index":1436,"title":{},"body":{"interfaces/LockoutData.html":{},"controllers/UsersController.html":{}}}],["process.env.db_host",{"_index":2941,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_name",{"_index":2947,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_password",{"_index":2946,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_username",{"_index":2944,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.minio_access_key",{"_index":1709,"title":{},"body":{"injectables/MinioService.html":{}}}],["process.env.minio_bucket_name",{"_index":1722,"title":{},"body":{"injectables/MinioService.html":{}}}],["process.env.minio_enable_port",{"_index":1697,"title":{},"body":{"injectables/MinioService.html":{}}}],["process.env.minio_endpoint",{"_index":1706,"title":{},"body":{"injectables/MinioService.html":{}}}],["process.env.minio_secret_key",{"_index":1711,"title":{},"body":{"injectables/MinioService.html":{}}}],["process.env.minio_use_ssl",{"_index":1708,"title":{},"body":{"injectables/MinioService.html":{}}}],["process.env.node_env",{"_index":2375,"title":{},"body":{"interfaces/RequestWithUser.html":{},"miscellaneous/variables.html":{}}}],["process.env.ws_cors_origin",{"_index":1990,"title":{},"body":{"classes/QueueGateway.html":{}}}],["processing",{"_index":1116,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["production",{"_index":345,"title":{},"body":{"modules/AppModule.html":{},"interfaces/RequestWithUser.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["professional",{"_index":2314,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["profile",{"_index":1646,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["profile'})@apiresponse({status",{"_index":2667,"title":{},"body":{"controllers/UsersController.html":{}}}],["progress",{"_index":2086,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["progressive",{"_index":2828,"title":{},"body":{"index.html":{}}}],["project",{"_index":2837,"title":{},"body":{"index.html":{}}}],["promise",{"_index":241,"title":{},"body":{"injectables/AnnouncementService.html":{},"modules/AppModule.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"injectables/QueueSchedulerService.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["promise((resolve",{"_index":1802,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["promise.all",{"_index":851,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{}}}],["propagate",{"_index":2122,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["proper",{"_index":1599,"title":{},"body":{"interfaces/LockoutData.html":{},"injectables/QueueSchedulerService.html":{}}}],["properties",{"_index":16,"title":{"properties.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/JwtPayload.html":{},"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"classes/ResetPasswordDto.html":{},"entities/Role.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{},"properties.html":{}}}],["provide",{"_index":410,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["provided",{"_index":1064,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["provided)'})@isoptional()@isstring",{"_index":1062,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["provided)'})@isstring()@isoptional",{"_index":1050,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["providers",{"_index":216,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["purpose",{"_index":421,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["purposes",{"_index":1863,"title":{},"body":{"injectables/OTPService.html":{},"interfaces/RequestWithUser.html":{}}}],["qrcode",{"_index":2801,"title":{},"body":{"dependencies.html":{}}}],["query",{"_index":187,"title":{},"body":{"controllers/AnnouncementController.html":{},"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["query('end",{"_index":663,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["query('includeuser",{"_index":670,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{}}}],["query('set",{"_index":384,"title":{},"body":{"modules/AppModule.html":{}}}],["query('start",{"_index":662,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["query('status",{"_index":1227,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["query.dto",{"_index":2683,"title":{},"body":{"controllers/UsersController.html":{}}}],["query.dto.ts",{"_index":2612,"title":{},"body":{"classes/UserQueryDto.html":{},"coverage.html":{}}}],["query.dto.ts:15",{"_index":2615,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["query.dto.ts:26",{"_index":2614,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["query.dto.ts:34",{"_index":2620,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["query.dto.ts:42",{"_index":2617,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["querybuilder",{"_index":1318,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["querybuilder.andwhere('roles.name",{"_index":1330,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["querybuilder.getmanyandcount",{"_index":1333,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["querybuilder.orderby('user.createdat",{"_index":1331,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["querybuilder.where",{"_index":1326,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["questions",{"_index":2881,"title":{},"body":{"index.html":{}}}],["queue",{"_index":934,"title":{"entities/Queue.html":{}},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["queue.completedat",{"_index":2183,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queue.controller",{"_index":2028,"title":{},"body":{"modules/QueueModule.html":{}}}],["queue.counter",{"_index":937,"title":{},"body":{"entities/Counter.html":{}}}],["queue.counternumber",{"_index":2181,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queue.createdat",{"_index":2182,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queue.details",{"_index":1927,"title":{},"body":{"entities/QueueDetails.html":{},"controllers/QueuesController.html":{}}}],["queue.details[0",{"_index":2179,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queue.dto.ts",{"_index":1015,"title":{},"body":{"classes/CreateQueueDto.html":{},"classes/UpdateQueueDto.html":{},"coverage.html":{}}}],["queue.dto.ts:11",{"_index":2566,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["queue.dto.ts:13",{"_index":1023,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:17",{"_index":1024,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:21",{"_index":1018,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:25",{"_index":1025,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:29",{"_index":1026,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:33",{"_index":1019,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:37",{"_index":1022,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:5",{"_index":1027,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:7",{"_index":2568,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["queue.dto.ts:9",{"_index":1020,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.entity",{"_index":1937,"title":{},"body":{"entities/QueueDetails.html":{}}}],["queue.estimatedwaittime",{"_index":2184,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queue.gateway",{"_index":2030,"title":{},"body":{"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{}}}],["queue.id",{"_index":2174,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queue.queuenumber",{"_index":2180,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queue.service",{"_index":1986,"title":{},"body":{"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"controllers/QueuesController.html":{}}}],["queue.status",{"_index":2175,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queue/entities/queue.entity",{"_index":947,"title":{},"body":{"entities/Counter.html":{}}}],["queue_id",{"_index":1928,"title":{},"body":{"entities/QueueDetails.html":{}}}],["queue_number",{"_index":1901,"title":{},"body":{"entities/Queue.html":{}}}],["queuecontroller",{"_index":2026,"title":{},"body":{"modules/QueueModule.html":{},"coverage.html":{}}}],["queuedata",{"_index":2005,"title":{},"body":{"classes/QueueGateway.html":{}}}],["queuedetails",{"_index":1895,"title":{"entities/QueueDetails.html":{}},"body":{"entities/Queue.html":{},"entities/QueueDetails.html":{},"modules/QueueModule.html":{},"controllers/QueuesController.html":{},"coverage.html":{}}}],["queuegateway",{"_index":1939,"title":{"classes/QueueGateway.html":{}},"body":{"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"coverage.html":{},"overview.html":{}}}],["queueid",{"_index":1912,"title":{},"body":{"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"controllers/QueuesController.html":{}}}],["queuemodule",{"_index":288,"title":{"modules/QueueModule.html":{}},"body":{"modules/AppModule.html":{},"modules/QueueModule.html":{},"modules.html":{},"overview.html":{}}}],["queuenotificationdto",{"_index":2035,"title":{"classes/QueueNotificationDto.html":{}},"body":{"classes/QueueNotificationDto.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["queuenumber",{"_index":1887,"title":{},"body":{"entities/Queue.html":{},"classes/QueueNotificationDto.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["queuerepository",{"_index":2061,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["queues",{"_index":2097,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{}}}],["queues.controller",{"_index":2029,"title":{},"body":{"modules/QueueModule.html":{}}}],["queues/user",{"_index":2196,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queues/walk",{"_index":2155,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queueschedulerservice",{"_index":2024,"title":{"injectables/QueueSchedulerService.html":{}},"body":{"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"coverage.html":{},"overview.html":{}}}],["queuescontroller",{"_index":2027,"title":{"controllers/QueuesController.html":{}},"body":{"modules/QueueModule.html":{},"controllers/QueuesController.html":{},"coverage.html":{}}}],["queueservice",{"_index":1953,"title":{},"body":{"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"controllers/QueuesController.html":{},"coverage.html":{},"overview.html":{}}}],["queuestatus",{"_index":1903,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"classes/UpdateQueueDto.html":{},"miscellaneous/enumerations.html":{}}}],["queuestatus.cancelled",{"_index":2108,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["queuestatus.completed",{"_index":2127,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["queuestatus.pending",{"_index":1909,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueSchedulerService.html":{}}}],["queuestatus.serving",{"_index":2116,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["r2",{"_index":1713,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["range",{"_index":661,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["range')@useguards(jwtauthguard",{"_index":598,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["rate",{"_index":2130,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{}}}],["re",{"_index":1591,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["read",{"_index":2918,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":196,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppController.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ready",{"_index":466,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"entities/DocumentApplication.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/VerifyOtpDto.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["ready_for_pickup",{"_index":1118,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["real",{"_index":2895,"title":{},"body":{"index.html":{}}}],["reason",{"_index":707,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{}}}],["reason_of_visit",{"_index":1932,"title":{},"body":{"entities/QueueDetails.html":{}}}],["reasonofvisit",{"_index":517,"title":{},"body":{"entities/Appointment.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"controllers/QueuesController.html":{}}}],["receive",{"_index":2352,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["received",{"_index":441,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["recent",{"_index":1395,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["recently",{"_index":2644,"title":{},"body":{"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{}}}],["recentusers",{"_index":1311,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["recentusers.map((user",{"_index":1398,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["recipient",{"_index":404,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/QueueNotificationDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["record",{"_index":993,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"interfaces/RequestWithUser.html":{}}}],["recordfailedattempt(@body",{"_index":2447,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["recordfailedloginattempt(identifier",{"_index":1465,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["recording",{"_index":2449,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["red",{"_index":2316,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["referencedcolumnname",{"_index":2608,"title":{},"body":{"entities/User.html":{}}}],["reflect",{"_index":2803,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":2463,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["regardless",{"_index":2349,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["region",{"_index":1704,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["register(@body",{"_index":2253,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["register(registerdto",{"_index":1522,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["registerdto",{"_index":1429,"title":{"classes/RegisterDto.html":{}},"body":{"interfaces/LockoutData.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["registered",{"_index":439,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["registration",{"_index":1542,"title":{},"body":{"interfaces/LockoutData.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{}}}],["reject",{"_index":1803,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["rejected",{"_index":465,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"entities/DocumentApplication.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{},"miscellaneous/enumerations.html":{}}}],["rejection",{"_index":2435,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["rejectionreason",{"_index":2437,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["rejectunauthorized",{"_index":346,"title":{},"body":{"modules/AppModule.html":{}}}],["related",{"_index":1579,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["relation(user",{"_index":1379,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["relations",{"_index":508,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["relationship",{"_index":1232,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["reminder",{"_index":730,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"interfaces/RequestWithUser.html":{}}}],["remove",{"_index":158,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["remove(@param('id",{"_index":207,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{}}}],["remove(id",{"_index":175,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["remove(user.roles",{"_index":1381,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["replaces",{"_index":2541,"title":{},"body":{"injectables/RolesService.html":{}}}],["repository",{"_index":237,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/OTPService.html":{},"injectables/QueueSchedulerService.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["req",{"_index":1211,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["req.user",{"_index":2266,"title":{},"body":{"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["req.user.id",{"_index":2267,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["req.user?.id",{"_index":2293,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["req.user?.roles",{"_index":2294,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["request",{"_index":1190,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["request.user",{"_index":2460,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"miscellaneous/variables.html":{}}}],["request.user?.roles",{"_index":2473,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["requested",{"_index":1233,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["requestwithuser",{"_index":2226,"title":{"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{}},"body":{"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["required",{"_index":659,"title":{},"body":{"controllers/AppointmentController.html":{},"classes/CreateDocumentApplicationDto.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/QueueNotificationDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["requiredroles",{"_index":2468,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["requiredroles.some((role",{"_index":2476,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["requirements",{"_index":445,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["requires",{"_index":1120,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["requires_additional_info",{"_index":1119,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["requiring",{"_index":2865,"title":{},"body":{"index.html":{}}}],["reset",{"_index":222,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resetdto",{"_index":2362,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["resetpassword",{"_index":2361,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["resetpassworddto",{"_index":440,"title":{"classes/ResetPasswordDto.html":{}},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{}}}],["resolve(files",{"_index":1811,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["resources",{"_index":2876,"title":{},"body":{"index.html":{}}}],["response",{"_index":1335,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService-1.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["response.dto",{"_index":1882,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{}}}],["response.dto.ts",{"_index":1872,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"coverage.html":{}}}],["response.dto.ts:14",{"_index":2629,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:15",{"_index":1876,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{},"classes/UsersByRoleDto.html":{}}}],["response.dto.ts:20",{"_index":2639,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:21",{"_index":1875,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{}}}],["response.dto.ts:23",{"_index":2646,"title":{},"body":{"classes/UserStatsResponseDto.html":{}}}],["response.dto.ts:26",{"_index":2630,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:27",{"_index":1874,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{}}}],["response.dto.ts:29",{"_index":2642,"title":{},"body":{"classes/UserStatsResponseDto.html":{}}}],["response.dto.ts:32",{"_index":2634,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:33",{"_index":1878,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{}}}],["response.dto.ts:35",{"_index":2643,"title":{},"body":{"classes/UserStatsResponseDto.html":{}}}],["response.dto.ts:38",{"_index":2633,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:41",{"_index":2648,"title":{},"body":{"classes/UserStatsResponseDto.html":{}}}],["response.dto.ts:44",{"_index":2635,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:47",{"_index":2645,"title":{},"body":{"classes/UserStatsResponseDto.html":{}}}],["response.dto.ts:50",{"_index":2636,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:56",{"_index":2623,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:62",{"_index":2632,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:68",{"_index":2626,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:74",{"_index":2638,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:8",{"_index":2631,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:81",{"_index":2637,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:87",{"_index":2627,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:9",{"_index":1881,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{},"classes/UsersByRoleDto.html":{}}}],["response.dto.ts:93",{"_index":2628,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["responsive",{"_index":2385,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["result",{"_index":809,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/LockoutData.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["result.affected",{"_index":811,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["result.length",{"_index":2192,"title":{},"body":{"controllers/QueuesController.html":{}}}],["results",{"_index":110,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"classes/ResetPasswordDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":1585,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["retrieved",{"_index":1151,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["retrieving",{"_index":1645,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["return",{"_index":198,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":164,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["reveal",{"_index":2341,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["robert",{"_index":104,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["robert'})@isstring()@isoptional",{"_index":70,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["role",{"_index":35,"title":{"entities/Role.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"interfaces/AuthenticatedUser.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["role'})@isoptional()@isstring",{"_index":2616,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["role.id",{"_index":1639,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["role.name",{"_index":1340,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["role_id",{"_index":2609,"title":{},"body":{"entities/User.html":{}}}],["roleid",{"_index":1625,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["roleids",{"_index":19,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["roleids.length",{"_index":1382,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["rolename",{"_index":1309,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["rolenames",{"_index":1516,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["rolenames.includes(role",{"_index":2477,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["roles",{"_index":623,"title":{},"body":{"controllers/AppointmentController.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles('admin",{"_index":645,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["roles.controller",{"_index":2520,"title":{},"body":{"modules/RolesModule.html":{}}}],["roles.map((role",{"_index":1517,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["roles.service",{"_index":2504,"title":{},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{}}}],["roles/entities/role.entity",{"_index":2605,"title":{},"body":{"entities/User.html":{}}}],["roles/roles.module",{"_index":304,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["roles/roles.service",{"_index":1302,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["roles_key",{"_index":2465,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolescontroller",{"_index":2494,"title":{"controllers/RolesController.html":{}},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{},"coverage.html":{}}}],["rolesguard",{"_index":621,"title":{"guards/RolesGuard.html":{}},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["rolesguard)@roles('admin",{"_index":592,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/UsersController.html":{}}}],["rolesmodule",{"_index":289,"title":{"modules/RolesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["rolesrepository",{"_index":2527,"title":{},"body":{"injectables/RolesService.html":{}}}],["rolesservice",{"_index":1301,"title":{"injectables/RolesService.html":{}},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["rolestats",{"_index":1386,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["rolestats.map((stat",{"_index":1392,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["rollback",{"_index":1537,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["rolled",{"_index":1543,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["rooms",{"_index":2015,"title":{},"body":{"classes/QueueGateway.html":{}}}],["root",{"_index":2945,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rounds",{"_index":1433,"title":{},"body":{"interfaces/LockoutData.html":{},"controllers/UsersController.html":{}}}],["run",{"_index":2078,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"index.html":{}}}],["runs",{"_index":2852,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":2805,"title":{},"body":{"dependencies.html":{}}}],["s+@\\s+\\.\\s+/.test(email",{"_index":2324,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["s@]+@[^\\s@]+\\.[^\\s",{"_index":1548,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["salt",{"_index":1445,"title":{},"body":{"interfaces/LockoutData.html":{},"controllers/UsersController.html":{}}}],["san",{"_index":52,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["sanitizedrecentusers",{"_index":1397,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["sanitizedusers",{"_index":1336,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["save",{"_index":1858,"title":{},"body":{"injectables/OTPService.html":{}}}],["scalable",{"_index":2833,"title":{},"body":{"index.html":{}}}],["schedulemodule",{"_index":297,"title":{},"body":{"modules/AppModule.html":{},"modules/QueueModule.html":{}}}],["schedulemodule.forroot",{"_index":386,"title":{},"body":{"modules/AppModule.html":{},"modules/QueueModule.html":{}}}],["scheduler.service",{"_index":2031,"title":{},"body":{"modules/QueueModule.html":{}}}],["scheduler.service.ts",{"_index":2053,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"coverage.html":{}}}],["scheduler.service.ts:10",{"_index":2075,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["scheduler.service.ts:11",{"_index":2060,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["scheduler.service.ts:137",{"_index":2071,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["scheduler.service.ts:172",{"_index":2073,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["scheduler.service.ts:178",{"_index":2062,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["scheduler.service.ts:24",{"_index":2068,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["schema",{"_index":2242,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["sdk",{"_index":1794,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["search",{"_index":1296,"title":{},"body":{"interfaces/FindAllOptions.html":{},"classes/UserQueryDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["searching",{"_index":2096,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["secret",{"_index":892,"title":{},"body":{"modules/AuthModule.html":{},"injectables/OTPService.html":{}}}],["secretkey",{"_index":911,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["secretorkey",{"_index":918,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["secure",{"_index":2344,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["security",{"_index":1438,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["see",{"_index":2289,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["seeddatabaseifneeded",{"_index":2752,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["seeddatabaseifneeded(datasource",{"_index":2820,"title":{},"body":{"miscellaneous/functions.html":{}}}],["select",{"_index":823,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["select('role.name",{"_index":1388,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["send",{"_index":420,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/AppointmentNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["sendapplicationapproval",{"_index":2434,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["sendapplicationconfirmation",{"_index":2416,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["sendapplicationnotification",{"_index":2387,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["sendapplicationrejection",{"_index":2436,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["sendapplicationstatusupdate",{"_index":2427,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["sendappointmentcancellation(@body",{"_index":2409,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["sendappointmentconfirmation(@body",{"_index":2404,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["sendappointmentreminder",{"_index":2413,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["sendappointmentstatusupdate(@body",{"_index":2407,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["sending",{"_index":2326,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["sendotp(@body",{"_index":2323,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["sendotpdto",{"_index":419,"title":{"classes/SendOtpDto.html":{}},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{}}}],["sendqueuenotification(@body",{"_index":2389,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["sends",{"_index":2300,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["sent",{"_index":2319,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["server",{"_index":1943,"title":{},"body":{"classes/QueueGateway.html":{},"index.html":{}}}],["service",{"_index":2158,"title":{},"body":{"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["services",{"_index":2825,"title":{},"body":{"index.html":{}}}],["services/email.service",{"_index":314,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"interfaces/RequestWithUser.html":{}}}],["services/minio.service",{"_index":1265,"title":{},"body":{"modules/DocumentApplicationsModule.html":{}}}],["services/otp.service",{"_index":313,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"interfaces/RequestWithUser.html":{}}}],["serving",{"_index":1907,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"miscellaneous/enumerations.html":{}}}],["servingqueues",{"_index":2115,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["servingqueues.length",{"_index":2117,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["servingqueues.map((queue",{"_index":2119,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["servingqueueswithdetails",{"_index":2160,"title":{},"body":{"controllers/QueuesController.html":{}}}],["servingqueueswithdetails.length",{"_index":2165,"title":{},"body":{"controllers/QueuesController.html":{}}}],["set",{"_index":375,"title":{},"body":{"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"interfaces/LockoutData.html":{},"entities/QueueDetails.html":{}}}],["setmetadata(roles_key",{"_index":2949,"title":{},"body":{"miscellaneous/variables.html":{}}}],["settings",{"_index":350,"title":{},"body":{"modules/AppModule.html":{}}}],["setup",{"_index":2838,"title":{},"body":{"index.html":{}}}],["shouldupdatename",{"_index":1565,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["side",{"_index":2834,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":894,"title":{},"body":{"modules/AuthModule.html":{}}}],["simple",{"_index":2867,"title":{},"body":{"index.html":{}}}],["single",{"_index":2331,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["size",{"_index":1787,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["skip",{"_index":1317,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["skipping",{"_index":2087,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["slot",{"_index":864,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["slots",{"_index":588,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["smart",{"_index":1724,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"index.html":{}}}],["socket",{"_index":1959,"title":{},"body":{"classes/QueueGateway.html":{}}}],["socket.io",{"_index":1985,"title":{},"body":{"classes/QueueGateway.html":{},"dependencies.html":{}}}],["soft",{"_index":267,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"classes/ResetPasswordDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{},"index.html":{}}}],["spam",{"_index":2310,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["speakeasy",{"_index":1838,"title":{},"body":{"injectables/OTPService.html":{},"dependencies.html":{}}}],["speakeasy.totp",{"_index":1848,"title":{},"body":{"injectables/OTPService.html":{}}}],["special",{"_index":458,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["specific",{"_index":1143,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"interfaces/LockoutData.html":{},"classes/QueueGateway.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["specified",{"_index":820,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/RequestWithUser.html":{}}}],["sponsors",{"_index":2913,"title":{},"body":{"index.html":{}}}],["sql",{"_index":368,"title":{},"body":{"modules/AppModule.html":{}}}],["sr",{"_index":1052,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/.../appointment.entity.ts",{"_index":2815,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../counter.entity.ts",{"_index":2816,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../database.config.ts",{"_index":2937,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../document",{"_index":2814,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":2819,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../queue.entity.ts",{"_index":2817,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../roles.decorator.ts",{"_index":2938,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.decorator.ts",{"_index":2939,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":270,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:14",{"_index":275,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:9",{"_index":273,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":293,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":388,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":389,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":2227,"title":{},"body":{"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["src/auth/auth.module.ts",{"_index":878,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":1422,"title":{},"body":{"interfaces/LockoutData.html":{},"coverage.html":{}}}],["src/auth/decorators/roles.decorator.ts",{"_index":2737,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/user.decorator.ts",{"_index":2455,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dto/appointment",{"_index":704,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto.ts",{"_index":1669,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto.ts:15",{"_index":1673,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/login.dto.ts:23",{"_index":1676,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/otp.dto.ts",{"_index":393,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{}}}],["src/auth/dto/otp.dto.ts:106",{"_index":2481,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["src/auth/dto/otp.dto.ts:116",{"_index":2549,"title":{},"body":{"classes/TestOtpDto.html":{}}}],["src/auth/dto/otp.dto.ts:126",{"_index":412,"title":{},"body":{"classes/ApplicationNotificationDto.html":{}}}],["src/auth/dto/otp.dto.ts:133",{"_index":400,"title":{},"body":{"classes/ApplicationNotificationDto.html":{}}}],["src/auth/dto/otp.dto.ts:141",{"_index":416,"title":{},"body":{"classes/ApplicationNotificationDto.html":{}}}],["src/auth/dto/otp.dto.ts:148",{"_index":403,"title":{},"body":{"classes/ApplicationNotificationDto.html":{}}}],["src/auth/dto/otp.dto.ts:17",{"_index":2546,"title":{},"body":{"classes/SendOtpDto.html":{}}}],["src/auth/dto/otp.dto.ts:27",{"_index":2548,"title":{},"body":{"classes/SendOtpDto.html":{}}}],["src/auth/dto/otp.dto.ts:37",{"_index":2726,"title":{},"body":{"classes/VerifyOtpDto.html":{}}}],["src/auth/dto/otp.dto.ts:49",{"_index":2727,"title":{},"body":{"classes/VerifyOtpDto.html":{}}}],["src/auth/dto/otp.dto.ts:59",{"_index":2728,"title":{},"body":{"classes/VerifyOtpDto.html":{}}}],["src/auth/dto/otp.dto.ts:69",{"_index":1412,"title":{},"body":{"classes/ForgotPasswordDto.html":{}}}],["src/auth/dto/otp.dto.ts:79",{"_index":2478,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["src/auth/dto/otp.dto.ts:91",{"_index":2484,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["src/auth/dto/queue",{"_index":2036,"title":{},"body":{"classes/QueueNotificationDto.html":{},"coverage.html":{}}}],["src/auth/dto/register.dto.ts",{"_index":2207,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["src/auth/dto/register.dto.ts:21",{"_index":2211,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:29",{"_index":2224,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:39",{"_index":2222,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:47",{"_index":2213,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:55",{"_index":2216,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:63",{"_index":2215,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:71",{"_index":2217,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:79",{"_index":2218,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:86",{"_index":2209,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:95",{"_index":2220,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/update",{"_index":6,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/auth/guards/jwt",{"_index":1413,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard.ts",{"_index":2461,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard.ts:13",{"_index":2512,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/guards/roles.guard.ts:16",{"_index":2513,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":899,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:20",{"_index":1419,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:35",{"_index":1420,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/config/database.config.ts",{"_index":2748,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/entities/otp.entity.ts",{"_index":1812,"title":{},"body":{"entities/OTP.html":{},"coverage.html":{}}}],["src/entities/otp.entity.ts:11",{"_index":1819,"title":{},"body":{"entities/OTP.html":{}}}],["src/entities/otp.entity.ts:14",{"_index":1816,"title":{},"body":{"entities/OTP.html":{}}}],["src/entities/otp.entity.ts:17",{"_index":1820,"title":{},"body":{"entities/OTP.html":{}}}],["src/entities/otp.entity.ts:20",{"_index":1821,"title":{},"body":{"entities/OTP.html":{}}}],["src/entities/otp.entity.ts:23",{"_index":1822,"title":{},"body":{"entities/OTP.html":{}}}],["src/entities/otp.entity.ts:26",{"_index":1818,"title":{},"body":{"entities/OTP.html":{}}}],["src/entities/otp.entity.ts:29",{"_index":1815,"title":{},"body":{"entities/OTP.html":{}}}],["src/main.ts",{"_index":2749,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/announcement/announcement.controller.ts",{"_index":150,"title":{},"body":{"controllers/AnnouncementController.html":{},"coverage.html":{}}}],["src/modules/announcement/announcement.controller.ts:21",{"_index":162,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["src/modules/announcement/announcement.controller.ts:26",{"_index":165,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["src/modules/announcement/announcement.controller.ts:31",{"_index":171,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["src/modules/announcement/announcement.controller.ts:36",{"_index":168,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["src/modules/announcement/announcement.controller.ts:41",{"_index":181,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["src/modules/announcement/announcement.controller.ts:49",{"_index":177,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["src/modules/announcement/announcement.module.ts",{"_index":224,"title":{},"body":{"modules/AnnouncementModule.html":{}}}],["src/modules/announcement/announcement.service.ts",{"_index":233,"title":{},"body":{"injectables/AnnouncementService.html":{},"coverage.html":{}}}],["src/modules/announcement/announcement.service.ts:15",{"_index":240,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["src/modules/announcement/announcement.service.ts:24",{"_index":242,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["src/modules/announcement/announcement.service.ts:31",{"_index":243,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["src/modules/announcement/announcement.service.ts:43",{"_index":246,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["src/modules/announcement/announcement.service.ts:53",{"_index":245,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["src/modules/announcement/announcement.service.ts:59",{"_index":244,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["src/modules/announcement/announcement.service.ts:9",{"_index":238,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["src/modules/announcement/dto/create",{"_index":952,"title":{},"body":{"classes/CreateAnnouncementDto.html":{},"coverage.html":{}}}],["src/modules/announcement/dto/update",{"_index":2550,"title":{},"body":{"classes/UpdateAnnouncementDto.html":{},"coverage.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts",{"_index":115,"title":{},"body":{"entities/Announcement.html":{},"coverage.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts:12",{"_index":133,"title":{},"body":{"entities/Announcement.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts:15",{"_index":141,"title":{},"body":{"entities/Announcement.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts:18",{"_index":131,"title":{},"body":{"entities/Announcement.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts:21",{"_index":137,"title":{},"body":{"entities/Announcement.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts:24",{"_index":139,"title":{},"body":{"entities/Announcement.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts:27",{"_index":129,"title":{},"body":{"entities/Announcement.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts:30",{"_index":124,"title":{},"body":{"entities/Announcement.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts:33",{"_index":143,"title":{},"body":{"entities/Announcement.html":{}}}],["src/modules/appointment/appointment.controller.ts",{"_index":550,"title":{},"body":{"controllers/AppointmentController.html":{},"coverage.html":{}}}],["src/modules/appointment/appointment.controller.ts:113",{"_index":589,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:123",{"_index":582,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:135",{"_index":580,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:142",{"_index":607,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:169",{"_index":610,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:188",{"_index":604,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:44",{"_index":567,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:59",{"_index":574,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:69",{"_index":585,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:77",{"_index":602,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:85",{"_index":594,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:96",{"_index":599,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.module.ts",{"_index":700,"title":{},"body":{"modules/AppointmentModule.html":{}}}],["src/modules/appointment/appointment.service.ts",{"_index":737,"title":{},"body":{"injectables/AppointmentService.html":{},"coverage.html":{}}}],["src/modules/appointment/appointment.service.ts:108",{"_index":755,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:122",{"_index":765,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:157",{"_index":764,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:16",{"_index":745,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:170",{"_index":766,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:185",{"_index":763,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:220",{"_index":759,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:23",{"_index":749,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:241",{"_index":761,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:264",{"_index":762,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:316",{"_index":748,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:341",{"_index":757,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:72",{"_index":751,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:82",{"_index":754,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:92",{"_index":756,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/dto/create",{"_index":963,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"coverage.html":{}}}],["src/modules/appointment/dto/update",{"_index":2555,"title":{},"body":{"classes/UpdateAppointmentDto.html":{},"coverage.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts",{"_index":510,"title":{},"body":{"entities/Appointment.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:22",{"_index":526,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:25",{"_index":522,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:28",{"_index":525,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:31",{"_index":529,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:34",{"_index":531,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:37",{"_index":519,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:40",{"_index":532,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:43",{"_index":533,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:46",{"_index":520,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:49",{"_index":523,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:56",{"_index":535,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:59",{"_index":541,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:66",{"_index":540,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:69",{"_index":528,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:72",{"_index":524,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:75",{"_index":536,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/counter/entities/counter.entity.ts",{"_index":931,"title":{},"body":{"entities/Counter.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/modules/counter/entities/counter.entity.ts:18",{"_index":942,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/counter/entities/counter.entity.ts:21",{"_index":943,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/counter/entities/counter.entity.ts:28",{"_index":945,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/counter/entities/counter.entity.ts:31",{"_index":941,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/counter/entities/counter.entity.ts:38",{"_index":940,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/document",{"_index":470,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"injectables/MinioService-1.html":{},"classes/UpdateDocumentApplicationDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/modules/queue/dto/create",{"_index":1014,"title":{},"body":{"classes/CreateQueueDto.html":{},"coverage.html":{}}}],["src/modules/queue/dto/update",{"_index":2565,"title":{},"body":{"classes/UpdateQueueDto.html":{},"coverage.html":{}}}],["src/modules/queue/entities/queue",{"_index":1910,"title":{},"body":{"entities/QueueDetails.html":{},"coverage.html":{}}}],["src/modules/queue/entities/queue.entity.ts",{"_index":1883,"title":{},"body":{"entities/Queue.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/modules/queue/entities/queue.entity.ts:22",{"_index":1900,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:25",{"_index":1902,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:32",{"_index":1904,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:35",{"_index":1893,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:38",{"_index":1894,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:41",{"_index":1889,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:44",{"_index":1899,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:47",{"_index":1897,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:52",{"_index":1891,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/queue",{"_index":2052,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"coverage.html":{}}}],["src/modules/queue/queue.controller.ts",{"_index":2763,"title":{},"body":{"coverage.html":{}}}],["src/modules/queue/queue.gateway.ts",{"_index":1940,"title":{},"body":{"classes/QueueGateway.html":{},"coverage.html":{}}}],["src/modules/queue/queue.gateway.ts:23",{"_index":1956,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:26",{"_index":1954,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:34",{"_index":1960,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:41",{"_index":1964,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:46",{"_index":1974,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:53",{"_index":1967,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:59",{"_index":1971,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:65",{"_index":1977,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:72",{"_index":1981,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:77",{"_index":1979,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.module.ts",{"_index":2025,"title":{},"body":{"modules/QueueModule.html":{}}}],["src/modules/queue/queue.service.ts",{"_index":2764,"title":{},"body":{"coverage.html":{}}}],["src/modules/queue/queues.controller.ts",{"_index":2136,"title":{},"body":{"controllers/QueuesController.html":{},"coverage.html":{}}}],["src/modules/queue/queues.controller.ts:111",{"_index":2141,"title":{},"body":{"controllers/QueuesController.html":{}}}],["src/modules/queue/queues.controller.ts:21",{"_index":2146,"title":{},"body":{"controllers/QueuesController.html":{}}}],["src/modules/queue/queues.controller.ts:76",{"_index":2144,"title":{},"body":{"controllers/QueuesController.html":{}}}],["src/roles/entities/role.entity.ts",{"_index":2485,"title":{},"body":{"entities/Role.html":{},"coverage.html":{}}}],["src/roles/entities/role.entity.ts:10",{"_index":2488,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/entities/role.entity.ts:13",{"_index":2486,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/entities/role.entity.ts:16",{"_index":2491,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/entities/role.entity.ts:7",{"_index":2487,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/roles.controller.ts",{"_index":2495,"title":{},"body":{"controllers/RolesController.html":{},"coverage.html":{}}}],["src/roles/roles.controller.ts:14",{"_index":2498,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.controller.ts:20",{"_index":2500,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.controller.ts:26",{"_index":2503,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.module.ts",{"_index":2518,"title":{},"body":{"modules/RolesModule.html":{}}}],["src/roles/roles.service.ts",{"_index":2522,"title":{},"body":{"injectables/RolesService.html":{},"coverage.html":{}}}],["src/roles/roles.service.ts:17",{"_index":2530,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:21",{"_index":2533,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:29",{"_index":2532,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:37",{"_index":2534,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:45",{"_index":2529,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:8",{"_index":2526,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/services/email.service.ts",{"_index":2765,"title":{},"body":{"coverage.html":{}}}],["src/services/minio.service.ts",{"_index":1677,"title":{},"body":{"injectables/MinioService.html":{},"coverage.html":{}}}],["src/services/minio.service.ts:40",{"_index":1690,"title":{},"body":{"injectables/MinioService.html":{}}}],["src/services/minio.service.ts:6",{"_index":1692,"title":{},"body":{"injectables/MinioService.html":{}}}],["src/services/minio.service.ts:64",{"_index":1688,"title":{},"body":{"injectables/MinioService.html":{}}}],["src/services/minio.service.ts:7",{"_index":1694,"title":{},"body":{"injectables/MinioService.html":{}}}],["src/services/minio.service.ts:77",{"_index":1685,"title":{},"body":{"injectables/MinioService.html":{}}}],["src/services/minio.service.ts:8",{"_index":1683,"title":{},"body":{"injectables/MinioService.html":{}}}],["src/services/otp.service.ts",{"_index":1825,"title":{},"body":{"injectables/OTPService.html":{},"coverage.html":{}}}],["src/services/otp.service.ts:11",{"_index":1830,"title":{},"body":{"injectables/OTPService.html":{}}}],["src/services/otp.service.ts:19",{"_index":1834,"title":{},"body":{"injectables/OTPService.html":{}}}],["src/services/otp.service.ts:62",{"_index":1836,"title":{},"body":{"injectables/OTPService.html":{}}}],["src/services/otp.service.ts:92",{"_index":1832,"title":{},"body":{"injectables/OTPService.html":{}}}],["src/users/dto/create",{"_index":1029,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/paginated",{"_index":1871,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":2575,"title":{},"body":{"classes/UpdateUserStatusDto.html":{},"coverage.html":{}}}],["src/users/dto/user",{"_index":2611,"title":{},"body":{"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts",{"_index":2579,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:17",{"_index":2588,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:20",{"_index":2586,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:23",{"_index":2603,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:26",{"_index":2597,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:29",{"_index":2587,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:32",{"_index":2593,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:35",{"_index":2591,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:38",{"_index":2594,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:41",{"_index":2596,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:44",{"_index":2581,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:47",{"_index":2590,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:50",{"_index":2582,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:53",{"_index":2602,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:57",{"_index":2584,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:60",{"_index":2585,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:74",{"_index":2601,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":2651,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:116",{"_index":2674,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:131",{"_index":2672,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:145",{"_index":2677,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:163",{"_index":2659,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:56",{"_index":2661,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:68",{"_index":2668,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:80",{"_index":2670,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:90",{"_index":2664,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":2710,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":1294,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:111",{"_index":2717,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:213",{"_index":2724,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:223",{"_index":2725,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:233",{"_index":2723,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:276",{"_index":2720,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:283",{"_index":2721,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:290",{"_index":2718,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:37",{"_index":2715,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:45",{"_index":2719,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:90",{"_index":2722,"title":{},"body":{"injectables/UsersService.html":{}}}],["ssl",{"_index":342,"title":{},"body":{"modules/AppModule.html":{}}}],["st",{"_index":51,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["staff",{"_index":571,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"classes/UserResponseDto.html":{},"controllers/UsersController.html":{}}}],["staff'].includes(role.name",{"_index":1229,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["start",{"_index":664,"title":{},"body":{"controllers/AppointmentController.html":{},"index.html":{}}}],["start:dev",{"_index":2842,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":2843,"title":{},"body":{"index.html":{}}}],["startdate",{"_index":600,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["started",{"_index":2822,"title":{"index.html":{}},"body":{}}],["starter",{"_index":2836,"title":{},"body":{"index.html":{}}}],["starting",{"_index":2088,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["startofday",{"_index":2072,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["startofday.todatestring",{"_index":2128,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["startofday.toisostring",{"_index":2098,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["stat.rolename",{"_index":1393,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["state",{"_index":1540,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["statements",{"_index":2731,"title":{},"body":{"coverage.html":{}}}],["statistics",{"_index":654,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/QueueSchedulerService.html":{},"controllers/UsersController.html":{}}}],["stats",{"_index":863,"title":{},"body":{"injectables/AppointmentService.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"coverage.html":{}}}],["status",{"_index":276,"title":{},"body":{"controllers/AppController.html":{},"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"entities/Counter.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"classes/ForgotPasswordDto.html":{},"entities/Queue.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserResponseDto.html":{},"controllers/UsersController.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{}}}],["status'})@isboolean",{"_index":2577,"title":{},"body":{"classes/UpdateUserStatusDto.html":{}}}],["status.dto",{"_index":2681,"title":{},"body":{"controllers/UsersController.html":{}}}],["status.dto.ts",{"_index":2576,"title":{},"body":{"classes/UpdateUserStatusDto.html":{},"coverage.html":{}}}],["status.dto.ts:10",{"_index":2578,"title":{},"body":{"classes/UpdateUserStatusDto.html":{}}}],["status_message",{"_index":499,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentApplication.html":{}}}],["status_update",{"_index":729,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"classes/QueueNotificationDto.html":{},"interfaces/RequestWithUser.html":{}}}],["statuscode",{"_index":2321,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["statusdto",{"_index":1178,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["statusdto.status",{"_index":1249,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["statusdto.statusmessage",{"_index":1250,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["statuses",{"_index":845,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/RequestWithUser.html":{}}}],["statushistory",{"_index":1071,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["statusmessage",{"_index":477,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["stay",{"_index":2899,"title":{},"body":{"index.html":{}}}],["step",{"_index":1850,"title":{},"body":{"injectables/OTPService.html":{}}}],["steps",{"_index":2851,"title":{},"body":{"index.html":{}}}],["straightforward",{"_index":2863,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":903,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["stream",{"_index":1804,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["stream.on('data",{"_index":1806,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["stream.on('end",{"_index":1810,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["stream.on('error",{"_index":1809,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["strength",{"_index":1525,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["string",{"_index":47,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueNotificationDto.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"classes/ResetPasswordDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{},"miscellaneous/variables.html":{}}}],["string(payload.email",{"_index":927,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["structure",{"_index":2170,"title":{},"body":{"controllers/QueuesController.html":{}}}],["sub",{"_index":906,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{}}}],["submission",{"_index":999,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["submissiondate",{"_index":2418,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["subscribemessage",{"_index":1983,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subscribemessage('getqueueposition",{"_index":1966,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subscribemessage('join_queue_updates",{"_index":1976,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subscribemessage('joincounter",{"_index":1970,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subscribemessage('joinqueue",{"_index":1973,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subtype",{"_index":986,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["success",{"_index":1491,"title":{},"body":{"interfaces/LockoutData.html":{},"classes/QueueGateway.html":{},"interfaces/RequestWithUser.html":{}}}],["successful",{"_index":2241,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["successfully",{"_index":566,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["successfully'})@apiresponse({status",{"_index":1152,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["summary",{"_index":638,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["super",{"_index":914,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["super_admin",{"_index":593,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["super_admin')@apioperation({summary",{"_index":572,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/UsersController.html":{}}}],["super_admin')@useguards(rolesguard)@apioperation({summary",{"_index":1156,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["super_admin'].includes(role.name",{"_index":680,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":2882,"title":{},"body":{"index.html":{},"modules.html":{}}}],["supported",{"_index":2377,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["supporting",{"_index":2149,"title":{},"body":{"controllers/QueuesController.html":{}}}],["sure",{"_index":2285,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["svg",{"_index":2928,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":2808,"title":{},"body":{"dependencies.html":{}}}],["synchronize",{"_index":331,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["table",{"_index":2768,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2767,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":268,"title":{},"body":{"injectables/AnnouncementService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["taken",{"_index":1524,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["target",{"_index":1609,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["targetuser",{"_index":1610,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["targetuserid",{"_index":1596,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["template",{"_index":2315,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["templates",{"_index":2311,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["term",{"_index":2618,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["test",{"_index":1674,"title":{},"body":{"classes/LoginDto.html":{},"interfaces/RequestWithUser.html":{},"index.html":{}}}],["test(password",{"_index":1662,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["test:covdeployment",{"_index":2848,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":2847,"title":{},"body":{"index.html":{}}}],["test@example.com",{"_index":100,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateUserDto.html":{},"classes/VerifyOtpDto.html":{}}}],["test@example.com'})@isemail()@isnotempty",{"_index":2210,"title":{},"body":{"classes/RegisterDto.html":{}}}],["test@example.com'})@isemail()@isoptional",{"_index":60,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["test@example.com'})@isnotempty",{"_index":1672,"title":{},"body":{"classes/LoginDto.html":{}}}],["testing",{"_index":461,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"injectables/OTPService.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["testminioconnection",{"_index":2753,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["testotp(@body",{"_index":2373,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["testotpdto",{"_index":460,"title":{"classes/TestOtpDto.html":{}},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{}}}],["tests",{"_index":2844,"title":{},"body":{"index.html":{}}}],["text",{"_index":130,"title":{},"body":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/DocumentApplication.html":{}}}],["thanks",{"_index":2912,"title":{},"body":{"index.html":{}}}],["theme",{"_index":2379,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["themed",{"_index":2317,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.announcementrepository.create",{"_index":252,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["this.announcementrepository.find",{"_index":255,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["this.announcementrepository.findone",{"_index":258,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["this.announcementrepository.save(announcement",{"_index":254,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["this.announcementservice.create(createannouncementdto",{"_index":199,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["this.announcementservice.findall",{"_index":200,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["this.announcementservice.findone(id",{"_index":204,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["this.announcementservice.getrecentannouncements(limit",{"_index":202,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["this.announcementservice.remove(id",{"_index":208,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["this.announcementservice.update(id",{"_index":206,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["this.appointmentrepository.count",{"_index":852,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.appointmentrepository.delete(id",{"_index":810,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.appointmentrepository.find",{"_index":788,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.appointmentrepository.findone",{"_index":791,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.appointmentrepository.save(appointment",{"_index":815,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.appointmentrepository.save(updated",{"_index":805,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.appointmentservice.create(createappointmentdto",{"_index":643,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.findall",{"_index":648,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.findallbyuser(user.id",{"_index":652,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.findbyappointmentnumber(appointmentnumber",{"_index":673,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.findone(+id",{"_index":671,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.getappointmentsbydate(date",{"_index":660,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.getappointmentsbydaterange",{"_index":666,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.getappointmentsstats",{"_index":655,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.getavailableslots(date",{"_index":669,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.remove(+id",{"_index":696,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.update(+id",{"_index":684,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.updatestatus(+id",{"_index":692,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appservice.gethello",{"_index":279,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.adminupdateuser",{"_index":2297,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.authservice.clearaccountlockout(identifier",{"_index":2453,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.authservice.finduserbyemail(email",{"_index":2355,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.authservice.getaccountlockout(identifier",{"_index":2442,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.authservice.getprofile(number(req.user.id",{"_index":2268,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.authservice.login(logindto",{"_index":2247,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.authservice.recordfailedloginattempt(identifier",{"_index":2448,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.authservice.register(createuserdto",{"_index":2259,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.authservice.updatepassword(email",{"_index":2363,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.authservice.updateuserinfo",{"_index":2272,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.bcryptrounds",{"_index":1441,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.bucketname",{"_index":1721,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["this.checktimeslotavailability(newdate",{"_index":801,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.configservice",{"_index":1770,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.configservice.get",{"_index":1765,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.configservice.get('minio_enable_port",{"_index":1768,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.configservice.get('minio_port",{"_index":1767,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.configservice.get('otp_expiry_minutes",{"_index":1856,"title":{},"body":{"injectables/OTPService.html":{}}}],["this.configservice.get('otp_secret",{"_index":1849,"title":{},"body":{"injectables/OTPService.html":{}}}],["this.configservice.get('ws_cors_origin",{"_index":2002,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.documentapplicationsservice.create(createdto",{"_index":1203,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.findall",{"_index":1255,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.findall(userid",{"_index":1235,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.findone(id",{"_index":1242,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.getallapplicationfiles",{"_index":1241,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.getapplicationfiles",{"_index":1239,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.getapplicationstats",{"_index":1257,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.getfiledownloadurl",{"_index":1245,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.remove(id",{"_index":1251,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.update",{"_index":1247,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.updatestatus",{"_index":1248,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.uploadfile",{"_index":1226,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.emailservice.sendapplicationnotification",{"_index":2261,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.emailservice.sendappointmentcancellation",{"_index":2410,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.emailservice.sendappointmentconfirmation",{"_index":2405,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.emailservice.sendappointmentreminder",{"_index":2414,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.emailservice.sendappointmentstatusupdate",{"_index":2408,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.emailservice.senddocumentapplicationconfirmation",{"_index":2420,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.emailservice.senddocumentapplicationrejection",{"_index":2438,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.emailservice.senddocumentapplicationstatusupdate",{"_index":2429,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.emailservice.sendotp(email",{"_index":1862,"title":{},"body":{"injectables/OTPService.html":{}}}],["this.emailservice.sendqueuepositionalert",{"_index":2391,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.emailservice.sendqueuestatusupdate",{"_index":2394,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.ensurebucketexists",{"_index":1779,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.failedattempts.delete(key",{"_index":1487,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.failedattempts.get(key",{"_index":1464,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.failedattempts.set(key",{"_index":1481,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.findone(id",{"_index":263,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.finduserbyemail(email",{"_index":1655,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.generatealltimeslots",{"_index":834,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.getaccountlockout(identifier",{"_index":1494,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.getprofile(targetuserid",{"_index":1644,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.handledailyqueuereset",{"_index":2135,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["this.hashpassword(newpassword",{"_index":1657,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.hashpassword(password",{"_index":1531,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.hashpassword(updateuserdto.password",{"_index":1563,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.isresetinprogress",{"_index":2085,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["this.isvalidemail(email",{"_index":1523,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.isvalidemail(updateuserdto.email",{"_index":1556,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.jwtservice.sign(payload",{"_index":1518,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.logdailystatistics(startofday",{"_index":2121,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["this.logger.debug(`generated",{"_index":1800,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.logger.error",{"_index":837,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{}}}],["this.logger.error('admin",{"_index":1647,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.logger.error('delete",{"_index":1740,"title":{},"body":{"injectables/MinioService.html":{}}}],["this.logger.error('error",{"_index":862,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService-1.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["this.logger.error('forgot",{"_index":2356,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.logger.error('get",{"_index":1738,"title":{},"body":{"injectables/MinioService.html":{}}}],["this.logger.error('login",{"_index":1521,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.logger.error('queue",{"_index":2398,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.logger.error('registration",{"_index":1545,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["this.logger.error('reset",{"_index":2364,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.logger.error('test",{"_index":2376,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.logger.error('upload",{"_index":1735,"title":{},"body":{"injectables/MinioService.html":{}}}],["this.logger.error('user",{"_index":1587,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.logger.error(`error",{"_index":808,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.logger.log",{"_index":691,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{}}}],["this.logger.log('admin",{"_index":2292,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.logger.log('comparing",{"_index":1510,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.logger.log('fetching",{"_index":647,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.logger.log('found",{"_index":2163,"title":{},"body":{"controllers/QueuesController.html":{}}}],["this.logger.log('generated",{"_index":1519,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.logger.log('get",{"_index":2154,"title":{},"body":{"controllers/QueuesController.html":{}}}],["this.logger.log('login",{"_index":1505,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["this.logger.log('password",{"_index":1514,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.logger.log('processing",{"_index":2173,"title":{},"body":{"controllers/QueuesController.html":{}}}],["this.logger.log('received",{"_index":1221,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.logger.log('stored",{"_index":1508,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.logger.log('target",{"_index":2295,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.logger.log('update",{"_index":2296,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.logger.log('user",{"_index":1507,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.logger.log(`account",{"_index":1488,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.logger.log(`bucket",{"_index":1782,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.logger.log(`client",{"_index":1999,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.logger.log(`creating",{"_index":642,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.logger.log(`deleted",{"_index":812,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.logger.log(`deleting",{"_index":695,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.logger.log(`fetching",{"_index":651,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.logger.log(`file",{"_index":1733,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["this.logger.log(`password",{"_index":1659,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.logger.log(`returning",{"_index":2191,"title":{},"body":{"controllers/QueuesController.html":{}}}],["this.logger.log(`socket",{"_index":2010,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.logger.log(`updated",{"_index":804,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.logger.log(`updating",{"_index":683,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.logger.warn",{"_index":1477,"title":{},"body":{"interfaces/LockoutData.html":{},"injectables/QueueSchedulerService.html":{}}}],["this.minioclient",{"_index":1719,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["this.minioclient.bucketexists(this.bucketname",{"_index":1780,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.minioclient.listobjects",{"_index":1805,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.minioclient.makebucket(this.bucketname",{"_index":1781,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.minioclient.presignedgetobject",{"_index":1736,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["this.minioclient.putobject",{"_index":1726,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["this.minioclient.removeobject(this.bucketname",{"_index":1739,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["this.minioclient.statobject(this.bucketname",{"_index":1801,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.otprepository.create",{"_index":1860,"title":{},"body":{"injectables/OTPService.html":{}}}],["this.otprepository.delete",{"_index":1868,"title":{},"body":{"injectables/OTPService.html":{}}}],["this.otprepository.findone",{"_index":1864,"title":{},"body":{"injectables/OTPService.html":{}}}],["this.otprepository.save(otpentity",{"_index":1861,"title":{},"body":{"injectables/OTPService.html":{}}}],["this.otprepository.update",{"_index":1843,"title":{},"body":{"injectables/OTPService.html":{}}}],["this.otpservice.generateotp(email",{"_index":2325,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.otpservice.verifyotp",{"_index":2258,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.otpservice.verifyotp(email",{"_index":2338,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.queuegateway.notifyqueueupdate(queue.id",{"_index":2111,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["this.queuegateway.server.emit('dailyqueuereset",{"_index":2114,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["this.queuerepository.count",{"_index":2126,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["this.queuerepository.find",{"_index":2101,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["this.queuerepository.save",{"_index":2106,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["this.queueservice.findbystatuswithdetails(queuestatus.pending",{"_index":2161,"title":{},"body":{"controllers/QueuesController.html":{}}}],["this.queueservice.findbystatuswithdetails(queuestatus.serving",{"_index":2162,"title":{},"body":{"controllers/QueuesController.html":{}}}],["this.queueservice.findbyuseridwithdetails(userid",{"_index":2198,"title":{},"body":{"controllers/QueuesController.html":{}}}],["this.queueservice.findone(queueid",{"_index":2205,"title":{},"body":{"controllers/QueuesController.html":{}}}],["this.queueservice.getqueuedetails(queueid",{"_index":2006,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.queueservice.getqueueposition(queueid",{"_index":2008,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.reflector.getallandoverride",{"_index":2469,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["this.rolesrepository.find",{"_index":2536,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesrepository.findby",{"_index":2544,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesrepository.findone",{"_index":2537,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesservice.assignrolestouser",{"_index":1629,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.rolesservice.assignrolestouser(id",{"_index":1383,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.rolesservice.assignrolestouser(user.id",{"_index":1410,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.rolesservice.findall",{"_index":2506,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.findbyname('citizen",{"_index":1533,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.rolesservice.findone(+id",{"_index":2507,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.findone(roleid",{"_index":1626,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.rolesservice.findone(updateuserdto.defaultroleid",{"_index":1634,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.rolesservice.getuserroles(+userid",{"_index":2509,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.getuserroles(adminid",{"_index":1603,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.rolesservice.getuserroles(targetuserid",{"_index":1636,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.rolesservice.getuserroles(user.id",{"_index":1515,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.rolesservice.getuserroles(userid",{"_index":1553,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.server.emit('counterlistupdate",{"_index":2020,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.server.emit('queuelistupdate",{"_index":2017,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.server.to(`counter_${counterid}`).emit('counterupdate",{"_index":2019,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.server.to(`queue_${queueid}`).emit('queueupdate",{"_index":2016,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.updateuserinfo(targetuserid",{"_index":1617,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.usersrepository",{"_index":1319,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.count",{"_index":1385,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.create",{"_index":1406,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.delete(id",{"_index":1384,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.delete(user.id",{"_index":1541,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.usersrepository.find",{"_index":1396,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.findone",{"_index":1344,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.save(user",{"_index":1409,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.update",{"_index":1658,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.usersrepository.update(id",{"_index":1375,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.update(targetuserid",{"_index":1642,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.usersrepository.update(userid",{"_index":1582,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.usersservice.adminupdate(+id",{"_index":2696,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.create(userwithhashedpassword",{"_index":2702,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall",{"_index":2687,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(req.user.id",{"_index":2688,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(user.id",{"_index":2705,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(userid",{"_index":2694,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getstats",{"_index":2689,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.remove(+id",{"_index":2697,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.updatestatus(+id",{"_index":2698,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.validatepasswordstrength",{"_index":1562,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.validatepasswordstrength(newpassword",{"_index":1654,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.validatepasswordstrength(password",{"_index":1527,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["throw",{"_index":259,"title":{},"body":{"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["time",{"_index":376,"title":{},"body":{"modules/AppModule.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"injectables/OTPService.html":{},"classes/QueueNotificationDto.html":{},"interfaces/RequestWithUser.html":{},"index.html":{}}}],["time_zone",{"_index":380,"title":{},"body":{"modules/AppModule.html":{}}}],["timeout",{"_index":356,"title":{},"body":{"modules/AppModule.html":{}}}],["timeremaining",{"_index":1483,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["timestamp",{"_index":1817,"title":{},"body":{"entities/OTP.html":{},"injectables/QueueSchedulerService.html":{}}}],["timezone",{"_index":2066,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["title",{"_index":120,"title":{},"body":{"entities/Announcement.html":{},"classes/CreateAnnouncementDto.html":{}}}],["today",{"_index":786,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueSchedulerService.html":{}}}],["today's",{"_index":855,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["today.getdate",{"_index":2093,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["today.getfullyear",{"_index":2091,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["today.getmonth",{"_index":2092,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["today.sethours(0",{"_index":787,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["todayappointments",{"_index":856,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["token",{"_index":925,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{}}}],["tokens",{"_index":908,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["tolowercase",{"_index":1772,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["tomorrow",{"_index":840,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["tomorrow.sethours(0",{"_index":842,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["total",{"_index":861,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"classes/PaginatedUsersResponseDto.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["totalcount",{"_index":850,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["totalpages",{"_index":1342,"title":{},"body":{"interfaces/FindAllOptions.html":{},"classes/PaginatedUsersResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["totalusers",{"_index":1305,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["touch",{"_index":2919,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":2621,"title":{},"body":{"classes/UserQueryDto.html":{},"dependencies.html":{}}}],["trigger",{"_index":2133,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["triggered",{"_index":2134,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["true",{"_index":136,"title":{},"body":{"entities/Announcement.html":{},"injectables/AnnouncementService.html":{},"modules/AppModule.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"classes/AppointmentNotificationDto.html":{},"entities/Counter.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["true})@joincolumn({name",{"_index":537,"title":{},"body":{"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["try",{"_index":774,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["twitter",{"_index":2925,"title":{},"body":{"index.html":{}}}],["two",{"_index":2302,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["type",{"_index":29,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"modules/AppModule.html":{},"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"classes/ResetPasswordDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["typeof",{"_index":1588,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["typeorm",{"_index":145,"title":{},"body":{"entities/Announcement.html":{},"injectables/AnnouncementService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"injectables/AppointmentService.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"injectables/QueueSchedulerService.html":{},"entities/Role.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":225,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature",{"_index":1266,"title":{},"body":{"modules/DocumentApplicationsModule.html":{}}}],["typeormmodule.forfeature([announcement",{"_index":230,"title":{},"body":{"modules/AnnouncementModule.html":{}}}],["typeormmodule.forfeature([appointment",{"_index":702,"title":{},"body":{"modules/AppointmentModule.html":{}}}],["typeormmodule.forfeature([otp",{"_index":387,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmodule.forfeature([queue",{"_index":2034,"title":{},"body":{"modules/QueueModule.html":{}}}],["typeormmodule.forfeature([role",{"_index":2521,"title":{},"body":{"modules/RolesModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":887,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":317,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":2940,"title":{},"body":{"miscellaneous/variables.html":{}}}],["types",{"_index":2554,"title":{},"body":{"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["types/nodemailer",{"_index":2776,"title":{},"body":{"dependencies.html":{}}}],["types/qrcode",{"_index":2778,"title":{},"body":{"dependencies.html":{}}}],["types/speakeasy",{"_index":2780,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":1457,"title":{},"body":{"interfaces/LockoutData.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["ui",{"_index":2809,"title":{},"body":{"dependencies.html":{}}}],["unauthorized",{"_index":2244,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["unauthorizedexception",{"_index":900,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["unauthorizedexception('admin",{"_index":1601,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["unauthorizedexception('insufficient",{"_index":1608,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["unauthorizedexception('invalid",{"_index":924,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["unauthorizedexception('user",{"_index":1552,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["uncomment",{"_index":1191,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"modules/QueueModule.html":{}}}],["undefined",{"_index":44,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Appointment.html":{},"classes/AppointmentNotificationDto.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"interfaces/RequestWithUser.html":{},"classes/SendOtpDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{}}}],["undefined})@isarray()@isoptional",{"_index":45,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["undefined})@isenum(applicationtype",{"_index":991,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["undefined})@isobject",{"_index":996,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["undefined})@isoptional()@isarray()@isnumber",{"_index":1058,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["undefined})@isstring",{"_index":415,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/QueueNotificationDto.html":{}}}],["unexpected",{"_index":1594,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["unique",{"_index":547,"title":{},"body":{"entities/Appointment.html":{},"entities/Queue.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["uniqueness",{"_index":1348,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["unit",{"_index":2845,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":568,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/LockoutData.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser-1.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["unlicensed",{"_index":2936,"title":{},"body":{"properties.html":{}}}],["unsafe",{"_index":2678,"title":{},"body":{"controllers/UsersController.html":{}}}],["unused",{"_index":1459,"title":{},"body":{"interfaces/LockoutData.html":{},"controllers/UsersController.html":{}}}],["update",{"_index":11,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"classes/QueueGateway.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update(id",{"_index":178,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["updateannouncementdto",{"_index":179,"title":{"classes/UpdateAnnouncementDto.html":{}},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"classes/UpdateAnnouncementDto.html":{},"coverage.html":{}}}],["updateappointmentdto",{"_index":605,"title":{"classes/UpdateAppointmentDto.html":{}},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"classes/UpdateAppointmentDto.html":{},"coverage.html":{}}}],["updateappointmentdto.appointmentdate",{"_index":795,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["updateappointmentdto.appointmenttime",{"_index":796,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["updated",{"_index":802,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updated_at",{"_index":1097,"title":{},"body":{"entities/DocumentApplication.html":{},"entities/User.html":{}}}],["updatedat",{"_index":121,"title":{},"body":{"entities/Announcement.html":{},"entities/Appointment.html":{},"entities/DocumentApplication.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{}}}],["updatedata",{"_index":1355,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.contactnumber",{"_index":1360,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.defaultroleid",{"_index":1364,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.email",{"_index":1356,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.firstname",{"_index":1358,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.lastname",{"_index":1359,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.middlename",{"_index":1362,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.name",{"_index":1373,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.nameextension",{"_index":1363,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.username",{"_index":1357,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedatecolumn",{"_index":142,"title":{},"body":{"entities/Announcement.html":{},"entities/Appointment.html":{},"entities/DocumentApplication.html":{},"entities/User.html":{}}}],["updatedatecolumn({name",{"_index":1096,"title":{},"body":{"entities/DocumentApplication.html":{},"entities/User.html":{}}}],["updatedocumentapplicationdto",{"_index":1176,"title":{"classes/UpdateDocumentApplicationDto.html":{}},"body":{"controllers/DocumentApplicationsController.html":{},"classes/UpdateDocumentApplicationDto.html":{},"coverage.html":{}}}],["updatedto",{"_index":1175,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["updateduser",{"_index":1583,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["updateduser.defaultrole?.name",{"_index":1586,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["updatepassword(email",{"_index":1653,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["updateprofile",{"_index":2271,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["updatequeuedto",{"_index":2564,"title":{"classes/UpdateQueueDto.html":{}},"body":{"classes/UpdateQueueDto.html":{},"coverage.html":{}}}],["updates",{"_index":725,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"interfaces/LockoutData.html":{},"classes/QueueGateway.html":{},"classes/QueueNotificationDto.html":{},"interfaces/RequestWithUser.html":{},"index.html":{}}}],["updatestatus",{"_index":558,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updatestatus(id",{"_index":608,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updatestatusdto",{"_index":2675,"title":{},"body":{"controllers/UsersController.html":{}}}],["updatestatusdto.isactive",{"_index":2699,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuserdto",{"_index":14,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateuserdto.defaultroleid",{"_index":1633,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["updateuserdto.email",{"_index":1555,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["updateuserdto.firstname",{"_index":1567,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["updateuserdto.lastname",{"_index":1569,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["updateuserdto.middlename",{"_index":1568,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["updateuserdto.nameextension",{"_index":1570,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["updateuserdto.password",{"_index":1561,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["updateuserdto.roleids",{"_index":1622,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["updateuserdto.roleids.includes(updateuserdto.defaultroleid",{"_index":1641,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["updateuserdto.roleids.join",{"_index":1631,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["updateuserdto.roleids.length",{"_index":1623,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["updateuserdto.username",{"_index":1558,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["updateuserdto:22",{"_index":61,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:27",{"_index":86,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:37",{"_index":84,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:42",{"_index":65,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:47",{"_index":71,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:52",{"_index":68,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:60",{"_index":77,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:68",{"_index":59,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:76",{"_index":56,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto['name",{"_index":1576,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["updateuserinfo(userid",{"_index":1554,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["updateuserstatusdto",{"_index":2574,"title":{"classes/UpdateUserStatusDto.html":{}},"body":{"classes/UpdateUserStatusDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["updating",{"_index":96,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"interfaces/LockoutData.html":{},"classes/UpdateUserDto.html":{}}}],["upload",{"_index":1186,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"injectables/MinioService-1.html":{}}}],["uploaddocument",{"_index":1135,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["uploaddocument(id",{"_index":1181,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["uploaded",{"_index":1734,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["uploaded_at",{"_index":1289,"title":{},"body":{"entities/DocumentFile.html":{}}}],["uploadedat",{"_index":1271,"title":{},"body":{"entities/DocumentFile.html":{}}}],["uploadedfile",{"_index":1189,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["uploadfile",{"_index":1682,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["uploadfile(file",{"_index":1689,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["uploading",{"_index":1789,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["uppercase",{"_index":456,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["url",{"_index":1167,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["usage",{"_index":2367,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["use",{"_index":333,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService-1.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["used",{"_index":1845,"title":{},"body":{"injectables/OTPService.html":{},"interfaces/RequestWithUser.html":{}}}],["usefactory",{"_index":319,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["useguards",{"_index":611,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard",{"_index":634,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["useguards(rolesguard",{"_index":644,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["useinterceptors",{"_index":1188,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["user",{"_index":12,"title":{"entities/User.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"modules/AuthModule.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/QueueDetails.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":2275,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["user'})@isoptional()@isnumber",{"_index":1035,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.defaultrole?.name",{"_index":1341,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.defaultroleid",{"_index":1535,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["user.dto",{"_index":1300,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":7,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:102",{"_index":1036,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:19",{"_index":1040,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":2570,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:27",{"_index":1063,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:36",{"_index":1057,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:37",{"_index":2573,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:42",{"_index":2571,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:44",{"_index":1042,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:47",{"_index":2572,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:52",{"_index":1046,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:60",{"_index":1043,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:68",{"_index":1051,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:76",{"_index":1054,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:84",{"_index":1033,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:90",{"_index":40,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["user.dto.ts:94",{"_index":1060,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:99",{"_index":46,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["user.email",{"_index":1237,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.firstname",{"_index":1327,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.id",{"_index":641,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/LockoutData.html":{}}}],["user.lastname",{"_index":1328,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.middlename",{"_index":1369,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.nameextension",{"_index":1372,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.password",{"_index":1453,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["user.roles",{"_index":2490,"title":{},"body":{"entities/Role.html":{},"injectables/RolesService.html":{}}}],["user.roles.map((role",{"_index":1339,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.roles.some((role",{"_index":679,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{}}}],["user.username",{"_index":1329,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user/:userid",{"_index":2283,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["user?.id",{"_index":1230,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["user?.roles.some((role",{"_index":1228,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["user@example.com",{"_index":405,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/AppointmentNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/QueueNotificationDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["user@example.com'})@isemail",{"_index":2038,"title":{},"body":{"classes/QueueNotificationDto.html":{}}}],["user@example.com'})@isemail()@isnotempty",{"_index":719,"title":{},"body":{"classes/AppointmentNotificationDto.html":{}}}],["user_id",{"_index":1099,"title":{},"body":{"entities/DocumentApplication.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["user_roles",{"_index":2599,"title":{},"body":{"entities/User.html":{}}}],["userid",{"_index":518,"title":{},"body":{"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"interfaces/AuthenticatedUser.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"entities/QueueDetails.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{}}}],["username",{"_index":28,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["username'})@isoptional()@isstring",{"_index":2619,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["userquerydto",{"_index":2610,"title":{"classes/UserQueryDto.html":{}},"body":{"classes/UserQueryDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["userqueues",{"_index":2197,"title":{},"body":{"controllers/QueuesController.html":{}}}],["userqueues.length",{"_index":2199,"title":{},"body":{"controllers/QueuesController.html":{}}}],["userqueues.map((queue",{"_index":2200,"title":{},"body":{"controllers/QueuesController.html":{}}}],["userresponsedto",{"_index":1879,"title":{"classes/UserResponseDto.html":{}},"body":{"classes/PaginatedUsersResponseDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["userroles",{"_index":1635,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["userroles.map((role",{"_index":2475,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["userroles.some",{"_index":1638,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["users",{"_index":1148,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Role.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users.controller",{"_index":2711,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.map((user",{"_index":1337,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["users.service",{"_index":2680,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/entities/user.entity",{"_index":542,"title":{},"body":{"entities/Appointment.html":{},"modules/AuthModule.html":{},"entities/DocumentApplication.html":{},"interfaces/LockoutData.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{}}}],["users/users.module",{"_index":301,"title":{},"body":{"modules/AppModule.html":{}}}],["usersbyrole",{"_index":1308,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["usersbyroledto",{"_index":2647,"title":{"classes/UsersByRoleDto.html":{}},"body":{"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"coverage.html":{}}}],["userscontroller",{"_index":2650,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":290,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":1316,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["usersservice",{"_index":1313,"title":{"injectables/UsersService.html":{}},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["userstats",{"_index":1304,"title":{"interfaces/UserStats.html":{}},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userstatsresponsedto",{"_index":2640,"title":{"classes/UserStatsResponseDto.html":{}},"body":{"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"coverage.html":{}}}],["userupdatefields",{"_index":1581,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["userwithhashedpassword",{"_index":2701,"title":{},"body":{"controllers/UsersController.html":{}}}],["userwithoutpassword",{"_index":1338,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["userwithroles",{"_index":2704,"title":{},"body":{"controllers/UsersController.html":{}}}],["uses",{"_index":1714,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"interfaces/RequestWithUser.html":{}}}],["usessl",{"_index":1702,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["usesslvalue",{"_index":1769,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["using",{"_index":378,"title":{},"body":{"modules/AppModule.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{},"index.html":{}}}],["v3",{"_index":1795,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["valid",{"_index":411,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["validate",{"_index":1417,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["validate(payload",{"_index":919,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["validatepasswordstrength(password",{"_index":1660,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["validates",{"_index":2329,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["validateuser(logindto",{"_index":1450,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["validating",{"_index":907,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["validation",{"_index":920,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["validator",{"_index":93,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/ApplicationNotificationDto.html":{},"classes/AppointmentNotificationDto.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{},"classes/QueueNotificationDto.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserQueryDto.html":{},"classes/VerifyOtpDto.html":{},"dependencies.html":{}}}],["validity",{"_index":775,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["value",{"_index":172,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"classes/SendOtpDto.html":{},"classes/UserQueryDto.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["varchar",{"_index":126,"title":{},"body":{"entities/Announcement.html":{}}}],["variable",{"_index":335,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{}}}],["variables",{"_index":913,"title":{"miscellaneous/variables.html":{}},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["vars",{"_index":1460,"title":{},"body":{"interfaces/LockoutData.html":{},"controllers/UsersController.html":{}}}],["verification",{"_index":422,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["verification'})@isstring()@isoptional",{"_index":2547,"title":{},"body":{"classes/SendOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["verified",{"_index":1814,"title":{},"body":{"entities/OTP.html":{},"injectables/OTPService.html":{},"interfaces/RequestWithUser.html":{}}}],["verifies",{"_index":2327,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["verify",{"_index":1598,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["verifying",{"_index":2339,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["verifyotp",{"_index":1828,"title":{},"body":{"injectables/OTPService.html":{},"interfaces/RequestWithUser.html":{}}}],["verifyotp(email",{"_index":1835,"title":{},"body":{"injectables/OTPService.html":{}}}],["verifyotpdto",{"_index":424,"title":{"classes/VerifyOtpDto.html":{}},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{}}}],["version",{"_index":2934,"title":{},"body":{"properties.html":{}}}],["via",{"_index":442,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["video",{"_index":2889,"title":{},"body":{"index.html":{}}}],["view",{"_index":2690,"title":{},"body":{"controllers/UsersController.html":{}}}],["visit",{"_index":2879,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":2892,"title":{},"body":{"index.html":{}}}],["void",{"_index":1962,"title":{},"body":{"classes/QueueGateway.html":{}}}],["vs",{"_index":2336,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["waiting",{"_index":2041,"title":{},"body":{"classes/QueueNotificationDto.html":{}}}],["walk",{"_index":2193,"title":{},"body":{"controllers/QueuesController.html":{}}}],["watch",{"_index":2841,"title":{},"body":{"index.html":{}}}],["we'll",{"_index":1614,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["website",{"_index":2923,"title":{},"body":{"index.html":{}}}],["websocketgateway",{"_index":1982,"title":{},"body":{"classes/QueueGateway.html":{}}}],["websocketserver",{"_index":1957,"title":{},"body":{"classes/QueueGateway.html":{}}}],["weekend",{"_index":779,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["weekends",{"_index":784,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["welcome",{"_index":2260,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["what's",{"_index":2290,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["willbeassigned",{"_index":1640,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["without",{"_index":2703,"title":{},"body":{"controllers/UsersController.html":{}}}],["wk001",{"_index":2051,"title":{},"body":{"classes/QueueNotificationDto.html":{}}}],["wk001'})@isstring",{"_index":2047,"title":{},"body":{"classes/QueueNotificationDto.html":{}}}],["working",{"_index":2287,"title":{},"body":{"interfaces/RequestWithUser.html":{},"index.html":{}}}],["world",{"_index":391,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":2902,"title":{},"body":{"index.html":{}}}],["yes",{"_index":576,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService-1.html":{}}}],["you'd",{"_index":2916,"title":{},"body":{"index.html":{}}}],["you're",{"_index":2849,"title":{},"body":{"index.html":{}}}],["yyyy",{"_index":858,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["z\\\\d@$!%*?&]{8",{"_index":450,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["z\\d",{"_index":455,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["z\\d@$!%*?&]{8,}$'})@isstring()@length(8",{"_index":2479,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["z])(?=.*[a",{"_index":447,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["z])(?=.*\\\\d)(?=.*[@$!%*?&])[a",{"_index":448,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*?&])[a",{"_index":454,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["za",{"_index":449,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["zone",{"_index":377,"title":{},"body":{"modules/AppModule.html":{}}}],["zoom",{"_index":221,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AdminUpdateUserDto.html":{"url":"classes/AdminUpdateUserDto.html","title":"class - AdminUpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AdminUpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/update-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for admin to update any user\n\n            \n\n            \n                Extends\n            \n            \n                            UpdateUserDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                defaultRoleId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                roleIds\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                contactNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                middleName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                nameExtension\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        defaultRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Default role ID for the user', example: 2})@IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        roleIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Array of role IDs to assign to the user', example: undefined, type: undefined})@IsArray()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:99\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Complete address', example: '123 Main St, San Ildefonso, Bulacan'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:76\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        contactNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Contact number', example: '09123456789'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:68\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User email address', example: 'test@example.com'})@IsEmail()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:22\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'First name', example: 'John'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:42\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Last name', example: 'Doe'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:52\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Middle name', example: 'Robert'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:47\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        nameExtension\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Name extension (e.g., Jr., III)', example: 'Jr.'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:60\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User password (min 8 characters)', example: 'password123', minLength: 8})@IsString()@IsOptional()@MinLength(8)\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:37\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Username', example: 'john_doe'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:27\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsOptional,\n  IsString,\n  MinLength,\n  IsNumber,\n  IsArray,\n} from 'class-validator';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\n/**\n * DTO for updating user information (citizen)\n * @class UpdateUserDto\n */\nexport class UpdateUserDto {\n  @ApiPropertyOptional({\n    description: 'User email address',\n    example: 'test@example.com',\n  })\n  @IsEmail()\n  @IsOptional()\n  email?: string;\n\n  @ApiPropertyOptional({ description: 'Username', example: 'john_doe' })\n  @IsString()\n  @IsOptional()\n  username?: string;\n\n  @ApiPropertyOptional({\n    description: 'User password (min 8 characters)',\n    example: 'password123',\n    minLength: 8,\n  })\n  @IsString()\n  @IsOptional()\n  @MinLength(8)\n  password?: string;\n\n  @ApiPropertyOptional({ description: 'First name', example: 'John' })\n  @IsString()\n  @IsOptional()\n  firstName?: string;\n\n  @ApiPropertyOptional({ description: 'Middle name', example: 'Robert' })\n  @IsString()\n  @IsOptional()\n  middleName?: string;\n\n  @ApiPropertyOptional({ description: 'Last name', example: 'Doe' })\n  @IsString()\n  @IsOptional()\n  lastName?: string;\n\n  @ApiPropertyOptional({\n    description: 'Name extension (e.g., Jr., III)',\n    example: 'Jr.',\n  })\n  @IsString()\n  @IsOptional()\n  nameExtension?: string;\n\n  @ApiPropertyOptional({\n    description: 'Contact number',\n    example: '09123456789',\n  })\n  @IsString()\n  @IsOptional()\n  contactNumber?: string;\n\n  @ApiPropertyOptional({\n    description: 'Complete address',\n    example: '123 Main St, San Ildefonso, Bulacan',\n  })\n  @IsString()\n  @IsOptional()\n  address?: string;\n}\n\n/**\n * DTO for admin to update any user\n * @class AdminUpdateUserDto\n */\nexport class AdminUpdateUserDto extends UpdateUserDto {\n  @ApiPropertyOptional({\n    description: 'Default role ID for the user',\n    example: 2,\n  })\n  @IsNumber()\n  @IsOptional()\n  defaultRoleId?: number;\n\n  @ApiPropertyOptional({\n    description: 'Array of role IDs to assign to the user',\n    example: [1, 2],\n    type: [Number],\n  })\n  @IsArray()\n  @IsOptional()\n  roleIds?: number[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Announcement.html":{"url":"entities/Announcement.html","title":"entity - Announcement","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Announcement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/announcement/entities/announcement.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                createdBy\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                image\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                title\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/entities/announcement.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 100, default: 'admin'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/entities/announcement.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/entities/announcement.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/entities/announcement.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 500, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/entities/announcement.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'boolean', default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/entities/announcement.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/entities/announcement.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/entities/announcement.entity.ts:33\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  CreateDateColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity('announcements')\nexport class Announcement {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ type: 'varchar', length: 255 })\n  title: string;\n\n  @Column({ type: 'text' })\n  description: string;\n\n  @Column({ type: 'varchar', length: 500, nullable: true })\n  image: string;\n\n  @Column({ type: 'boolean', default: true })\n  isActive: boolean;\n\n  @Column({ type: 'varchar', length: 100, default: 'admin' })\n  createdBy: string;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AnnouncementController.html":{"url":"controllers/AnnouncementController.html","title":"controller - AnnouncementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AnnouncementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/announcement/announcement.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                announcements\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                getRecentAnnouncements\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createAnnouncementDto: CreateAnnouncementDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createAnnouncementDto\n                                            \n                                                            CreateAnnouncementDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getRecentAnnouncements\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRecentAnnouncements(limit: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('recent')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    5\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.controller.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateAnnouncementDto: UpdateAnnouncementDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.controller.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateAnnouncementDto\n                                            \n                                                            UpdateAnnouncementDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  ParseIntPipe,\n  Query,\n} from '@nestjs/common';\nimport { AnnouncementService } from './announcement.service';\nimport { CreateAnnouncementDto } from './dto/create-announcement.dto';\nimport { UpdateAnnouncementDto } from './dto/update-announcement.dto';\n\n@Controller('announcements')\nexport class AnnouncementController {\n  constructor(private readonly announcementService: AnnouncementService) {}\n\n  @Post()\n  create(@Body() createAnnouncementDto: CreateAnnouncementDto) {\n    return this.announcementService.create(createAnnouncementDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.announcementService.findAll();\n  }\n\n  @Get('recent')\n  getRecentAnnouncements(@Query('limit', ParseIntPipe) limit: number = 5) {\n    return this.announcementService.getRecentAnnouncements(limit);\n  }\n\n  @Get(':id')\n  findOne(@Param('id', ParseIntPipe) id: number) {\n    return this.announcementService.findOne(id);\n  }\n\n  @Patch(':id')\n  update(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() updateAnnouncementDto: UpdateAnnouncementDto,\n  ) {\n    return this.announcementService.update(id, updateAnnouncementDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id', ParseIntPipe) id: number) {\n    return this.announcementService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AnnouncementModule.html":{"url":"modules/AnnouncementModule.html","title":"module - AnnouncementModule","body":"\n                   \n\n\n\n\n    Modules\n    AnnouncementModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AnnouncementModule\n\n\n\ncluster_AnnouncementModule_exports\n\n\n\ncluster_AnnouncementModule_providers\n\n\n\n\nAnnouncementService \n\nAnnouncementService \n\n\n\nAnnouncementModule\n\nAnnouncementModule\n\nAnnouncementService  -->\n\nAnnouncementModule->AnnouncementService \n\n\n\n\n\nAnnouncementService\n\nAnnouncementService\n\nAnnouncementModule -->\n\nAnnouncementService->AnnouncementModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/announcement/announcement.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AnnouncementService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AnnouncementController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AnnouncementService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AnnouncementService } from './announcement.service';\nimport { AnnouncementController } from './announcement.controller';\nimport { Announcement } from './entities/announcement.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Announcement])],\n  controllers: [AnnouncementController],\n  providers: [AnnouncementService],\n  exports: [AnnouncementService],\n})\nexport class AnnouncementModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AnnouncementService.html":{"url":"injectables/AnnouncementService.html","title":"injectable - AnnouncementService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AnnouncementService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/announcement/announcement.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getRecentAnnouncements\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(announcementRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/announcement/announcement.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        announcementRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createAnnouncementDto: CreateAnnouncementDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createAnnouncementDto\n                                            \n                                                            CreateAnnouncementDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getRecentAnnouncements\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRecentAnnouncements(limit: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.service.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    5\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.service.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateAnnouncementDto: UpdateAnnouncementDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.service.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateAnnouncementDto\n                                            \n                                                            UpdateAnnouncementDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Announcement } from './entities/announcement.entity';\nimport { CreateAnnouncementDto } from './dto/create-announcement.dto';\nimport { UpdateAnnouncementDto } from './dto/update-announcement.dto';\n\n@Injectable()\nexport class AnnouncementService {\n  constructor(\n    @InjectRepository(Announcement)\n    private announcementRepository: Repository,\n  ) {}\n\n  async create(\n    createAnnouncementDto: CreateAnnouncementDto,\n  ): Promise {\n    const announcement = this.announcementRepository.create(\n      createAnnouncementDto,\n    );\n    return await this.announcementRepository.save(announcement);\n  }\n\n  async findAll(): Promise {\n    return await this.announcementRepository.find({\n      where: { isActive: true },\n      order: { createdAt: 'DESC' },\n    });\n  }\n\n  async findOne(id: number): Promise {\n    const announcement = await this.announcementRepository.findOne({\n      where: { id, isActive: true },\n    });\n\n    if (!announcement) {\n      throw new NotFoundException(`Announcement with ID ${id} not found`);\n    }\n\n    return announcement;\n  }\n\n  async update(\n    id: number,\n    updateAnnouncementDto: UpdateAnnouncementDto,\n  ): Promise {\n    const announcement = await this.findOne(id);\n\n    Object.assign(announcement, updateAnnouncementDto);\n    return await this.announcementRepository.save(announcement);\n  }\n\n  async remove(id: number): Promise {\n    const announcement = await this.findOne(id);\n    announcement.isActive = false; // Soft delete\n    await this.announcementRepository.save(announcement);\n  }\n\n  async getRecentAnnouncements(limit: number = 5): Promise {\n    return await this.announcementRepository.find({\n      where: { isActive: true },\n      order: { createdAt: 'DESC' },\n      take: limit,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                            \n                                    \n                                healthCheck\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        healthCheck\n                        \n                    \n                \n            \n            \n                \n                        \n                    healthCheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('health')\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     { status: string; }\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n\n  @Get('health')\n  healthCheck() {\n    return { status: 'ok' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAnnouncementModule\n\nAnnouncementModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAnnouncementModule->AppModule\n\n\n\n\n\nAppointmentModule\n\nAppointmentModule\n\nAppModule -->\n\nAppointmentModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nDocumentApplicationsModule\n\nDocumentApplicationsModule\n\nAppModule -->\n\nDocumentApplicationsModule->AppModule\n\n\n\n\n\nQueueModule\n\nQueueModule\n\nAppModule -->\n\nQueueModule->AppModule\n\n\n\n\n\nRolesModule\n\nRolesModule\n\nAppModule -->\n\nRolesModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nAppModule -->\n\nEmailService->AppModule\n\n\n\n\n\nOTPService\n\nOTPService\n\nAppModule -->\n\nOTPService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            EmailService\n                        \n                        \n                            OTPService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AnnouncementModule\n                        \n                        \n                            AppointmentModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            DocumentApplicationsModule\n                        \n                        \n                            QueueModule\n                        \n                        \n                            RolesModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ScheduleModule } from '@nestjs/schedule';\n// import { databaseConfig } from './config/database.config';\nimport { UsersModule } from './users/users.module';\nimport { AuthModule } from './auth/auth.module';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { RolesModule } from './roles/roles.module';\nimport { QueueModule } from './modules/queue/queue.module';\nimport { AppointmentModule } from './modules/appointment/appointment.module';\nimport { AnnouncementModule } from './modules/announcement/announcement.module';\nimport { DocumentApplicationsModule } from './modules/document-applications/document-applications.module';\nimport { OTP } from './entities/otp.entity';\nimport { OTPService } from './services/otp.service';\nimport { EmailService } from './services/email.service';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'mysql',\n        host: configService.get('DB_HOST'),\n        port: configService.get('DB_PORT'),\n        username: configService.get('DB_USERNAME'),\n        password: configService.get('DB_PASSWORD'),\n        database: configService.get('DB_NAME'),\n        entities: [__dirname + '/**/*.entity{.ts,.js}'],\n        synchronize: configService.get('DB_SYNCHRONIZE') === 'true', // Use environment variable\n        logging: configService.get('DB_LOGGING') === 'true', // Use environment variable\n        logger: 'advanced-console',\n        // Aiven MySQL SSL Configuration\n        ssl:\n          configService.get('NODE_ENV') === 'production'\n            ? {\n                rejectUnauthorized:\n                  configService.get('DB_SSL_REJECT_UNAUTHORIZED') === 'true',\n              }\n            : false,\n        // Connection pool settings for production\n        extra: {\n          connectionLimit: 10,\n          acquireTimeout: 60000,\n          timeout: 60000,\n        },\n        // Prevent data loss in development (below code is for development only)\n        // synchronize: true,\n        migrationsRun: false,\n        dropSchema: false,\n\n        // Only for development environments!\n        beforeConnect: async (connection): Promise => {\n          if (configService.get('NODE_ENV') !== 'production') {\n            const conn = connection as {\n              query: (sql: string) => Promise;\n            };\n            // Disable foreign key checks for development\n            await conn.query('SET FOREIGN_KEY_CHECKS=0;');\n            // Set time zone using environment variable\n            await conn.query(\n              `SET time_zone = '${configService.get('DB_TIMEZONE') || '+08:00'}';`,\n            );\n          }\n        },\n        afterConnect: async (connection): Promise => {\n          if (configService.get('NODE_ENV') !== 'production') {\n            await (\n              connection as { query: (sql: string) => Promise }\n            ).query('SET FOREIGN_KEY_CHECKS=1;');\n          }\n        },\n      }),\n    }),\n    UsersModule,\n    AuthModule,\n    RolesModule,\n    QueueModule,\n    AppointmentModule,\n    AnnouncementModule,\n    DocumentApplicationsModule,\n    ScheduleModule.forRoot(),\n    TypeOrmModule.forFeature([OTP]),\n  ],\n  controllers: [AppController],\n  providers: [AppService, OTPService, EmailService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ApplicationNotificationDto.html":{"url":"classes/ApplicationNotificationDto.html","title":"class - ApplicationNotificationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ApplicationNotificationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/otp.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                applicationId\n                            \n                            \n                                    \n                                    \n                                applicationType\n                            \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        applicationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Application ID', example: 'APP-001'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/otp.dto.ts:133\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        applicationType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Type of application', example: 'Birth Certificate'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/otp.dto.ts:148\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Recipient email address', example: 'user@example.com', format: 'email'})@IsEmail({}, {message: 'Please provide a valid email address'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/otp.dto.ts:126\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Application status', example: 'Approved', enum: undefined})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/otp.dto.ts:141\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsString,\n  IsOptional,\n  Length,\n  Matches,\n} from 'class-validator';\n\nexport class SendOtpDto {\n  @ApiProperty({\n    description: 'Email address to send OTP to',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiPropertyOptional({\n    description: 'Purpose of the OTP',\n    example: 'verification',\n    enum: ['verification', 'password_reset'],\n    default: 'verification',\n  })\n  @IsString()\n  @IsOptional()\n  purpose?: string = 'verification';\n}\n\nexport class VerifyOtpDto {\n  @ApiProperty({\n    description: 'Email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    description: '6-digit OTP code',\n    example: '123456',\n    minLength: 6,\n    maxLength: 6,\n    pattern: '^[0-9]{6}$',\n  })\n  @IsString()\n  @Length(6, 6, { message: 'OTP must be exactly 6 digits' })\n  @Matches(/^[0-9]{6}$/, { message: 'OTP must contain only numbers' })\n  otp: string;\n\n  @ApiPropertyOptional({\n    description: 'Purpose of the OTP verification',\n    example: 'verification',\n    enum: ['verification', 'password_reset'],\n    default: 'verification',\n  })\n  @IsString()\n  @IsOptional()\n  purpose?: string = 'verification';\n}\n\nexport class ForgotPasswordDto {\n  @ApiProperty({\n    description: 'Registered email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n}\n\nexport class ResetPasswordDto {\n  @ApiProperty({\n    description: 'Email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    description: '6-digit OTP code received via email',\n    example: '123456',\n    minLength: 6,\n    maxLength: 6,\n    pattern: '^[0-9]{6}$',\n  })\n  @IsString()\n  @Length(6, 6, { message: 'OTP must be exactly 6 digits' })\n  @Matches(/^[0-9]{6}$/, { message: 'OTP must contain only numbers' })\n  otp: string;\n\n  @ApiProperty({\n    description: 'New password (must meet complexity requirements)',\n    example: 'NewSecure123!',\n    minLength: 8,\n    pattern:\n      '^(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)(?=.*[@$!%*?&])[A-Za-z\\\\d@$!%*?&]{8,}$',\n  })\n  @IsString()\n  @Length(8, 100, { message: 'Password must be at least 8 characters long' })\n  @Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/, {\n    message:\n      'Password must contain uppercase, lowercase, numbers, and special characters',\n  })\n  newPassword: string;\n}\n\nexport class TestOtpDto {\n  @ApiProperty({\n    description: 'Email address for testing OTP generation',\n    example: 'test@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n}\n\nexport class ApplicationNotificationDto {\n  @ApiProperty({\n    description: 'Recipient email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    description: 'Application ID',\n    example: 'APP-001',\n  })\n  @IsString()\n  applicationId: string;\n\n  @ApiProperty({\n    description: 'Application status',\n    example: 'Approved',\n    enum: ['Pending', 'Approved', 'Rejected', 'Ready for Pickup'],\n  })\n  @IsString()\n  status: string;\n\n  @ApiProperty({\n    description: 'Type of application',\n    example: 'Birth Certificate',\n  })\n  @IsString()\n  applicationType: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/ApplicationStatusHistory.html":{"url":"entities/ApplicationStatusHistory.html","title":"entity - ApplicationStatusHistory","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  ApplicationStatusHistory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/document-applications/entities/application-status-history.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                application\n                            \n                            \n                                    \n                                applicationId\n                            \n                            \n                                    \n                                changedAt\n                            \n                            \n                                    \n                                changedBy\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                newStatus\n                            \n                            \n                                    \n                                oldStatus\n                            \n                            \n                                    \n                                statusMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        application\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DocumentApplication\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, app => app.statusHistory, {onDelete: 'CASCADE', nullable: false})@JoinColumn({name: 'application_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/application-status-history.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        applicationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'application_id', length: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/application-status-history.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        changedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'changed_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/application-status-history.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        changedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'changed_by', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/application-status-history.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/application-status-history.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        newStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'new_status', length: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/application-status-history.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        oldStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'old_status', length: 50, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/application-status-history.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        statusMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'status_message', type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/application-status-history.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  CreateDateColumn,\n  ManyToOne,\n  JoinColumn,\n  Index,\n} from 'typeorm';\nimport { DocumentApplication } from './document-application.entity';\n\n@Entity('application_status_history')\n@Index(['applicationId'])\n@Index(['changedAt'])\nexport class ApplicationStatusHistory {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ name: 'application_id', length: 50 })\n  applicationId: string;\n\n  @Column({ name: 'old_status', length: 50, nullable: true })\n  oldStatus: string;\n\n  @Column({ name: 'new_status', length: 50 })\n  newStatus: string;\n\n  @Column({ name: 'status_message', type: 'text', nullable: true })\n  statusMessage: string;\n\n  @Column({ name: 'changed_by', nullable: true })\n  changedBy: number;\n\n  @CreateDateColumn({ name: 'changed_at' })\n  changedAt: Date;\n\n  // Relations\n  @ManyToOne(() => DocumentApplication, (app) => app.statusHistory, {\n    onDelete: 'CASCADE',\n    nullable: false,\n  })\n  @JoinColumn({ name: 'application_id' })\n  application: DocumentApplication;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Appointment.html":{"url":"entities/Appointment.html","title":"entity - Appointment","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Appointment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/appointment/entities/appointment.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                address\n                            \n                            \n                                    \n                                appointmentDate\n                            \n                            \n                                    \n                                appointmentNumber\n                            \n                            \n                                    \n                                appointmentTime\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isGuest\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                middleInitial\n                            \n                            \n                                    \n                                phoneNumber\n                            \n                            \n                                    \n                                reasonOfVisit\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    \n                                user\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        appointmentDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'date'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        appointmentNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        appointmentTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isGuest\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        middleInitial\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reasonOfVisit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AppointmentStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: AppointmentStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {nullable: true})@JoinColumn({name: 'userId', foreignKeyConstraintName: 'FK_appointment_user'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:59\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  ManyToOne,\n  JoinColumn,\n} from 'typeorm';\nimport { User } from '../../../users/entities/user.entity';\n\nexport enum AppointmentStatus {\n  PENDING = 'pending',\n  CONFIRMED = 'confirmed',\n  COMPLETED = 'completed',\n  CANCELLED = 'cancelled',\n}\n\n@Entity('appointments')\nexport class Appointment {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true })\n  appointmentNumber: string;\n\n  @Column()\n  firstName: string;\n\n  @Column()\n  lastName: string;\n\n  @Column({ nullable: true })\n  middleInitial: string;\n\n  @Column()\n  address: string;\n\n  @Column()\n  phoneNumber: string;\n\n  @Column()\n  reasonOfVisit: string;\n\n  @Column({ type: 'date' })\n  appointmentDate: string;\n\n  @Column()\n  appointmentTime: string;\n\n  @Column({\n    type: 'enum',\n    enum: AppointmentStatus,\n    default: AppointmentStatus.PENDING,\n  })\n  status: AppointmentStatus;\n\n  @Column({ nullable: true })\n  userId: number;\n\n  @ManyToOne(() => User, { nullable: true })\n  @JoinColumn({\n    name: 'userId',\n    foreignKeyConstraintName: 'FK_appointment_user',\n  })\n  user: User;\n\n  @Column({ default: false })\n  isGuest: boolean;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppointmentController.html":{"url":"controllers/AppointmentController.html","title":"controller - AppointmentController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppointmentController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/appointment/appointment.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                appointments\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                findByAppointmentNumber\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findUserAppointments\n                            \n                            \n                                    \n                                    Async\n                                getAvailableSlots\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getByDate\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getByDateRange\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getStats\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createAppointmentDto: CreateAppointmentDto, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create new appointment'})@ApiResponse({status: 201, description: 'Appointment created successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createAppointmentDto\n                                            \n                                                            CreateAppointmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(includeUser?: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(RolesGuard)@Roles('admin', 'staff', 'super_admin')@ApiOperation({summary: 'Get all appointments (Admin/Staff only)'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                includeUser\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findByAppointmentNumber\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByAppointmentNumber(appointmentNumber: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('by-number/:number')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:135\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                appointmentNumber\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string, includeUser?: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'Get appointment by ID'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:123\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                includeUser\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findUserAppointments\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserAppointments(user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('mine')@ApiOperation({summary: 'Get user appointments'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getAvailableSlots\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAvailableSlots(date: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('available-slots')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:113\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getByDate\n                        \n                    \n                \n            \n            \n                \n                        \n                    getByDate(date: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('by-date')@UseGuards(JwtAuthGuard, RolesGuard)@Roles('admin', 'staff', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getByDateRange\n                        \n                    \n                \n            \n            \n                \n                        \n                    getByDateRange(startDate: string, endDate: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('date-range')@UseGuards(JwtAuthGuard, RolesGuard)@Roles('admin', 'staff', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:96\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                startDate\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                endDate\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('stats')@UseGuards(JwtAuthGuard, RolesGuard)@Roles('admin', 'staff', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:77\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.NO_CONTENT)@ApiOperation({summary: 'Delete appointment'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:188\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateAppointmentDto: UpdateAppointmentDto, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOperation({summary: 'Update appointment'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:142\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateAppointmentDto\n                                            \n                                                            UpdateAppointmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(id: string, status: AppointmentStatus)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/status')@UseGuards(JwtAuthGuard, RolesGuard)@Roles('admin', 'staff', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:169\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                status\n                                            \n                                                            AppointmentStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n  Query,\n  BadRequestException,\n  HttpCode,\n  HttpStatus,\n  Logger,\n} from '@nestjs/common';\nimport { AppointmentService } from './appointment.service';\nimport { CreateAppointmentDto } from './dto/create-appointment.dto';\nimport { UpdateAppointmentDto } from './dto/update-appointment.dto';\nimport { JwtAuthGuard } from '../../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../../auth/guards/roles.guard';\nimport { Roles } from '../../auth/decorators/roles.decorator';\nimport { AppointmentStatus } from './entities/appointment.entity';\nimport { User } from '../../auth/decorators/user.decorator';\nimport { AuthenticatedUser } from '../../auth/jwt.strategy';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n} from '@nestjs/swagger';\n\n@ApiTags('Appointments')\n@Controller('appointments')\n@UseGuards(JwtAuthGuard)\n@ApiBearerAuth('JWT-auth')\nexport class AppointmentController {\n  private readonly logger = new Logger(AppointmentController.name);\n\n  constructor(private readonly appointmentService: AppointmentService) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Create new appointment' })\n  @ApiResponse({ status: 201, description: 'Appointment created successfully' })\n  async create(\n    @Body() createAppointmentDto: CreateAppointmentDto,\n    @User() user: AuthenticatedUser,\n  ) {\n    // Set the userId from the authenticated user\n    createAppointmentDto.userId = user.id;\n\n    this.logger.log(`Creating appointment for user ${user.id}`);\n    return this.appointmentService.create(createAppointmentDto);\n  }\n\n  @Get()\n  @UseGuards(RolesGuard)\n  @Roles('admin', 'staff', 'super_admin')\n  @ApiOperation({ summary: 'Get all appointments (Admin/Staff only)' })\n  async findAll(@Query('includeUser') includeUser?: string) {\n    this.logger.log('Fetching all appointments');\n\n    const relations = includeUser === 'false' ? [] : ['user'];\n\n    return this.appointmentService.findAll({ relations });\n  }\n\n  @Get('mine')\n  @ApiOperation({ summary: 'Get user appointments' })\n  async findUserAppointments(@User() user: AuthenticatedUser) {\n    this.logger.log(`Fetching appointments for user ${user.id}`);\n    return this.appointmentService.findAllByUser(user.id);\n  }\n\n  @Get('stats')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles('admin', 'staff', 'super_admin')\n  async getStats() {\n    this.logger.log('Fetching appointment statistics');\n    return this.appointmentService.getAppointmentsStats();\n  }\n\n  @Get('by-date')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles('admin', 'staff', 'super_admin')\n  async getByDate(@Query('date') date: string) {\n    if (!date) {\n      throw new BadRequestException('Date parameter is required');\n    }\n    this.logger.log(`Fetching appointments for date: ${date}`);\n    return this.appointmentService.getAppointmentsByDate(date);\n  }\n\n  @Get('date-range')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles('admin', 'staff', 'super_admin')\n  async getByDateRange(\n    @Query('start') startDate: string,\n    @Query('end') endDate: string,\n  ) {\n    if (!startDate || !endDate) {\n      throw new BadRequestException(\n        'Start and end date parameters are required',\n      );\n    }\n    this.logger.log(`Fetching appointments from ${startDate} to ${endDate}`);\n    return this.appointmentService.getAppointmentsByDateRange(\n      startDate,\n      endDate,\n    );\n  }\n\n  @Get('available-slots')\n  async getAvailableSlots(@Query('date') date: string) {\n    if (!date) {\n      throw new BadRequestException('Date parameter is required');\n    }\n    this.logger.log(`Fetching available slots for date: ${date}`);\n    return this.appointmentService.getAvailableSlots(date);\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: 'Get appointment by ID' })\n  async findOne(\n    @Param('id') id: string,\n    @Query('includeUser') includeUser?: string,\n  ) {\n    this.logger.log(`Fetching appointment ${id}`);\n\n    const relations = includeUser === 'false' ? [] : ['user'];\n\n    return this.appointmentService.findOne(+id, { relations });\n  }\n\n  @Get('by-number/:number')\n  async findByAppointmentNumber(@Param('number') appointmentNumber: string) {\n    this.logger.log(`Fetching appointment with number: ${appointmentNumber}`);\n    return this.appointmentService.findByAppointmentNumber(appointmentNumber);\n  }\n\n  @Patch(':id')\n  @ApiOperation({ summary: 'Update appointment' })\n  async update(\n    @Param('id') id: string,\n    @Body() updateAppointmentDto: UpdateAppointmentDto,\n    @User() user: AuthenticatedUser,\n  ) {\n    // Get the appointment to check if it belongs to the user\n    const appointment = await this.appointmentService.findOne(+id);\n\n    // If not admin and not the appointment owner, don't allow update\n    if (\n      !user.roles.some((role) =>\n        ['admin', 'staff', 'super_admin'].includes(role.name),\n      ) &&\n      appointment.userId !== user.id\n    ) {\n      throw new BadRequestException(\n        'You do not have permission to update this appointment',\n      );\n    }\n\n    this.logger.log(`Updating appointment with ID: ${id}`);\n    return this.appointmentService.update(+id, updateAppointmentDto);\n  }\n\n  @Patch(':id/status')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles('admin', 'staff', 'super_admin')\n  async updateStatus(\n    @Param('id') id: string,\n    @Body('status') status: AppointmentStatus,\n  ) {\n    if (!Object.values(AppointmentStatus).includes(status)) {\n      throw new BadRequestException(\n        `Invalid status. Must be one of: ${Object.values(AppointmentStatus).join(', ')}`,\n      );\n    }\n\n    this.logger.log(\n      `Updating status for appointment with ID: ${id} to ${status}`,\n    );\n    return this.appointmentService.updateStatus(+id, status);\n  }\n\n  @Delete(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  @ApiOperation({ summary: 'Delete appointment' })\n  async remove(@Param('id') id: string, @User() user: AuthenticatedUser) {\n    // Get the appointment to check if it belongs to the user\n    const appointment = await this.appointmentService.findOne(+id);\n\n    // If not admin and not the appointment owner, don't allow deletion\n    if (\n      !user.roles.some((role) =>\n        ['admin', 'staff', 'super_admin'].includes(role.name),\n      ) &&\n      appointment.userId !== user.id\n    ) {\n      throw new BadRequestException(\n        'You do not have permission to delete this appointment',\n      );\n    }\n\n    this.logger.log(`Deleting appointment with ID: ${id}`);\n    await this.appointmentService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppointmentModule.html":{"url":"modules/AppointmentModule.html","title":"module - AppointmentModule","body":"\n                   \n\n\n\n\n    Modules\n    AppointmentModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppointmentModule\n\n\n\ncluster_AppointmentModule_exports\n\n\n\ncluster_AppointmentModule_providers\n\n\n\n\nAppointmentService \n\nAppointmentService \n\n\n\nAppointmentModule\n\nAppointmentModule\n\nAppointmentService  -->\n\nAppointmentModule->AppointmentService \n\n\n\n\n\nAppointmentService\n\nAppointmentService\n\nAppointmentModule -->\n\nAppointmentService->AppointmentModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/appointment/appointment.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppointmentService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppointmentController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AppointmentService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AppointmentService } from './appointment.service';\nimport { AppointmentController } from './appointment.controller';\nimport { Appointment } from './entities/appointment.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Appointment])],\n  controllers: [AppointmentController],\n  providers: [AppointmentService],\n  exports: [AppointmentService],\n})\nexport class AppointmentModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AppointmentNotificationDto.html":{"url":"classes/AppointmentNotificationDto.html","title":"class - AppointmentNotificationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AppointmentNotificationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/appointment-notification.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                appointmentDetails\n                            \n                            \n                                    \n                                    \n                                    \n                                appointmentNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                reason\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        appointmentDetails\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Appointment details object', type: 'object', additionalProperties: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/appointment-notification.dto.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        appointmentNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Appointment number/ID', example: 'APPT-2024-001'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/appointment-notification.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Email address of the appointment holder', example: 'user@example.com'})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/appointment-notification.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Cancellation reason (for cancellations)', example: 'Cancelled by administrator'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/appointment-notification.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'New appointment status (for status updates)', example: 'confirmed'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/appointment-notification.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"confirmation\" | \"status_update\" | \"cancellation\" | \"reminder\"\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Type of notification to send', enum: undefined, example: 'confirmation'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/appointment-notification.dto.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsString,\n  IsNotEmpty,\n  IsOptional,\n  IsDateString,\n} from 'class-validator';\n\nexport class AppointmentNotificationDto {\n  @ApiProperty({\n    description: 'Email address of the appointment holder',\n    example: 'user@example.com',\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @ApiProperty({\n    description: 'Appointment number/ID',\n    example: 'APPT-2024-001',\n  })\n  @IsString()\n  @IsNotEmpty()\n  appointmentNumber: string;\n\n  @ApiProperty({\n    description: 'Type of notification to send',\n    enum: ['confirmation', 'status_update', 'cancellation', 'reminder'],\n    example: 'confirmation',\n  })\n  @IsString()\n  @IsNotEmpty()\n  type: 'confirmation' | 'status_update' | 'cancellation' | 'reminder';\n\n  @ApiPropertyOptional({\n    description: 'New appointment status (for status updates)',\n    example: 'confirmed',\n  })\n  @IsString()\n  @IsOptional()\n  status?: string;\n\n  @ApiPropertyOptional({\n    description: 'Cancellation reason (for cancellations)',\n    example: 'Cancelled by administrator',\n  })\n  @IsString()\n  @IsOptional()\n  reason?: string;\n\n  @ApiProperty({\n    description: 'Appointment details object',\n    type: 'object',\n    additionalProperties: true,\n  })\n  appointmentDetails: {\n    type: string;\n    date: string;\n    time: string;\n    firstName: string;\n    lastName: string;\n    phoneNumber?: string;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppointmentService.html":{"url":"injectables/AppointmentService.html","title":"injectable - AppointmentService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppointmentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/appointment/appointment.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                checkTimeSlotAvailability\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllByUser\n                            \n                            \n                                    Async\n                                findByAppointmentNumber\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Private\n                                generateAllTimeSlots\n                            \n                            \n                                    Async\n                                getAppointmentsByDate\n                            \n                            \n                                    Async\n                                getAppointmentsByDateRange\n                            \n                            \n                                    Async\n                                getAppointmentsStats\n                            \n                            \n                                    Async\n                                getAvailableSlots\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(appointmentRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/appointment/appointment.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        appointmentRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        checkTimeSlotAvailability\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkTimeSlotAvailability(date: string, time: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:316\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                time\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createAppointmentDto: CreateAppointmentDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createAppointmentDto\n                                            \n                                                            CreateAppointmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(options?: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllByUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllByUser(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:82\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByAppointmentNumber\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByAppointmentNumber(appointmentNumber: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:108\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                appointmentNumber\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number, options?: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:92\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        generateAllTimeSlots\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateAllTimeSlots()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:341\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     string[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAppointmentsByDate\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAppointmentsByDate(date: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:220\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAppointmentsByDateRange\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAppointmentsByDateRange(startDate: string, endDate: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:241\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                startDate\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                endDate\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAppointmentsStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAppointmentsStats()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:264\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAvailableSlots\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAvailableSlots(date: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:185\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:157\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateAppointmentDto: UpdateAppointmentDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:122\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateAppointmentDto\n                                            \n                                                            UpdateAppointmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(id: number, status: AppointmentStatus)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:170\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                status\n                                            \n                                                            AppointmentStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(AppointmentService.name)\n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/appointment.service.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  BadRequestException,\n  Logger,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, Between } from 'typeorm';\nimport { Appointment, AppointmentStatus } from './entities/appointment.entity';\nimport { CreateAppointmentDto } from './dto/create-appointment.dto';\nimport { UpdateAppointmentDto } from './dto/update-appointment.dto';\nimport { format, addDays, parseISO, isValid } from 'date-fns';\n\n@Injectable()\nexport class AppointmentService {\n  private readonly logger = new Logger(AppointmentService.name);\n\n  constructor(\n    @InjectRepository(Appointment)\n    private appointmentRepository: Repository,\n  ) {}\n\n  async create(\n    createAppointmentDto: CreateAppointmentDto,\n  ): Promise {\n    try {\n      // Check date validity\n      const date = parseISO(createAppointmentDto.appointmentDate);\n      if (!isValid(date)) {\n        throw new BadRequestException('Invalid appointment date');\n      }\n\n      // Check if date is a weekend\n      const dayOfWeek = date.getDay();\n      if (dayOfWeek === 0 || dayOfWeek === 6) {\n        throw new BadRequestException('Cannot book appointments on weekends');\n      }\n\n      // Check if date is in the past\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      if (date  {\n    return this.appointmentRepository.find({\n      relations: options?.relations || ['user'],\n      order: {\n        appointmentDate: 'ASC',\n        appointmentTime: 'ASC',\n      },\n    });\n  }\n\n  async findAllByUser(userId: number): Promise {\n    return this.appointmentRepository.find({\n      where: { userId },\n      order: {\n        appointmentDate: 'DESC',\n        appointmentTime: 'ASC',\n      },\n    });\n  }\n\n  async findOne(\n    id: number,\n    options?: { relations?: string[] },\n  ): Promise {\n    const appointment = await this.appointmentRepository.findOne({\n      where: { id },\n      relations: options?.relations || ['user'],\n    });\n\n    if (!appointment) {\n      throw new NotFoundException(`Appointment with ID ${id} not found`);\n    }\n\n    return appointment;\n  }\n\n  async findByAppointmentNumber(\n    appointmentNumber: string,\n  ): Promise {\n    const appointment = await this.appointmentRepository.findOne({\n      where: { appointmentNumber },\n    });\n\n    if (!appointment) {\n      throw new NotFoundException(`Appointment ${appointmentNumber} not found`);\n    }\n\n    return appointment;\n  }\n\n  async update(\n    id: number,\n    updateAppointmentDto: UpdateAppointmentDto,\n  ): Promise {\n    try {\n      const appointment = await this.findOne(id);\n\n      // If changing date or time, check availability\n      if (\n        updateAppointmentDto.appointmentDate ||\n        updateAppointmentDto.appointmentTime\n      ) {\n        const newDate =\n          updateAppointmentDto.appointmentDate || appointment.appointmentDate;\n        const newTime =\n          updateAppointmentDto.appointmentTime || appointment.appointmentTime;\n\n        if (\n          newDate !== appointment.appointmentDate ||\n          newTime !== appointment.appointmentTime\n        ) {\n          await this.checkTimeSlotAvailability(newDate, newTime);\n        }\n      }\n\n      // Update the appointment\n      const updated = Object.assign(appointment, updateAppointmentDto);\n      this.logger.log(`Updated appointment ${id}:`, updated);\n      return this.appointmentRepository.save(updated);\n    } catch (error) {\n      this.logger.error(`Error updating appointment ${id}:`, error);\n      throw error;\n    }\n  }\n\n  async remove(id: number): Promise {\n    try {\n      const result = await this.appointmentRepository.delete(id);\n      if (result.affected === 0) {\n        throw new NotFoundException(`Appointment with ID ${id} not found`);\n      }\n      this.logger.log(`Deleted appointment ${id}`);\n    } catch (error) {\n      this.logger.error(`Error deleting appointment ${id}:`, error);\n      throw error;\n    }\n  }\n\n  async updateStatus(\n    id: number,\n    status: AppointmentStatus,\n  ): Promise {\n    try {\n      const appointment = await this.findOne(id);\n      appointment.status = status;\n      this.logger.log(`Updated status for appointment ${id} to ${status}`);\n      return this.appointmentRepository.save(appointment);\n    } catch (error) {\n      this.logger.error(`Error updating status for appointment ${id}:`, error);\n      throw error;\n    }\n  }\n\n  async getAvailableSlots(date: string): Promise {\n    try {\n      // Parse the date\n      const parsedDate = parseISO(date);\n      if (!isValid(parsedDate)) {\n        throw new BadRequestException('Invalid date format');\n      }\n\n      // Get all appointments for the specified date\n      const existingAppointments = await this.appointmentRepository.find({\n        where: {\n          appointmentDate: date,\n          status: AppointmentStatus.PENDING || AppointmentStatus.CONFIRMED,\n        },\n        select: ['appointmentTime'],\n      });\n\n      const bookedSlots = existingAppointments.map(\n        (app) => app.appointmentTime,\n      );\n\n      // Generate all time slots (8:00 AM - 5:00 PM with 30min intervals)\n      const allTimeSlots = this.generateAllTimeSlots();\n\n      // Return only available slots\n      return allTimeSlots.filter((slot) => !bookedSlots.includes(slot));\n    } catch (error) {\n      this.logger.error(\n        `Error getting available slots for date ${date}:`,\n        error,\n      );\n      throw error;\n    }\n  }\n\n  async getAppointmentsByDate(date: string): Promise {\n    try {\n      const parsedDate = parseISO(date);\n      if (!isValid(parsedDate)) {\n        throw new BadRequestException('Invalid date format');\n      }\n\n      return this.appointmentRepository.find({\n        where: {\n          appointmentDate: date,\n        },\n        order: {\n          appointmentTime: 'ASC',\n        },\n      });\n    } catch (error) {\n      this.logger.error(`Error getting appointments for date ${date}:`, error);\n      throw error;\n    }\n  }\n\n  async getAppointmentsByDateRange(\n    startDate: string,\n    endDate: string,\n  ): Promise {\n    try {\n      return this.appointmentRepository.find({\n        where: {\n          appointmentDate: Between(startDate, endDate),\n        },\n        order: {\n          appointmentDate: 'ASC',\n          appointmentTime: 'ASC',\n        },\n      });\n    } catch (error) {\n      this.logger.error(\n        `Error getting appointments in range ${startDate} to ${endDate}:`,\n        error,\n      );\n      throw error;\n    }\n  }\n\n  async getAppointmentsStats() {\n    try {\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n\n      const tomorrow = addDays(today, 1);\n      tomorrow.setHours(0, 0, 0, 0);\n\n      // Get counts for different statuses\n      const [\n        pendingCount,\n        confirmedCount,\n        completedCount,\n        cancelledCount,\n        totalCount,\n      ] = await Promise.all([\n        this.appointmentRepository.count({\n          where: { status: AppointmentStatus.PENDING },\n        }),\n        this.appointmentRepository.count({\n          where: { status: AppointmentStatus.CONFIRMED },\n        }),\n        this.appointmentRepository.count({\n          where: { status: AppointmentStatus.COMPLETED },\n        }),\n        this.appointmentRepository.count({\n          where: { status: AppointmentStatus.CANCELLED },\n        }),\n        this.appointmentRepository.count(),\n      ]);\n\n      // Get today's appointments\n      const todayAppointments = await this.appointmentRepository.count({\n        where: {\n          appointmentDate: format(today, 'yyyy-MM-dd'),\n        },\n      });\n\n      return {\n        pending: pendingCount,\n        confirmed: confirmedCount,\n        completed: completedCount,\n        cancelled: cancelledCount,\n        total: totalCount,\n        today: todayAppointments,\n      };\n    } catch (error) {\n      this.logger.error('Error getting appointment stats:', error);\n      throw error;\n    }\n  }\n\n  private async checkTimeSlotAvailability(\n    date: string,\n    time: string,\n  ): Promise {\n    try {\n      // Check if time slot is already booked\n      const existingAppointment = await this.appointmentRepository.findOne({\n        where: {\n          appointmentDate: date,\n          appointmentTime: time,\n          status: AppointmentStatus.PENDING || AppointmentStatus.CONFIRMED,\n        },\n      });\n\n      if (existingAppointment) {\n        throw new BadRequestException('This time slot is already booked');\n      }\n    } catch (error) {\n      this.logger.error(\n        `Error checking time slot availability for ${date} at ${time}:`,\n        error,\n      );\n      throw error;\n    }\n  }\n  private generateAllTimeSlots(): string[] {\n    const slots: string[] = [];\n    let hour = 8;\n    let minute = 0;\n\n    while (hour \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nRolesModule\n\nRolesModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nRolesModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nEmailService \n\nEmailService \n\nEmailService  -->\n\nAuthModule->EmailService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nOTPService \n\nOTPService \n\nOTPService  -->\n\nAuthModule->OTPService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nAuthModule -->\n\nEmailService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nOTPService\n\nOTPService\n\nAuthModule -->\n\nOTPService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            EmailService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            OTPService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RolesModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            EmailService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            OTPService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { User } from '../users/entities/user.entity';\nimport { JwtStrategy } from './jwt.strategy';\nimport { RolesModule } from '../roles/roles.module';\nimport { OTP } from '../entities/otp.entity';\nimport { OTPService } from '../services/otp.service';\nimport { EmailService } from '../services/email.service';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([User, OTP]),\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        secret: configService.get('JWT_SECRET'),\n        signOptions: { expiresIn: '24h' },\n      }),\n    }),\n    RolesModule,\n  ],\n  providers: [AuthService, JwtStrategy, OTPService, EmailService],\n  controllers: [AuthController],\n  exports: [AuthService, JwtStrategy, PassportModule, OTPService, EmailService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthenticatedUser.html":{"url":"interfaces/AuthenticatedUser.html","title":"interface - AuthenticatedUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AuthenticatedUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            roles\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        roles:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\n\ninterface JwtPayload {\n  sub: number;\n  email: string;\n  roles?: string[];\n}\n\n// Strategy for validating JWT tokens in NestJS\nexport interface AuthenticatedUser {\n  id: number;\n  email: string;\n  roles: Array;\n}\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private configService: ConfigService) {\n    const secretKey = configService.get('JWT_SECRET');\n\n    if (!secretKey) {\n      throw new Error('JWT_SECRET is not defined in environment variables');\n    }\n\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: secretKey,\n    });\n  }\n\n  validate(payload: JwtPayload): AuthenticatedUser {\n    // Validation for the payload\n    if (!payload || payload.sub === undefined || isNaN(Number(payload.sub))) {\n      throw new UnauthorizedException('Invalid token payload');\n    }\n\n    const userId = Number(payload.sub);\n    const email = String(payload.email || '');\n    const roles = Array.isArray(payload.roles)\n      ? payload.roles.map((role) => ({ name: role }))\n      : [];\n\n    return {\n      id: userId,\n      email,\n      roles,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Counter.html":{"url":"entities/Counter.html","title":"entity - Counter","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Counter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/counter/entities/counter.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                currentQueue\n                            \n                            \n                                    \n                                currentQueueId\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        currentQueue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Queue | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, queue => queue.counter, {nullable: true})@JoinColumn({name: 'current_queue_id', foreignKeyConstraintName: 'fk_current_queue'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        currentQueueId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'current_queue_id', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CounterStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: CounterStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:28\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  OneToOne,\n  JoinColumn,\n} from 'typeorm';\nimport { Queue } from '../../queue/entities/queue.entity';\n\nexport enum CounterStatus {\n  ACTIVE = 'active',\n  INACTIVE = 'inactive',\n}\n\n@Entity('counters')\nexport class Counter {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  name: string;\n\n  @Column({\n    type: 'enum',\n    enum: CounterStatus,\n    default: CounterStatus.ACTIVE,\n  })\n  status: CounterStatus;\n\n  @Column({ name: 'current_queue_id', nullable: true })\n  currentQueueId: number | null;\n\n  @OneToOne(() => Queue, (queue) => queue.counter, { nullable: true })\n  @JoinColumn({\n    name: 'current_queue_id',\n    foreignKeyConstraintName: 'fk_current_queue',\n  })\n  currentQueue: Queue | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAnnouncementDto.html":{"url":"classes/CreateAnnouncementDto.html","title":"class - CreateAnnouncementDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAnnouncementDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/announcement/dto/create-announcement.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                createdBy\n                            \n                            \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                image\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                isActive\n                            \n                            \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        createdBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/dto/create-announcement.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/dto/create-announcement.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/dto/create-announcement.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/dto/create-announcement.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/dto/create-announcement.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsOptional, IsBoolean } from 'class-validator';\n\nexport class CreateAnnouncementDto {\n  @IsString()\n  @IsNotEmpty()\n  title: string;\n\n  @IsString()\n  @IsNotEmpty()\n  description: string;\n\n  @IsOptional()\n  @IsString()\n  image?: string;\n\n  @IsOptional()\n  @IsString()\n  createdBy?: string;\n\n  @IsOptional()\n  @IsBoolean()\n  isActive?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAppointmentDto.html":{"url":"classes/CreateAppointmentDto.html","title":"class - CreateAppointmentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAppointmentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/appointment/dto/create-appointment.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                address\n                            \n                            \n                                    \n                                    \n                                appointmentDate\n                            \n                            \n                                    \n                                    \n                                appointmentTime\n                            \n                            \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    Optional\n                                isGuest\n                            \n                            \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                middleInitial\n                            \n                            \n                                    \n                                    \n                                phoneNumber\n                            \n                            \n                                    \n                                    \n                                reasonOfVisit\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                            \n                                    \n                                    Optional\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        appointmentDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        appointmentTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        isGuest\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        middleInitial\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        reasonOfVisit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AppointmentStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEnum(AppointmentStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:48\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsNotEmpty,\n  IsString,\n  IsOptional,\n  IsEnum,\n  IsDateString,\n} from 'class-validator';\nimport { AppointmentStatus } from '../entities/appointment.entity';\n\nexport class CreateAppointmentDto {\n  @IsNotEmpty()\n  @IsString()\n  firstName: string;\n\n  @IsNotEmpty()\n  @IsString()\n  lastName: string;\n\n  @IsOptional()\n  @IsString()\n  middleInitial: string;\n\n  @IsNotEmpty()\n  @IsString()\n  address: string;\n\n  @IsNotEmpty()\n  @IsString()\n  phoneNumber: string;\n\n  @IsNotEmpty()\n  @IsString()\n  reasonOfVisit: string;\n\n  @IsNotEmpty()\n  @IsDateString()\n  appointmentDate: string;\n\n  @IsNotEmpty()\n  @IsString()\n  appointmentTime: string;\n\n  @IsOptional()\n  @IsEnum(AppointmentStatus)\n  status?: AppointmentStatus;\n\n  @IsOptional()\n  userId?: number;\n\n  @IsOptional()\n  isGuest?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateDocumentApplicationDto.html":{"url":"classes/CreateDocumentApplicationDto.html","title":"class - CreateDocumentApplicationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateDocumentApplicationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/document-applications/dto/create-document-application.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                applicationSubtype\n                            \n                            \n                                    \n                                    \n                                applicationType\n                            \n                            \n                                    \n                                    \n                                formData\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                statusMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        applicationSubtype\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Application subtype (optional)', example: 'Copy of Birth Certificate', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/dto/create-document-application.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        applicationType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ApplicationType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: ApplicationType, description: 'Type of document application', example: undefined})@IsEnum(ApplicationType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/dto/create-document-application.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        formData\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Form data containing all application details', example: undefined})@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/dto/create-document-application.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        statusMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Optional status message', example: 'Initial application submission', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/dto/create-document-application.dto.ts:42\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsOptional, IsObject, IsString } from 'class-validator';\nimport { ApplicationType } from '../entities/document-application.entity';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateDocumentApplicationDto {\n  @ApiProperty({\n    enum: ApplicationType,\n    description: 'Type of document application',\n    example: ApplicationType.BIRTH_CERTIFICATE,\n  })\n  @IsEnum(ApplicationType)\n  applicationType: ApplicationType;\n\n  @ApiProperty({\n    description: 'Application subtype (optional)',\n    example: 'Copy of Birth Certificate',\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  applicationSubtype?: string;\n\n  @ApiProperty({\n    description: 'Form data containing all application details',\n    example: {\n      firstName: 'Juan',\n      lastName: 'Dela Cruz',\n      birthDate: '1990-01-01',\n      birthPlace: 'Manila',\n    },\n  })\n  @IsObject()\n  formData: Record;\n\n  @ApiProperty({\n    description: 'Optional status message',\n    example: 'Initial application submission',\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  statusMessage?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateQueueDto.html":{"url":"classes/CreateQueueDto.html","title":"class - CreateQueueDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateQueueDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/dto/create-queue.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                    \n                                    \n                                appointmentType\n                            \n                            \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                isGuest\n                            \n                            \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                middleInitial\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                phoneNumber\n                            \n                            \n                                    \n                                    \n                                reasonOfVisit\n                            \n                            \n                                    \n                                    Optional\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        appointmentType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        isGuest\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        middleInitial\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        reasonOfVisit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsOptional, IsNotEmpty, IsBoolean } from 'class-validator';\n\nexport class CreateQueueDto {\n  @IsOptional()\n  userId?: number | string;\n\n  @IsString()\n  @IsNotEmpty()\n  firstName: string;\n\n  @IsString()\n  @IsNotEmpty()\n  lastName: string;\n\n  @IsString()\n  @IsOptional()\n  middleInitial?: string;\n\n  @IsString()\n  @IsOptional()\n  address?: string;\n\n  @IsString()\n  @IsOptional()\n  phoneNumber?: string;\n\n  @IsString()\n  @IsNotEmpty()\n  reasonOfVisit: string;\n\n  @IsString()\n  @IsNotEmpty()\n  appointmentType: string;\n\n  @IsBoolean()\n  @IsOptional()\n  isGuest?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                contactNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                defaultRoleId\n                            \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                middleName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                nameExtension\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                roleIds\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        contactNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: '+639123456789', description: 'Contact number'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        defaultRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 4, description: 'Default role ID for the user'})@IsOptional()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:102\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'john.doe@example.com', description: 'User email address'})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'John', description: 'User first name'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Doe', description: 'User last name'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'Miguel', description: 'User middle name (optional)'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'John Miguel Doe Jr.', description: 'Full name (auto-generated if not provided)'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        nameExtension\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'Jr.', description: 'Name extension (e.g., Jr., Sr., III)'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'password123', description: 'User password (minimum 6 characters)', minLength: 6})@IsString()@MinLength(6)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        roleIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: undefined, description: 'Array of role IDs to assign to the user', type: undefined})@IsOptional()@IsArray()@IsNumber({}, {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'johndoe', description: 'Username (optional, will use email if not provided)'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsString,\n  IsOptional,\n  MinLength,\n  IsArray,\n  IsNumber,\n  IsNotEmpty,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @ApiProperty({\n    example: 'john.doe@example.com',\n    description: 'User email address',\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @ApiPropertyOptional({\n    example: 'johndoe',\n    description: 'Username (optional, will use email if not provided)',\n  })\n  @IsOptional()\n  @IsString()\n  username?: string;\n\n  @ApiProperty({\n    example: 'password123',\n    description: 'User password (minimum 6 characters)',\n    minLength: 6,\n  })\n  @IsString()\n  @MinLength(6)\n  password: string;\n\n  @ApiProperty({\n    example: 'John',\n    description: 'User first name',\n  })\n  @IsString()\n  @IsNotEmpty()\n  firstName: string;\n\n  @ApiPropertyOptional({\n    example: 'Miguel',\n    description: 'User middle name (optional)',\n  })\n  @IsOptional()\n  @IsString()\n  middleName?: string;\n\n  @ApiProperty({\n    example: 'Doe',\n    description: 'User last name',\n  })\n  @IsString()\n  @IsNotEmpty()\n  lastName: string;\n\n  @ApiPropertyOptional({\n    example: 'John Miguel Doe Jr.',\n    description: 'Full name (auto-generated if not provided)',\n  })\n  @IsString()\n  @IsOptional()\n  name?: string;\n\n  @ApiPropertyOptional({\n    example: 'Jr.',\n    description: 'Name extension (e.g., Jr., Sr., III)',\n  })\n  @IsOptional()\n  @IsString()\n  nameExtension?: string;\n\n  @ApiPropertyOptional({\n    example: '+639123456789',\n    description: 'Contact number',\n  })\n  @IsOptional()\n  @IsString()\n  contactNumber?: string;\n\n  @ApiPropertyOptional({\n    example: [2, 3],\n    description: 'Array of role IDs to assign to the user',\n    type: [Number],\n  })\n  @IsOptional()\n  @IsArray()\n  @IsNumber({}, { each: true })\n  roleIds?: number[];\n\n  @ApiPropertyOptional({\n    example: 4,\n    description: 'Default role ID for the user',\n  })\n  @IsOptional()\n  @IsNumber()\n  defaultRoleId?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DocumentApplication.html":{"url":"entities/DocumentApplication.html","title":"entity - DocumentApplication","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DocumentApplication\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/document-applications/entities/document-application.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                applicationSubtype\n                            \n                            \n                                    \n                                applicationType\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                files\n                            \n                            \n                                    \n                                formData\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastModifiedBy\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                statusHistory\n                            \n                            \n                                    \n                                statusMessage\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    \n                                user\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        applicationSubtype\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'application_subtype', length: 100, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        applicationType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ApplicationType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: ApplicationType, name: 'application_type'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        files\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DocumentFile[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, file => file.application, {cascade: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        formData\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'form_data', type: 'json'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn({length: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastModifiedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'last_modified_by', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ApplicationStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: ApplicationStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        statusHistory\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ApplicationStatusHistory[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, history => history.application, {cascade: false, eager: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        statusMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'status_message', type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({name: 'updated_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {nullable: true})@JoinColumn({name: 'user_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'user_id', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:44\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryColumn,\n  Column,\n  CreateDateColumn,\n  UpdateDateColumn,\n  OneToMany,\n  ManyToOne,\n  JoinColumn,\n  Index,\n} from 'typeorm';\nimport { User } from '../../../users/entities/user.entity';\nimport { DocumentFile } from './document-file.entity';\nimport { ApplicationStatusHistory } from './application-status-history.entity';\n\nexport enum ApplicationType {\n  BIRTH_CERTIFICATE = 'Birth Certificate',\n  MARRIAGE_CERTIFICATE = 'Marriage Certificate',\n  MARRIAGE_LICENSE = 'Marriage License',\n  DEATH_CERTIFICATE = 'Death Certificate',\n  BUSINESS_PERMIT = 'Business Permit',\n}\n\nexport enum ApplicationStatus {\n  PENDING = 'Pending',\n  PROCESSING = 'Processing',\n  APPROVED = 'Approved',\n  REJECTED = 'Rejected',\n  DECLINE = 'Decline',\n  READY_FOR_PICKUP = 'Ready for Pickup',\n  REQUIRES_ADDITIONAL_INFO = 'Requires Additional Info',\n}\n\n@Entity('document_applications')\n@Index(['userId'])\n@Index(['applicationType'])\n@Index(['status'])\n@Index(['createdAt'])\nexport class DocumentApplication {\n  @PrimaryColumn({ length: 50 })\n  id: string;\n\n  @Column({ name: 'user_id', nullable: true })\n  userId: number;\n\n  @Column({\n    type: 'enum',\n    enum: ApplicationType,\n    name: 'application_type',\n  })\n  applicationType: ApplicationType;\n\n  @Column({ name: 'application_subtype', length: 100, nullable: true })\n  applicationSubtype: string;\n\n  @Column({\n    type: 'enum',\n    enum: ApplicationStatus,\n    default: ApplicationStatus.PENDING,\n  })\n  status: ApplicationStatus;\n\n  @Column({ name: 'status_message', type: 'text', nullable: true })\n  statusMessage: string;\n\n  @Column({ name: 'form_data', type: 'json' })\n  formData: Record;\n\n  @CreateDateColumn({ name: 'created_at' })\n  createdAt: Date;\n\n  @UpdateDateColumn({ name: 'updated_at' })\n  updatedAt: Date;\n\n  @Column({ name: 'last_modified_by', nullable: true })\n  lastModifiedBy: number;\n\n  // Relations\n  @ManyToOne(() => User, { nullable: true })\n  @JoinColumn({ name: 'user_id' })\n  user: User;\n\n  @OneToMany(() => DocumentFile, (file) => file.application, { cascade: true })\n  files: DocumentFile[];\n\n  @OneToMany(() => ApplicationStatusHistory, (history) => history.application, {\n    cascade: false,\n    eager: false,\n  })\n  statusHistory: ApplicationStatusHistory[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/DocumentApplicationsController.html":{"url":"controllers/DocumentApplicationsController.html","title":"controller - DocumentApplicationsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  DocumentApplicationsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/document-applications/document-applications.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                document-applications\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getAllApplicationFiles\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getAllApplications\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getApplicationFiles\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getFileDownloadUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getStats\n                            \n                            \n                                    \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                updateStatus\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                uploadDocument\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createDto: CreateDocumentApplicationDto, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create new document application'})@ApiResponse({status: 201, description: 'Application created successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createDto\n                                            \n                                                            CreateDocumentApplicationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(status?: string, includeUser?: string, user?: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Get user applications'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:99\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                includeUser\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string, user: AuthenticatedUser, includeUser?: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'Get specific application'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:164\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                includeUser\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getAllApplicationFiles\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllApplicationFiles(id: string, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/files/all')@ApiOperation({summary: 'Get all application files (privileged users only)'})@ApiResponse({status: 200, description: 'All files retrieved successfully'})@ApiResponse({status: 404, description: 'Application not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:146\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getAllApplications\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllApplications()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('admin/all')@Roles('admin', 'staff', 'super_admin')@UseGuards(RolesGuard)@ApiOperation({summary: 'Get all applications (Privileged users only)'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:261\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getApplicationFiles\n                        \n                    \n                \n            \n            \n                \n                        \n                    getApplicationFiles(id: string, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/files')@ApiOperation({summary: 'Get application files (latest per category)'})@ApiResponse({status: 200, description: 'Files retrieved successfully'})@ApiResponse({status: 404, description: 'Application not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:120\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getFileDownloadUrl\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFileDownloadUrl(fileId: string, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('files/:fileId/download')@ApiOperation({summary: 'Get file download URL'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:183\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fileId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('admin/stats')@Roles('admin', 'super_admin')@UseGuards(RolesGuard)@ApiOperation({summary: 'Get application statistics (Admin/Super Admin only)'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:271\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise>\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({summary: 'Delete application'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:246\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateDto: UpdateDocumentApplicationDto, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOperation({summary: 'Update application'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:201\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateDto\n                                            \n                                                            UpdateDocumentApplicationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(id: string, statusDto: literal type, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/status')@Roles('admin', 'staff', 'super_admin')@UseGuards(RolesGuard)@ApiOperation({summary: 'Update application status (Privileged users only)'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:231\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                statusDto\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        uploadDocument\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadDocument(id: string, file: Express.Multer.File, documentCategory: string, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':id/files')@UseInterceptors(undefined)@ApiConsumes('multipart/form-data')@ApiOperation({summary: 'Upload document file'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                documentCategory\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseInterceptors,\n  UploadedFile,\n  Query,\n  UseGuards,\n  //Request, // Uncomment if you need to use Request object\n  BadRequestException,\n  Logger,\n} from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { DocumentApplicationsService } from './document-applications.service';\nimport { CreateDocumentApplicationDto } from './dto/create-document-application.dto';\nimport { UpdateDocumentApplicationDto } from './dto/update-document-application.dto';\nimport { JwtAuthGuard } from '../../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../../auth/guards/roles.guard';\nimport { Roles } from '../../auth/decorators/roles.decorator';\nimport { User } from '../../auth/decorators/user.decorator';\nimport { AuthenticatedUser } from '../../auth/jwt.strategy';\nimport { ApplicationStatus } from './entities/document-application.entity';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n  ApiConsumes,\n} from '@nestjs/swagger';\n\n@ApiTags('Document Applications')\n@Controller('document-applications')\n@UseGuards(JwtAuthGuard)\n@ApiBearerAuth('JWT-auth')\nexport class DocumentApplicationsController {\n  private readonly logger = new Logger(DocumentApplicationsController.name);\n\n  constructor(\n    private readonly documentApplicationsService: DocumentApplicationsService,\n  ) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Create new document application' })\n  @ApiResponse({ status: 201, description: 'Application created successfully' })\n  async create(\n    @Body() createDto: CreateDocumentApplicationDto,\n    @User() user: AuthenticatedUser,\n  ) {\n    return this.documentApplicationsService.create(createDto, user.id);\n  }\n\n  @Post(':id/files')\n  @UseInterceptors(\n    FileInterceptor('file', {\n      limits: {\n        fileSize: 10 * 1024 * 1024, // 10MB limit\n      },\n      fileFilter: (req, file, callback) => {\n        if (!file.mimetype.match(/\\/(jpg|jpeg|png|pdf)$/)) {\n          return callback(\n            new BadRequestException(\n              'Only JPEG, PNG, and PDF files are allowed',\n            ),\n            false,\n          );\n        }\n        callback(null, true);\n      },\n    }),\n  )\n  @ApiConsumes('multipart/form-data')\n  @ApiOperation({ summary: 'Upload document file' })\n  async uploadDocument(\n    @Param('id') id: string,\n    @UploadedFile() file: Express.Multer.File,\n    @Body('documentCategory') documentCategory: string,\n    @User() user: AuthenticatedUser,\n  ) {\n    this.logger.log('Received document category:', documentCategory); // Debug log\n\n    if (!documentCategory) {\n      throw new BadRequestException('Document category is required');\n    }\n\n    return this.documentApplicationsService.uploadFile(\n      id,\n      file,\n      documentCategory,\n      user.id,\n    );\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Get user applications' })\n  async findAll(\n    @Query('status') status?: string,\n    @Query('includeUser') includeUser?: string,\n    @User() user?: AuthenticatedUser,\n  ) {\n    const userId = user?.roles.some((role) =>\n      ['admin', 'super_admin', 'staff'].includes(role.name),\n    )\n      ? undefined\n      : user?.id;\n\n    // Include user relationship when requested (for admin notifications)\n    const relations = includeUser === 'true' ? ['user'] : [];\n\n    return this.documentApplicationsService.findAll(userId, { relations });\n  }\n\n  @Get(':id/files')\n  @ApiOperation({ summary: 'Get application files (latest per category)' })\n  @ApiResponse({ status: 200, description: 'Files retrieved successfully' })\n  @ApiResponse({ status: 404, description: 'Application not found' })\n  async getApplicationFiles(\n    @Param('id') id: string,\n    @User() user: AuthenticatedUser,\n  ) {\n    const userId = user.roles.some((role) =>\n      ['admin', 'super_admin', 'staff'].includes(role.name),\n    )\n      ? undefined\n      : user.id;\n\n    this.logger.log(\n      `Getting files for application ${id}, user: ${user.email}, isPrivileged: ${!userId}`,\n    );\n\n    return await this.documentApplicationsService.getApplicationFiles(\n      id,\n      userId,\n    );\n  }\n\n  @Get(':id/files/all')\n  @ApiOperation({\n    summary: 'Get all application files (privileged users only)',\n  })\n  @ApiResponse({ status: 200, description: 'All files retrieved successfully' })\n  @ApiResponse({ status: 404, description: 'Application not found' })\n  async getAllApplicationFiles(\n    @Param('id') id: string,\n    @User() user: AuthenticatedUser,\n  ) {\n    const userId = user.roles.some((role) =>\n      ['admin', 'super_admin', 'staff'].includes(role.name),\n    )\n      ? undefined\n      : user.id;\n\n    return await this.documentApplicationsService.getAllApplicationFiles(\n      id,\n      userId,\n    );\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: 'Get specific application' })\n  async findOne(\n    @Param('id') id: string,\n    @User() user: AuthenticatedUser,\n    @Query('includeUser') includeUser?: string,\n  ) {\n    const userId = user.roles.some((role) =>\n      ['admin', 'super_admin', 'staff'].includes(role.name),\n    )\n      ? undefined\n      : user.id;\n\n    // Include user relationship when requested (for admin notifications)\n    const relations = includeUser === 'true' ? ['user'] : [];\n\n    return this.documentApplicationsService.findOne(id, userId, { relations });\n  }\n\n  @Get('files/:fileId/download')\n  @ApiOperation({ summary: 'Get file download URL' })\n  async getFileDownloadUrl(\n    @Param('fileId') fileId: string,\n    @User() user: AuthenticatedUser,\n  ) {\n    const userId = user.roles.some((role) =>\n      ['admin', 'super_admin', 'staff'].includes(role.name),\n    )\n      ? undefined\n      : user.id;\n    const url = await this.documentApplicationsService.getFileDownloadUrl(\n      +fileId,\n      userId,\n    );\n    return { url };\n  }\n\n  @Patch(':id')\n  @ApiOperation({ summary: 'Update application' })\n  async update(\n    @Param('id') id: string,\n    @Body() updateDto: UpdateDocumentApplicationDto,\n    @User() user: AuthenticatedUser,\n  ) {\n    const userId = user.roles.some((role) =>\n      ['admin', 'super_admin', 'staff'].includes(role.name),\n    )\n      ? undefined\n      : user.id;\n    const adminId = user.roles.some((role) =>\n      ['admin', 'super_admin', 'staff'].includes(role.name),\n    )\n      ? user.id\n      : undefined;\n\n    return this.documentApplicationsService.update(\n      id,\n      updateDto,\n      userId,\n      adminId,\n    );\n  }\n\n  @Patch(':id/status')\n  @Roles('admin', 'staff', 'super_admin')\n  @UseGuards(RolesGuard)\n  @ApiOperation({\n    summary: 'Update application status (Privileged users only)',\n  })\n  async updateStatus(\n    @Param('id') id: string,\n    @Body() statusDto: { status: string; statusMessage?: string },\n    @User() user: AuthenticatedUser,\n  ) {\n    return this.documentApplicationsService.updateStatus(\n      id,\n      statusDto.status as ApplicationStatus,\n      statusDto.statusMessage,\n      user.id,\n    );\n  }\n\n  @Delete(':id')\n  @ApiOperation({ summary: 'Delete application' })\n  async remove(@Param('id') id: string, @User() user: AuthenticatedUser) {\n    const userId = user.roles.some((role) =>\n      ['admin', 'super_admin', 'staff'].includes(role.name),\n    )\n      ? undefined\n      : user.id;\n    await this.documentApplicationsService.remove(id, userId);\n    return { message: 'Application deleted successfully' };\n  }\n\n  // Admin endpoints\n  @Get('admin/all')\n  @Roles('admin', 'staff', 'super_admin')\n  @UseGuards(RolesGuard)\n  @ApiOperation({ summary: 'Get all applications (Privileged users only)' })\n  async getAllApplications() {\n    return this.documentApplicationsService.findAll();\n  }\n\n  @Get('admin/stats')\n  @Roles('admin', 'super_admin')\n  @UseGuards(RolesGuard)\n  @ApiOperation({\n    summary: 'Get application statistics (Admin/Super Admin only)',\n  })\n  async getStats(): Promise\n  > {\n    return this.documentApplicationsService.getApplicationStats();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DocumentApplicationsModule.html":{"url":"modules/DocumentApplicationsModule.html","title":"module - DocumentApplicationsModule","body":"\n                   \n\n\n\n\n    Modules\n    DocumentApplicationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DocumentApplicationsModule\n\n\n\ncluster_DocumentApplicationsModule_exports\n\n\n\ncluster_DocumentApplicationsModule_providers\n\n\n\n\nDocumentApplicationsService \n\nDocumentApplicationsService \n\n\n\nMinioService \n\nMinioService \n\n\n\nDocumentApplicationsModule\n\nDocumentApplicationsModule\n\nDocumentApplicationsService  -->\n\nDocumentApplicationsModule->DocumentApplicationsService \n\n\n\nMinioService  -->\n\nDocumentApplicationsModule->MinioService \n\n\n\n\n\nDocumentApplicationsService\n\nDocumentApplicationsService\n\nDocumentApplicationsModule -->\n\nDocumentApplicationsService->DocumentApplicationsModule\n\n\n\n\n\nMinioService\n\nMinioService\n\nDocumentApplicationsModule -->\n\nMinioService->DocumentApplicationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/document-applications/document-applications.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DocumentApplicationsService\n                        \n                        \n                            MinioService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            DocumentApplicationsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            DocumentApplicationsService\n                        \n                        \n                            MinioService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { DocumentApplicationsService } from './document-applications.service';\nimport { DocumentApplicationsController } from './document-applications.controller';\nimport { DocumentApplication } from './entities/document-application.entity';\nimport { DocumentFile } from './entities/document-file.entity';\nimport { ApplicationStatusHistory } from './entities/application-status-history.entity';\nimport { MinioService } from './services/minio.service';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      DocumentApplication,\n      DocumentFile,\n      ApplicationStatusHistory,\n    ]),\n  ],\n  controllers: [DocumentApplicationsController],\n  providers: [DocumentApplicationsService, MinioService],\n  exports: [DocumentApplicationsService, MinioService],\n})\nexport class DocumentApplicationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DocumentFile.html":{"url":"entities/DocumentFile.html","title":"entity - DocumentFile","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DocumentFile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/document-applications/entities/document-file.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                application\n                            \n                            \n                                    \n                                applicationId\n                            \n                            \n                                    \n                                documentCategory\n                            \n                            \n                                    \n                                fileName\n                            \n                            \n                                    \n                                fileSize\n                            \n                            \n                                    \n                                fileType\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                minioObjectName\n                            \n                            \n                                    \n                                uploadedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        application\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DocumentApplication\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, app => app.files, {onDelete: 'CASCADE'})@JoinColumn({name: 'application_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        applicationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'application_id', length: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        documentCategory\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'document_category', length: 250, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        fileName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'file_name', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        fileSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'file_size', type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        fileType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'file_type', length: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        minioObjectName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'minio_object_name', length: 500})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        uploadedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'uploaded_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:38\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  CreateDateColumn,\n  ManyToOne,\n  JoinColumn,\n  Index,\n} from 'typeorm';\nimport { DocumentApplication } from './document-application.entity';\n\n@Entity('document_files')\n@Index(['applicationId'])\n@Index(['documentCategory'])\nexport class DocumentFile {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ name: 'application_id', length: 50 })\n  applicationId: string;\n\n  @Column({ name: 'file_name', length: 255 })\n  fileName: string;\n\n  @Column({ name: 'file_type', length: 100 })\n  fileType: string;\n\n  @Column({ name: 'file_size', type: 'bigint' })\n  fileSize: number;\n\n  @Column({ name: 'minio_object_name', length: 500 })\n  minioObjectName: string;\n\n  @Column({ name: 'document_category', length: 250, nullable: true })\n  documentCategory: string;\n\n  @CreateDateColumn({ name: 'uploaded_at' })\n  uploadedAt: Date;\n\n  // Relations\n  @ManyToOne(() => DocumentApplication, (app) => app.files, {\n    onDelete: 'CASCADE',\n  })\n  @JoinColumn({ name: 'application_id' })\n  application: DocumentApplication;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FindAllOptions.html":{"url":"interfaces/FindAllOptions.html","title":"interface - FindAllOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FindAllOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            limit\n                                        \n                                \n                                \n                                        \n                                            page\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            role\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            search\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        limit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        limit:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        page\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        page:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        search\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        search:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  BadRequestException,\n  ConflictException,\n  Logger,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, Like, In } from 'typeorm';\nimport { User } from './entities/user.entity';\nimport { AdminUpdateUserDto } from '../auth/dto/update-user.dto'; // Import from auth module\nimport { RolesService } from '../roles/roles.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport * as bcrypt from 'bcrypt';\n\ninterface FindAllOptions {\n  page: number;\n  limit: number;\n  search?: string;\n  role?: string;\n}\n\nexport interface UserStats {\n  totalUsers: number;\n  activeUsers: number;\n  inactiveUsers: number;\n  usersByRole: { roleName: string; count: number }[];\n  recentUsers: Omit[];\n}\n\n@Injectable()\nexport class UsersService {\n  private readonly logger = new Logger(UsersService.name);\n\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n    private rolesService: RolesService,\n  ) {}\n\n  async findAll(options: FindAllOptions) {\n    const { page, limit, search, role } = options;\n    const skip = (page - 1) * limit;\n\n    const queryBuilder = this.usersRepository\n      .createQueryBuilder('user')\n      .leftJoinAndSelect('user.defaultRole', 'defaultRole')\n      .leftJoinAndSelect('user.roles', 'roles');\n\n    // Apply search filter\n    if (search) {\n      queryBuilder.where(\n        '(user.firstName LIKE :search OR user.lastName LIKE :search OR user.email LIKE :search OR user.username LIKE :search)',\n        { search: `%${search}%` },\n      );\n    }\n\n    // Apply role filter\n    if (role) {\n      queryBuilder.andWhere('roles.name = :role', { role });\n    }\n\n    queryBuilder.orderBy('user.createdAt', 'DESC').skip(skip).take(limit);\n\n    const [users, total] = await queryBuilder.getManyAndCount();\n\n    // Remove passwords from response\n    const sanitizedUsers = users.map((user) => {\n      const { password, ...userWithoutPassword } = user;\n      return {\n        ...userWithoutPassword,\n        roles: user.roles.map((role) => role.name),\n        defaultRole: user.defaultRole?.name || 'citizen',\n      };\n    });\n\n    return {\n      users: sanitizedUsers,\n      total,\n      page,\n      limit,\n      totalPages: Math.ceil(total / limit),\n    };\n  }\n\n  async findOne(id: number): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id },\n      relations: ['defaultRole', 'roles'],\n    });\n\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    // Remove password and format response\n\n    const { password, ...userWithoutPassword } = user;\n    return {\n      ...userWithoutPassword,\n      roles: user.roles.map((role) => role.name),\n      defaultRole: user.defaultRole?.name || 'citizen',\n    };\n  }\n\n  // Admin-only update method\n  async adminUpdate(\n    id: number,\n    updateUserDto: AdminUpdateUserDto,\n  ): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id },\n      relations: ['roles'],\n    });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    const {\n      email,\n\n      username,\n\n      firstName,\n\n      middleName,\n\n      lastName,\n\n      nameExtension,\n\n      contactNumber,\n\n      roleIds,\n\n      defaultRoleId,\n    } = updateUserDto;\n\n    // Check email uniqueness if being updated\n    if (email && email !== user.email) {\n      const existingUser = await this.usersRepository.findOne({\n        where: { email },\n      });\n      if (existingUser) {\n        throw new ConflictException('Email already exists');\n      }\n    }\n\n    // Check username uniqueness if being updated\n    if (username && username !== user.username) {\n      const existingUser = await this.usersRepository.findOne({\n        where: { username },\n      });\n      if (existingUser) {\n        throw new ConflictException('Username already exists');\n      }\n    }\n\n    // Update fields\n    const updateData: any = {};\n\n    if (email) updateData.email = email;\n    if (username) updateData.username = username;\n    if (firstName) updateData.firstName = firstName;\n    if (lastName) updateData.lastName = lastName;\n    if (contactNumber) updateData.contactNumber = contactNumber;\n\n    // Handle optional fields\n    if (middleName !== undefined) updateData.middleName = middleName;\n    if (nameExtension !== undefined) updateData.nameExtension = nameExtension;\n    if (defaultRoleId !== undefined) updateData.defaultRoleId = defaultRoleId;\n\n    // Update name if name components changed\n    if (\n      firstName ||\n      middleName !== undefined ||\n      lastName ||\n      nameExtension !== undefined\n    ) {\n      const newFirstName = firstName || user.firstName;\n      const newMiddleName =\n        middleName !== undefined ? middleName : user.middleName;\n      const newLastName = lastName || user.lastName;\n      const newNameExtension =\n        nameExtension !== undefined ? nameExtension : user.nameExtension;\n\n      updateData.name = `${newFirstName} ${newMiddleName ? newMiddleName + ' ' : ''}${newLastName}${newNameExtension ? ' ' + newNameExtension : ''}`;\n    }\n\n    await this.usersRepository.update(id, updateData);\n\n    // Update roles if provided\n    if (roleIds !== undefined) {\n      // Remove existing roles and assign new ones\n      await this.usersRepository\n        .createQueryBuilder()\n        .relation(User, 'roles')\n        .of(id)\n        .remove(user.roles);\n\n      if (roleIds.length > 0) {\n        await this.rolesService.assignRolesToUser(id, roleIds);\n      }\n    }\n\n    return this.findOne(id);\n  }\n\n  async remove(id: number): Promise {\n    const user = await this.usersRepository.findOne({ where: { id } });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    await this.usersRepository.delete(id);\n    return { message: `User with ID ${id} has been deleted` };\n  }\n\n  async updateStatus(id: number, isActive: boolean): Promise {\n    const user = await this.usersRepository.findOne({ where: { id } });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    await this.usersRepository.update(id, { isActive });\n    return this.findOne(id);\n  }\n\n  async getStats(): Promise {\n    const totalUsers = await this.usersRepository.count();\n    const activeUsers = await this.usersRepository.count({\n      where: { isActive: true },\n    });\n    const inactiveUsers = totalUsers - activeUsers;\n\n    // Get user count by role\n    const roleStats = await this.usersRepository\n      .createQueryBuilder('user')\n      .leftJoin('user.roles', 'role')\n      .select('role.name', 'roleName')\n      .addSelect('COUNT(user.id)', 'count')\n      .groupBy('role.name')\n      .getRawMany();\n\n    const usersByRole = roleStats.map((stat) => ({\n      roleName: stat.roleName || 'No Role',\n\n      count: parseInt(stat.count),\n    }));\n\n    // Get recent users (last 10)\n    const recentUsers = await this.usersRepository.find({\n      order: { createdAt: 'DESC' },\n      take: 10,\n      relations: ['defaultRole', 'roles'],\n    });\n\n    const sanitizedRecentUsers = recentUsers.map((user) => {\n      const { password, ...userWithoutPassword } = user;\n      return userWithoutPassword as Omit;\n    });\n\n    return {\n      totalUsers,\n      activeUsers,\n      inactiveUsers,\n      usersByRole,\n      recentUsers: sanitizedRecentUsers,\n    };\n  }\n\n  async findByEmail(email: string): Promise {\n    return this.usersRepository.findOne({\n      where: { email },\n      relations: ['defaultRole', 'roles'],\n    });\n  }\n\n  async findByUsername(username: string): Promise {\n    return this.usersRepository.findOne({\n      where: { username },\n      relations: ['defaultRole', 'roles'],\n    });\n  }\n\n  async create(createUserDto: CreateUserDto) {\n    const {\n      email,\n      username,\n      password,\n      firstName,\n      middleName,\n      lastName,\n      nameExtension,\n      contactNumber,\n      name,\n      roleIds,\n      defaultRoleId,\n    } = createUserDto;\n\n    // Generate full name if not provided\n    const fullName =\n      name ||\n      `${firstName} ${middleName ? middleName + ' ' : ''}${lastName}${nameExtension ? ' ' + nameExtension : ''}`;\n\n    // Check if user already exists\n    const existingUserByEmail = await this.usersRepository.findOne({\n      where: { email },\n    });\n    if (existingUserByEmail) {\n      throw new ConflictException('Email already exists');\n    }\n\n    if (username) {\n      const existingUserByUsername = await this.usersRepository.findOne({\n        where: { username },\n      });\n      if (existingUserByUsername) {\n        throw new ConflictException('Username already exists');\n      }\n    }\n\n    try {\n      // Create user\n      const user = this.usersRepository.create({\n        email,\n        username,\n        password, // Should be hashed by the caller\n        firstName,\n        middleName,\n        lastName,\n        nameExtension,\n        contactNumber,\n        name: fullName,\n        defaultRoleId: defaultRoleId || 4, // Default to citizen\n      });\n\n      await this.usersRepository.save(user);\n\n      // Assign roles if provided\n      if (roleIds && roleIds.length > 0) {\n        await this.rolesService.assignRolesToUser(user.id, roleIds);\n      }\n\n      return user;\n    } catch (error) {\n      this.logger.error('Error creating user:', error);\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ForgotPasswordDto.html":{"url":"classes/ForgotPasswordDto.html","title":"class - ForgotPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ForgotPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/otp.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Registered email address', example: 'user@example.com', format: 'email'})@IsEmail({}, {message: 'Please provide a valid email address'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/otp.dto.ts:69\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsString,\n  IsOptional,\n  Length,\n  Matches,\n} from 'class-validator';\n\nexport class SendOtpDto {\n  @ApiProperty({\n    description: 'Email address to send OTP to',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiPropertyOptional({\n    description: 'Purpose of the OTP',\n    example: 'verification',\n    enum: ['verification', 'password_reset'],\n    default: 'verification',\n  })\n  @IsString()\n  @IsOptional()\n  purpose?: string = 'verification';\n}\n\nexport class VerifyOtpDto {\n  @ApiProperty({\n    description: 'Email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    description: '6-digit OTP code',\n    example: '123456',\n    minLength: 6,\n    maxLength: 6,\n    pattern: '^[0-9]{6}$',\n  })\n  @IsString()\n  @Length(6, 6, { message: 'OTP must be exactly 6 digits' })\n  @Matches(/^[0-9]{6}$/, { message: 'OTP must contain only numbers' })\n  otp: string;\n\n  @ApiPropertyOptional({\n    description: 'Purpose of the OTP verification',\n    example: 'verification',\n    enum: ['verification', 'password_reset'],\n    default: 'verification',\n  })\n  @IsString()\n  @IsOptional()\n  purpose?: string = 'verification';\n}\n\nexport class ForgotPasswordDto {\n  @ApiProperty({\n    description: 'Registered email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n}\n\nexport class ResetPasswordDto {\n  @ApiProperty({\n    description: 'Email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    description: '6-digit OTP code received via email',\n    example: '123456',\n    minLength: 6,\n    maxLength: 6,\n    pattern: '^[0-9]{6}$',\n  })\n  @IsString()\n  @Length(6, 6, { message: 'OTP must be exactly 6 digits' })\n  @Matches(/^[0-9]{6}$/, { message: 'OTP must contain only numbers' })\n  otp: string;\n\n  @ApiProperty({\n    description: 'New password (must meet complexity requirements)',\n    example: 'NewSecure123!',\n    minLength: 8,\n    pattern:\n      '^(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)(?=.*[@$!%*?&])[A-Za-z\\\\d@$!%*?&]{8,}$',\n  })\n  @IsString()\n  @Length(8, 100, { message: 'Password must be at least 8 characters long' })\n  @Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/, {\n    message:\n      'Password must contain uppercase, lowercase, numbers, and special characters',\n  })\n  newPassword: string;\n}\n\nexport class TestOtpDto {\n  @ApiProperty({\n    description: 'Email address for testing OTP generation',\n    example: 'test@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n}\n\nexport class ApplicationNotificationDto {\n  @ApiProperty({\n    description: 'Recipient email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    description: 'Application ID',\n    example: 'APP-001',\n  })\n  @IsString()\n  applicationId: string;\n\n  @ApiProperty({\n    description: 'Application status',\n    example: 'Approved',\n    enum: ['Pending', 'Approved', 'Rejected', 'Ready for Pickup'],\n  })\n  @IsString()\n  status: string;\n\n  @ApiProperty({\n    description: 'Type of application',\n    example: 'Birth Certificate',\n  })\n  @IsString()\n  applicationType: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            roles\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        roles:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\n\ninterface JwtPayload {\n  sub: number;\n  email: string;\n  roles?: string[];\n}\n\n// Strategy for validating JWT tokens in NestJS\nexport interface AuthenticatedUser {\n  id: number;\n  email: string;\n  roles: Array;\n}\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private configService: ConfigService) {\n    const secretKey = configService.get('JWT_SECRET');\n\n    if (!secretKey) {\n      throw new Error('JWT_SECRET is not defined in environment variables');\n    }\n\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: secretKey,\n    });\n  }\n\n  validate(payload: JwtPayload): AuthenticatedUser {\n    // Validation for the payload\n    if (!payload || payload.sub === undefined || isNaN(Number(payload.sub))) {\n      throw new UnauthorizedException('Invalid token payload');\n    }\n\n    const userId = Number(payload.sub);\n    const email = String(payload.email || '');\n    const roles = Array.isArray(payload.roles)\n      ? payload.roles.map((role) => ({ name: role }))\n      : [];\n\n    return {\n      id: userId,\n      email,\n      roles,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(payload: JwtPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            JwtPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         AuthenticatedUser\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\n\ninterface JwtPayload {\n  sub: number;\n  email: string;\n  roles?: string[];\n}\n\n// Strategy for validating JWT tokens in NestJS\nexport interface AuthenticatedUser {\n  id: number;\n  email: string;\n  roles: Array;\n}\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private configService: ConfigService) {\n    const secretKey = configService.get('JWT_SECRET');\n\n    if (!secretKey) {\n      throw new Error('JWT_SECRET is not defined in environment variables');\n    }\n\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: secretKey,\n    });\n  }\n\n  validate(payload: JwtPayload): AuthenticatedUser {\n    // Validation for the payload\n    if (!payload || payload.sub === undefined || isNaN(Number(payload.sub))) {\n      throw new UnauthorizedException('Invalid token payload');\n    }\n\n    const userId = Number(payload.sub);\n    const email = String(payload.email || '');\n    const roles = Array.isArray(payload.roles)\n      ? payload.roles.map((role) => ({ name: role }))\n      : [];\n\n    return {\n      id: userId,\n      email,\n      roles,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LockoutData.html":{"url":"interfaces/LockoutData.html","title":"interface - LockoutData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LockoutData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            attempts\n                                        \n                                \n                                \n                                        \n                                            lastAttempt\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            lockedUntil\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        attempts\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        attempts:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastAttempt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastAttempt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lockedUntil\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lockedUntil:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Injectable,\n  UnauthorizedException,\n  ConflictException,\n  BadRequestException,\n  Logger,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from '../users/entities/user.entity';\nimport * as bcrypt from 'bcrypt';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { RolesService } from '../roles/roles.service';\nimport { UpdateUserDto, AdminUpdateUserDto } from './dto/update-user.dto';\n\ninterface LockoutData {\n  attempts: number;\n  lastAttempt: Date;\n  lockedUntil?: Date;\n}\n\n@Injectable()\nexport class AuthService {\n  private readonly logger = new Logger(AuthService.name);\n  // ✅ ADD: Get bcrypt rounds from environment\n  private readonly bcryptRounds = parseInt(\n    process.env.BCRYPT_ROUNDS || '12',\n    10,\n  );\n\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n    private jwtService: JwtService,\n    private rolesService: RolesService,\n  ) {\n    // ✅ ADD: Log bcrypt configuration for security audit\n    this.logger.log(`🔐 Bcrypt rounds configured: ${this.bcryptRounds}`);\n  }\n\n  // ✅ ADD: Centralized password hashing method\n  private async hashPassword(password: string): Promise {\n    const salt = await bcrypt.genSalt(this.bcryptRounds);\n    return bcrypt.hash(password, salt);\n  }\n\n  private readonly failedAttempts = new Map();\n\n  async validateUser(loginDto: LoginDto): Promise {\n    const user = await this.usersRepository.findOne({\n      where: [\n        { email: loginDto.emailOrUsername },\n        { username: loginDto.emailOrUsername },\n      ],\n    });\n    if (user && (await bcrypt.compare(loginDto.password, user.password))) {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { password: __password, ...result } = user;\n      return result;\n    }\n    return null;\n  }\n\n  async getAccountLockout(identifier: string) {\n    const key = identifier.toLowerCase();\n    return this.failedAttempts.get(key) || null;\n  }\n\n  async recordFailedLoginAttempt(identifier: string) {\n    const key = identifier.toLowerCase();\n    const current = this.failedAttempts.get(key) || {\n      attempts: 0,\n      lastAttempt: new Date(),\n    };\n\n    current.attempts++;\n    current.lastAttempt = new Date();\n\n    // Lock account after 5 attempts for 3 minutes (was 15 minutes)\n    if (current.attempts >= 5) {\n      current.lockedUntil = new Date(Date.now() + 3 * 60 * 1000); // 3 minutes\n      this.logger.warn(\n        `Account locked for ${identifier} after ${current.attempts} failed attempts`,\n      );\n    }\n\n    this.failedAttempts.set(key, current);\n\n    return {\n      attempts: current.attempts,\n      isLocked: current.attempts >= 5,\n      lockedUntil: current.lockedUntil,\n      timeRemaining: current.lockedUntil\n        ? Math.ceil((current.lockedUntil.getTime() - Date.now()) / 1000)\n        : 0,\n    };\n  }\n\n  async clearAccountLockout(identifier: string) {\n    const key = identifier.toLowerCase();\n    this.failedAttempts.delete(key);\n    this.logger.log(`Account lockout cleared for ${identifier}`);\n    return { success: true };\n  }\n\n  async login(loginDto: LoginDto) {\n    const identifier = loginDto.emailOrUsername.toLowerCase();\n\n    // Check if account is locked\n    const lockoutData = await this.getAccountLockout(identifier);\n    if (lockoutData?.lockedUntil && lockoutData.lockedUntil > new Date()) {\n      const timeRemaining = Math.ceil(\n        (lockoutData.lockedUntil.getTime() - Date.now()) / 1000,\n      );\n      const minutesRemaining = Math.ceil(timeRemaining / 60);\n      throw new UnauthorizedException(\n        `Account locked due to multiple failed attempts. Try again in ${minutesRemaining} minutes or use \"Forgot Password\".`,\n      );\n    }\n\n    this.logger.log('Login attempt with:', loginDto);\n\n    try {\n      const user = await this.usersRepository.findOne({\n        where: [\n          { email: loginDto.emailOrUsername },\n          { username: loginDto.emailOrUsername },\n        ],\n        relations: ['defaultRole'],\n      });\n\n      this.logger.log('User found:', user ? 'Yes' : 'No');\n\n      if (!user) {\n        throw new UnauthorizedException('Invalid email or password');\n      }\n\n      // Debug password check\n      this.logger.log('Stored password hash:', user.password);\n      this.logger.log('Comparing with:', loginDto.password);\n\n      const isPasswordValid = await bcrypt.compare(\n        loginDto.password,\n        user.password,\n      );\n      this.logger.log('Password valid:', isPasswordValid);\n\n      if (!isPasswordValid) {\n        throw new UnauthorizedException('Invalid email or password');\n      }\n\n      // Get user roles\n      const roles = await this.rolesService.getUserRoles(user.id);\n      const roleNames = roles.map((role) => role.name);\n\n      const payload = {\n        sub: user.id,\n        email: user.email,\n        roles: roleNames,\n      };\n\n      const token = this.jwtService.sign(payload);\n      this.logger.log('Generated token:', token ? 'Success' : 'Failed');\n\n      // Remove password from response\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { password: __password, ...userWithoutPassword } = user;\n\n      return {\n        access_token: token,\n        user: {\n          ...userWithoutPassword,\n          roles: roleNames,\n          defaultRole: user.defaultRole?.name || 'citizen',\n        },\n      };\n    } catch (error) {\n      this.logger.error('Login error:', error);\n      throw error;\n    }\n  }\n\n  async register(registerDto: RegisterDto) {\n    const {\n      email,\n      username,\n      password,\n      firstName,\n      middleName,\n      lastName,\n      nameExtension,\n      contactNumber,\n    } = registerDto;\n\n    // Generate full name\n    const name = `${firstName} ${middleName ? middleName + ' ' : ''}${lastName}${nameExtension ? ' ' + nameExtension : ''}`;\n\n    // Validate email format\n    if (!this.isValidEmail(email)) {\n      throw new BadRequestException('Invalid email format');\n    }\n\n    // Check if user exists by email\n    const existingUserByEmail = await this.usersRepository.findOne({\n      where: { email },\n    });\n    if (existingUserByEmail) {\n      throw new ConflictException('Email already exists');\n    }\n\n    // Check if username is taken\n    if (username) {\n      const existingUserByUsername = await this.usersRepository.findOne({\n        where: { username },\n      });\n      if (existingUserByUsername) {\n        throw new ConflictException('Username already exists');\n      }\n    }\n\n    // Validate password strength\n    const passwordValidation = this.validatePasswordStrength(password);\n    if (!passwordValidation.isValid) {\n      throw new BadRequestException(passwordValidation.message);\n    }\n\n    // ✅ UPDATED: Use centralized hashing method\n    const hashedPassword = await this.hashPassword(password);\n\n    try {\n      // Create new user with all fields\n      const user = this.usersRepository.create({\n        email,\n        username,\n        password: hashedPassword,\n        firstName,\n        middleName,\n        lastName,\n        nameExtension,\n        contactNumber,\n        name,\n      });\n\n      await this.usersRepository.save(user);\n\n      // Add citizen role to the user\n      try {\n        const citizenRole = await this.rolesService.findByName('citizen');\n        await this.rolesService.assignRolesToUser(user.id, [citizenRole.id]);\n\n        // Set default role\n        user.defaultRoleId = citizenRole.id;\n        await this.usersRepository.save(user);\n      } catch (error) {\n        this.logger.error('Error assigning citizen role:', error);\n        // Rollback: Delete the user to maintain a consistent state\n        await this.usersRepository.delete(user.id);\n        throw new ConflictException(\n          'Failed to assign citizen role. Registration rolled back.',\n        );\n      }\n\n      // Generate JWT token\n      const payload = { sub: user.id, email: user.email, roles: ['citizen'] };\n\n      // Remove password from response\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { password: __password, ...userWithoutPassword } = user;\n\n      return {\n        access_token: this.jwtService.sign(payload),\n        user: {\n          ...userWithoutPassword,\n          roles: ['citizen'],\n          defaultRole: 'citizen',\n        },\n      };\n    } catch (error) {\n      this.logger.error('Registration error:', error);\n      throw error;\n    }\n  }\n\n  private isValidEmail(email: string): boolean {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  }\n\n  async getProfile(userId: number) {\n    // Validation for userId\n    if (!userId || isNaN(userId)) {\n      throw new UnauthorizedException('Invalid user ID');\n    }\n\n    const user = await this.usersRepository.findOne({\n      where: { id: userId },\n      relations: ['defaultRole'],\n    });\n    if (!user) {\n      throw new UnauthorizedException('User not found');\n    }\n\n    // Get user roles\n    const roles = await this.rolesService.getUserRoles(userId);\n    const roleNames = roles.map((role) => role.name);\n\n    // Remove password from response\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { password: __password, ...result } = user;\n    return {\n      ...result,\n      roles: roleNames,\n      defaultRole: user.defaultRole?.name || 'citizen',\n    };\n  }\n\n  async updateUserInfo(userId: number, updateUserDto: UpdateUserDto) {\n    try {\n      // First get the existing user\n      const user = await this.usersRepository.findOne({\n        where: { id: userId },\n      });\n\n      if (!user) {\n        throw new UnauthorizedException('User not found');\n      }\n\n      // Check if email is being updated and not already taken\n      if (updateUserDto.email && updateUserDto.email !== user.email) {\n        // Validate email format\n        if (!this.isValidEmail(updateUserDto.email)) {\n          throw new BadRequestException('Invalid email format');\n        }\n\n        const existingUserByEmail = await this.usersRepository.findOne({\n          where: { email: updateUserDto.email },\n        });\n\n        if (existingUserByEmail && existingUserByEmail.id !== userId) {\n          throw new ConflictException('Email already exists');\n        }\n      }\n\n      // Check if username is being updated and not already taken\n      if (updateUserDto.username && updateUserDto.username !== user.username) {\n        const existingUserByUsername = await this.usersRepository.findOne({\n          where: { username: updateUserDto.username },\n        });\n\n        if (existingUserByUsername && existingUserByUsername.id !== userId) {\n          throw new ConflictException('Username already exists');\n        }\n      }\n\n      // Handle password change if provided\n      if (updateUserDto.password) {\n        // Validate password strength\n        const passwordValidation = this.validatePasswordStrength(\n          updateUserDto.password,\n        );\n        if (!passwordValidation.isValid) {\n          throw new BadRequestException(passwordValidation.message);\n        }\n\n        // ✅ UPDATED: Use centralized hashing method\n        const hashedPassword = await this.hashPassword(updateUserDto.password);\n        updateUserDto.password = hashedPassword;\n      } else {\n        // Remove password from DTO if not being updated\n        delete updateUserDto.password;\n      }\n\n      // Update name if name parts are changed\n      let shouldUpdateName = false;\n      const nameComponents = {\n        firstName: updateUserDto.firstName || user.firstName,\n        middleName:\n          updateUserDto.middleName !== undefined\n            ? updateUserDto.middleName\n            : user.middleName,\n        lastName: updateUserDto.lastName || user.lastName,\n        nameExtension:\n          updateUserDto.nameExtension !== undefined\n            ? updateUserDto.nameExtension\n            : user.nameExtension,\n      };\n\n      if (\n        updateUserDto.firstName ||\n        updateUserDto.middleName !== undefined ||\n        updateUserDto.lastName ||\n        updateUserDto.nameExtension !== undefined\n      ) {\n        shouldUpdateName = true;\n      }\n\n      // Generate full name if any name component changed\n      if (shouldUpdateName) {\n        const fullName = `${nameComponents.firstName} ${\n          nameComponents.middleName ? nameComponents.middleName + ' ' : ''\n        }${nameComponents.lastName}${\n          nameComponents.nameExtension ? ' ' + nameComponents.nameExtension : ''\n        }`;\n        updateUserDto['name'] = fullName;\n      }\n\n      try {\n        // 🔥 CRITICAL FIX: Remove role-related fields before updating User entity\n        const { roleIds, defaultRoleId, ...userUpdateFields } =\n          updateUserDto as any;\n\n        // Update user with only valid User entity fields\n        await this.usersRepository.update(userId, userUpdateFields);\n\n        // Get updated user with relations\n        const updatedUser = await this.usersRepository.findOne({\n          where: { id: userId },\n          relations: ['defaultRole'],\n        });\n\n        if (!updatedUser) {\n          throw new BadRequestException('Failed to retrieve updated user');\n        }\n\n        // Get user roles\n        const roles = await this.rolesService.getUserRoles(userId);\n        const roleNames = roles.map((role) => role.name);\n\n        // Remove password from response\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { password: __password, ...result } = updatedUser;\n\n        return {\n          ...result,\n          roles: roleNames,\n          defaultRole: updatedUser.defaultRole?.name || 'citizen',\n        };\n      } catch (error: unknown) {\n        this.logger.error('User update database error:', error);\n        if (\n          typeof error === 'object' &&\n          error !== null &&\n          'code' in error &&\n          error.code === 'ER_DUP_ENTRY'\n        ) {\n          throw new ConflictException('Email or username already exists');\n        }\n        throw new BadRequestException(\n          'Failed to update user information in database',\n        );\n      }\n    } catch (error) {\n      this.logger.error('User update error:', error);\n      // Re-throw specific errors\n      if (\n        error instanceof UnauthorizedException ||\n        error instanceof BadRequestException ||\n        error instanceof ConflictException\n      ) {\n        throw error;\n      }\n      // For any other unexpected error\n      throw new BadRequestException('Failed to update user information');\n    }\n  }\n  async adminUpdateUser(\n    adminId: number,\n    targetUserId: number,\n    updateUserDto: AdminUpdateUserDto,\n  ) {\n    this.logger.log(\n      `Admin ${adminId} attempting to update user ${targetUserId}`,\n      updateUserDto,\n    );\n\n    try {\n      // Verify the admin has proper permissions\n      const admin = await this.usersRepository.findOne({\n        where: { id: adminId },\n      });\n\n      if (!admin) {\n        throw new UnauthorizedException('Admin not found');\n      }\n\n      // Get admin roles\n      const adminRoles = await this.rolesService.getUserRoles(adminId);\n      const adminRoleNames = adminRoles.map((role) => role.name);\n\n      // Check if the user has admin or super_admin role\n      const isAuthorized = adminRoleNames.some(\n        (role) => role === 'admin' || role === 'super_admin',\n      );\n\n      if (!isAuthorized) {\n        throw new UnauthorizedException('Insufficient permissions');\n      }\n\n      // Check if target user exists\n      const targetUser = await this.usersRepository.findOne({\n        where: { id: targetUserId },\n      });\n\n      if (!targetUser) {\n        throw new BadRequestException(`User with ID ${targetUserId} not found`);\n      }\n\n      // First perform the basic user update\n      // We'll catch any errors here to handle them appropriately\n      try {\n        await this.updateUserInfo(targetUserId, updateUserDto);\n      } catch (err) {\n        this.logger.error('Error during basic user update:', err);\n        throw err; // Re-throw to be caught by outer try-catch\n      }\n\n      // Handle role updates if provided\n      if (updateUserDto.roleIds && updateUserDto.roleIds.length > 0) {\n        try {\n          // Verify all roles exist before assigning\n          for (const roleId of updateUserDto.roleIds) {\n            try {\n              await this.rolesService.findOne(roleId);\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            } catch (_) {\n              throw new BadRequestException(`Role with ID ${roleId} not found`);\n            }\n          }\n\n          // Assign roles\n          await this.rolesService.assignRolesToUser(\n            targetUserId,\n            updateUserDto.roleIds,\n          );\n          this.logger.log(\n            `Assigned roles ${updateUserDto.roleIds.join(', ')} to user ${targetUserId}`,\n          );\n        } catch (error) {\n          this.logger.error('Error assigning roles:', error);\n          throw new BadRequestException(\n            error instanceof Error ? error.message : 'Failed to assign roles',\n          );\n        }\n      }\n\n      // Update default role if provided\n      if (updateUserDto.defaultRoleId) {\n        try {\n          // Verify the role exists\n          try {\n            await this.rolesService.findOne(updateUserDto.defaultRoleId);\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          } catch (_) {\n            throw new BadRequestException(\n              `Default role with ID ${updateUserDto.defaultRoleId} not found`,\n            );\n          }\n\n          // Verify user has this role assigned or will have it assigned\n          const userRoles = await this.rolesService.getUserRoles(targetUserId);\n          const hasRoleAssigned = userRoles.some(\n            (role) => role.id === updateUserDto.defaultRoleId,\n          );\n\n          const willBeAssigned =\n            updateUserDto.roleIds &&\n            updateUserDto.roleIds.includes(updateUserDto.defaultRoleId);\n\n          if (!hasRoleAssigned && !willBeAssigned) {\n            throw new BadRequestException(\n              'Cannot set default role to a role the user does not have',\n            );\n          }\n\n          // Update the default role\n          await this.usersRepository.update(targetUserId, {\n            defaultRoleId: updateUserDto.defaultRoleId,\n          });\n          this.logger.log(\n            `Updated default role to ${updateUserDto.defaultRoleId} for user ${targetUserId}`,\n          );\n        } catch (error) {\n          this.logger.error('Error updating default role:', error);\n          throw new BadRequestException(\n            error instanceof Error\n              ? error.message\n              : 'Failed to update default role',\n          );\n        }\n      }\n\n      // Return the fully updated user\n      try {\n        const updatedUser = await this.getProfile(targetUserId);\n        return updatedUser;\n      } catch (error) {\n        this.logger.error('Error retrieving updated user profile:', error);\n        throw new BadRequestException(\n          'User was updated but profile could not be retrieved',\n        );\n      }\n    } catch (error) {\n      this.logger.error('Admin update user error:', error);\n\n      // Re-throw specific exceptions\n      if (\n        error instanceof UnauthorizedException ||\n        error instanceof BadRequestException ||\n        error instanceof ConflictException\n      ) {\n        throw error;\n      }\n\n      // For any other errors\n      throw new BadRequestException(\n        'Failed to update user: Unexpected error occurred',\n      );\n    }\n  }\n\n  // Add this method to find user by email\n  async findUserByEmail(email: string): Promise {\n    try {\n      const user = await this.usersRepository.findOne({\n        where: { email },\n        relations: ['defaultRole'],\n      });\n      return user;\n    } catch (error) {\n      this.logger.error('Error finding user by email:', error);\n      return null;\n    }\n  }\n\n  // Update password method\n  async updatePassword(email: string, newPassword: string): Promise {\n    try {\n      // Validate password strength\n      const passwordValidation = this.validatePasswordStrength(newPassword);\n      if (!passwordValidation.isValid) {\n        throw new BadRequestException(passwordValidation.message);\n      }\n\n      // Find user by email\n      const user = await this.findUserByEmail(email);\n      if (!user) {\n        throw new BadRequestException('User not found');\n      }\n\n      // ✅ UPDATED: Use centralized hashing method\n      const hashedPassword = await this.hashPassword(newPassword);\n\n      // Update password in database\n      await this.usersRepository.update(\n        { id: user.id },\n        { password: hashedPassword },\n      );\n\n      this.logger.log(`Password updated successfully for user: ${email}`);\n    } catch (error) {\n      this.logger.error('Error updating password:', error);\n      throw error;\n    }\n  }\n\n  private validatePasswordStrength(password: string): {\n    isValid: boolean;\n    message?: string;\n  } {\n    if (!password) {\n      return { isValid: false, message: 'Password is required' };\n    }\n\n    if (password.length ]/.test(password);\n\n    if (!hasUpperCase) {\n      return {\n        isValid: false,\n        message: 'Password must contain at least one uppercase letter',\n      };\n    }\n\n    if (!hasLowerCase) {\n      return {\n        isValid: false,\n        message: 'Password must contain at least one lowercase letter',\n      };\n    }\n\n    if (!hasNumbers) {\n      return {\n        isValid: false,\n        message: 'Password must contain at least one number',\n      };\n    }\n\n    if (!hasSpecialChars) {\n      return {\n        isValid: false,\n        message:\n          'Password must contain at least one special character (!@#$%^&*(),.?\":{}|<>)',\n      };\n    }\n\n    return { isValid: true };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for user login\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                emailOrUsername\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        emailOrUsername\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Email or username for login', example: 'test@example.com'})@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Test User password', example: 'password123'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\n/**\n * DTO for user login\n * @class LoginDto\n */\n\nexport class LoginDto {\n  @ApiProperty({\n    description: 'Email or username for login',\n    example: 'test@example.com',\n  })\n  @IsNotEmpty()\n  emailOrUsername: string;\n\n  @ApiProperty({\n    description: 'Test User password',\n    example: 'password123',\n  })\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MinioService.html":{"url":"injectables/MinioService.html","title":"injectable - MinioService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MinioService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/minio.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                bucketName\n                            \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                minioClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteFile\n                            \n                            \n                                    Async\n                                getDownloadUrl\n                            \n                            \n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/services/minio.service.ts:8\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteFile(objectName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/minio.service.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                objectName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getDownloadUrl\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDownloadUrl(objectName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/minio.service.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                objectName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(file: Express.Multer.File, objectName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/minio.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                objectName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        bucketName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/services/minio.service.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(MinioService.name)\n                    \n                \n                    \n                        \n                                Defined in src/services/minio.service.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        minioClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Minio.Client\n\n                    \n                \n                    \n                        \n                                Defined in src/services/minio.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport * as Minio from 'minio';\n\n@Injectable()\nexport class MinioService {\n  private readonly logger = new Logger(MinioService.name);\n  private minioClient: Minio.Client;\n  private bucketName: string;\n\n  constructor() {\n    const enablePort = process.env.MINIO_ENABLE_PORT !== 'false'; // Default to true for backward compatibility\n\n    const minioConfig: {\n      endPoint: string;\n      useSSL: boolean;\n      accessKey: string;\n      secretKey: string;\n      region: string;\n      pathStyle: boolean;\n      port?: number;\n    } = {\n      endPoint: process.env.MINIO_ENDPOINT || 'localhost',\n      useSSL: process.env.MINIO_USE_SSL === 'true',\n      accessKey: process.env.MINIO_ACCESS_KEY || 'minioadmin',\n      secretKey: process.env.MINIO_SECRET_KEY || 'minioadmin123',\n      region: 'auto', // R2 uses 'auto' region\n      pathStyle: true, // Required for R2 compatibility\n    };\n\n    // Conditionally include port for R2 compatibility\n    if (enablePort) {\n      minioConfig.port = parseInt(process.env.MINIO_PORT || '9000');\n    }\n\n    this.minioClient = new Minio.Client(minioConfig);\n\n    this.bucketName = process.env.MINIO_BUCKET_NAME || 'bulak-smart-connect';\n  }\n\n  async uploadFile(\n    file: Express.Multer.File,\n    objectName: string,\n  ): Promise {\n    try {\n      await this.minioClient.putObject(\n        this.bucketName,\n        objectName,\n        file.buffer,\n        file.size,\n        {\n          'Content-Type': file.mimetype,\n          'Original-Name': file.originalname,\n        },\n      );\n\n      this.logger.log(`File uploaded: ${objectName}`);\n      return objectName;\n    } catch (error) {\n      this.logger.error('Upload failed:', error);\n      throw error;\n    }\n  }\n\n  async getDownloadUrl(objectName: string): Promise {\n    try {\n      return await this.minioClient.presignedGetObject(\n        this.bucketName,\n        objectName,\n        3600,\n      );\n    } catch (error) {\n      this.logger.error('Get URL failed:', error);\n      throw error;\n    }\n  }\n\n  async deleteFile(objectName: string): Promise {\n    try {\n      await this.minioClient.removeObject(this.bucketName, objectName);\n      this.logger.log(`File deleted: ${objectName}`);\n    } catch (error) {\n      this.logger.error('Delete failed:', error);\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MinioService-1.html":{"url":"injectables/MinioService-1.html","title":"injectable - MinioService-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MinioService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/document-applications/services/minio.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                bucketName\n                            \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                minioClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteFile\n                            \n                            \n                                    Async\n                                ensureBucketExists\n                            \n                            \n                                    Async\n                                getFileInfo\n                            \n                            \n                                    Async\n                                getPresignedUrl\n                            \n                            \n                                    Async\n                                getR2PresignedUrl\n                            \n                            \n                                    Async\n                                listFiles\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                            \n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/document-applications/services/minio.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteFile(objectName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/document-applications/services/minio.service.ts:154\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                objectName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        ensureBucketExists\n                        \n                    \n                \n            \n            \n                \n                        \n                    ensureBucketExists()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/document-applications/services/minio.service.ts:71\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getFileInfo\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFileInfo(objectName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/document-applications/services/minio.service.ts:164\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                objectName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPresignedUrl\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPresignedUrl(objectName: string, expiry: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/document-applications/services/minio.service.ts:114\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                objectName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                expiry\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    3600\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getR2PresignedUrl\n                        \n                    \n                \n            \n            \n                \n                        \n                    getR2PresignedUrl(objectName: string, expiry: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/document-applications/services/minio.service.ts:130\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                objectName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                expiry\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    3600\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        listFiles\n                        \n                    \n                \n            \n            \n                \n                        \n                    listFiles(prefix?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/document-applications/services/minio.service.ts:173\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                prefix\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/document-applications/services/minio.service.ts:67\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(file: Express.Multer.File, objectName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/document-applications/services/minio.service.ts:86\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                objectName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        bucketName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/services/minio.service.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(MinioService.name)\n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/services/minio.service.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        minioClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Minio.Client\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/services/minio.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, OnModuleInit } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport * as Minio from 'minio';\n\n@Injectable()\nexport class MinioService implements OnModuleInit {\n  private readonly logger = new Logger(MinioService.name);\n  private minioClient: Minio.Client;\n  private bucketName: string;\n\n  constructor(private configService: ConfigService) {\n    const endpoint = this.configService.get(\n      'MINIO_ENDPOINT',\n      'localhost',\n    );\n    const port = this.configService.get('MINIO_PORT', 9000);\n    const enablePort =\n      this.configService.get('MINIO_ENABLE_PORT', 'true') !== 'false'; // Default to true for backward compatibility\n    const useSSLValue = this.configService\n      .get('MINIO_USE_SSL', 'false')\n      .toLowerCase();\n    const useSSL = ['true', '1', 'yes', 'on'].includes(useSSLValue);\n    const accessKey = this.configService.get(\n      'MINIO_ACCESS_KEY',\n      'minioadmin',\n    );\n    const secretKey = this.configService.get(\n      'MINIO_SECRET_KEY',\n      'minioadmin123',\n    );\n\n    const minioConfig: {\n      endPoint: string;\n      useSSL: boolean;\n      accessKey: string;\n      secretKey: string;\n      region: string;\n      pathStyle: boolean;\n      port?: number;\n    } = {\n      endPoint: endpoint,\n      useSSL: useSSL,\n      accessKey: accessKey,\n      secretKey: secretKey,\n      region: 'auto', // R2 uses 'auto' region\n      pathStyle: true, // Required for R2 compatibility\n    };\n\n    // Conditionally include port for R2 compatibility\n    if (enablePort) {\n      minioConfig.port = port;\n    }\n\n    this.minioClient = new Minio.Client(minioConfig);\n\n    this.bucketName = this.configService.get(\n      'MINIO_BUCKET_NAME',\n      'bulak-smart-connect',\n    );\n\n    const portDisplay = enablePort ? `:${port}` : '';\n    this.logger.log(\n      `MinIO configured with endpoint: ${endpoint}${portDisplay}`,\n    );\n  }\n\n  async onModuleInit() {\n    await this.ensureBucketExists();\n  }\n\n  async ensureBucketExists(): Promise {\n    try {\n      const exists = await this.minioClient.bucketExists(this.bucketName);\n      if (!exists) {\n        await this.minioClient.makeBucket(this.bucketName, 'auto');\n        this.logger.log(`Bucket ${this.bucketName} created successfully`);\n      } else {\n        this.logger.log(`Bucket ${this.bucketName} already exists`);\n      }\n    } catch (error) {\n      this.logger.error('Error ensuring bucket exists:', error);\n      throw error;\n    }\n  }\n\n  async uploadFile(\n    file: Express.Multer.File,\n    objectName: string,\n  ): Promise {\n    try {\n      const metaData = {\n        'Content-Type': file.mimetype,\n        'Original-Name': file.originalname,\n        'Upload-Date': new Date().toISOString(),\n        'File-Size': file.size.toString(),\n      };\n\n      await this.minioClient.putObject(\n        this.bucketName,\n        objectName,\n        file.buffer,\n        file.size,\n        metaData,\n      );\n\n      this.logger.log(`File uploaded successfully: ${objectName}`);\n      return objectName;\n    } catch (error) {\n      this.logger.error('Error uploading file:', error);\n      throw error;\n    }\n  }\n\n  async getPresignedUrl(\n    objectName: string,\n    expiry: number = 3600,\n  ): Promise {\n    try {\n      return await this.minioClient.presignedGetObject(\n        this.bucketName,\n        objectName,\n        expiry,\n      );\n    } catch (error) {\n      this.logger.error('Error generating presigned URL:', error);\n      throw error;\n    }\n  }\n\n  async getR2PresignedUrl(\n    objectName: string,\n    expiry: number = 3600,\n  ): Promise {\n    try {\n      // Use direct AWS SDK v3 for better R2 compatibility\n      const url = await this.minioClient.presignedGetObject(\n        this.bucketName,\n        objectName,\n        expiry,\n        {\n          'response-content-disposition': 'inline',\n        },\n      );\n\n      // Log for debugging\n      this.logger.debug(`Generated presigned URL for ${objectName}: ${url}`);\n      return url;\n    } catch (error) {\n      this.logger.error('Error generating R2 presigned URL:', error);\n      throw error;\n    }\n  }\n\n  async deleteFile(objectName: string): Promise {\n    try {\n      await this.minioClient.removeObject(this.bucketName, objectName);\n      this.logger.log(`File deleted successfully: ${objectName}`);\n    } catch (error) {\n      this.logger.error('Error deleting file:', error);\n      throw error;\n    }\n  }\n\n  async getFileInfo(objectName: string): Promise {\n    try {\n      return await this.minioClient.statObject(this.bucketName, objectName);\n    } catch (error) {\n      this.logger.error('Error getting file info:', error);\n      throw error;\n    }\n  }\n\n  async listFiles(prefix?: string): Promise {\n    return new Promise((resolve, reject) => {\n      const files: any[] = [];\n      const stream = this.minioClient.listObjects(\n        this.bucketName,\n        prefix,\n        true,\n      );\n\n      stream.on('data', (obj) => files.push(obj));\n      stream.on('error', reject);\n      stream.on('end', () => resolve(files));\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/OTP.html":{"url":"entities/OTP.html","title":"entity - OTP","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  OTP\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/otp.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                expiresAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                otp\n                            \n                            \n                                    \n                                purpose\n                            \n                            \n                                    \n                                verified\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/otp.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/otp.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        expiresAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/otp.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/otp.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        otp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/otp.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        purpose\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/otp.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        verified\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/otp.entity.ts:23\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  CreateDateColumn,\n} from 'typeorm';\n\n@Entity('otps')\nexport class OTP {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  email: string;\n\n  @Column()\n  otp: string;\n\n  @Column()\n  purpose: string; // 'verification', 'password_reset', etc.\n\n  @Column({ default: false })\n  verified: boolean;\n\n  @Column({ type: 'timestamp' })\n  expiresAt: Date;\n\n  @CreateDateColumn()\n  createdAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OTPService.html":{"url":"injectables/OTPService.html","title":"injectable - OTPService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OTPService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/otp.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                cleanupExpiredOTPs\n                            \n                            \n                                    Async\n                                generateOTP\n                            \n                            \n                                    Async\n                                verifyOTP\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(otpRepository: Repository, emailService: EmailService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/services/otp.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        otpRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        emailService\n                                                  \n                                                        \n                                                                        EmailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        cleanupExpiredOTPs\n                        \n                    \n                \n            \n            \n                \n                        \n                    cleanupExpiredOTPs()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/otp.service.ts:92\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateOTP\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateOTP(email: string, purpose: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/otp.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                purpose\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'verification'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyOTP\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyOTP(email: string, otp: string, purpose: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/otp.service.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                otp\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                purpose\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'verification'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { LessThan } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport * as speakeasy from 'speakeasy';\nimport { ConfigService } from '@nestjs/config';\nimport { EmailService } from './email.service';\nimport { OTP } from '../entities/otp.entity';\n\n@Injectable()\nexport class OTPService {\n  constructor(\n    @InjectRepository(OTP)\n    private otpRepository: Repository,\n    private emailService: EmailService,\n    private configService: ConfigService,\n  ) {}\n\n  async generateOTP(\n    email: string,\n    purpose: string = 'verification',\n  ): Promise {\n    // Invalidate any existing OTPs for this email and purpose\n    await this.otpRepository.update(\n      { email, purpose, verified: false },\n      { verified: true }, // Mark as used\n    );\n\n    // Generate new OTP\n    const otpLength = parseInt(this.configService.get('OTP_LENGTH', '6'));\n    const otp = speakeasy.totp({\n      secret: this.configService.get('OTP_SECRET') || 'default-secret-key',\n      digits: otpLength,\n      step: 300, // 5 minutes\n      encoding: 'base32',\n    });\n\n    // Calculate expiry time\n    const expiryMinutes = parseInt(\n      this.configService.get('OTP_EXPIRY_MINUTES', '5'),\n    );\n    const expiresAt = new Date();\n    expiresAt.setMinutes(expiresAt.getMinutes() + expiryMinutes);\n\n    // Save OTP to database\n    const otpEntity = this.otpRepository.create({\n      email,\n      otp,\n      purpose,\n      expiresAt,\n      verified: false,\n    });\n\n    await this.otpRepository.save(otpEntity);\n\n    // Send email\n    await this.emailService.sendOTP(email, otp, purpose);\n\n    return otp; // Only return for testing purposes\n  }\n\n  async verifyOTP(\n    email: string,\n    otp: string,\n    purpose: string = 'verification',\n  ): Promise {\n    const otpEntity = await this.otpRepository.findOne({\n      where: {\n        email,\n        otp,\n        purpose,\n        verified: false,\n      },\n    });\n\n    if (!otpEntity) {\n      return false;\n    }\n\n    // Check if expired\n    if (new Date() > otpEntity.expiresAt) {\n      return false;\n    }\n\n    // Mark as verified\n    otpEntity.verified = true;\n    await this.otpRepository.save(otpEntity);\n\n    return true;\n  }\n\n  async cleanupExpiredOTPs(): Promise {\n    await this.otpRepository.delete({\n      expiresAt: LessThan(new Date()),\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginatedUsersResponseDto.html":{"url":"classes/PaginatedUsersResponseDto.html","title":"class - PaginatedUsersResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginatedUsersResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/paginated-users-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                limit\n                            \n                            \n                                    \n                                page\n                            \n                            \n                                    \n                                total\n                            \n                            \n                                    \n                                totalPages\n                            \n                            \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 10, description: 'Number of items per page'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/paginated-users-response.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 1, description: 'Current page number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/paginated-users-response.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        total\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 100, description: 'Total number of users'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/paginated-users-response.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        totalPages\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 10, description: 'Total number of pages'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/paginated-users-response.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserResponseDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined, description: 'Array of users'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/paginated-users-response.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { UserResponseDto } from './user-response.dto';\n\nexport class PaginatedUsersResponseDto {\n  @ApiProperty({\n    type: [UserResponseDto],\n    description: 'Array of users',\n  })\n  users: UserResponseDto[];\n\n  @ApiProperty({\n    example: 100,\n    description: 'Total number of users',\n  })\n  total: number;\n\n  @ApiProperty({\n    example: 1,\n    description: 'Current page number',\n  })\n  page: number;\n\n  @ApiProperty({\n    example: 10,\n    description: 'Number of items per page',\n  })\n  limit: number;\n\n  @ApiProperty({\n    example: 10,\n    description: 'Total number of pages',\n  })\n  totalPages: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Queue.html":{"url":"entities/Queue.html","title":"entity - Queue","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Queue\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/entities/queue.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                completedAt\n                            \n                            \n                                    \n                                counter\n                            \n                            \n                                    \n                                counterNumber\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                details\n                            \n                            \n                                    \n                                estimatedWaitTime\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                queueNumber\n                            \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        completedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'completed_at', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        counter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Counter\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, counter => counter.currentQueue, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        counterNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'counter_number', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        details\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueueDetails[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, details => details.queue)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        estimatedWaitTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'estimated_wait_time', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        queueNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'queue_number', unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueueStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: QueueStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:32\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  OneToMany,\n  CreateDateColumn,\n  OneToOne,\n} from 'typeorm';\nimport { QueueDetails } from './queue-details.entity';\nimport { Counter } from '../../counter/entities/counter.entity';\n\nexport enum QueueStatus {\n  PENDING = 'pending',\n  SERVING = 'serving',\n  COMPLETED = 'completed',\n  CANCELLED = 'cancelled',\n}\n\n@Entity('queues')\nexport class Queue {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ name: 'queue_number', unique: true })\n  queueNumber: string;\n\n  @Column({\n    type: 'enum',\n    enum: QueueStatus,\n    default: QueueStatus.PENDING,\n  })\n  status: QueueStatus;\n\n  @Column({ name: 'counter_number', nullable: true })\n  counterNumber: string;\n\n  @CreateDateColumn({ name: 'created_at' })\n  createdAt: Date;\n\n  @Column({ name: 'completed_at', nullable: true })\n  completedAt: Date;\n\n  @Column({ name: 'estimated_wait_time', nullable: true })\n  estimatedWaitTime: number;\n\n  @OneToMany(() => QueueDetails, (details) => details.queue)\n  details: QueueDetails[];\n\n  @OneToOne(() => Counter, (counter) => counter.currentQueue, {\n    nullable: true,\n  })\n  counter: Counter;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/QueueDetails.html":{"url":"entities/QueueDetails.html","title":"entity - QueueDetails","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  QueueDetails\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/entities/queue-details.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                address\n                            \n                            \n                                    \n                                appointmentType\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isGuest\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                middleInitial\n                            \n                            \n                                    \n                                phoneNumber\n                            \n                            \n                                    \n                                    \n                                queue\n                            \n                            \n                                    \n                                queueId\n                            \n                            \n                                    \n                                reasonOfVisit\n                            \n                            \n                                    \n                                    \n                                user\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        appointmentType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'appointment_type'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'first_name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isGuest\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'is_guest', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'last_name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        middleInitial\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'middle_initial', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'phone_number', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        queue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Queue\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, queue => queue.details, {onDelete: 'CASCADE'})@JoinColumn({name: 'queue_id', foreignKeyConstraintName: 'fk_queue_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        queueId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'queue_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reasonOfVisit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'reason_of_visit'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {onDelete: 'SET NULL', nullable: true})@JoinColumn({name: 'user_id', foreignKeyConstraintName: 'fk_user_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'user_id', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:24\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  JoinColumn,\n} from 'typeorm';\nimport { Queue } from './queue.entity';\nimport { User } from '../../../users/entities/user.entity';\n\n@Entity('queue_details')\nexport class QueueDetails {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ name: 'queue_id' })\n  queueId: number;\n\n  @ManyToOne(() => Queue, (queue) => queue.details, { onDelete: 'CASCADE' })\n  @JoinColumn({ name: 'queue_id', foreignKeyConstraintName: 'fk_queue_id' })\n  queue: Queue;\n\n  @Column({ name: 'user_id', nullable: true })\n  userId: number;\n\n  @ManyToOne(() => User, { onDelete: 'SET NULL', nullable: true })\n  @JoinColumn({ name: 'user_id', foreignKeyConstraintName: 'fk_user_id' })\n  user: User;\n\n  @Column({ name: 'first_name' })\n  firstName: string;\n\n  @Column({ name: 'last_name' })\n  lastName: string;\n\n  @Column({ name: 'middle_initial', nullable: true })\n  middleInitial: string;\n\n  @Column({ nullable: true })\n  address: string;\n\n  @Column({ name: 'phone_number', nullable: true })\n  phoneNumber: string;\n\n  @Column({ name: 'reason_of_visit' })\n  reasonOfVisit: string;\n\n  @Column({ name: 'appointment_type' })\n  appointmentType: string;\n\n  @Column({ name: 'is_guest', default: false })\n  isGuest: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QueueGateway.html":{"url":"classes/QueueGateway.html","title":"class - QueueGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QueueGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/queue.gateway.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        OnGatewayConnection\n                        OnGatewayDisconnect\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleConnection\n                            \n                            \n                                handleDisconnect\n                            \n                            \n                                    \n                                    Async\n                                handleGetQueuePosition\n                            \n                            \n                                    \n                                    Async\n                                handleJoinCounter\n                            \n                            \n                                    \n                                    Async\n                                handleJoinQueue\n                            \n                            \n                                    \n                                    Async\n                                handleJoinQueueUpdates\n                            \n                            \n                                notifyCounterUpdate\n                            \n                            \n                                notifyQueueUpdate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(queueService: QueueService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/queue/queue.gateway.ts:26\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        queueService\n                                                  \n                                                        \n                                                                        QueueService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(QueueGateway.name)\n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/queue.gateway.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/queue.gateway.ts:26\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handleConnection\n                        \n                    \n                \n            \n            \n                \nhandleConnection(client: Socket)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleDisconnect\n                        \n                    \n                \n            \n            \n                \nhandleDisconnect(client: Socket)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleGetQueuePosition\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleGetQueuePosition(client: Socket, queueId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('getQueuePosition')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleJoinCounter\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleJoinCounter(client: Socket, counterId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('joinCounter')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                counterId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleJoinQueue\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleJoinQueue(client: Socket, queueId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('joinQueue')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleJoinQueueUpdates\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleJoinQueueUpdates(client: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('join_queue_updates')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notifyCounterUpdate\n                        \n                    \n                \n            \n            \n                \nnotifyCounterUpdate(counterId: number, data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                counterId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notifyQueueUpdate\n                        \n                    \n                \n            \n            \n                \nnotifyQueueUpdate(queueId: number, data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  WebSocketGateway,\n  WebSocketServer,\n  SubscribeMessage,\n  OnGatewayConnection,\n  OnGatewayDisconnect,\n} from '@nestjs/websockets';\nimport { Server, Socket } from 'socket.io';\nimport { QueueService } from './queue.service';\nimport { Logger, Inject, forwardRef } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\n@WebSocketGateway({\n  cors: {\n    origin: process.env.WS_CORS_ORIGIN || 'http://localhost:5173',\n    methods: ['GET', 'POST'],\n    credentials: true,\n    allowedHeaders: ['Content-Type', 'Authorization'],\n  },\n  namespace: 'socket.io', // Add this to match client expectation\n})\nexport class QueueGateway implements OnGatewayConnection, OnGatewayDisconnect {\n  private readonly logger = new Logger(QueueGateway.name);\n\n  @WebSocketServer()\n  server: Server;\n\n  constructor(\n    @Inject(forwardRef(() => QueueService))\n    private readonly queueService: QueueService,\n    private readonly configService: ConfigService,\n  ) {}\n\n  handleConnection(client: Socket) {\n    this.logger.log(`Client connected: ${client.id}`);\n    this.logger.log(\n      `CORS origin configured: ${this.configService.get('WS_CORS_ORIGIN')}`,\n    );\n  }\n\n  handleDisconnect(client: Socket) {\n    this.logger.log(`Client disconnected: ${client.id}`);\n  }\n\n  @SubscribeMessage('joinQueue')\n  async handleJoinQueue(client: Socket, queueId: number) {\n    await client.join(`queue_${queueId}`);\n    const queueData = await this.queueService.getQueueDetails(queueId);\n    return queueData;\n  }\n\n  @SubscribeMessage('getQueuePosition')\n  async handleGetQueuePosition(client: Socket, queueId: number) {\n    const position = await this.queueService.getQueuePosition(queueId);\n    return { position };\n  }\n\n  @SubscribeMessage('joinCounter')\n  async handleJoinCounter(client: Socket, counterId: number) {\n    await client.join(`counter_${counterId}`);\n    return { success: true };\n  }\n\n  @SubscribeMessage('join_queue_updates')\n  async handleJoinQueueUpdates(client: Socket) {\n    this.logger.log(`Socket ${client.id} joined queue updates`);\n    await client.join('queue_updates');\n    return { event: 'joined', data: 'Successfully joined queue updates' };\n  }\n\n  // Send updates to all clients or specific rooms\n  notifyQueueUpdate(queueId: number, data: any) {\n    void this.server.to(`queue_${queueId}`).emit('queueUpdate', data);\n    void this.server.emit('queueListUpdate'); // Global queue update\n  }\n\n  notifyCounterUpdate(counterId: number, data: any) {\n    void this.server.to(`counter_${counterId}`).emit('counterUpdate', data);\n    void this.server.emit('counterListUpdate'); // Global counter update\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/QueueModule.html":{"url":"modules/QueueModule.html","title":"module - QueueModule","body":"\n                   \n\n\n\n\n    Modules\n    QueueModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_QueueModule\n\n\n\ncluster_QueueModule_providers\n\n\n\ncluster_QueueModule_exports\n\n\n\n\nQueueGateway \n\nQueueGateway \n\n\n\nQueueSchedulerService \n\nQueueSchedulerService \n\n\n\nQueueService \n\nQueueService \n\n\n\nQueueModule\n\nQueueModule\n\nQueueGateway  -->\n\nQueueModule->QueueGateway \n\n\n\nQueueSchedulerService  -->\n\nQueueModule->QueueSchedulerService \n\n\n\nQueueService  -->\n\nQueueModule->QueueService \n\n\n\n\n\nQueueSchedulerService\n\nQueueSchedulerService\n\nQueueModule -->\n\nQueueSchedulerService->QueueModule\n\n\n\n\n\nQueueService\n\nQueueService\n\nQueueModule -->\n\nQueueService->QueueModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/queue/queue.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            QueueSchedulerService\n                        \n                        \n                            QueueService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            QueueController\n                        \n                        \n                            QueuesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            QueueGateway\n                        \n                        \n                            QueueSchedulerService\n                        \n                        \n                            QueueService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {\n  Module,\n  //forwardRef, // Uncomment if you need to use forwardRef\n} from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ScheduleModule } from '@nestjs/schedule';\nimport { QueueService } from './queue.service';\nimport { QueueController } from './queue.controller';\nimport { QueuesController } from './queues.controller';\nimport { QueueGateway } from './queue.gateway';\nimport { QueueSchedulerService } from './queue-scheduler.service';\nimport { Queue } from './entities/queue.entity';\nimport { QueueDetails } from './entities/queue-details.entity';\nimport { Counter } from '../counter/entities/counter.entity';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Queue, QueueDetails, Counter]),\n    ScheduleModule.forRoot(),\n  ],\n  controllers: [QueueController, QueuesController],\n  providers: [QueueService, QueueGateway, QueueSchedulerService],\n  exports: [QueueService, QueueGateway, QueueSchedulerService],\n})\nexport class QueueModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QueueNotificationDto.html":{"url":"classes/QueueNotificationDto.html","title":"class - QueueNotificationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QueueNotificationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/queue-notification.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                estimatedTime\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                message\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                position\n                            \n                            \n                                    \n                                    \n                                queueNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                            \n                                    \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Recipient email address', example: 'user@example.com'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/queue-notification.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        estimatedTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Estimated waiting time', example: '10 minutes', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/queue-notification.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Additional message', example: 'Please proceed to the counter', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/queue-notification.dto.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        position\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Queue position (for position alerts)', example: 3, required: false})@IsOptional()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/queue-notification.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        queueNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Queue number', example: 'WK001'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/queue-notification.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Queue status (for status updates)', example: 'now_serving', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/queue-notification.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Notification type', example: 'position_alert', enum: undefined})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/queue-notification.dto.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsString, IsOptional, IsNumber } from 'class-validator';\n\nexport class QueueNotificationDto {\n  @ApiProperty({\n    description: 'Recipient email address',\n    example: 'user@example.com',\n  })\n  @IsEmail()\n  email: string;\n\n  @ApiProperty({\n    description: 'Queue number',\n    example: 'WK001',\n  })\n  @IsString()\n  queueNumber: string;\n\n  @ApiProperty({\n    description: 'Notification type',\n    example: 'position_alert',\n    enum: ['position_alert', 'status_update'],\n  })\n  @IsString()\n  type: string;\n\n  @ApiProperty({\n    description: 'Queue position (for position alerts)',\n    example: 3,\n    required: false,\n  })\n  @IsOptional()\n  @IsNumber()\n  position?: number;\n\n  @ApiProperty({\n    description: 'Estimated waiting time',\n    example: '10 minutes',\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  estimatedTime?: string;\n\n  @ApiProperty({\n    description: 'Queue status (for status updates)',\n    example: 'now_serving',\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  status?: string;\n\n  @ApiProperty({\n    description: 'Additional message',\n    example: 'Please proceed to the counter',\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  message?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QueueSchedulerService.html":{"url":"injectables/QueueSchedulerService.html","title":"injectable - QueueSchedulerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  QueueSchedulerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/queue-scheduler.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                isResetInProgress\n                            \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getTodayPendingCount\n                            \n                            \n                                    \n                                    Async\n                                handleDailyQueueReset\n                            \n                            \n                                    Private\n                                    Async\n                                logDailyStatistics\n                            \n                            \n                                    Async\n                                manualDailyReset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(queueRepository: Repository, queueGateway: QueueGateway)\n                    \n                \n                        \n                            \n                                Defined in src/modules/queue/queue-scheduler.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        queueRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queueGateway\n                                                  \n                                                        \n                                                                        QueueGateway\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getTodayPendingCount\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTodayPendingCount()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue-scheduler.service.ts:178\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleDailyQueueReset\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleDailyQueueReset()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron('59 23 * * *', {name: 'daily-queue-reset', timeZone: 'Asia/Manila'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue-scheduler.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        logDailyStatistics\n                        \n                    \n                \n            \n            \n                \n                        \n                    logDailyStatistics(startOfDay: Date, endOfDay: Date)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue-scheduler.service.ts:137\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                startOfDay\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                endOfDay\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        manualDailyReset\n                        \n                    \n                \n            \n            \n                \n                        \n                    manualDailyReset()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue-scheduler.service.ts:172\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isResetInProgress\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/queue-scheduler.service.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(QueueSchedulerService.name)\n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/queue-scheduler.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { Cron } from '@nestjs/schedule';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, Between } from 'typeorm';\nimport { Queue, QueueStatus } from './entities/queue.entity';\nimport { QueueGateway } from './queue.gateway';\n\n@Injectable()\nexport class QueueSchedulerService {\n  private readonly logger = new Logger(QueueSchedulerService.name);\n  private isResetInProgress = false;\n\n  constructor(\n    @InjectRepository(Queue)\n    private queueRepository: Repository,\n    private queueGateway: QueueGateway,\n  ) {}\n\n  // Run every day at 11:59 PM (23:59)\n  @Cron('59 23 * * *', {\n    name: 'daily-queue-reset',\n    timeZone: 'Asia/Manila',\n  })\n  async handleDailyQueueReset() {\n    // ✅ FIXED: Prevent concurrent execution\n    if (this.isResetInProgress) {\n      this.logger.warn('🚫 Daily reset already in progress, skipping...');\n      return;\n    }\n\n    this.isResetInProgress = true;\n    this.logger.log('🔄 Starting daily queue reset process...');\n\n    try {\n      // ✅ FIXED: Better timezone handling\n      const today = new Date();\n      const startOfDay = new Date(\n        today.getFullYear(),\n        today.getMonth(),\n        today.getDate(),\n        0,\n        0,\n        0,\n        0,\n      );\n      const endOfDay = new Date(\n        today.getFullYear(),\n        today.getMonth(),\n        today.getDate(),\n        23,\n        59,\n        59,\n        999,\n      );\n\n      this.logger.log(\n        `🗓️ Searching for queues between: ${startOfDay.toISOString()} and ${endOfDay.toISOString()}`,\n      );\n\n      // Get all pending queues created today\n      const pendingQueues = await this.queueRepository.find({\n        where: {\n          status: QueueStatus.PENDING,\n          createdAt: Between(startOfDay, endOfDay),\n        },\n      });\n\n      this.logger.log(\n        `📋 Found ${pendingQueues.length} pending queues to cancel`,\n      );\n\n      if (pendingQueues.length > 0) {\n        // Mark all pending queues as cancelled\n        const cancelledQueues = await this.queueRepository.save(\n          pendingQueues.map((queue) => ({\n            ...queue,\n            status: QueueStatus.CANCELLED,\n            completedAt: new Date(),\n          })),\n        );\n\n        this.logger.log(\n          `❌ Cancelled ${cancelledQueues.length} pending queues`,\n        );\n\n        // Notify clients about cancellations\n        for (const queue of cancelledQueues) {\n          this.queueGateway.notifyQueueUpdate(queue.id, {\n            action: 'cancelled',\n            reason: 'End of day auto-cancellation',\n            queue: queue,\n          });\n        }\n\n        // Send general notification\n        this.queueGateway.server.emit('dailyQueueReset', {\n          cancelledCount: cancelledQueues.length,\n          timestamp: new Date(),\n          message:\n            'Daily queue reset completed. All pending queues have been cancelled.',\n        });\n      }\n\n      // Also cancel any serving queues\n      const servingQueues = await this.queueRepository.find({\n        where: {\n          status: QueueStatus.SERVING,\n          createdAt: Between(startOfDay, endOfDay),\n        },\n      });\n\n      if (servingQueues.length > 0) {\n        const cancelledServingQueues = await this.queueRepository.save(\n          servingQueues.map((queue) => ({\n            ...queue,\n            status: QueueStatus.CANCELLED,\n            completedAt: new Date(),\n          })),\n        );\n\n        this.logger.log(\n          `❌ Cancelled ${cancelledServingQueues.length} serving queues`,\n        );\n      }\n\n      this.logger.log('✅ Daily queue reset completed successfully');\n      await this.logDailyStatistics(startOfDay, endOfDay);\n    } catch (error) {\n      this.logger.error('❌ Error during daily queue reset:', error);\n      throw error; // ✅ FIXED: Propagate error for proper handling\n    } finally {\n      this.isResetInProgress = false; // ✅ FIXED: Always reset flag\n    }\n  }\n\n  // Optional: Log daily statistics\n  private async logDailyStatistics(startOfDay: Date, endOfDay: Date) {\n    try {\n      const [completed, cancelled, total] = await Promise.all([\n        this.queueRepository.count({\n          where: {\n            status: QueueStatus.COMPLETED,\n            createdAt: Between(startOfDay, endOfDay),\n          },\n        }),\n        this.queueRepository.count({\n          where: {\n            status: QueueStatus.CANCELLED,\n            createdAt: Between(startOfDay, endOfDay),\n          },\n        }),\n        this.queueRepository.count({\n          where: {\n            createdAt: Between(startOfDay, endOfDay),\n          },\n        }),\n      ]);\n\n      this.logger.log(`📊 Daily Statistics for ${startOfDay.toDateString()}:`);\n      this.logger.log(`   Total Queues: ${total}`);\n      this.logger.log(`   Completed: ${completed}`);\n      this.logger.log(`   Cancelled: ${cancelled}`);\n      this.logger.log(\n        `   Completion Rate: ${total > 0 ? ((completed / total) * 100).toFixed(1) : 0}%`,\n      );\n    } catch (error) {\n      this.logger.error('Error logging daily statistics:', error);\n    }\n  }\n\n  // Manual trigger for testing or admin use\n  async manualDailyReset() {\n    this.logger.log('🔄 Manual daily queue reset triggered');\n    return await this.handleDailyQueueReset(); // ✅ FIXED: Return result\n  }\n\n  // Get pending queues count for today\n  async getTodayPendingCount(): Promise {\n    const today = new Date();\n    const startOfDay = new Date(\n      today.getFullYear(),\n      today.getMonth(),\n      today.getDate(),\n      0,\n      0,\n      0,\n      0,\n    );\n    const endOfDay = new Date(\n      today.getFullYear(),\n      today.getMonth(),\n      today.getDate(),\n      23,\n      59,\n      59,\n      999,\n    );\n\n    return await this.queueRepository.count({\n      where: {\n        status: QueueStatus.PENDING,\n        createdAt: Between(startOfDay, endOfDay),\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/QueuesController.html":{"url":"controllers/QueuesController.html","title":"controller - QueuesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  QueuesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/queues.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                queues\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                getQueueById\n                            \n                            \n                                    \n                                    Async\n                                getUserQueues\n                            \n                            \n                                    \n                                    Async\n                                getWalkInQueues\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getQueueById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQueueById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queues.controller.ts:111\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getUserQueues\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserQueues(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('user/:userId')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queues.controller.ts:76\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getWalkInQueues\n                        \n                    \n                \n            \n            \n                \n                        \n                    getWalkInQueues()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('walk-in')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queues.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Logger } from '@nestjs/common';\nimport { QueueService } from './queue.service';\nimport { QueueStatus } from './entities/queue.entity';\n\ninterface QueueDetails {\n  firstName?: string;\n  lastName?: string;\n  middleInitial?: string;\n  reasonOfVisit?: string;\n  address?: string;\n  phoneNumber?: string;\n}\n\n@Controller('queues')\nexport class QueuesController {\n  private readonly logger = new Logger(QueuesController.name);\n\n  constructor(private readonly queueService: QueueService) {}\n  // This endpoint is for supporting the legacy API path that the frontend is using\n  @Get('walk-in')\n  async getWalkInQueues() {\n    this.logger.log('GET /queues/walk-in endpoint called');\n    try {\n      // Get both pending and serving queues with details using the service methods\n      const [pendingQueuesWithDetails, servingQueuesWithDetails] =\n        await Promise.all([\n          this.queueService.findByStatusWithDetails(QueueStatus.PENDING),\n          this.queueService.findByStatusWithDetails(QueueStatus.SERVING),\n        ]);\n\n      this.logger.log('Found pending queues:', pendingQueuesWithDetails.length);\n      this.logger.log('Found serving queues:', servingQueuesWithDetails.length);\n\n      // Combine all queues\n      const allQueues = [\n        ...pendingQueuesWithDetails,\n        ...servingQueuesWithDetails,\n      ];\n\n      // Extract details from the nested structure and flatten them for the frontend\n      const result = allQueues.map((queue) => {\n        // For debugging\n        this.logger.log('Processing queue:', queue.id, 'status:', queue.status);\n\n        // Handle potential null/undefined details\n        const details: QueueDetails | null = Array.isArray(queue.details)\n          ? (queue.details[0] as QueueDetails)\n          : (queue.details as QueueDetails);\n\n        return {\n          id: queue.id,\n          queueNumber: queue.queueNumber,\n          status: queue.status,\n          counterNumber: queue.counterNumber,\n          createdAt: queue.createdAt,\n          completedAt: queue.completedAt,\n          estimatedWaitTime: queue.estimatedWaitTime,\n          firstName: details?.firstName || null,\n          lastName: details?.lastName || null,\n          middleInitial: details?.middleInitial || null,\n          reasonOfVisit: details?.reasonOfVisit || null,\n          address: details?.address || null,\n          phoneNumber: details?.phoneNumber || null,\n        };\n      });\n\n      this.logger.log(`Returning ${result.length} walk-in queues`);\n      return result;\n    } catch (err: unknown) {\n      this.logger.error('Error fetching walk-in queues:', err);\n      throw err;\n    }\n  }\n\n  @Get('user/:userId')\n  async getUserQueues(@Param('userId') userId: string) {\n    this.logger.log('GET /queues/user/' + userId + ' endpoint called');\n    try {\n      // Find queues for the specific user that are not completed\n      const userQueues =\n        await this.queueService.findByUserIdWithDetails(userId);\n\n      this.logger.log('Found user queues:', userQueues.length);\n\n      const result = userQueues.map((queue) => {\n        const details = Array.isArray(queue.details)\n          ? queue.details[0]\n          : queue.details;\n\n        return {\n          id: queue.id,\n          queueNumber: queue.queueNumber,\n          status: queue.status,\n          counterNumber: queue.counterNumber,\n          createdAt: queue.createdAt,\n          completedAt: queue.completedAt,\n          firstName: details?.firstName || null,\n          lastName: details?.lastName || null,\n          reasonOfVisit: details?.reasonOfVisit || null,\n        };\n      });\n\n      return result;\n    } catch (err) {\n      this.logger.error('Error fetching user queues:', err);\n      throw err;\n    }\n  }\n\n  @Get(':id')\n  async getQueueById(@Param('id') id: string) {\n    this.logger.log('GET /queues/' + id + ' endpoint called');\n    try {\n      const queueId = parseInt(id, 10);\n      if (isNaN(queueId)) {\n        throw new Error('Invalid queue ID');\n      }\n\n      const queue = await this.queueService.findOne(queueId);\n\n      if (!queue) {\n        throw new Error('Queue not found');\n      }\n\n      const details = Array.isArray(queue.details)\n        ? queue.details[0]\n        : queue.details;\n\n      return {\n        id: queue.id,\n        queueNumber: queue.queueNumber,\n        status: queue.status,\n        counterNumber: queue.counterNumber,\n        createdAt: queue.createdAt,\n        completedAt: queue.completedAt,\n        firstName: details?.firstName || null,\n        lastName: details?.lastName || null,\n        reasonOfVisit: details?.reasonOfVisit || null,\n      };\n    } catch (err) {\n      this.logger.error('Error fetching queue:', err);\n      throw err;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/register.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for user registration\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                contactNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                middleName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                nameExtension\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                otp\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        contactNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Contact number', example: '09123456789'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User email address', example: 'test@example.com'})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User first name', example: 'John'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User last name', example: 'Doe'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User middle name (optional)', example: 'Robert'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Full name (auto-generated)', example: 'John Robert Doe'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        nameExtension\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Name extension (e.g., Jr., III)', example: 'Jr.'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        otp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'OTP code for email verification (optional)', example: '123456'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:95\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User password (min 8 characters)', example: 'password123', minLength: 8})@IsString()@IsNotEmpty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Username for login', example: 'john_doe'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:29\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  MinLength,\n} from 'class-validator';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\n/**\n * DTO for user registration\n * @class RegisterDto\n */\nexport class RegisterDto {\n  @ApiProperty({\n    description: 'User email address',\n    example: 'test@example.com',\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @ApiProperty({\n    description: 'Username for login',\n    example: 'john_doe',\n  })\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n\n  @ApiProperty({\n    description: 'User password (min 8 characters)',\n    example: 'password123',\n    minLength: 8,\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  password: string;\n\n  @ApiProperty({\n    description: 'User first name',\n    example: 'John',\n  })\n  @IsString()\n  @IsNotEmpty()\n  firstName: string;\n\n  @ApiPropertyOptional({\n    description: 'User middle name (optional)',\n    example: 'Robert',\n  })\n  @IsString()\n  @IsOptional()\n  middleName?: string;\n\n  @ApiProperty({\n    description: 'User last name',\n    example: 'Doe',\n  })\n  @IsString()\n  @IsNotEmpty()\n  lastName: string;\n\n  @ApiPropertyOptional({\n    description: 'Full name (auto-generated)',\n    example: 'John Robert Doe',\n  })\n  @IsString()\n  @IsOptional()\n  name?: string;\n\n  @ApiPropertyOptional({\n    description: 'Name extension (e.g., Jr., III)',\n    example: 'Jr.',\n  })\n  @IsString()\n  @IsOptional()\n  nameExtension?: string;\n\n  @ApiPropertyOptional({\n    description: 'Contact number',\n    example: '09123456789',\n  })\n  @IsString()\n  contactNumber?: string;\n\n  // OTP field for email verification\n  @ApiPropertyOptional({\n    description: 'OTP code for email verification (optional)',\n    example: '123456',\n  })\n  @IsString()\n  @IsOptional()\n  otp?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser.html":{"url":"interfaces/RequestWithUser.html","title":"interface - RequestWithUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         AuthenticatedUser\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AuthenticatedUser\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  Get,\n  UseGuards,\n  Request,\n  UnauthorizedException,\n  Param,\n  BadRequestException,\n  Logger,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\nimport { UpdateUserDto, AdminUpdateUserDto } from './dto/update-user.dto';\nimport { Roles } from './decorators/roles.decorator';\nimport { RolesGuard } from './guards/roles.guard';\nimport { AuthenticatedUser } from './jwt.strategy';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n  ApiParam,\n  ApiBody,\n  ApiQuery,\n  ApiProperty,\n  ApiPropertyOptional,\n} from '@nestjs/swagger';\nimport { OTPService } from '../services/otp.service';\nimport { EmailService } from '../services/email.service';\nimport {\n  SendOtpDto,\n  VerifyOtpDto,\n  ForgotPasswordDto,\n  ResetPasswordDto,\n  TestOtpDto,\n  ApplicationNotificationDto,\n} from './dto/otp.dto';\nimport { QueueNotificationDto } from './dto/queue-notification.dto';\nimport { AppointmentNotificationDto } from './dto/appointment-notification.dto';\n\ninterface RequestWithUser extends Request {\n  user: AuthenticatedUser;\n}\n\n@ApiTags('Authentication & OTP')\n@Controller('auth')\nexport class AuthController {\n  private readonly logger = new Logger(AuthController.name);\n\n  constructor(\n    private authService: AuthService,\n    private otpService: OTPService,\n    private emailService: EmailService,\n  ) {}\n\n  @ApiOperation({ summary: 'User login' })\n  @ApiResponse({\n    status: 200,\n    description: 'Login successful',\n    schema: {\n      properties: {\n        access_token: { type: 'string' },\n        user: {\n          type: 'object',\n          properties: {\n            id: { type: 'number' },\n            email: { type: 'string' },\n            username: { type: 'string' },\n            roles: { type: 'array', items: { type: 'string' } },\n            defaultRole: { type: 'string' },\n          },\n        },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Unauthorized - invalid credentials',\n  })\n  @ApiBody({ type: LoginDto })\n  @Post('login')\n  async login(@Body() loginDto: LoginDto) {\n    this.logger.log('Login request received:', loginDto);\n    try {\n      const result = await this.authService.login(loginDto);\n      return result;\n    } catch (error) {\n      throw new UnauthorizedException(\n        error instanceof Error ? error.message : 'Invalid credentials',\n      );\n    }\n  }\n\n  @ApiOperation({ summary: 'User registration' })\n  @ApiResponse({\n    status: 201,\n    description: 'Registration successful',\n    schema: {\n      properties: {\n        access_token: { type: 'string' },\n        user: {\n          type: 'object',\n          properties: {\n            id: { type: 'number' },\n            email: { type: 'string' },\n            username: { type: 'string' },\n            roles: { type: 'array', items: { type: 'string' } },\n            defaultRole: { type: 'string' },\n          },\n        },\n      },\n    },\n  })\n  @ApiResponse({ status: 400, description: 'Bad request - invalid data' })\n  @ApiResponse({\n    status: 409,\n    description: 'Conflict - email or username already exists',\n  })\n  @ApiBody({ type: RegisterDto })\n  @Post('register')\n  async register(@Body() createUserDto: RegisterDto) {\n    try {\n      // First verify OTP if email verification is enabled\n      if (createUserDto.email && createUserDto.otp) {\n        const isOtpValid = await this.otpService.verifyOTP(\n          createUserDto.email,\n          createUserDto.otp,\n          'verification',\n        );\n\n        if (!isOtpValid) {\n          throw new BadRequestException('Invalid or expired OTP');\n        }\n      }\n\n      const result = await this.authService.register(createUserDto);\n\n      // Send welcome email\n      if (createUserDto.email) {\n        await this.emailService.sendApplicationNotification(\n          createUserDto.email,\n          'Welcome!',\n          'Account Created',\n          'Welcome to Bulak LGU Connect',\n        );\n      }\n\n      return result;\n    } catch (error) {\n      this.logger.error('Registration error:', error);\n      throw error;\n    }\n  }\n  @ApiOperation({ summary: 'Get user profile' })\n  @ApiResponse({ status: 200, description: 'Profile retrieved successfully' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @ApiBearerAuth('JWT-auth')\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  getProfile(@Request() req: RequestWithUser) {\n    // Add null check before converting to number\n    if (!req.user || req.user.id === undefined || req.user.id === null) {\n      throw new UnauthorizedException('Invalid user ID');\n    }\n    return this.authService.getProfile(Number(req.user.id));\n  }\n  @ApiOperation({\n    summary: 'Update user profile',\n    description: 'Allows a user to update their own profile information',\n  })\n  @ApiResponse({ status: 200, description: 'Profile updated successfully' })\n  @ApiResponse({ status: 400, description: 'Bad request - invalid data' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @ApiResponse({\n    status: 409,\n    description: 'Conflict - email or username already exists',\n  })\n  @ApiBearerAuth('JWT-auth')\n  @ApiBody({ type: UpdateUserDto })\n  @UseGuards(JwtAuthGuard)\n  @Post('update-profile')\n  async updateProfile(\n    @Request() req: RequestWithUser,\n    @Body() updateUserDto: UpdateUserDto,\n  ) {\n    // Add null check before converting to number\n    if (!req.user || req.user.id === undefined || req.user.id === null) {\n      throw new UnauthorizedException('Invalid user ID');\n    }\n\n    try {\n      return await this.authService.updateUserInfo(\n        Number(req.user.id),\n        updateUserDto,\n      );\n    } catch (error) {\n      throw new UnauthorizedException(\n        error instanceof Error ? error.message : 'Failed to update profile',\n      );\n    }\n  }\n  @ApiOperation({\n    summary: 'Admin update user',\n    description:\n      \"Allows administrators to update any user's information including role assignments\",\n  })\n  @ApiParam({ name: 'userId', description: 'ID of the user to update' })\n  @ApiBody({ type: AdminUpdateUserDto })\n  @ApiResponse({ status: 200, description: 'User successfully updated' })\n  @ApiResponse({ status: 400, description: 'Bad request - invalid input data' })\n  @ApiResponse({\n    status: 401,\n    description: 'Unauthorized - invalid credentials',\n  })\n  @ApiResponse({\n    status: 403,\n    description: 'Forbidden - insufficient permissions',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Not found - user or role not found',\n  })\n  @ApiResponse({\n    status: 409,\n    description: 'Conflict - email or username already exists',\n  })\n  @ApiBearerAuth('JWT-auth')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles('admin', 'super_admin')\n  @Post('admin/update-user/:userId')\n  @UseGuards(JwtAuthGuard) // Make sure this guard is working\n  async adminUpdateUser(\n    @Request() req: RequestWithUser,\n    @Param('userId') targetUserId: string,\n    @Body() updateUserDto: AdminUpdateUserDto,\n  ) {\n    // Add logging to see what's happening\n    this.logger.log('🔍 Admin update request received:');\n    this.logger.log('Admin ID:', req.user?.id);\n    this.logger.log('Admin roles:', req.user?.roles);\n    this.logger.log('Target User ID:', targetUserId);\n    this.logger.log('Update data:', updateUserDto);\n\n    if (!req.user || req.user.id === undefined || req.user.id === null) {\n      this.logger.error('❌ No user in request object');\n      throw new UnauthorizedException('Invalid admin ID');\n    }\n\n    try {\n      return await this.authService.adminUpdateUser(\n        Number(req.user.id),\n        Number(targetUserId),\n        updateUserDto,\n      );\n    } catch (error) {\n      this.logger.error('❌ Admin update error:', error);\n      throw new UnauthorizedException(\n        error instanceof Error ? error.message : 'Failed to update user',\n      );\n    }\n  }\n\n  @ApiOperation({\n    summary: 'Send OTP for email verification or password reset',\n    description: `\n    Generates and sends a 6-digit OTP code to the specified email address.\n    \n    **Use Cases:**\n    - Email verification during registration\n    - Password reset verification\n    - Two-factor authentication\n    \n    **Security Features:**\n    - OTP expires after 5 minutes\n    - Previous OTPs are invalidated when new one is generated\n    - Rate limiting to prevent spam\n    \n    **Email Templates:**\n    - Verification: Blue gradient professional template\n    - Password Reset: Red themed security alert template\n    `,\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'OTP sent successfully',\n    schema: {\n      type: 'object',\n      properties: {\n        success: { type: 'boolean', example: true },\n        message: { type: 'string', example: 'OTP sent successfully' },\n        email: { type: 'string', example: 'user@example.com' },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Bad Request - Invalid email format or missing fields',\n    schema: {\n      type: 'object',\n      properties: {\n        statusCode: { type: 'number', example: 400 },\n        message: { type: 'string', example: 'Invalid email format' },\n        error: { type: 'string', example: 'Bad Request' },\n      },\n    },\n  })\n  @ApiBody({\n    description: 'Email and purpose for OTP generation',\n    schema: {\n      type: 'object',\n      properties: {\n        email: {\n          type: 'string',\n          format: 'email',\n          example: 'user@example.com',\n          description: 'Email address to send OTP to',\n        },\n        purpose: {\n          type: 'string',\n          enum: ['verification', 'password_reset'],\n          example: 'verification',\n          description: 'Purpose of the OTP',\n          default: 'verification',\n        },\n      },\n      required: ['email'],\n    },\n  })\n  @Post('send-otp')\n  async sendOTP(@Body() sendOtpDto: { email: string; purpose?: string }) {\n    try {\n      const { email, purpose = 'verification' } = sendOtpDto;\n\n      // Validate email format\n      if (!email || !/\\S+@\\S+\\.\\S+/.test(email)) {\n        throw new BadRequestException('Invalid email format');\n      }\n\n      await this.otpService.generateOTP(email, purpose);\n\n      return {\n        success: true,\n        message: 'OTP sent successfully',\n        email: email,\n      };\n    } catch (error) {\n      this.logger.error('Error sending OTP:', error);\n      throw new BadRequestException('Failed to send OTP');\n    }\n  }\n\n  @ApiOperation({\n    summary: 'Verify OTP code',\n    description: `\n    Verifies a 6-digit OTP code against the email and purpose.\n    \n    **Verification Process:**\n    1. Checks if OTP exists and is not expired\n    2. Validates the code matches\n    3. Marks OTP as verified (single-use)\n    4. Returns verification status\n    \n    **Security Features:**\n    - Single-use OTPs (marked as verified after use)\n    - Time-based expiration (5 minutes)\n    - Purpose isolation (verification vs password_reset)\n    `,\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'OTP verified successfully',\n    schema: {\n      type: 'object',\n      properties: {\n        success: { type: 'boolean', example: true },\n        message: { type: 'string', example: 'OTP verified successfully' },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Unauthorized - Invalid or expired OTP',\n    schema: {\n      type: 'object',\n      properties: {\n        statusCode: { type: 'number', example: 401 },\n        message: { type: 'string', example: 'Invalid or expired OTP' },\n        error: { type: 'string', example: 'Unauthorized' },\n      },\n    },\n  })\n  @ApiBody({\n    description: 'Email, OTP code, and purpose for verification',\n    schema: {\n      type: 'object',\n      properties: {\n        email: {\n          type: 'string',\n          format: 'email',\n          example: 'user@example.com',\n          description: 'Email address',\n        },\n        otp: {\n          type: 'string',\n          example: '123456',\n          pattern: '^[0-9]{6}$',\n          description: '6-digit OTP code',\n        },\n        purpose: {\n          type: 'string',\n          enum: ['verification', 'password_reset'],\n          example: 'verification',\n          description: 'Purpose of the OTP verification',\n          default: 'verification',\n        },\n      },\n      required: ['email', 'otp'],\n    },\n  })\n  @Post('verify-otp')\n  async verifyOTP(\n    @Body() verifyOtpDto: { email: string; otp: string; purpose?: string },\n  ) {\n    try {\n      const { email, otp, purpose = 'verification' } = verifyOtpDto;\n\n      const isValid = await this.otpService.verifyOTP(email, otp, purpose);\n\n      if (!isValid) {\n        throw new UnauthorizedException('Invalid or expired OTP');\n      }\n\n      return {\n        success: true,\n        message: 'OTP verified successfully',\n      };\n    } catch (error) {\n      this.logger.error('Error verifying OTP:', error);\n      throw new UnauthorizedException('Invalid or expired OTP');\n    }\n  }\n\n  // Add password reset endpoints\n  @ApiOperation({\n    summary: 'Request password reset OTP',\n    description: `\n    Initiates password reset process by sending OTP to registered email.\n    \n    **Security Features:**\n    - Does not reveal if email exists (security best practice)\n    - Generates secure 6-digit OTP\n    - Uses dedicated password reset email template\n    - OTP expires after 5 minutes\n    \n    **Process:**\n    1. Validates email format\n    2. Checks if user exists (internally)\n    3. Generates OTP for password_reset purpose\n    4. Sends formatted email with reset instructions\n    5. Returns success message regardless of email existence\n    `,\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Password reset process initiated',\n    schema: {\n      type: 'object',\n      properties: {\n        success: { type: 'boolean', example: true },\n        message: {\n          type: 'string',\n          example:\n            'If this email is registered, you will receive a password reset code',\n        },\n      },\n    },\n  })\n  @ApiBody({\n    description: 'Email address for password reset',\n    schema: {\n      type: 'object',\n      properties: {\n        email: {\n          type: 'string',\n          format: 'email',\n          example: 'user@example.com',\n          description: 'Registered email address',\n        },\n      },\n      required: ['email'],\n    },\n  })\n  @Post('forgot-password')\n  async forgotPassword(@Body() { email }: { email: string }) {\n    try {\n      // Check if user exists\n      const user = await this.authService.findUserByEmail(email);\n      if (!user) {\n        // Don't reveal if email exists for security\n        return {\n          success: true,\n          message:\n            'If this email is registered, you will receive a password reset code',\n        };\n      }\n\n      await this.otpService.generateOTP(email, 'password_reset');\n\n      return {\n        success: true,\n        message: 'Password reset code sent to your email',\n      };\n    } catch (error) {\n      this.logger.error('Forgot password error:', error);\n      throw new BadRequestException('Failed to send password reset code');\n    }\n  }\n\n  @ApiOperation({\n    summary: 'Reset password with OTP verification',\n    description: `\n    Completes password reset process using OTP verification.\n    \n    **Process:**\n    1. Verifies OTP code is valid and not expired\n    2. Validates new password meets complexity requirements\n    3. Updates user password with secure hashing\n    4. Marks OTP as used\n    \n    **Password Requirements:**\n    - Minimum 8 characters\n    - At least 1 uppercase letter\n    - At least 1 lowercase letter  \n    - At least 1 number\n    - At least 1 special character (@$!%*?&)\n    \n    **Security Features:**\n    - bcrypt password hashing\n    - OTP single-use enforcement\n    - Password strength validation\n    `,\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Password reset successfully',\n    schema: {\n      type: 'object',\n      properties: {\n        success: { type: 'boolean', example: true },\n        message: { type: 'string', example: 'Password reset successfully' },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Unauthorized - Invalid or expired reset code',\n    schema: {\n      type: 'object',\n      properties: {\n        statusCode: { type: 'number', example: 401 },\n        message: { type: 'string', example: 'Invalid or expired reset code' },\n        error: { type: 'string', example: 'Unauthorized' },\n      },\n    },\n  })\n  @ApiBody({\n    description: 'Email, OTP, and new password for reset',\n    schema: {\n      type: 'object',\n      properties: {\n        email: {\n          type: 'string',\n          format: 'email',\n          example: 'user@example.com',\n          description: 'Email address',\n        },\n        otp: {\n          type: 'string',\n          example: '123456',\n          pattern: '^[0-9]{6}$',\n          description: '6-digit OTP code received via email',\n        },\n        newPassword: {\n          type: 'string',\n          example: 'NewSecure123!',\n          minLength: 8,\n          pattern:\n            '^(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)(?=.*[@$!%*?&])[A-Za-z\\\\d@$!%*?&]{8,}$',\n          description: 'New password (must meet complexity requirements)',\n        },\n      },\n      required: ['email', 'otp', 'newPassword'],\n    },\n  })\n  @Post('reset-password')\n  async resetPassword(\n    @Body() resetDto: { email: string; otp: string; newPassword: string },\n  ) {\n    try {\n      const { email, otp, newPassword } = resetDto;\n\n      // Verify OTP\n      const isOtpValid = await this.otpService.verifyOTP(\n        email,\n        otp,\n        'password_reset',\n      );\n      if (!isOtpValid) {\n        throw new UnauthorizedException('Invalid or expired reset code');\n      }\n\n      // Update password\n      await this.authService.updatePassword(email, newPassword);\n\n      return {\n        success: true,\n        message: 'Password reset successfully',\n      };\n    } catch (error) {\n      this.logger.error('Reset password error:', error);\n      throw error;\n    }\n  }\n\n  @ApiOperation({\n    summary: 'Test OTP generation (Development Only)',\n    description: `\n    **⚠️ DEVELOPMENT ONLY - Disabled in Production**\n    \n    Generates test OTP and optionally returns the code for testing purposes.\n    \n    **Usage:**\n    - Frontend testing and debugging\n    - Integration testing\n    - Email service verification\n    \n    **Security:**\n    - Only available when NODE_ENV=development\n    - Returns OTP code in response for testing\n    - Disabled automatically in production\n    `,\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Test OTP generated successfully',\n    schema: {\n      type: 'object',\n      properties: {\n        success: { type: 'boolean', example: true },\n        message: { type: 'string', example: 'OTP generated and sent' },\n        otp: {\n          type: 'string',\n          example: '123456',\n          description: 'OTP code (only in development mode)',\n        },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 403,\n    description: 'Forbidden - Not available in production',\n    schema: {\n      type: 'object',\n      properties: {\n        statusCode: { type: 'number', example: 403 },\n        message: {\n          type: 'string',\n          example: 'Test endpoints not available in production',\n        },\n        error: { type: 'string', example: 'Forbidden' },\n      },\n    },\n  })\n  @ApiBody({\n    description: 'Email address for testing OTP generation',\n    schema: {\n      type: 'object',\n      properties: {\n        email: {\n          type: 'string',\n          format: 'email',\n          example: 'test@example.com',\n          description: 'Email address for testing OTP generation',\n        },\n      },\n      required: ['email'],\n    },\n  })\n  @Post('test-otp')\n  async testOTP(@Body() { email }: { email: string }) {\n    // Add environment check to your existing implementation\n    if (process.env.NODE_ENV === 'production') {\n      throw new BadRequestException(\n        'Test endpoints not available in production',\n      );\n    }\n\n    try {\n      const otp = await this.otpService.generateOTP(email, 'verification');\n      return {\n        success: true,\n        message: 'OTP generated and sent',\n        // Remove this in production - only for testing\n        otp: process.env.NODE_ENV === 'development' ? otp : undefined,\n      };\n    } catch (error) {\n      this.logger.error('Test OTP error:', error);\n      throw new BadRequestException('Failed to generate OTP');\n    }\n  }\n\n  @ApiOperation({\n    summary: 'Send application status notification',\n    description: `\n    Sends formatted email notification for application status updates.\n    \n    **Supported Statuses:**\n    - Pending (Orange theme)\n    - Approved (Green theme)\n    - Rejected (Red theme)\n    - Ready for Pickup (Blue theme)\n    \n    **Email Features:**\n    - Professional branded templates\n    - Status-specific color coding\n    - Application details included\n    - Responsive design\n    `,\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Application notification sent successfully',\n    schema: {\n      type: 'object',\n      properties: {\n        success: { type: 'boolean', example: true },\n        message: {\n          type: 'string',\n          example: 'Application notification sent successfully',\n        },\n      },\n    },\n  })\n  @ApiBody({\n    description: 'Application notification details',\n    schema: {\n      type: 'object',\n      properties: {\n        email: {\n          type: 'string',\n          format: 'email',\n          example: 'user@example.com',\n          description: 'Recipient email address',\n        },\n        applicationId: {\n          type: 'string',\n          example: 'APP-001',\n          description: 'Application ID',\n        },\n        status: {\n          type: 'string',\n          enum: ['Pending', 'Approved', 'Rejected', 'Ready for Pickup'],\n          example: 'Approved',\n          description: 'Application status',\n        },\n        applicationType: {\n          type: 'string',\n          example: 'Birth Certificate',\n          description: 'Type of application',\n        },\n      },\n      required: ['email', 'applicationId', 'status', 'applicationType'],\n    },\n  })\n  @Post('send-application-notification')\n  async sendApplicationNotification(\n    @Body()\n    notificationDto: {\n      email: string;\n      applicationId: string;\n      status: string;\n      applicationType: string;\n    },\n  ) {\n    try {\n      const { email, applicationId, status, applicationType } = notificationDto;\n\n      await this.emailService.sendApplicationNotification(\n        email,\n        applicationId,\n        status,\n        applicationType,\n      );\n\n      return {\n        success: true,\n        message: 'Application notification sent successfully',\n      };\n    } catch (error) {\n      this.logger.error('Error sending application notification:', error);\n      throw new BadRequestException('Failed to send application notification');\n    }\n  }\n\n  @ApiOperation({\n    summary: 'Send queue notification',\n    description: 'Send email notification for queue position or status updates',\n  })\n  @Post('send-queue-notification')\n  async sendQueueNotification(@Body() notificationDto: QueueNotificationDto) {\n    try {\n      const {\n        email,\n        queueNumber,\n        type,\n        position,\n        estimatedTime,\n        status,\n        message,\n      } = notificationDto;\n\n      if (type === 'position_alert') {\n        // Fix: Ensure position is defined for position alerts\n        if (position === undefined) {\n          throw new BadRequestException(\n            'Position is required for position alerts',\n          );\n        }\n\n        await this.emailService.sendQueuePositionAlert(\n          email,\n          queueNumber,\n          position, // Now guaranteed to be a number\n          estimatedTime || '10 minutes', // Provide default if undefined\n        );\n      } else if (type === 'status_update') {\n        await this.emailService.sendQueueStatusUpdate(\n          email,\n          queueNumber,\n          status || 'now_serving', // Provide default if undefined\n          message || 'Please proceed to the counter',\n        );\n      }\n\n      return {\n        success: true,\n        message: 'Queue notification sent successfully',\n      };\n    } catch (error) {\n      // Don't throw error to avoid breaking queue functionality\n      this.logger.error('Queue notification error:', error);\n      return {\n        success: false,\n        message: 'Failed to send notification, but queue operation continues',\n      };\n    }\n  }\n\n  @ApiOperation({\n    summary: 'Send appointment confirmation notification',\n    description: 'Send email notification when appointment is confirmed',\n  })\n  @ApiBody({\n    description: 'Appointment confirmation notification details',\n    schema: {\n      type: 'object',\n      properties: {\n        email: {\n          type: 'string',\n          format: 'email',\n          example: 'user@example.com',\n          description: 'Email address of appointment holder',\n        },\n        appointmentNumber: {\n          type: 'string',\n          example: 'APPT-2024-001',\n          description: 'Appointment number/ID',\n        },\n        type: {\n          type: 'string',\n          example: 'confirmation',\n          description: 'Type of notification',\n        },\n        appointmentDetails: {\n          type: 'object',\n          description: 'Appointment details',\n          properties: {\n            type: { type: 'string', example: 'Birth Certificate' },\n            date: { type: 'string', example: '2024-01-15' },\n            time: { type: 'string', example: '10:00 AM - 10:30 AM' },\n            firstName: { type: 'string', example: 'John' },\n            lastName: { type: 'string', example: 'Doe' },\n            phoneNumber: { type: 'string', example: '09123456789' },\n          },\n        },\n      },\n      required: ['email', 'appointmentNumber', 'appointmentDetails'],\n    },\n  })\n  @Post('notifications/appointment-confirmation')\n  async sendAppointmentConfirmation(@Body() notificationDto: any) {\n    try {\n      const { email, appointmentNumber, appointmentDetails } = notificationDto;\n\n      // Validate required fields\n      if (!email || !appointmentNumber || !appointmentDetails) {\n        throw new BadRequestException(\n          'Missing required fields: email, appointmentNumber, or appointmentDetails',\n        );\n      }\n\n      await this.emailService.sendAppointmentConfirmation(\n        email,\n        appointmentNumber,\n        appointmentDetails,\n      );\n\n      return {\n        success: true,\n        message: 'Appointment confirmation sent successfully',\n      };\n    } catch (error) {\n      this.logger.error('Error sending appointment confirmation:', error);\n      throw new BadRequestException('Failed to send appointment confirmation');\n    }\n  }\n\n  @ApiOperation({\n    summary: 'Send appointment status update notification',\n    description: 'Send email notification when appointment status changes',\n  })\n  @ApiBody({\n    description: 'Appointment status update notification details',\n    schema: {\n      type: 'object',\n      properties: {\n        email: {\n          type: 'string',\n          format: 'email',\n          example: 'user@example.com',\n          description: 'Email address of appointment holder',\n        },\n        appointmentNumber: {\n          type: 'string',\n          example: 'APPT-2024-001',\n          description: 'Appointment number/ID',\n        },\n        type: {\n          type: 'string',\n          example: 'status_update',\n          description: 'Type of notification',\n        },\n        status: {\n          type: 'string',\n          example: 'confirmed',\n          description: 'New appointment status',\n        },\n        appointmentDetails: {\n          type: 'object',\n          description: 'Appointment details',\n        },\n      },\n      required: ['email', 'appointmentNumber', 'status', 'appointmentDetails'],\n    },\n  })\n  @Post('notifications/appointment-status-update')\n  async sendAppointmentStatusUpdate(@Body() notificationDto: any) {\n    try {\n      const { email, appointmentNumber, status, appointmentDetails } =\n        notificationDto;\n\n      // Validate required fields\n      if (!email || !appointmentNumber || !status || !appointmentDetails) {\n        throw new BadRequestException(\n          'Missing required fields: email, appointmentNumber, status, or appointmentDetails',\n        );\n      }\n\n      await this.emailService.sendAppointmentStatusUpdate(\n        email,\n        appointmentNumber,\n        status,\n        appointmentDetails,\n      );\n\n      return {\n        success: true,\n        message: 'Appointment status update sent successfully',\n      };\n    } catch (error) {\n      this.logger.error('Error sending appointment status update:', error);\n      throw new BadRequestException('Failed to send appointment status update');\n    }\n  }\n\n  @ApiOperation({\n    summary: 'Send appointment cancellation notification',\n    description: 'Send email notification when appointment is cancelled',\n  })\n  @ApiBody({\n    description: 'Appointment cancellation notification details',\n    schema: {\n      type: 'object',\n      properties: {\n        email: {\n          type: 'string',\n          format: 'email',\n          example: 'user@example.com',\n          description: 'Email address of appointment holder',\n        },\n        appointmentNumber: {\n          type: 'string',\n          example: 'APPT-2024-001',\n          description: 'Appointment number/ID',\n        },\n        type: {\n          type: 'string',\n          example: 'cancellation',\n          description: 'Type of notification',\n        },\n        reason: {\n          type: 'string',\n          example: 'Cancelled by administrator',\n          description: 'Cancellation reason',\n        },\n        appointmentDetails: {\n          type: 'object',\n          description: 'Appointment details',\n        },\n      },\n      required: ['email', 'appointmentNumber', 'appointmentDetails'],\n    },\n  })\n  @Post('notifications/appointment-cancellation')\n  async sendAppointmentCancellation(@Body() notificationDto: any) {\n    try {\n      const { email, appointmentNumber, appointmentDetails, reason } =\n        notificationDto;\n\n      // Validate required fields\n      if (!email || !appointmentNumber || !appointmentDetails) {\n        throw new BadRequestException(\n          'Missing required fields: email, appointmentNumber, or appointmentDetails',\n        );\n      }\n\n      await this.emailService.sendAppointmentCancellation(\n        email,\n        appointmentNumber,\n        appointmentDetails,\n        reason,\n      );\n\n      return {\n        success: true,\n        message: 'Appointment cancellation sent successfully',\n      };\n    } catch (error) {\n      this.logger.error('Error sending appointment cancellation:', error);\n      throw new BadRequestException('Failed to send appointment cancellation');\n    }\n  }\n\n  @ApiOperation({\n    summary: 'Send appointment reminder notification',\n    description: 'Send email reminder 24 hours before appointment',\n  })\n  @ApiBody({ type: AppointmentNotificationDto })\n  @Post('notifications/appointment-reminder')\n  async sendAppointmentReminder(\n    @Body() notificationDto: AppointmentNotificationDto,\n  ) {\n    try {\n      const { email, appointmentNumber, appointmentDetails } = notificationDto;\n\n      await this.emailService.sendAppointmentReminder(\n        email,\n        appointmentNumber,\n        appointmentDetails,\n      );\n\n      return {\n        success: true,\n        message: 'Appointment reminder sent successfully',\n      };\n    } catch (error) {\n      this.logger.error('Error sending appointment reminder:', error);\n      throw new BadRequestException('Failed to send appointment reminder');\n    }\n  }\n\n  @Post('notifications/application-confirmation')\n  @ApiOperation({ summary: 'Send application confirmation notification' })\n  async sendApplicationConfirmation(\n    @Body()\n    dto: {\n      email: string;\n      applicationId: string;\n      applicationType: string;\n      applicationSubtype?: string;\n      applicantName: string;\n      submissionDate: string;\n      status: string;\n      statusMessage?: string;\n    },\n  ) {\n    try {\n      this.logger.log(\n        `Sending application confirmation notification to: ${dto.email}`,\n      );\n\n      // Use your existing email service to send application confirmation\n      await this.emailService.sendDocumentApplicationConfirmation(\n        dto.email,\n        dto.applicationId,\n        dto.applicationType,\n        dto.applicationSubtype,\n        dto.applicantName,\n        dto.submissionDate,\n        dto.status,\n      );\n\n      return {\n        success: true,\n        message: 'Application confirmation notification sent successfully',\n      };\n    } catch (error) {\n      this.logger.error(\n        'Error sending application confirmation notification:',\n        error,\n      );\n      throw new BadRequestException(\n        'Failed to send application confirmation notification',\n      );\n    }\n  }\n\n  @Post('notifications/application-status-update')\n  @ApiOperation({ summary: 'Send application status update notification' })\n  async sendApplicationStatusUpdate(\n    @Body()\n    dto: {\n      email: string;\n      applicationId: string;\n      newStatus: string;\n      applicationType: string;\n      applicationSubtype?: string;\n      applicantName: string;\n      previousStatus?: string;\n      statusMessage?: string;\n    },\n  ) {\n    try {\n      this.logger.log(\n        `Sending application status update notification to: ${dto.email}`,\n      );\n\n      // Use your existing email service\n      await this.emailService.sendDocumentApplicationStatusUpdate(\n        dto.email,\n        dto.applicationId,\n        dto.newStatus,\n        dto.applicationType,\n        dto.applicationSubtype,\n        dto.applicantName,\n        dto.previousStatus,\n        dto.statusMessage,\n      );\n\n      return {\n        success: true,\n        message: 'Application status update notification sent successfully',\n      };\n    } catch (error) {\n      this.logger.error(\n        'Error sending application status update notification:',\n        error,\n      );\n      throw new BadRequestException(\n        'Failed to send application status update notification',\n      );\n    }\n  }\n\n  @Post('notifications/application-approval')\n  @ApiOperation({ summary: 'Send application approval notification' })\n  async sendApplicationApproval(\n    @Body()\n    dto: {\n      email: string;\n      applicationId: string;\n      applicationType: string;\n      applicationSubtype?: string;\n      applicantName: string;\n      statusMessage?: string;\n    },\n  ) {\n    try {\n      this.logger.log(\n        `Sending application approval notification to: ${dto.email}`,\n      );\n\n      // Use your existing email service  \n      await this.emailService.sendDocumentApplicationStatusUpdate(\n        dto.email,\n        dto.applicationId,\n        'approved',\n        dto.applicationType,\n        dto.applicationSubtype,\n        dto.applicantName,\n        undefined, // previousStatus\n        dto.statusMessage,\n      );\n\n      return {\n        success: true,\n        message: 'Application approval notification sent successfully',\n      };\n    } catch (error) {\n      this.logger.error(\n        'Error sending application approval notification:',\n        error,\n      );\n      throw new BadRequestException(\n        'Failed to send application approval notification',\n      );\n    }\n  }\n\n  @Post('notifications/application-rejection')\n  @ApiOperation({ summary: 'Send application rejection notification' })\n  async sendApplicationRejection(\n    @Body()\n    dto: {\n      email: string;\n      applicationId: string;\n      applicationType: string;\n      applicationSubtype?: string;\n      applicantName: string;\n      rejectionReason: string;\n      statusMessage?: string;\n    },\n  ) {\n    try {\n      this.logger.log(\n        `Sending application rejection notification to: ${dto.email}`,\n      );\n\n      // Use your existing email service\n      await this.emailService.sendDocumentApplicationRejection(\n        dto.email,\n        dto.applicationId,\n        dto.applicationType,\n        dto.applicationSubtype,\n        dto.applicantName,\n        dto.rejectionReason,\n        dto.statusMessage,\n      );\n\n      return {\n        success: true,\n        message: 'Application rejection notification sent successfully',\n      };\n    } catch (error) {\n      this.logger.error(\n        'Error sending application rejection notification:',\n        error,\n      );\n      throw new BadRequestException(\n        'Failed to send application rejection notification',\n      );\n    }\n  }\n\n  @Post('check-lockout')\n  @ApiOperation({ summary: 'Check if account is locked' })\n  async checkAccountLockout(@Body() { identifier }: { identifier: string }) {\n    try {\n      const lockoutData = await this.authService.getAccountLockout(identifier);\n\n      if (lockoutData?.lockedUntil && lockoutData.lockedUntil > new Date()) {\n        const timeRemaining = Math.ceil(\n          (lockoutData.lockedUntil.getTime() - Date.now()) / 1000,\n        );\n        return {\n          isLocked: true,\n          timeRemaining,\n          attemptsUsed: lockoutData.attempts,\n          lockedUntil: lockoutData.lockedUntil,\n        };\n      }\n\n      return {\n        isLocked: false,\n        attempts: lockoutData?.attempts || 0,\n      };\n    } catch (error) {\n      this.logger.error('Error checking account lockout:', error);\n      return {\n        isLocked: false,\n        attempts: 0,\n      };\n    }\n  }\n\n  @Post('record-failed-attempt')\n  @ApiOperation({ summary: 'Record failed login attempt' })\n  async recordFailedAttempt(@Body() { identifier }: { identifier: string }) {\n    try {\n      return await this.authService.recordFailedLoginAttempt(identifier);\n    } catch (error) {\n      this.logger.error('Error recording failed attempt:', error);\n      throw new BadRequestException('Failed to record login attempt');\n    }\n  }\n\n  @Post('clear-lockout')\n  @ApiOperation({ summary: 'Clear account lockout on successful login' })\n  async clearAccountLockout(@Body() { identifier }: { identifier: string }) {\n    try {\n      return await this.authService.clearAccountLockout(identifier);\n    } catch (error) {\n      this.logger.error('Error clearing account lockout:', error);\n      throw new BadRequestException('Failed to clear account lockout');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser-1.html":{"url":"interfaces/RequestWithUser-1.html","title":"interface - RequestWithUser-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/decorators/user.decorator.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         AuthenticatedUser\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AuthenticatedUser\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { createParamDecorator, ExecutionContext } from '@nestjs/common';\nimport { AuthenticatedUser } from '../jwt.strategy';\n\ninterface RequestWithUser {\n  user: AuthenticatedUser;\n}\n\nexport const User = createParamDecorator(\n  (data: unknown, ctx: ExecutionContext): AuthenticatedUser => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.user;\n  },\n);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser-2.html":{"url":"interfaces/RequestWithUser-2.html","title":"interface - RequestWithUser-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/roles.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ROLES_KEY } from '../decorators/roles.decorator';\n\n// Define interface for request with user\ninterface RequestWithUser extends Request {\n  user?: {\n    roles?: Array | string[];\n  };\n}\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(\n      ROLES_KEY,\n      [context.getHandler(), context.getClass()],\n    );\n\n    if (!requiredRoles) {\n      return true;\n    }\n\n    const request = context.switchToHttp().getRequest();\n    const userRoles = request.user?.roles || [];\n\n    // Handle both string array and object array formats\n    const roleNames = userRoles.map((role: string | { name: string }) =>\n      typeof role === 'string' ? role : (role as { name: string }).name,\n    );\n\n    return requiredRoles.some((role) => roleNames.includes(role));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResetPasswordDto.html":{"url":"classes/ResetPasswordDto.html","title":"class - ResetPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResetPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/otp.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                newPassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                otp\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Email address', example: 'user@example.com', format: 'email'})@IsEmail({}, {message: 'Please provide a valid email address'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/otp.dto.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'New password (must meet complexity requirements)', example: 'NewSecure123!', minLength: 8, pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$'})@IsString()@Length(8, 100, {message: 'Password must be at least 8 characters long'})@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/, {message: 'Password must contain uppercase, lowercase, numbers, and special characters'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/otp.dto.ts:106\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        otp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: '6-digit OTP code received via email', example: '123456', minLength: 6, maxLength: 6, pattern: '^[0-9]{6}$'})@IsString()@Length(6, 6, {message: 'OTP must be exactly 6 digits'})@Matches(/^[0-9]{6}$/, {message: 'OTP must contain only numbers'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/otp.dto.ts:91\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsString,\n  IsOptional,\n  Length,\n  Matches,\n} from 'class-validator';\n\nexport class SendOtpDto {\n  @ApiProperty({\n    description: 'Email address to send OTP to',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiPropertyOptional({\n    description: 'Purpose of the OTP',\n    example: 'verification',\n    enum: ['verification', 'password_reset'],\n    default: 'verification',\n  })\n  @IsString()\n  @IsOptional()\n  purpose?: string = 'verification';\n}\n\nexport class VerifyOtpDto {\n  @ApiProperty({\n    description: 'Email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    description: '6-digit OTP code',\n    example: '123456',\n    minLength: 6,\n    maxLength: 6,\n    pattern: '^[0-9]{6}$',\n  })\n  @IsString()\n  @Length(6, 6, { message: 'OTP must be exactly 6 digits' })\n  @Matches(/^[0-9]{6}$/, { message: 'OTP must contain only numbers' })\n  otp: string;\n\n  @ApiPropertyOptional({\n    description: 'Purpose of the OTP verification',\n    example: 'verification',\n    enum: ['verification', 'password_reset'],\n    default: 'verification',\n  })\n  @IsString()\n  @IsOptional()\n  purpose?: string = 'verification';\n}\n\nexport class ForgotPasswordDto {\n  @ApiProperty({\n    description: 'Registered email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n}\n\nexport class ResetPasswordDto {\n  @ApiProperty({\n    description: 'Email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    description: '6-digit OTP code received via email',\n    example: '123456',\n    minLength: 6,\n    maxLength: 6,\n    pattern: '^[0-9]{6}$',\n  })\n  @IsString()\n  @Length(6, 6, { message: 'OTP must be exactly 6 digits' })\n  @Matches(/^[0-9]{6}$/, { message: 'OTP must contain only numbers' })\n  otp: string;\n\n  @ApiProperty({\n    description: 'New password (must meet complexity requirements)',\n    example: 'NewSecure123!',\n    minLength: 8,\n    pattern:\n      '^(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)(?=.*[@$!%*?&])[A-Za-z\\\\d@$!%*?&]{8,}$',\n  })\n  @IsString()\n  @Length(8, 100, { message: 'Password must be at least 8 characters long' })\n  @Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/, {\n    message:\n      'Password must contain uppercase, lowercase, numbers, and special characters',\n  })\n  newPassword: string;\n}\n\nexport class TestOtpDto {\n  @ApiProperty({\n    description: 'Email address for testing OTP generation',\n    example: 'test@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n}\n\nexport class ApplicationNotificationDto {\n  @ApiProperty({\n    description: 'Recipient email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    description: 'Application ID',\n    example: 'APP-001',\n  })\n  @IsString()\n  applicationId: string;\n\n  @ApiProperty({\n    description: 'Application status',\n    example: 'Approved',\n    enum: ['Pending', 'Approved', 'Rejected', 'Ready for Pickup'],\n  })\n  @IsString()\n  status: string;\n\n  @ApiProperty({\n    description: 'Type of application',\n    example: 'Birth Certificate',\n  })\n  @IsString()\n  applicationType: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Role.html":{"url":"entities/Role.html","title":"entity - Role","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Role\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/entities/role.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, user => user.roles)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:16\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, PrimaryGeneratedColumn, ManyToMany } from 'typeorm';\nimport { User } from '../../users/entities/user.entity';\n\n@Entity('roles')\nexport class Role {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true, nullable: false })\n  name: string;\n\n  @Column({ nullable: true })\n  description: string;\n\n  @ManyToMany(() => User, (user) => user.roles)\n  users: User[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RolesController.html":{"url":"controllers/RolesController.html","title":"controller - RolesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RolesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/roles.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                roles\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                getUserRoles\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@Roles('admin', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/roles/roles.controller.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@Roles('admin', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/roles/roles.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getUserRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserRoles(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('user/:userId')@Roles('admin', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/roles/roles.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, UseGuards } from '@nestjs/common';\nimport { RolesService } from './roles.service';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../auth/guards/roles.guard';\nimport { Roles } from '../auth/decorators/roles.decorator';\n\n@Controller('roles')\n@UseGuards(JwtAuthGuard, RolesGuard)\nexport class RolesController {\n  constructor(private readonly rolesService: RolesService) {}\n\n  @Get()\n  @Roles('admin', 'super_admin')\n  findAll() {\n    return this.rolesService.findAll();\n  }\n\n  @Get(':id')\n  @Roles('admin', 'super_admin')\n  findOne(@Param('id') id: string) {\n    return this.rolesService.findOne(+id);\n  }\n\n  @Get('user/:userId')\n  @Roles('admin', 'super_admin')\n  getUserRoles(@Param('userId') userId: string) {\n    return this.rolesService.getUserRoles(+userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/roles.guard.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/roles.guard.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ROLES_KEY } from '../decorators/roles.decorator';\n\n// Define interface for request with user\ninterface RequestWithUser extends Request {\n  user?: {\n    roles?: Array | string[];\n  };\n}\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(\n      ROLES_KEY,\n      [context.getHandler(), context.getClass()],\n    );\n\n    if (!requiredRoles) {\n      return true;\n    }\n\n    const request = context.switchToHttp().getRequest();\n    const userRoles = request.user?.roles || [];\n\n    // Handle both string array and object array formats\n    const roleNames = userRoles.map((role: string | { name: string }) =>\n      typeof role === 'string' ? role : (role as { name: string }).name,\n    );\n\n    return requiredRoles.some((role) => roleNames.includes(role));\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RolesModule.html":{"url":"modules/RolesModule.html","title":"module - RolesModule","body":"\n                   \n\n\n\n\n    Modules\n    RolesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_providers\n\n\n\ncluster_RolesModule_exports\n\n\n\n\nRolesService \n\nRolesService \n\n\n\nRolesModule\n\nRolesModule\n\nRolesService  -->\n\nRolesModule->RolesService \n\n\n\n\n\nRolesService\n\nRolesService\n\nRolesModule -->\n\nRolesService->RolesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/roles/roles.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RolesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RolesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RolesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Role } from './entities/role.entity';\nimport { User } from '../users/entities/user.entity';\nimport { RolesService } from './roles.service';\nimport { RolesController } from './roles.controller';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Role, User])],\n  providers: [RolesService],\n  controllers: [RolesController],\n  exports: [RolesService],\n})\nexport class RolesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RolesService.html":{"url":"injectables/RolesService.html","title":"injectable - RolesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RolesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/roles.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                assignRolesToUser\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByName\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getUserRoles\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(rolesRepository: Repository, usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/roles/roles.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        rolesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        assignRolesToUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    assignRolesToUser(userId: number, roleIds: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roleIds\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByName\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByName(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserRoles(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, In } from 'typeorm';\nimport { Role } from './entities/role.entity';\nimport { User } from '../users/entities/user.entity';\n\n@Injectable()\nexport class RolesService {\n  constructor(\n    @InjectRepository(Role)\n    private rolesRepository: Repository,\n\n    @InjectRepository(User)\n    private usersRepository: Repository,\n  ) {}\n\n  async findAll(): Promise {\n    return this.rolesRepository.find();\n  }\n\n  async findOne(id: number): Promise {\n    const role = await this.rolesRepository.findOne({ where: { id } });\n    if (!role) {\n      throw new NotFoundException(`Role with ID ${id} not found`);\n    }\n    return role;\n  }\n\n  async findByName(name: string): Promise {\n    const role = await this.rolesRepository.findOne({ where: { name } });\n    if (!role) {\n      throw new NotFoundException(`Role with name ${name} not found`);\n    }\n    return role;\n  }\n\n  async getUserRoles(userId: number): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id: userId },\n      relations: ['roles'],\n    });\n    return user ? user.roles : [];\n  }\n\n  async assignRolesToUser(userId: number, roleIds: number[]): Promise {\n    // Find the user\n    const user = await this.usersRepository.findOne({\n      where: { id: userId },\n      relations: ['roles'],\n    });\n\n    if (!user) {\n      throw new Error('User not found');\n    }\n\n    // Find the roles using In operator (replaces deprecated findByIds)\n    const roles = await this.rolesRepository.findBy({\n      id: In(roleIds),\n    });\n\n    // Assign roles to user\n    user.roles = roles;\n    await this.usersRepository.save(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SendOtpDto.html":{"url":"classes/SendOtpDto.html","title":"class - SendOtpDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SendOtpDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/otp.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                purpose\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Email address to send OTP to', example: 'user@example.com', format: 'email'})@IsEmail({}, {message: 'Please provide a valid email address'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/otp.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        purpose\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'verification'\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Purpose of the OTP', example: 'verification', enum: undefined, default: 'verification'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/otp.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsString,\n  IsOptional,\n  Length,\n  Matches,\n} from 'class-validator';\n\nexport class SendOtpDto {\n  @ApiProperty({\n    description: 'Email address to send OTP to',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiPropertyOptional({\n    description: 'Purpose of the OTP',\n    example: 'verification',\n    enum: ['verification', 'password_reset'],\n    default: 'verification',\n  })\n  @IsString()\n  @IsOptional()\n  purpose?: string = 'verification';\n}\n\nexport class VerifyOtpDto {\n  @ApiProperty({\n    description: 'Email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    description: '6-digit OTP code',\n    example: '123456',\n    minLength: 6,\n    maxLength: 6,\n    pattern: '^[0-9]{6}$',\n  })\n  @IsString()\n  @Length(6, 6, { message: 'OTP must be exactly 6 digits' })\n  @Matches(/^[0-9]{6}$/, { message: 'OTP must contain only numbers' })\n  otp: string;\n\n  @ApiPropertyOptional({\n    description: 'Purpose of the OTP verification',\n    example: 'verification',\n    enum: ['verification', 'password_reset'],\n    default: 'verification',\n  })\n  @IsString()\n  @IsOptional()\n  purpose?: string = 'verification';\n}\n\nexport class ForgotPasswordDto {\n  @ApiProperty({\n    description: 'Registered email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n}\n\nexport class ResetPasswordDto {\n  @ApiProperty({\n    description: 'Email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    description: '6-digit OTP code received via email',\n    example: '123456',\n    minLength: 6,\n    maxLength: 6,\n    pattern: '^[0-9]{6}$',\n  })\n  @IsString()\n  @Length(6, 6, { message: 'OTP must be exactly 6 digits' })\n  @Matches(/^[0-9]{6}$/, { message: 'OTP must contain only numbers' })\n  otp: string;\n\n  @ApiProperty({\n    description: 'New password (must meet complexity requirements)',\n    example: 'NewSecure123!',\n    minLength: 8,\n    pattern:\n      '^(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)(?=.*[@$!%*?&])[A-Za-z\\\\d@$!%*?&]{8,}$',\n  })\n  @IsString()\n  @Length(8, 100, { message: 'Password must be at least 8 characters long' })\n  @Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/, {\n    message:\n      'Password must contain uppercase, lowercase, numbers, and special characters',\n  })\n  newPassword: string;\n}\n\nexport class TestOtpDto {\n  @ApiProperty({\n    description: 'Email address for testing OTP generation',\n    example: 'test@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n}\n\nexport class ApplicationNotificationDto {\n  @ApiProperty({\n    description: 'Recipient email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    description: 'Application ID',\n    example: 'APP-001',\n  })\n  @IsString()\n  applicationId: string;\n\n  @ApiProperty({\n    description: 'Application status',\n    example: 'Approved',\n    enum: ['Pending', 'Approved', 'Rejected', 'Ready for Pickup'],\n  })\n  @IsString()\n  status: string;\n\n  @ApiProperty({\n    description: 'Type of application',\n    example: 'Birth Certificate',\n  })\n  @IsString()\n  applicationType: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TestOtpDto.html":{"url":"classes/TestOtpDto.html","title":"class - TestOtpDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TestOtpDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/otp.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Email address for testing OTP generation', example: 'test@example.com', format: 'email'})@IsEmail({}, {message: 'Please provide a valid email address'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/otp.dto.ts:116\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsString,\n  IsOptional,\n  Length,\n  Matches,\n} from 'class-validator';\n\nexport class SendOtpDto {\n  @ApiProperty({\n    description: 'Email address to send OTP to',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiPropertyOptional({\n    description: 'Purpose of the OTP',\n    example: 'verification',\n    enum: ['verification', 'password_reset'],\n    default: 'verification',\n  })\n  @IsString()\n  @IsOptional()\n  purpose?: string = 'verification';\n}\n\nexport class VerifyOtpDto {\n  @ApiProperty({\n    description: 'Email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    description: '6-digit OTP code',\n    example: '123456',\n    minLength: 6,\n    maxLength: 6,\n    pattern: '^[0-9]{6}$',\n  })\n  @IsString()\n  @Length(6, 6, { message: 'OTP must be exactly 6 digits' })\n  @Matches(/^[0-9]{6}$/, { message: 'OTP must contain only numbers' })\n  otp: string;\n\n  @ApiPropertyOptional({\n    description: 'Purpose of the OTP verification',\n    example: 'verification',\n    enum: ['verification', 'password_reset'],\n    default: 'verification',\n  })\n  @IsString()\n  @IsOptional()\n  purpose?: string = 'verification';\n}\n\nexport class ForgotPasswordDto {\n  @ApiProperty({\n    description: 'Registered email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n}\n\nexport class ResetPasswordDto {\n  @ApiProperty({\n    description: 'Email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    description: '6-digit OTP code received via email',\n    example: '123456',\n    minLength: 6,\n    maxLength: 6,\n    pattern: '^[0-9]{6}$',\n  })\n  @IsString()\n  @Length(6, 6, { message: 'OTP must be exactly 6 digits' })\n  @Matches(/^[0-9]{6}$/, { message: 'OTP must contain only numbers' })\n  otp: string;\n\n  @ApiProperty({\n    description: 'New password (must meet complexity requirements)',\n    example: 'NewSecure123!',\n    minLength: 8,\n    pattern:\n      '^(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)(?=.*[@$!%*?&])[A-Za-z\\\\d@$!%*?&]{8,}$',\n  })\n  @IsString()\n  @Length(8, 100, { message: 'Password must be at least 8 characters long' })\n  @Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/, {\n    message:\n      'Password must contain uppercase, lowercase, numbers, and special characters',\n  })\n  newPassword: string;\n}\n\nexport class TestOtpDto {\n  @ApiProperty({\n    description: 'Email address for testing OTP generation',\n    example: 'test@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n}\n\nexport class ApplicationNotificationDto {\n  @ApiProperty({\n    description: 'Recipient email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    description: 'Application ID',\n    example: 'APP-001',\n  })\n  @IsString()\n  applicationId: string;\n\n  @ApiProperty({\n    description: 'Application status',\n    example: 'Approved',\n    enum: ['Pending', 'Approved', 'Rejected', 'Ready for Pickup'],\n  })\n  @IsString()\n  status: string;\n\n  @ApiProperty({\n    description: 'Type of application',\n    example: 'Birth Certificate',\n  })\n  @IsString()\n  applicationType: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAnnouncementDto.html":{"url":"classes/UpdateAnnouncementDto.html","title":"class - UpdateAnnouncementDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAnnouncementDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/announcement/dto/update-announcement.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateAnnouncementDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateAnnouncementDto } from './create-announcement.dto';\n\nexport class UpdateAnnouncementDto extends PartialType(CreateAnnouncementDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAppointmentDto.html":{"url":"classes/UpdateAppointmentDto.html","title":"class - UpdateAppointmentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAppointmentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/appointment/dto/update-appointment.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateAppointmentDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AppointmentStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEnum(AppointmentStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/update-appointment.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { IsOptional, IsEnum } from 'class-validator';\nimport { CreateAppointmentDto } from './create-appointment.dto';\nimport { AppointmentStatus } from '../entities/appointment.entity';\n\nexport class UpdateAppointmentDto extends PartialType(CreateAppointmentDto) {\n  @IsOptional()\n  @IsEnum(AppointmentStatus)\n  status?: AppointmentStatus;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateDocumentApplicationDto.html":{"url":"classes/UpdateDocumentApplicationDto.html","title":"class - UpdateDocumentApplicationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateDocumentApplicationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/document-applications/dto/update-document-application.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(\n  CreateDocumentApplicationDto,\n)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                statusMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ApplicationStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: ApplicationStatus, description: 'Application status', example: undefined, required: false})@IsOptional()@IsEnum(ApplicationStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/dto/update-document-application.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        statusMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Status message', example: 'Application approved and ready for pickup', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/dto/update-document-application.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateDocumentApplicationDto } from './create-document-application.dto';\nimport { IsEnum, IsOptional, IsString } from 'class-validator';\nimport { ApplicationStatus } from '../entities/document-application.entity';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class UpdateDocumentApplicationDto extends PartialType(\n  CreateDocumentApplicationDto,\n) {\n  @ApiProperty({\n    enum: ApplicationStatus,\n    description: 'Application status',\n    example: ApplicationStatus.APPROVED,\n    required: false,\n  })\n  @IsOptional()\n  @IsEnum(ApplicationStatus)\n  status?: ApplicationStatus;\n\n  @ApiProperty({\n    description: 'Status message',\n    example: 'Application approved and ready for pickup',\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  statusMessage?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateQueueDto.html":{"url":"classes/UpdateQueueDto.html","title":"class - UpdateQueueDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateQueueDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/dto/update-queue.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                counterNumber\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        counterNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/update-queue.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueueStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(QueueStatus)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/update-queue.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsEnum, IsOptional } from 'class-validator';\nimport { QueueStatus } from '../entities/queue.entity';\n\nexport class UpdateQueueDto {\n  @IsEnum(QueueStatus)\n  @IsOptional()\n  status?: QueueStatus;\n\n  @IsString()\n  @IsOptional()\n  counterNumber?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/update-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for updating user information (citizen)\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                contactNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                middleName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                nameExtension\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Complete address', example: '123 Main St, San Ildefonso, Bulacan'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        contactNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Contact number', example: '09123456789'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User email address', example: 'test@example.com'})@IsEmail()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'First name', example: 'John'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Last name', example: 'Doe'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Middle name', example: 'Robert'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        nameExtension\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Name extension (e.g., Jr., III)', example: 'Jr.'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User password (min 8 characters)', example: 'password123', minLength: 8})@IsString()@IsOptional()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Username', example: 'john_doe'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsOptional,\n  IsString,\n  MinLength,\n  IsNumber,\n  IsArray,\n} from 'class-validator';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\n/**\n * DTO for updating user information (citizen)\n * @class UpdateUserDto\n */\nexport class UpdateUserDto {\n  @ApiPropertyOptional({\n    description: 'User email address',\n    example: 'test@example.com',\n  })\n  @IsEmail()\n  @IsOptional()\n  email?: string;\n\n  @ApiPropertyOptional({ description: 'Username', example: 'john_doe' })\n  @IsString()\n  @IsOptional()\n  username?: string;\n\n  @ApiPropertyOptional({\n    description: 'User password (min 8 characters)',\n    example: 'password123',\n    minLength: 8,\n  })\n  @IsString()\n  @IsOptional()\n  @MinLength(8)\n  password?: string;\n\n  @ApiPropertyOptional({ description: 'First name', example: 'John' })\n  @IsString()\n  @IsOptional()\n  firstName?: string;\n\n  @ApiPropertyOptional({ description: 'Middle name', example: 'Robert' })\n  @IsString()\n  @IsOptional()\n  middleName?: string;\n\n  @ApiPropertyOptional({ description: 'Last name', example: 'Doe' })\n  @IsString()\n  @IsOptional()\n  lastName?: string;\n\n  @ApiPropertyOptional({\n    description: 'Name extension (e.g., Jr., III)',\n    example: 'Jr.',\n  })\n  @IsString()\n  @IsOptional()\n  nameExtension?: string;\n\n  @ApiPropertyOptional({\n    description: 'Contact number',\n    example: '09123456789',\n  })\n  @IsString()\n  @IsOptional()\n  contactNumber?: string;\n\n  @ApiPropertyOptional({\n    description: 'Complete address',\n    example: '123 Main St, San Ildefonso, Bulacan',\n  })\n  @IsString()\n  @IsOptional()\n  address?: string;\n}\n\n/**\n * DTO for admin to update any user\n * @class AdminUpdateUserDto\n */\nexport class AdminUpdateUserDto extends UpdateUserDto {\n  @ApiPropertyOptional({\n    description: 'Default role ID for the user',\n    example: 2,\n  })\n  @IsNumber()\n  @IsOptional()\n  defaultRoleId?: number;\n\n  @ApiPropertyOptional({\n    description: 'Array of role IDs to assign to the user',\n    example: [1, 2],\n    type: [Number],\n  })\n  @IsArray()\n  @IsOptional()\n  roleIds?: number[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserStatusDto.html":{"url":"classes/UpdateUserStatusDto.html","title":"class - UpdateUserStatusDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserStatusDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user-status.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                isActive\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: true, description: 'User active status'})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user-status.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsBoolean } from 'class-validator';\n\nexport class UpdateUserStatusDto {\n  @ApiProperty({\n    example: true,\n    description: 'User active status',\n  })\n  @IsBoolean()\n  isActive: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                contactNumber\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                defaultRole\n                            \n                            \n                                    \n                                defaultRoleId\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                middleName\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                nameExtension\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                roles\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        contactNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'contact_number', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        defaultRole\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {nullable: true})@JoinColumn({name: 'default_role_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        defaultRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'default_role_id', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'first_name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'is_active', default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'last_name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'middle_name', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        nameExtension\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'name_extension', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined)@JoinTable({name: 'user_roles', joinColumn: undefined, inverseJoinColumn: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({name: 'updated_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:23\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  ManyToOne,\n  JoinColumn,\n  ManyToMany,\n  JoinTable,\n} from 'typeorm';\nimport { Role } from '../../roles/entities/role.entity';\n\n@Entity('users')\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true })\n  email: string;\n\n  @Column({ unique: true })\n  username: string;\n\n  @Column()\n  password: string;\n\n  @Column({ name: 'first_name' })\n  firstName: string;\n\n  @Column({ name: 'middle_name', nullable: true })\n  middleName: string;\n\n  @Column({ name: 'last_name' })\n  lastName: string;\n\n  @Column()\n  name: string; // Keep for backward compatibility\n\n  @Column({ name: 'name_extension', nullable: true })\n  nameExtension: string;\n\n  @Column({ name: 'contact_number', nullable: true })\n  contactNumber: string;\n\n  @Column({ name: 'is_active', default: true })\n  isActive: boolean;\n\n  @CreateDateColumn({ name: 'created_at' })\n  createdAt: Date;\n\n  @UpdateDateColumn({ name: 'updated_at' })\n  updatedAt: Date;\n\n  @ManyToOne(() => Role, { nullable: true })\n  @JoinColumn({ name: 'default_role_id' })\n  defaultRole: Role;\n\n  @Column({ name: 'default_role_id', nullable: true })\n  defaultRoleId: number;\n\n  @ManyToMany(() => Role)\n  @JoinTable({\n    name: 'user_roles',\n    joinColumn: {\n      name: 'user_id',\n      referencedColumnName: 'id',\n    },\n    inverseJoinColumn: {\n      name: 'role_id',\n      referencedColumnName: 'id',\n    },\n  })\n  roles: Role[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserQueryDto.html":{"url":"classes/UserQueryDto.html","title":"class - UserQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/user-query.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                role\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                search\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 10, description: 'Number of items per page', minimum: 1})@IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-query.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 1, description: 'Page number', minimum: 1})@IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-query.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'citizen', description: 'Filter by role'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-query.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        search\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'john', description: 'Search term for name, email, or username'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-query.dto.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { IsOptional, IsString, IsNumber, Min } from 'class-validator';\nimport { Type } from 'class-transformer';\n\nexport class UserQueryDto {\n  @ApiPropertyOptional({\n    example: 1,\n    description: 'Page number',\n    minimum: 1,\n  })\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  page?: number = 1;\n\n  @ApiPropertyOptional({\n    example: 10,\n    description: 'Number of items per page',\n    minimum: 1,\n  })\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  limit?: number = 10;\n\n  @ApiPropertyOptional({\n    example: 'john',\n    description: 'Search term for name, email, or username',\n  })\n  @IsOptional()\n  @IsString()\n  search?: string;\n\n  @ApiPropertyOptional({\n    example: 'citizen',\n    description: 'Filter by role',\n  })\n  @IsOptional()\n  @IsString()\n  role?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserResponseDto.html":{"url":"classes/UserResponseDto.html","title":"class - UserResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/user-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                contactNumber\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                defaultRole\n                            \n                            \n                                    \n                                    Optional\n                                defaultRoleId\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    Optional\n                                middleName\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    Optional\n                                nameExtension\n                            \n                            \n                                    \n                                roles\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    Optional\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        contactNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '+639123456789', description: 'Contact number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2024-01-01T00:00:00.000Z', description: 'User creation date'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        defaultRole\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'citizen', description: 'Default role name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:87\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        defaultRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 4, description: 'Default role ID'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'john.doe@example.com', description: 'User email address'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'John', description: 'User first name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 1, description: 'User ID'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: true, description: 'User active status'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Doe', description: 'User last name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'Miguel', description: 'User middle name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'John Miguel Doe', description: 'Full name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        nameExtension\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'Jr.', description: 'Name extension'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined, description: 'User roles', type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2024-01-01T00:00:00.000Z', description: 'User last update date'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'johndoe', description: 'Username'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class UserResponseDto {\n  @ApiProperty({\n    example: 1,\n    description: 'User ID',\n  })\n  id: number;\n\n  @ApiProperty({\n    example: 'john.doe@example.com',\n    description: 'User email address',\n  })\n  email: string;\n\n  @ApiPropertyOptional({\n    example: 'johndoe',\n    description: 'Username',\n  })\n  username?: string;\n\n  @ApiProperty({\n    example: 'John',\n    description: 'User first name',\n  })\n  firstName: string;\n\n  @ApiPropertyOptional({\n    example: 'Miguel',\n    description: 'User middle name',\n  })\n  middleName?: string;\n\n  @ApiProperty({\n    example: 'Doe',\n    description: 'User last name',\n  })\n  lastName: string;\n\n  @ApiProperty({\n    example: 'John Miguel Doe',\n    description: 'Full name',\n  })\n  name: string;\n\n  @ApiPropertyOptional({\n    example: 'Jr.',\n    description: 'Name extension',\n  })\n  nameExtension?: string;\n\n  @ApiProperty({\n    example: '+639123456789',\n    description: 'Contact number',\n  })\n  contactNumber: string;\n\n  @ApiProperty({\n    example: true,\n    description: 'User active status',\n  })\n  isActive: boolean;\n\n  @ApiProperty({\n    example: '2024-01-01T00:00:00.000Z',\n    description: 'User creation date',\n  })\n  createdAt: Date;\n\n  @ApiProperty({\n    example: '2024-01-01T00:00:00.000Z',\n    description: 'User last update date',\n  })\n  updatedAt: Date;\n\n  @ApiProperty({\n    example: ['citizen', 'staff'],\n    description: 'User roles',\n    type: [String],\n  })\n  roles: string[];\n\n  @ApiProperty({\n    example: 'citizen',\n    description: 'Default role name',\n  })\n  defaultRole: string;\n\n  @ApiPropertyOptional({\n    example: 4,\n    description: 'Default role ID',\n  })\n  defaultRoleId?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserStats.html":{"url":"interfaces/UserStats.html","title":"interface - UserStats","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserStats\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            activeUsers\n                                        \n                                \n                                \n                                        \n                                            inactiveUsers\n                                        \n                                \n                                \n                                        \n                                            recentUsers\n                                        \n                                \n                                \n                                        \n                                            totalUsers\n                                        \n                                \n                                \n                                        \n                                            usersByRole\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        activeUsers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        activeUsers:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        inactiveUsers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        inactiveUsers:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        recentUsers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        recentUsers:         Omit[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Omit[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        totalUsers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        totalUsers:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        usersByRole\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        usersByRole:     literal type[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  BadRequestException,\n  ConflictException,\n  Logger,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, Like, In } from 'typeorm';\nimport { User } from './entities/user.entity';\nimport { AdminUpdateUserDto } from '../auth/dto/update-user.dto'; // Import from auth module\nimport { RolesService } from '../roles/roles.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport * as bcrypt from 'bcrypt';\n\ninterface FindAllOptions {\n  page: number;\n  limit: number;\n  search?: string;\n  role?: string;\n}\n\nexport interface UserStats {\n  totalUsers: number;\n  activeUsers: number;\n  inactiveUsers: number;\n  usersByRole: { roleName: string; count: number }[];\n  recentUsers: Omit[];\n}\n\n@Injectable()\nexport class UsersService {\n  private readonly logger = new Logger(UsersService.name);\n\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n    private rolesService: RolesService,\n  ) {}\n\n  async findAll(options: FindAllOptions) {\n    const { page, limit, search, role } = options;\n    const skip = (page - 1) * limit;\n\n    const queryBuilder = this.usersRepository\n      .createQueryBuilder('user')\n      .leftJoinAndSelect('user.defaultRole', 'defaultRole')\n      .leftJoinAndSelect('user.roles', 'roles');\n\n    // Apply search filter\n    if (search) {\n      queryBuilder.where(\n        '(user.firstName LIKE :search OR user.lastName LIKE :search OR user.email LIKE :search OR user.username LIKE :search)',\n        { search: `%${search}%` },\n      );\n    }\n\n    // Apply role filter\n    if (role) {\n      queryBuilder.andWhere('roles.name = :role', { role });\n    }\n\n    queryBuilder.orderBy('user.createdAt', 'DESC').skip(skip).take(limit);\n\n    const [users, total] = await queryBuilder.getManyAndCount();\n\n    // Remove passwords from response\n    const sanitizedUsers = users.map((user) => {\n      const { password, ...userWithoutPassword } = user;\n      return {\n        ...userWithoutPassword,\n        roles: user.roles.map((role) => role.name),\n        defaultRole: user.defaultRole?.name || 'citizen',\n      };\n    });\n\n    return {\n      users: sanitizedUsers,\n      total,\n      page,\n      limit,\n      totalPages: Math.ceil(total / limit),\n    };\n  }\n\n  async findOne(id: number): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id },\n      relations: ['defaultRole', 'roles'],\n    });\n\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    // Remove password and format response\n\n    const { password, ...userWithoutPassword } = user;\n    return {\n      ...userWithoutPassword,\n      roles: user.roles.map((role) => role.name),\n      defaultRole: user.defaultRole?.name || 'citizen',\n    };\n  }\n\n  // Admin-only update method\n  async adminUpdate(\n    id: number,\n    updateUserDto: AdminUpdateUserDto,\n  ): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id },\n      relations: ['roles'],\n    });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    const {\n      email,\n\n      username,\n\n      firstName,\n\n      middleName,\n\n      lastName,\n\n      nameExtension,\n\n      contactNumber,\n\n      roleIds,\n\n      defaultRoleId,\n    } = updateUserDto;\n\n    // Check email uniqueness if being updated\n    if (email && email !== user.email) {\n      const existingUser = await this.usersRepository.findOne({\n        where: { email },\n      });\n      if (existingUser) {\n        throw new ConflictException('Email already exists');\n      }\n    }\n\n    // Check username uniqueness if being updated\n    if (username && username !== user.username) {\n      const existingUser = await this.usersRepository.findOne({\n        where: { username },\n      });\n      if (existingUser) {\n        throw new ConflictException('Username already exists');\n      }\n    }\n\n    // Update fields\n    const updateData: any = {};\n\n    if (email) updateData.email = email;\n    if (username) updateData.username = username;\n    if (firstName) updateData.firstName = firstName;\n    if (lastName) updateData.lastName = lastName;\n    if (contactNumber) updateData.contactNumber = contactNumber;\n\n    // Handle optional fields\n    if (middleName !== undefined) updateData.middleName = middleName;\n    if (nameExtension !== undefined) updateData.nameExtension = nameExtension;\n    if (defaultRoleId !== undefined) updateData.defaultRoleId = defaultRoleId;\n\n    // Update name if name components changed\n    if (\n      firstName ||\n      middleName !== undefined ||\n      lastName ||\n      nameExtension !== undefined\n    ) {\n      const newFirstName = firstName || user.firstName;\n      const newMiddleName =\n        middleName !== undefined ? middleName : user.middleName;\n      const newLastName = lastName || user.lastName;\n      const newNameExtension =\n        nameExtension !== undefined ? nameExtension : user.nameExtension;\n\n      updateData.name = `${newFirstName} ${newMiddleName ? newMiddleName + ' ' : ''}${newLastName}${newNameExtension ? ' ' + newNameExtension : ''}`;\n    }\n\n    await this.usersRepository.update(id, updateData);\n\n    // Update roles if provided\n    if (roleIds !== undefined) {\n      // Remove existing roles and assign new ones\n      await this.usersRepository\n        .createQueryBuilder()\n        .relation(User, 'roles')\n        .of(id)\n        .remove(user.roles);\n\n      if (roleIds.length > 0) {\n        await this.rolesService.assignRolesToUser(id, roleIds);\n      }\n    }\n\n    return this.findOne(id);\n  }\n\n  async remove(id: number): Promise {\n    const user = await this.usersRepository.findOne({ where: { id } });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    await this.usersRepository.delete(id);\n    return { message: `User with ID ${id} has been deleted` };\n  }\n\n  async updateStatus(id: number, isActive: boolean): Promise {\n    const user = await this.usersRepository.findOne({ where: { id } });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    await this.usersRepository.update(id, { isActive });\n    return this.findOne(id);\n  }\n\n  async getStats(): Promise {\n    const totalUsers = await this.usersRepository.count();\n    const activeUsers = await this.usersRepository.count({\n      where: { isActive: true },\n    });\n    const inactiveUsers = totalUsers - activeUsers;\n\n    // Get user count by role\n    const roleStats = await this.usersRepository\n      .createQueryBuilder('user')\n      .leftJoin('user.roles', 'role')\n      .select('role.name', 'roleName')\n      .addSelect('COUNT(user.id)', 'count')\n      .groupBy('role.name')\n      .getRawMany();\n\n    const usersByRole = roleStats.map((stat) => ({\n      roleName: stat.roleName || 'No Role',\n\n      count: parseInt(stat.count),\n    }));\n\n    // Get recent users (last 10)\n    const recentUsers = await this.usersRepository.find({\n      order: { createdAt: 'DESC' },\n      take: 10,\n      relations: ['defaultRole', 'roles'],\n    });\n\n    const sanitizedRecentUsers = recentUsers.map((user) => {\n      const { password, ...userWithoutPassword } = user;\n      return userWithoutPassword as Omit;\n    });\n\n    return {\n      totalUsers,\n      activeUsers,\n      inactiveUsers,\n      usersByRole,\n      recentUsers: sanitizedRecentUsers,\n    };\n  }\n\n  async findByEmail(email: string): Promise {\n    return this.usersRepository.findOne({\n      where: { email },\n      relations: ['defaultRole', 'roles'],\n    });\n  }\n\n  async findByUsername(username: string): Promise {\n    return this.usersRepository.findOne({\n      where: { username },\n      relations: ['defaultRole', 'roles'],\n    });\n  }\n\n  async create(createUserDto: CreateUserDto) {\n    const {\n      email,\n      username,\n      password,\n      firstName,\n      middleName,\n      lastName,\n      nameExtension,\n      contactNumber,\n      name,\n      roleIds,\n      defaultRoleId,\n    } = createUserDto;\n\n    // Generate full name if not provided\n    const fullName =\n      name ||\n      `${firstName} ${middleName ? middleName + ' ' : ''}${lastName}${nameExtension ? ' ' + nameExtension : ''}`;\n\n    // Check if user already exists\n    const existingUserByEmail = await this.usersRepository.findOne({\n      where: { email },\n    });\n    if (existingUserByEmail) {\n      throw new ConflictException('Email already exists');\n    }\n\n    if (username) {\n      const existingUserByUsername = await this.usersRepository.findOne({\n        where: { username },\n      });\n      if (existingUserByUsername) {\n        throw new ConflictException('Username already exists');\n      }\n    }\n\n    try {\n      // Create user\n      const user = this.usersRepository.create({\n        email,\n        username,\n        password, // Should be hashed by the caller\n        firstName,\n        middleName,\n        lastName,\n        nameExtension,\n        contactNumber,\n        name: fullName,\n        defaultRoleId: defaultRoleId || 4, // Default to citizen\n      });\n\n      await this.usersRepository.save(user);\n\n      // Assign roles if provided\n      if (roleIds && roleIds.length > 0) {\n        await this.rolesService.assignRolesToUser(user.id, roleIds);\n      }\n\n      return user;\n    } catch (error) {\n      this.logger.error('Error creating user:', error);\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserStatsResponseDto.html":{"url":"classes/UserStatsResponseDto.html","title":"class - UserStatsResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserStatsResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/user-stats-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                activeUsers\n                            \n                            \n                                    \n                                inactiveUsers\n                            \n                            \n                                    \n                                recentUsers\n                            \n                            \n                                    \n                                totalUsers\n                            \n                            \n                                    \n                                usersByRole\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        activeUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 85, description: 'Number of active users'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-stats-response.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        inactiveUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 15, description: 'Number of inactive users'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-stats-response.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        recentUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserResponseDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined, description: 'Recently created users'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-stats-response.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        totalUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 100, description: 'Total number of users'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-stats-response.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        usersByRole\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UsersByRoleDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined, description: 'User count by role'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-stats-response.dto.ts:41\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { UserResponseDto } from './user-response.dto';\n\nclass UsersByRoleDto {\n  @ApiProperty({\n    example: 'citizen',\n    description: 'Role name',\n  })\n  roleName: string;\n\n  @ApiProperty({\n    example: 25,\n    description: 'Number of users with this role',\n  })\n  count: number;\n}\n\nexport class UserStatsResponseDto {\n  @ApiProperty({\n    example: 100,\n    description: 'Total number of users',\n  })\n  totalUsers: number;\n\n  @ApiProperty({\n    example: 85,\n    description: 'Number of active users',\n  })\n  activeUsers: number;\n\n  @ApiProperty({\n    example: 15,\n    description: 'Number of inactive users',\n  })\n  inactiveUsers: number;\n\n  @ApiProperty({\n    type: [UsersByRoleDto],\n    description: 'User count by role',\n  })\n  usersByRole: UsersByRoleDto[];\n\n  @ApiProperty({\n    type: [UserResponseDto],\n    description: 'Recently created users',\n  })\n  recentUsers: UserResponseDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UsersByRoleDto.html":{"url":"classes/UsersByRoleDto.html","title":"class - UsersByRoleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UsersByRoleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/user-stats-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                count\n                            \n                            \n                                    \n                                roleName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 25, description: 'Number of users with this role'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-stats-response.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        roleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'citizen', description: 'Role name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-stats-response.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { UserResponseDto } from './user-response.dto';\n\nclass UsersByRoleDto {\n  @ApiProperty({\n    example: 'citizen',\n    description: 'Role name',\n  })\n  roleName: string;\n\n  @ApiProperty({\n    example: 25,\n    description: 'Number of users with this role',\n  })\n  count: number;\n}\n\nexport class UserStatsResponseDto {\n  @ApiProperty({\n    example: 100,\n    description: 'Total number of users',\n  })\n  totalUsers: number;\n\n  @ApiProperty({\n    example: 85,\n    description: 'Number of active users',\n  })\n  activeUsers: number;\n\n  @ApiProperty({\n    example: 15,\n    description: 'Number of inactive users',\n  })\n  inactiveUsers: number;\n\n  @ApiProperty({\n    type: [UsersByRoleDto],\n    description: 'User count by role',\n  })\n  usersByRole: UsersByRoleDto[];\n\n  @ApiProperty({\n    type: [UserResponseDto],\n    description: 'Recently created users',\n  })\n  recentUsers: UserResponseDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                adminCreateUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getProfile\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getStats\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        adminCreateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    adminCreateUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('admin-create')@UseGuards(JwtAuthGuard, RolesGuard)@Roles('admin', 'super_admin')@ApiOperation({summary: 'Admin creates user with role assignment'})@ApiResponse({status: 201, description: 'User created successfully', type: UserResponseDto})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:163\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(query: UserQueryDto, req: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(RolesGuard)@Roles('admin', 'staff', 'super_admin')@ApiOperation({summary: 'Get all users (Admin only)'})@ApiResponse({status: 200, description: 'Users retrieved successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            UserQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string, req: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@UseGuards(RolesGuard)@Roles('admin', 'staff', 'super_admin')@ApiOperation({summary: 'Get user by ID (Admin only)'})@ApiResponse({status: 200, description: 'User found'})@ApiResponse({status: 404, description: 'User not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:90\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(req: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('profile')@ApiOperation({summary: 'Get current user profile'})@ApiResponse({status: 200, description: 'Profile retrieved successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('stats')@UseGuards(RolesGuard)@Roles('admin', 'staff', 'super_admin')@ApiOperation({summary: 'Get user statistics (Admin only)'})@ApiResponse({status: 200, description: 'Statistics retrieved successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:80\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string, req: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@UseGuards(RolesGuard)@Roles('admin', 'super_admin')@ApiOperation({summary: 'Delete user (Admin only)'})@ApiResponse({status: 200, description: 'User deleted successfully'})@ApiResponse({status: 404, description: 'User not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:131\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateUserDto: AdminUpdateUserDto, req: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@UseGuards(RolesGuard)@Roles('admin', 'super_admin')@ApiOperation({summary: 'Update user (Admin only)'})@ApiResponse({status: 200, description: 'User updated successfully'})@ApiResponse({status: 404, description: 'User not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:116\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            AdminUpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(id: string, updateStatusDto: UpdateUserStatusDto, req: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/status')@UseGuards(RolesGuard)@Roles('admin', 'super_admin')@ApiOperation({summary: 'Update user status (Admin only)'})@ApiResponse({status: 200, description: 'User status updated successfully'})@ApiResponse({status: 404, description: 'User not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:145\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateStatusDto\n                                            \n                                                            UpdateUserStatusDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-unsafe-return */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nimport {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n  Request,\n  Query,\n  Logger,\n  Injectable,\n} from '@nestjs/common';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n} from '@nestjs/swagger';\nimport { UsersService } from './users.service';\nimport { AdminUpdateUserDto } from '../auth/dto/update-user.dto'; // Import from auth module\nimport { UpdateUserStatusDto } from './dto/update-user-status.dto';\nimport { UserQueryDto } from './dto/user-query.dto';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../auth/guards/roles.guard';\nimport { Roles } from '../auth/decorators/roles.decorator';\nimport { AuthenticatedUser } from '../auth/jwt.strategy';\nimport * as bcrypt from 'bcrypt';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UserResponseDto } from './dto/user-response.dto';\n\n@ApiTags('users')\n@Controller('users')\n@UseGuards(JwtAuthGuard)\n@ApiBearerAuth()\n@Injectable()\nexport class UsersController {\n  private readonly logger = new Logger(UsersController.name);\n  // ✅ ADD: Get bcrypt rounds from environment\n  private readonly bcryptRounds = parseInt(\n    process.env.BCRYPT_ROUNDS || '12',\n    10,\n  );\n\n  constructor(private readonly usersService: UsersService) {}\n\n  @Get()\n  @UseGuards(RolesGuard)\n  @Roles('admin', 'staff', 'super_admin')\n  @ApiOperation({ summary: 'Get all users (Admin only)' })\n  @ApiResponse({ status: 200, description: 'Users retrieved successfully' })\n  async findAll(\n    @Query() query: UserQueryDto,\n\n    @Request() req: { user: AuthenticatedUser },\n  ) {\n    const { page = 1, limit = 10, search, role } = query;\n    return this.usersService.findAll({ page, limit, search, role });\n  }\n\n  @Get('profile')\n  @ApiOperation({ summary: 'Get current user profile' })\n  @ApiResponse({ status: 200, description: 'Profile retrieved successfully' })\n  async getProfile(@Request() req: { user: AuthenticatedUser }) {\n    return this.usersService.findOne(req.user.id);\n  }\n\n  @Get('stats')\n  @UseGuards(RolesGuard)\n  @Roles('admin', 'staff', 'super_admin')\n  @ApiOperation({ summary: 'Get user statistics (Admin only)' })\n  @ApiResponse({\n    status: 200,\n    description: 'Statistics retrieved successfully',\n  })\n  async getStats() {\n    return this.usersService.getStats();\n  }\n\n  @Get(':id')\n  @UseGuards(RolesGuard)\n  @Roles('admin', 'staff', 'super_admin')\n  @ApiOperation({ summary: 'Get user by ID (Admin only)' })\n  @ApiResponse({ status: 200, description: 'User found' })\n  @ApiResponse({ status: 404, description: 'User not found' })\n  async findOne(\n    @Param('id') id: string,\n    @Request() req: { user: AuthenticatedUser },\n  ) {\n    // Allow users to view their own profile\n    const userId = +id;\n    const currentUser = req.user;\n\n    if (\n      userId === currentUser.id ||\n      currentUser.roles.some((role) =>\n        ['admin', 'staff', 'super_admin'].includes(role.name),\n      )\n    ) {\n      return this.usersService.findOne(userId);\n    }\n\n    throw new Error('Unauthorized');\n  }\n\n  @Patch(':id')\n  @UseGuards(RolesGuard)\n  @Roles('admin', 'super_admin')\n  @ApiOperation({ summary: 'Update user (Admin only)' })\n  @ApiResponse({ status: 200, description: 'User updated successfully' })\n  @ApiResponse({ status: 404, description: 'User not found' })\n  async update(\n    @Param('id') id: string,\n    @Body() updateUserDto: AdminUpdateUserDto,\n\n    @Request() req: { user: AuthenticatedUser },\n  ) {\n    return this.usersService.adminUpdate(+id, updateUserDto);\n  }\n\n  @Delete(':id')\n  @UseGuards(RolesGuard)\n  @Roles('admin', 'super_admin')\n  @ApiOperation({ summary: 'Delete user (Admin only)' })\n  @ApiResponse({ status: 200, description: 'User deleted successfully' })\n  @ApiResponse({ status: 404, description: 'User not found' })\n  async remove(\n    @Param('id') id: string,\n\n    @Request() req: { user: AuthenticatedUser },\n  ) {\n    return this.usersService.remove(+id);\n  }\n\n  @Patch(':id/status')\n  @UseGuards(RolesGuard)\n  @Roles('admin', 'super_admin')\n  @ApiOperation({ summary: 'Update user status (Admin only)' })\n  @ApiResponse({ status: 200, description: 'User status updated successfully' })\n  @ApiResponse({ status: 404, description: 'User not found' })\n  async updateStatus(\n    @Param('id') id: string,\n    @Body() updateStatusDto: UpdateUserStatusDto,\n\n    @Request() req: { user: AuthenticatedUser },\n  ) {\n    return this.usersService.updateStatus(+id, updateStatusDto.isActive);\n  }\n\n  @Post('admin-create')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles('admin', 'super_admin')\n  @ApiOperation({ summary: 'Admin creates user with role assignment' })\n  @ApiResponse({\n    status: 201,\n    description: 'User created successfully',\n    type: UserResponseDto,\n  })\n  async adminCreateUser(\n    @Body() createUserDto: CreateUserDto,\n  ): Promise {\n    try {\n      // ✅ UPDATED: Use environment-configured bcrypt rounds\n      const salt = await bcrypt.genSalt(this.bcryptRounds);\n      const hashedPassword = await bcrypt.hash(createUserDto.password, salt);\n\n      // Create user with hashed password\n      const userWithHashedPassword = {\n        ...createUserDto,\n        password: hashedPassword,\n      };\n\n      const user = await this.usersService.create(userWithHashedPassword);\n\n      // Return user without password\n      const { password, ...userWithoutPassword } = user;\n\n      // Get user with roles for response\n      const userWithRoles = await this.usersService.findOne(user.id);\n\n      return userWithRoles;\n    } catch (error) {\n      this.logger.error('Error in admin create user:', error);\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nRolesModule\n\nRolesModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nRolesModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RolesModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { User } from './entities/user.entity';\nimport { RolesModule } from '../roles/roles.module';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User]), RolesModule],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService, TypeOrmModule],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                adminUpdate\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByEmail\n                            \n                            \n                                    Async\n                                findByUsername\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getStats\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, rolesService: RolesService)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:37\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        rolesService\n                                                  \n                                                        \n                                                                        RolesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        adminUpdate\n                        \n                    \n                \n            \n            \n                \n                        \n                    adminUpdate(id: number, updateUserDto: AdminUpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:111\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            AdminUpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:290\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(options: FindAllOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                            FindAllOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:276\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByUsername\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByUsername(username: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:283\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:90\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:233\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:213\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(id: number, isActive: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:223\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                isActive\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(UsersService.name)\n                    \n                \n                    \n                        \n                                Defined in src/users/users.service.ts:37\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  BadRequestException,\n  ConflictException,\n  Logger,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, Like, In } from 'typeorm';\nimport { User } from './entities/user.entity';\nimport { AdminUpdateUserDto } from '../auth/dto/update-user.dto'; // Import from auth module\nimport { RolesService } from '../roles/roles.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport * as bcrypt from 'bcrypt';\n\ninterface FindAllOptions {\n  page: number;\n  limit: number;\n  search?: string;\n  role?: string;\n}\n\nexport interface UserStats {\n  totalUsers: number;\n  activeUsers: number;\n  inactiveUsers: number;\n  usersByRole: { roleName: string; count: number }[];\n  recentUsers: Omit[];\n}\n\n@Injectable()\nexport class UsersService {\n  private readonly logger = new Logger(UsersService.name);\n\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n    private rolesService: RolesService,\n  ) {}\n\n  async findAll(options: FindAllOptions) {\n    const { page, limit, search, role } = options;\n    const skip = (page - 1) * limit;\n\n    const queryBuilder = this.usersRepository\n      .createQueryBuilder('user')\n      .leftJoinAndSelect('user.defaultRole', 'defaultRole')\n      .leftJoinAndSelect('user.roles', 'roles');\n\n    // Apply search filter\n    if (search) {\n      queryBuilder.where(\n        '(user.firstName LIKE :search OR user.lastName LIKE :search OR user.email LIKE :search OR user.username LIKE :search)',\n        { search: `%${search}%` },\n      );\n    }\n\n    // Apply role filter\n    if (role) {\n      queryBuilder.andWhere('roles.name = :role', { role });\n    }\n\n    queryBuilder.orderBy('user.createdAt', 'DESC').skip(skip).take(limit);\n\n    const [users, total] = await queryBuilder.getManyAndCount();\n\n    // Remove passwords from response\n    const sanitizedUsers = users.map((user) => {\n      const { password, ...userWithoutPassword } = user;\n      return {\n        ...userWithoutPassword,\n        roles: user.roles.map((role) => role.name),\n        defaultRole: user.defaultRole?.name || 'citizen',\n      };\n    });\n\n    return {\n      users: sanitizedUsers,\n      total,\n      page,\n      limit,\n      totalPages: Math.ceil(total / limit),\n    };\n  }\n\n  async findOne(id: number): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id },\n      relations: ['defaultRole', 'roles'],\n    });\n\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    // Remove password and format response\n\n    const { password, ...userWithoutPassword } = user;\n    return {\n      ...userWithoutPassword,\n      roles: user.roles.map((role) => role.name),\n      defaultRole: user.defaultRole?.name || 'citizen',\n    };\n  }\n\n  // Admin-only update method\n  async adminUpdate(\n    id: number,\n    updateUserDto: AdminUpdateUserDto,\n  ): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id },\n      relations: ['roles'],\n    });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    const {\n      email,\n\n      username,\n\n      firstName,\n\n      middleName,\n\n      lastName,\n\n      nameExtension,\n\n      contactNumber,\n\n      roleIds,\n\n      defaultRoleId,\n    } = updateUserDto;\n\n    // Check email uniqueness if being updated\n    if (email && email !== user.email) {\n      const existingUser = await this.usersRepository.findOne({\n        where: { email },\n      });\n      if (existingUser) {\n        throw new ConflictException('Email already exists');\n      }\n    }\n\n    // Check username uniqueness if being updated\n    if (username && username !== user.username) {\n      const existingUser = await this.usersRepository.findOne({\n        where: { username },\n      });\n      if (existingUser) {\n        throw new ConflictException('Username already exists');\n      }\n    }\n\n    // Update fields\n    const updateData: any = {};\n\n    if (email) updateData.email = email;\n    if (username) updateData.username = username;\n    if (firstName) updateData.firstName = firstName;\n    if (lastName) updateData.lastName = lastName;\n    if (contactNumber) updateData.contactNumber = contactNumber;\n\n    // Handle optional fields\n    if (middleName !== undefined) updateData.middleName = middleName;\n    if (nameExtension !== undefined) updateData.nameExtension = nameExtension;\n    if (defaultRoleId !== undefined) updateData.defaultRoleId = defaultRoleId;\n\n    // Update name if name components changed\n    if (\n      firstName ||\n      middleName !== undefined ||\n      lastName ||\n      nameExtension !== undefined\n    ) {\n      const newFirstName = firstName || user.firstName;\n      const newMiddleName =\n        middleName !== undefined ? middleName : user.middleName;\n      const newLastName = lastName || user.lastName;\n      const newNameExtension =\n        nameExtension !== undefined ? nameExtension : user.nameExtension;\n\n      updateData.name = `${newFirstName} ${newMiddleName ? newMiddleName + ' ' : ''}${newLastName}${newNameExtension ? ' ' + newNameExtension : ''}`;\n    }\n\n    await this.usersRepository.update(id, updateData);\n\n    // Update roles if provided\n    if (roleIds !== undefined) {\n      // Remove existing roles and assign new ones\n      await this.usersRepository\n        .createQueryBuilder()\n        .relation(User, 'roles')\n        .of(id)\n        .remove(user.roles);\n\n      if (roleIds.length > 0) {\n        await this.rolesService.assignRolesToUser(id, roleIds);\n      }\n    }\n\n    return this.findOne(id);\n  }\n\n  async remove(id: number): Promise {\n    const user = await this.usersRepository.findOne({ where: { id } });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    await this.usersRepository.delete(id);\n    return { message: `User with ID ${id} has been deleted` };\n  }\n\n  async updateStatus(id: number, isActive: boolean): Promise {\n    const user = await this.usersRepository.findOne({ where: { id } });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    await this.usersRepository.update(id, { isActive });\n    return this.findOne(id);\n  }\n\n  async getStats(): Promise {\n    const totalUsers = await this.usersRepository.count();\n    const activeUsers = await this.usersRepository.count({\n      where: { isActive: true },\n    });\n    const inactiveUsers = totalUsers - activeUsers;\n\n    // Get user count by role\n    const roleStats = await this.usersRepository\n      .createQueryBuilder('user')\n      .leftJoin('user.roles', 'role')\n      .select('role.name', 'roleName')\n      .addSelect('COUNT(user.id)', 'count')\n      .groupBy('role.name')\n      .getRawMany();\n\n    const usersByRole = roleStats.map((stat) => ({\n      roleName: stat.roleName || 'No Role',\n\n      count: parseInt(stat.count),\n    }));\n\n    // Get recent users (last 10)\n    const recentUsers = await this.usersRepository.find({\n      order: { createdAt: 'DESC' },\n      take: 10,\n      relations: ['defaultRole', 'roles'],\n    });\n\n    const sanitizedRecentUsers = recentUsers.map((user) => {\n      const { password, ...userWithoutPassword } = user;\n      return userWithoutPassword as Omit;\n    });\n\n    return {\n      totalUsers,\n      activeUsers,\n      inactiveUsers,\n      usersByRole,\n      recentUsers: sanitizedRecentUsers,\n    };\n  }\n\n  async findByEmail(email: string): Promise {\n    return this.usersRepository.findOne({\n      where: { email },\n      relations: ['defaultRole', 'roles'],\n    });\n  }\n\n  async findByUsername(username: string): Promise {\n    return this.usersRepository.findOne({\n      where: { username },\n      relations: ['defaultRole', 'roles'],\n    });\n  }\n\n  async create(createUserDto: CreateUserDto) {\n    const {\n      email,\n      username,\n      password,\n      firstName,\n      middleName,\n      lastName,\n      nameExtension,\n      contactNumber,\n      name,\n      roleIds,\n      defaultRoleId,\n    } = createUserDto;\n\n    // Generate full name if not provided\n    const fullName =\n      name ||\n      `${firstName} ${middleName ? middleName + ' ' : ''}${lastName}${nameExtension ? ' ' + nameExtension : ''}`;\n\n    // Check if user already exists\n    const existingUserByEmail = await this.usersRepository.findOne({\n      where: { email },\n    });\n    if (existingUserByEmail) {\n      throw new ConflictException('Email already exists');\n    }\n\n    if (username) {\n      const existingUserByUsername = await this.usersRepository.findOne({\n        where: { username },\n      });\n      if (existingUserByUsername) {\n        throw new ConflictException('Username already exists');\n      }\n    }\n\n    try {\n      // Create user\n      const user = this.usersRepository.create({\n        email,\n        username,\n        password, // Should be hashed by the caller\n        firstName,\n        middleName,\n        lastName,\n        nameExtension,\n        contactNumber,\n        name: fullName,\n        defaultRoleId: defaultRoleId || 4, // Default to citizen\n      });\n\n      await this.usersRepository.save(user);\n\n      // Assign roles if provided\n      if (roleIds && roleIds.length > 0) {\n        await this.rolesService.assignRolesToUser(user.id, roleIds);\n      }\n\n      return user;\n    } catch (error) {\n      this.logger.error('Error creating user:', error);\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VerifyOtpDto.html":{"url":"classes/VerifyOtpDto.html","title":"class - VerifyOtpDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VerifyOtpDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/otp.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                otp\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                purpose\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Email address', example: 'user@example.com', format: 'email'})@IsEmail({}, {message: 'Please provide a valid email address'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/otp.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        otp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: '6-digit OTP code', example: '123456', minLength: 6, maxLength: 6, pattern: '^[0-9]{6}$'})@IsString()@Length(6, 6, {message: 'OTP must be exactly 6 digits'})@Matches(/^[0-9]{6}$/, {message: 'OTP must contain only numbers'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/otp.dto.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        purpose\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'verification'\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Purpose of the OTP verification', example: 'verification', enum: undefined, default: 'verification'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/otp.dto.ts:59\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsString,\n  IsOptional,\n  Length,\n  Matches,\n} from 'class-validator';\n\nexport class SendOtpDto {\n  @ApiProperty({\n    description: 'Email address to send OTP to',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiPropertyOptional({\n    description: 'Purpose of the OTP',\n    example: 'verification',\n    enum: ['verification', 'password_reset'],\n    default: 'verification',\n  })\n  @IsString()\n  @IsOptional()\n  purpose?: string = 'verification';\n}\n\nexport class VerifyOtpDto {\n  @ApiProperty({\n    description: 'Email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    description: '6-digit OTP code',\n    example: '123456',\n    minLength: 6,\n    maxLength: 6,\n    pattern: '^[0-9]{6}$',\n  })\n  @IsString()\n  @Length(6, 6, { message: 'OTP must be exactly 6 digits' })\n  @Matches(/^[0-9]{6}$/, { message: 'OTP must contain only numbers' })\n  otp: string;\n\n  @ApiPropertyOptional({\n    description: 'Purpose of the OTP verification',\n    example: 'verification',\n    enum: ['verification', 'password_reset'],\n    default: 'verification',\n  })\n  @IsString()\n  @IsOptional()\n  purpose?: string = 'verification';\n}\n\nexport class ForgotPasswordDto {\n  @ApiProperty({\n    description: 'Registered email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n}\n\nexport class ResetPasswordDto {\n  @ApiProperty({\n    description: 'Email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    description: '6-digit OTP code received via email',\n    example: '123456',\n    minLength: 6,\n    maxLength: 6,\n    pattern: '^[0-9]{6}$',\n  })\n  @IsString()\n  @Length(6, 6, { message: 'OTP must be exactly 6 digits' })\n  @Matches(/^[0-9]{6}$/, { message: 'OTP must contain only numbers' })\n  otp: string;\n\n  @ApiProperty({\n    description: 'New password (must meet complexity requirements)',\n    example: 'NewSecure123!',\n    minLength: 8,\n    pattern:\n      '^(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)(?=.*[@$!%*?&])[A-Za-z\\\\d@$!%*?&]{8,}$',\n  })\n  @IsString()\n  @Length(8, 100, { message: 'Password must be at least 8 characters long' })\n  @Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/, {\n    message:\n      'Password must contain uppercase, lowercase, numbers, and special characters',\n  })\n  newPassword: string;\n}\n\nexport class TestOtpDto {\n  @ApiProperty({\n    description: 'Email address for testing OTP generation',\n    example: 'test@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n}\n\nexport class ApplicationNotificationDto {\n  @ApiProperty({\n    description: 'Recipient email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    description: 'Application ID',\n    example: 'APP-001',\n  })\n  @IsString()\n  applicationId: string;\n\n  @ApiProperty({\n    description: 'Application status',\n    example: 'Approved',\n    enum: ['Pending', 'Approved', 'Rejected', 'Ready for Pickup'],\n  })\n  @IsString()\n  status: string;\n\n  @ApiProperty({\n    description: 'Type of application',\n    example: 'Birth Certificate',\n  })\n  @IsString()\n  applicationType: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/24)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/19)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            interface\n            LockoutData\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/auth/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/decorators/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/user.decorator.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/auth/decorators/user.decorator.ts\n            \n            variable\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/appointment-notification.dto.ts\n            \n            class\n            AppointmentNotificationDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/auth/dto/otp.dto.ts\n            \n            class\n            ApplicationNotificationDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/dto/otp.dto.ts\n            \n            class\n            ForgotPasswordDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dto/otp.dto.ts\n            \n            class\n            ResetPasswordDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/dto/otp.dto.ts\n            \n            class\n            SendOtpDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/otp.dto.ts\n            \n            class\n            TestOtpDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dto/otp.dto.ts\n            \n            class\n            VerifyOtpDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/dto/queue-notification.dto.ts\n            \n            class\n            QueueNotificationDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/auth/dto/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                9 %\n                (1/11)\n            \n        \n        \n            \n                \n                src/auth/dto/update-user.dto.ts\n            \n            class\n            AdminUpdateUserDto\n            \n                8 %\n                (1/12)\n            \n        \n        \n            \n                \n                src/auth/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                10 %\n                (1/10)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/roles.guard.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            interface\n            AuthenticatedUser\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            interface\n            JwtPayload\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/config/database.config.ts\n            \n            variable\n            databaseConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/entities/otp.entity.ts\n            \n            entity\n            OTP\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            overrideConsoleInProduction\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            seedDatabaseIfNeeded\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            testMinIOConnection\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/announcement/announcement.controller.ts\n            \n            controller\n            AnnouncementController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/announcement/announcement.service.ts\n            \n            injectable\n            AnnouncementService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/announcement/dto/create-announcement.dto.ts\n            \n            class\n            CreateAnnouncementDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/announcement/dto/update-announcement.dto.ts\n            \n            class\n            UpdateAnnouncementDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/announcement/entities/announcement.entity.ts\n            \n            entity\n            Announcement\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/appointment/appointment.controller.ts\n            \n            controller\n            AppointmentController\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/modules/appointment/appointment.service.ts\n            \n            injectable\n            AppointmentService\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/modules/appointment/dto/create-appointment.dto.ts\n            \n            class\n            CreateAppointmentDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/modules/appointment/dto/update-appointment.dto.ts\n            \n            class\n            UpdateAppointmentDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/appointment/entities/appointment.entity.ts\n            \n            entity\n            Appointment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/counter/entities/counter.entity.ts\n            \n            entity\n            Counter\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/document-applications/document-applications.controller.ts\n            \n            controller\n            DocumentApplicationsController\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/modules/document-applications/document-applications.service.ts\n            \n            injectable\n            DocumentApplicationsService\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/modules/document-applications/dto/create-document-application.dto.ts\n            \n            class\n            CreateDocumentApplicationDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/document-applications/dto/update-document-application.dto.ts\n            \n            class\n            UpdateDocumentApplicationDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/document-applications/entities/application-status-history.entity.ts\n            \n            entity\n            ApplicationStatusHistory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/document-applications/entities/application-status-history.entity.ts\n            \n            class\n            ApplicationStatusHistory\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/modules/document-applications/entities/document-application.entity.ts\n            \n            entity\n            DocumentApplication\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/document-applications/entities/document-application.entity.ts\n            \n            class\n            DocumentApplication\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/modules/document-applications/entities/document-file.entity.ts\n            \n            entity\n            DocumentFile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/document-applications/entities/document-file.entity.ts\n            \n            class\n            DocumentFile\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/document-applications/services/minio.service.ts\n            \n            injectable\n            MinioService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/modules/queue/dto/create-queue.dto.ts\n            \n            class\n            CreateQueueDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/queue/dto/update-queue.dto.ts\n            \n            class\n            UpdateQueueDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/queue/entities/queue-details.entity.ts\n            \n            entity\n            QueueDetails\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/queue/entities/queue.entity.ts\n            \n            entity\n            Queue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/queue/queue-scheduler.service.ts\n            \n            injectable\n            QueueSchedulerService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/queue/queue.controller.ts\n            \n            controller\n            QueueController\n            \n                0 %\n                (0/24)\n            \n        \n        \n            \n                \n                src/modules/queue/queue.gateway.ts\n            \n            class\n            QueueGateway\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/modules/queue/queue.service.ts\n            \n            injectable\n            QueueService\n            \n                0 %\n                (0/19)\n            \n        \n        \n            \n                \n                src/modules/queue/queues.controller.ts\n            \n            controller\n            QueuesController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/queue/queues.controller.ts\n            \n            interface\n            QueueDetails\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/roles/entities/role.entity.ts\n            \n            entity\n            Role\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/roles/roles.controller.ts\n            \n            controller\n            RolesController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/roles/roles.service.ts\n            \n            injectable\n            RolesService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/services/email.service.ts\n            \n            injectable\n            EmailService\n            \n                50 %\n                (8/16)\n            \n        \n        \n            \n                \n                src/services/minio.service.ts\n            \n            injectable\n            MinioService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/services/otp.service.ts\n            \n            injectable\n            OTPService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/users/dto/paginated-users-response.dto.ts\n            \n            class\n            PaginatedUsersResponseDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/dto/update-user-status.dto.ts\n            \n            class\n            UpdateUserStatusDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dto/user-query.dto.ts\n            \n            class\n            UserQueryDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dto/user-response.dto.ts\n            \n            class\n            UserResponseDto\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/users/dto/user-stats-response.dto.ts\n            \n            class\n            UsersByRoleDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dto/user-stats-response.dto.ts\n            \n            class\n            UserStatsResponseDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            injectable\n            UsersController\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            interface\n            FindAllOptions\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            interface\n            UserStats\n            \n                0 %\n                (0/6)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^11.1.0\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.1.0\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/passport : ^11.0.5\n        \n            @nestjs/platform-express : ^11.1.0\n        \n            @nestjs/platform-socket.io : ^11.1.0\n        \n            @nestjs/schedule : ^6.0.0\n        \n            @nestjs/swagger : ^11.2.0\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            @nestjs/websockets : ^11.1.0\n        \n            @types/nodemailer : ^6.4.17\n        \n            @types/qrcode : ^1.5.5\n        \n            @types/speakeasy : ^2.0.10\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            compression : ^1.8.0\n        \n            date-fns : ^4.1.0\n        \n            dotenv : ^16.5.0\n        \n            helmet : ^8.1.0\n        \n            minio : ^8.0.5\n        \n            multer : ^2.0.0\n        \n            mysql2 : ^3.14.1\n        \n            nodemailer : ^7.0.4\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            qrcode : ^1.5.4\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.2\n        \n            socket.io : ^4.8.1\n        \n            speakeasy : ^2.0.0\n        \n            swagger-ui-express : ^5.0.1\n        \n            typeorm : ^0.3.22\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ApplicationStatus   (src/.../document-application.entity.ts)\n                        \n                        \n                            ApplicationType   (src/.../document-application.entity.ts)\n                        \n                        \n                            AppointmentStatus   (src/.../appointment.entity.ts)\n                        \n                        \n                            CounterStatus   (src/.../counter.entity.ts)\n                        \n                        \n                            QueueStatus   (src/.../queue.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/document-applications/entities/document-application.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        ApplicationStatus\n                    \n                \n                        \n                            \n                                 PENDING\n                            \n                        \n                        \n                            \n                                Value : Pending\n                            \n                        \n                        \n                            \n                                 PROCESSING\n                            \n                        \n                        \n                            \n                                Value : Processing\n                            \n                        \n                        \n                            \n                                 APPROVED\n                            \n                        \n                        \n                            \n                                Value : Approved\n                            \n                        \n                        \n                            \n                                 REJECTED\n                            \n                        \n                        \n                            \n                                Value : Rejected\n                            \n                        \n                        \n                            \n                                 DECLINE\n                            \n                        \n                        \n                            \n                                Value : Decline\n                            \n                        \n                        \n                            \n                                 READY_FOR_PICKUP\n                            \n                        \n                        \n                            \n                                Value : Ready for Pickup\n                            \n                        \n                        \n                            \n                                 REQUIRES_ADDITIONAL_INFO\n                            \n                        \n                        \n                            \n                                Value : Requires Additional Info\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ApplicationType\n                    \n                \n                        \n                            \n                                 BIRTH_CERTIFICATE\n                            \n                        \n                        \n                            \n                                Value : Birth Certificate\n                            \n                        \n                        \n                            \n                                 MARRIAGE_CERTIFICATE\n                            \n                        \n                        \n                            \n                                Value : Marriage Certificate\n                            \n                        \n                        \n                            \n                                 MARRIAGE_LICENSE\n                            \n                        \n                        \n                            \n                                Value : Marriage License\n                            \n                        \n                        \n                            \n                                 DEATH_CERTIFICATE\n                            \n                        \n                        \n                            \n                                Value : Death Certificate\n                            \n                        \n                        \n                            \n                                 BUSINESS_PERMIT\n                            \n                        \n                        \n                            \n                                Value : Business Permit\n                            \n                        \n            \n        \n\n    src/modules/appointment/entities/appointment.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        AppointmentStatus\n                    \n                \n                        \n                            \n                                 PENDING\n                            \n                        \n                        \n                            \n                                Value : pending\n                            \n                        \n                        \n                            \n                                 CONFIRMED\n                            \n                        \n                        \n                            \n                                Value : confirmed\n                            \n                        \n                        \n                            \n                                 COMPLETED\n                            \n                        \n                        \n                            \n                                Value : completed\n                            \n                        \n                        \n                            \n                                 CANCELLED\n                            \n                        \n                        \n                            \n                                Value : cancelled\n                            \n                        \n            \n        \n\n    src/modules/counter/entities/counter.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        CounterStatus\n                    \n                \n                        \n                            \n                                 ACTIVE\n                            \n                        \n                        \n                            \n                                Value : active\n                            \n                        \n                        \n                            \n                                 INACTIVE\n                            \n                        \n                        \n                            \n                                Value : inactive\n                            \n                        \n            \n        \n\n    src/modules/queue/entities/queue.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        QueueStatus\n                    \n                \n                        \n                            \n                                 PENDING\n                            \n                        \n                        \n                            \n                                Value : pending\n                            \n                        \n                        \n                            \n                                 SERVING\n                            \n                        \n                        \n                            \n                                Value : serving\n                            \n                        \n                        \n                            \n                                 COMPLETED\n                            \n                        \n                        \n                            \n                                Value : completed\n                            \n                        \n                        \n                            \n                                 CANCELLED\n                            \n                        \n                        \n                            \n                                Value : cancelled\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            overrideConsoleInProduction   (src/.../main.ts)\n                        \n                        \n                            seedDatabaseIfNeeded   (src/.../main.ts)\n                        \n                        \n                            testMinIOConnection   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        overrideConsoleInProduction\n                        \n                    \n                \n            \n            \n                \noverrideConsoleInProduction()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seedDatabaseIfNeeded\n                        \n                    \n                \n            \n            \n                \nseedDatabaseIfNeeded(dataSource: DataSource)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dataSource\n                                            \n                                                        DataSource\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        testMinIOConnection\n                        \n                    \n                \n            \n            \n                \ntestMinIOConnection()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\nBulak Smart Connect - Backend API\nMunicipal Services Digital Platform Backend\n\n\n\n  \n    \n  \n  \n    \n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AnnouncementModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppointmentModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DocumentApplicationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        QueueModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RolesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AnnouncementModule\n\n\n\ncluster_AnnouncementModule_exports\n\n\n\ncluster_AnnouncementModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppointmentModule\n\n\n\ncluster_AppointmentModule_exports\n\n\n\ncluster_AppointmentModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_DocumentApplicationsModule\n\n\n\ncluster_DocumentApplicationsModule_exports\n\n\n\ncluster_DocumentApplicationsModule_providers\n\n\n\ncluster_QueueModule\n\n\n\ncluster_QueueModule_exports\n\n\n\ncluster_QueueModule_providers\n\n\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_exports\n\n\n\ncluster_RolesModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAnnouncementService \n\nAnnouncementService \n\n\n\nAnnouncementModule\n\nAnnouncementModule\n\nAnnouncementService  -->\n\nAnnouncementModule->AnnouncementService \n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAnnouncementModule->AppModule\n\n\n\n\n\nAnnouncementService\n\nAnnouncementService\n\nAnnouncementModule -->\n\nAnnouncementService->AnnouncementModule\n\n\n\n\n\nAppointmentModule\n\nAppointmentModule\n\nAppModule -->\n\nAppointmentModule->AppModule\n\n\n\n\n\nAppointmentService \n\nAppointmentService \n\nAppointmentService  -->\n\nAppointmentModule->AppointmentService \n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nEmailService \n\nEmailService \n\nEmailService  -->\n\nAuthModule->EmailService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nOTPService \n\nOTPService \n\nOTPService  -->\n\nAuthModule->OTPService \n\n\n\n\n\nDocumentApplicationsModule\n\nDocumentApplicationsModule\n\nAppModule -->\n\nDocumentApplicationsModule->AppModule\n\n\n\n\n\nDocumentApplicationsService \n\nDocumentApplicationsService \n\nDocumentApplicationsService  -->\n\nDocumentApplicationsModule->DocumentApplicationsService \n\n\n\n\n\nMinioService \n\nMinioService \n\nMinioService  -->\n\nDocumentApplicationsModule->MinioService \n\n\n\n\n\nQueueModule\n\nQueueModule\n\nAppModule -->\n\nQueueModule->AppModule\n\n\n\n\n\nQueueGateway \n\nQueueGateway \n\nQueueGateway  -->\n\nQueueModule->QueueGateway \n\n\n\n\n\nQueueSchedulerService \n\nQueueSchedulerService \n\nQueueSchedulerService  -->\n\nQueueModule->QueueSchedulerService \n\n\n\n\n\nQueueService \n\nQueueService \n\nQueueService  -->\n\nQueueModule->QueueService \n\n\n\n\n\nRolesModule\n\nRolesModule\n\nAuthModule -->\n\nRolesModule->AuthModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nRolesModule->UsersModule\n\n\n\nAppModule -->\n\nRolesModule->AppModule\n\n\n\n\n\nRolesService \n\nRolesService \n\nRolesService  -->\n\nRolesModule->RolesService \n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nAuthModule -->\n\nEmailService->AuthModule\n\n\n\nAppModule -->\n\nEmailService->AppModule\n\n\n\n\n\nOTPService\n\nOTPService\n\nAuthModule -->\n\nOTPService->AuthModule\n\n\n\nAppModule -->\n\nOTPService->AppModule\n\n\n\n\n\nAppointmentService\n\nAppointmentService\n\nAppointmentModule -->\n\nAppointmentService->AppointmentModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nDocumentApplicationsService\n\nDocumentApplicationsService\n\nDocumentApplicationsModule -->\n\nDocumentApplicationsService->DocumentApplicationsModule\n\n\n\n\n\nMinioService\n\nMinioService\n\nDocumentApplicationsModule -->\n\nMinioService->DocumentApplicationsModule\n\n\n\n\n\nQueueSchedulerService\n\nQueueSchedulerService\n\nQueueModule -->\n\nQueueSchedulerService->QueueModule\n\n\n\n\n\nQueueService\n\nQueueService\n\nQueueModule -->\n\nQueueService->QueueModule\n\n\n\n\n\nRolesService\n\nRolesService\n\nRolesModule -->\n\nRolesService->RolesModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        8 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    9 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    11 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    16 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    31 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    9 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            databaseConfig   (src/.../database.config.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                        \n                            User   (src/.../user.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/database.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        databaseConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TypeOrmModuleOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'mysql',\n  host: process.env.DB_HOST || 'localhost',\n  port: parseInt(process.env.DB_PORT || '3306'),\n  username: process.env.DB_USERNAME || 'root',\n  password: process.env.DB_PASSWORD || '',\n  database: process.env.DB_NAME || 'bulak_smart_connect',\n  entities: [__dirname + '/../**/*.entity{.ts,.js}'],\n  synchronize: process.env.NODE_ENV !== 'production',\n  logging: process.env.NODE_ENV !== 'production',\n}\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: string[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        User\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext): AuthenticatedUser => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.user;\n  },\n)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
