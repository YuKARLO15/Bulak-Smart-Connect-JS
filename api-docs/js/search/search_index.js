var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.359,1,2.237]],["body/controllers/AppController.html",[0,2.17,1,3.571,2,1.871,3,0.37,4,0.326,5,0.326,6,3.64,7,0.463,8,2.02,9,5.187,10,6.152,11,1.636,12,0.028,13,0.985,14,4.317,15,2.02,16,0.838,17,5.388,18,4.317,19,2.963,20,0.462,21,0.789,22,3.231,23,3.64,24,0.37,25,0.088,26,1.871,27,2.861,28,1.526,29,4.317,30,4.317,31,0.021,32,0.021]],["title/modules/AppModule.html",[33,1.265,34,2.237]],["body/modules/AppModule.html",[1,3.093,2,1.722,3,0.236,4,0.207,5,0.207,12,0.028,16,0.567,20,0.529,21,0.502,22,3.109,23,2.318,24,0.236,25,0.056,31,0.016,32,0.016,33,1.749,34,4.262,35,1.285,36,1.391,37,1.653,38,1.653,39,1.391,40,2.806,41,1.512,42,2.318,43,2.318,44,2.318,45,3.399,46,3.399,47,3.109,48,3.399,49,2.389,50,1.653,51,1.512,52,2.749,53,2.806,54,3.974,55,3.389,56,1.653,57,1.653,58,1.192,59,2.034,60,2.749,61,2.749,62,2.749,63,2.749,64,2.318,65,2.749,66,2.749,67,2.749,68,1.749,69,2.749,70,1.822,71,2.318,72,0.358,73,2.318,74,2.318,75,2.749,76,2.318,77,2.749,78,1.653,79,2.749,80,1.512,81,2.749,82,2.318,83,2.749,84,1.285,85,2.318,86,2.318,87,3.351,88,3.974,89,3.389,90,2.634,91,2.749,92,4.574,93,2.318,94,2.749,95,1.653,96,2.749,97,2.749,98,2.749,99,2.749,100,2.011,101,2.749,102,2.749,103,2.749,104,2.011,105,5.113,106,3.783,107,3.351,108,0.96,109,2.749,110,3.974,111,3.974,112,2.318,113,2.749,114,2.318,115,2.749,116,2.362,117,2.749,118,2.749,119,2.94,120,3.974,121,2.749,122,2.749,123,2.749,124,2.749,125,2.749,126,2.749,127,2.749,128,2.749,129,2.749,130,2.749,131,2.749,132,2.749]],["title/injectables/AppService.html",[22,1.856,133,0.891]],["body/injectables/AppService.html",[3,0.41,4,0.361,5,0.361,7,0.513,8,2.152,9,5.376,12,0.027,13,0.875,15,1.795,16,0.819,20,0.41,21,0.875,22,3.157,24,0.41,25,0.097,28,1.356,31,0.023,32,0.023,133,1.516,134,2.423,135,4.037,136,4.788,137,4.788,138,4.788]],["title/controllers/AuthController.html",[0,1.359,139,2.029]],["body/controllers/AuthController.html",[0,1.229,2,1.323,3,0.262,4,0.23,5,0.23,7,0.327,8,1.605,11,1.502,12,0.028,13,0.904,15,1.854,16,0.611,20,0.484,21,0.558,24,0.262,25,0.062,26,1.323,28,1.401,31,0.017,32,0.017,72,0.645,95,1.835,104,2.962,108,1.066,116,1.545,139,2.574,140,2.259,141,2.259,142,3.053,143,3.61,144,3.168,145,3.61,146,3.053,147,2.713,148,3.053,149,3.053,150,1.992,151,1.306,152,1.401,153,3.168,154,2.574,155,3.305,156,3.61,157,3.053,158,2.838,159,2.574,160,3.305,161,3.61,162,3.053,163,2.259,164,2.259,165,2.023,166,2.973,167,2.574,168,2.503,169,2.259,170,2.259,171,2.259,172,1.545,173,2.574,174,2.023,175,1.229,176,1.545,177,0.98,178,1.835,179,1.3,180,1.545,181,1.066,182,2.574,183,2.574,184,2.259,185,2.574,186,2.023,187,2.838,188,2.574,189,2.259,190,3.659,191,2.167,192,1.856,193,2.574,194,2.574,195,2.574,196,2.574,197,2.574,198,2.574,199,2.574,200,2.574,201,2.574,202,2.574,203,2.574,204,2.023,205,2.574,206,2.574,207,2.259,208,2.167,209,1.835,210,2.574,211,2.574,212,2.574,213,3.61,214,1.323,215,1.835,216,1.144,217,2.574]],["title/modules/AuthModule.html",[33,1.265,45,2.029]],["body/modules/AuthModule.html",[2,2.015,3,0.295,4,0.26,5,0.26,12,0.028,20,0.554,21,0.629,24,0.295,25,0.07,28,0.974,31,0.018,32,0.018,33,1.974,35,1.609,36,1.741,37,2.068,38,2.068,39,1.741,40,3.166,41,2.896,45,3.952,47,3.339,49,2.795,50,2.068,51,1.892,53,2.795,55,3.49,56,2.068,57,2.068,58,1.491,64,2.901,70,2.28,71,2.901,139,3.166,168,3.327,169,2.545,177,0.787,218,2.901,219,3.44,220,2.901,221,2.901,222,3.615,223,3.44,224,3.44,225,2.545,226,4.649,227,2.068,228,1.892,229,3.44,230,3.44,231,3.44,232,3.44,233,2.068,234,3.44,235,3.44,236,3.44,237,3.44,238,3.44,239,3.44,240,3.44,241,2.901]],["title/injectables/AuthService.html",[133,0.891,168,1.708]],["body/injectables/AuthService.html",[3,0.16,4,0.141,5,0.141,7,0.2,8,1.108,12,0.028,13,0.888,15,1.712,16,0.422,20,0.467,21,0.34,24,0.16,25,0.038,28,1.186,31,0.012,32,0.012,58,0.807,72,0.634,78,2.922,80,3.131,104,2.881,106,2.188,108,2.08,112,3.101,116,2.578,133,0.781,134,0.943,143,2.493,144,2.188,145,2.493,150,1.958,151,1.396,152,1.377,154,2.493,155,3.068,158,2.437,159,2.493,160,2.673,167,1.12,168,1.496,170,1.378,171,1.378,177,1.326,178,1.12,179,0.898,180,2.881,181,1.595,184,1.378,186,1.235,187,2.775,189,1.378,190,3.098,191,2.46,192,1.979,208,0.943,209,2.211,215,1.778,225,1.378,228,1.024,242,1.571,243,3.027,244,2.957,245,2.957,246,1.626,247,1.863,248,2.775,249,5.095,250,2.578,251,1.863,252,2.493,253,1.863,254,1.863,255,0.807,256,1.863,257,1.863,258,1.12,259,1.863,260,1.863,261,2.957,262,1.863,263,1.863,264,1.863,265,1.378,266,0.807,267,2.493,268,1.863,269,1.571,270,3.53,271,4.187,272,1.863,273,3.677,274,3.677,275,2.721,276,3.101,277,3.101,278,3.677,279,3.677,280,3.677,281,3.677,282,1.863,283,1.378,284,3.101,285,1.863,286,1.378,287,1.863,288,1.863,289,1.863,290,1.863,291,1.863,292,2.957,293,3.677,294,1.863,295,1.863,296,1.863,297,1.863,298,4.187,299,1.863,300,2.957,301,1.378,302,1.863,303,1.863,304,2.775,305,1.863,306,1.863,307,1.571,308,1.863,309,2.957,310,2.957,311,2.957,312,1.863,313,2.957,314,2.957,315,1.863,316,1.626,317,2.721,318,1.024,319,2.188,320,1.378,321,1.571,322,1.571,323,1.863,324,2.493,325,2.493,326,1.863,327,1.863,328,3.101,329,2.957,330,1.863,331,2.957,332,1.863,333,2.957,334,1.863,335,1.863,336,1.863]],["title/entities/Counter.html",[337,1.265,338,1.708]],["body/entities/Counter.html",[3,0.295,4,0.26,5,0.26,7,0.37,11,1.79,12,0.028,13,1.078,16,0.664,19,2.899,20,0.399,24,0.399,25,0.07,31,0.018,32,0.018,68,1.976,72,0.792,84,1.612,151,1.557,179,1.714,208,2.857,214,1.495,216,1.976,266,1.495,337,1.292,338,2.356,339,2.551,340,1.319,341,4.445,342,5.272,343,2.633,344,2.907,345,4.656,346,3.394,347,2.551,348,5.645,349,3.926,350,4.656,351,3.448,352,2.285,353,3.448,354,3.17,355,3.448,356,3.545,357,3.448,358,4.363,359,2.907,360,4.971,361,2.799,362,3.448,363,3.926,364,3.445,365,3.448,366,3.926,367,3.926,368,3.448,369,3.448]],["title/classes/CreateQueueDto.html",[25,0.069,370,2.029]],["body/classes/CreateQueueDto.html",[3,0.285,4,0.251,5,0.251,7,0.357,11,1.929,12,0.027,13,1.161,16,0.954,20,0.285,24,0.285,25,0.092,31,0.018,32,0.018,72,0.828,152,1.82,179,1.38,255,2.243,258,2.731,316,2.846,318,2.846,340,1.287,370,2.731,371,1.829,372,5.418,373,2.46,374,3.829,375,3.829,376,3.829,377,3.829,378,3.829,379,3.829,380,3.829,381,3.325,382,4.115,383,3.325,384,3.325,385,3.325,386,3.325,387,3.325,388,3.325,389,3.325,390,3.325,391,4.552,392,3.325,393,4.151,394,4.308,395,4.543,396,1.999]],["title/injectables/JwtAuthGuard.html",[133,0.891,172,1.708]],["body/injectables/JwtAuthGuard.html",[3,0.422,4,0.372,5,0.372,12,0.027,20,0.501,21,0.901,24,0.422,25,0.1,31,0.023,32,0.023,133,1.542,134,2.495,172,2.956,176,2.956,227,2.964,397,4.157,398,4.157,399,5.842,400,4.93]],["title/interfaces/JwtPayload.html",[175,1.359,401,2.237]],["body/interfaces/JwtPayload.html",[3,0.302,4,0.266,5,0.266,7,0.378,12,0.028,13,0.645,16,0.873,20,0.488,21,0.645,24,0.302,25,0.072,26,1.53,28,1,31,0.019,32,0.019,55,3.536,56,2.122,72,0.696,100,1.786,108,1.99,133,1.249,152,1.34,167,2.122,175,1.422,176,1.786,178,3.573,179,1.62,180,3.095,181,2.136,191,2.394,192,2.05,214,1.53,215,2.122,222,1.941,227,2.122,233,2.122,255,2.05,301,3.947,304,2.339,340,1.34,401,3.777,402,2.339,403,2.612,404,2.976,405,2.976,406,2.976,407,2.612,408,2.976,409,4.498,410,2.976,411,2.976,412,2.976,413,2.339,414,2.976,415,2.976,416,2.976,417,2.976,418,2.976,419,2.976,420,2.976,421,2.976,422,2.976,423,2.976,424,2.976,425,2.976,426,2.976]],["title/injectables/JwtStrategy.html",[133,0.891,222,1.856]],["body/injectables/JwtStrategy.html",[3,0.298,4,0.262,5,0.262,7,0.372,8,1.753,12,0.028,13,0.967,15,1.301,16,0.668,20,0.485,21,0.635,24,0.298,25,0.071,26,1.505,28,0.983,31,0.019,32,0.019,55,4.035,56,2.087,72,0.61,100,1.757,108,1.977,133,1.235,134,1.757,150,1.884,151,1.235,152,1.325,167,2.087,175,1.398,176,2.367,178,2.813,179,1.054,180,2.677,181,1.848,191,2.367,192,2.028,214,1.505,215,2.087,222,2.573,227,2.087,233,2.087,246,1.909,255,2.028,301,4.189,304,2.301,324,3.945,401,4.035,403,2.569,404,2.928,405,2.928,406,2.928,407,2.569,408,3.945,409,4.461,410,2.928,411,2.928,412,2.928,413,2.301,414,2.928,415,2.928,416,2.928,417,2.928,418,2.928,419,3.945,420,2.928,421,2.928,422,2.928,423,2.928,424,2.928,425,2.928,426,2.928,427,3.472,428,3.472,429,3.472]],["title/classes/LoginDto.html",[25,0.069,155,1.856]],["body/classes/LoginDto.html",[3,0.379,4,0.333,5,0.333,7,0.474,11,1.66,12,0.027,13,0.999,16,0.885,20,0.379,24,0.379,25,0.121,31,0.022,32,0.022,72,0.713,80,3.265,144,4.045,155,3.265,177,1.251,340,1.548,371,2.43,382,3.27,393,3.624,394,4.59,396,2.657,430,3.726,431,2.657,432,4.045,433,5.937,434,4.419,435,4.419]],["title/entities/Queue.html",[337,1.265,343,1.463]],["body/entities/Queue.html",[3,0.247,4,0.218,5,0.218,7,0.31,11,1.869,12,0.028,13,1.125,16,0.746,19,2.638,20,0.411,24,0.353,25,0.059,31,0.016,32,0.016,68,2.34,72,0.814,84,1.35,151,1.46,179,1.588,214,1.251,216,1.798,266,1.251,337,1.082,338,3.114,340,1.166,343,2.079,344,2.435,346,3.636,352,3.466,354,2.884,356,3.456,359,2.435,360,4.662,361,2.475,363,3.471,436,2.136,437,4.045,438,4.045,439,3.55,440,4.662,441,4.045,442,3.55,443,3.87,444,4.116,445,2.887,446,3.471,447,2.887,448,4.116,449,2.887,450,2.435,451,3.471,452,2.887,453,2.876,454,2.887,455,4.116,456,2.887,457,4.116,458,2.887,459,2.887,460,4.116,461,3.046,462,2.887,463,3.324,464,2.887,465,4.116,466,3.471,467,2.136,468,2.136,469,3.046,470,3.046,471,3.046,472,3.046,473,2.887,474,2.435]],["title/controllers/QueueController.html",[0,1.359,475,2.237]],["body/controllers/QueueController.html",[0,0.817,2,0.879,3,0.174,4,0.153,5,0.153,7,0.217,8,1.185,11,1.862,12,0.028,13,1.121,15,2.298,16,0.902,19,1.738,20,0.432,21,0.371,24,0.174,25,0.041,26,0.879,27,1.344,28,1.736,31,0.013,32,0.013,68,0.76,72,0.76,95,1.9,100,1.026,108,0.708,141,1.5,150,2.252,151,1.51,152,1.584,153,2.339,163,2.339,164,2.874,165,1.344,166,1.219,172,1.026,174,1.344,177,0.464,204,1.344,208,1.026,214,0.879,216,2.143,233,1.219,255,1.902,275,2.339,304,1.344,343,0.879,370,3.164,432,1.5,442,2.339,463,2.638,475,2.095,476,1.71,477,2.665,478,2.665,479,2.665,480,2.908,481,2.665,482,2.665,483,4.387,484,2.095,485,4.387,486,4.387,487,3.699,488,2.665,489,2.665,490,3.699,491,2.339,492,2.027,493,2.339,494,3.161,495,2.027,496,1.71,497,3.161,498,2.027,499,2.339,500,2.027,501,2.027,502,2.027,503,2.027,504,1.71,505,3.161,506,2.027,507,1.71,508,3.161,509,2.027,510,3.161,511,2.027,512,1.344,513,2.665,514,2.027,515,3.161,516,2.027,517,3.161,518,2.027,519,3.161,520,2.027,521,2.027,522,3.161,523,2.027,524,2.027,525,3.161,526,2.027,527,3.161,528,2.027,529,1.71,530,3.272,531,3.161,532,2.027,533,2.027,534,1.71,535,3.161,536,1.5,537,2.027,538,2.027,539,2.027,540,1.966,541,1.5,542,1.71,543,2.665,544,1.71,545,1.344,546,1.71,547,2.027,548,2.027,549,2.027,550,3.161,551,2.027,552,2.027,553,2.027,554,2.027,555,2.339,556,2.027,557,1.71,558,2.665,559,2.665,560,2.027,561,2.027,562,2.027,563,2.027,564,2.027,565,2.027,566,2.027,567,2.027,568,1.71,569,2.027,570,2.027,571,2.027,572,2.027,573,2.027,574,2.027,575,2.027,576,2.027,577,2.027,578,2.027,579,2.027,580,2.027,581,2.027,582,2.027]],["title/entities/QueueDetails.html",[337,1.265,453,1.856]],["body/entities/QueueDetails.html",[3,0.215,4,0.189,5,0.189,7,0.269,11,1.904,12,0.027,13,1.146,16,0.903,20,0.379,24,0.215,25,0.051,31,0.015,32,0.015,68,2.226,72,0.818,84,1.171,90,2.46,100,1.878,151,1.618,177,1.296,179,1.661,208,1.878,216,1.658,228,1.377,255,1.917,258,2.231,266,1.085,316,2.432,318,2.432,337,0.939,340,1.051,343,2.574,346,3.571,347,1.853,349,4.124,352,3.936,354,2.659,356,3.685,361,2.231,364,3.272,374,3.272,375,3.272,376,3.272,377,3.272,378,3.272,379,3.272,453,2.041,583,5.334,584,2.112,585,3.272,586,2.112,587,2.504,588,3.712,589,2.504,590,3.13,591,2.504,592,2.504,593,3.712,594,2.504,595,3.13,596,2.504,597,3.712,598,2.504,599,3.712,600,2.504,601,3.13,602,3.712,603,4.891,604,2.504,605,4.891,606,3.712,607,2.504,608,2.504,609,3.712,610,2.504,611,4.124,612,3.712,613,2.504,614,2.504,615,3.729,616,2.504,617,2.504,618,2.504]],["title/classes/QueueGateway.html",[25,0.069,619,1.856]],["body/classes/QueueGateway.html",[3,0.202,4,0.178,5,0.178,7,0.253,8,1.332,11,1.443,12,0.028,13,1.089,15,2.081,20,0.407,21,0.432,24,0.202,25,0.048,27,3.149,28,1.209,31,0.014,32,0.014,68,0.885,70,1.565,72,0.762,89,1.565,90,1.565,95,3.435,104,2.958,108,1.241,116,2.404,150,2.301,151,1.509,152,1.618,158,2.83,179,1.917,192,1.54,243,3.149,246,1.954,307,1.991,338,1.195,340,1.006,343,1.024,361,1.42,371,1.299,491,2.629,499,3.515,540,2.81,541,1.747,585,4.109,619,1.954,620,1.991,621,2.629,622,4.27,623,4.27,624,4.75,625,4.513,626,3.552,627,3.552,628,3.552,629,3.552,630,3.552,631,3.552,632,3.552,633,2.361,634,3.552,635,1.747,636,3.552,637,2.361,638,4.27,639,3.552,640,6.359,641,2.361,642,5.094,643,5.714,644,3.552,645,2.361,646,3.552,647,3.552,648,2.361,649,3.552,650,3.552,651,2.361,652,3.552,653,3.552,654,2.361,655,3.552,656,2.361,657,3.552,658,2.361,659,3.552,660,2.361,661,1.991,662,1.991,663,1.747,664,2.361,665,2.361,666,2.361,667,2.361,668,1.991,669,3.552,670,2.361,671,3.552,672,2.361,673,2.361,674,3.552,675,2.361,676,2.995,677,2.361,678,2.361,679,2.361,680,1.991,681,1.991,682,1.991,683,2.361,684,2.361,685,2.361,686,3.552,687,2.361,688,2.361]],["title/modules/QueueModule.html",[33,1.265,46,2.029]],["body/modules/QueueModule.html",[2,2.167,3,0.329,4,0.29,5,0.29,12,0.027,20,0.554,21,0.702,24,0.329,25,0.078,31,0.02,32,0.02,33,2.084,35,1.795,36,1.942,37,2.308,38,2.308,39,1.942,40,3.343,41,3.058,46,3.888,49,3.006,50,2.308,51,2.111,53,2.308,57,2.308,58,1.664,338,2.53,343,1.664,453,2.75,467,2.84,468,2.84,475,3.685,536,2.84,540,3.383,541,2.84,545,2.544,619,3.556,663,3.7,689,3.237,690,3.237,691,3.237,692,3.839,693,2.84,694,3.237,695,3.839,696,3.237,697,3.237,698,3.839]],["title/injectables/QueueService.html",[133,0.891,540,1.708]],["body/injectables/QueueService.html",[3,0.093,4,0.082,5,0.082,7,0.116,8,0.705,12,0.028,13,0.915,15,1.83,16,0.601,19,2.523,20,0.378,21,0.198,24,0.093,25,0.022,28,1.477,31,0.007,32,0.007,58,0.469,68,0.705,70,0.717,72,0.598,90,1.653,100,0.548,104,3.137,108,2.085,116,2.982,119,1.392,133,0.497,134,0.548,150,1.848,151,1.289,152,1.299,158,3.235,177,0.248,179,1.717,186,0.717,187,2.236,191,1.508,192,1.912,207,0.801,208,1.508,209,0.651,214,1.081,216,1.49,243,1.975,246,1.034,248,3.041,255,1.463,265,0.801,266,0.815,275,1.845,276,0.913,283,1.845,286,2.205,316,0.595,318,0.595,321,0.913,325,0.913,328,1.586,338,2.233,341,1.586,343,2.63,358,1.392,370,2.029,374,0.801,375,0.801,376,2.738,377,0.801,378,0.801,379,0.801,437,1.586,439,2.738,440,3.55,441,0.913,442,2.497,443,2.497,446,2.103,453,1.372,463,1.792,467,0.801,468,0.801,469,2.205,470,0.801,471,1.845,472,0.801,474,2.845,477,1.586,478,1.586,479,2.513,480,1.975,481,1.586,482,1.586,484,1.247,487,2.513,488,1.586,489,1.586,490,2.513,491,2.497,496,1.586,499,2.205,504,1.586,507,1.586,512,1.247,529,1.586,530,2.39,536,0.801,540,0.952,542,0.913,543,1.586,544,0.913,545,0.717,555,0.801,557,2.103,558,2.513,559,0.913,585,2.941,619,2.315,663,0.801,668,0.913,676,3.352,681,2.103,682,0.913,693,0.801,694,2.103,696,0.913,697,0.913,699,0.913,700,1.082,701,2.494,702,2.494,703,1.082,704,1.881,705,1.881,706,1.082,707,1.082,708,1.881,709,1.082,710,1.082,711,1.082,712,1.082,713,1.082,714,1.082,715,1.881,716,1.082,717,1.881,718,1.082,719,1.082,720,1.082,721,0.913,722,1.082,723,1.082,724,1.082,725,1.082,726,0.913,727,2.494,728,1.881,729,1.881,730,1.082,731,1.082,732,1.082,733,3.72,734,1.881,735,2.494,736,1.881,737,1.082,738,1.082,739,1.082,740,1.881,741,3.975,742,1.082,743,1.082,744,1.881,745,1.082,746,1.082,747,1.082,748,1.082,749,1.881,750,0.801,751,0.913,752,1.082,753,1.881,754,1.082,755,1.082,756,2.494,757,1.881,758,1.082,759,3.701,760,1.082,761,2.494,762,1.082,763,1.881,764,1.082,765,1.881,766,1.082,767,1.082,768,1.082,769,1.082,770,1.082,771,1.082,772,1.881,773,1.082,774,1.082,775,1.082,776,1.082,777,1.082,778,1.082,779,1.082,780,1.082,781,1.082,782,1.082,783,1.082,784,1.082,785,1.082,786,1.082,787,2.98,788,1.082,789,2.98,790,2.494,791,2.494,792,2.494,793,2.494,794,1.881,795,1.881,796,1.881,797,1.082,798,1.082,799,1.082,800,2.494,801,1.881,802,1.082,803,2.98,804,1.082,805,1.881,806,1.082,807,2.494,808,1.082,809,1.082,810,1.881,811,1.082,812,1.082,813,1.082,814,1.082,815,1.082,816,1.082,817,1.082,818,0.913,819,1.082,820,1.082,821,1.082,822,1.082,823,1.082,824,1.082,825,1.082,826,0.913,827,3.374,828,1.881,829,2.494,830,1.881,831,0.913,832,1.082,833,1.082,834,1.881,835,1.082,836,1.881,837,1.082,838,1.881,839,1.082,840,1.881,841,1.082,842,1.082,843,1.082,844,1.082,845,1.082,846,1.082,847,1.082,848,1.082,849,1.881,850,1.881,851,1.881,852,1.881,853,1.881,854,1.082,855,1.082,856,1.082,857,1.082,858,1.082,859,1.082,860,1.082,861,1.082,862,2.494,863,1.881,864,1.881,865,1.082,866,1.881,867,1.082,868,1.082,869,1.082,870,1.082,871,1.082,872,1.082,873,1.082,874,1.082]],["title/classes/RegisterDto.html",[25,0.069,160,1.856]],["body/classes/RegisterDto.html",[3,0.286,4,0.251,5,0.251,7,0.357,11,1.93,12,0.027,13,1.162,16,0.961,20,0.286,24,0.286,25,0.105,31,0.018,32,0.018,72,0.829,78,3.115,80,2.849,151,1.368,152,1.775,160,2.849,177,1.041,180,2.621,316,2.849,317,3.833,318,2.849,319,3.833,320,3.833,340,1.289,371,1.833,380,3.833,382,3.833,391,4.119,393,4.261,394,4.45,396,2.004,431,2.004,432,3.366,875,2.81,876,4.55,877,3.332,878,3.332,879,3.332,880,3.332,881,3.332,882,3.332,883,3.332,884,3.332,885,3.332,886,3.332,887,3.332,888,4.55,889,3.332,890,3.332]],["title/interfaces/RequestWithUser.html",[147,1.708,175,1.359]],["body/interfaces/RequestWithUser.html",[0,1.373,3,0.292,4,0.257,5,0.257,7,0.366,12,0.028,16,0.659,20,0.503,21,0.623,24,0.292,25,0.069,26,1.478,28,1.484,31,0.018,32,0.018,72,0.683,95,2.049,104,2.338,108,1.19,116,1.725,139,2.049,140,2.522,147,2.652,153,2.522,155,3.09,156,2.874,160,3.09,161,2.874,163,2.522,164,2.522,165,2.259,166,3.378,167,2.778,168,2.652,169,2.522,170,2.522,171,2.522,172,1.725,173,2.874,174,2.259,175,1.373,176,2.338,177,1.344,178,2.049,179,1.403,180,1.725,181,1.19,182,2.874,183,2.874,184,2.522,185,2.874,186,2.259,187,3.062,188,2.874,189,2.522,190,3.878,191,2.338,192,2.003,193,2.874,194,2.874,195,2.874,196,2.874,197,2.874,198,2.874,199,2.874,200,2.874,201,2.874,202,2.874,203,2.874,204,2.259,205,2.874,206,2.874,207,2.522,208,2.338,209,2.049,210,2.874,211,2.874,212,2.874,213,3.896,214,1.478,215,2.049,216,1.278,217,2.874,340,1.308,402,2.259,493,3.419]],["title/interfaces/RequestWithUser-1.html",[147,1.43,175,1.138,750,2.091]],["body/interfaces/RequestWithUser-1.html",[3,0.34,4,0.3,5,0.3,7,0.426,12,0.028,16,0.567,20,0.484,21,0.726,24,0.34,25,0.081,26,1.722,28,1.448,31,0.02,32,0.02,68,1.489,72,0.737,108,1.974,133,1.349,147,2.586,152,1.448,166,3.588,175,2.058,176,2.586,177,1.413,181,1.387,258,2.388,340,1.448,402,2.632,493,3.782,621,2.939,891,2.939,892,4.31,893,4.31,894,4.766,895,2.939,896,3.388,897,3.349,898,3.349,899,2.388,900,3.349,901,4.31,902,3.349,903,3.349,904,3.349,905,3.349,906,3.349,907,3.349,908,3.349,909,3.349]],["title/entities/Role.html",[337,1.265,910,1.856]],["body/entities/Role.html",[3,0.339,4,0.299,5,0.299,7,0.425,11,1.81,12,0.027,13,1.09,16,0.851,20,0.437,24,0.339,25,0.081,31,0.02,32,0.02,68,2.234,72,0.777,84,1.852,100,2.582,151,1.49,177,1.446,179,1.549,216,2.116,228,2.178,266,1.717,337,1.485,340,1.445,346,3.394,354,3.394,356,3.394,431,3.394,461,2.931,555,4.177,586,3.34,910,2.806,911,3.34,912,3.961,913,3.961,914,3.34,915,3.961,916,3.961,917,4.302,918,3.961,919,4.302,920,3.961]],["title/controllers/RolesController.html",[0,1.359,921,2.237]],["body/controllers/RolesController.html",[0,1.485,2,1.598,3,0.316,4,0.278,5,0.278,7,0.395,8,1.825,11,1.656,12,0.027,13,0.996,15,2.044,16,0.884,20,0.517,21,0.674,24,0.316,25,0.075,26,1.598,27,2.444,28,1.544,31,0.019,32,0.019,72,0.635,141,2.728,150,1.961,151,1.286,152,1.379,165,2.444,172,1.866,174,2.444,181,1.7,204,2.444,216,1.825,250,2.759,255,2.111,480,3.844,484,3.227,512,2.444,513,3.109,534,3.109,546,3.109,568,3.109,899,2.927,921,3.227,922,3.109,923,4.106,924,3.687,925,6.193,926,3.687,927,3.687,928,3.687,929,3.109,930,3.687,931,3.687,932,3.109,933,3.687,934,3.687,935,3.687,936,5.452,937,3.687,938,3.687,939,3.687,940,3.687,941,3.687]],["title/guards/RolesGuard.html",[899,2.029,942,2.497]],["body/guards/RolesGuard.html",[3,0.327,4,0.288,5,0.288,7,0.41,8,1.868,12,0.028,13,0.911,15,1.431,16,0.545,20,0.475,21,0.698,24,0.327,25,0.078,26,1.655,28,1.411,31,0.02,32,0.02,68,1.431,72,0.65,108,1.937,133,1.316,147,1.932,150,2.007,151,1.316,152,1.411,166,3.335,175,2.007,176,1.932,177,1.141,181,1.334,246,2.1,258,2.996,621,2.826,891,2.826,892,4.957,893,4.957,894,5.273,895,2.826,896,3.303,897,3.22,898,3.22,899,2.996,900,4.202,901,4.202,902,3.22,903,3.22,904,3.22,905,3.22,906,3.22,907,3.22,908,3.22,909,3.22,943,3.819,944,3.819,945,3.819,946,3.819,947,3.819]],["title/modules/RolesModule.html",[33,1.265,47,1.856]],["body/modules/RolesModule.html",[2,2.27,3,0.353,4,0.311,5,0.311,12,0.027,20,0.547,21,0.754,24,0.353,25,0.084,31,0.021,32,0.021,33,2.157,35,1.929,36,2.088,37,2.48,38,2.48,39,2.088,40,3.459,41,3.164,47,3.566,49,3.148,50,2.48,51,2.269,53,2.48,57,2.48,58,1.788,177,1.199,228,2.269,250,3.417,910,2.269,921,3.813,932,3.479,948,3.479,949,3.479,950,3.479,951,4.125,952,3.479,953,4.125,954,4.125]],["title/injectables/RolesService.html",[133,0.891,250,1.708]],["body/injectables/RolesService.html",[3,0.228,4,0.201,5,0.201,7,0.285,8,1.455,12,0.028,13,1.022,15,2.007,16,0.654,20,0.459,21,0.486,24,0.228,25,0.054,28,1.426,31,0.015,32,0.015,58,1.153,72,0.698,104,3.259,106,4.535,108,1.87,116,2.828,133,1.025,134,1.346,150,2.156,151,1.593,152,1.516,177,1.321,179,1.907,181,1.952,191,2.318,192,1.986,216,2.095,228,1.463,243,2.572,246,2.134,248,3.825,250,1.964,252,3.863,255,2.183,265,1.969,266,1.153,269,2.243,270,3.272,283,2.871,286,3.39,480,3.337,484,2.572,512,2.572,721,2.243,826,3.272,910,3.174,917,3.272,923,3.272,929,3.272,952,2.243,955,2.243,956,3.881,957,3.881,958,2.661,959,2.661,960,3.881,961,3.881,962,4.581,963,2.661,964,2.661,965,3.881,966,2.661,967,2.661,968,2.661,969,2.661,970,2.661,971,3.881,972,3.881,973,2.661,974,2.661,975,2.661,976,2.661]],["title/classes/UpdateQueueDto.html",[25,0.069,530,2.029]],["body/classes/UpdateQueueDto.html",[3,0.378,4,0.332,5,0.332,7,0.472,11,1.657,12,0.027,13,0.997,16,0.779,19,3.261,20,0.468,24,0.378,25,0.111,31,0.022,32,0.022,72,0.712,152,1.755,340,1.546,371,2.423,373,3.26,380,3.26,391,4.387,393,3.617,396,2.649,438,4.999,463,3.565,530,3.281,545,2.92,977,4.999,978,4.406,979,4.406,980,4.406,981,4.406,982,4.406]],["title/entities/User.html",[177,0.772,337,1.265]],["body/entities/User.html",[3,0.219,4,0.193,5,0.193,7,0.274,11,1.928,12,0.027,13,1.16,16,0.929,20,0.322,24,0.219,25,0.052,31,0.015,32,0.015,68,2.358,72,0.828,78,2.688,80,2.459,84,1.193,151,1.676,177,0.861,179,1.499,180,2.262,181,1.561,214,1.631,216,1.973,266,1.106,284,3.77,316,2.459,317,3.308,318,2.459,319,3.308,320,3.308,337,0.956,340,1.066,346,3.649,347,1.888,352,3.65,354,2.688,356,3.783,364,3.652,439,3.308,443,2.784,450,2.151,451,3.173,461,2.784,466,3.173,590,3.173,595,3.173,601,2.151,611,2.151,615,3.173,910,3.132,914,3.173,919,3.173,983,2.151,984,4.471,985,3.763,986,2.551,987,2.551,988,4.935,989,2.551,990,2.551,991,2.551,992,2.551,993,2.551,994,2.551,995,3.763,996,2.551,997,2.551,998,3.763,999,2.551,1000,2.551,1001,2.551,1002,3.763,1003,3.763,1004,2.551,1005,2.551,1006,3.763,1007,2.551,1008,2.551,1009,2.551,1010,2.551,1011,2.551,1012,3.763,1013,2.551]],["title/modules/UsersModule.html",[33,1.265,48,2.029]],["body/modules/UsersModule.html",[3,0.416,4,0.366,5,0.366,12,0.027,20,0.53,21,0.886,24,0.416,25,0.099,31,0.023,32,0.023,33,2.169,35,2.268,41,2.667,48,3.478,53,2.916,57,3.478,58,2.102,177,1.11,241,4.09,1014,4.85,1015,4.85]],["title/coverage.html",[1016,3.395]],["body/coverage.html",[0,2.209,1,2.133,5,0.243,6,2.713,12,0.027,22,1.769,25,0.117,31,0.018,32,0.018,39,1.628,59,2.381,72,0.42,133,1.571,135,2.713,139,1.934,140,3.286,147,2.247,155,1.769,160,1.769,168,1.628,172,1.628,175,2.048,177,0.736,181,1.124,192,1.395,222,1.769,242,2.713,250,1.628,337,2.157,338,1.628,339,2.381,343,1.395,370,1.934,372,2.713,373,3.286,397,2.713,398,2.713,401,2.133,403,3.286,430,2.713,436,2.381,453,1.769,475,2.133,476,2.713,530,1.934,540,1.628,583,2.713,584,2.713,619,1.769,620,2.713,699,2.713,733,5.781,875,2.713,891,3.286,896,2.133,899,1.934,910,1.769,911,2.713,921,2.133,922,2.713,942,2.381,955,2.713,977,2.713,983,2.713,1016,2.381,1017,2.713,1018,3.217,1019,3.217,1020,5.484,1021,5.086,1022,5.086,1023,4.441,1024,3.745,1025,5.086,1026,6.448,1027,3.217,1028,3.217,1029,3.217,1030,3.217,1031,2.713,1032,3.745,1033,4.441,1034,2.713,1035,3.217,1036,3.217,1037,3.217,1038,3.217,1039,3.217,1040,3.217]],["title/dependencies.html",[36,2.051,1041,2.383]],["body/dependencies.html",[12,0.028,21,0.803,25,0.089,31,0.022,32,0.022,36,2.223,56,2.641,58,1.904,225,3.25,227,2.641,233,2.641,266,1.904,267,3.704,396,2.641,407,4.031,661,3.704,662,4.593,895,3.25,1042,6.364,1043,4.393,1044,5.447,1045,4.393,1046,5.447,1047,4.393,1048,4.393,1049,4.393,1050,4.393,1051,4.393,1052,4.393,1053,4.393,1054,4.393,1055,4.393,1056,4.393,1057,4.393,1058,4.393,1059,4.393,1060,4.393,1061,4.393,1062,4.393]],["title/miscellaneous/enumerations.html",[1063,1.554,1064,3.418]],["body/miscellaneous/enumerations.html",[7,0.513,12,0.027,31,0.023,32,0.023,339,3.543,358,4.248,366,4.841,367,4.841,436,3.543,463,3.452,469,4.248,470,4.248,471,4.248,472,4.248,635,4.898,1063,2.633,1064,4.037,1065,4.788,1066,4.788]],["title/miscellaneous/functions.html",[1063,1.554,1067,3.418]],["body/miscellaneous/functions.html",[7,0.539,12,0.025,31,0.023,32,0.023,39,3.177,72,0.656,150,2.026,151,1.328,152,1.425,1032,4.241,1034,4.985,1063,2.766,1067,4.241,1068,5.912,1069,5.03,1070,6.278]],["title/index.html",[7,0.303,1071,2.826,1072,2.826]],["body/index.html",[4,0.218,12,0.026,31,0.016,32,0.016,51,3.161,89,2.728,92,2.435,114,2.435,119,3.55,209,3.456,248,1.914,277,2.435,322,2.435,431,1.736,625,2.435,680,2.435,693,2.136,726,2.435,751,2.435,818,2.435,831,4.41,1016,2.136,1017,3.471,1073,2.887,1074,2.887,1075,4.797,1076,4.116,1077,2.887,1078,2.887,1079,2.887,1080,4.116,1081,4.797,1082,2.887,1083,5.229,1084,2.887,1085,5.229,1086,6.047,1087,2.887,1088,5.915,1089,2.887,1090,2.887,1091,4.116,1092,2.887,1093,2.887,1094,4.797,1095,2.887,1096,4.116,1097,2.887,1098,2.887,1099,2.887,1100,2.887,1101,2.887,1102,5.229,1103,6.047,1104,5.748,1105,4.116,1106,2.887,1107,2.887,1108,2.887,1109,2.887,1110,2.887,1111,4.116,1112,2.887,1113,4.116,1114,2.887,1115,4.116,1116,5.748,1117,5.229,1118,2.887,1119,4.116,1120,2.887,1121,2.887,1122,2.887,1123,2.887,1124,5.229,1125,2.887,1126,2.887,1127,2.887,1128,4.116,1129,2.887,1130,2.887,1131,2.887,1132,2.887,1133,2.887,1134,4.116,1135,2.887,1136,2.887,1137,2.887,1138,4.116,1139,2.887,1140,2.887,1141,4.41,1142,4.116,1143,2.887,1144,2.887,1145,2.887,1146,2.887,1147,2.887,1148,2.887,1149,2.887,1150,2.887,1151,4.116,1152,2.887,1153,2.435,1154,2.887,1155,2.887,1156,2.887,1157,2.887,1158,2.887,1159,4.116,1160,2.887,1161,2.887,1162,2.887,1163,2.887,1164,4.116,1165,2.887,1166,2.887,1167,2.887,1168,4.116,1169,4.116,1170,2.887,1171,2.887,1172,2.887,1173,2.887,1174,2.887,1175,2.887,1176,2.887,1177,2.887,1178,2.887,1179,2.887,1180,2.887,1181,2.435,1182,2.887,1183,2.887,1184,2.887,1185,2.887,1186,2.887,1187,2.887,1188,2.435]],["title/modules.html",[35,2.146]],["body/modules.html",[12,0.023,31,0.023,32,0.023,34,3.279,35,2.313,45,2.974,46,2.974,47,2.72,48,2.974,1141,5.434,1153,4.171,1189,6.444,1190,6.444,1191,6.577,1192,4.947]],["title/overview.html",[1193,3.869]],["body/overview.html",[2,1.598,12,0.027,22,2.998,31,0.019,32,0.019,33,1.382,34,4.404,35,1.724,36,1.866,37,2.217,38,2.217,39,1.866,40,2.217,41,2.028,42,3.109,43,3.109,44,3.109,45,3.969,46,3.797,47,3.473,48,3.278,49,2.927,50,2.217,51,2.028,84,1.724,134,1.866,168,3.196,218,3.109,220,3.109,221,3.109,222,3.473,250,3.196,371,2.028,402,2.444,540,3.196,619,3.189,689,3.109,690,3.109,691,3.109,750,2.728,942,2.728,948,3.109,949,3.109,950,3.109,1193,3.109,1194,5.452,1195,3.687,1196,3.687,1197,3.687]],["title/properties.html",[340,1.148,1041,2.383]],["body/properties.html",[12,0.027,31,0.024,32,0.024,340,1.469,431,3.119,1181,4.374,1188,4.374,1198,5.188,1199,5.188,1200,5.188]],["title/miscellaneous/variables.html",[413,2.687,1063,1.554]],["body/miscellaneous/variables.html",[7,0.46,12,0.027,16,0.766,31,0.021,32,0.021,59,3.973,72,0.764,73,3.619,74,3.619,76,3.619,78,2.58,80,2.36,82,3.619,84,2.007,85,3.619,86,3.619,87,3.619,89,3.558,93,3.619,107,4.527,181,2.207,361,3.522,413,2.845,635,4.335,896,3.558,1024,3.619,1031,3.619,1063,2.36,1201,4.292,1202,5.369,1203,4.292,1204,4.292,1205,4.292,1206,4.292,1207,4.292,1208,4.292,1209,4.292,1210,4.292,1211,4.292,1212,4.292,1213,4.292]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":733,"title":{},"body":{"injectables/QueueService.html":{},"coverage.html":{}}}],["0')}${string(today.getdate()).padstart(2",{"_index":732,"title":{},"body":{"injectables/QueueService.html":{}}}],["0.0.1",{"_index":1199,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1049,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":1058,"title":{},"body":{"dependencies.html":{}}}],["0.3.22",{"_index":1062,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":1054,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1026,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1035,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1037,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":1038,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":1036,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1021,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1020,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1022,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1023,"title":{},"body":{"coverage.html":{}}}],["08:00",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["1",{"_index":750,"title":{"interfaces/RequestWithUser-1.html":{}},"body":{"injectables/QueueService.html":{},"overview.html":{}}}],["1).padstart(2",{"_index":731,"title":{},"body":{"injectables/QueueService.html":{}}}],["1).padstart(4",{"_index":746,"title":{},"body":{"injectables/QueueService.html":{}}}],["1/10",{"_index":1030,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":1028,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":1029,"title":{},"body":{"coverage.html":{}}}],["11.0.0",{"_index":1044,"title":{},"body":{"dependencies.html":{}}}],["11.0.5",{"_index":1045,"title":{},"body":{"dependencies.html":{}}}],["11.1.0",{"_index":1042,"title":{},"body":{"dependencies.html":{}}}],["15",{"_index":749,"title":{},"body":{"injectables/QueueService.html":{}}}],["16.5.0",{"_index":1051,"title":{},"body":{"dependencies.html":{}}}],["1d",{"_index":240,"title":{},"body":{"modules/AuthModule.html":{}}}],["3",{"_index":1197,"title":{},"body":{"overview.html":{}}}],["3.14.1",{"_index":1053,"title":{},"body":{"dependencies.html":{}}}],["33",{"_index":1027,"title":{},"body":{"coverage.html":{}}}],["3306",{"_index":1207,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4",{"_index":1195,"title":{},"body":{"overview.html":{}}}],["4.0.1",{"_index":1055,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":1043,"title":{},"body":{"dependencies.html":{}}}],["4.8.1",{"_index":1061,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":1194,"title":{},"body":{"overview.html":{}}}],["5.1.1",{"_index":1048,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":1196,"title":{},"body":{"overview.html":{}}}],["60000",{"_index":870,"title":{},"body":{"injectables/QueueService.html":{}}}],["7.8.2",{"_index":1060,"title":{},"body":{"dependencies.html":{}}}],["__dirname",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["__password",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{}}}],["access_token",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{}}}],["action",{"_index":789,"title":{},"body":{"injectables/QueueService.html":{}}}],["active",{"_index":366,"title":{},"body":{"entities/Counter.html":{},"miscellaneous/enumerations.html":{}}}],["add",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{}}}],["addcounter",{"_index":477,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["addcounter(@body",{"_index":580,"title":{},"body":{"controllers/QueueController.html":{}}}],["addcounter(data",{"_index":492,"title":{},"body":{"controllers/QueueController.html":{}}}],["addcounter(name",{"_index":705,"title":{},"body":{"injectables/QueueService.html":{}}}],["address",{"_index":374,"title":{},"body":{"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{}}}],["afterconnect",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["ahead",{"_index":812,"title":{},"body":{"injectables/QueueService.html":{}}}],["allowing",{"_index":1129,"title":{},"body":{"index.html":{}}}],["already",{"_index":331,"title":{},"body":{"injectables/AuthService.html":{}}}],["amazing",{"_index":1174,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":1104,"title":{},"body":{"index.html":{}}}],["applications",{"_index":1080,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":34,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appointment_type",{"_index":588,"title":{},"body":{"entities/QueueDetails.html":{}}}],["appointmenttype",{"_index":375,"title":{},"body":{"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{}}}],["appservice",{"_index":22,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array.isarray(payload.roles",{"_index":425,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["asc",{"_index":792,"title":{},"body":{"injectables/QueueService.html":{}}}],["assign",{"_index":975,"title":{},"body":{"injectables/RolesService.html":{}}}],["assignrolestouser",{"_index":956,"title":{},"body":{"injectables/RolesService.html":{}}}],["assignrolestouser(userid",{"_index":961,"title":{},"body":{"injectables/RolesService.html":{}}}],["associated",{"_index":839,"title":{},"body":{"injectables/QueueService.html":{}}}],["async",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{}}}],["attempt",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":229,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QueueController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{}}}],["auth.guard.ts",{"_index":398,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/RequestWithUser.html":{}}}],["auth/auth.module",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/decorators/roles.decorator",{"_index":934,"title":{},"body":{"controllers/RolesController.html":{}}}],["auth/guards/jwt",{"_index":546,"title":{},"body":{"controllers/QueueController.html":{},"controllers/RolesController.html":{}}}],["auth/guards/roles.guard",{"_index":933,"title":{},"body":{"controllers/RolesController.html":{}}}],["authcontroller",{"_index":139,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["authenticated",{"_index":550,"title":{},"body":{"controllers/QueueController.html":{}}}],["authguard",{"_index":400,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":399,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":45,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1181,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":168,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":1192,"title":{},"body":{"modules.html":{}}}],["average",{"_index":857,"title":{},"body":{"injectables/QueueService.html":{}}}],["averagewaittime",{"_index":862,"title":{},"body":{"injectables/QueueService.html":{}}}],["avoid",{"_index":782,"title":{},"body":{"injectables/QueueService.html":{}}}],["await",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{}}}],["aws",{"_index":1119,"title":{},"body":{"index.html":{}}}],["backers",{"_index":1175,"title":{},"body":{"index.html":{}}}],["backward",{"_index":1010,"title":{},"body":{"entities/User.html":{}}}],["badrequestexception",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('invalid",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{}}}],["based",{"_index":726,"title":{},"body":{"injectables/QueueService.html":{},"index.html":{}}}],["bcrypt",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["bcrypt.compare",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.compare(logindto.password",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{}}}],["before",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["beforeconnect",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["below",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["board",{"_index":1167,"title":{},"body":{"index.html":{}}}],["body",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QueueController.html":{},"interfaces/RequestWithUser.html":{}}}],["boolean",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["bootstrap",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["break",{"_index":816,"title":{},"body":{"injectables/QueueService.html":{}}}],["browse",{"_index":1191,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1189,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1076,"title":{},"body":{"index.html":{}}}],["bulak_smart_connect",{"_index":1212,"title":{},"body":{"miscellaneous/variables.html":{}}}],["calculate",{"_index":856,"title":{},"body":{"injectables/QueueService.html":{}}}],["called",{"_index":840,"title":{},"body":{"injectables/QueueService.html":{}}}],["callnext",{"_index":478,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["callnext(@param('counterid",{"_index":578,"title":{},"body":{"controllers/QueueController.html":{}}}],["callnext(counterid",{"_index":496,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["canactivate",{"_index":892,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":900,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["cancelled",{"_index":472,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{},"miscellaneous/enumerations.html":{}}}],["cancelledcount",{"_index":852,"title":{},"body":{"injectables/QueueService.html":{}}}],["cascade",{"_index":618,"title":{},"body":{"entities/QueueDetails.html":{}}}],["cascade'})@joincolumn({name",{"_index":604,"title":{},"body":{"entities/QueueDetails.html":{}}}],["catch",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["channel",{"_index":1144,"title":{},"body":{"index.html":{}}}],["check",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"index.html":{}}}],["checks",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["citizen",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{}}}],["class",{"_index":25,"title":{"classes/CreateQueueDto.html":{},"classes/LoginDto.html":{},"classes/QueueGateway.html":{},"classes/RegisterDto.html":{},"classes/UpdateQueueDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":371,"title":{},"body":{"classes/CreateQueueDto.html":{},"classes/LoginDto.html":{},"classes/QueueGateway.html":{},"classes/RegisterDto.html":{},"classes/UpdateQueueDto.html":{},"overview.html":{}}}],["clicks",{"_index":1128,"title":{},"body":{"index.html":{}}}],["client",{"_index":642,"title":{},"body":{"classes/QueueGateway.html":{}}}],["client.id",{"_index":671,"title":{},"body":{"classes/QueueGateway.html":{}}}],["client.join(`counter_${counterid",{"_index":678,"title":{},"body":{"classes/QueueGateway.html":{}}}],["client.join(`queue_${queueid",{"_index":673,"title":{},"body":{"classes/QueueGateway.html":{}}}],["clients",{"_index":681,"title":{},"body":{"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["cloud",{"_index":1114,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":218,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":220,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":219,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":221,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_queuemodule",{"_index":689,"title":{},"body":{"modules/QueueModule.html":{},"overview.html":{}}}],["cluster_queuemodule_exports",{"_index":691,"title":{},"body":{"modules/QueueModule.html":{},"overview.html":{}}}],["cluster_queuemodule_providers",{"_index":690,"title":{},"body":{"modules/QueueModule.html":{},"overview.html":{}}}],["cluster_rolesmodule",{"_index":948,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_rolesmodule_exports",{"_index":949,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_rolesmodule_providers",{"_index":950,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["code",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["column",{"_index":356,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["column({name",{"_index":352,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["column({nullable",{"_index":586,"title":{},"body":{"entities/QueueDetails.html":{},"entities/Role.html":{}}}],["column({type",{"_index":359,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{}}}],["column({unique",{"_index":914,"title":{},"body":{"entities/Role.html":{},"entities/User.html":{}}}],["come",{"_index":1135,"title":{},"body":{"index.html":{}}}],["compatibility",{"_index":1011,"title":{},"body":{"entities/User.html":{}}}],["completed",{"_index":471,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{},"miscellaneous/enumerations.html":{}}}],["completed_at",{"_index":444,"title":{},"body":{"entities/Queue.html":{}}}],["completedat",{"_index":437,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{}}}],["completedcount",{"_index":851,"title":{},"body":{"injectables/QueueService.html":{}}}],["completedqueues",{"_index":859,"title":{},"body":{"injectables/QueueService.html":{}}}],["completedqueues.length",{"_index":863,"title":{},"body":{"injectables/QueueService.html":{}}}],["completedqueues.reduce((total",{"_index":865,"title":{},"body":{"injectables/QueueService.html":{}}}],["completion",{"_index":802,"title":{},"body":{"injectables/QueueService.html":{}}}],["config",{"_index":235,"title":{},"body":{"modules/AuthModule.html":{}}}],["config.get('jwt_secret",{"_index":237,"title":{},"body":{"modules/AuthModule.html":{}}}],["config/database.config",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('db_host",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_name",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_password",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_port",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_username",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('jwt_secret",{"_index":410,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('node_env",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["conflictexception",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{}}}],["conflictexception('email",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{}}}],["conflictexception('username",{"_index":334,"title":{},"body":{"injectables/AuthService.html":{}}}],["conn",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["conn.query(\"set",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["conn.query('set",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["connected",{"_index":670,"title":{},"body":{"classes/QueueGateway.html":{}}}],["connection",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["consistent",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["console.error('login",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('comparing",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('generated",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('login",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["console.log('password",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('register",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["console.log('stored",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('user",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{}}}],["const",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{}}}],["constructor",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{}}}],["constructor(configservice",{"_index":427,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(private",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{}}}],["constructor(queuerepository",{"_index":700,"title":{},"body":{"injectables/QueueService.html":{}}}],["constructor(queueservice",{"_index":633,"title":{},"body":{"classes/QueueGateway.html":{}}}],["constructor(reflector",{"_index":944,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(rolesrepository",{"_index":958,"title":{},"body":{"injectables/RolesService.html":{}}}],["constructor(usersrepository",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["contact_number",{"_index":985,"title":{},"body":{"entities/User.html":{}}}],["contactnumber",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{},"classes/RegisterDto.html":{},"entities/User.html":{}}}],["context",{"_index":947,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":904,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":903,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":905,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/QueueController.html":{},"controllers/RolesController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/QueueController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["controller('queue",{"_index":547,"title":{},"body":{"controllers/QueueController.html":{}}}],["controller('roles",{"_index":935,"title":{},"body":{"controllers/RolesController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/QueueController.html":{},"modules/QueueModule.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"overview.html":{}}}],["conversion",{"_index":765,"title":{},"body":{"injectables/QueueService.html":{}}}],["convert",{"_index":871,"title":{},"body":{"injectables/QueueService.html":{}}}],["converting",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["cors",{"_index":664,"title":{},"body":{"classes/QueueGateway.html":{}}}],["count",{"_index":734,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter",{"_index":338,"title":{"entities/Counter.html":{}},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"coverage.html":{}}}],["counter.currentqueue",{"_index":446,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{}}}],["counter.currentqueue.completedat",{"_index":824,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter.currentqueue.status",{"_index":823,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter.currentqueueid",{"_index":828,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter.id",{"_index":846,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter.name",{"_index":836,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter/entities/counter.entity",{"_index":468,"title":{},"body":{"entities/Queue.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["counter_number",{"_index":448,"title":{},"body":{"entities/Queue.html":{}}}],["counterid",{"_index":499,"title":{},"body":{"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["countername",{"_index":845,"title":{},"body":{"injectables/QueueService.html":{}}}],["counternumber",{"_index":438,"title":{},"body":{"entities/Queue.html":{},"classes/UpdateQueueDto.html":{}}}],["counterrepository",{"_index":702,"title":{},"body":{"injectables/QueueService.html":{}}}],["counters",{"_index":873,"title":{},"body":{"injectables/QueueService.html":{}}}],["counterstatus",{"_index":358,"title":{},"body":{"entities/Counter.html":{},"injectables/QueueService.html":{},"miscellaneous/enumerations.html":{}}}],["counterstatus.active",{"_index":369,"title":{},"body":{"entities/Counter.html":{}}}],["courses",{"_index":1150,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":1016,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":479,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["create(@request",{"_index":548,"title":{},"body":{"controllers/QueueController.html":{}}}],["create(createqueuedto",{"_index":708,"title":{},"body":{"injectables/QueueService.html":{}}}],["create(req",{"_index":500,"title":{},"body":{"controllers/QueueController.html":{}}}],["created",{"_index":735,"title":{},"body":{"injectables/QueueService.html":{}}}],["created_at",{"_index":451,"title":{},"body":{"entities/Queue.html":{},"entities/User.html":{}}}],["createdat",{"_index":439,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{},"entities/User.html":{}}}],["createdatecolumn",{"_index":466,"title":{},"body":{"entities/Queue.html":{},"entities/User.html":{}}}],["createdatecolumn({name",{"_index":450,"title":{},"body":{"entities/Queue.html":{},"entities/User.html":{}}}],["createqueuedto",{"_index":370,"title":{"classes/CreateQueueDto.html":{}},"body":{"classes/CreateQueueDto.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"coverage.html":{}}}],["createqueuedto.address",{"_index":776,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.appointmenttype",{"_index":779,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.firstname",{"_index":773,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.isguest",{"_index":559,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["createqueuedto.lastname",{"_index":774,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.middleinitial",{"_index":775,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.phonenumber",{"_index":777,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.reasonofvisit",{"_index":778,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.userid",{"_index":558,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["creating",{"_index":556,"title":{},"body":{"controllers/QueueController.html":{}}}],["credentials",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["current",{"_index":822,"title":{},"body":{"injectables/QueueService.html":{}}}],["current_queue_id",{"_index":348,"title":{},"body":{"entities/Counter.html":{}}}],["currentqueue",{"_index":341,"title":{},"body":{"entities/Counter.html":{},"injectables/QueueService.html":{}}}],["currentqueueid",{"_index":342,"title":{},"body":{"entities/Counter.html":{}}}],["data",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"interfaces/RequestWithUser.html":{}}}],["database",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["databaseconfig",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["datasource",{"_index":1070,"title":{},"body":{"miscellaneous/functions.html":{}}}],["date",{"_index":443,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{},"entities/User.html":{}}}],["date(today",{"_index":738,"title":{},"body":{"injectables/QueueService.html":{}}}],["datestr",{"_index":729,"title":{},"body":{"injectables/QueueService.html":{}}}],["datetime",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["debug",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{}}}],["debugging",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["declarations",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"overview.html":{}}}],["decorators",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{}}}],["decorators/roles.decorator",{"_index":897,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["deeper",{"_index":1146,"title":{},"body":{"index.html":{}}}],["default",{"_index":361,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"miscellaneous/variables.html":{}}}],["default_role_id",{"_index":988,"title":{},"body":{"entities/User.html":{}}}],["defaultrole",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{}}}],["defaultroleid",{"_index":984,"title":{},"body":{"entities/User.html":{}}}],["defaultstrategy",{"_index":232,"title":{},"body":{"modules/AuthModule.html":{}}}],["define",{"_index":898,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["defined",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{}}}],["delete",{"_index":535,"title":{},"body":{"controllers/QueueController.html":{}}}],["dependencies",{"_index":36,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":1102,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":1118,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":1111,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":1127,"title":{},"body":{"index.html":{}}}],["description",{"_index":431,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":440,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{}}}],["details.entity",{"_index":467,"title":{},"body":{"entities/Queue.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["details.entity.ts",{"_index":584,"title":{},"body":{"entities/QueueDetails.html":{},"coverage.html":{}}}],["details.entity.ts:14",{"_index":592,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:17",{"_index":608,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:21",{"_index":607,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:24",{"_index":614,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:28",{"_index":613,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:31",{"_index":591,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:34",{"_index":596,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:37",{"_index":598,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:40",{"_index":587,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:43",{"_index":600,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:46",{"_index":610,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:49",{"_index":589,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:52",{"_index":594,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.queue",{"_index":455,"title":{},"body":{"entities/Queue.html":{}}}],["determine",{"_index":736,"title":{},"body":{"injectables/QueueService.html":{}}}],["development",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["devtools",{"_index":1156,"title":{},"body":{"index.html":{}}}],["disable",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["disconnected",{"_index":672,"title":{},"body":{"classes/QueueGateway.html":{}}}],["discord",{"_index":1143,"title":{},"body":{"index.html":{}}}],["dive",{"_index":1145,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":1017,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dotenv",{"_index":1050,"title":{},"body":{"dependencies.html":{}}}],["dropschema",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["dto",{"_index":432,"title":{},"body":{"classes/LoginDto.html":{},"controllers/QueueController.html":{},"classes/RegisterDto.html":{}}}],["dto/create",{"_index":542,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["dto/login.dto",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["dto/register.dto",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["dto/update",{"_index":544,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["e2e",{"_index":1097,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":1077,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":1109,"title":{},"body":{"index.html":{}}}],["email",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"entities/User.html":{}}}],["emailorusername",{"_index":433,"title":{},"body":{"classes/LoginDto.html":{}}}],["endpoint",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["ensure",{"_index":1107,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":1158,"title":{},"body":{"index.html":{}}}],["entities",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["entities/queue",{"_index":697,"title":{},"body":{"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["entities/queue.entity",{"_index":545,"title":{},"body":{"controllers/QueueController.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/UpdateQueueDto.html":{}}}],["entities/role.entity",{"_index":952,"title":{},"body":{"modules/RolesModule.html":{},"injectables/RolesService.html":{}}}],["entities/user.entity",{"_index":1015,"title":{},"body":{"modules/UsersModule.html":{}}}],["entity",{"_index":337,"title":{"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{}},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{},"coverage.html":{}}}],["entity('counters",{"_index":368,"title":{},"body":{"entities/Counter.html":{}}}],["entity('queue_details",{"_index":617,"title":{},"body":{"entities/QueueDetails.html":{}}}],["entity('queues",{"_index":473,"title":{},"body":{"entities/Queue.html":{}}}],["entity('roles",{"_index":920,"title":{},"body":{"entities/Role.html":{}}}],["entity('users",{"_index":1008,"title":{},"body":{"entities/User.html":{}}}],["entity{.ts,.js",{"_index":86,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["enum",{"_index":360,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{}}}],["enumerations",{"_index":1064,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":412,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["environments",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["error",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["error('jwt_secret",{"_index":411,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["error('user",{"_index":973,"title":{},"body":{"injectables/RolesService.html":{}}}],["error.message",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["errors",{"_index":783,"title":{},"body":{"injectables/QueueService.html":{}}}],["eslint",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{}}}],["eslint/no",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{}}}],["estimated_wait_time",{"_index":457,"title":{},"body":{"entities/Queue.html":{}}}],["estimatedwaittime",{"_index":441,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{}}}],["estimation",{"_index":752,"title":{},"body":{"injectables/QueueService.html":{}}}],["example",{"_index":1085,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":893,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["existinguserbyemail",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{}}}],["existinguserbyusername",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{}}}],["exists",{"_index":328,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{}}}],["experience",{"_index":1148,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":239,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{}}}],["exports",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":1047,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["extract",{"_index":549,"title":{},"body":{"controllers/QueueController.html":{}}}],["extractjwt",{"_index":405,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":416,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["failed",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{}}}],["fails",{"_index":768,"title":{},"body":{"injectables/QueueService.html":{}}}],["false",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"entities/Role.html":{}}}],["fast",{"_index":1122,"title":{},"body":{"index.html":{}}}],["features",{"_index":1131,"title":{},"body":{"index.html":{}}}],["few",{"_index":1124,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["find",{"_index":826,"title":{},"body":{"injectables/QueueService.html":{},"injectables/RolesService.html":{}}}],["findall",{"_index":480,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["findbyname",{"_index":957,"title":{},"body":{"injectables/RolesService.html":{}}}],["findbyname(name",{"_index":965,"title":{},"body":{"injectables/RolesService.html":{}}}],["findbyqueuenumber",{"_index":481,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["findbyqueuenumber(@param('queuenumber",{"_index":570,"title":{},"body":{"controllers/QueueController.html":{}}}],["findbyqueuenumber(queuenumber",{"_index":504,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["findbystatus",{"_index":482,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["findbystatus(@param('status",{"_index":562,"title":{},"body":{"controllers/QueueController.html":{}}}],["findbystatus(status",{"_index":507,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["findcompleted",{"_index":483,"title":{},"body":{"controllers/QueueController.html":{}}}],["findone",{"_index":484,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["findone(@param('id",{"_index":568,"title":{},"body":{"controllers/QueueController.html":{},"controllers/RolesController.html":{}}}],["findone(id",{"_index":512,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["findpending",{"_index":485,"title":{},"body":{"controllers/QueueController.html":{}}}],["findserving",{"_index":486,"title":{},"body":{"controllers/QueueController.html":{}}}],["first_name",{"_index":590,"title":{},"body":{"entities/QueueDetails.html":{},"entities/User.html":{}}}],["firstname",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"entities/User.html":{}}}],["fk_current_queue",{"_index":350,"title":{},"body":{"entities/Counter.html":{}}}],["fk_queue_id",{"_index":606,"title":{},"body":{"entities/QueueDetails.html":{}}}],["fk_user_id",{"_index":612,"title":{},"body":{"entities/QueueDetails.html":{}}}],["focus",{"_index":1130,"title":{},"body":{"index.html":{}}}],["follow",{"_index":1161,"title":{},"body":{"index.html":{}}}],["foreign",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["foreign_key_checks=0",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["foreign_key_checks=1",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["foreignkeyconstraintname",{"_index":349,"title":{},"body":{"entities/Counter.html":{},"entities/QueueDetails.html":{}}}],["format",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{}}}],["forwardref",{"_index":663,"title":{},"body":{"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["found",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{}}}],["framework",{"_index":1075,"title":{},"body":{"index.html":{}}}],["frontend",{"_index":666,"title":{},"body":{"classes/QueueGateway.html":{}}}],["full",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["function",{"_index":1033,"title":{},"body":{"coverage.html":{}}}],["functionality",{"_index":539,"title":{},"body":{"controllers/QueueController.html":{}}}],["functions",{"_index":1067,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":1126,"title":{},"body":{"index.html":{}}}],["generate",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{}}}],["get(':id",{"_index":513,"title":{},"body":{"controllers/QueueController.html":{},"controllers/RolesController.html":{}}}],["get(':id')@roles('admin",{"_index":927,"title":{},"body":{"controllers/RolesController.html":{}}}],["get(':id/details",{"_index":522,"title":{},"body":{"controllers/QueueController.html":{}}}],["get(':id/position",{"_index":525,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('completed",{"_index":510,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('counters",{"_index":519,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('health",{"_index":17,"title":{},"body":{"controllers/AppController.html":{}}}],["get('number/:queuenumber",{"_index":505,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('pending",{"_index":515,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('profile",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["get('serving",{"_index":517,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('stats",{"_index":527,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('status/:status",{"_index":508,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('user/:userid",{"_index":939,"title":{},"body":{"controllers/RolesController.html":{}}}],["get('user/:userid')@roles('admin",{"_index":930,"title":{},"body":{"controllers/RolesController.html":{}}}],["get()@roles('admin",{"_index":924,"title":{},"body":{"controllers/RolesController.html":{}}}],["getcounters",{"_index":487,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getprofile",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["getprofile(@request",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["getprofile(req",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(userid",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{}}}],["getqueuedetails",{"_index":488,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["getqueuedetails(@param('id",{"_index":572,"title":{},"body":{"controllers/QueueController.html":{}}}],["getqueuedetails(id",{"_index":521,"title":{},"body":{"controllers/QueueController.html":{}}}],["getqueuedetails(queueid",{"_index":715,"title":{},"body":{"injectables/QueueService.html":{}}}],["getqueueposition",{"_index":489,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["getqueueposition(@param('id",{"_index":574,"title":{},"body":{"controllers/QueueController.html":{}}}],["getqueueposition(id",{"_index":524,"title":{},"body":{"controllers/QueueController.html":{}}}],["getqueueposition(queueid",{"_index":717,"title":{},"body":{"injectables/QueueService.html":{}}}],["getstats",{"_index":490,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["getting",{"_index":1071,"title":{"index.html":{}},"body":{}}],["getuserroles",{"_index":923,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["getuserroles(@param('userid",{"_index":940,"title":{},"body":{"controllers/RolesController.html":{}}}],["getuserroles(userid",{"_index":929,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["global",{"_index":686,"title":{},"body":{"classes/QueueGateway.html":{}}}],["graph",{"_index":1153,"title":{},"body":{"index.html":{},"modules.html":{}}}],["grow",{"_index":1171,"title":{},"body":{"index.html":{}}}],["guard",{"_index":942,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":943,"title":{},"body":{"guards/RolesGuard.html":{}}}],["guards/jwt",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["guest",{"_index":759,"title":{},"body":{"injectables/QueueService.html":{}}}],["handle",{"_index":758,"title":{},"body":{"injectables/QueueService.html":{}}}],["handleconnection",{"_index":626,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handleconnection(client",{"_index":639,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handledisconnect",{"_index":627,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handledisconnect(client",{"_index":644,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlegetqueueposition",{"_index":628,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlegetqueueposition(client",{"_index":646,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoincounter",{"_index":629,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoincounter(client",{"_index":649,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoinqueue",{"_index":630,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoinqueue(client",{"_index":652,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handling",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["hands",{"_index":1147,"title":{},"body":{"index.html":{}}}],["handy",{"_index":1136,"title":{},"body":{"index.html":{}}}],["hash",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{}}}],["healthcheck",{"_index":10,"title":{},"body":{"controllers/AppController.html":{}}}],["hello",{"_index":137,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":1151,"title":{},"body":{"index.html":{}}}],["here",{"_index":1179,"title":{},"body":{"index.html":{}}}],["hit",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["host",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["https://nestjs.com",{"_index":1185,"title":{},"body":{"index.html":{}}}],["id",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{},"entities/Counter.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"entities/User.html":{}}}],["identifier",{"_index":1018,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":417,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["implement",{"_index":538,"title":{},"body":{"controllers/QueueController.html":{}}}],["implements",{"_index":621,"title":{},"body":{"classes/QueueGateway.html":{},"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["import",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{}}}],["imports",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}}}],["inactive",{"_index":367,"title":{},"body":{"entities/Counter.html":{},"miscellaneous/enumerations.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{}}}],["information",{"_index":1112,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":1133,"title":{},"body":{"index.html":{}}}],["inject",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["inject(forwardref",{"_index":668,"title":{},"body":{"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["injectable",{"_index":133,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"coverage.html":{}}}],["injectables",{"_index":134,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{},"overview.html":{}}}],["injectrepository",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{}}}],["injectrepository(counter",{"_index":725,"title":{},"body":{"injectables/QueueService.html":{}}}],["injectrepository(queue",{"_index":723,"title":{},"body":{"injectables/QueueService.html":{}}}],["injectrepository(queuedetails",{"_index":724,"title":{},"body":{"injectables/QueueService.html":{}}}],["injectrepository(role",{"_index":969,"title":{},"body":{"injectables/RolesService.html":{}}}],["injectrepository(user",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RolesService.html":{}}}],["install",{"_index":1125,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":1087,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["interact",{"_index":1154,"title":{},"body":{"index.html":{}}}],["interface",{"_index":175,"title":{"interfaces/JwtPayload.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["interfaces",{"_index":402,"title":{},"body":{"interfaces/JwtPayload.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"overview.html":{}}}],["invalid",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["inversejoincolumn",{"_index":1003,"title":{},"body":{"entities/User.html":{}}}],["is_guest",{"_index":593,"title":{},"body":{"entities/QueueDetails.html":{}}}],["isboolean",{"_index":395,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["isboolean()@isoptional",{"_index":385,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["isemail",{"_index":888,"title":{},"body":{"classes/RegisterDto.html":{}}}],["isemail()@isnotempty",{"_index":878,"title":{},"body":{"classes/RegisterDto.html":{}}}],["isenum",{"_index":981,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["isenum(queuestatus",{"_index":982,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["isenum(queuestatus)@isoptional",{"_index":979,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["isglobal",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["isguest",{"_index":376,"title":{},"body":{"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{}}}],["isnan(number(payload.sub",{"_index":422,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["isnan(numuserid",{"_index":767,"title":{},"body":{"injectables/QueueService.html":{}}}],["isnotempty",{"_index":394,"title":{},"body":{"classes/CreateQueueDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["isoptional",{"_index":391,"title":{},"body":{"classes/CreateQueueDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateQueueDto.html":{}}}],["ispasswordvalid",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{}}}],["isstring",{"_index":393,"title":{},"body":{"classes/CreateQueueDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateQueueDto.html":{}}}],["isstring()@isnotempty",{"_index":382,"title":{},"body":{"classes/CreateQueueDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["isstring()@isnotempty()@minlength(8",{"_index":885,"title":{},"body":{"classes/RegisterDto.html":{}}}],["isstring()@isoptional",{"_index":380,"title":{},"body":{"classes/CreateQueueDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateQueueDto.html":{}}}],["isvalidemail",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["isvalidemail(email",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["it's",{"_index":810,"title":{},"body":{"injectables/QueueService.html":{}}}],["job",{"_index":1164,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":1166,"title":{},"body":{"index.html":{}}}],["join",{"_index":1177,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":364,"title":{},"body":{"entities/Counter.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["jointable",{"_index":1006,"title":{},"body":{"entities/User.html":{}}}],["jwt",{"_index":233,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":230,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":172,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/QueueController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":415,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":224,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":234,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":401,"title":{"interfaces/JwtPayload.html":{}},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["jwtservice",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":222,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":1182,"title":{},"body":{"index.html":{}}}],["keep",{"_index":1009,"title":{},"body":{"entities/User.html":{}}}],["key",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["last_name",{"_index":595,"title":{},"body":{"entities/QueueDetails.html":{},"entities/User.html":{}}}],["lastname",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"entities/User.html":{}}}],["lastname}${nameextension",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{}}}],["learn",{"_index":1139,"title":{},"body":{"index.html":{}}}],["legend",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"overview.html":{}}}],["lessthanorequal",{"_index":722,"title":{},"body":{"injectables/QueueService.html":{}}}],["lessthanorequal(new",{"_index":860,"title":{},"body":{"injectables/QueueService.html":{}}}],["lessthanorequal(queue.createdat",{"_index":814,"title":{},"body":{"injectables/QueueService.html":{}}}],["lessthanorequal(queueid",{"_index":815,"title":{},"body":{"injectables/QueueService.html":{}}}],["lessthanorequal(today",{"_index":742,"title":{},"body":{"injectables/QueueService.html":{}}}],["license",{"_index":1188,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1169,"title":{},"body":{"index.html":{}}}],["line",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{}}}],["linkedin",{"_index":1163,"title":{},"body":{"index.html":{}}}],["literal",{"_index":493,"title":{},"body":{"controllers/QueueController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{}}}],["localhost",{"_index":1205,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logger",{"_index":624,"title":{},"body":{"classes/QueueGateway.html":{}}}],["logger(queuegateway.name",{"_index":636,"title":{},"body":{"classes/QueueGateway.html":{}}}],["logging",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["login",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{}}}],["login(@body",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["login(logindto",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logindto",{"_index":155,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["logindto.emailorusername",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto.password",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["looking",{"_index":1113,"title":{},"body":{"index.html":{}}}],["loop",{"_index":1160,"title":{},"body":{"index.html":{}}}],["loss",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["makes",{"_index":1120,"title":{},"body":{"index.html":{}}}],["managing",{"_index":1132,"title":{},"body":{"index.html":{}}}],["many",{"_index":811,"title":{},"body":{"injectables/QueueService.html":{}}}],["manytomany",{"_index":919,"title":{},"body":{"entities/Role.html":{},"entities/User.html":{}}}],["manytomany(undefined",{"_index":916,"title":{},"body":{"entities/Role.html":{}}}],["manytomany(undefined)@jointable({name",{"_index":1001,"title":{},"body":{"entities/User.html":{}}}],["manytoone",{"_index":615,"title":{},"body":{"entities/QueueDetails.html":{},"entities/User.html":{}}}],["manytoone(undefined",{"_index":601,"title":{},"body":{"entities/QueueDetails.html":{},"entities/User.html":{}}}],["mark",{"_index":821,"title":{},"body":{"injectables/QueueService.html":{}}}],["matching",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.floor",{"_index":869,"title":{},"body":{"injectables/QueueService.html":{}}}],["mau",{"_index":1116,"title":{},"body":{"index.html":{}}}],["message",{"_index":830,"title":{},"body":{"injectables/QueueService.html":{}}}],["metadata",{"_index":1057,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{}}}],["middle_initial",{"_index":597,"title":{},"body":{"entities/QueueDetails.html":{}}}],["middle_name",{"_index":995,"title":{},"body":{"entities/User.html":{}}}],["middleinitial",{"_index":377,"title":{},"body":{"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{}}}],["middlename",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{},"classes/RegisterDto.html":{},"entities/User.html":{}}}],["migrationsrun",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["minlength",{"_index":889,"title":{},"body":{"classes/RegisterDto.html":{}}}],["minlength(8",{"_index":890,"title":{},"body":{"classes/RegisterDto.html":{}}}],["minutes",{"_index":753,"title":{},"body":{"injectables/QueueService.html":{}}}],["miscellaneous",{"_index":1063,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1168,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1091,"title":{},"body":{"index.html":{}}}],["module",{"_index":33,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":35,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/queue/queue.module",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":831,"title":{},"body":{"injectables/QueueService.html":{},"index.html":{}}}],["mysql",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["mysql2",{"_index":1052,"title":{},"body":{"dependencies.html":{}}}],["myśliwiec",{"_index":1183,"title":{},"body":{"index.html":{}}}],["name",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"injectables/JwtStrategy.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"miscellaneous/functions.html":{}}}],["name_extension",{"_index":998,"title":{},"body":{"entities/User.html":{}}}],["nameextension",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{},"classes/RegisterDto.html":{},"entities/User.html":{}}}],["need",{"_index":693,"title":{},"body":{"modules/QueueModule.html":{},"injectables/QueueService.html":{},"index.html":{}}}],["nest",{"_index":1081,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1187,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":1103,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":895,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":225,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":227,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1046,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":661,"title":{},"body":{"classes/QueueGateway.html":{},"dependencies.html":{}}}],["new",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{},"coverage.html":{}}}],["next",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["nextcalled",{"_index":848,"title":{},"body":{"injectables/QueueService.html":{}}}],["nextqueue",{"_index":827,"title":{},"body":{"injectables/QueueService.html":{}}}],["nextqueue.counternumber",{"_index":835,"title":{},"body":{"injectables/QueueService.html":{}}}],["nextqueue.id",{"_index":838,"title":{},"body":{"injectables/QueueService.html":{}}}],["nextqueue.status",{"_index":833,"title":{},"body":{"injectables/QueueService.html":{}}}],["node.js",{"_index":1074,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":721,"title":{},"body":{"injectables/QueueService.html":{},"injectables/RolesService.html":{}}}],["notfoundexception(`counter",{"_index":820,"title":{},"body":{"injectables/QueueService.html":{}}}],["notfoundexception(`details",{"_index":797,"title":{},"body":{"injectables/QueueService.html":{}}}],["notfoundexception(`queue",{"_index":794,"title":{},"body":{"injectables/QueueService.html":{}}}],["notfoundexception(`role",{"_index":972,"title":{},"body":{"injectables/RolesService.html":{}}}],["notify",{"_index":787,"title":{},"body":{"injectables/QueueService.html":{}}}],["notifycounterupdate",{"_index":631,"title":{},"body":{"classes/QueueGateway.html":{}}}],["notifycounterupdate(counterid",{"_index":655,"title":{},"body":{"classes/QueueGateway.html":{}}}],["notifyqueueupdate",{"_index":632,"title":{},"body":{"classes/QueueGateway.html":{}}}],["notifyqueueupdate(queueid",{"_index":657,"title":{},"body":{"classes/QueueGateway.html":{}}}],["npm",{"_index":1086,"title":{},"body":{"index.html":{}}}],["null",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{}}}],["nullable",{"_index":346,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["number",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"injectables/RolesService.html":{},"entities/User.html":{}}}],["number(createqueuedto.userid",{"_index":764,"title":{},"body":{"injectables/QueueService.html":{}}}],["number(payload.sub",{"_index":423,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["numuserid",{"_index":763,"title":{},"body":{"injectables/QueueService.html":{}}}],["offer",{"_index":1165,"title":{},"body":{"index.html":{}}}],["official",{"_index":1117,"title":{},"body":{"index.html":{}}}],["ok",{"_index":30,"title":{},"body":{"controllers/AppController.html":{}}}],["ondelete",{"_index":603,"title":{},"body":{"entities/QueueDetails.html":{}}}],["one",{"_index":813,"title":{},"body":{"injectables/QueueService.html":{}}}],["onetomany",{"_index":465,"title":{},"body":{"entities/Queue.html":{}}}],["onetomany(undefined",{"_index":454,"title":{},"body":{"entities/Queue.html":{}}}],["onetoone",{"_index":363,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{}}}],["onetoone(undefined",{"_index":344,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{}}}],["ongatewayconnection",{"_index":622,"title":{},"body":{"classes/QueueGateway.html":{}}}],["ongatewaydisconnect",{"_index":623,"title":{},"body":{"classes/QueueGateway.html":{}}}],["open",{"_index":1170,"title":{},"body":{"index.html":{}}}],["optional",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateQueueDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser-1.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"miscellaneous/functions.html":{}}}],["order",{"_index":791,"title":{},"body":{"injectables/QueueService.html":{}}}],["origin",{"_index":665,"title":{},"body":{"classes/QueueGateway.html":{}}}],["out",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"index.html":{},"overview.html":{}}}],["override",{"_index":552,"title":{},"body":{"controllers/QueueController.html":{}}}],["overview",{"_index":1193,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1041,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":534,"title":{},"body":{"controllers/QueueController.html":{},"controllers/RolesController.html":{}}}],["parameters",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"miscellaneous/functions.html":{}}}],["parseduserid",{"_index":761,"title":{},"body":{"injectables/QueueService.html":{}}}],["parseint(process.env.db_port",{"_index":1206,"title":{},"body":{"miscellaneous/variables.html":{}}}],["part",{"_index":1157,"title":{},"body":{"index.html":{}}}],["passport",{"_index":407,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":226,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":231,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":404,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":408,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["password",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["password.length",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{}}}],["patch",{"_index":533,"title":{},"body":{"controllers/QueueController.html":{}}}],["patch(':id",{"_index":531,"title":{},"body":{"controllers/QueueController.html":{}}}],["payload",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["payload.roles",{"_index":426,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":421,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["pending",{"_index":469,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{},"miscellaneous/enumerations.html":{}}}],["pendingcount",{"_index":849,"title":{},"body":{"injectables/QueueService.html":{}}}],["per",{"_index":754,"title":{},"body":{"injectables/QueueService.html":{}}}],["person",{"_index":755,"title":{},"body":{"injectables/QueueService.html":{}}}],["philippines",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["phone_number",{"_index":599,"title":{},"body":{"entities/QueueDetails.html":{}}}],["phonenumber",{"_index":378,"title":{},"body":{"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{}}}],["platform",{"_index":1115,"title":{},"body":{"index.html":{}}}],["please",{"_index":1142,"title":{},"body":{"index.html":{}}}],["port",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["position",{"_index":676,"title":{},"body":{"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["possible",{"_index":1110,"title":{},"body":{"index.html":{}}}],["post",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QueueController.html":{},"interfaces/RequestWithUser.html":{}}}],["post('counter",{"_index":494,"title":{},"body":{"controllers/QueueController.html":{}}}],["post('counter/:counterid/call",{"_index":497,"title":{},"body":{"controllers/QueueController.html":{}}}],["post('login",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["post('register",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["post()@useguards(jwtauthguard",{"_index":501,"title":{},"body":{"controllers/QueueController.html":{}}}],["prefix",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QueueController.html":{},"controllers/RolesController.html":{}}}],["prevent",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["prevents",{"_index":554,"title":{},"body":{"controllers/QueueController.html":{}}}],["primarygeneratedcolumn",{"_index":354,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["private",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{}}}],["process.env.db_host",{"_index":1204,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_name",{"_index":1211,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_password",{"_index":1210,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_username",{"_index":1208,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["production",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"classes/QueueGateway.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["progressive",{"_index":1073,"title":{},"body":{"index.html":{}}}],["project",{"_index":1083,"title":{},"body":{"index.html":{}}}],["promise",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/RolesService.html":{}}}],["promise.all",{"_index":854,"title":{},"body":{"injectables/QueueService.html":{}}}],["properties",{"_index":340,"title":{"properties.html":{}},"body":{"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"properties.html":{}}}],["provided",{"_index":770,"title":{},"body":{"injectables/QueueService.html":{}}}],["providers",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"overview.html":{}}}],["query",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["query('set",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["questions",{"_index":1140,"title":{},"body":{"index.html":{}}}],["queue",{"_index":343,"title":{"entities/Queue.html":{}},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"coverage.html":{}}}],["queue.completedat",{"_index":804,"title":{},"body":{"injectables/QueueService.html":{}}}],["queue.completedat.gettime",{"_index":867,"title":{},"body":{"injectables/QueueService.html":{}}}],["queue.controller",{"_index":695,"title":{},"body":{"modules/QueueModule.html":{}}}],["queue.counter",{"_index":345,"title":{},"body":{"entities/Counter.html":{}}}],["queue.counternumber",{"_index":806,"title":{},"body":{"injectables/QueueService.html":{}}}],["queue.createdat.gettime",{"_index":868,"title":{},"body":{"injectables/QueueService.html":{}}}],["queue.details",{"_index":602,"title":{},"body":{"entities/QueueDetails.html":{}}}],["queue.dto",{"_index":543,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["queue.dto.ts",{"_index":373,"title":{},"body":{"classes/CreateQueueDto.html":{},"classes/UpdateQueueDto.html":{},"coverage.html":{}}}],["queue.dto.ts:11",{"_index":978,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["queue.dto.ts:13",{"_index":387,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:17",{"_index":388,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:21",{"_index":381,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:25",{"_index":389,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:29",{"_index":390,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:33",{"_index":383,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:37",{"_index":386,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:5",{"_index":392,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:7",{"_index":980,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["queue.dto.ts:9",{"_index":384,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.entity",{"_index":616,"title":{},"body":{"entities/QueueDetails.html":{}}}],["queue.gateway",{"_index":696,"title":{},"body":{"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["queue.service",{"_index":541,"title":{},"body":{"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{}}}],["queue.status",{"_index":801,"title":{},"body":{"injectables/QueueService.html":{}}}],["queue/entities/queue.entity",{"_index":365,"title":{},"body":{"entities/Counter.html":{}}}],["queue_id",{"_index":605,"title":{},"body":{"entities/QueueDetails.html":{}}}],["queue_number",{"_index":460,"title":{},"body":{"entities/Queue.html":{}}}],["queuecontroller",{"_index":475,"title":{"controllers/QueueController.html":{}},"body":{"controllers/QueueController.html":{},"modules/QueueModule.html":{},"coverage.html":{}}}],["queuedata",{"_index":674,"title":{},"body":{"classes/QueueGateway.html":{}}}],["queuedetails",{"_index":453,"title":{"entities/QueueDetails.html":{}},"body":{"entities/Queue.html":{},"entities/QueueDetails.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"coverage.html":{}}}],["queuedetails.queue",{"_index":784,"title":{},"body":{"injectables/QueueService.html":{}}}],["queuedetailsrepository",{"_index":701,"title":{},"body":{"injectables/QueueService.html":{}}}],["queuegateway",{"_index":619,"title":{"classes/QueueGateway.html":{}},"body":{"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"coverage.html":{},"overview.html":{}}}],["queueid",{"_index":585,"title":{},"body":{"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["queuemodule",{"_index":46,"title":{"modules/QueueModule.html":{}},"body":{"modules/AppModule.html":{},"modules/QueueModule.html":{},"modules.html":{},"overview.html":{}}}],["queuenumber",{"_index":442,"title":{},"body":{"entities/Queue.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["queuerepository",{"_index":704,"title":{},"body":{"injectables/QueueService.html":{}}}],["queues",{"_index":557,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["queueservice",{"_index":540,"title":{"injectables/QueueService.html":{}},"body":{"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"coverage.html":{},"overview.html":{}}}],["queuestatus",{"_index":463,"title":{},"body":{"entities/Queue.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"classes/UpdateQueueDto.html":{},"miscellaneous/enumerations.html":{}}}],["queuestatus.cancelled",{"_index":855,"title":{},"body":{"injectables/QueueService.html":{}}}],["queuestatus.completed",{"_index":803,"title":{},"body":{"injectables/QueueService.html":{}}}],["queuestatus.pending",{"_index":474,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{}}}],["queuestatus.serving",{"_index":834,"title":{},"body":{"injectables/QueueService.html":{}}}],["read",{"_index":1178,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"controllers/RolesController.html":{}}}],["ready",{"_index":1101,"title":{},"body":{"index.html":{}}}],["real",{"_index":1155,"title":{},"body":{"index.html":{}}}],["reason_of_visit",{"_index":609,"title":{},"body":{"entities/QueueDetails.html":{}}}],["reasonofvisit",{"_index":379,"title":{},"body":{"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{}}}],["received",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["referencedcolumnname",{"_index":1012,"title":{},"body":{"entities/User.html":{}}}],["reflect",{"_index":1056,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":894,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["register",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["register(@body",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["register(registerdto",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["registerdto",{"_index":160,"title":{"classes/RegisterDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["registration",{"_index":876,"title":{},"body":{"classes/RegisterDto.html":{}}}],["relation",{"_index":780,"title":{},"body":{"injectables/QueueService.html":{}}}],["relations",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{}}}],["remove",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{}}}],["repository",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{},"index.html":{}}}],["req",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QueueController.html":{},"interfaces/RequestWithUser.html":{}}}],["req.user",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["req.user.sub",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["req.user?.id",{"_index":551,"title":{},"body":{"controllers/QueueController.html":{}}}],["request",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QueueController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["request.user?.roles",{"_index":907,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["requestwithuser",{"_index":147,"title":{"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["requiredroles",{"_index":901,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["requiredroles.some((role",{"_index":908,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["requiring",{"_index":1123,"title":{},"body":{"index.html":{}}}],["reset",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"overview.html":{}}}],["resources",{"_index":1134,"title":{},"body":{"index.html":{}}}],["response",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{}}}],["result",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{}}}],["results",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{}}}],["returns",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{}}}],["role",{"_index":910,"title":{"entities/Role.html":{}},"body":{"entities/Role.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"coverage.html":{}}}],["role.name",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{}}}],["role_id",{"_index":1013,"title":{},"body":{"entities/User.html":{}}}],["roleids",{"_index":962,"title":{},"body":{"injectables/RolesService.html":{}}}],["rolenames",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{}}}],["roles",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles('admin",{"_index":936,"title":{},"body":{"controllers/RolesController.html":{}}}],["roles.controller",{"_index":953,"title":{},"body":{"modules/RolesModule.html":{}}}],["roles.map((role",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{}}}],["roles.service",{"_index":932,"title":{},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{}}}],["roles/entities/role.entity",{"_index":1007,"title":{},"body":{"entities/User.html":{}}}],["roles/roles.module",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["roles/roles.service",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{}}}],["roles_key",{"_index":896,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolescontroller",{"_index":921,"title":{"controllers/RolesController.html":{}},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{},"coverage.html":{}}}],["rolesguard",{"_index":899,"title":{"guards/RolesGuard.html":{}},"body":{"interfaces/RequestWithUser-1.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["rolesmodule",{"_index":47,"title":{"modules/RolesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RolesModule.html":{},"modules.html":{},"overview.html":{}}}],["rolesrepository",{"_index":960,"title":{},"body":{"injectables/RolesService.html":{}}}],["rolesservice",{"_index":250,"title":{"injectables/RolesService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"coverage.html":{},"overview.html":{}}}],["room",{"_index":842,"title":{},"body":{"injectables/QueueService.html":{}}}],["rooms",{"_index":683,"title":{},"body":{"classes/QueueGateway.html":{}}}],["root",{"_index":1209,"title":{},"body":{"miscellaneous/variables.html":{}}}],["run",{"_index":1088,"title":{},"body":{"index.html":{}}}],["runs",{"_index":1108,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1059,"title":{},"body":{"dependencies.html":{}}}],["save",{"_index":747,"title":{},"body":{"injectables/QueueService.html":{}}}],["savedqueue",{"_index":756,"title":{},"body":{"injectables/QueueService.html":{}}}],["savedqueue.id",{"_index":772,"title":{},"body":{"injectables/QueueService.html":{}}}],["scalable",{"_index":1078,"title":{},"body":{"index.html":{}}}],["secret",{"_index":236,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretkey",{"_index":409,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["secretorkey",{"_index":418,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["seeddatabaseifneeded",{"_index":1034,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["seeddatabaseifneeded(datasource",{"_index":1069,"title":{},"body":{"miscellaneous/functions.html":{}}}],["select",{"_index":861,"title":{},"body":{"injectables/QueueService.html":{}}}],["send",{"_index":679,"title":{},"body":{"classes/QueueGateway.html":{}}}],["separately",{"_index":781,"title":{},"body":{"injectables/QueueService.html":{}}}],["sequence",{"_index":727,"title":{},"body":{"injectables/QueueService.html":{}}}],["server",{"_index":625,"title":{},"body":{"classes/QueueGateway.html":{},"index.html":{}}}],["serving",{"_index":470,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{},"miscellaneous/enumerations.html":{}}}],["servingcount",{"_index":850,"title":{},"body":{"injectables/QueueService.html":{}}}],["set",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["setmetadata(roles_key",{"_index":1213,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":1084,"title":{},"body":{"index.html":{}}}],["sheesh",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["side",{"_index":1079,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":238,"title":{},"body":{"modules/AuthModule.html":{}}}],["simple",{"_index":751,"title":{},"body":{"injectables/QueueService.html":{},"index.html":{}}}],["socket",{"_index":640,"title":{},"body":{"classes/QueueGateway.html":{}}}],["socket.io",{"_index":662,"title":{},"body":{"classes/QueueGateway.html":{},"dependencies.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["specific",{"_index":682,"title":{},"body":{"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["sponsors",{"_index":1173,"title":{},"body":{"index.html":{}}}],["sql",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["src/.../counter.entity.ts",{"_index":1065,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../database.config.ts",{"_index":1201,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1068,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../queue.entity.ts",{"_index":1066,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../roles.decorator.ts",{"_index":1202,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:14",{"_index":18,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:9",{"_index":14,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":135,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":136,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:24",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:37",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:44",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":223,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:103",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:17",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:204",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:209",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:25",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:40",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorators/roles.decorator.ts",{"_index":1024,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dto/login.dto.ts",{"_index":430,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto.ts:10",{"_index":434,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/login.dto.ts:14",{"_index":435,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/register.dto.ts",{"_index":875,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["src/auth/dto/register.dto.ts:17",{"_index":879,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:21",{"_index":887,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:26",{"_index":886,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:30",{"_index":880,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:34",{"_index":882,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:38",{"_index":881,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:42",{"_index":883,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:46",{"_index":884,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:49",{"_index":877,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/guards/jwt",{"_index":397,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard.ts",{"_index":891,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard.ts:11",{"_index":945,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/guards/roles.guard.ts:14",{"_index":946,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":403,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:13",{"_index":428,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:28",{"_index":429,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/config/database.config.ts",{"_index":1031,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":1032,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/counter/entities/counter.entity.ts",{"_index":339,"title":{},"body":{"entities/Counter.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/modules/counter/entities/counter.entity.ts:18",{"_index":355,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/counter/entities/counter.entity.ts:21",{"_index":357,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/counter/entities/counter.entity.ts:28",{"_index":362,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/counter/entities/counter.entity.ts:31",{"_index":353,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/counter/entities/counter.entity.ts:38",{"_index":351,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/queue/dto/create",{"_index":372,"title":{},"body":{"classes/CreateQueueDto.html":{},"coverage.html":{}}}],["src/modules/queue/dto/update",{"_index":977,"title":{},"body":{"classes/UpdateQueueDto.html":{},"coverage.html":{}}}],["src/modules/queue/entities/queue",{"_index":583,"title":{},"body":{"entities/QueueDetails.html":{},"coverage.html":{}}}],["src/modules/queue/entities/queue.entity.ts",{"_index":436,"title":{},"body":{"entities/Queue.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/modules/queue/entities/queue.entity.ts:22",{"_index":459,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:25",{"_index":462,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:32",{"_index":464,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:35",{"_index":449,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:38",{"_index":452,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:41",{"_index":445,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:44",{"_index":458,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:47",{"_index":456,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:52",{"_index":447,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/queue.controller.ts",{"_index":476,"title":{},"body":{"controllers/QueueController.html":{},"coverage.html":{}}}],["src/modules/queue/queue.controller.ts:102",{"_index":495,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:107",{"_index":520,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:24",{"_index":502,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:42",{"_index":503,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:47",{"_index":509,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:52",{"_index":516,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:57",{"_index":518,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:62",{"_index":511,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:67",{"_index":528,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:72",{"_index":514,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:77",{"_index":506,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:82",{"_index":523,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:87",{"_index":526,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:92",{"_index":532,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:97",{"_index":498,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.gateway.ts",{"_index":620,"title":{},"body":{"classes/QueueGateway.html":{},"coverage.html":{}}}],["src/modules/queue/queue.gateway.ts:18",{"_index":637,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:21",{"_index":634,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:28",{"_index":641,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:32",{"_index":645,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:37",{"_index":654,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:44",{"_index":648,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:50",{"_index":651,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:56",{"_index":658,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:61",{"_index":656,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.module.ts",{"_index":692,"title":{},"body":{"modules/QueueModule.html":{}}}],["src/modules/queue/queue.service.ts",{"_index":699,"title":{},"body":{"injectables/QueueService.html":{},"coverage.html":{}}}],["src/modules/queue/queue.service.ts:113",{"_index":710,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:119",{"_index":712,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:126",{"_index":713,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:138",{"_index":711,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:150",{"_index":716,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:167",{"_index":720,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:194",{"_index":718,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:20",{"_index":703,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:214",{"_index":707,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:284",{"_index":719,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:32",{"_index":709,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:331",{"_index":706,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:337",{"_index":714,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/roles/entities/role.entity.ts",{"_index":911,"title":{},"body":{"entities/Role.html":{},"coverage.html":{}}}],["src/roles/entities/role.entity.ts:10",{"_index":915,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/entities/role.entity.ts:13",{"_index":912,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/entities/role.entity.ts:16",{"_index":918,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/entities/role.entity.ts:7",{"_index":913,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/roles.controller.ts",{"_index":922,"title":{},"body":{"controllers/RolesController.html":{},"coverage.html":{}}}],["src/roles/roles.controller.ts:14",{"_index":926,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.controller.ts:20",{"_index":928,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.controller.ts:26",{"_index":931,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.module.ts",{"_index":951,"title":{},"body":{"modules/RolesModule.html":{}}}],["src/roles/roles.service.ts",{"_index":955,"title":{},"body":{"injectables/RolesService.html":{},"coverage.html":{}}}],["src/roles/roles.service.ts:17",{"_index":964,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:21",{"_index":967,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:29",{"_index":966,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:37",{"_index":968,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:45",{"_index":963,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:8",{"_index":959,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/users/entities/user.entity.ts",{"_index":983,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:16",{"_index":993,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:19",{"_index":991,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:22",{"_index":1005,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:25",{"_index":1000,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:28",{"_index":992,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:31",{"_index":996,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:34",{"_index":994,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:37",{"_index":997,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:40",{"_index":999,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:43",{"_index":986,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:46",{"_index":987,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:50",{"_index":989,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:53",{"_index":990,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:67",{"_index":1004,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.module.ts",{"_index":1014,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":1089,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1092,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":1093,"title":{},"body":{"index.html":{}}}],["started",{"_index":1072,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1082,"title":{},"body":{"index.html":{}}}],["statement",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["statements",{"_index":1019,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"entities/Counter.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"classes/UpdateQueueDto.html":{}}}],["stay",{"_index":1159,"title":{},"body":{"index.html":{}}}],["steps",{"_index":1105,"title":{},"body":{"index.html":{}}}],["straightforward",{"_index":1121,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":406,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["strength",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{}}}],["string",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["string(payload.email",{"_index":424,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["string(todaycount",{"_index":745,"title":{},"body":{"injectables/QueueService.html":{}}}],["sub",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{}}}],["subscribemessage",{"_index":660,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subscribemessage('getqueueposition",{"_index":647,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subscribemessage('joincounter",{"_index":650,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subscribemessage('joinqueue",{"_index":653,"title":{},"body":{"classes/QueueGateway.html":{}}}],["succeeds",{"_index":766,"title":{},"body":{"injectables/QueueService.html":{}}}],["success",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{},"classes/QueueGateway.html":{}}}],["successfully",{"_index":841,"title":{},"body":{"injectables/QueueService.html":{}}}],["super",{"_index":414,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["super_admin",{"_index":925,"title":{},"body":{"controllers/RolesController.html":{}}}],["support",{"_index":1141,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1190,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["table",{"_index":1040,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1039,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":1106,"title":{},"body":{"index.html":{}}}],["taken",{"_index":332,"title":{},"body":{"injectables/AuthService.html":{}}}],["test",{"_index":1096,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":1099,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1098,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1094,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":1172,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":29,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.getprofile(number(req.user.sub",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.authservice.login(logindto",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.authservice.register(registerdto",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.counterrepository.create",{"_index":872,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.counterrepository.find",{"_index":874,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.counterrepository.findone",{"_index":819,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.counterrepository.save(counter",{"_index":829,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.findone(id",{"_index":799,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.findone(queueid",{"_index":795,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.getqueueposition(queueid",{"_index":798,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.getqueueposition(savedqueue.id",{"_index":786,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.isvalidemail(email",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(payload",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.log(`client",{"_index":669,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.queuedetailsrepository.create",{"_index":771,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuedetailsrepository.findone",{"_index":796,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuedetailsrepository.save(queuedetails",{"_index":785,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuegateway.notifycounterupdate(counterid",{"_index":847,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuegateway.notifyqueueupdate(id",{"_index":808,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuegateway.notifyqueueupdate(nextqueue.id",{"_index":844,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuegateway.server.emit('queuelistupdate",{"_index":788,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.count",{"_index":741,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.create",{"_index":748,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.find",{"_index":790,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.findone",{"_index":793,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.save(counter.currentqueue",{"_index":825,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.save(nextqueue",{"_index":837,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.save(queue",{"_index":757,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queueservice.addcounter(data.name",{"_index":581,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.callnext(+counterid",{"_index":579,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.create(createqueuedto",{"_index":560,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findall",{"_index":561,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findbyqueuenumber(queuenumber",{"_index":571,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findbystatus(queuestatus.completed",{"_index":566,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findbystatus(queuestatus.pending",{"_index":564,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findbystatus(queuestatus.serving",{"_index":565,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findbystatus(status",{"_index":563,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findone(+id",{"_index":569,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.getcounters",{"_index":582,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.getqueuedetails(+id",{"_index":573,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.getqueuedetails(queueid",{"_index":675,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.queueservice.getqueueposition(+id",{"_index":575,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.getqueueposition(queueid",{"_index":677,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.queueservice.getstats",{"_index":567,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.update(+id",{"_index":577,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.reflector.getallandoverride",{"_index":902,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["this.rolesrepository.find",{"_index":970,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesrepository.findbyids(roleids",{"_index":974,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesrepository.findone",{"_index":971,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesservice.findall",{"_index":937,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.findone(+id",{"_index":938,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.getuserroles(+userid",{"_index":941,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.getuserroles(user.id",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.server.emit('counterlistupdate",{"_index":688,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.server.emit('queuelistupdate",{"_index":685,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.server.to(`counter_${counterid}`).emit('counterupdate",{"_index":687,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.server.to(`queue_${queueid}`).emit('queueupdate",{"_index":684,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.usersrepository.findone",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RolesService.html":{}}}],["this.usersrepository.save(user",{"_index":976,"title":{},"body":{"injectables/RolesService.html":{}}}],["throw",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{}}}],["ties",{"_index":817,"title":{},"body":{"injectables/QueueService.html":{}}}],["time",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"injectables/QueueService.html":{},"index.html":{}}}],["time_zone",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["today",{"_index":728,"title":{},"body":{"injectables/QueueService.html":{}}}],["today.getfullyear()}${string(today.getmonth",{"_index":730,"title":{},"body":{"injectables/QueueService.html":{}}}],["todaycount",{"_index":740,"title":{},"body":{"injectables/QueueService.html":{}}}],["todaystart",{"_index":737,"title":{},"body":{"injectables/QueueService.html":{}}}],["todaystart.sethours(0",{"_index":739,"title":{},"body":{"injectables/QueueService.html":{}}}],["token",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{}}}],["total",{"_index":866,"title":{},"body":{"injectables/QueueService.html":{}}}],["totalcount",{"_index":853,"title":{},"body":{"injectables/QueueService.html":{}}}],["totalwaittimems",{"_index":864,"title":{},"body":{"injectables/QueueService.html":{}}}],["touch",{"_index":1180,"title":{},"body":{"index.html":{}}}],["treat",{"_index":769,"title":{},"body":{"injectables/QueueService.html":{}}}],["true",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"entities/Counter.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"entities/User.html":{}}}],["true})@joincolumn({name",{"_index":347,"title":{},"body":{"entities/Counter.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["try",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{}}}],["turn",{"_index":843,"title":{},"body":{"injectables/QueueService.html":{}}}],["twitter",{"_index":1186,"title":{},"body":{"index.html":{}}}],["type",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["typeof",{"_index":762,"title":{},"body":{"injectables/QueueService.html":{}}}],["typeorm",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{},"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"entities/Role.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([queue",{"_index":698,"title":{},"body":{"modules/QueueModule.html":{}}}],["typeormmodule.forfeature([role",{"_index":954,"title":{},"body":{"modules/RolesModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":241,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":1203,"title":{},"body":{"miscellaneous/variables.html":{}}}],["typescript",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["unauthorizedexception",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{}}}],["unauthorizedexception('invalid",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{}}}],["uncomment",{"_index":536,"title":{},"body":{"controllers/QueueController.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["undefined",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{},"entities/Counter.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"entities/User.html":{}}}],["unique",{"_index":461,"title":{},"body":{"entities/Queue.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["unit",{"_index":1095,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["unlicensed",{"_index":1200,"title":{},"body":{"properties.html":{}}}],["unused",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{}}}],["update",{"_index":491,"title":{},"body":{"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["update(@param('id",{"_index":576,"title":{},"body":{"controllers/QueueController.html":{}}}],["update(id",{"_index":529,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["updated",{"_index":809,"title":{},"body":{"injectables/QueueService.html":{}}}],["updatedqueue",{"_index":807,"title":{},"body":{"injectables/QueueService.html":{}}}],["updatequeuedto",{"_index":530,"title":{"classes/UpdateQueueDto.html":{}},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{},"classes/UpdateQueueDto.html":{},"coverage.html":{}}}],["updatequeuedto.counternumber",{"_index":805,"title":{},"body":{"injectables/QueueService.html":{}}}],["updatequeuedto.status",{"_index":800,"title":{},"body":{"injectables/QueueService.html":{}}}],["updates",{"_index":680,"title":{},"body":{"classes/QueueGateway.html":{},"index.html":{}}}],["url",{"_index":667,"title":{},"body":{"classes/QueueGateway.html":{}}}],["use",{"_index":694,"title":{},"body":{"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["usefactory",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["useguards",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QueueController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{}}}],["useguards(jwtauthguard",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QueueController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{}}}],["useguards(jwtauthguard)@get('profile",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":177,"title":{"entities/User.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["user's",{"_index":553,"title":{},"body":{"controllers/QueueController.html":{}}}],["user.defaultrole?.name",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.email",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.id",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.roles",{"_index":917,"title":{},"body":{"entities/Role.html":{},"injectables/RolesService.html":{}}}],["user_id",{"_index":611,"title":{},"body":{"entities/QueueDetails.html":{},"entities/User.html":{}}}],["user_roles",{"_index":1002,"title":{},"body":{"entities/User.html":{}}}],["userid",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateQueueDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["username",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["userroles",{"_index":906,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["userroles.includes(role",{"_index":909,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["users",{"_index":555,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{},"entities/Role.html":{}}}],["users/entities/user.entity",{"_index":228,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{}}}],["users/users.module",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["usersmodule",{"_index":48,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RolesService.html":{}}}],["userwithoutpassword",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{}}}],["using",{"_index":818,"title":{},"body":{"injectables/QueueService.html":{},"index.html":{}}}],["utc",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["utc+8",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["valid",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{}}}],["validate",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":419,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(logindto",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{}}}],["validation",{"_index":420,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["validator",{"_index":396,"title":{},"body":{"classes/CreateQueueDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateQueueDto.html":{},"dependencies.html":{}}}],["value",{"_index":635,"title":{},"body":{"classes/QueueGateway.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":760,"title":{},"body":{"injectables/QueueService.html":{}}}],["variable",{"_index":1025,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":413,"title":{"miscellaneous/variables.html":{}},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["vars",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["version",{"_index":1198,"title":{},"body":{"properties.html":{}}}],["video",{"_index":1149,"title":{},"body":{"index.html":{}}}],["visit",{"_index":1138,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":1152,"title":{},"body":{"index.html":{}}}],["void",{"_index":643,"title":{},"body":{"classes/QueueGateway.html":{}}}],["wait",{"_index":858,"title":{},"body":{"injectables/QueueService.html":{}}}],["waiting",{"_index":832,"title":{},"body":{"injectables/QueueService.html":{}}}],["want",{"_index":537,"title":{},"body":{"controllers/QueueController.html":{}}}],["watch",{"_index":1090,"title":{},"body":{"index.html":{}}}],["website",{"_index":1184,"title":{},"body":{"index.html":{}}}],["websocketgateway",{"_index":659,"title":{},"body":{"classes/QueueGateway.html":{}}}],["websocketserver",{"_index":638,"title":{},"body":{"classes/QueueGateway.html":{}}}],["working",{"_index":1137,"title":{},"body":{"index.html":{}}}],["world",{"_index":138,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":1162,"title":{},"body":{"index.html":{}}}],["xxxx",{"_index":744,"title":{},"body":{"injectables/QueueService.html":{}}}],["yes",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{}}}],["you'd",{"_index":1176,"title":{},"body":{"index.html":{}}}],["you're",{"_index":1100,"title":{},"body":{"index.html":{}}}],["yyyymmdd",{"_index":743,"title":{},"body":{"injectables/QueueService.html":{}}}],["zone",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["zoom",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                            \n                                    \n                                healthCheck\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        healthCheck\n                        \n                    \n                \n            \n            \n                \n                        \n                    healthCheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('health')\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     { status: string; }\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n\n  @Get('health')\n  healthCheck() {\n    return { status: 'ok' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nQueueModule\n\nQueueModule\n\nAppModule -->\n\nQueueModule->AppModule\n\n\n\n\n\nRolesModule\n\nRolesModule\n\nAppModule -->\n\nRolesModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            QueueModule\n                        \n                        \n                            RolesModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n// import { databaseConfig } from './config/database.config';\nimport { UsersModule } from './users/users.module';\nimport { AuthModule } from './auth/auth.module';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { RolesModule } from './roles/roles.module';\nimport { QueueModule } from './modules/queue/queue.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'mysql',\n        host: configService.get('DB_HOST'),\n        port: configService.get('DB_PORT'),\n        username: configService.get('DB_USERNAME'),\n        password: configService.get('DB_PASSWORD'),\n        database: configService.get('DB_NAME'),\n        entities: [__dirname + '/**/*.entity{.ts,.js}'],\n        synchronize: configService.get('NODE_ENV') !== 'production', //set this sheesh to true in development only\n        logging: configService.get('NODE_ENV') !== 'production',\n        // Prevent data loss in development (below code is for development only)\n        // synchronize: true,\n        migrationsRun: false,\n        dropSchema: false,\n\n        // Only for development environments!\n        beforeConnect: async (connection): Promise => {\n          if (process.env.NODE_ENV !== 'production') {\n            const conn = connection as {\n              query: (sql: string) => Promise;\n            };\n            // Disable foreign key checks for development\n            await conn.query('SET FOREIGN_KEY_CHECKS=0;');\n            // Set time zone to UTC for consistent datetime handling\n            await conn.query(\"SET time_zone = '+08:00';\"); // Philippines time zone (UTC+8)\n          }\n        },\n        afterConnect: async (connection): Promise => {\n          if (process.env.NODE_ENV !== 'production') {\n            await (\n              connection as { query: (sql: string) => Promise }\n            ).query('SET FOREIGN_KEY_CHECKS=1;');\n          }\n        },\n      }),\n    }),\n    UsersModule,\n    AuthModule,\n    RolesModule,\n    QueueModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                getProfile\n                            \n                            \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(req: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('profile')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestWithUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(registerDto: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                registerDto\n                                            \n                                                            RegisterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  Get,\n  UseGuards,\n  Request,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\n\ninterface RequestWithUser extends Request {\n  user: { sub: number; email: string; roles: string[] };\n}\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @Post('login')\n  async login(@Body() loginDto: LoginDto) {\n    console.log('Login request received:', loginDto);\n    try {\n      const result = await this.authService.login(loginDto);\n      return result;\n    } catch (error) {\n      throw new UnauthorizedException(\n        error instanceof Error ? error.message : 'Invalid credentials',\n      );\n    }\n  }\n\n  @Post('register')\n  async register(@Body() registerDto: RegisterDto) {\n    console.log('Register endpoint hit with data:', registerDto); //Debugging Statement\n    return this.authService.register(registerDto);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  getProfile(@Request() req: RequestWithUser) {\n    // Add null check before converting to number\n    if (!req.user || req.user.sub === undefined || req.user.sub === null) {\n      throw new UnauthorizedException('Invalid user ID');\n    }\n    return this.authService.getProfile(Number(req.user.sub));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nRolesModule\n\nRolesModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nRolesModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RolesModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from '../users/entities/user.entity';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { JwtStrategy } from './jwt.strategy';\nimport { ConfigService } from '@nestjs/config';\nimport { RolesModule } from '../roles/roles.module';\n\n@Module({\n  imports: [\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.registerAsync({\n      inject: [ConfigService],\n      useFactory: (config: ConfigService) => {\n        return {\n          secret: config.get('JWT_SECRET'),\n          signOptions: { expiresIn: '1d' },\n        };\n      },\n    }),\n    TypeOrmModule.forFeature([User]),\n    RolesModule,\n  ],\n  providers: [AuthService, JwtStrategy],\n  controllers: [AuthController],\n  exports: [AuthService, JwtStrategy, PassportModule],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Private\n                                isValidEmail\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, jwtService: JwtService, rolesService: RolesService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        rolesService\n                                                  \n                                                        \n                                                                        RolesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:209\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isValidEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    isValidEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:204\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(registerDto: RegisterDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:103\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                registerDto\n                                            \n                                                            RegisterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(loginDto: LoginDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  UnauthorizedException,\n  ConflictException,\n  BadRequestException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from '../users/entities/user.entity';\nimport * as bcrypt from 'bcrypt';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { RolesService } from '../roles/roles.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n    private jwtService: JwtService,\n    private rolesService: RolesService,\n  ) {}\n\n  async validateUser(loginDto: LoginDto): Promise {\n    const user = await this.usersRepository.findOne({\n      where: [\n        { email: loginDto.emailOrUsername },\n        { username: loginDto.emailOrUsername },\n      ],\n    });\n    if (user && (await bcrypt.compare(loginDto.password, user.password))) {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { password: __password, ...result } = user;\n      return result;\n    }\n    return null;\n  }\n\n  async login(loginDto: LoginDto) {\n    console.log('Login attempt with:', loginDto);\n\n    try {\n      const user = await this.usersRepository.findOne({\n        where: [\n          { email: loginDto.emailOrUsername },\n          { username: loginDto.emailOrUsername },\n        ],\n        relations: ['defaultRole'],\n      });\n\n      console.log('User found:', user ? 'Yes' : 'No');\n\n      if (!user) {\n        throw new UnauthorizedException('Invalid email or password');\n      }\n\n      // Debug password check\n      console.log('Stored password hash:', user.password);\n      console.log('Comparing with:', loginDto.password);\n\n      const isPasswordValid = await bcrypt.compare(\n        loginDto.password,\n        user.password,\n      );\n      console.log('Password valid:', isPasswordValid);\n\n      if (!isPasswordValid) {\n        throw new UnauthorizedException('Invalid email or password');\n      }\n\n      // Get user roles\n      const roles = await this.rolesService.getUserRoles(user.id);\n      const roleNames = roles.map((role) => role.name);\n\n      const payload = {\n        sub: user.id,\n        email: user.email,\n        roles: roleNames,\n      };\n\n      const token = this.jwtService.sign(payload);\n      console.log('Generated token:', token ? 'Success' : 'Failed');\n\n      // Remove password from response\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { password: __password, ...userWithoutPassword } = user;\n\n      return {\n        access_token: token,\n        user: {\n          ...userWithoutPassword,\n          roles: roleNames,\n          defaultRole: user.defaultRole?.name || 'citizen',\n        },\n      };\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  }\n\n  async register(registerDto: RegisterDto) {\n    const {\n      email,\n      username,\n      password,\n      firstName,\n      middleName,\n      lastName,\n      nameExtension,\n      contactNumber,\n    } = registerDto;\n\n    // Generate full name\n    const name = `${firstName} ${middleName ? middleName + ' ' : ''}${lastName}${nameExtension ? ' ' + nameExtension : ''}`;\n\n    // Validate email format\n    if (!this.isValidEmail(email)) {\n      throw new BadRequestException('Invalid email format');\n    }\n\n    // Check if user exists by email\n    const existingUserByEmail = await this.usersRepository.findOne({\n      where: { email },\n    });\n    if (existingUserByEmail) {\n      throw new ConflictException('Email already exists');\n    }\n\n    // Check if username is taken\n    if (username) {\n      const existingUserByUsername = await this.usersRepository.findOne({\n        where: { username },\n      });\n      if (existingUserByUsername) {\n        throw new ConflictException('Username already exists');\n      }\n    }\n\n    // Validate password strength\n    if (password.length  role.name);\n\n    // Remove password from response\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { password: __password, ...result } = user;\n    return {\n      ...result,\n      roles: roleNames,\n      defaultRole: user.defaultRole?.name || 'citizen',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Counter.html":{"url":"entities/Counter.html","title":"entity - Counter","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Counter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/counter/entities/counter.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                currentQueue\n                            \n                            \n                                    \n                                currentQueueId\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        currentQueue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Queue | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, queue => queue.counter, {nullable: true})@JoinColumn({name: 'current_queue_id', foreignKeyConstraintName: 'fk_current_queue'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        currentQueueId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'current_queue_id', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CounterStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: CounterStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:28\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  OneToOne,\n  JoinColumn,\n} from 'typeorm';\nimport { Queue } from '../../queue/entities/queue.entity';\n\nexport enum CounterStatus {\n  ACTIVE = 'active',\n  INACTIVE = 'inactive',\n}\n\n@Entity('counters')\nexport class Counter {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  name: string;\n\n  @Column({\n    type: 'enum',\n    enum: CounterStatus,\n    default: CounterStatus.ACTIVE,\n  })\n  status: CounterStatus;\n\n  @Column({ name: 'current_queue_id', nullable: true })\n  currentQueueId: number | null;\n\n  @OneToOne(() => Queue, (queue) => queue.counter, { nullable: true })\n  @JoinColumn({\n    name: 'current_queue_id',\n    foreignKeyConstraintName: 'fk_current_queue',\n  })\n  currentQueue: Queue | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateQueueDto.html":{"url":"classes/CreateQueueDto.html","title":"class - CreateQueueDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateQueueDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/dto/create-queue.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                    \n                                    \n                                appointmentType\n                            \n                            \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                isGuest\n                            \n                            \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                middleInitial\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                phoneNumber\n                            \n                            \n                                    \n                                    \n                                reasonOfVisit\n                            \n                            \n                                    \n                                    Optional\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        appointmentType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        isGuest\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        middleInitial\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        reasonOfVisit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsOptional, IsNotEmpty, IsBoolean } from 'class-validator';\n\nexport class CreateQueueDto {\n  @IsOptional()\n  userId?: number | string; \n\n  @IsString()\n  @IsNotEmpty()\n  firstName: string;\n\n  @IsString()\n  @IsNotEmpty()\n  lastName: string;\n\n  @IsString()\n  @IsOptional()\n  middleInitial?: string;\n\n  @IsString()\n  @IsOptional()\n  address?: string;\n\n  @IsString()\n  @IsOptional()\n  phoneNumber?: string;\n\n  @IsString()\n  @IsNotEmpty()\n  reasonOfVisit: string;\n\n  @IsString()\n  @IsNotEmpty()\n  appointmentType: string;\n\n  @IsBoolean()\n  @IsOptional()\n  isGuest?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            roles\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        roles:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\n\ninterface JwtPayload {\n  sub: number;\n  email: string;\n  roles?: string[];\n}\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private configService: ConfigService) {\n    const secretKey = configService.get('JWT_SECRET');\n\n    if (!secretKey) {\n      throw new Error('JWT_SECRET is not defined in environment variables');\n    }\n\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: secretKey,\n    });\n  }\n\n  validate(payload: JwtPayload): JwtPayload {\n    // Validation for the payload\n    if (!payload || payload.sub === undefined || isNaN(Number(payload.sub))) {\n      throw new UnauthorizedException('Invalid token payload');\n    }\n\n    const userId = Number(payload.sub);\n    const email = String(payload.email || '');\n    const roles = Array.isArray(payload.roles) ? payload.roles : [];\n\n    return { sub: userId, email, roles };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(payload: JwtPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            JwtPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         JwtPayload\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\n\ninterface JwtPayload {\n  sub: number;\n  email: string;\n  roles?: string[];\n}\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private configService: ConfigService) {\n    const secretKey = configService.get('JWT_SECRET');\n\n    if (!secretKey) {\n      throw new Error('JWT_SECRET is not defined in environment variables');\n    }\n\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: secretKey,\n    });\n  }\n\n  validate(payload: JwtPayload): JwtPayload {\n    // Validation for the payload\n    if (!payload || payload.sub === undefined || isNaN(Number(payload.sub))) {\n      throw new UnauthorizedException('Invalid token payload');\n    }\n\n    const userId = Number(payload.sub);\n    const email = String(payload.email || '');\n    const roles = Array.isArray(payload.roles) ? payload.roles : [];\n\n    return { sub: userId, email, roles };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for user login\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                emailOrUsername\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        emailOrUsername\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\n/**\n * DTO for user login\n * @class LoginDto\n */\n\nexport class LoginDto {\n  @IsNotEmpty()\n  emailOrUsername: string;\n\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Queue.html":{"url":"entities/Queue.html","title":"entity - Queue","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Queue\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/entities/queue.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                completedAt\n                            \n                            \n                                    \n                                counter\n                            \n                            \n                                    \n                                counterNumber\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                details\n                            \n                            \n                                    \n                                estimatedWaitTime\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                queueNumber\n                            \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        completedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'completed_at', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        counter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Counter\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, counter => counter.currentQueue, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        counterNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'counter_number', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        details\n                        \n                    \n                \n            \n                \n                    \n                        Type :     QueueDetails[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, details => details.queue)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        estimatedWaitTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'estimated_wait_time', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        queueNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'queue_number', unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueueStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: QueueStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:32\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  OneToMany,\n  CreateDateColumn,\n  OneToOne,\n} from 'typeorm';\nimport { QueueDetails } from './queue-details.entity';\nimport { Counter } from '../../counter/entities/counter.entity';\n\nexport enum QueueStatus {\n  PENDING = 'pending',\n  SERVING = 'serving',\n  COMPLETED = 'completed',\n  CANCELLED = 'cancelled',\n}\n\n@Entity('queues')\nexport class Queue {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ name: 'queue_number', unique: true })\n  queueNumber: string;\n\n  @Column({\n    type: 'enum',\n    enum: QueueStatus,\n    default: QueueStatus.PENDING,\n  })\n  status: QueueStatus;\n\n  @Column({ name: 'counter_number', nullable: true })\n  counterNumber: string;\n\n  @CreateDateColumn({ name: 'created_at' })\n  createdAt: Date;\n\n  @Column({ name: 'completed_at', nullable: true })\n  completedAt: Date;\n\n  @Column({ name: 'estimated_wait_time', nullable: true })\n  estimatedWaitTime: number;\n\n  @OneToMany(() => QueueDetails, (details) => details.queue)\n  details: QueueDetails[];\n\n  @OneToOne(() => Counter, (counter) => counter.currentQueue, {\n    nullable: true,\n  })\n  counter: Counter;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/QueueController.html":{"url":"controllers/QueueController.html","title":"controller - QueueController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  QueueController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/queue.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                queue\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                addCounter\n                            \n                            \n                                    \n                                callNext\n                            \n                            \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findByQueueNumber\n                            \n                            \n                                    \n                                findByStatus\n                            \n                            \n                                    \n                                findCompleted\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                findPending\n                            \n                            \n                                    \n                                findServing\n                            \n                            \n                                    \n                                getCounters\n                            \n                            \n                                    \n                                getQueueDetails\n                            \n                            \n                                    \n                                getQueuePosition\n                            \n                            \n                                    \n                                getStats\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        addCounter\n                        \n                    \n                \n            \n            \n                \n                        \n                    addCounter(data: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('counter')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:102\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        callNext\n                        \n                    \n                \n            \n            \n                \n                        \n                    callNext(counterId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('counter/:counterId/call-next')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:97\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                counterId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(req, createQueueDto: CreateQueueDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(JwtAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createQueueDto\n                                            \n                                                            CreateQueueDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:42\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findByQueueNumber\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByQueueNumber(queueNumber: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('number/:queueNumber')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueNumber\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findByStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByStatus(status: QueueStatus)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('status/:status')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            QueueStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findCompleted\n                        \n                    \n                \n            \n            \n                \n                        \n                    findCompleted()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('completed')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:62\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findPending\n                        \n                    \n                \n            \n            \n                \n                        \n                    findPending()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('pending')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:52\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findServing\n                        \n                    \n                \n            \n            \n                \n                        \n                    findServing()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('serving')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:57\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getCounters\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCounters()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('counters')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:107\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getQueueDetails\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQueueDetails(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/details')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:82\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getQueuePosition\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQueuePosition(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/position')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:87\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('stats')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:67\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateQueueDto: UpdateQueueDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:92\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateQueueDto\n                                            \n                                                            UpdateQueueDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  //Delete, // Uncomment if you want to implement delete functionality\n  Request,\n  UseGuards,\n} from '@nestjs/common';\nimport { QueueService } from './queue.service';\nimport { CreateQueueDto } from './dto/create-queue.dto';\nimport { UpdateQueueDto } from './dto/update-queue.dto';\nimport { QueueStatus } from './entities/queue.entity';\nimport { JwtAuthGuard } from '../../auth/guards/jwt-auth.guard';\n\n@Controller('queue')\nexport class QueueController {\n  constructor(private readonly queueService: QueueService) {}\n\n  @Post()\n  @UseGuards(JwtAuthGuard)\n  create(@Request() req, @Body() createQueueDto: CreateQueueDto) {\n    // Extract user ID from JWT token if authenticated\n    const userId = req.user?.id || null;\n\n    // Override the userId in the DTO with the authenticated user's ID\n    // This prevents users from creating queues for other users\n    if (userId) {\n      createQueueDto.userId = userId;\n      createQueueDto.isGuest = false;\n    } else {\n      createQueueDto.userId = undefined;\n      createQueueDto.isGuest = true;\n    }\n\n    return this.queueService.create(createQueueDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.queueService.findAll();\n  }\n\n  @Get('status/:status')\n  findByStatus(@Param('status') status: QueueStatus) {\n    return this.queueService.findByStatus(status);\n  }\n\n  @Get('pending')\n  findPending() {\n    return this.queueService.findByStatus(QueueStatus.PENDING);\n  }\n\n  @Get('serving')\n  findServing() {\n    return this.queueService.findByStatus(QueueStatus.SERVING);\n  }\n\n  @Get('completed')\n  findCompleted() {\n    return this.queueService.findByStatus(QueueStatus.COMPLETED);\n  }\n\n  @Get('stats')\n  getStats() {\n    return this.queueService.getStats();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.queueService.findOne(+id);\n  }\n\n  @Get('number/:queueNumber')\n  findByQueueNumber(@Param('queueNumber') queueNumber: string) {\n    return this.queueService.findByQueueNumber(queueNumber);\n  }\n\n  @Get(':id/details')\n  getQueueDetails(@Param('id') id: string) {\n    return this.queueService.getQueueDetails(+id);\n  }\n\n  @Get(':id/position')\n  getQueuePosition(@Param('id') id: string) {\n    return this.queueService.getQueuePosition(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateQueueDto: UpdateQueueDto) {\n    return this.queueService.update(+id, updateQueueDto);\n  }\n\n  @Post('counter/:counterId/call-next')\n  callNext(@Param('counterId') counterId: string) {\n    return this.queueService.callNext(+counterId);\n  }\n\n  @Post('counter')\n  addCounter(@Body() data: { name: string }) {\n    return this.queueService.addCounter(data.name);\n  }\n\n  @Get('counters')\n  getCounters() {\n    return this.queueService.getCounters();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/QueueDetails.html":{"url":"entities/QueueDetails.html","title":"entity - QueueDetails","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  QueueDetails\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/entities/queue-details.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                address\n                            \n                            \n                                    \n                                appointmentType\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isGuest\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                middleInitial\n                            \n                            \n                                    \n                                phoneNumber\n                            \n                            \n                                    \n                                    \n                                queue\n                            \n                            \n                                    \n                                queueId\n                            \n                            \n                                    \n                                reasonOfVisit\n                            \n                            \n                                    \n                                    \n                                user\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        appointmentType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'appointment_type'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'first_name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isGuest\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'is_guest', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'last_name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        middleInitial\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'middle_initial', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'phone_number', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        queue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Queue\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, queue => queue.details, {onDelete: 'CASCADE'})@JoinColumn({name: 'queue_id', foreignKeyConstraintName: 'fk_queue_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        queueId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'queue_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reasonOfVisit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'reason_of_visit'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {onDelete: 'SET NULL', nullable: true})@JoinColumn({name: 'user_id', foreignKeyConstraintName: 'fk_user_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'user_id', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:24\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  JoinColumn,\n} from 'typeorm';\nimport { Queue } from './queue.entity';\nimport { User } from '../../../users/entities/user.entity';\n\n@Entity('queue_details')\nexport class QueueDetails {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ name: 'queue_id' })\n  queueId: number;\n\n  @ManyToOne(() => Queue, (queue) => queue.details, { onDelete: 'CASCADE' })\n  @JoinColumn({ name: 'queue_id', foreignKeyConstraintName: 'fk_queue_id' })\n  queue: Queue;\n\n  @Column({ name: 'user_id', nullable: true })\n  userId: number;\n\n  @ManyToOne(() => User, { onDelete: 'SET NULL', nullable: true })\n  @JoinColumn({ name: 'user_id', foreignKeyConstraintName: 'fk_user_id' })\n  user: User;\n\n  @Column({ name: 'first_name' })\n  firstName: string;\n\n  @Column({ name: 'last_name' })\n  lastName: string;\n\n  @Column({ name: 'middle_initial', nullable: true })\n  middleInitial: string;\n\n  @Column({ nullable: true })\n  address: string;\n\n  @Column({ name: 'phone_number', nullable: true })\n  phoneNumber: string;\n\n  @Column({ name: 'reason_of_visit' })\n  reasonOfVisit: string;\n\n  @Column({ name: 'appointment_type' })\n  appointmentType: string;\n\n  @Column({ name: 'is_guest', default: false })\n  isGuest: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QueueGateway.html":{"url":"classes/QueueGateway.html","title":"class - QueueGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QueueGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/queue.gateway.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        OnGatewayConnection\n                        OnGatewayDisconnect\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleConnection\n                            \n                            \n                                handleDisconnect\n                            \n                            \n                                    \n                                    Async\n                                handleGetQueuePosition\n                            \n                            \n                                    \n                                    Async\n                                handleJoinCounter\n                            \n                            \n                                    \n                                    Async\n                                handleJoinQueue\n                            \n                            \n                                notifyCounterUpdate\n                            \n                            \n                                notifyQueueUpdate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(queueService: QueueService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/queue/queue.gateway.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        queueService\n                                                  \n                                                        \n                                                                        QueueService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(QueueGateway.name)\n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/queue.gateway.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/queue.gateway.ts:21\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handleConnection\n                        \n                    \n                \n            \n            \n                \nhandleConnection(client: Socket)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleDisconnect\n                        \n                    \n                \n            \n            \n                \nhandleDisconnect(client: Socket)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleGetQueuePosition\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleGetQueuePosition(client: Socket, queueId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('getQueuePosition')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleJoinCounter\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleJoinCounter(client: Socket, counterId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('joinCounter')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                counterId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleJoinQueue\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleJoinQueue(client: Socket, queueId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('joinQueue')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notifyCounterUpdate\n                        \n                    \n                \n            \n            \n                \nnotifyCounterUpdate(counterId: number, data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                counterId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notifyQueueUpdate\n                        \n                    \n                \n            \n            \n                \nnotifyQueueUpdate(queueId: number, data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  WebSocketGateway,\n  WebSocketServer,\n  SubscribeMessage,\n  OnGatewayConnection,\n  OnGatewayDisconnect,\n} from '@nestjs/websockets';\nimport { Server, Socket } from 'socket.io';\nimport { QueueService } from './queue.service';\nimport { Logger, Inject, forwardRef } from '@nestjs/common';\n\n@WebSocketGateway({\n  cors: {\n    origin: '*', // In production, set to your frontend URL\n  },\n})\nexport class QueueGateway implements OnGatewayConnection, OnGatewayDisconnect {\n  private readonly logger = new Logger(QueueGateway.name);\n\n  @WebSocketServer()\n  server: Server;\n\n  constructor(\n    @Inject(forwardRef(() => QueueService))\n    private readonly queueService: QueueService,\n  ) {}\n\n  handleConnection(client: Socket) {\n    this.logger.log(`Client connected: ${client.id}`);\n  }\n\n  handleDisconnect(client: Socket) {\n    this.logger.log(`Client disconnected: ${client.id}`);\n  }\n\n  @SubscribeMessage('joinQueue')\n  async handleJoinQueue(client: Socket, queueId: number) {\n    await client.join(`queue_${queueId}`);\n    const queueData = await this.queueService.getQueueDetails(queueId);\n    return queueData;\n  }\n\n  @SubscribeMessage('getQueuePosition')\n  async handleGetQueuePosition(client: Socket, queueId: number) {\n    const position = await this.queueService.getQueuePosition(queueId);\n    return { position };\n  }\n\n  @SubscribeMessage('joinCounter')\n  async handleJoinCounter(client: Socket, counterId: number) {\n    await client.join(`counter_${counterId}`);\n    return { success: true };\n  }\n\n  // Send updates to all clients or specific rooms\n  notifyQueueUpdate(queueId: number, data: any) {\n    void this.server.to(`queue_${queueId}`).emit('queueUpdate', data);\n    void this.server.emit('queueListUpdate'); // Global queue update\n  }\n\n  notifyCounterUpdate(counterId: number, data: any) {\n    void this.server.to(`counter_${counterId}`).emit('counterUpdate', data);\n    void this.server.emit('counterListUpdate'); // Global counter update\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/QueueModule.html":{"url":"modules/QueueModule.html","title":"module - QueueModule","body":"\n                   \n\n\n\n\n    Modules\n    QueueModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_QueueModule\n\n\n\ncluster_QueueModule_providers\n\n\n\ncluster_QueueModule_exports\n\n\n\n\nQueueGateway \n\nQueueGateway \n\n\n\nQueueService \n\nQueueService \n\n\n\nQueueModule\n\nQueueModule\n\nQueueGateway  -->\n\nQueueModule->QueueGateway \n\n\n\nQueueService  -->\n\nQueueModule->QueueService \n\n\n\n\n\nQueueService\n\nQueueService\n\nQueueModule -->\n\nQueueService->QueueModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/queue/queue.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            QueueService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            QueueController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            QueueGateway\n                        \n                        \n                            QueueService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {\n  Module,\n  //forwardRef, // Uncomment if you need to use forwardRef\n} from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { QueueService } from './queue.service';\nimport { QueueController } from './queue.controller';\nimport { QueueGateway } from './queue.gateway';\nimport { Queue } from './entities/queue.entity';\nimport { QueueDetails } from './entities/queue-details.entity';\nimport { Counter } from '../counter/entities/counter.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Queue, QueueDetails, Counter])],\n  controllers: [QueueController],\n  providers: [QueueService, QueueGateway],\n  exports: [QueueService, QueueGateway],\n})\nexport class QueueModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QueueService.html":{"url":"injectables/QueueService.html","title":"injectable - QueueService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  QueueService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/queue.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addCounter\n                            \n                            \n                                    Async\n                                callNext\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByQueueNumber\n                            \n                            \n                                    Async\n                                findByStatus\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getCounters\n                            \n                            \n                                    Async\n                                getQueueDetails\n                            \n                            \n                                    Async\n                                getQueuePosition\n                            \n                            \n                                    Async\n                                getStats\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(queueRepository: Repository, queueDetailsRepository: Repository, counterRepository: Repository, queueGateway: QueueGateway)\n                    \n                \n                        \n                            \n                                Defined in src/modules/queue/queue.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        queueRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queueDetailsRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        counterRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queueGateway\n                                                  \n                                                        \n                                                                        QueueGateway\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addCounter\n                        \n                    \n                \n            \n            \n                \n                        \n                    addCounter(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:331\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        callNext\n                        \n                    \n                \n            \n            \n                \n                        \n                    callNext(counterId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:214\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                counterId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createQueueDto: CreateQueueDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createQueueDto\n                                            \n                                                            CreateQueueDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:113\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByQueueNumber\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByQueueNumber(queueNumber: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:138\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueNumber\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByStatus(status: QueueStatus)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:119\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            QueueStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:126\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCounters\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCounters()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:337\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getQueueDetails\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQueueDetails(queueId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:150\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getQueuePosition\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQueuePosition(queueId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:194\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:284\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateQueueDto: UpdateQueueDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:167\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateQueueDto\n                                            \n                                                            UpdateQueueDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  Inject,\n  forwardRef,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, LessThanOrEqual } from 'typeorm';\nimport { Queue, QueueStatus } from './entities/queue.entity';\nimport { QueueDetails } from './entities/queue-details.entity';\nimport {\n  Counter,\n  //CounterStatus, //Uncomment if you need to use CounterStatus\n} from '../counter/entities/counter.entity';\nimport { CreateQueueDto } from './dto/create-queue.dto';\nimport { UpdateQueueDto } from './dto/update-queue.dto';\nimport { QueueGateway } from './queue.gateway';\n\n@Injectable()\nexport class QueueService {\n  constructor(\n    @InjectRepository(Queue)\n    private queueRepository: Repository,\n    @InjectRepository(QueueDetails)\n    private queueDetailsRepository: Repository,\n    @InjectRepository(Counter)\n    private counterRepository: Repository,\n    @Inject(forwardRef(() => QueueGateway))\n    private queueGateway: QueueGateway,\n  ) {}\n\n  async create(createQueueDto: CreateQueueDto) {\n    // Generate a queue number based on date and sequence\n    const today = new Date();\n    const dateStr = `${today.getFullYear()}${String(today.getMonth() + 1).padStart(2, '0')}${String(today.getDate()).padStart(2, '0')}`;\n\n    // Get the count of queues created today to determine the sequence number\n    const todayStart = new Date(today);\n    todayStart.setHours(0, 0, 0, 0);\n\n    const todayCount = await this.queueRepository.count({\n      where: {\n        createdAt: LessThanOrEqual(today),\n      },\n    });\n\n    // Format the queue number: YYYYMMDD-XXXX where XXXX is the sequence number\n    const queueNumber = `${dateStr}-${String(todayCount + 1).padStart(4, '0')}`;\n\n    // Create and save the queue\n    const queue = this.queueRepository.create({\n      queueNumber,\n      status: QueueStatus.PENDING,\n      estimatedWaitTime: 15 * (todayCount + 1), // Simple estimation: 15 minutes per person\n    });\n\n    const savedQueue = await this.queueRepository.save(queue);\n\n    // Handle guest users - determine userId and isGuest values\n    let parsedUserId: number | undefined = undefined;\n    let isGuest = createQueueDto.isGuest || false;\n    \n    // Check if userId is the string \"guest\"\n    if (typeof createQueueDto.userId === 'string' && createQueueDto.userId === 'guest') {\n      isGuest = true;\n    } \n    // If userId exists and is not \"guest\", try to use it\n    else if (createQueueDto.userId !== undefined && createQueueDto.userId !== null) {\n      const numUserId = Number(createQueueDto.userId);\n      // If conversion succeeds, use the number\n      if (!isNaN(numUserId)) {\n        parsedUserId = numUserId;\n      } else {\n        // If conversion fails, treat as guest\n        isGuest = true;\n      }\n    }\n\n    // Create queue details\n    // If userId is not provided or is \"guest\", set it to null\n    const queueDetails = this.queueDetailsRepository.create({\n      queueId: savedQueue.id,\n      userId: parsedUserId,\n      firstName: createQueueDto.firstName,\n      lastName: createQueueDto.lastName,\n      middleInitial: createQueueDto.middleInitial,\n      address: createQueueDto.address,\n      phoneNumber: createQueueDto.phoneNumber,\n      reasonOfVisit: createQueueDto.reasonOfVisit,\n      appointmentType: createQueueDto.appointmentType,\n      isGuest: isGuest\n    });\n    \n    // Set the queue relation separately to avoid TypeORM errors\n    queueDetails.queue = savedQueue;\n\n    await this.queueDetailsRepository.save(queueDetails);\n\n    // Get queue position\n    const position = await this.getQueuePosition(savedQueue.id);\n\n    const result = { queue: savedQueue, details: queueDetails, position };\n\n    // Notify all clients that a new queue has been created\n    this.queueGateway.server.emit('queueListUpdate', {\n      action: 'created',\n      queueId: savedQueue.id,\n    });\n\n    return result;\n  }\n\n  async findAll() {\n    return await this.queueRepository.find({\n      order: { createdAt: 'ASC' },\n    });\n  }\n\n  async findByStatus(status: QueueStatus) {\n    return await this.queueRepository.find({\n      where: { status },\n      order: { createdAt: 'ASC' },\n    });\n  }\n\n  async findOne(id: number) {\n    const queue = await this.queueRepository.findOne({\n      where: { id },\n    });\n\n    if (!queue) {\n      throw new NotFoundException(`Queue #${id} not found`);\n    }\n\n    return queue;\n  }\n\n  async findByQueueNumber(queueNumber: string) {\n    const queue = await this.queueRepository.findOne({\n      where: { queueNumber },\n    });\n\n    if (!queue) {\n      throw new NotFoundException(`Queue #${queueNumber} not found`);\n    }\n\n    return queue;\n  }\n\n  async getQueueDetails(queueId: number) {\n    const queue = await this.findOne(queueId);\n\n    const details = await this.queueDetailsRepository.findOne({\n      where: { queueId },\n      relations: ['user'],\n    });\n\n    if (!details) {\n      throw new NotFoundException(`Details for queue #${queueId} not found`);\n    }\n\n    const position = await this.getQueuePosition(queueId);\n\n    return { queue, details, position };\n  }\n\n  async update(id: number, updateQueueDto: UpdateQueueDto) {\n    const queue = await this.findOne(id);\n\n    if (updateQueueDto.status) {\n      queue.status = updateQueueDto.status;\n\n      // If completed, set completion time\n      if (updateQueueDto.status === QueueStatus.COMPLETED) {\n        queue.completedAt = new Date();\n      }\n    }\n\n    if (updateQueueDto.counterNumber) {\n      queue.counterNumber = updateQueueDto.counterNumber;\n    }\n\n    const updatedQueue = await this.queueRepository.save(queue);\n\n    // Notify clients about the queue update\n    this.queueGateway.notifyQueueUpdate(id, {\n      action: 'updated',\n      queue: updatedQueue,\n    });\n\n    return updatedQueue;\n  }\n\n  async getQueuePosition(queueId: number) {\n    const queue = await this.findOne(queueId);\n\n    // If the queue is not pending, it's not in line\n    if (queue.status !== QueueStatus.PENDING) {\n      return 0;\n    }\n\n    // Count how many pending queues are ahead of this one\n    const position = await this.queueRepository.count({\n      where: {\n        status: QueueStatus.PENDING,\n        createdAt: LessThanOrEqual(queue.createdAt),\n        id: LessThanOrEqual(queueId), // Break ties using ID\n      },\n    });\n\n    return position;\n  }\n\n  async callNext(counterId: number) {\n    const counter = await this.counterRepository.findOne({\n      where: { id: counterId },\n      relations: ['currentQueue'],\n    });\n\n    if (!counter) {\n      throw new NotFoundException(`Counter #${counterId} not found`);\n    }\n\n    // Mark current queue as completed if exists\n    if (counter.currentQueue) {\n      counter.currentQueue.status = QueueStatus.COMPLETED;\n      counter.currentQueue.completedAt = new Date();\n      await this.queueRepository.save(counter.currentQueue);\n    }\n\n    // Find the next pending queue\n    const nextQueue = await this.queueRepository.findOne({\n      where: { status: QueueStatus.PENDING },\n      order: { createdAt: 'ASC' },\n    });\n\n    if (!nextQueue) {\n      counter.currentQueueId = null;\n      counter.currentQueue = null;\n      await this.counterRepository.save(counter);\n      return { counter, message: 'No more queues waiting' };\n    }\n\n    // Update the next queue\n    nextQueue.status = QueueStatus.SERVING;\n    nextQueue.counterNumber = counter.name;\n    await this.queueRepository.save(nextQueue);\n\n    // Update counter\n    counter.currentQueueId = nextQueue.id;\n    counter.currentQueue = nextQueue;\n    await this.counterRepository.save(counter);\n\n    // Get associated details\n    const details = await this.queueDetailsRepository.findOne({\n      where: { queueId: nextQueue.id },\n    });\n\n    const result = {\n      counter,\n      queue: nextQueue,\n      details,\n      message: 'Next queue called successfully',\n    };\n\n    if (nextQueue) {\n      // Notify the specific queue room that it's their turn\n      this.queueGateway.notifyQueueUpdate(nextQueue.id, {\n        action: 'called',\n        counterName: counter.name,\n        counterId: counter.id,\n      });\n    }\n\n    // Notify counter clients\n    this.queueGateway.notifyCounterUpdate(counterId, {\n      action: 'nextCalled',\n      ...result,\n    });\n\n    return result;\n  }\n\n  async getStats() {\n    const [\n      pendingCount,\n      servingCount,\n      completedCount,\n      cancelledCount,\n      totalCount,\n    ] = await Promise.all([\n      this.queueRepository.count({ where: { status: QueueStatus.PENDING } }),\n      this.queueRepository.count({ where: { status: QueueStatus.SERVING } }),\n      this.queueRepository.count({ where: { status: QueueStatus.COMPLETED } }),\n      this.queueRepository.count({ where: { status: QueueStatus.CANCELLED } }),\n      this.queueRepository.count(),\n    ]);\n\n    // Calculate average wait time\n    const completedQueues = await this.queueRepository.find({\n      where: {\n        status: QueueStatus.COMPLETED,\n        completedAt: LessThanOrEqual(new Date()),\n      },\n      select: ['createdAt', 'completedAt'],\n    });\n\n    let averageWaitTime = 0;\n    if (completedQueues.length > 0) {\n      const totalWaitTimeMs = completedQueues.reduce((total, queue) => {\n        return (\n          total + (queue.completedAt.getTime() - queue.createdAt.getTime())\n        );\n      }, 0);\n      averageWaitTime = Math.floor(\n        totalWaitTimeMs / completedQueues.length / 60000,\n      ); // Convert to minutes\n    }\n\n    return {\n      pending: pendingCount,\n      serving: servingCount,\n      completed: completedCount,\n      cancelled: cancelledCount,\n      total: totalCount,\n      averageWaitTime,\n    };\n  }\n\n  // Add a counter\n  async addCounter(name: string) {\n    const counter = this.counterRepository.create({ name });\n    return await this.counterRepository.save(counter);\n  }\n\n  // Get all counters\n  async getCounters() {\n    return await this.counterRepository.find({\n      relations: ['currentQueue'],\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/register.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for user registration\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                contactNumber\n                            \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                middleName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                nameExtension\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        contactNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        nameExtension\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  MinLength,\n} from 'class-validator';\n\n/**\n * DTO for user registration\n * @class RegisterDto\n */\n\nexport class RegisterDto {\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  password: string;\n\n  @IsString()\n  @IsNotEmpty()\n  firstName: string;\n\n  @IsString()\n  @IsOptional()\n  middleName?: string;\n\n  @IsString()\n  @IsNotEmpty()\n  lastName: string;\n\n  @IsString()\n  @IsOptional()\n  name?: string;\n\n  @IsString()\n  @IsOptional()\n  nameExtension?: string;\n\n  @IsString()\n  contactNumber?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser.html":{"url":"interfaces/RequestWithUser.html","title":"interface - RequestWithUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  Get,\n  UseGuards,\n  Request,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\n\ninterface RequestWithUser extends Request {\n  user: { sub: number; email: string; roles: string[] };\n}\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @Post('login')\n  async login(@Body() loginDto: LoginDto) {\n    console.log('Login request received:', loginDto);\n    try {\n      const result = await this.authService.login(loginDto);\n      return result;\n    } catch (error) {\n      throw new UnauthorizedException(\n        error instanceof Error ? error.message : 'Invalid credentials',\n      );\n    }\n  }\n\n  @Post('register')\n  async register(@Body() registerDto: RegisterDto) {\n    console.log('Register endpoint hit with data:', registerDto); //Debugging Statement\n    return this.authService.register(registerDto);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  getProfile(@Request() req: RequestWithUser) {\n    // Add null check before converting to number\n    if (!req.user || req.user.sub === undefined || req.user.sub === null) {\n      throw new UnauthorizedException('Invalid user ID');\n    }\n    return this.authService.getProfile(Number(req.user.sub));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser-1.html":{"url":"interfaces/RequestWithUser-1.html","title":"interface - RequestWithUser-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/roles.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ROLES_KEY } from '../decorators/roles.decorator';\n\n// Define interface for request with user\ninterface RequestWithUser extends Request {\n  user?: { roles?: string[] };\n}\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(\n      ROLES_KEY,\n      [context.getHandler(), context.getClass()],\n    );\n\n    if (!requiredRoles) {\n      return true;\n    }\n\n    const request = context.switchToHttp().getRequest();\n    const userRoles = request.user?.roles || [];\n    return requiredRoles.some((role) => userRoles.includes(role));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Role.html":{"url":"entities/Role.html","title":"entity - Role","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Role\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/entities/role.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, user => user.roles)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:16\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, PrimaryGeneratedColumn, ManyToMany } from 'typeorm';\nimport { User } from '../../users/entities/user.entity';\n\n@Entity('roles')\nexport class Role {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true, nullable: false })\n  name: string;\n\n  @Column({ nullable: true })\n  description: string;\n\n  @ManyToMany(() => User, (user) => user.roles)\n  users: User[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RolesController.html":{"url":"controllers/RolesController.html","title":"controller - RolesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RolesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/roles.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                roles\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                getUserRoles\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@Roles('admin', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/roles/roles.controller.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@Roles('admin', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/roles/roles.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getUserRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserRoles(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('user/:userId')@Roles('admin', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/roles/roles.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, UseGuards } from '@nestjs/common';\nimport { RolesService } from './roles.service';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../auth/guards/roles.guard';\nimport { Roles } from '../auth/decorators/roles.decorator';\n\n@Controller('roles')\n@UseGuards(JwtAuthGuard, RolesGuard)\nexport class RolesController {\n  constructor(private readonly rolesService: RolesService) {}\n\n  @Get()\n  @Roles('admin', 'super_admin')\n  findAll() {\n    return this.rolesService.findAll();\n  }\n\n  @Get(':id')\n  @Roles('admin', 'super_admin')\n  findOne(@Param('id') id: string) {\n    return this.rolesService.findOne(+id);\n  }\n\n  @Get('user/:userId')\n  @Roles('admin', 'super_admin')\n  getUserRoles(@Param('userId') userId: string) {\n    return this.rolesService.getUserRoles(+userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/roles.guard.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/roles.guard.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ROLES_KEY } from '../decorators/roles.decorator';\n\n// Define interface for request with user\ninterface RequestWithUser extends Request {\n  user?: { roles?: string[] };\n}\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(\n      ROLES_KEY,\n      [context.getHandler(), context.getClass()],\n    );\n\n    if (!requiredRoles) {\n      return true;\n    }\n\n    const request = context.switchToHttp().getRequest();\n    const userRoles = request.user?.roles || [];\n    return requiredRoles.some((role) => userRoles.includes(role));\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RolesModule.html":{"url":"modules/RolesModule.html","title":"module - RolesModule","body":"\n                   \n\n\n\n\n    Modules\n    RolesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_exports\n\n\n\ncluster_RolesModule_providers\n\n\n\n\nRolesService \n\nRolesService \n\n\n\nRolesModule\n\nRolesModule\n\nRolesService  -->\n\nRolesModule->RolesService \n\n\n\n\n\nRolesService\n\nRolesService\n\nRolesModule -->\n\nRolesService->RolesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/roles/roles.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RolesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RolesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RolesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Role } from './entities/role.entity';\nimport { User } from '../users/entities/user.entity';\nimport { RolesService } from './roles.service';\nimport { RolesController } from './roles.controller';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Role, User])],\n  providers: [RolesService],\n  controllers: [RolesController],\n  exports: [RolesService],\n})\nexport class RolesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RolesService.html":{"url":"injectables/RolesService.html","title":"injectable - RolesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RolesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/roles.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                assignRolesToUser\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByName\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getUserRoles\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(rolesRepository: Repository, usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/roles/roles.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        rolesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        assignRolesToUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    assignRolesToUser(userId: number, roleIds: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roleIds\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByName\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByName(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserRoles(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Role } from './entities/role.entity';\nimport { User } from '../users/entities/user.entity';\n\n@Injectable()\nexport class RolesService {\n  constructor(\n    @InjectRepository(Role)\n    private rolesRepository: Repository,\n\n    @InjectRepository(User)\n    private usersRepository: Repository,\n  ) {}\n\n  async findAll(): Promise {\n    return this.rolesRepository.find();\n  }\n\n  async findOne(id: number): Promise {\n    const role = await this.rolesRepository.findOne({ where: { id } });\n    if (!role) {\n      throw new NotFoundException(`Role with ID ${id} not found`);\n    }\n    return role;\n  }\n\n  async findByName(name: string): Promise {\n    const role = await this.rolesRepository.findOne({ where: { name } });\n    if (!role) {\n      throw new NotFoundException(`Role with name ${name} not found`);\n    }\n    return role;\n  }\n\n  async getUserRoles(userId: number): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id: userId },\n      relations: ['roles'],\n    });\n    return user ? user.roles : [];\n  }\n\n  async assignRolesToUser(userId: number, roleIds: number[]): Promise {\n    // Find the user\n    const user = await this.usersRepository.findOne({\n      where: { id: userId },\n      relations: ['roles'],\n    });\n\n    if (!user) {\n      throw new Error('User not found');\n    }\n\n    // Find the roles\n    const roles = await this.rolesRepository.findByIds(roleIds);\n\n    // Assign roles to user\n    user.roles = roles;\n    await this.usersRepository.save(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateQueueDto.html":{"url":"classes/UpdateQueueDto.html","title":"class - UpdateQueueDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateQueueDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/dto/update-queue.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                counterNumber\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        counterNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/update-queue.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueueStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(QueueStatus)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/update-queue.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsEnum, IsOptional } from 'class-validator';\nimport { QueueStatus } from '../entities/queue.entity';\n\nexport class UpdateQueueDto {\n  @IsEnum(QueueStatus)\n  @IsOptional()\n  status?: QueueStatus;\n\n  @IsString()\n  @IsOptional()\n  counterNumber?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                contactNumber\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                defaultRole\n                            \n                            \n                                    \n                                defaultRoleId\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                middleName\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                nameExtension\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                roles\n                            \n                            \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        contactNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'contact_number', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        defaultRole\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {nullable: true})@JoinColumn({name: 'default_role_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        defaultRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'default_role_id', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'first_name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'last_name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'middle_name', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        nameExtension\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'name_extension', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined)@JoinTable({name: 'user_roles', joinColumn: undefined, inverseJoinColumn: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:22\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  ManyToOne,\n  JoinColumn,\n  ManyToMany,\n  JoinTable,\n} from 'typeorm';\nimport { Role } from '../../roles/entities/role.entity';\n\n@Entity('users')\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true })\n  email: string;\n\n  @Column({ unique: true })\n  username: string;\n\n  @Column()\n  password: string;\n\n  @Column({ name: 'first_name' })\n  firstName: string;\n\n  @Column({ name: 'middle_name', nullable: true })\n  middleName: string;\n\n  @Column({ name: 'last_name' })\n  lastName: string;\n\n  @Column()\n  name: string; // Keep for backward compatibility\n\n  @Column({ name: 'name_extension', nullable: true })\n  nameExtension: string;\n\n  @Column({ name: 'contact_number', nullable: true })\n  contactNumber: string;\n\n  @CreateDateColumn({ name: 'created_at' })\n  createdAt: Date;\n\n  @ManyToOne(() => Role, { nullable: true })\n  @JoinColumn({ name: 'default_role_id' })\n  defaultRole: Role;\n\n  @Column({ name: 'default_role_id', nullable: true })\n  defaultRoleId: number;\n\n  @ManyToMany(() => Role)\n  @JoinTable({\n    name: 'user_roles',\n    joinColumn: {\n      name: 'user_id',\n      referencedColumnName: 'id',\n    },\n    inverseJoinColumn: {\n      name: 'role_id',\n      referencedColumnName: 'id',\n    },\n  })\n  roles: Role[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './entities/user.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  exports: [TypeOrmModule],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/auth/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/decorators/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/auth/dto/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                10 %\n                (1/10)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/roles.guard.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            interface\n            JwtPayload\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/config/database.config.ts\n            \n            variable\n            databaseConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            seedDatabaseIfNeeded\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/counter/entities/counter.entity.ts\n            \n            entity\n            Counter\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/queue/dto/create-queue.dto.ts\n            \n            class\n            CreateQueueDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/queue/dto/update-queue.dto.ts\n            \n            class\n            UpdateQueueDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/queue/entities/queue-details.entity.ts\n            \n            entity\n            QueueDetails\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/queue/entities/queue.entity.ts\n            \n            entity\n            Queue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/queue/queue.controller.ts\n            \n            controller\n            QueueController\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/modules/queue/queue.gateway.ts\n            \n            class\n            QueueGateway\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/modules/queue/queue.service.ts\n            \n            injectable\n            QueueService\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/roles/entities/role.entity.ts\n            \n            entity\n            Role\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/roles/roles.controller.ts\n            \n            controller\n            RolesController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/roles/roles.service.ts\n            \n            injectable\n            RolesService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^11.1.0\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.1.0\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/passport : ^11.0.5\n        \n            @nestjs/platform-express : ^11.1.0\n        \n            @nestjs/platform-socket.io : ^11.1.0\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            @nestjs/websockets : ^11.1.0\n        \n            bcrypt : ^5.1.1\n        \n            class-validator : ^0.14.1\n        \n            dotenv : ^16.5.0\n        \n            mysql2 : ^3.14.1\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.2\n        \n            socket.io : ^4.8.1\n        \n            typeorm : ^0.3.22\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CounterStatus   (src/.../counter.entity.ts)\n                        \n                        \n                            QueueStatus   (src/.../queue.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/counter/entities/counter.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        CounterStatus\n                    \n                \n                        \n                            \n                                 ACTIVE\n                            \n                        \n                        \n                            \n                                Value : active\n                            \n                        \n                        \n                            \n                                 INACTIVE\n                            \n                        \n                        \n                            \n                                Value : inactive\n                            \n                        \n            \n        \n\n    src/modules/queue/entities/queue.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        QueueStatus\n                    \n                \n                        \n                            \n                                 PENDING\n                            \n                        \n                        \n                            \n                                Value : pending\n                            \n                        \n                        \n                            \n                                 SERVING\n                            \n                        \n                        \n                            \n                                Value : serving\n                            \n                        \n                        \n                            \n                                 COMPLETED\n                            \n                        \n                        \n                            \n                                Value : completed\n                            \n                        \n                        \n                            \n                                 CANCELLED\n                            \n                        \n                        \n                            \n                                Value : cancelled\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            seedDatabaseIfNeeded   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seedDatabaseIfNeeded\n                        \n                    \n                \n            \n            \n                \nseedDatabaseIfNeeded(dataSource: DataSource)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dataSource\n                                            \n                                                        DataSource\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        QueueModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RolesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_QueueModule\n\n\n\ncluster_QueueModule_exports\n\n\n\ncluster_QueueModule_providers\n\n\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_exports\n\n\n\ncluster_RolesModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nQueueModule\n\nQueueModule\n\nAppModule -->\n\nQueueModule->AppModule\n\n\n\n\n\nQueueGateway \n\nQueueGateway \n\nQueueGateway  -->\n\nQueueModule->QueueGateway \n\n\n\n\n\nQueueService \n\nQueueService \n\nQueueService  -->\n\nQueueModule->QueueService \n\n\n\n\n\nRolesModule\n\nRolesModule\n\nAuthModule -->\n\nRolesModule->AuthModule\n\n\n\nAppModule -->\n\nRolesModule->AppModule\n\n\n\n\n\nRolesService \n\nRolesService \n\nRolesService  -->\n\nRolesModule->RolesService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nQueueService\n\nQueueService\n\nQueueModule -->\n\nQueueService->QueueModule\n\n\n\n\n\nRolesService\n\nRolesService\n\nRolesModule -->\n\nRolesService->RolesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            databaseConfig   (src/.../database.config.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/database.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        databaseConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TypeOrmModuleOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'mysql',\n  host: process.env.DB_HOST || 'localhost',\n  port: parseInt(process.env.DB_PORT || '3306'),\n  username: process.env.DB_USERNAME || 'root',\n  password: process.env.DB_PASSWORD || '',\n  database: process.env.DB_NAME || 'bulak_smart_connect',\n  entities: [__dirname + '/../**/*.entity{.ts,.js}'],\n  synchronize: process.env.NODE_ENV !== 'production',\n  logging: process.env.NODE_ENV !== 'production',\n}\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: string[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
