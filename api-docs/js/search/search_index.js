var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AdminUpdateUserDto.html",[0,0.122,1,1.971]],["body/classes/AdminUpdateUserDto.html",[0,0.205,1,2.872,2,1.179,3,0.103,4,0.103,5,0.103,6,4.644,7,2.595,8,2.384,9,3.722,10,2.267,11,1.863,12,1.451,13,2.267,14,3.82,15,0.198,16,0.736,17,1.432,18,3.156,19,3.509,20,3.368,21,3.007,22,2.308,23,2.246,24,2.246,25,3.007,26,3.007,27,2.68,28,2.68,29,0.496,30,0.014,31,1.266,32,1.35,33,6.068,34,1.402,35,1.833,36,1.026,37,3.502,38,3.59,39,0.723,40,3.59,41,2.473,42,3.677,43,2.861,44,1.137,45,3.59,46,3.59,47,0.794,48,4.431,49,4.431,50,4.431,51,4.431,52,4.431,53,4.431,54,3.127,55,7.526,56,3.59,57,3.419,58,3.127,59,3.59,60,3.127,61,3.59,62,2.718,63,1.03,64,3.127,65,3.59,66,2.861,67,2.823,68,3.59,69,3.419,70,2.823,71,3.59,72,3.419,73,3.677,74,3.971,75,3.677,76,2.823,77,3.59,78,3.677,79,3.722,80,3.677,81,3.419,82,4.27,83,3.127,84,3.59,85,3.127,86,3.59,87,0.164,88,3.677,89,3.625,90,3.5,91,3.677,92,3.999,93,1.475,94,4.91,95,1.267,96,2.262,97,2.262,98,1.828,99,0.164,100,2.595,101,2.823,102,2.823,103,2.262,104,2.823,105,2.413,106,2.823,107,3.127,108,3.677,109,1.475,110,0.008,111,0.008]],["title/entities/Announcement.html",[112,1.24,113,2.726]],["body/entities/Announcement.html",[0,0.149,3,0.142,4,0.142,5,0.142,8,2.125,10,2.81,15,0.272,16,0.913,29,0.52,30,0.014,31,1.102,32,1.392,34,2.017,36,1.402,39,0.745,47,0.783,87,0.16,99,0.16,110,0.01,111,0.01,112,1.51,113,4.238,114,2.112,115,4.301,116,2.971,117,6.051,118,6.051,119,3.712,120,6.051,121,4.67,122,2.891,123,3.907,124,4.937,125,4.765,126,7.733,127,5.59,128,3.973,129,4.937,130,4.957,131,4.937,132,3.536,133,4.937,134,5.492,135,3.21,136,1.757,137,4.937,138,2.783,139,4.937,140,5.492,141,4.937,142,5.021,143,4.937,144,3.759,145,1.564,146,4.937]],["title/controllers/AnnouncementController.html",[147,1.485,148,2.931]],["body/controllers/AnnouncementController.html",[0,0.14,3,0.133,4,0.133,5,0.133,11,2.472,15,0.256,17,1.298,29,0.469,30,0.014,31,1.421,32,1.331,34,1.281,36,1.536,39,0.713,63,1.033,87,0.231,99,0.15,110,0.01,111,0.01,147,1.702,148,4.383,149,1.767,150,4.049,151,2.614,152,4.648,153,1.855,154,2.593,155,3.642,156,3.087,157,5.282,158,2.948,159,4.049,160,4.795,161,4.009,162,4.648,163,2.351,164,2.327,165,4.648,166,2.162,167,3.821,168,4.648,169,4.049,170,6.064,171,4.648,172,2.259,173,3.24,174,4.383,175,2.484,176,4.383,177,4.648,178,2.761,179,5.284,180,4.383,181,4.648,182,3.821,183,3.36,184,2.614,185,2.928,186,7.42,187,2.928,188,0.783,189,4.253,190,4.049,191,2.366,192,4.768,193,2.366,194,4.648,195,2.071,196,2.259,197,4.648,198,1.765,199,4.648,200,4.648,201,4.648,202,4.648,203,3.36,204,4.648,205,3.36,206,4.648,207,3.654,208,4.648]],["title/modules/AnnouncementModule.html",[209,1.331,210,2.726]],["body/modules/AnnouncementModule.html",[0,0.173,3,0.164,4,0.164,5,0.164,30,0.014,87,0.255,99,0.185,110,0.011,111,0.011,113,3.85,148,5.368,149,2.629,188,0.965,189,5.265,190,4.989,209,2.438,210,5.455,211,2.784,212,2.784,213,3.06,214,3.06,215,2.784,216,3.969,217,3.969,218,4.989,219,4.989,220,4.989,221,3.694,222,2.449,223,2.916,224,5.727,225,3.221,226,2.021,227,5.727,228,4.989,229,3.221,230,5.727]],["title/injectables/AnnouncementService.html",[189,2.555,231,0.818]],["body/injectables/AnnouncementService.html",[0,0.125,3,0.119,4,0.119,5,0.119,11,2.337,15,0.229,17,1.289,29,0.466,30,0.014,31,1.397,34,1.145,36,1.521,39,0.706,63,1.026,87,0.238,99,0.134,110,0.009,111,0.009,113,5.067,116,2.407,119,3.411,136,1.532,145,1.316,153,1.721,154,2.73,155,3.483,156,2.865,157,4.903,158,2.736,159,3.619,160,4.749,163,2.335,164,2.254,166,2.618,169,4.903,172,2.02,173,3.007,174,4.068,175,3.007,178,2.468,179,5.154,185,2.618,188,0.7,189,3.546,191,2.115,192,4.425,193,2.115,198,1.658,226,1.466,228,3.619,231,1.136,232,1.707,233,3.619,234,2.698,235,1.986,236,4.155,237,3.326,238,4.155,239,5.628,240,4.155,241,3.282,242,4.155,243,4.155,244,4.155,245,4.155,246,4.155,247,2.468,248,2.115,249,4.155,250,1.522,251,1.821,252,4.155,253,2.517,254,6.383,255,5.628,256,3.546,257,3.783,258,4.155,259,1.414,260,1.271,261,4.155,262,1.777,263,3.546,264,4.155,265,4.155,266,1.522,267,4.155,268,2.793]],["title/controllers/AppController.html",[147,1.485,269,2.931]],["body/controllers/AppController.html",[0,0.176,3,0.167,4,0.167,5,0.167,15,0.321,30,0.014,32,1.222,39,0.654,47,0.736,87,0.226,99,0.188,110,0.011,111,0.011,147,2.559,149,2.216,153,2.137,164,2.137,188,0.982,195,2.597,196,2.833,198,1.621,269,5.05,270,5.077,271,6.758,272,7.758,273,5.827,274,6.986,275,5.827,276,1.993,277,4.715,278,5.077,279,5.827,280,5.827]],["title/modules/AppModule.html",[209,1.331,281,2.931]],["body/modules/AppModule.html",[0,0.118,3,0.112,4,0.112,5,0.112,27,1.547,28,1.547,29,0.247,30,0.014,47,0.531,87,0.263,99,0.127,110,0.009,111,0.009,114,1.674,136,1.602,149,2.055,187,3.405,188,0.66,209,2.032,210,4.867,211,1.903,212,1.903,213,2.092,214,2.092,215,1.903,216,3.307,217,2.092,221,2.888,222,1.674,223,1.993,225,2.202,226,1.382,229,3.481,234,1.774,241,2.742,251,1.042,253,2.032,266,1.979,269,4.474,277,4.562,278,3.411,281,5.997,282,3.411,283,3.411,284,3.411,285,4.867,286,4.867,287,4.867,288,4.867,289,4.3,290,4.867,291,3.869,292,4.072,293,3.915,294,4.708,295,3.566,296,1.993,297,3.411,298,2.83,299,3.078,300,3.915,301,3.915,302,3.915,303,3.915,304,3.078,305,3.915,306,3.915,307,3.915,308,3.915,309,2.83,310,3.915,311,1.993,312,3.078,313,2.83,314,2.83,315,3.915,316,3.915,317,3.915,318,2.83,319,3.411,320,3.411,321,3.078,322,3.915,323,2.632,324,3.915,325,3.915,326,3.915,327,2.632,328,3.915,329,3.411,330,3.411,331,4.708,332,3.915,333,3.21,334,4.474,335,5.391,336,3.078,337,3.915,338,2.467,339,3.915,340,3.915,341,3.411,342,2.092,343,3.915,344,5.813,345,3.915,346,2.632,347,3.915,348,3.915,349,3.915,350,3.915,351,6.673,352,5.404,353,4.249,354,3.915,355,5.404,356,3.078,357,3.915,358,3.078,359,3.915,360,3.915,361,3.915,362,2.632,363,2.632,364,3.915,365,2.632,366,3.915,367,3.915,368,3.915,369,3.915,370,3.915,371,3.915,372,3.915,373,3.411,374,3.915]],["title/injectables/AppService.html",[231,0.818,277,2.555]],["body/injectables/AppService.html",[0,0.187,3,0.178,4,0.178,5,0.178,15,0.341,30,0.013,39,0.58,47,0.712,87,0.2,99,0.2,110,0.012,111,0.012,153,2.216,164,1.895,188,1.044,198,1.437,231,1.462,232,2.546,271,6.895,277,4.565,375,5.398,376,6.196,377,6.196,378,6.196]],["title/entities/ApplicationStatusHistory.html",[112,1.24,379,2.726]],["body/entities/ApplicationStatusHistory.html",[0,0.135,3,0.128,4,0.128,5,0.128,15,0.326,16,0.856,29,0.503,30,0.014,31,1.232,32,1.363,36,1.337,39,0.73,47,0.766,63,1.069,87,0.191,99,0.145,110,0.009,111,0.009,112,1.368,114,1.913,122,2.336,123,3.326,127,5.442,130,4.649,132,3.372,135,3.969,136,1.808,144,3.66,145,1.417,266,1.638,276,2.25,379,3.975,380,4.016,381,6.872,382,3.896,383,3.725,384,5.208,385,6.624,386,6.624,387,6.624,388,6.624,389,4.453,390,4.441,391,2.818,392,4.649,393,5.913,394,4.649,395,4.274,396,4.473,397,6.139,398,4.473,399,4.353,400,5.92,401,4.473,402,3.007,403,5.913,404,4.473,405,5.913,406,4.473,407,4.473,408,5.913,409,4.473,410,5.913,411,4.473,412,5.151,413,4.473,414,3.726,415,3.512,416,2.516,417,2.818,418,4.473,419,3.896,420,4.473,421,2.39]],["title/entities/Appointment.html",[112,1.24,422,2.555]],["body/entities/Appointment.html",[0,0.124,3,0.118,4,0.118,5,0.118,12,1.414,15,0.227,16,0.811,20,2.957,23,2.418,24,2.418,29,0.519,30,0.014,31,1.193,32,1.426,34,1.752,36,1.283,39,0.764,44,1.307,47,0.807,63,0.574,87,0.181,99,0.181,110,0.009,111,0.009,112,1.261,114,1.764,116,2.719,121,4.274,122,2.906,123,3.576,125,3.528,132,3.237,135,3.472,136,1.806,138,2.129,142,4.596,144,4.005,145,1.307,266,2.051,276,1.814,391,2.598,414,3.528,415,3.326,422,3.528,423,3.242,424,4.999,425,4.999,426,4.999,427,4.274,428,4.006,429,4.006,430,4.006,431,2.517,432,4.124,433,4.124,434,3.242,435,4.124,436,4.124,437,4.124,438,4.124,439,4.124,440,3.592,441,4.124,442,4.124,443,4.403,444,4.124,445,4.124,446,4.124,447,4.493,448,4.493,449,4.124,450,4.124,451,2.772,452,4.403,453,5.6,454,4.124,455,4.124,456,2.319,457,2.992,458,4.403,459,3.326,460,3.528,461,4.124,462,2.981,463,3.592]],["title/controllers/AppointmentController.html",[147,1.485,464,2.931]],["body/controllers/AppointmentController.html",[0,0.079,3,0.075,4,0.075,5,0.075,8,1.233,10,2.457,11,2.397,12,1.482,15,0.144,17,1.237,29,0.447,30,0.014,31,0.458,32,1.277,36,1.536,39,0.684,47,0.789,63,0.985,87,0.233,95,0.925,96,1.651,99,0.085,110,0.006,111,0.006,122,2.886,147,0.96,149,0.996,151,1.474,153,1.233,154,2.545,155,2.807,156,2.052,158,1.959,161,2.394,163,2.28,164,2.234,166,1.219,167,2.539,175,1.4,176,1.894,178,1.557,180,1.894,182,3.094,183,1.894,184,1.474,185,3.473,187,1.651,188,0.442,191,1.334,193,1.334,195,1.168,196,1.959,198,1.67,203,1.894,205,2.913,207,2.06,234,2.689,250,0.96,251,1.073,253,1.612,259,2.138,260,2.119,276,1.927,338,2.539,362,1.762,422,4.969,425,3.861,431,0.925,447,3.473,464,2.913,465,2.283,466,6.036,467,3.511,468,4.03,469,3.511,470,4.03,471,4.911,472,3.274,473,3.301,474,2.283,475,3.959,476,3.44,477,2.283,478,2.621,479,2.709,480,2.052,481,2.052,482,2.621,483,3.078,484,2.283,485,5.28,486,2.283,487,4.03,488,2.621,489,2.283,490,5.513,491,4.03,492,2.621,493,2.621,494,2.621,495,2.621,496,2.621,497,2.283,498,4.03,499,4.278,500,2.621,501,2.621,502,2.621,503,4.334,504,4.116,505,2.621,506,2.621,507,5.473,508,4.03,509,2.621,510,2.621,511,5.184,512,2.621,513,2.621,514,2.621,515,2.621,516,4.541,517,2.283,518,2.621,519,1.557,520,2.621,521,2.621,522,1.651,523,3.18,524,2.621,525,2.621,526,3.094,527,2.283,528,3.169,529,1.4,530,1.894,531,1.651,532,3.029,533,1.894,534,0.892,535,1.894,536,1.762,537,2.283,538,2.06,539,1.762,540,4.224,541,2.709,542,1.762,543,2.621,544,2.621,545,3.749,546,1.894,547,1.4,548,2.621,549,4,550,2.621,551,2.621,552,4.679,553,2.621,554,2.621,555,2.06,556,3.749,557,4.03,558,2.621,559,2.621,560,2.621,561,6.283,562,2.621,563,2.283,564,1.894,565,2.621,566,2.621,567,4.03,568,4.03,569,3.094,570,2.621,571,2.283,572,2.621,573,2.621,574,2.06,575,2.06,576,2.621,577,2.621,578,2.283,579,2.621,580,4.911,581,2.621,582,2.621,583,1.875,584,4.03,585,4.03,586,3.169,587,3.511,588,3.511,589,3.511,590,4.03,591,4.03,592,2.621,593,2.621,594,2.06,595,2.621,596,2.621,597,2.06,598,2.06,599,2.621,600,2.283,601,2.621,602,2.621,603,2.621,604,2.621,605,2.621]],["title/modules/AppointmentModule.html",[209,1.331,285,2.726]],["body/modules/AppointmentModule.html",[0,0.173,3,0.164,4,0.164,5,0.164,30,0.014,87,0.255,99,0.185,110,0.011,111,0.011,149,2.629,188,0.965,209,2.438,211,2.784,212,2.784,213,3.06,214,3.06,215,2.784,216,3.969,217,3.969,221,3.694,222,2.449,223,2.916,225,3.221,226,2.021,229,3.221,285,5.455,422,3.609,464,5.368,526,5.265,527,4.989,536,3.85,606,4.989,607,4.989,608,4.989,609,5.727,610,5.727,611,5.727]],["title/injectables/AppointmentService.html",[231,0.818,526,2.555]],["body/injectables/AppointmentService.html",[0,0.067,3,0.064,4,0.064,5,0.064,11,1.848,15,0.123,17,1.227,29,0.443,30,0.014,31,1.277,36,1.502,39,0.684,47,0.765,63,0.977,79,1.405,87,0.199,96,2.237,99,0.072,109,0.916,110,0.006,111,0.006,122,3.098,145,0.706,153,1.086,154,1.893,155,2.253,156,1.808,158,1.726,163,2.223,164,2.208,166,1.652,175,1.897,178,1.324,188,0.376,191,1.135,193,1.135,198,1.599,226,0.787,231,0.717,232,0.916,234,2.659,235,1.253,237,2.454,241,3.18,247,1.324,248,1.135,250,2.255,251,2.05,253,2.217,256,3.18,257,1.499,259,2.511,260,2.066,262,1.893,263,2.237,276,2.032,363,4.54,392,1.753,422,4.73,424,5.027,425,3.968,426,4.616,431,1.253,447,3.18,457,1.191,458,1.753,459,1.324,460,1.405,463,3.855,466,4.801,467,3.855,469,3.093,473,2.975,474,1.942,475,3.699,483,0.953,489,1.942,497,3.093,499,4.396,507,4.801,511,3.855,516,4.298,519,1.324,523,1.191,526,2.237,528,2.792,536,1.499,571,1.942,578,3.093,583,2.563,612,1.942,613,4.425,614,3.551,615,5.047,616,3.551,617,4.425,618,5.047,619,2.229,620,2.229,621,3.551,622,2.229,623,2.229,624,2.229,625,2.229,626,3.551,627,2.229,628,2.229,629,2.229,630,2.229,631,3.551,632,2.229,633,2.229,634,2.229,635,2.229,636,2.229,637,2.229,638,2.229,639,2.229,640,1.753,641,2.489,642,2.229,643,2.229,644,1.611,645,1.942,646,2.229,647,2.937,648,2.229,649,2.229,650,2.229,651,3.199,652,2.229,653,4.425,654,2.229,655,3.947,656,1.753,657,2.229,658,2.229,659,2.229,660,2.229,661,3.479,662,3.551,663,5.511,664,5.115,665,4.425,666,4.425,667,1.942,668,3.551,669,3.551,670,3.551,671,3.551,672,3.551,673,4.425,674,3.551,675,2.229,676,1.808,677,2.229,678,3.551,679,2.229,680,2.85,681,3.648,682,4.801,683,1.324,684,2.229,685,2.229,686,2.229,687,1.942,688,2.229,689,2.229,690,2.229,691,3.551,692,3.551,693,3.551,694,2.229,695,2.229,696,4.425,697,1.942,698,2.229,699,2.229,700,2.229,701,1.324,702,2.229,703,2.229,704,1.942,705,2.229,706,2.229,707,2.229,708,2.229,709,2.229,710,2.229,711,3.648,712,2.229,713,3.551,714,2.229,715,2.229,716,2.229,717,2.229,718,2.229,719,2.229,720,3.093,721,3.551,722,3.093,723,2.792,724,3.093,725,1.611,726,5.871,727,2.229,728,2.229,729,2.229,730,3.551,731,2.229,732,2.229,733,2.229,734,2.229,735,1.191,736,1.135,737,1.611,738,4.425,739,1.808,740,3.551,741,3.551,742,2.229,743,2.229,744,3.551,745,2.229]],["title/controllers/AuthController.html",[147,1.485,746,2.726]],["body/controllers/AuthController.html",[0,0.055,1,2.411,3,0.052,4,0.052,5,0.052,8,2.436,10,1.717,11,2.427,12,1.437,13,0.811,14,3.282,15,0.1,16,0.648,17,1.073,22,2.59,27,2.618,28,2.337,29,0.5,30,0.014,31,0.867,32,1.073,35,1.277,36,1.141,39,0.575,41,1.464,44,1.22,47,0.731,62,0.972,63,0.88,87,0.214,95,0.642,97,2.427,99,0.059,110,0.005,111,0.005,136,1.191,147,0.666,149,0.692,151,1.023,153,0.921,161,1.081,163,1.944,164,1.877,182,2.427,184,1.023,188,0.307,193,0.926,198,1.467,222,2.285,234,2.472,235,0.642,250,1.411,251,1.633,253,2.176,259,2.369,260,2.065,262,1.647,276,2.034,291,2.058,292,2.166,311,3.732,313,1.315,314,1.315,342,2.058,346,3.009,431,1.063,476,1.401,479,2.024,480,0.926,481,2.88,483,2.53,503,1.431,504,1.081,522,1.147,523,0.972,529,0.972,531,1.147,532,1.533,534,1.311,539,1.223,540,3.592,541,4.842,542,1.223,545,2.427,546,2.784,547,2.392,549,3.334,556,1.147,583,2.082,586,1.431,597,5.099,641,1.694,644,2.177,647,2.637,651,2.177,676,1.961,680,2.637,681,3.503,683,2.659,736,1.533,739,2.72,746,2.024,747,1.431,748,3.028,749,3.011,750,2.368,751,3.334,752,2.623,753,3.011,754,2.623,755,3.355,756,2.623,757,1.82,758,3.379,759,3.028,760,4.959,761,3.9,762,2.623,763,2.368,764,2.368,765,1.82,766,1.82,767,1.82,768,4.277,769,1.82,770,4.655,771,4.655,772,3.465,773,2.623,774,3.852,775,5.154,776,4.655,777,1.82,778,2.623,779,2.623,780,2.623,781,1.82,782,2.177,783,1.585,784,4.655,785,4.655,786,3.011,787,1.82,788,1.82,789,2.623,790,1.82,791,3.863,792,1.82,793,3.728,794,2.623,795,1.82,796,1.585,797,1.585,798,4.79,799,2.024,800,2.368,801,1.82,802,1.82,803,1.82,804,1.585,805,3.728,806,1.82,807,3.9,808,3.9,809,3.011,810,1.82,811,1.82,812,1.82,813,1.82,814,3.125,815,1.82,816,2.784,817,1.82,818,1.82,819,1.82,820,1.609,821,1.82,822,2.623,823,1.82,824,3.355,825,1.82,826,2.623,827,1.82,828,3.355,829,1.82,830,1.82,831,1.82,832,1.82,833,1.82,834,1.82,835,1.82,836,2.623,837,1.82,838,3.355,839,2.821,840,2.288,841,1.431,842,1.431,843,1.431,844,1.585,845,1.081,846,1.315,847,1.585,848,1.315,849,2.623,850,4.32,851,0.619,852,1.585,853,1.585,854,2.368,855,1.897,856,2.177,857,1.694,858,3.028,859,1.585,860,1.585,861,1.431,862,1.585,863,1.585,864,2.784,865,2.784,866,2.789,867,1.585,868,1.585,869,2.177,870,2.821,871,1.585,872,3.9,873,2.623,874,3.9,875,1.585,876,3.52,877,1.585,878,2.589,879,3.355,880,1.585,881,1.431,882,1.223,883,1.431,884,1.223,885,1.223,886,1.431,887,1.431,888,1.431,889,3.009,890,3.174,891,2.784,892,3.355,893,3.028,894,4.655,895,3.367,896,1.585,897,1.585,898,1.585,899,2.623,900,2.177,901,1.585,902,1.431,903,1.585,904,1.585,905,1.585,906,1.585,907,1.585,908,3.592,909,1.315,910,1.585,911,2.623,912,3.585,913,2.411,914,2.623,915,1.585,916,2.368,917,1.585,918,2.623,919,1.315,920,1.585,921,1.431,922,1.585,923,1.585,924,1.585,925,1.585,926,1.585,927,1.585,928,2.177,929,1.585,930,1.585,931,3.028,932,1.585,933,1.585]],["title/modules/AuthModule.html",[209,1.331,286,2.726]],["body/modules/AuthModule.html",[0,0.142,3,0.135,4,0.135,5,0.135,12,0.882,30,0.014,87,0.264,99,0.152,110,0.01,111,0.01,149,2.32,188,0.791,209,2.226,211,2.282,212,2.282,213,2.508,214,2.508,215,2.282,216,3.624,217,3.624,221,3.261,222,2.007,223,2.39,225,2.64,226,1.657,229,3.814,286,5.596,289,4.532,291,4.349,292,4.577,294,5.316,295,3.837,296,2.39,304,3.69,311,3.107,312,3.69,313,3.393,314,3.393,318,3.393,319,4.089,456,2.64,746,4.559,840,4.834,841,3.69,848,3.393,934,4.089,935,4.694,936,4.089,937,4.089,938,4.834,939,4.694,940,4.694,941,3.69,942,6.103,943,2.957,944,4.694,945,4.089,946,4.694,947,4.694,948,2.957,949,4.694,950,4.089,951,3.393,952,4.694,953,4.694,954,4.694]],["title/injectables/AuthService.html",[231,0.818,840,2.408]],["body/injectables/AuthService.html",[0,0.041,1,1.809,3,0.039,4,0.039,5,0.039,9,0.862,10,2.199,11,2.391,12,1.488,14,3,15,0.075,17,1.024,18,0.731,21,1.204,22,2.425,23,1.415,24,1.188,25,2.14,26,1.894,27,2.975,28,2.241,29,0.38,30,0.014,31,1.079,34,1.437,35,1.961,36,1.145,39,0.549,43,1.757,44,1.179,47,0.642,62,1.264,63,0.935,87,0.183,96,1.49,97,1.49,98,2.78,99,0.044,110,0.004,111,0.004,136,0.568,138,1.188,145,0.433,153,0.723,154,0.585,158,2.043,163,1.856,164,1.735,185,1.49,188,0.231,193,0.696,198,1.537,226,0.483,231,0.477,232,0.562,234,2.339,235,0.835,237,1.809,241,1.89,248,0.696,250,2,251,2.104,253,2.516,259,2.608,260,2.294,262,2.231,266,1.685,327,2.1,346,0.92,356,3.879,362,1.59,421,2.246,431,1.927,456,0.769,481,0.696,483,1.967,504,1.405,523,3.031,534,2.285,552,2.456,569,0.862,583,2.294,598,2.926,641,2.093,644,3.566,647,2.862,651,1.71,655,0.769,676,2.888,680,2.91,681,3.64,683,2.732,701,1.856,736,2.511,739,2.511,748,2.456,750,1.86,751,1.59,752,2.06,759,4.293,793,0.862,798,1.71,799,0.92,804,2.06,805,3.574,814,2.898,816,0.989,839,1.968,840,1.405,842,1.076,843,1.076,845,0.813,854,1.86,855,0.862,857,2.934,861,1.076,864,3.771,865,1.71,866,2.934,869,2.69,886,1.076,889,2.1,890,1.856,891,0.989,895,1.968,900,3.325,902,1.86,909,3.038,912,0.989,913,2.236,916,1.86,931,2.456,941,1.076,948,0.862,955,1.192,956,2.365,957,2.365,958,2.365,959,2.365,960,2.365,961,2.365,962,1.192,963,4.933,964,2.511,965,1.368,966,1.59,967,1.368,968,1.368,969,3.242,970,2.365,971,1.368,972,2.365,973,1.368,974,2.365,975,1.368,976,1.368,977,2.365,978,1.368,979,2.365,980,1.368,981,2.365,982,1.368,983,2.365,984,1.368,985,2.365,986,1.368,987,2.69,988,1.49,989,0.989,990,0.92,991,4.049,992,3.721,993,1.368,994,3.124,995,3.879,996,4.297,997,4.933,998,3.879,999,4.297,1000,4.297,1001,4.297,1002,4.203,1003,1.368,1004,1.368,1005,1.076,1006,1.076,1007,1.368,1008,3.242,1009,1.368,1010,2.365,1011,3.124,1012,1.368,1013,1.368,1014,1.368,1015,1.368,1016,3.879,1017,3.124,1018,2.69,1019,1.71,1020,1.71,1021,2.1,1022,3.038,1023,2.365,1024,1.368,1025,2.501,1026,2.501,1027,1.71,1028,1.368,1029,1.33,1030,0.989,1031,1.368,1032,2.69,1033,2.258,1034,3.124,1035,2.69,1036,1.71,1037,3.124,1038,3.124,1039,1.368,1040,3.124,1041,3.124,1042,4.007,1043,2.721,1044,4.007,1045,1.368,1046,1.71,1047,0.989,1048,1.59,1049,1.368,1050,1.368,1051,0.989,1052,2.365,1053,1.368,1054,3.124,1055,1.368,1056,1.368,1057,1.368,1058,1.368,1059,1.368,1060,1.368,1061,1.368,1062,1.368,1063,1.368,1064,1.368,1065,0.92,1066,1.368,1067,2.365,1068,2.365,1069,0.862,1070,2.1,1071,3.124,1072,1.368,1073,1.368,1074,3.124,1075,0.989,1076,1.368,1077,1.757,1078,1.192,1079,2.345,1080,3.124,1081,1.368,1082,1.368,1083,1.368,1084,1.71,1085,3.124,1086,1.368,1087,2.365,1088,0.989,1089,3.124,1090,0.989,1091,2.365,1092,0.989,1093,3.124,1094,0.989,1095,1.368,1096,1.71,1097,1.368,1098,2.365,1099,1.368,1100,2.365,1101,1.368,1102,1.368,1103,4.203,1104,1.368,1105,1.368,1106,2.365,1107,0.989,1108,1.368,1109,1.368,1110,3.124,1111,1.59,1112,3.124,1113,2.365,1114,2.456,1115,1.368,1116,1.192,1117,1.368,1118,1.368,1119,1.368,1120,1.368,1121,1.368,1122,2.365,1123,1.368,1124,1.368,1125,1.368,1126,2.365,1127,1.368,1128,1.368,1129,2.365,1130,1.368,1131,1.192,1132,1.368,1133,1.368,1134,2.721,1135,1.192,1136,1.368,1137,1.368,1138,1.076,1139,3.721,1140,1.368,1141,1.192,1142,2.365,1143,1.368,1144,2.365,1145,1.368,1146,1.368,1147,3.124,1148,1.368,1149,4.203,1150,1.368,1151,1.076,1152,1.368,1153,2.365,1154,1.368,1155,1.368,1156,2.365,1157,1.368,1158,1.368,1159,1.368,1160,1.368,1161,1.368,1162,1.368,1163,1.368,1164,1.192,1165,1.71,1166,1.71,1167,1.368,1168,1.368,1169,1.368,1170,1.368,1171,1.368,1172,1.368,1173,1.368,1174,1.368,1175,1.368,1176,1.368,1177,3.242,1178,1.368,1179,2.365,1180,1.368,1181,1.368,1182,1.368,1183,1.368,1184,1.192,1185,1.368]],["title/interfaces/AuthenticatedUser.html",[476,1.886,851,1.38]],["body/interfaces/AuthenticatedUser.html",[0,0.15,3,0.143,4,0.143,5,0.143,13,2.22,15,0.274,16,0.918,22,2.68,29,0.441,30,0.014,31,1.284,35,1.421,36,1.53,39,0.467,41,3.391,44,1.578,47,0.746,63,0.693,87,0.237,99,0.205,110,0.01,111,0.01,188,0.84,195,2.22,198,1.155,231,1.28,251,1.955,259,2.158,260,1.939,266,1.824,295,3.727,296,2.536,334,3.601,431,2.238,476,3.244,534,2.68,839,3.139,851,2.158,895,3.139,938,2.959,943,3.139,948,3.995,951,3.601,1019,5.042,1020,3.601,1022,3.601,1065,3.349,1186,2.802,1187,3.601,1188,3.917,1189,3.917,1190,4.986,1191,3.601,1192,4.263,1193,3.917,1194,3.917,1195,3.601,1196,3.917,1197,4.689,1198,3.917,1199,3.349,1200,3.917,1201,3.917,1202,3.917,1203,3.917,1204,3.917,1205,3.917,1206,3.917,1207,3.917,1208,3.917,1209,3.917,1210,3.917,1211,3.917]],["title/entities/Counter.html",[112,1.24,1212,2.408]],["body/entities/Counter.html",[0,0.153,3,0.145,4,0.145,5,0.145,15,0.279,16,0.927,29,0.492,30,0.014,31,1.291,32,1.332,34,1.764,36,1.418,39,0.713,44,1.602,47,0.629,63,1.06,87,0.207,99,0.207,110,0.01,111,0.01,112,1.547,114,2.163,125,3.186,132,3.576,135,3.759,136,1.687,144,3.703,145,1.602,276,2.004,399,3.004,415,3.803,448,4.799,451,3.4,452,5.034,890,4.386,1212,3.803,1213,3.976,1214,6.119,1215,7.025,1216,3.961,1217,4.406,1218,6.402,1219,7.384,1220,6.402,1221,5.057,1222,5.057,1223,5.057,1224,5.057,1225,5.989,1226,5.057,1227,5.577,1228,5.057,1229,4.034,1230,4.628,1231,5.057,1232,5.057]],["title/classes/CreateAnnouncementDto.html",[0,0.122,160,2.555]],["body/classes/CreateAnnouncementDto.html",[0,0.203,2,1.8,3,0.157,4,0.157,5,0.157,8,2.229,15,0.302,16,0.975,17,1.388,29,0.493,30,0.013,32,1.364,39,0.73,47,0.799,87,0.177,89,3.534,90,3.628,93,2.252,99,0.177,110,0.011,111,0.011,117,6.347,118,6.347,119,3.893,120,6.347,138,2.56,160,4.242,1233,6.916,1234,4.31,1235,5.865,1236,5.482,1237,5.865,1238,5.482,1239,5.482,1240,5.482,1241,5.482,1242,5.482,1243,4.591,1244,5.293]],["title/classes/CreateAppointmentDto.html",[0,0.122,475,2.555]],["body/classes/CreateAppointmentDto.html",[0,0.186,2,1.559,3,0.136,4,0.136,5,0.136,15,0.262,16,0.89,17,1.338,20,3.171,23,2.593,24,2.593,29,0.512,30,0.014,31,1.075,32,1.417,39,0.759,47,0.815,87,0.199,89,3.623,90,3.672,93,1.95,99,0.153,110,0.01,111,0.01,138,2.338,276,1.945,424,5.361,426,5.361,427,4.583,428,4.296,429,4.296,430,4.296,431,2.406,447,4.296,475,3.874,536,3.191,1235,4.135,1243,4.974,1245,7.102,1246,3.732,1247,7.653,1248,4.747,1249,4.747,1250,4.747,1251,4.747,1252,4.747,1253,4.747,1254,4.747,1255,4.747,1256,4.747,1257,4.747,1258,4.135,1259,4.747,1260,4.747,1261,3.191,1262,6.148,1263,4.135]],["title/classes/CreateDocumentApplicationDto.html",[0,0.122,1264,2.726]],["body/classes/CreateDocumentApplicationDto.html",[0,0.186,2,1.567,3,0.137,4,0.137,5,0.137,8,2.289,15,0.263,16,0.893,17,1.382,23,1.815,24,1.815,29,0.484,30,0.014,32,1.264,37,3.38,39,0.677,47,0.711,87,0.221,89,3.18,90,3.18,93,1.962,95,1.685,99,0.154,110,0.01,111,0.01,266,2.26,276,1.76,342,3.297,380,3.81,383,4.445,389,4.596,416,4.387,417,3.008,448,3.008,569,4.554,913,3,1261,3.209,1264,4.148,1265,6.519,1266,3.754,1267,5.956,1268,5.713,1269,5.956,1270,4.942,1271,6.171,1272,6.171,1273,4.852,1274,4.852,1275,5.375,1276,4.774,1277,4.159,1278,4.774,1279,4.774,1280,5.375,1281,6.171,1282,6.171,1283,4.148,1284,4.774,1285,4.774,1286,6.171,1287,6.171,1288,4.774,1289,6.171,1290,3.451,1291,3.81,1292,4.774,1293,4.774,1294,4.774,1295,4.774,1296,4.774,1297,4.774,1298,4.774,1299,5.375,1300,4.774,1301,4.774]],["title/classes/CreateQueueDto.html",[0,0.122,1302,2.931]],["body/classes/CreateQueueDto.html",[0,0.19,2,1.621,3,0.142,4,0.142,5,0.142,15,0.272,16,0.913,17,1.416,20,3.231,23,2.641,24,2.641,29,0.508,30,0.014,31,1.102,32,1.405,39,0.753,47,0.818,87,0.16,89,3.656,90,3.702,93,2.028,99,0.16,110,0.01,111,0.01,138,2.397,427,4.67,428,4.377,429,4.377,430,4.377,431,2.452,1237,6.376,1243,4.765,1244,4.957,1302,4.558,1303,7.056,1304,3.882,1305,5.462,1306,6.051,1307,4.937,1308,4.937,1309,4.937,1310,4.937,1311,4.937,1312,4.937,1313,4.937,1314,4.937,1315,4.937,1316,4.937]],["title/classes/CreateUserDto.html",[0,0.122,820,2.166]],["body/classes/CreateUserDto.html",[0,0.156,2,1.21,3,0.106,4,0.106,5,0.106,7,2.664,8,2.511,12,1.483,15,0.203,16,0.75,17,1.411,18,3.202,19,3.559,20,1.714,21,3.051,22,2.483,23,2.278,24,2.278,25,3.051,26,3.051,27,2.706,28,2.706,29,0.499,30,0.014,31,1.242,32,1.356,34,1.428,35,1.854,36,1.046,37,3.318,39,0.727,41,2.519,42,3.745,43,2.914,44,1.168,47,0.797,57,3.483,62,2.769,63,1.08,66,2.914,69,3.483,72,3.483,73,3.745,74,4.775,75,2.664,80,3.745,81,3.483,82,4.331,87,0.167,88,3.745,89,3.465,90,3.522,91,4.331,92,4.074,93,1.514,94,4.693,95,1.301,99,0.119,103,4.096,105,4.37,108,2.664,110,0.008,111,0.008,136,1.244,333,3.078,656,4.711,820,2.769,1029,2.914,1079,3.265,1243,4.096,1291,3.487,1317,6.82,1318,5.737,1319,4.514,1320,3.685,1321,3.685,1322,3.483,1323,3.685,1324,3.685,1325,4.096,1326,4.514,1327,3.685,1328,3.685,1329,5.181,1330,3.685,1331,3.211,1332,5.663,1333,3.685,1334,3.211,1335,4.074,1336,4.514,1337,3.685,1338,3.211,1339,5.181,1340,3.685,1341,3.211,1342,4.514,1343,3.685,1344,3.685,1345,3.685,1346,4.514,1347,3.685,1348,4.514,1349,3.685,1350,3.211,1351,3.685,1352,3.211]],["title/entities/DocumentApplication.html",[112,1.24,390,2.555]],["body/entities/DocumentApplication.html",[0,0.108,3,0.145,4,0.102,5,0.169,12,1.358,15,0.279,16,0.733,29,0.512,30,0.014,31,1.12,32,1.372,34,1.394,36,1.187,39,0.735,44,1.129,47,0.691,63,1.06,87,0.207,99,0.19,110,0.008,111,0.008,112,1.09,114,1.524,116,2.516,121,3.954,122,2.53,123,2.845,125,3.188,127,4.252,128,3.188,130,3.978,135,3.878,136,1.85,142,3.657,144,3.59,145,1.129,266,2.345,276,1.827,379,4.305,380,4.024,383,2.004,389,3.954,390,3.188,391,2.245,395,4.629,399,4.017,400,3.978,402,2.395,412,4.407,414,3.188,415,3.005,416,2.004,421,1.904,431,2.076,448,4.8,451,2.395,456,2.004,457,2.703,1267,5.124,1268,5.338,1269,5.124,1273,2.802,1274,4.625,1280,4.407,1353,5.713,1354,2.802,1355,4.625,1356,5.883,1357,5.883,1358,5.059,1359,3.563,1360,5.059,1361,3.563,1362,3.978,1363,3.563,1364,4.305,1365,4.407,1366,5.059,1367,3.563,1368,5.059,1369,5.059,1370,3.563,1371,3.563,1372,3.563,1373,5.059,1374,3.563,1375,4.889,1376,3.563,1377,5.059,1378,5.059,1379,5.059,1380,3.563,1381,3.563,1382,3.104,1383,4.407,1384,3.563,1385,5.035,1386,3.563,1387,3.563,1388,5.059,1389,5.124,1390,3.104,1391,3.104,1392,3.104,1393,3.104,1394,4.407,1395,3.104,1396,2.576,1397,3.104,1398,3.104,1399,3.104,1400,3.104,1401,3.104,1402,4.407,1403,3.657,1404,3.978,1405,4.407,1406,3.104,1407,2.395,1408,2.576,1409,3.104,1410,3.104,1411,3.104,1412,3.563,1413,3.563,1414,3.563,1415,3.563,1416,3.563,1417,3.563]],["title/controllers/DocumentApplicationsController.html",[147,1.485,1418,2.931]],["body/controllers/DocumentApplicationsController.html",[0,0.066,3,0.063,4,0.063,5,0.193,8,2.053,10,3.055,11,2.237,12,1.535,15,0.12,17,1.174,29,0.441,30,0.014,32,1.22,36,1.531,39,0.654,44,2.011,47,0.784,63,0.934,87,0.226,95,0.771,99,0.071,110,0.006,111,0.006,136,0.524,147,0.8,149,0.83,151,1.228,153,1.068,154,2.333,155,2.222,156,1.778,158,1.698,161,2.075,163,2.127,164,2.135,166,1.016,167,1.376,173,1.167,175,1.167,176,1.579,178,1.297,180,1.579,182,3.143,183,1.579,184,1.228,185,2.751,187,1.376,188,0.368,191,1.112,193,1.112,196,1.062,198,1.644,203,1.579,205,3.943,207,1.717,234,2.643,235,0.771,241,1.435,250,0.8,251,1.742,253,1.638,259,0.743,260,1.526,262,2.133,266,0.8,276,1.915,309,5.124,333,1.297,342,1.167,380,3.609,383,4.34,389,1.468,416,3.681,417,1.376,431,2.536,472,2.963,473,2.935,476,3.699,477,1.902,479,2.348,480,1.778,481,2.777,483,2.932,485,3.606,504,4.072,517,1.902,519,1.297,522,1.376,523,1.867,529,1.167,530,1.579,531,1.376,532,1.112,533,1.579,534,0.743,535,1.579,537,1.902,538,1.717,539,1.468,540,4.765,541,3.911,542,1.468,545,1.376,546,1.579,547,1.167,549,4.692,552,5.277,555,3.432,556,2.751,564,2.525,569,1.376,588,5.322,594,1.717,711,1.579,768,3.606,772,1.867,782,3.606,791,1.579,793,2.201,799,3.353,800,2.746,855,1.376,913,1.062,921,1.717,969,3.043,1005,2.746,1006,1.717,1021,1.468,1111,2.348,1114,1.717,1264,3.353,1290,1.579,1355,5.277,1375,2.525,1418,2.525,1419,1.902,1420,5.322,1421,4.365,1422,4.988,1423,4.365,1424,4.365,1425,4.365,1426,2.184,1427,2.184,1428,2.184,1429,3.493,1430,2.184,1431,2.184,1432,2.184,1433,2.184,1434,2.184,1435,2.184,1436,2.184,1437,5.818,1438,2.962,1439,1.902,1440,2.184,1441,2.184,1442,4.365,1443,2.184,1444,2.184,1445,2.184,1446,3.493,1447,2.525,1448,2.184,1449,2.184,1450,2.184,1451,2.184,1452,3.493,1453,3.922,1454,2.184,1455,4.365,1456,2.184,1457,3.493,1458,2.184,1459,2.184,1460,2.184,1461,4.988,1462,3.606,1463,2.184,1464,4.365,1465,2.184,1466,2.184,1467,2.184,1468,3.432,1469,5.068,1470,2.184,1471,2.184,1472,3.043,1473,2.184,1474,3.493,1475,3.493,1476,1.717,1477,1.579,1478,2.184,1479,1.902,1480,1.902,1481,3.156,1482,1.902,1483,3.043,1484,2.184,1485,2.184,1486,2.184,1487,2.184,1488,2.184,1489,2.184,1490,2.184,1491,1.902,1492,1.112,1493,3.493,1494,2.184,1495,2.184,1496,3.493,1497,2.184,1498,2.184,1499,2.184,1500,2.184,1501,2.184,1502,2.184,1503,2.184,1504,2.184,1505,2.184,1506,4.365,1507,1.579,1508,2.184,1509,2.184,1510,2.184,1511,2.184,1512,6.346,1513,2.184,1514,2.184,1515,2.184,1516,2.184,1517,2.184,1518,2.184,1519,2.184,1520,2.184,1521,2.184,1522,2.184,1523,2.184,1524,2.184,1525,2.184,1526,2.184,1527,2.184,1528,2.184,1529,1.297,1530,2.184,1531,2.184,1532,2.184,1533,2.184]],["title/modules/DocumentApplicationsModule.html",[209,1.331,287,2.726]],["body/modules/DocumentApplicationsModule.html",[0,0.16,3,0.153,4,0.153,5,0.153,30,0.014,87,0.261,99,0.172,110,0.011,111,0.011,149,2.512,188,0.896,209,2.359,211,2.584,212,2.584,213,2.84,214,2.84,215,2.584,216,3.84,217,3.84,221,3.529,222,2.273,223,2.706,225,2.99,226,1.876,229,2.99,276,1.516,287,5.509,309,3.842,379,4.44,380,2.706,390,4.162,416,3.715,417,3.349,1290,4.775,1364,4.44,1390,4.631,1391,4.631,1418,5.195,1481,5.984,1482,4.631,1534,4.631,1535,4.631,1536,4.631,1537,4.917,1538,5.316,1539,5.316,1540,5.316,1541,5.316,1542,5.316]],["title/entities/DocumentFile.html",[112,1.24,1364,2.726]],["body/entities/DocumentFile.html",[0,0.134,3,0.127,4,0.127,5,0.127,15,0.324,16,0.852,29,0.506,30,0.014,31,1.228,32,1.377,36,1.331,39,0.738,47,0.782,63,1.083,87,0.19,99,0.143,110,0.009,111,0.009,112,1.357,114,1.898,122,2.324,123,3.308,127,5.749,128,3.706,132,3.359,134,5.124,135,2.994,136,1.412,140,5.124,144,3.726,145,1.406,380,4.049,383,3.711,384,5.187,390,4.426,391,2.796,392,4.624,394,4.624,395,3.207,397,6.12,399,4.462,400,4.624,402,2.983,414,3.706,415,3.494,416,2.495,417,2.796,419,3.865,421,2.371,1353,5.749,1364,3.954,1469,5.747,1491,5.747,1543,3.865,1544,6.598,1545,6.598,1546,6.598,1547,6.598,1548,5.882,1549,3.865,1550,4.437,1551,4.437,1552,5.882,1553,5.882,1554,4.437,1555,5.882,1556,4.437,1557,5.882,1558,5.882,1559,4.437,1560,5.882,1561,4.437,1562,4.437,1563,5.882,1564,4.437,1565,5.882,1566,4.437,1567,4.437,1568,4.437]],["title/injectables/EmailService.html",[231,0.818,291,2.166]],["body/injectables/EmailService.html",[0,0.115,3,0.109,4,0.109,5,0.109,11,2.229,12,0.713,15,0.209,16,0.766,17,1.064,20,1.765,22,2.553,27,2.405,29,0.416,30,0.014,34,1.046,36,0.766,39,0.617,47,0.808,63,0.847,87,0.197,99,0.123,110,0.008,111,0.008,136,0.911,153,1.618,163,1.929,164,1.618,172,1.845,174,3.823,188,0.64,195,1.691,198,1.227,222,2.603,231,1.067,232,1.559,234,2.354,235,1.339,250,2.229,251,1.843,253,1.736,276,2.245,291,2.826,295,3.831,296,1.932,311,3.93,321,2.984,323,2.551,333,3.141,383,4.137,384,5.443,457,2.028,483,2.262,547,2.028,569,2.391,583,1.765,676,2.692,754,4.607,772,3.253,869,2.743,870,4.362,881,4.158,882,5.244,883,6.133,884,5.244,885,5.244,908,4.092,928,2.743,1268,4.759,1283,3.555,1403,2.743,1404,2.984,1407,2.551,1408,2.743,1507,2.743,1569,3.306,1570,6.087,1571,5.288,1572,2.984,1573,5.288,1574,5.288,1575,3.795,1576,5.288,1577,3.795,1578,5.288,1579,4.607,1580,3.795,1581,3.795,1582,3.795,1583,3.795,1584,5.288,1585,3.795,1586,3.795,1587,3.795,1588,3.795,1589,3.795,1590,6.923,1591,6.923,1592,6.031,1593,3.795,1594,5.288,1595,4.158,1596,5.288,1597,3.795,1598,6.584,1599,6.584,1600,6.584,1601,3.795,1602,3.795,1603,3.795,1604,3.795,1605,3.795,1606,5.288,1607,5.288,1608,3.795,1609,3.795,1610,5.288,1611,3.795,1612,3.795,1613,3.795,1614,3.795,1615,3.795,1616,3.306,1617,2.984]],["title/interfaces/FindAllOptions.html",[851,1.38,1618,2.726]],["body/interfaces/FindAllOptions.html",[0,0.071,1,1.8,3,0.067,4,0.067,5,0.067,10,1.048,11,1.904,12,1.435,14,1.8,15,0.13,16,0.536,17,0.989,18,3.21,19,3.568,21,2.879,22,2.381,23,2.477,24,2.39,25,3.493,26,3.412,27,2.373,28,2.811,29,0.328,30,0.014,31,1.278,34,0.648,35,2.029,36,1.491,43,2.083,44,2.064,47,0.659,63,0.836,66,1.322,87,0.217,98,2.333,99,0.12,109,0.966,110,0.006,111,0.006,116,1.005,119,2.448,136,0.564,138,0.894,145,0.745,154,1.005,158,2.227,166,1.093,173,3.481,175,1.256,188,0.396,191,1.197,198,1.623,209,0.772,226,0.83,231,0.747,234,2.2,235,0.83,237,1.8,241,2.583,247,1.396,248,1.197,250,1.356,251,2.14,253,2.521,256,1.481,257,1.58,259,2.281,260,2.05,262,2.223,263,2.333,268,1.58,421,3.022,472,1.396,519,1.396,523,1.256,534,2.421,547,1.256,583,2.131,641,1.322,647,1.048,655,2.083,676,1.885,680,1.048,681,2.131,701,1.396,735,1.979,736,1.197,739,2.879,820,2.448,845,2.199,851,1.26,857,3.536,866,3.181,913,1.143,964,2.333,966,1.58,987,1.699,988,2.333,989,1.699,990,1.58,991,4.612,1018,2.677,1021,2.489,1025,2.489,1026,4.038,1027,2.677,1029,1.322,1030,1.699,1032,2.677,1033,2.677,1035,2.677,1036,2.677,1046,2.677,1047,1.699,1048,1.58,1051,1.699,1069,1.481,1070,2.489,1075,2.677,1077,1.322,1079,2.887,1084,1.699,1088,2.677,1090,1.699,1092,2.677,1094,1.699,1096,2.677,1165,1.699,1186,1.322,1322,1.58,1438,2.333,1492,1.885,1529,1.396,1618,3.08,1619,1.699,1620,3.961,1621,4.851,1622,1.699,1623,1.699,1624,1.58,1625,3.495,1626,3.495,1627,3.08,1628,3.08,1629,3.08,1630,3.088,1631,3.08,1632,2.911,1633,1.322,1634,1.848,1635,1.848,1636,1.848,1637,1.848,1638,3.602,1639,2.911,1640,1.848,1641,1.848,1642,2.911,1643,2.489,1644,1.848,1645,1.848,1646,1.848,1647,1.848,1648,1.848,1649,1.848,1650,2.911,1651,1.848,1652,2.911,1653,1.699,1654,1.848,1655,4.087,1656,1.848,1657,2.911,1658,4.087,1659,2.911,1660,1.848,1661,1.848,1662,1.848,1663,1.848,1664,1.848,1665,1.848,1666,1.848,1667,1.848,1668,1.848,1669,2.911,1670,3.602,1671,1.848,1672,2.911,1673,1.848,1674,1.848,1675,2.911,1676,1.699,1677,1.848,1678,1.848,1679,1.848,1680,1.848,1681,2.911,1682,1.848,1683,1.848,1684,2.911,1685,1.848,1686,1.848,1687,1.848,1688,1.848,1689,1.848,1690,1.848,1691,1.848,1692,1.848,1693,1.848,1694,1.848,1695,1.848,1696,2.911,1697,1.848,1698,1.848,1699,1.848,1700,1.848,1701,1.699,1702,1.848,1703,1.848]],["title/injectables/JwtAuthGuard.html",[231,0.818,529,2.166]],["body/injectables/JwtAuthGuard.html",[0,0.19,3,0.181,4,0.181,5,0.181,13,3.261,30,0.013,87,0.236,99,0.204,110,0.012,111,0.012,188,1.062,231,1.476,232,2.589,529,3.91,943,3.971,1704,5.49,1705,5.49,1706,7.317,1707,6.302]],["title/interfaces/JwtPayload.html",[851,1.38,1192,2.726]],["body/interfaces/JwtPayload.html",[0,0.15,3,0.143,4,0.143,5,0.143,13,2.214,15,0.274,16,0.916,17,1.107,22,2.679,29,0.44,30,0.014,31,1.283,35,1.417,36,1.277,39,0.465,41,2.415,44,1.574,47,0.774,63,0.691,87,0.237,99,0.205,110,0.01,111,0.01,188,0.837,195,2.214,198,1.152,231,1.277,251,1.953,259,2.154,260,1.936,266,1.819,295,3.722,296,2.529,334,3.59,431,2.234,476,2.944,534,2.679,839,3.129,851,2.154,895,3.129,938,2.95,943,3.129,948,3.988,951,3.59,1019,5.035,1020,5.302,1022,3.59,1065,3.339,1186,2.793,1187,3.59,1188,3.905,1189,3.905,1190,4.976,1191,3.59,1192,4.683,1193,3.905,1194,3.905,1195,3.59,1196,3.905,1197,4.683,1198,3.905,1199,3.339,1200,3.905,1201,3.905,1202,3.905,1203,3.905,1204,3.905,1205,3.905,1206,3.905,1207,3.905,1208,3.905,1209,3.905,1210,3.905,1211,3.905]],["title/injectables/JwtStrategy.html",[231,0.818,938,2.408]],["body/injectables/JwtStrategy.html",[0,0.148,3,0.141,4,0.141,5,0.141,13,2.802,15,0.271,17,1.099,22,2.487,29,0.397,30,0.014,31,1.099,35,1.402,36,1.269,39,0.649,41,2.39,44,1.557,47,0.682,63,0.965,87,0.236,99,0.203,110,0.01,111,0.01,153,1.923,163,1.992,164,1.503,188,0.829,195,2.191,198,1.14,231,1.269,232,2.019,235,1.735,251,1.945,259,2.14,260,1.923,266,1.8,295,4.127,296,2.502,334,3.553,431,2.219,476,3.224,534,2.487,839,3.097,851,2.14,895,3.097,909,4.545,938,3.734,943,3.097,948,3.961,951,3.553,1019,5.282,1020,3.553,1022,3.553,1065,3.304,1187,3.553,1188,3.865,1189,3.865,1190,4.943,1191,3.553,1192,4.912,1193,3.865,1194,3.865,1195,3.553,1196,4.943,1197,4.66,1198,3.865,1199,3.304,1200,3.865,1201,3.865,1202,3.865,1203,3.865,1204,3.865,1205,4.943,1206,3.865,1207,3.865,1208,3.865,1209,3.865,1210,3.865,1211,3.865,1572,3.865,1708,4.915,1709,4.915]],["title/classes/LoginDto.html",[0,0.122,805,2.555]],["body/classes/LoginDto.html",[0,0.222,2,1.839,3,0.161,4,0.161,5,0.161,8,2.25,9,4.298,12,1.439,15,0.309,16,0.988,22,2.322,27,3.1,28,2.695,29,0.431,30,0.014,32,1.193,37,3.274,39,0.639,47,0.753,81,3.766,87,0.22,90,3.173,93,2.302,95,1.977,99,0.181,100,4.049,110,0.011,111,0.011,751,5.146,805,4.635,1243,4.635,1270,4.931,1291,3.745,1710,4.88,1711,7.356,1712,5.602,1713,5.602,1714,5.943,1715,5.602,1716,5.602]],["title/injectables/MinioService.html",[231,0.818,1537,2.408]],["body/injectables/MinioService.html",[0,0.132,3,0.126,4,0.126,5,0.188,15,0.241,16,0.843,17,1.145,29,0.473,30,0.014,34,1.205,39,0.715,47,0.786,63,0.972,87,0.188,99,0.141,110,0.009,111,0.009,136,1.05,153,1.782,163,2.075,164,2.003,172,2.126,188,0.737,196,3.184,198,1.351,231,1.175,232,1.797,234,2.578,235,2.312,241,3.074,250,2.876,253,2.15,259,2.229,260,2.003,323,2.94,338,4.401,647,2.919,680,2.919,681,3.653,882,2.94,884,2.94,885,2.94,900,4.735,1197,2.94,1453,3.438,1468,5.15,1529,2.597,1537,3.46,1717,3.809,1718,5.706,1719,5.706,1720,5.074,1721,5.825,1722,5.706,1723,5.825,1724,5.074,1725,4.373,1726,6.967,1727,5.825,1728,4.373,1729,3.809,1730,4.373,1731,5.074,1732,4.373,1733,5.706,1734,4.373,1735,4.58,1736,3.809,1737,3.438,1738,4.373,1739,3.438,1740,4.373,1741,3.809,1742,3.809,1743,4.373,1744,3.809,1745,4.373,1746,3.809,1747,4.373,1748,3.809,1749,5.706,1750,4.373,1751,3.809,1752,3.809,1753,3.809,1754,3.438,1755,3.809,1756,3.809,1757,3.809,1758,5.074,1759,3.809,1760,4.373,1761,3.809,1762,3.809,1763,4.373,1764,3.809,1765,4.373]],["title/injectables/MinioService-1.html",[109,1.391,231,0.683,1537,2.011]],["body/injectables/MinioService-1.html",[0,0.099,3,0.137,4,0.094,5,0.202,15,0.18,16,0.689,17,1.194,29,0.465,30,0.014,31,0.981,34,1.311,39,0.709,47,0.781,63,0.981,87,0.181,99,0.106,109,1.955,110,0.008,111,0.008,122,1.293,136,1.143,151,2.677,153,1.456,163,2.163,164,2.155,172,2.314,188,0.552,195,1.459,196,2.726,198,1.428,231,0.96,232,1.344,234,2.653,235,1.155,241,3.146,250,2.695,251,1.99,253,2.313,259,2.226,260,2.001,266,1.198,295,3.648,296,1.666,323,3.77,338,3.88,380,3.899,480,1.666,481,2.855,647,2.916,680,2.916,681,3.651,687,2.851,711,2.365,739,1.666,866,3.463,882,2.2,884,2.2,885,2.2,1005,3.742,1197,3.77,1355,2.573,1453,2.573,1468,4.41,1472,2.851,1529,1.944,1537,2.827,1572,2.573,1718,4.886,1719,4.886,1720,4.146,1722,4.886,1724,4.146,1726,6.79,1729,2.851,1731,4.146,1733,4.886,1735,3.742,1736,2.851,1737,4.842,1739,2.573,1741,2.851,1742,4.886,1744,4.886,1746,2.851,1748,2.851,1749,5.947,1751,2.851,1752,2.851,1753,2.851,1754,2.573,1755,2.851,1756,2.851,1757,2.851,1758,4.146,1759,2.851,1761,2.851,1762,4.146,1764,2.851,1766,2.851,1767,6.158,1768,4.759,1769,5.608,1770,4.759,1771,6.827,1772,4.759,1773,3.272,1774,3.272,1775,4.759,1776,3.272,1777,3.272,1778,5.364,1779,3.272,1780,4.759,1781,3.272,1782,3.272,1783,3.272,1784,3.272,1785,3.272,1786,2.365,1787,6.158,1788,3.272,1789,3.272,1790,3.272,1791,3.272,1792,3.272,1793,3.272,1794,3.272,1795,3.272,1796,3.272,1797,3.272,1798,3.272,1799,2.851,1800,3.272,1801,3.272,1802,3.272,1803,3.272,1804,3.272,1805,4.759,1806,5.699,1807,3.272,1808,3.272,1809,4.146,1810,3.272,1811,3.272,1812,3.272,1813,3.272,1814,3.272,1815,3.272,1816,3.272,1817,3.272,1818,4.759,1819,3.272,1820,3.272,1821,3.272,1822,3.272,1823,3.272,1824,3.272,1825,3.272,1826,3.272]],["title/entities/OTP.html",[112,1.24,311,2.064]],["body/entities/OTP.html",[0,0.16,3,0.152,4,0.152,5,0.152,15,0.292,16,0.954,22,2.442,29,0.51,30,0.014,31,1.153,32,1.396,34,1.46,36,1.448,39,0.748,47,0.774,87,0.171,99,0.171,110,0.011,111,0.011,112,1.621,114,2.266,116,3.069,122,2.966,123,4.036,125,3.339,132,3.653,138,2.507,144,3.956,145,1.679,266,2.414,311,3.932,440,4.616,870,3.339,908,4.824,919,5.187,928,3.83,1827,4.616,1828,6.251,1829,5.299,1830,5.299,1831,5.743,1832,5.299,1833,5.299,1834,5.299,1835,5.299,1836,5.299,1837,5.299,1838,5.299]],["title/injectables/OTPService.html",[231,0.818,292,2.28]],["body/injectables/OTPService.html",[0,0.122,3,0.116,4,0.116,5,0.116,15,0.223,17,1.101,22,2.547,29,0.398,30,0.014,34,1.734,39,0.634,47,0.796,63,0.876,87,0.246,99,0.131,110,0.009,111,0.009,122,2.487,136,1.511,145,1.751,153,1.69,163,1.994,164,1.925,172,2.686,174,3.994,188,0.682,198,1.643,226,1.427,231,1.115,232,1.661,234,2.537,235,1.95,237,3.289,241,3.004,248,2.059,250,2.305,251,1.946,253,2.4,260,1.925,266,2.594,291,3.999,292,3.107,295,3.999,296,2.059,311,4.017,312,3.179,327,2.718,358,3.179,363,2.718,583,1.881,656,3.179,701,2.402,756,4.813,870,4.262,876,3.179,878,2.718,908,5.305,919,5.119,950,4.813,1069,2.548,1595,3.179,1778,3.523,1828,5.483,1839,3.523,1840,6.765,1841,5.525,1842,4.044,1843,4.044,1844,5.525,1845,4.044,1846,5.525,1847,4.044,1848,5.525,1849,4.044,1850,3.523,1851,4.813,1852,4.044,1853,4.044,1854,4.044,1855,4.044,1856,4.044,1857,4.344,1858,4.044,1859,5.525,1860,4.044,1861,4.044,1862,4.044,1863,3.523,1864,4.044,1865,4.044,1866,4.044,1867,4.044,1868,3.523,1869,5.525,1870,4.044,1871,4.044,1872,3.523,1873,6.294,1874,4.044,1875,5.525,1876,4.044,1877,3.523,1878,4.044,1879,4.044,1880,4.044,1881,4.044,1882,4.044,1883,4.044]],["title/classes/PaginatedUsersResponseDto.html",[0,0.122,1884,3.188]],["body/classes/PaginatedUsersResponseDto.html",[0,0.151,2,1.645,3,0.144,4,0.144,5,0.144,8,2.484,12,0.942,15,0.276,16,0.922,29,0.49,30,0.014,31,1.458,32,1.328,37,3.147,39,0.711,41,3.094,44,1.588,87,0.206,95,1.769,99,0.162,109,2.615,110,0.01,111,0.01,128,4.011,173,3.738,735,4.214,856,4.601,1291,3.952,1325,4.637,1438,4.201,1447,4.601,1492,3.747,1620,4.969,1653,5.056,1884,5.005,1885,6.763,1886,3.369,1887,5.012,1888,5.005,1889,5.012,1890,4.366,1891,6.365,1892,5.012,1893,4.371,1894,4.366,1895,4.366,1896,3.623]],["title/entities/Queue.html",[112,1.24,1216,2.064]],["body/entities/Queue.html",[0,0.135,3,0.129,4,0.129,5,0.129,15,0.247,16,0.858,29,0.503,30,0.014,31,1.234,32,1.38,34,1.632,36,1.338,39,0.739,44,1.421,47,0.694,63,1.021,87,0.214,99,0.191,110,0.009,111,0.009,112,1.372,114,1.918,116,2.837,122,2.787,123,3.331,125,2.826,132,3.377,135,3.971,136,1.913,144,3.663,145,1.421,276,1.892,399,4.191,402,3.015,448,4.622,457,3.165,459,3.518,460,3.732,462,4.282,1212,4.688,1216,3.377,1217,3.907,1227,5.16,1283,4.931,1362,4.657,1365,3.907,1389,5.16,1897,3.526,1898,4.794,1899,5.215,1900,5.215,1901,5.215,1902,5.923,1903,4.485,1904,5.16,1905,4.485,1906,5.923,1907,4.485,1908,4.485,1909,4.191,1910,5.923,1911,4.485,1912,5.923,1913,4.485,1914,4.485,1915,5.923,1916,4.485,1917,4.622,1918,4.485,1919,3.526,1920,3.526,1921,3.982,1922,4.485,1923,3.526]],["title/entities/QueueDetails.html",[112,1.24,1909,2.408]],["body/entities/QueueDetails.html",[0,0.122,3,0.116,4,0.116,5,0.116,12,1.408,15,0.223,16,0.801,20,2.931,23,2.396,24,2.396,29,0.506,30,0.014,31,1.279,32,1.401,34,1.525,36,1.272,39,0.75,47,0.792,63,1.099,87,0.204,99,0.131,110,0.009,111,0.009,112,1.24,114,1.734,132,3.208,135,3.936,136,1.856,138,2.104,144,3.838,145,1.284,266,2.027,362,3.72,391,3.487,394,5.324,395,2.93,399,4.592,414,3.971,415,3.743,427,4.236,428,3.971,429,3.971,430,3.971,431,2.224,443,3.187,451,2.725,452,5.324,456,2.28,890,3.287,1216,3.936,1305,4.955,1385,5.324,1549,3.531,1909,3.287,1924,7.02,1925,3.531,1926,4.555,1927,4.053,1928,5.534,1929,4.053,1930,4.821,1931,4.053,1932,4.053,1933,5.534,1934,4.053,1935,4.821,1936,4.053,1937,5.534,1938,4.053,1939,5.534,1940,4.053,1941,4.821,1942,6.772,1943,5.534,1944,4.053,1945,4.053,1946,5.534,1947,4.053,1948,5.534,1949,4.053,1950,4.053,1951,4.053,1952,4.053]],["title/classes/QueueGateway.html",[0,0.122,1953,2.408]],["body/classes/QueueGateway.html",[0,0.108,2,1.175,3,0.103,4,0.103,5,0.103,11,1.858,15,0.197,16,0.735,17,1.315,29,0.487,30,0.014,31,1.392,32,1.185,34,0.986,39,0.722,63,1.047,87,0.219,99,0.116,110,0.008,111,0.008,136,1.218,153,1.804,161,2.126,163,2.383,164,2.261,172,1.74,188,0.603,196,3.293,198,1.488,234,2.557,235,1.791,250,2.481,251,1.351,253,2.224,260,1.552,295,3.866,296,1.822,318,2.587,338,4.043,342,4.018,481,1.822,483,2.744,858,2.814,878,2.406,889,2.406,912,2.587,1111,2.406,1138,4.636,1212,2.126,1216,3.002,1754,2.814,1786,3.668,1799,3.117,1926,5.23,1953,3.014,1954,3.117,1955,5.896,1956,5.896,1957,6.129,1958,5.075,1959,5.075,1960,5.075,1961,5.075,1962,5.075,1963,5.075,1964,5.075,1965,5.075,1966,3.578,1967,4.298,1968,5.075,1969,5.075,1970,3.578,1971,5.896,1972,5.075,1973,8.108,1974,3.578,1975,7.235,1976,7.393,1977,5.075,1978,3.578,1979,5.075,1980,5.075,1981,3.578,1982,5.075,1983,5.589,1984,5.075,1985,3.578,1986,5.075,1987,5.075,1988,3.578,1989,5.075,1990,5.075,1991,3.578,1992,5.075,1993,3.578,1994,5.075,1995,3.578,1996,5.075,1997,3.578,1998,3.117,1999,4.421,2000,2.814,2001,2.814,2002,3.578,2003,5.075,2004,3.578,2005,3.578,2006,3.578,2007,3.578,2008,3.578,2009,3.578,2010,3.578,2011,3.117,2012,5.075,2013,3.578,2014,5.896,2015,3.578,2016,3.578,2017,3.578,2018,3.578,2019,5.075,2020,3.578,2021,4.421,2022,3.578,2023,3.578,2024,3.578,2025,5.896,2026,3.578,2027,3.578,2028,2.814,2029,3.578,2030,3.578,2031,3.578,2032,5.075,2033,3.578,2034,3.578]],["title/modules/QueueModule.html",[209,1.331,288,2.726]],["body/modules/QueueModule.html",[0,0.154,3,0.147,4,0.147,5,0.147,30,0.014,87,0.265,99,0.165,110,0.01,111,0.01,149,2.451,188,0.862,209,2.318,211,2.485,212,2.485,213,2.731,214,2.731,215,2.485,216,3.772,217,3.772,221,3.444,222,2.186,223,2.602,225,2.875,226,1.804,229,2.875,288,5.509,297,4.453,298,3.695,333,3.036,373,4.453,1212,3.828,1216,3.281,1476,4.019,1477,3.695,1909,3.828,1919,4.019,1920,4.019,1953,4.76,1967,4.892,2000,4.019,2001,5.068,2035,4.453,2036,4.453,2037,4.453,2038,5.537,2039,5.112,2040,6.15,2041,5.103,2042,5.112,2043,5.112,2044,4.019,2045,5.112,2046,3.436,2047,4.453,2048,5.112]],["title/injectables/QueueSchedulerService.html",[231,0.818,2038,2.726]],["body/injectables/QueueSchedulerService.html",[0,0.09,3,0.086,4,0.086,5,0.086,10,1.334,15,0.165,16,0.645,17,0.931,29,0.282,30,0.014,32,0.523,34,1.228,39,0.641,63,0.821,87,0.214,99,0.097,110,0.007,111,0.007,116,2.828,122,2.935,136,0.719,145,0.948,153,1.363,163,1.412,164,1.804,172,2.167,188,0.504,196,2.588,198,1.368,222,3.076,226,1.056,231,0.899,232,1.23,234,2.469,235,1.573,237,2.868,241,1.831,248,1.524,250,2.72,251,2.002,253,2.31,259,1.019,260,2.272,262,1.28,266,1.95,276,1.954,298,2.163,333,1.778,336,2.353,338,3.717,341,2.607,457,3.533,459,3.927,460,4.434,480,1.524,481,1.524,483,1.28,564,3.849,575,2.353,600,6.552,640,3.504,647,1.986,655,4.23,661,4.638,680,1.986,681,3.185,683,1.778,704,2.607,723,2.353,725,2.163,735,3.37,739,1.524,878,2.012,913,1.455,1116,2.607,1135,2.607,1216,3.87,1335,2.353,1507,2.163,1630,1.778,1806,2.607,1831,2.607,1857,2.353,1877,2.607,1898,3.221,1917,1.886,1921,2.996,1923,3.504,1953,4.068,2028,2.353,2038,2.996,2044,2.353,2046,2.012,2049,6.13,2050,2.607,2051,5.324,2052,5.899,2053,5.899,2054,4.456,2055,5.899,2056,2.607,2057,4.456,2058,3.882,2059,2.993,2060,4.456,2061,5.138,2062,6.471,2063,5.324,2064,4.456,2065,2.993,2066,4.456,2067,7.521,2068,2.993,2069,5.324,2070,2.993,2071,4.456,2072,2.993,2073,2.993,2074,2.607,2075,2.607,2076,3.882,2077,2.993,2078,2.993,2079,6.307,2080,2.993,2081,2.993,2082,5.324,2083,2.993,2084,2.993,2085,2.993,2086,2.993,2087,2.993,2088,2.607,2089,3.882,2090,5.899,2091,5.899,2092,5.899,2093,5.138,2094,3.882,2095,2.993,2096,5.755,2097,2.993,2098,2.993,2099,2.993,2100,3.882,2101,6.612,2102,4.456,2103,4.456,2104,4.456,2105,4.456,2106,2.993,2107,4.638,2108,4.456,2109,2.607,2110,2.993,2111,2.993,2112,2.607,2113,2.993,2114,2.993,2115,2.993,2116,2.993,2117,2.993,2118,2.993,2119,2.607,2120,2.993,2121,2.993,2122,2.993,2123,2.993,2124,2.993,2125,2.993,2126,2.993,2127,2.993,2128,2.993,2129,2.993,2130,5.138,2131,2.607,2132,2.993,2133,2.607,2134,2.993,2135,2.993,2136,4.456,2137,2.993,2138,2.993,2139,2.993]],["title/injectables/QueueService.html",[231,0.818,1967,2.408]],["body/injectables/QueueService.html",[0,0.045,3,0.043,4,0.043,5,0.043,9,0.946,11,1.628,12,0.63,15,0.083,17,1.135,20,0.699,23,0.571,24,0.571,29,0.41,30,0.014,31,1.295,36,1.257,39,0.637,42,2.423,44,0.476,47,0.626,62,1.369,63,0.933,87,0.184,96,0.946,99,0.049,109,1.627,110,0.004,111,0.004,116,2.33,122,1.757,138,0.571,145,0.476,153,0.784,154,1.902,155,2.017,156,1.305,158,0.73,163,2.057,164,2.051,166,1.192,178,1.522,187,0.946,188,0.253,191,0.765,193,0.765,198,1.751,222,1.096,226,0.53,231,0.517,232,0.617,234,2.602,235,0.904,237,2.863,241,1.053,247,0.892,248,0.765,250,1.451,251,2.088,253,2.499,256,2.802,259,1.854,260,1.947,262,2.071,263,0.946,276,2.1,318,1.086,327,1.01,333,0.892,342,0.803,362,1.723,363,1.723,365,1.01,421,2.587,427,3.255,428,0.946,429,0.946,430,0.946,431,2.142,457,2.911,459,3.236,460,0.946,472,2.353,480,2.264,481,1.305,483,2.944,574,1.181,575,1.181,583,0.699,598,2.015,640,1.181,641,1.441,647,1.494,655,3.824,661,3.115,664,3.874,667,1.308,676,1.706,680,1.494,681,3.02,682,1.308,683,3.071,697,1.308,701,0.892,720,2.232,722,2.232,723,2.015,724,2.232,725,1.086,735,1.791,736,1.305,739,0.765,763,1.181,764,2.015,864,1.852,865,1.852,866,1.441,889,1.01,890,1.991,891,1.086,913,1.629,995,1.181,996,2.92,1006,1.181,1065,1.01,1069,0.946,1070,1.01,1077,0.845,1078,2.232,1079,0.946,1107,2.423,1111,1.01,1114,2.635,1141,1.308,1164,1.308,1166,2.863,1177,1.308,1184,1.308,1212,3.377,1214,2.232,1216,4.105,1225,2.015,1283,4.948,1302,3.214,1305,1.181,1346,1.308,1352,1.308,1447,1.086,1476,1.181,1477,1.086,1492,0.765,1507,1.852,1595,2.015,1617,1.181,1630,2.641,1643,1.723,1676,1.852,1850,1.308,1857,1.181,1863,1.308,1868,1.308,1872,2.232,1888,1.181,1898,1.852,1900,1.181,1901,3.807,1904,2.92,1909,1.522,1917,3.258,1919,1.181,1920,1.181,1921,2.663,1923,3.496,1926,4.258,1953,3.236,1967,1.522,1983,3.451,2001,1.181,2011,1.308,2021,5.923,2028,2.635,2044,1.181,2046,1.01,2047,1.308,2056,1.308,2058,2.232,2062,3.451,2074,1.308,2076,1.308,2088,1.308,2089,1.308,2093,2.232,2094,1.308,2096,5.58,2100,3.874,2107,1.308,2109,3.451,2112,3.451,2119,3.451,2130,4.746,2131,3.874,2133,1.308,2140,1.308,2141,2.563,2142,2.563,2143,2.563,2144,2.563,2145,2.563,2146,3.352,2147,2.563,2148,3.961,2149,2.563,2150,2.563,2151,2.563,2152,3.352,2153,3.352,2154,1.502,2155,2.563,2156,1.502,2157,2.563,2158,1.502,2159,2.563,2160,1.502,2161,2.563,2162,1.502,2163,1.502,2164,2.563,2165,1.502,2166,2.563,2167,1.502,2168,2.563,2169,1.502,2170,2.563,2171,1.502,2172,1.502,2173,1.502,2174,2.563,2175,1.502,2176,4.447,2177,2.563,2178,1.502,2179,2.563,2180,1.502,2181,1.502,2182,3.938,2183,1.502,2184,1.502,2185,2.563,2186,1.502,2187,1.502,2188,1.308,2189,2.563,2190,2.563,2191,1.502,2192,1.502,2193,1.502,2194,1.502,2195,1.502,2196,1.502,2197,2.563,2198,1.502,2199,2.563,2200,1.502,2201,3.352,2202,1.502,2203,1.502,2204,1.502,2205,1.502,2206,1.502,2207,1.502,2208,1.502,2209,1.502,2210,1.502,2211,1.502,2212,1.852,2213,1.308,2214,1.502,2215,1.502,2216,3.352,2217,2.563,2218,1.502,2219,4.447,2220,1.502,2221,1.502,2222,2.563,2223,1.308,2224,1.308,2225,1.502,2226,1.502,2227,1.502,2228,1.502,2229,1.502,2230,1.502,2231,2.563,2232,1.502,2233,1.502,2234,1.502,2235,1.502,2236,1.502,2237,1.502,2238,1.502,2239,1.502,2240,1.502,2241,2.563,2242,1.502,2243,4.447,2244,1.502,2245,1.502,2246,1.502,2247,1.502,2248,3.961,2249,2.563,2250,2.563,2251,2.563,2252,1.502,2253,1.502,2254,1.502,2255,1.308,2256,3.961,2257,4.504,2258,1.308,2259,2.563,2260,1.308,2261,3.961,2262,1.502,2263,1.502,2264,2.563,2265,1.502,2266,1.502,2267,1.502,2268,1.502,2269,1.502,2270,3.961,2271,4.447,2272,1.502,2273,1.502,2274,1.502,2275,3.352,2276,1.502,2277,1.502,2278,1.502,2279,1.502,2280,3.352,2281,3.352,2282,2.563,2283,1.502,2284,1.502,2285,1.502,2286,2.563,2287,2.563,2288,1.502,2289,1.502,2290,1.502,2291,1.502,2292,1.502,2293,1.502,2294,1.502,2295,1.308,2296,1.502,2297,1.502,2298,1.502,2299,1.502,2300,2.563,2301,2.563,2302,1.308,2303,1.502,2304,1.308,2305,1.502,2306,1.308,2307,1.308,2308,1.502,2309,1.308,2310,1.502,2311,3.961,2312,1.502,2313,2.563,2314,1.502,2315,1.502,2316,1.502,2317,1.502,2318,1.502,2319,1.502,2320,4.447,2321,2.563,2322,3.352,2323,1.502,2324,1.502,2325,1.502,2326,2.563,2327,1.502,2328,2.563,2329,1.502,2330,2.232,2331,1.502,2332,1.502,2333,1.502,2334,1.502,2335,1.502,2336,1.502,2337,1.502,2338,1.502,2339,1.502,2340,1.502,2341,1.502,2342,1.502,2343,3.352,2344,2.563,2345,2.563,2346,1.502,2347,1.502,2348,1.502,2349,1.502,2350,1.502,2351,2.563,2352,1.502,2353,1.502,2354,1.502,2355,1.502,2356,2.563,2357,1.502,2358,1.502,2359,1.502,2360,1.502,2361,1.502,2362,1.308,2363,1.502,2364,1.502,2365,1.308,2366,1.502,2367,1.502,2368,1.502]],["title/controllers/QueuesController.html",[147,1.485,2041,2.931]],["body/controllers/QueuesController.html",[0,0.107,3,0.102,4,0.102,5,0.102,12,1.101,15,0.195,17,0.88,20,2.341,23,2.427,24,2.427,29,0.318,30,0.014,32,1.024,36,1.455,39,0.549,47,0.764,63,0.7,87,0.189,99,0.114,110,0.008,111,0.008,116,2.505,147,1.295,149,1.345,151,1.989,153,1.792,163,1.594,164,1.792,167,3.171,184,1.989,188,0.596,195,1.576,196,1.719,198,1.564,234,2.462,251,2.025,253,1.923,259,2.295,260,1.539,262,1.513,276,1.821,365,3.383,428,3.171,429,3.171,430,4.021,431,2.068,457,2.689,459,2.101,483,2.729,647,2.611,680,2.611,683,3.791,725,2.556,736,2.983,851,1.204,890,4.655,1077,1.989,1111,2.377,1134,6.533,1166,2.556,1216,3.433,1283,4.711,1492,1.801,1737,5.018,1898,4.235,1899,4.606,1900,2.781,1901,4.606,1909,3.791,1917,2.228,1921,3.383,1926,2.556,1941,5.103,1967,3.48,2000,2.781,2041,3.638,2046,2.377,2096,6.05,2223,3.081,2224,3.081,2255,5.103,2257,5.56,2258,5.103,2260,5.103,2295,5.103,2302,5.56,2304,3.081,2306,3.081,2307,3.081,2330,5.103,2362,3.081,2365,4.384,2369,3.081,2370,5.032,2371,5.032,2372,6.382,2373,3.537,2374,3.537,2375,3.537,2376,4.384,2377,3.537,2378,5.032,2379,3.537,2380,3.537,2381,3.537,2382,3.537,2383,3.537,2384,3.537,2385,5.858,2386,3.537,2387,2.781,2388,5.032,2389,5.032,2390,3.537,2391,3.537,2392,3.537,2393,3.537,2394,3.537,2395,3.537,2396,3.537,2397,3.537,2398,3.537,2399,3.537,2400,3.537,2401,3.537,2402,5.858,2403,5.858,2404,5.858,2405,5.858,2406,3.537,2407,5.858,2408,5.858,2409,3.537,2410,5.858,2411,3.537,2412,3.537,2413,5.032,2414,3.537,2415,3.537,2416,3.537,2417,3.537,2418,3.537,2419,3.537,2420,3.537,2421,3.537,2422,3.537,2423,3.537,2424,3.537,2425,3.537]],["title/classes/RegisterDto.html",[0,0.122,814,2.555]],["body/classes/RegisterDto.html",[0,0.187,2,1.285,3,0.112,4,0.112,5,0.112,8,2.4,9,3.405,12,1.487,15,0.216,16,0.782,17,1.402,20,2.514,21,3.151,22,2.573,23,2.353,24,2.353,25,3.151,26,3.151,27,2.766,28,2.766,29,0.491,30,0.014,31,0.945,32,1.358,33,5.505,37,3.514,39,0.727,47,0.808,57,3.633,62,2.888,63,1.109,66,3.039,67,3.078,69,3.633,70,3.078,72,3.633,73,3.906,74,4.16,75,3.906,76,3.078,78,3.906,79,3.899,80,3.906,81,3.633,82,4.474,87,0.175,88,3.906,89,3.257,90,3.613,93,1.609,94,4.562,95,1.382,99,0.127,100,2.83,101,3.078,102,3.078,103,3.899,104,4.866,105,3.633,106,3.078,110,0.009,111,0.009,311,3.686,346,3.633,751,3.633,814,3.899,816,3.906,870,3.899,1029,3.039,1243,4.562,1270,5.061,1291,3.686,1335,4.249,1336,4.708,2426,3.411,2427,3.915,2428,3.915,2429,3.915,2430,3.915,2431,3.915,2432,3.915,2433,3.915,2434,3.915,2435,3.915,2436,3.915,2437,3.915,2438,3.915,2439,3.915,2440,3.915,2441,3.915,2442,3.915,2443,3.915,2444,3.915,2445,3.915]],["title/interfaces/RequestWithUser.html",[758,2.166,851,1.38]],["body/interfaces/RequestWithUser.html",[0,0.067,1,2.154,3,0.064,4,0.064,5,0.064,8,2.329,10,1.585,11,2.343,12,1.44,13,1.585,14,2.996,15,0.123,16,0.851,22,2.635,27,2.67,28,2.18,29,0.484,30,0.014,31,0.965,35,1.015,36,1.186,41,1.729,44,1.404,47,0.749,62,1.194,63,0.311,87,0.227,95,0.788,97,2.241,99,0.072,110,0.006,111,0.006,136,1.324,147,0.818,161,1.327,182,2.792,184,1.256,188,0.377,193,1.137,198,1.568,222,2.513,234,2.101,235,0.788,250,1.623,251,1.755,253,2.305,259,2.486,260,2.18,262,1.521,276,2.125,291,2.368,292,2.492,311,3.823,313,1.615,314,1.615,342,2.368,346,3.396,431,0.788,476,2.35,479,1.502,480,1.137,481,2.992,504,1.327,522,1.407,523,1.194,529,1.194,531,1.407,532,1.811,534,1.508,539,1.502,540,3.95,541,5.048,542,1.502,545,2.792,546,3.203,547,2.368,549,3.708,556,1.407,583,2.35,586,1.756,597,4.62,641,2,644,2.571,647,2.852,651,2.571,676,1.811,680,2.852,681,3.618,683,3.001,736,1.811,739,2.256,746,1.502,747,1.756,748,1.756,751,2.391,755,1.946,758,2.948,759,1.756,761,3.098,762,1.946,763,1.756,764,1.756,768,3.652,770,3.86,771,3.86,772,3.523,773,1.946,775,4.401,776,4.401,778,1.946,779,1.946,780,1.946,782,1.615,784,3.86,785,3.86,789,1.946,791,3.203,794,1.946,798,4.455,799,1.502,805,3.476,807,3.098,808,3.098,814,2.792,816,2.571,820,1.194,822,1.946,824,3.098,826,1.946,828,3.098,836,1.946,838,3.098,839,3.184,840,2.632,841,1.756,842,1.756,843,1.756,844,1.946,845,1.327,846,1.615,847,1.946,848,1.615,849,3.098,850,4.806,851,0.76,852,1.946,853,1.946,854,2.796,855,2.241,856,2.571,857,2,858,3.484,859,1.946,860,1.946,861,1.756,862,1.946,863,1.946,864,3.203,865,3.203,866,3.103,867,1.946,868,1.946,869,2.571,870,3.184,871,1.946,872,4.401,873,3.098,874,4.401,875,1.946,876,3.973,877,1.946,878,2.979,879,3.86,880,1.946,881,1.756,882,1.502,883,1.756,884,1.502,885,1.502,886,1.756,887,1.756,888,1.756,889,3.396,890,3.491,891,3.203,892,3.86,893,3.484,894,5.119,895,3.703,896,1.946,897,1.946,898,1.946,899,3.098,900,2.571,901,1.946,902,1.756,903,1.946,904,1.946,905,1.946,906,1.946,907,1.946,908,3.95,909,1.615,910,1.946,911,3.098,912,3.988,913,2.682,914,3.098,915,1.946,916,2.796,917,1.946,918,3.098,919,1.615,920,1.946,921,1.756,922,1.946,923,1.946,924,1.946,925,1.946,926,1.946,927,1.946,928,2.571,929,1.946,930,1.946,931,3.484,932,1.946,933,1.946,1186,1.256]],["title/interfaces/RequestWithUser-1.html",[109,1.391,758,1.809,851,1.152]],["body/interfaces/RequestWithUser-1.html",[3,0.172,4,0.172,5,0.172,12,1.503,15,0.33,16,1.029,29,0.379,30,0.014,87,0.23,99,0.194,110,0.011,111,0.011,188,1.011,198,1.391,251,1.892,342,3.204,476,3.718,483,2.564,758,3.797,772,3.204,848,4.334,851,2.04,1186,3.372,2446,4.714,2447,6.19,2448,5.136,2449,5.223,2450,5.223,2451,5.223]],["title/interfaces/RequestWithUser-2.html",[108,2.447,758,1.809,851,1.152]],["body/interfaces/RequestWithUser-2.html",[0,0.158,3,0.15,4,0.15,5,0.15,12,1.447,13,2.918,15,0.289,16,0.948,17,1.145,29,0.451,30,0.014,35,2.037,41,3.471,47,0.772,63,0.994,87,0.231,99,0.169,110,0.01,111,0.01,136,1.258,138,1.993,188,0.883,195,2.336,198,1.519,231,1.321,251,1.991,532,2.668,534,1.783,758,3.498,772,3.996,793,4.125,846,3.788,851,2.228,855,3.302,1016,4.12,1077,2.947,1107,3.788,1151,4.12,1186,2.947,1786,3.788,2387,4.12,2448,4.732,2452,4.12,2453,5.703,2454,6.22,2455,4.12,2456,4.732,2457,4.565,2458,4.565,2459,5.703,2460,4.565,2461,4.565,2462,4.565,2463,4.565,2464,4.565,2465,4.565,2466,4.565,2467,4.565,2468,4.565]],["title/entities/Role.html",[35,1.157,112,1.24]],["body/entities/Role.html",[0,0.167,3,0.159,4,0.159,5,0.159,8,2.237,12,1.495,15,0.305,16,0.98,29,0.481,30,0.014,31,1.183,32,1.332,35,1.93,36,1.476,39,0.714,47,0.749,63,1.018,87,0.219,99,0.179,110,0.011,111,0.011,112,1.691,114,2.364,132,3.723,135,3.723,136,1.83,144,3.555,145,1.751,266,2.478,434,4.346,443,4.346,456,3.109,462,3.996,1438,3.723,2469,4.815,2470,5.528,2471,5.528,2472,5.528,2473,5.528,2474,5.894,2475,5.528,2476,5.894,2477,5.528]],["title/controllers/RolesController.html",[147,1.485,2478,2.931]],["body/controllers/RolesController.html",[0,0.159,3,0.152,4,0.152,5,0.152,15,0.291,17,1.15,29,0.416,30,0.014,32,1.253,36,1.328,39,0.671,47,0.774,63,0.916,87,0.249,99,0.171,110,0.011,111,0.011,147,1.934,149,2.008,151,2.971,153,2.012,155,3.818,156,3.349,163,2.084,164,2.192,166,2.457,167,3.328,184,2.971,188,0.89,195,2.354,196,2.568,198,1.662,203,3.818,431,2.322,504,4.673,522,3.328,529,2.822,530,3.818,531,3.328,532,3.349,533,3.818,534,2.239,535,3.818,545,3.328,556,4.515,964,3.648,2376,4.601,2478,4.756,2479,4.601,2480,5.731,2481,5.282,2482,5.282,2483,5.282,2484,5.282,2485,4.601,2486,5.282,2487,5.282,2488,4.601,2489,5.282,2490,5.282,2491,5.282,2492,5.282,2493,5.282]],["title/guards/RolesGuard.html",[532,2.064,2494,3.188]],["body/guards/RolesGuard.html",[0,0.154,3,0.147,4,0.147,5,0.147,12,1.213,13,2.282,15,0.282,17,1.128,29,0.408,30,0.014,35,2.015,39,0.604,41,3.434,47,0.768,63,1.064,87,0.228,99,0.165,110,0.01,111,0.01,136,1.229,138,2.453,153,1.973,163,2.044,164,1.566,188,0.863,195,2.282,198,1.496,231,1.302,235,1.807,251,1.974,532,3.285,534,1.742,758,2.736,772,3.775,846,3.701,851,2.196,855,3.226,1016,4.025,1077,2.879,1107,3.701,1151,4.025,1786,3.701,2387,4.025,2448,5.361,2452,4.025,2453,6.461,2454,6.8,2455,4.025,2456,4.664,2457,4.46,2458,5.62,2459,5.62,2460,4.46,2461,4.46,2462,4.46,2463,4.46,2464,4.46,2465,4.46,2466,4.46,2467,4.46,2468,4.46,2495,5.119,2496,5.119,2497,5.119,2498,5.119,2499,5.119]],["title/modules/RolesModule.html",[209,1.331,289,2.408]],["body/modules/RolesModule.html",[0,0.171,3,0.163,4,0.163,5,0.163,12,1.292,30,0.014,35,1.617,87,0.259,99,0.183,110,0.011,111,0.011,149,2.613,188,0.955,209,2.427,211,2.756,212,2.756,213,3.029,214,3.029,215,2.756,216,3.951,217,3.951,221,3.672,222,2.424,223,2.886,225,3.188,226,2.001,229,3.188,289,4.81,456,3.188,964,4.249,2478,5.345,2488,4.938,2500,4.938,2501,4.938,2502,4.938,2503,5.669,2504,4.938,2505,5.669,2506,5.669]],["title/injectables/RolesService.html",[231,0.818,964,2.064]],["body/injectables/RolesService.html",[0,0.126,3,0.12,4,0.12,5,0.12,12,1.42,15,0.231,17,1.254,19,3.808,29,0.453,30,0.014,31,1.399,35,2.155,36,1.524,39,0.692,43,2.357,47,0.63,63,1.084,87,0.232,99,0.135,110,0.009,111,0.009,145,1.328,153,1.732,155,3.495,156,2.882,163,2.272,164,2.193,166,2.633,188,0.706,198,1.593,226,1.479,231,1.142,232,1.722,234,2.671,235,1.998,237,3.673,241,3.233,247,2.49,248,2.134,250,2.073,251,1.909,253,2.426,259,2.182,260,1.961,262,2.742,365,2.817,421,3.025,431,2.423,456,2.357,534,2.515,964,2.882,966,4.31,990,2.817,991,3.806,1048,2.817,1166,4.092,2474,4.932,2480,4.932,2485,4.932,2504,3.651,2507,3.651,2508,5.662,2509,5.662,2510,4.191,2511,4.191,2512,5.662,2513,5.662,2514,4.191,2515,4.191,2516,5.662,2517,4.191,2518,4.191,2519,4.191,2520,4.191,2521,4.191,2522,5.662,2523,5.662,2524,4.191,2525,4.191,2526,4.191,2527,4.191,2528,4.191,2529,4.191,2530,4.191]],["title/classes/UpdateAnnouncementDto.html",[0,0.122,179,2.726]],["body/classes/UpdateAnnouncementDto.html",[0,0.19,2,2.065,3,0.181,4,0.181,5,0.181,13,3.257,30,0.013,87,0.236,99,0.203,110,0.012,111,0.012,154,2.69,160,3.963,179,4.913,192,4.946,1234,4.946,2531,5.479,2532,7.309,2533,4.946,2534,4.946,2535,4.946]],["title/classes/UpdateAppointmentDto.html",[0,0.122,516,2.726]],["body/classes/UpdateAppointmentDto.html",[0,0.213,2,1.944,3,0.17,4,0.17,5,0.17,13,3.144,15,0.326,16,1.021,17,1.233,29,0.374,30,0.014,32,1.035,39,0.555,87,0.252,89,3.28,93,2.433,99,0.191,110,0.011,111,0.011,154,2.532,276,2.149,447,4.747,475,3.731,516,4.741,528,4.655,536,3.98,1246,4.655,1258,5.158,1261,3.98,1263,5.158,2533,4.655,2534,4.655,2535,4.655,2536,6.144,2537,7.053,2538,5.921]],["title/classes/UpdateDocumentApplicationDto.html",[0,0.122,1462,2.931]],["body/classes/UpdateDocumentApplicationDto.html",[0,0.197,2,1.715,3,0.15,4,0.15,5,0.15,8,2.181,13,2.912,15,0.288,16,0.946,17,1.306,29,0.413,30,0.014,32,1.143,37,3.195,39,0.612,44,1.655,47,0.642,87,0.249,89,3.316,90,3.039,93,2.146,95,1.844,99,0.169,110,0.01,111,0.01,154,2.234,266,2.393,276,2.271,380,3.63,383,4.202,389,4.793,416,4.202,417,3.292,448,3.292,569,4.707,913,3.176,1261,3.512,1264,4.793,1266,4.107,1270,3.776,1275,4.551,1277,4.551,1290,3.776,1291,3.63,1375,5.56,1403,4.723,1407,4.392,1408,4.723,1462,4.723,1483,4.551,2533,5.606,2534,4.107,2535,4.107,2539,6.211,2540,5.224,2541,5.224,2542,5.224,2543,5.224,2544,5.224]],["title/classes/UpdateQueueDto.html",[0,0.122,2182,2.931]],["body/classes/UpdateQueueDto.html",[0,0.212,2,1.937,3,0.169,4,0.169,5,0.169,15,0.325,16,1.019,17,1.362,29,0.445,30,0.013,32,1.231,39,0.659,47,0.692,87,0.227,89,3.499,90,3.274,93,2.424,99,0.191,110,0.011,111,0.011,276,2.146,1261,3.966,1304,4.639,1306,5.14,1899,5.914,1917,4.739,2046,3.966,2182,5.088,2545,6.553,2546,5.9,2547,5.9,2548,5.9,2549,5.9]],["title/classes/UpdateUserDto.html",[0,0.122,14,1.971]],["body/classes/UpdateUserDto.html",[0,0.209,1,2.573,2,1.247,3,0.109,4,0.109,5,0.109,6,6.07,7,2.746,8,2.407,9,3.838,10,1.693,11,1.391,12,1.433,13,1.693,14,3.202,15,0.209,16,0.766,17,1.423,18,2.03,19,2.257,20,3.423,21,3.101,22,2.357,23,2.316,24,2.316,25,3.101,26,3.101,27,2.736,28,2.736,29,0.488,30,0.014,31,1.211,32,1.333,33,5.994,34,1.047,35,1.51,36,0.767,37,3.503,39,0.714,41,1.847,42,2.746,43,2.137,47,0.8,48,4.61,49,4.61,50,4.61,51,4.61,52,4.61,53,4.61,54,3.309,57,3.558,58,3.309,60,3.309,62,2.828,63,1.045,64,3.309,66,2.977,67,2.987,69,3.558,70,2.987,72,3.558,73,3.826,74,4.094,75,3.826,76,2.987,78,3.826,79,3.838,80,3.826,81,3.558,82,4.403,83,3.309,85,3.309,87,0.171,88,3.826,89,3.661,90,3.546,91,3.826,92,4.161,93,1.561,94,4.959,95,1.341,96,3.335,97,3.335,98,2.694,99,0.171,100,2.746,101,2.987,102,2.987,103,2.394,104,2.987,105,2.554,106,2.987,107,3.309,108,3.826,109,1.561,110,0.008,111,0.008,1331,3.309,1334,3.309,1338,3.309,1341,3.309,1350,3.309,2550,3.799,2551,3.799,2552,3.799,2553,3.799]],["title/classes/UpdateUserStatusDto.html",[0,0.122,2554,2.931]],["body/classes/UpdateUserStatusDto.html",[0,0.214,2,1.961,3,0.172,4,0.172,5,0.172,8,2.169,12,1.47,15,0.329,16,1.027,29,0.377,30,0.013,32,1.045,37,2.555,39,0.559,87,0.229,93,2.454,95,2.108,99,0.193,110,0.011,111,0.011,119,4.041,136,1.702,138,2.696,276,1.704,1229,4.468,1244,5.575,1291,3.61,1325,3.764,2554,5.125,2555,6.177,2556,5.204,2557,5.974,2558,5.974]],["title/entities/User.html",[12,0.762,112,1.24]],["body/entities/User.html",[0,0.118,3,0.113,4,0.113,5,0.113,12,1.017,15,0.216,16,0.783,18,3.309,21,3.153,22,2.107,23,2.355,24,2.355,25,3.153,26,3.153,27,2.447,28,2.447,29,0.512,30,0.014,31,1.167,32,1.416,34,1.49,35,2.117,36,1.414,39,0.759,44,1.714,47,0.803,63,1.128,87,0.175,99,0.127,110,0.009,111,0.009,112,1.199,114,1.676,116,2.648,119,3.309,121,4.163,122,2.638,123,3.042,132,3.153,135,3.955,136,1.936,138,2.057,142,3.91,144,3.899,145,1.242,391,2.47,399,4.409,402,2.635,414,3.408,415,3.966,434,4.253,451,2.635,462,3.91,534,2.107,857,3.483,1362,4.253,1382,3.415,1383,4.712,1385,3.082,1930,4.712,1935,4.712,2476,4.712,2559,3.415,2560,5.409,2561,3.92,2562,3.92,2563,6.676,2564,3.92,2565,3.92,2566,3.92,2567,3.92,2568,3.92,2569,5.409,2570,3.92,2571,3.92,2572,5.409,2573,3.92,2574,3.92,2575,5.409,2576,3.92,2577,3.92,2578,3.92,2579,5.409,2580,5.409,2581,3.92,2582,3.92,2583,3.92,2584,5.409,2585,3.92,2586,3.92,2587,3.92,2588,3.92,2589,3.92,2590,5.409,2591,3.92]],["title/classes/UserQueryDto.html",[0,0.122,2592,2.931]],["body/classes/UserQueryDto.html",[0,0.208,2,1.59,3,0.139,4,0.139,5,0.139,8,2.425,15,0.267,16,0.902,17,1.386,22,2.12,28,1.914,29,0.494,30,0.014,31,1.412,32,1.271,34,1.716,35,2.073,37,3.108,39,0.681,47,0.715,63,0.867,78,3.501,87,0.223,89,3.496,90,3.202,91,4.976,93,1.99,94,4.737,95,1.71,98,3.171,99,0.157,103,3.924,109,3.161,110,0.01,111,0.01,172,3.028,173,3.679,856,4.502,1318,5.713,1342,6.33,1447,4.502,1492,3.7,1620,4.931,1621,5.053,1643,4.187,2592,4.502,2593,5.053,2594,4.22,2595,6.228,2596,4.844,2597,4.844,2598,4.844,2599,4.844,2600,6.228,2601,4.844,2602,4.844,2603,4.22,2604,6.228]],["title/classes/UserResponseDto.html",[0,0.122,1893,2.408]],["body/classes/UserResponseDto.html",[0,0.108,2,1.18,3,0.103,4,0.103,5,0.103,8,2.546,11,1.864,12,1.519,15,0.198,16,0.737,17,1.294,18,3.158,20,2.368,21,3.009,22,2.309,23,2.247,24,2.247,25,3.009,26,3.009,28,2.681,29,0.508,30,0.014,31,1.232,32,1.392,34,1.771,35,1.834,36,1.462,37,3.406,39,0.746,44,1.613,47,0.803,57,3.422,62,2.72,63,1.108,66,3.615,69,3.422,72,3.422,74,3.422,87,0.116,94,4.275,95,1.268,98,3.009,99,0.116,103,4.05,105,4.321,109,2.091,110,0.008,111,0.008,116,2.528,119,3.158,121,3.973,122,2.924,136,1.222,138,1.935,276,1.452,485,2.598,534,2.309,857,3.324,1029,2.863,1229,3.207,1291,3.968,1299,5.6,1318,5.054,1319,4.434,1322,3.422,1325,4.864,1326,4.434,1332,5.6,1348,4.434,1886,2.416,1893,3.023,2593,5.382,2605,3.594,2606,6.428,2607,6.428,2608,5.09,2609,3.594,2610,3.594,2611,3.594,2612,3.594,2613,3.594,2614,3.594,2615,3.594,2616,3.594,2617,3.594,2618,3.594,2619,3.594,2620,3.594,2621,3.594,2622,3.594]],["title/interfaces/UserStats.html",[851,1.38,1624,2.726]],["body/interfaces/UserStats.html",[0,0.071,1,1.795,3,0.067,4,0.067,5,0.067,10,1.044,11,1.9,12,1.434,14,1.795,15,0.129,16,0.535,17,0.41,18,3.205,19,3.563,21,2.874,22,2.379,23,2.474,24,2.387,25,3.489,26,3.408,27,2.37,28,2.808,29,0.397,30,0.014,31,1.303,34,0.645,35,1.91,36,1.489,43,2.077,44,2.061,47,0.555,63,0.835,66,1.317,87,0.216,98,2.327,99,0.119,109,0.962,110,0.006,111,0.006,116,1.002,119,2.443,136,0.562,138,0.891,145,0.742,154,1.002,158,2.222,166,1.089,173,3.017,175,1.252,188,0.395,191,1.192,198,1.621,209,0.769,226,0.827,231,0.745,234,2.198,235,0.827,237,1.795,241,2.579,247,1.391,248,1.192,250,1.352,251,2.139,253,2.52,256,1.476,257,1.574,259,2.278,260,2.048,262,2.219,263,2.327,268,1.574,421,3.017,472,1.391,519,1.391,523,1.252,534,2.419,547,1.252,583,2.126,641,1.317,647,1.044,655,2.077,676,1.88,680,1.044,681,2.126,701,1.391,735,1.973,736,1.192,739,2.874,793,2.327,820,2.443,845,2.193,851,1.257,857,3.531,866,3.175,913,1.139,964,2.327,966,1.574,987,1.693,988,2.327,989,1.693,990,1.574,991,4.608,1018,2.669,1021,2.482,1025,2.482,1026,4.032,1027,2.669,1029,1.317,1030,1.693,1032,2.669,1033,2.669,1035,2.669,1036,2.669,1046,2.669,1047,1.693,1048,1.574,1051,1.693,1069,1.476,1070,2.482,1075,2.669,1077,1.317,1079,2.88,1084,1.693,1088,2.669,1090,1.693,1092,2.669,1094,1.693,1096,2.669,1165,1.693,1186,1.317,1322,1.574,1438,2.327,1492,1.88,1529,1.391,1618,2.482,1619,1.693,1620,3.269,1621,4.608,1622,1.693,1623,1.693,1624,2.482,1625,4.22,1626,4.22,1627,4.032,1628,4.032,1629,3.073,1630,3.082,1631,4.032,1632,4.079,1633,1.317,1634,1.842,1635,1.842,1636,1.842,1637,1.842,1638,3.594,1639,2.903,1640,1.842,1641,1.842,1642,2.903,1643,2.482,1644,1.842,1645,1.842,1646,1.842,1647,1.842,1648,1.842,1649,1.842,1650,2.903,1651,1.842,1652,2.903,1653,1.693,1654,1.842,1655,4.079,1656,1.842,1657,2.903,1658,4.079,1659,2.903,1660,1.842,1661,1.842,1662,1.842,1663,1.842,1664,1.842,1665,1.842,1666,1.842,1667,1.842,1668,1.842,1669,2.903,1670,3.594,1671,1.842,1672,2.903,1673,1.842,1674,1.842,1675,2.903,1676,1.693,1677,1.842,1678,1.842,1679,1.842,1680,1.842,1681,2.903,1682,1.842,1683,1.842,1684,2.903,1685,1.842,1686,1.842,1687,1.842,1688,1.842,1689,1.842,1690,1.842,1691,1.842,1692,1.842,1693,1.842,1694,1.842,1695,1.842,1696,2.903,1697,1.842,1698,1.842,1699,1.842,1700,1.842,1701,1.693,1702,1.842,1703,1.842]],["title/classes/UserStatsResponseDto.html",[0,0.122,2623,2.931]],["body/classes/UserStatsResponseDto.html",[0,0.188,2,1.59,3,0.139,4,0.139,5,0.139,8,2.501,12,1.294,15,0.267,16,0.902,29,0.494,30,0.014,31,1.442,32,1.315,35,2.073,37,3.215,39,0.704,44,1.973,47,0.476,63,0.674,87,0.201,95,1.71,98,2.466,99,0.157,110,0.01,111,0.01,128,3.924,480,3.171,735,3.328,737,5.562,1229,3.924,1230,4.502,1291,4.036,1325,4.338,1438,4.077,1625,4.628,1626,4.628,1627,4.628,1628,4.628,1629,3.256,1630,4.089,1631,4.628,1886,3.256,1893,4.316,1894,5.426,1896,3.501,2212,4.502,2593,5.172,2623,4.502,2624,5.426,2625,4.844,2626,4.844,2627,5.426,2628,4.844,2629,4.844,2630,5.253,2631,4.844,2632,4.22]],["title/classes/UsersByRoleDto.html",[0,0.122,2630,2.931]],["body/classes/UsersByRoleDto.html",[0,0.198,2,1.72,3,0.15,4,0.15,5,0.15,8,2.484,12,1.231,15,0.289,16,0.948,29,0.472,30,0.014,31,1.43,32,1.145,35,2.196,37,3.292,39,0.613,47,0.644,63,0.911,87,0.212,95,1.85,98,3.333,99,0.169,110,0.01,111,0.01,128,3.302,480,2.668,735,2.8,737,5.161,1229,3.302,1230,3.788,1291,4.099,1325,4.125,1438,3.997,1625,3.523,1626,3.523,1627,3.523,1628,3.523,1629,4.8,1630,4.442,1631,3.523,1886,3.523,1890,4.565,1893,4.241,1895,4.565,1896,3.788,2212,3.788,2593,4.8,2623,3.788,2624,4.565,2627,4.565,2630,5.406,2632,5.703]],["title/controllers/UsersController.html",[147,1.485,2633,2.931]],["body/controllers/UsersController.html",[0,0.075,1,2.597,3,0.071,4,0.071,5,0.071,8,2.413,10,3.356,11,2.346,12,1.552,14,2.597,15,0.136,17,1.12,27,2.288,29,0.492,30,0.014,32,1.159,35,1.524,36,1.431,39,0.621,47,0.708,63,0.892,87,0.239,95,0.872,99,0.08,109,1.015,110,0.006,111,0.006,147,0.905,149,0.94,151,1.39,153,1.178,154,2.024,155,2.409,156,2.409,158,2.3,161,1.468,163,2.03,164,2.027,166,1.149,167,1.557,173,2.058,175,1.32,176,1.786,178,1.468,180,1.786,182,3.366,183,1.786,184,1.39,185,2.981,187,3.649,188,0.416,191,1.258,193,1.258,195,1.101,196,1.201,198,1.614,205,3.862,209,0.811,234,2.59,241,1.582,251,1.812,253,1.754,259,1.31,260,0.756,262,2.911,276,2.148,356,3.72,431,1.359,472,3.173,473,3.181,476,2.98,479,2.589,480,1.96,481,3.61,483,2.74,484,2.152,485,4.631,486,5.58,503,1.943,504,3.805,519,1.468,522,1.557,529,1.32,530,1.786,531,1.557,532,1.96,533,1.786,534,1.31,535,1.786,538,1.943,539,1.661,540,4.576,541,4.907,542,2.589,545,2.426,547,1.32,549,4.454,555,4.823,556,4.036,563,2.152,564,3.862,587,2.152,589,2.152,594,1.943,647,1.101,676,2.72,680,1.101,681,2.201,736,1.258,750,3.028,768,5.339,772,3.278,782,4.789,783,2.152,791,5.487,793,4.538,796,2.152,797,2.152,798,3.862,799,4.124,800,3.72,820,3.423,845,2.287,887,1.943,888,1.943,893,1.943,988,2.426,995,3.72,998,3.72,999,4.122,1000,2.152,1001,2.152,1008,2.152,1025,1.661,1026,1.661,1042,3.354,1043,2.152,1044,3.354,1438,3.123,1439,5.344,1492,1.258,1529,2.287,1616,2.152,1620,2.426,1621,2.589,1623,1.786,1633,2.661,1701,1.786,1888,3.028,1893,2.81,1896,1.786,2309,2.152,2554,3.862,2592,3.862,2633,2.783,2634,2.152,2635,4.731,2636,2.471,2637,3.851,2638,2.471,2639,3.851,2640,2.471,2641,2.471,2642,2.471,2643,2.471,2644,2.471,2645,2.471,2646,2.471,2647,2.471,2648,2.471,2649,2.471,2650,2.471,2651,2.471,2652,2.471,2653,2.471,2654,4.731,2655,2.471,2656,2.471,2657,3.851,2658,3.851,2659,2.152,2660,2.471,2661,3.851,2662,2.471,2663,2.471,2664,2.471,2665,2.471,2666,2.471,2667,2.471,2668,2.471,2669,2.471,2670,2.471,2671,2.471,2672,2.471,2673,2.471,2674,2.471,2675,2.471,2676,2.471,2677,2.471,2678,2.471,2679,2.471,2680,3.851,2681,2.471]],["title/modules/UsersModule.html",[209,1.331,290,2.726]],["body/modules/UsersModule.html",[0,0.168,3,0.16,4,0.16,5,0.16,12,1.048,30,0.014,87,0.258,99,0.18,110,0.011,111,0.011,149,2.586,188,0.939,209,2.41,211,2.71,212,2.71,213,2.978,214,2.978,215,2.71,216,3.922,217,3.922,221,3.634,222,2.384,223,2.838,225,3.825,226,1.967,229,3.825,289,4.734,290,5.516,304,4.382,945,4.856,1622,4.029,1633,4.684,2633,5.305,2659,4.856,2682,4.856,2683,4.856,2684,5.574,2685,4.856,2686,5.574,2687,5.574]],["title/injectables/UsersService.html",[231,0.818,1633,2.28]],["body/injectables/UsersService.html",[0,0.064,1,2.391,3,0.061,4,0.061,5,0.061,10,0.95,11,1.801,12,1.41,14,2.391,15,0.117,17,1.165,18,3.075,19,3.418,21,2.743,22,2.36,23,2.391,24,2.3,25,3.391,26,3.304,27,2.274,28,2.783,29,0.41,30,0.014,31,1.301,34,0.587,35,1.851,36,1.513,39,0.624,43,1.926,44,1.993,47,0.638,63,1.006,66,1.198,87,0.21,98,2.186,99,0.111,109,0.875,110,0.005,111,0.005,116,0.911,119,2.879,136,0.512,138,1.633,145,0.675,153,1.048,154,1.836,155,1.744,156,1.744,158,2.619,163,2.056,164,1.985,166,1.593,173,2.879,175,1.83,188,0.359,191,1.085,198,1.579,209,0.7,226,0.752,231,0.691,232,0.875,234,2.569,235,1.209,237,2.391,241,2.935,247,1.266,248,1.085,250,1.254,251,2.117,253,2.48,256,1.343,257,1.432,259,2.209,260,1.985,262,2.103,263,2.158,268,1.432,421,2.879,472,2.921,473,2.302,483,1.465,519,2.034,523,1.139,534,2.36,547,1.139,583,1.997,641,1.198,647,0.95,655,1.926,676,1.744,680,0.95,681,1.997,701,1.266,735,1.83,736,1.085,739,2.743,820,3.075,845,2.034,851,1.166,857,3.402,866,3.03,913,1.036,962,1.856,964,3.079,966,2.302,987,1.54,988,2.158,989,1.54,990,1.432,991,4.478,1018,2.476,1021,2.302,1025,2.302,1026,3.868,1027,2.476,1029,1.198,1030,1.54,1032,2.476,1033,2.476,1035,2.476,1036,2.476,1046,2.476,1047,1.54,1048,1.432,1051,1.54,1069,1.343,1070,2.302,1075,2.476,1077,1.198,1079,2.706,1084,1.54,1088,2.476,1090,1.54,1092,2.476,1094,1.54,1096,2.476,1165,1.54,1322,1.432,1438,2.186,1492,1.744,1529,1.266,1618,3.306,1619,1.54,1620,3.099,1621,4.478,1622,1.54,1623,1.54,1624,1.432,1625,3.306,1626,3.306,1627,2.887,1628,2.887,1629,2.887,1630,2.921,1631,2.887,1632,2.693,1633,1.926,1634,2.693,1635,2.693,1636,1.675,1637,1.675,1638,3.376,1639,2.693,1640,1.675,1641,1.675,1642,2.693,1643,2.302,1644,1.675,1645,1.675,1646,1.675,1647,1.675,1648,1.675,1649,1.675,1650,2.693,1651,1.675,1652,2.693,1653,1.54,1654,1.675,1655,3.867,1656,3.376,1657,2.693,1658,3.867,1659,2.693,1660,1.675,1661,1.675,1662,1.675,1663,1.675,1664,1.675,1665,1.675,1666,1.675,1667,1.675,1668,1.675,1669,2.693,1670,3.376,1671,1.675,1672,2.693,1673,1.675,1674,1.675,1675,2.693,1676,1.54,1677,1.675,1678,1.675,1679,1.675,1680,1.675,1681,2.693,1682,1.675,1683,1.675,1684,2.693,1685,1.675,1686,1.675,1687,1.675,1688,1.675,1689,1.675,1690,1.675,1691,1.675,1692,1.675,1693,1.675,1694,1.675,1695,1.675,1696,2.693,1697,1.675,1698,2.693,1699,2.693,1700,2.693,1701,1.54,1702,1.675,1703,1.675,2688,3.425,2689,3.425,2690,2.131,2691,2.131,2692,2.131,2693,2.131,2694,2.131,2695,2.131,2696,2.131,2697,2.131,2698,2.131,2699,2.131,2700,2.131]],["title/coverage.html",[2701,4.352]],["body/coverage.html",[0,0.246,1,1.615,5,0.095,6,3.782,7,4.088,12,1.063,14,1.615,29,0.21,30,0.014,35,0.947,79,2.093,110,0.008,111,0.008,112,2.324,113,2.233,115,2.893,147,2.705,148,2.401,150,2.893,160,2.093,179,2.233,189,2.093,215,1.615,231,1.588,233,2.893,260,1.016,269,2.401,270,2.893,276,1.372,277,2.093,291,1.775,292,1.868,299,2.611,309,3.477,311,1.691,335,5.402,375,2.893,379,3.234,380,3.868,381,4.191,382,4.191,390,3.031,416,2.706,422,2.093,423,2.611,464,2.401,465,2.893,475,2.093,476,1.545,516,2.233,526,2.093,529,1.775,532,1.691,534,1.13,612,2.893,655,4.793,737,3.477,746,2.233,747,3.782,758,3.022,805,2.093,814,2.093,820,1.775,840,1.973,851,2.467,938,1.973,955,2.893,964,1.691,1187,4.088,1192,2.233,1212,1.973,1213,2.611,1216,1.691,1233,2.893,1234,3.782,1245,2.893,1246,3.782,1264,2.233,1265,2.893,1266,3.782,1302,2.401,1303,2.893,1304,3.782,1317,2.893,1353,4.482,1354,3.782,1364,3.234,1418,2.401,1419,2.893,1438,1.691,1462,2.401,1481,2.401,1492,1.691,1537,2.857,1543,4.191,1569,2.893,1618,2.233,1619,4.088,1624,2.233,1633,1.868,1704,2.893,1705,2.893,1710,2.893,1717,2.893,1766,2.893,1827,2.893,1839,2.893,1884,2.611,1885,2.893,1886,4.168,1893,1.973,1897,2.611,1909,2.857,1924,2.893,1925,2.893,1953,1.973,1954,2.893,1967,1.973,2038,2.233,2040,2.893,2041,2.401,2049,2.893,2050,2.893,2140,2.893,2182,2.401,2369,4.191,2426,2.893,2446,3.782,2452,3.782,2456,2.401,2469,2.893,2478,2.401,2479,2.893,2494,2.611,2507,2.893,2531,2.893,2536,2.893,2539,2.893,2545,2.893,2554,2.401,2555,2.893,2556,2.893,2559,2.893,2592,2.401,2593,4.168,2594,2.893,2623,2.401,2630,2.401,2633,2.401,2634,2.893,2701,2.611,2702,2.893,2703,3.321,2704,3.321,2705,6.862,2706,6.862,2707,5.656,2708,6.581,2709,4.191,2710,8.065,2711,3.321,2712,3.321,2713,2.893,2714,3.321,2715,3.321,2716,3.321,2717,6.201,2718,2.893,2719,4.927,2720,5.656,2721,2.893,2722,2.893,2723,5.656,2724,5.656,2725,6.201,2726,4.811,2727,4.811,2728,3.321,2729,3.321,2730,6.581,2731,4.811,2732,3.321,2733,3.321,2734,3.321,2735,3.321,2736,3.321,2737,3.321,2738,3.321]],["title/dependencies.html",[212,2.371,2739,2.949]],["body/dependencies.html",[0,0.203,30,0.014,93,2.249,95,1.932,110,0.011,111,0.011,122,2.162,145,1.734,188,0.922,212,2.661,226,1.932,296,2.786,298,3.956,645,4.768,941,4.303,943,3.448,948,3.448,988,3.448,1191,4.861,1479,5.859,1480,5.859,1579,4.768,1735,4.303,1809,4.768,1851,4.768,1998,4.768,1999,5.859,2455,4.303,2603,4.768,2740,7.796,2741,5.473,2742,6.725,2743,5.473,2744,5.473,2745,5.473,2746,5.473,2747,5.473,2748,5.473,2749,5.473,2750,5.473,2751,5.473,2752,5.473,2753,5.473,2754,5.473,2755,5.473,2756,5.473,2757,5.473,2758,5.473,2759,5.473,2760,6.725,2761,5.473,2762,5.473,2763,5.473,2764,5.473,2765,5.473,2766,5.473,2767,5.473,2768,5.473,2769,5.473,2770,5.473,2771,5.473,2772,5.473,2773,5.473,2774,5.473,2775,5.473,2776,5.473]],["title/miscellaneous/enumerations.html",[2777,2.133,2778,4.248]],["body/miscellaneous/enumerations.html",[3,0.153,15,0.294,30,0.014,110,0.011,111,0.011,172,4.121,380,2.715,423,4.193,447,4.17,457,4.214,458,5.204,459,4.47,460,4.742,1213,4.193,1225,5.204,1229,4.17,1230,4.784,1268,4.784,1273,4.193,1274,5.658,1353,3.855,1354,5.658,1375,4.784,1392,4.646,1393,4.646,1394,5.765,1395,4.646,1396,3.855,1397,4.646,1398,4.646,1399,4.646,1400,4.646,1401,4.646,1402,5.765,1403,4.784,1404,5.204,1405,5.765,1406,4.646,1407,3.585,1408,3.855,1409,4.646,1410,4.646,1411,4.646,1897,4.193,1917,4.17,1921,4.449,2777,3.36,2778,4.646,2779,6.618,2780,5.333,2781,5.333,2782,5.333]],["title/miscellaneous/functions.html",[2777,2.133,2783,4.248]],["body/miscellaneous/functions.html",[15,0.349,17,1.106,29,0.4,30,0.012,63,0.88,110,0.012,111,0.012,163,2.004,215,3.765,2719,5.511,2721,6.388,2722,6.746,2777,3.986,2783,5.511,2784,7.744,2785,6.326,2786,7.744]],["title/index.html",[15,0.187,711,2.447,2787,3.385]],["body/index.html",[4,0.129,8,1.372,30,0.013,37,3.017,97,2.826,110,0.009,111,0.009,223,3.836,237,2.18,268,3.015,344,3.907,353,4.657,358,3.526,363,4.459,365,3.015,383,4.238,574,3.526,583,3.505,998,3.526,1029,2.522,1131,3.907,1138,3.526,1195,5.638,1396,3.242,1407,3.015,1420,5.16,1477,3.242,1592,5.16,1617,5.547,1714,5.16,1957,3.907,2075,6.694,2188,3.907,2213,3.907,2701,3.526,2702,5.16,2788,4.485,2789,4.485,2790,6.633,2791,5.923,2792,4.485,2793,4.485,2794,4.485,2795,6.633,2796,4.485,2797,7.055,2798,4.485,2799,7.8,2800,4.485,2801,4.485,2802,5.923,2803,4.485,2804,4.485,2805,6.633,2806,4.485,2807,4.485,2808,4.485,2809,4.485,2810,4.485,2811,7.055,2812,5.923,2813,4.485,2814,4.485,2815,4.485,2816,4.485,2817,5.923,2818,5.923,2819,4.485,2820,5.923,2821,7.535,2822,7.055,2823,4.485,2824,5.923,2825,4.485,2826,4.485,2827,4.485,2828,4.485,2829,7.055,2830,4.485,2831,4.485,2832,4.485,2833,5.923,2834,4.485,2835,4.485,2836,4.485,2837,4.485,2838,4.485,2839,5.923,2840,4.485,2841,4.485,2842,4.485,2843,5.923,2844,4.485,2845,4.485,2846,6.146,2847,4.485,2848,4.485,2849,4.485,2850,4.485,2851,4.485,2852,4.485,2853,4.485,2854,4.485,2855,5.923,2856,4.485,2857,4.485,2858,4.485,2859,4.485,2860,4.485,2861,4.485,2862,4.485,2863,5.923,2864,4.485,2865,4.485,2866,4.485,2867,4.485,2868,5.923,2869,4.485,2870,4.485,2871,4.485,2872,5.923,2873,5.923,2874,4.485,2875,4.485,2876,4.485,2877,4.485,2878,4.485,2879,4.485,2880,4.485,2881,4.485,2882,4.485,2883,4.485,2884,3.907,2885,4.485,2886,4.485,2887,4.485,2888,4.485,2889,4.485,2890,4.485]],["title/modules.html",[211,2.691]],["body/modules.html",[30,0.012,110,0.012,111,0.012,210,4.119,211,2.979,281,4.43,285,4.119,286,4.119,287,4.119,288,4.119,289,3.64,290,4.119,2846,7.215,2891,8.283,2892,8.283,2893,8.283]],["title/overview.html",[2894,4.822]],["body/overview.html",[2,1.423,30,0.014,79,3.648,109,1.78,110,0.009,111,0.009,114,1.853,149,1.648,189,4.8,209,1.423,210,5.016,211,2.107,212,2.107,213,2.315,214,2.315,215,2.107,216,2.315,217,2.315,218,3.775,219,3.775,220,3.775,221,3.094,222,1.853,223,2.206,232,1.78,277,4.108,281,6.026,282,3.775,283,3.775,284,3.775,285,5.016,286,5.533,287,5.269,288,5.323,289,4.598,290,5.204,291,4.136,292,4.354,526,4.8,606,3.775,607,3.775,608,3.775,840,4.525,934,3.775,936,3.775,937,3.775,938,4.525,964,3.879,1186,2.437,1481,5.507,1534,3.775,1535,3.775,1536,3.775,1537,4.525,1633,4.285,1953,4.134,1967,4.525,2035,3.775,2036,3.775,2037,3.775,2038,5.121,2061,3.775,2212,3.132,2494,3.407,2500,3.775,2501,3.775,2502,3.775,2682,3.775,2683,3.775,2685,3.775,2713,3.775,2894,3.775,2895,4.333]],["title/properties.html",[16,0.706,2739,2.949]],["body/properties.html",[8,1.984,16,0.939,30,0.013,110,0.012,111,0.012,1396,4.688,2884,5.65,2896,6.486,2897,6.486,2898,6.486]],["title/miscellaneous/variables.html",[1199,3.278,2777,2.133]],["body/miscellaneous/variables.html",[12,1.28,15,0.308,27,2.206,28,2.206,29,0.464,30,0.014,34,2.107,47,0.669,110,0.011,111,0.011,114,2.388,172,3.717,198,1.295,251,1.486,299,5.353,320,4.864,321,4.39,323,3.753,327,3.753,329,4.864,330,4.864,331,4.864,336,4.39,342,2.983,353,5.353,476,2.597,483,2.388,534,2.668,772,2.983,1199,3.753,1739,4.39,2446,4.39,2447,4.864,2448,4.036,2449,4.864,2450,4.864,2451,4.864,2456,4.921,2709,4.864,2718,4.864,2777,3.518,2899,5.583,2900,6.808,2901,5.583,2902,5.583,2903,5.583,2904,5.583,2905,5.583,2906,5.583,2907,5.583,2908,5.583,2909,5.583,2910,5.583,2911,6.808,2912,5.583]]],"invertedIndex":[["",{"_index":30,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"injectables/EmailService.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":655,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["0')}${string(today.getdate()).padstart(2",{"_index":2193,"title":{},"body":{"injectables/QueueService.html":{}}}],["0.0.1",{"_index":2897,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":2754,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":2769,"title":{},"body":{"dependencies.html":{}}}],["0.3.22",{"_index":2776,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":2753,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":2764,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":2710,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":2707,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":2736,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":2708,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":2726,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":2732,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":2729,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":2727,"title":{},"body":{"coverage.html":{}}}],["0/18",{"_index":2735,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":2706,"title":{},"body":{"coverage.html":{}}}],["0/24",{"_index":2734,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":2705,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2717,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":2730,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":2725,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":2723,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":2724,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":2731,"title":{},"body":{"coverage.html":{}}}],["01",{"_index":1299,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"classes/UserResponseDto.html":{}}}],["01t00:00:00.000z",{"_index":2607,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["08:00",{"_index":369,"title":{},"body":{"modules/AppModule.html":{}}}],["09123456789",{"_index":106,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["09123456789'})@isstring",{"_index":2427,"title":{},"body":{"classes/RegisterDto.html":{}}}],["09123456789'})@isstring()@isoptional",{"_index":58,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["1",{"_index":109,"title":{"injectables/MinioService-1.html":{},"interfaces/RequestWithUser-1.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService-1.html":{},"classes/PaginatedUsersResponseDto.html":{},"injectables/QueueService.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["1).padstart(2",{"_index":2192,"title":{},"body":{"injectables/QueueService.html":{}}}],["1).padstart(3",{"_index":2209,"title":{},"body":{"injectables/QueueService.html":{}}}],["1.5.4",{"_index":2767,"title":{},"body":{"dependencies.html":{}}}],["1.5.5",{"_index":2749,"title":{},"body":{"dependencies.html":{}}}],["1/10",{"_index":2716,"title":{},"body":{"coverage.html":{}}}],["1/11",{"_index":2714,"title":{},"body":{"coverage.html":{}}}],["1/12",{"_index":2715,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":2712,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":1492,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"classes/PaginatedUsersResponseDto.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/UserQueryDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["100",{"_index":128,"title":{},"body":{"entities/Announcement.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{}}}],["100).tofixed(1",{"_index":2135,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["1024",{"_index":1493,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["10mb",{"_index":1494,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["11",{"_index":2895,"title":{},"body":{"overview.html":{}}}],["11.0.0",{"_index":2742,"title":{},"body":{"dependencies.html":{}}}],["11.0.5",{"_index":2743,"title":{},"body":{"dependencies.html":{}}}],["11.1.0",{"_index":2740,"title":{},"body":{"dependencies.html":{}}}],["11.2.0",{"_index":2745,"title":{},"body":{"dependencies.html":{}}}],["11:59",{"_index":2077,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["123",{"_index":49,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["123456",{"_index":2445,"title":{},"body":{"classes/RegisterDto.html":{}}}],["123456'})@isstring()@isoptional",{"_index":2438,"title":{},"body":{"classes/RegisterDto.html":{}}}],["15",{"_index":2212,"title":{},"body":{"injectables/QueueService.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"overview.html":{}}}],["16.5.0",{"_index":2757,"title":{},"body":{"dependencies.html":{}}}],["1990",{"_index":1298,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["1})@isoptional()@type(undefined)@isnumber()@min(1",{"_index":2595,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["2",{"_index":108,"title":{"interfaces/RequestWithUser-2.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["2.0.0",{"_index":2760,"title":{},"body":{"dependencies.html":{}}}],["2.0.10",{"_index":2751,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":768,"title":{},"body":{"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":479,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["2024",{"_index":2606,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["2025",{"_index":1598,"title":{},"body":{"injectables/EmailService.html":{}}}],["23",{"_index":2061,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"overview.html":{}}}],["23:59",{"_index":2078,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["24h",{"_index":954,"title":{},"body":{"modules/AuthModule.html":{}}}],["25",{"_index":2632,"title":{},"body":{"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{}}}],["250",{"_index":1553,"title":{},"body":{"entities/DocumentFile.html":{}}}],["255",{"_index":140,"title":{},"body":{"entities/Announcement.html":{},"entities/DocumentFile.html":{}}}],["27ae60",{"_index":1613,"title":{},"body":{"injectables/EmailService.html":{}}}],["2})@isnumber()@isoptional",{"_index":38,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["3",{"_index":1352,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/QueueService.html":{}}}],["3.14.1",{"_index":2762,"title":{},"body":{"dependencies.html":{}}}],["300",{"_index":1865,"title":{},"body":{"injectables/OTPService.html":{}}}],["30min",{"_index":705,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["33",{"_index":2711,"title":{},"body":{"coverage.html":{}}}],["3306",{"_index":2905,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3498db",{"_index":1615,"title":{},"body":{"injectables/EmailService.html":{}}}],["3600",{"_index":1762,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["4",{"_index":1322,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["4.0.1",{"_index":2765,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":2741,"title":{},"body":{"dependencies.html":{}}}],["4.1.0",{"_index":2755,"title":{},"body":{"dependencies.html":{}}}],["4.8.1",{"_index":2772,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":770,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["401",{"_index":775,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["403",{"_index":778,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["404",{"_index":782,"title":{},"body":{"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["409",{"_index":784,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["5",{"_index":174,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"injectables/EmailService.html":{},"injectables/OTPService.html":{}}}],["5.0.1",{"_index":2775,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":2752,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":400,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{}}}],["500",{"_index":134,"title":{},"body":{"entities/Announcement.html":{},"entities/DocumentFile.html":{}}}],["59",{"_index":2093,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["5:00",{"_index":703,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["6",{"_index":656,"title":{},"body":{"injectables/AppointmentService.html":{},"classes/CreateUserDto.html":{},"injectables/OTPService.html":{}}}],["6.0.0",{"_index":2744,"title":{},"body":{"dependencies.html":{}}}],["6.4.17",{"_index":2747,"title":{},"body":{"dependencies.html":{}}}],["60000",{"_index":2350,"title":{},"body":{"injectables/QueueService.html":{}}}],["639123456789",{"_index":1319,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["6})@isstring()@minlength(6",{"_index":1343,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["7.0.4",{"_index":2763,"title":{},"body":{"dependencies.html":{}}}],["7.8.2",{"_index":2771,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":79,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AppointmentService.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{},"overview.html":{}}}],["8.0.5",{"_index":2758,"title":{},"body":{"dependencies.html":{}}}],["85",{"_index":2624,"title":{},"body":{"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{}}}],["8:00",{"_index":702,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["8})@isstring()@isnotempty()@minlength(8",{"_index":2440,"title":{},"body":{"classes/RegisterDto.html":{}}}],["8})@isstring()@isoptional()@minlength(8",{"_index":83,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["9",{"_index":2713,"title":{},"body":{"coverage.html":{},"overview.html":{}}}],["9000",{"_index":1741,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["999",{"_index":2094,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["_",{"_index":1144,"title":{},"body":{"injectables/AuthService.html":{}}}],["__dirname",{"_index":329,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["__password",{"_index":1002,"title":{},"body":{"injectables/AuthService.html":{}}}],["access_token",{"_index":854,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["accesskey",{"_index":1744,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["account",{"_index":881,"title":{},"body":{"controllers/AuthController.html":{},"injectables/EmailService.html":{},"interfaces/RequestWithUser.html":{}}}],["accurate",{"_index":2194,"title":{},"body":{"injectables/QueueService.html":{}}}],["action",{"_index":2112,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["active",{"_index":1229,"title":{},"body":{"entities/Counter.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"miscellaneous/enumerations.html":{}}}],["activeusers",{"_index":1626,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["add",{"_index":889,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{}}}],["addcounter",{"_index":2141,"title":{},"body":{"injectables/QueueService.html":{}}}],["addcounter(name",{"_index":2155,"title":{},"body":{"injectables/QueueService.html":{}}}],["adddays",{"_index":642,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["adddays(today",{"_index":715,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["additional",{"_index":1411,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["address",{"_index":20,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Appointment.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"injectables/EmailService.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["address'})@isemail()@isnotempty",{"_index":1327,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["addselect('count(user.id",{"_index":1688,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["admin",{"_index":10,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["admin/staff",{"_index":487,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["admin/super",{"_index":1457,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["admincreateuser",{"_index":2635,"title":{},"body":{"controllers/UsersController.html":{}}}],["admincreateuser(createuserdto",{"_index":2636,"title":{},"body":{"controllers/UsersController.html":{}}}],["adminid",{"_index":969,"title":{},"body":{"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{}}}],["administrators",{"_index":762,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["adminrolenames",{"_index":1120,"title":{},"body":{"injectables/AuthService.html":{}}}],["adminrolenames.some",{"_index":1123,"title":{},"body":{"injectables/AuthService.html":{}}}],["adminroles",{"_index":1118,"title":{},"body":{"injectables/AuthService.html":{}}}],["adminroles.map((role",{"_index":1121,"title":{},"body":{"injectables/AuthService.html":{}}}],["adminupdate",{"_index":1656,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["adminupdate(id",{"_index":2691,"title":{},"body":{"injectables/UsersService.html":{}}}],["adminupdateuser",{"_index":748,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["adminupdateuser(adminid",{"_index":967,"title":{},"body":{"injectables/AuthService.html":{}}}],["adminupdateuser(req",{"_index":757,"title":{},"body":{"controllers/AuthController.html":{}}}],["adminupdateuserdto",{"_index":1,"title":{"classes/AdminUpdateUserDto.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["adminupdateuserdto})@apiresponse({status",{"_index":767,"title":{},"body":{"controllers/AuthController.html":{}}}],["advanced",{"_index":339,"title":{},"body":{"modules/AppModule.html":{}}}],["afterconnect",{"_index":370,"title":{},"body":{"modules/AppModule.html":{}}}],["ahead",{"_index":2270,"title":{},"body":{"injectables/QueueService.html":{}}}],["alldetails",{"_index":2285,"title":{},"body":{"injectables/QueueService.html":{}}}],["alldetails.foreach((detail",{"_index":2292,"title":{},"body":{"injectables/QueueService.html":{}}}],["alldetails.length",{"_index":2288,"title":{},"body":{"injectables/QueueService.html":{}}}],["allow",{"_index":587,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/UsersController.html":{}}}],["allowed",{"_index":1501,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["allowedheaders",{"_index":2006,"title":{},"body":{"classes/QueueGateway.html":{}}}],["allowing",{"_index":2834,"title":{},"body":{"index.html":{}}}],["allows",{"_index":761,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["allqueues",{"_index":2394,"title":{},"body":{"controllers/QueuesController.html":{}}}],["allqueues.map((queue",{"_index":2398,"title":{},"body":{"controllers/QueuesController.html":{}}}],["alltimeslots",{"_index":707,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["alltimeslots.filter((slot",{"_index":709,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["already",{"_index":739,"title":{},"body":{"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService-1.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["always",{"_index":2128,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["amazing",{"_index":2878,"title":{},"body":{"index.html":{}}}],["announcement",{"_index":113,"title":{"entities/Announcement.html":{}},"body":{"entities/Announcement.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"coverage.html":{}}}],["announcement.controller",{"_index":227,"title":{},"body":{"modules/AnnouncementModule.html":{}}}],["announcement.dto",{"_index":192,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"classes/UpdateAnnouncementDto.html":{}}}],["announcement.dto.ts",{"_index":1234,"title":{},"body":{"classes/CreateAnnouncementDto.html":{},"classes/UpdateAnnouncementDto.html":{},"coverage.html":{}}}],["announcement.dto.ts:10",{"_index":1238,"title":{},"body":{"classes/CreateAnnouncementDto.html":{}}}],["announcement.dto.ts:14",{"_index":1239,"title":{},"body":{"classes/CreateAnnouncementDto.html":{}}}],["announcement.dto.ts:18",{"_index":1236,"title":{},"body":{"classes/CreateAnnouncementDto.html":{}}}],["announcement.dto.ts:22",{"_index":1241,"title":{},"body":{"classes/CreateAnnouncementDto.html":{}}}],["announcement.dto.ts:6",{"_index":1242,"title":{},"body":{"classes/CreateAnnouncementDto.html":{}}}],["announcement.isactive",{"_index":265,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["announcement.service",{"_index":190,"title":{},"body":{"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{}}}],["announcementcontroller",{"_index":148,"title":{"controllers/AnnouncementController.html":{}},"body":{"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"coverage.html":{}}}],["announcementmodule",{"_index":210,"title":{"modules/AnnouncementModule.html":{}},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["announcementrepository",{"_index":239,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["announcements",{"_index":152,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["announcementservice",{"_index":189,"title":{"injectables/AnnouncementService.html":{}},"body":{"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"coverage.html":{},"overview.html":{}}}],["api",{"_index":2383,"title":{},"body":{"controllers/QueuesController.html":{}}}],["apibearerauth",{"_index":542,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["apibearerauth('jwt",{"_index":546,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{}}}],["apibody",{"_index":850,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["apiconsumes",{"_index":1484,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["apiconsumes('multipart/form",{"_index":1503,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["apioperation",{"_index":540,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":760,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiparam",{"_index":849,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["apiproperty",{"_index":1291,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{}}}],["apiproperty({description",{"_index":1270,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["apiproperty({enum",{"_index":1277,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["apiproperty({example",{"_index":1325,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{}}}],["apiproperty({type",{"_index":1894,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{},"classes/UserStatsResponseDto.html":{}}}],["apipropertyoptional",{"_index":94,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{}}}],["apipropertyoptional({description",{"_index":33,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["apipropertyoptional({example",{"_index":1318,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{}}}],["apiresponse",{"_index":541,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":539,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["apitags('appointments",{"_index":543,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["apitags('authentication",{"_index":852,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["apitags('document",{"_index":1485,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["apitags('users",{"_index":2663,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":392,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"injectables/AppointmentService.html":{},"entities/DocumentFile.html":{}}}],["app.appointmenttime",{"_index":700,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["app.controller",{"_index":303,"title":{},"body":{"modules/AppModule.html":{}}}],["app.files",{"_index":1548,"title":{},"body":{"entities/DocumentFile.html":{}}}],["app.service",{"_index":278,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app.statushistory",{"_index":393,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["appcontroller",{"_index":269,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":383,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"injectables/EmailService.html":{},"classes/UpdateDocumentApplicationDto.html":{},"index.html":{}}}],["application'})@apiresponse({status",{"_index":1427,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["application.dto",{"_index":1483,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["application.dto.ts",{"_index":1266,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"coverage.html":{}}}],["application.dto.ts:12",{"_index":1279,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["application.dto.ts:18",{"_index":2541,"title":{},"body":{"classes/UpdateDocumentApplicationDto.html":{}}}],["application.dto.ts:21",{"_index":1276,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["application.dto.ts:27",{"_index":2542,"title":{},"body":{"classes/UpdateDocumentApplicationDto.html":{}}}],["application.dto.ts:33",{"_index":1285,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["application.dto.ts:42",{"_index":1288,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["application.entity",{"_index":417,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"classes/CreateDocumentApplicationDto.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["application.entity.ts",{"_index":1354,"title":{},"body":{"entities/DocumentApplication.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["application.entity.ts:41",{"_index":1372,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:44",{"_index":1387,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:51",{"_index":1361,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:54",{"_index":1359,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:61",{"_index":1376,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:64",{"_index":1381,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:67",{"_index":1370,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:70",{"_index":1363,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:73",{"_index":1384,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:76",{"_index":1374,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:81",{"_index":1386,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:84",{"_index":1367,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:90",{"_index":1380,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application_id",{"_index":397,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentFile.html":{}}}],["application_subtype",{"_index":1358,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application_type",{"_index":1360,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application_update",{"_index":1601,"title":{},"body":{"injectables/EmailService.html":{}}}],["applicationid",{"_index":384,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentFile.html":{},"injectables/EmailService.html":{}}}],["applications",{"_index":1420,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"index.html":{}}}],["applications.controller",{"_index":1539,"title":{},"body":{"modules/DocumentApplicationsModule.html":{}}}],["applications.controller.ts",{"_index":1419,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"coverage.html":{}}}],["applications.controller.ts:112",{"_index":1449,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:136",{"_index":1440,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:154",{"_index":1434,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:165",{"_index":1454,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:183",{"_index":1463,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:211",{"_index":1466,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:226",{"_index":1460,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:241",{"_index":1443,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:249",{"_index":1458,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:46",{"_index":1428,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:74",{"_index":1473,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:96",{"_index":1432,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.module",{"_index":310,"title":{},"body":{"modules/AppModule.html":{}}}],["applications.module.ts",{"_index":1538,"title":{},"body":{"modules/DocumentApplicationsModule.html":{}}}],["applications.service",{"_index":1482,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{}}}],["applications.service.ts",{"_index":2728,"title":{},"body":{"coverage.html":{}}}],["applications/document",{"_index":309,"title":{},"body":{"modules/AppModule.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"coverage.html":{}}}],["applications/dto/create",{"_index":1265,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"coverage.html":{}}}],["applications/dto/update",{"_index":2539,"title":{},"body":{"classes/UpdateDocumentApplicationDto.html":{},"coverage.html":{}}}],["applications/entities/application",{"_index":381,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"coverage.html":{}}}],["applications/entities/document",{"_index":1353,"title":{},"body":{"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["applications/services/minio.service.ts",{"_index":1766,"title":{},"body":{"injectables/MinioService-1.html":{},"coverage.html":{}}}],["applications/services/minio.service.ts:109",{"_index":1773,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:119",{"_index":1776,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:128",{"_index":1781,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:46",{"_index":1782,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:50",{"_index":1774,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:65",{"_index":1783,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:7",{"_index":1784,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:8",{"_index":1785,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:9",{"_index":1772,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:93",{"_index":1779,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applicationstatus",{"_index":1375,"title":{},"body":{"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"classes/UpdateDocumentApplicationDto.html":{},"miscellaneous/enumerations.html":{}}}],["applicationstatus.approved",{"_index":2543,"title":{},"body":{"classes/UpdateDocumentApplicationDto.html":{}}}],["applicationstatus.pending",{"_index":1417,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["applicationstatushistory",{"_index":379,"title":{"entities/ApplicationStatusHistory.html":{}},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentApplication.html":{},"modules/DocumentApplicationsModule.html":{},"coverage.html":{}}}],["applicationsubtype",{"_index":1267,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{}}}],["applicationtype",{"_index":1268,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"injectables/EmailService.html":{},"miscellaneous/enumerations.html":{}}}],["applicationtype.birth_certificate",{"_index":1292,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["apply",{"_index":1642,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["appmodule",{"_index":281,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appointment",{"_index":422,"title":{"entities/Appointment.html":{}},"body":{"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"coverage.html":{}}}],["appointment'})@apiresponse({status",{"_index":478,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["appointment.appointmentdate",{"_index":672,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointment.appointmenttime",{"_index":674,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointment.controller",{"_index":610,"title":{},"body":{"modules/AppointmentModule.html":{}}}],["appointment.dto",{"_index":528,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"classes/UpdateAppointmentDto.html":{}}}],["appointment.dto.ts",{"_index":1246,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{},"coverage.html":{}}}],["appointment.dto.ts:13",{"_index":1252,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:17",{"_index":1254,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:21",{"_index":1255,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:25",{"_index":1248,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:29",{"_index":1256,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:33",{"_index":1257,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:37",{"_index":1250,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:41",{"_index":1251,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:45",{"_index":1259,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:48",{"_index":1260,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:51",{"_index":1253,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:9",{"_index":2538,"title":{},"body":{"classes/UpdateAppointmentDto.html":{}}}],["appointment.service",{"_index":527,"title":{},"body":{"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{}}}],["appointment.status",{"_index":688,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointment.userid",{"_index":590,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["appointment_type",{"_index":1928,"title":{},"body":{"entities/QueueDetails.html":{}}}],["appointmentcontroller",{"_index":464,"title":{"controllers/AppointmentController.html":{}},"body":{"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"coverage.html":{}}}],["appointmentdate",{"_index":424,"title":{},"body":{"entities/Appointment.html":{},"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{}}}],["appointmentmodule",{"_index":285,"title":{"modules/AppointmentModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules.html":{},"overview.html":{}}}],["appointmentnumber",{"_index":425,"title":{},"body":{"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["appointmentrepository",{"_index":621,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointments",{"_index":466,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["appointmentservice",{"_index":526,"title":{"injectables/AppointmentService.html":{}},"body":{"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"coverage.html":{},"overview.html":{}}}],["appointmentstatus",{"_index":447,"title":{},"body":{"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{},"miscellaneous/enumerations.html":{}}}],["appointmentstatus.cancelled",{"_index":728,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointmentstatus.completed",{"_index":727,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointmentstatus.confirmed",{"_index":696,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointmentstatus.pending",{"_index":463,"title":{},"body":{"entities/Appointment.html":{},"injectables/AppointmentService.html":{}}}],["appointmenttime",{"_index":426,"title":{},"body":{"entities/Appointment.html":{},"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{}}}],["appointmenttype",{"_index":1305,"title":{},"body":{"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{}}}],["appropriately",{"_index":1132,"title":{},"body":{"injectables/AuthService.html":{}}}],["approved",{"_index":1403,"title":{},"body":{"entities/DocumentApplication.html":{},"injectables/EmailService.html":{},"classes/UpdateDocumentApplicationDto.html":{},"miscellaneous/enumerations.html":{}}}],["appservice",{"_index":277,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":41,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AuthController.html":{},"interfaces/AuthenticatedUser.html":{},"classes/CreateUserDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/PaginatedUsersResponseDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{}}}],["array.isarray(payload.roles",{"_index":1210,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["array.isarray(queue.details",{"_index":2402,"title":{},"body":{"controllers/QueuesController.html":{}}}],["asc",{"_index":664,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueService.html":{}}}],["asia/manila",{"_index":2064,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["assign",{"_index":43,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["assigned",{"_index":1147,"title":{},"body":{"injectables/AuthService.html":{}}}],["assigning",{"_index":1054,"title":{},"body":{"injectables/AuthService.html":{}}}],["assignment",{"_index":2658,"title":{},"body":{"controllers/UsersController.html":{}}}],["assignment'})@apiresponse({status",{"_index":2640,"title":{},"body":{"controllers/UsersController.html":{}}}],["assignments",{"_index":901,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["assignments'})@apiparam({name",{"_index":765,"title":{},"body":{"controllers/AuthController.html":{}}}],["assignrolestouser",{"_index":2508,"title":{},"body":{"injectables/RolesService.html":{}}}],["assignrolestouser(userid",{"_index":2513,"title":{},"body":{"injectables/RolesService.html":{}}}],["associated",{"_index":2329,"title":{},"body":{"injectables/QueueService.html":{}}}],["async",{"_index":234,"title":{},"body":{"injectables/AnnouncementService.html":{},"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/EmailService.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["attempt",{"_index":1003,"title":{},"body":{"injectables/AuthService.html":{}}}],["attempting",{"_index":1115,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth",{"_index":547,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/EmailService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth')@apibody({type",{"_index":832,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth')@useguards(jwtauthguard",{"_index":787,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth')@useguards(jwtauthguard)@get('profile",{"_index":802,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":944,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":531,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["auth.guard.ts",{"_index":1705,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":841,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/RequestWithUser.html":{}}}],["auth/auth.module",{"_index":302,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/decorators/roles.decorator",{"_index":535,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["auth/decorators/user.decorator",{"_index":537,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{}}}],["auth/dto/update",{"_index":1623,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth/guards/jwt",{"_index":530,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["auth/guards/roles.guard",{"_index":533,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["auth/jwt.strategy",{"_index":538,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["authcontroller",{"_index":746,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["authenticated",{"_index":550,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["authenticateduser",{"_index":476,"title":{"interfaces/AuthenticatedUser.html":{}},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authguard",{"_index":1707,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":1706,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":286,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":2884,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authorization",{"_index":2007,"title":{},"body":{"classes/QueueGateway.html":{}}}],["authservice",{"_index":840,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{},"overview.html":{}}}],["auto",{"_index":1335,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/QueueSchedulerService.html":{},"classes/RegisterDto.html":{}}}],["availability",{"_index":668,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["available",{"_index":578,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["average",{"_index":2339,"title":{},"body":{"injectables/QueueService.html":{}}}],["averagewaittime",{"_index":2343,"title":{},"body":{"injectables/QueueService.html":{}}}],["await",{"_index":253,"title":{},"body":{"injectables/AnnouncementService.html":{},"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/EmailService.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["aws",{"_index":2824,"title":{},"body":{"index.html":{}}}],["back",{"_index":1061,"title":{},"body":{"injectables/AuthService.html":{}}}],["backend",{"_index":2206,"title":{},"body":{"injectables/QueueService.html":{}}}],["backers",{"_index":2879,"title":{},"body":{"index.html":{}}}],["backward",{"_index":2588,"title":{},"body":{"entities/User.html":{}}}],["bad",{"_index":771,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["badrequestexception",{"_index":523,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('cannot",{"_index":657,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["badrequestexception('date",{"_index":567,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["badrequestexception('document",{"_index":1508,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["badrequestexception('failed",{"_index":916,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["badrequestexception('invalid",{"_index":651,"title":{},"body":{"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["badrequestexception('this",{"_index":742,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["badrequestexception('user",{"_index":1170,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception(`role",{"_index":1145,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception(`user",{"_index":1127,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception(passwordvalidation.message",{"_index":1041,"title":{},"body":{"injectables/AuthService.html":{}}}],["base32",{"_index":1867,"title":{},"body":{"injectables/OTPService.html":{}}}],["based",{"_index":2188,"title":{},"body":{"injectables/QueueService.html":{},"index.html":{}}}],["basic",{"_index":1129,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt",{"_index":988,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare",{"_index":1012,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.compare(logindto.password",{"_index":993,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.gensalt",{"_index":1043,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["bcrypt.hash(createuserdto.password",{"_index":2677,"title":{},"body":{"controllers/UsersController.html":{}}}],["bcrypt.hash(newpassword",{"_index":1171,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(password",{"_index":1045,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(updateuserdto.password",{"_index":1082,"title":{},"body":{"injectables/AuthService.html":{}}}],["before",{"_index":891,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{}}}],["beforeconnect",{"_index":350,"title":{},"body":{"modules/AppModule.html":{}}}],["being",{"_index":1070,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["belongs",{"_index":584,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["below",{"_index":345,"title":{},"body":{"modules/AppModule.html":{}}}],["better",{"_index":2088,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["between",{"_index":640,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["between(startdate",{"_index":712,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["between(startofday",{"_index":2101,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["between(todaystart",{"_index":2202,"title":{},"body":{"injectables/QueueService.html":{}}}],["bigint",{"_index":1558,"title":{},"body":{"entities/DocumentFile.html":{}}}],["birth",{"_index":1273,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["birth_certificate",{"_index":1392,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["birthdate",{"_index":1297,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["birthplace",{"_index":1300,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["board",{"_index":2871,"title":{},"body":{"index.html":{}}}],["body",{"_index":182,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["body('documentcategory",{"_index":1504,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["body('status",{"_index":595,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["book",{"_index":658,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["booked",{"_index":740,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["bookedslots",{"_index":698,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["bookedslots.includes(slot",{"_index":710,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["boolean",{"_index":138,"title":{},"body":{"entities/Announcement.html":{},"entities/Appointment.html":{},"injectables/AuthService.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"interfaces/FindAllOptions.html":{},"entities/OTP.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["bootstrap",{"_index":215,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["both",{"_index":2387,"title":{},"body":{"controllers/QueuesController.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["browse",{"_index":2893,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2891,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":1808,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["bucketname",{"_index":1718,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["building",{"_index":2791,"title":{},"body":{"index.html":{}}}],["bulacan",{"_index":107,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["bulacan'})@isstring()@isoptional",{"_index":54,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["bulak",{"_index":882,"title":{},"body":{"controllers/AuthController.html":{},"injectables/EmailService.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"interfaces/RequestWithUser.html":{}}}],["bulak_smart_connect",{"_index":2910,"title":{},"body":{"miscellaneous/variables.html":{}}}],["business",{"_index":1400,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["business_permit",{"_index":1399,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["calculate",{"_index":1868,"title":{},"body":{"injectables/OTPService.html":{},"injectables/QueueService.html":{}}}],["callback",{"_index":1496,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["callback(null",{"_index":1502,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["called",{"_index":2330,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["caller",{"_index":1702,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["callnext",{"_index":2142,"title":{},"body":{"injectables/QueueService.html":{}}}],["callnext(counterid",{"_index":2157,"title":{},"body":{"injectables/QueueService.html":{}}}],["canactivate",{"_index":2453,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":2458,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["cancel",{"_index":2103,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cancellation",{"_index":2114,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cancellations",{"_index":2110,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cancelled",{"_index":460,"title":{},"body":{"entities/Appointment.html":{},"injectables/AppointmentService.html":{},"entities/Queue.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"miscellaneous/enumerations.html":{}}}],["cancelledcount",{"_index":723,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["cancelledqueues",{"_index":2104,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cancelledqueues.length",{"_index":2108,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cancelledservingqueues",{"_index":2121,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cancelledservingqueues.length",{"_index":2123,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cascade",{"_index":395,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/QueueDetails.html":{}}}],["cascade'})@joincolumn({name",{"_index":1549,"title":{},"body":{"entities/DocumentFile.html":{},"entities/QueueDetails.html":{}}}],["catch",{"_index":680,"title":{},"body":{"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["category",{"_index":1506,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["category)'})@apiresponse({status",{"_index":1448,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["caught",{"_index":1136,"title":{},"body":{"injectables/AuthService.html":{}}}],["certificate",{"_index":1274,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["change",{"_index":1078,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{}}}],["changed",{"_index":1084,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["changed_at",{"_index":403,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["changed_by",{"_index":405,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["changedat",{"_index":385,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["changedby",{"_index":386,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["changing",{"_index":667,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueService.html":{}}}],["channel",{"_index":2848,"title":{},"body":{"index.html":{}}}],["character",{"_index":1185,"title":{},"body":{"injectables/AuthService.html":{}}}],["characters",{"_index":80,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["check",{"_index":583,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EmailService.html":{},"interfaces/FindAllOptions.html":{},"injectables/OTPService.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["checkexists",{"_index":2143,"title":{},"body":{"injectables/QueueService.html":{}}}],["checkexists(id",{"_index":2159,"title":{},"body":{"injectables/QueueService.html":{}}}],["checking",{"_index":743,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["checks",{"_index":359,"title":{},"body":{"modules/AppModule.html":{}}}],["checktimeslotavailability",{"_index":613,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["checktimeslotavailability(date",{"_index":622,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["citizen",{"_index":98,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["citizenrole",{"_index":1049,"title":{},"body":{"injectables/AuthService.html":{}}}],["citizenrole.id",{"_index":1052,"title":{},"body":{"injectables/AuthService.html":{}}}],["class",{"_index":0,"title":{"classes/AdminUpdateUserDto.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/QueueGateway.html":{},"classes/RegisterDto.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"injectables/EmailService.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/QueueGateway.html":{},"classes/RegisterDto.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"overview.html":{}}}],["cleanupexpiredotps",{"_index":1840,"title":{},"body":{"injectables/OTPService.html":{}}}],["clear",{"_index":2368,"title":{},"body":{"injectables/QueueService.html":{}}}],["clicks",{"_index":2833,"title":{},"body":{"index.html":{}}}],["client",{"_index":1975,"title":{},"body":{"classes/QueueGateway.html":{}}}],["client.id",{"_index":2014,"title":{},"body":{"classes/QueueGateway.html":{}}}],["client.join('queue_updates",{"_index":2026,"title":{},"body":{"classes/QueueGateway.html":{}}}],["client.join(`counter_${counterid",{"_index":2023,"title":{},"body":{"classes/QueueGateway.html":{}}}],["client.join(`queue_${queueid",{"_index":2018,"title":{},"body":{"classes/QueueGateway.html":{}}}],["clients",{"_index":2028,"title":{},"body":{"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["cloud",{"_index":2819,"title":{},"body":{"index.html":{}}}],["cluster_announcementmodule",{"_index":218,"title":{},"body":{"modules/AnnouncementModule.html":{},"overview.html":{}}}],["cluster_announcementmodule_exports",{"_index":219,"title":{},"body":{"modules/AnnouncementModule.html":{},"overview.html":{}}}],["cluster_announcementmodule_providers",{"_index":220,"title":{},"body":{"modules/AnnouncementModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":282,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":284,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":283,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appointmentmodule",{"_index":606,"title":{},"body":{"modules/AppointmentModule.html":{},"overview.html":{}}}],["cluster_appointmentmodule_exports",{"_index":607,"title":{},"body":{"modules/AppointmentModule.html":{},"overview.html":{}}}],["cluster_appointmentmodule_providers",{"_index":608,"title":{},"body":{"modules/AppointmentModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":934,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":936,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":935,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":937,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_documentapplicationsmodule",{"_index":1534,"title":{},"body":{"modules/DocumentApplicationsModule.html":{},"overview.html":{}}}],["cluster_documentapplicationsmodule_exports",{"_index":1535,"title":{},"body":{"modules/DocumentApplicationsModule.html":{},"overview.html":{}}}],["cluster_documentapplicationsmodule_providers",{"_index":1536,"title":{},"body":{"modules/DocumentApplicationsModule.html":{},"overview.html":{}}}],["cluster_queuemodule",{"_index":2035,"title":{},"body":{"modules/QueueModule.html":{},"overview.html":{}}}],["cluster_queuemodule_exports",{"_index":2037,"title":{},"body":{"modules/QueueModule.html":{},"overview.html":{}}}],["cluster_queuemodule_providers",{"_index":2036,"title":{},"body":{"modules/QueueModule.html":{},"overview.html":{}}}],["cluster_rolesmodule",{"_index":2500,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_rolesmodule_exports",{"_index":2502,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_rolesmodule_providers",{"_index":2501,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":2682,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":2683,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":2684,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":2685,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":346,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{}}}],["column",{"_index":144,"title":{},"body":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/OTP.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["column({default",{"_index":440,"title":{},"body":{"entities/Appointment.html":{},"entities/OTP.html":{}}}],["column({name",{"_index":399,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["column({nullable",{"_index":443,"title":{},"body":{"entities/Appointment.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{}}}],["column({type",{"_index":125,"title":{},"body":{"entities/Announcement.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/OTP.html":{},"entities/Queue.html":{}}}],["column({unique",{"_index":434,"title":{},"body":{"entities/Appointment.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["combine",{"_index":2304,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["come",{"_index":2840,"title":{},"body":{"index.html":{}}}],["compatibility",{"_index":2589,"title":{},"body":{"entities/User.html":{}}}],["complete",{"_index":48,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["completed",{"_index":459,"title":{},"body":{"entities/Appointment.html":{},"injectables/AppointmentService.html":{},"entities/Queue.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"miscellaneous/enumerations.html":{}}}],["completed_at",{"_index":1902,"title":{},"body":{"entities/Queue.html":{}}}],["completedat",{"_index":1898,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["completedcount",{"_index":722,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueService.html":{}}}],["completedqueues",{"_index":2341,"title":{},"body":{"injectables/QueueService.html":{}}}],["completedqueues.length",{"_index":2344,"title":{},"body":{"injectables/QueueService.html":{}}}],["completedqueues.reduce((total",{"_index":2346,"title":{},"body":{"injectables/QueueService.html":{}}}],["completion",{"_index":2133,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["component",{"_index":1095,"title":{},"body":{"injectables/AuthService.html":{}}}],["components",{"_index":1668,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["concurrent",{"_index":2080,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["config/database.config",{"_index":300,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":294,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":315,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":295,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"injectables/EmailService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{}}}],["configservice.get('db_host",{"_index":322,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_logging",{"_index":337,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_name",{"_index":328,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_password",{"_index":326,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_port",{"_index":324,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_synchronize",{"_index":332,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_timezone",{"_index":368,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_username",{"_index":325,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('jwt_secret",{"_index":951,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('node_env",{"_index":352,"title":{},"body":{"modules/AppModule.html":{}}}],["configured",{"_index":1799,"title":{},"body":{"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{}}}],["confirmed",{"_index":458,"title":{},"body":{"entities/Appointment.html":{},"injectables/AppointmentService.html":{},"miscellaneous/enumerations.html":{}}}],["confirmedcount",{"_index":721,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["conflict",{"_index":785,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["conflictexception",{"_index":987,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["conflictexception('email",{"_index":1033,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["conflictexception('username",{"_index":1036,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["conn",{"_index":354,"title":{},"body":{"modules/AppModule.html":{}}}],["conn.query('set",{"_index":360,"title":{},"body":{"modules/AppModule.html":{}}}],["conn.query(`set",{"_index":366,"title":{},"body":{"modules/AppModule.html":{}}}],["connect",{"_index":885,"title":{},"body":{"controllers/AuthController.html":{},"injectables/EmailService.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"interfaces/RequestWithUser.html":{}}}],["connected",{"_index":2013,"title":{},"body":{"classes/QueueGateway.html":{}}}],["connection",{"_index":351,"title":{},"body":{"modules/AppModule.html":{}}}],["consistent",{"_index":1057,"title":{},"body":{"injectables/AuthService.html":{}}}],["console",{"_index":340,"title":{},"body":{"modules/AppModule.html":{}}}],["console.error",{"_index":713,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["console.error('admin",{"_index":1162,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.error('error",{"_index":736,"title":{},"body":{"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["console.error('forgot",{"_index":929,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["console.error('invalid",{"_index":2359,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.error('login",{"_index":1028,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.error('registration",{"_index":886,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["console.error('reset",{"_index":933,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["console.error('user",{"_index":1106,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.error(`error",{"_index":682,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueService.html":{}}}],["console.log",{"_index":1114,"title":{},"body":{"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/QueueService.html":{}}}],["console.log('comparing",{"_index":1009,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('creating",{"_index":2225,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.log('found",{"_index":2255,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["console.log('generated",{"_index":1024,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('get",{"_index":2385,"title":{},"body":{"controllers/QueuesController.html":{}}}],["console.log('getting",{"_index":2279,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.log('login",{"_index":861,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["console.log('password",{"_index":1013,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('processing",{"_index":2399,"title":{},"body":{"controllers/QueuesController.html":{}}}],["console.log('queue",{"_index":2243,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.log('received",{"_index":1505,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["console.log('stored",{"_index":1007,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('user",{"_index":1004,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(`calculated",{"_index":2278,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.log(`creating",{"_index":2210,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.log(`deleted",{"_index":686,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["console.log(`finding",{"_index":2299,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.log(`found",{"_index":2264,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.log(`getting",{"_index":2263,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.log(`password",{"_index":1173,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(`pending",{"_index":2277,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.log(`queue",{"_index":2269,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.log(`returning",{"_index":2306,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["console.log(`serving",{"_index":2272,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.log(`updated",{"_index":678,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["console.log(`updating",{"_index":2254,"title":{},"body":{"injectables/QueueService.html":{}}}],["const",{"_index":251,"title":{},"body":{"injectables/AnnouncementService.html":{},"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/EmailService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":235,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/EmailService.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["constructor(announcementrepository",{"_index":236,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["constructor(appointmentrepository",{"_index":619,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["constructor(configservice",{"_index":1572,"title":{},"body":{"injectables/EmailService.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService-1.html":{}}}],["constructor(otprepository",{"_index":1842,"title":{},"body":{"injectables/OTPService.html":{}}}],["constructor(private",{"_index":195,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppController.html":{},"controllers/AppointmentController.html":{},"interfaces/AuthenticatedUser.html":{},"injectables/EmailService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService-1.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser-2.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{}}}],["constructor(queuerepository",{"_index":2056,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["constructor(queueservice",{"_index":1966,"title":{},"body":{"classes/QueueGateway.html":{}}}],["constructor(reflector",{"_index":2496,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(rolesrepository",{"_index":2510,"title":{},"body":{"injectables/RolesService.html":{}}}],["constructor(usersrepository",{"_index":962,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["contact",{"_index":57,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["contact_number",{"_index":2560,"title":{},"body":{"entities/User.html":{}}}],["contactnumber",{"_index":21,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["contain",{"_index":1177,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{}}}],["containing",{"_index":1282,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["content",{"_index":1754,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{}}}],["context",{"_index":2499,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":2462,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":2461,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":2463,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["controller",{"_index":147,"title":{"controllers/AnnouncementController.html":{},"controllers/AppController.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AnnouncementController.html":{},"controllers/AppController.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('announcements",{"_index":194,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["controller('appointments",{"_index":544,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["controller('auth",{"_index":853,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["controller('document",{"_index":1486,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["controller('queues",{"_index":2380,"title":{},"body":{"controllers/QueuesController.html":{}}}],["controller('roles",{"_index":2489,"title":{},"body":{"controllers/RolesController.html":{}}}],["controller('users",{"_index":2664,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":149,"title":{},"body":{"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["convert",{"_index":2351,"title":{},"body":{"injectables/QueueService.html":{}}}],["converting",{"_index":892,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["copy",{"_index":1272,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["cors",{"_index":2002,"title":{},"body":{"classes/QueueGateway.html":{}}}],["count",{"_index":1630,"title":{},"body":{"interfaces/FindAllOptions.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["counter",{"_index":1212,"title":{"entities/Counter.html":{}},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"coverage.html":{}}}],["counter.currentqueue",{"_index":1904,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{}}}],["counter.currentqueue.completedat",{"_index":2318,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter.currentqueue.status",{"_index":2317,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter.currentqueueid",{"_index":2321,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter.id",{"_index":2336,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter.name",{"_index":2326,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter/entities/counter.entity",{"_index":1920,"title":{},"body":{"entities/Queue.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["counter_number",{"_index":1906,"title":{},"body":{"entities/Queue.html":{}}}],["counterid",{"_index":1983,"title":{},"body":{"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["countername",{"_index":2335,"title":{},"body":{"injectables/QueueService.html":{}}}],["counternumber",{"_index":1899,"title":{},"body":{"entities/Queue.html":{},"controllers/QueuesController.html":{},"classes/UpdateQueueDto.html":{}}}],["counterrepository",{"_index":2153,"title":{},"body":{"injectables/QueueService.html":{}}}],["counters",{"_index":2353,"title":{},"body":{"injectables/QueueService.html":{}}}],["counterstatus",{"_index":1225,"title":{},"body":{"entities/Counter.html":{},"injectables/QueueService.html":{},"miscellaneous/enumerations.html":{}}}],["counterstatus.active",{"_index":1232,"title":{},"body":{"entities/Counter.html":{}}}],["counting",{"_index":2195,"title":{},"body":{"injectables/QueueService.html":{}}}],["counts",{"_index":717,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["courses",{"_index":2854,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":2701,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":154,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create')@useguards(jwtauthguard",{"_index":2638,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(@body",{"_index":197,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["create(createannouncementdto",{"_index":159,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{}}}],["create(createappointmentdto",{"_index":474,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["create(createdto",{"_index":1426,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["create(createqueuedto",{"_index":2161,"title":{},"body":{"injectables/QueueService.html":{}}}],["create(createuserdto",{"_index":1700,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["createannouncementdto",{"_index":160,"title":{"classes/CreateAnnouncementDto.html":{}},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"classes/CreateAnnouncementDto.html":{},"classes/UpdateAnnouncementDto.html":{},"coverage.html":{}}}],["createappointmentdto",{"_index":475,"title":{"classes/CreateAppointmentDto.html":{}},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{},"coverage.html":{}}}],["createappointmentdto.userid",{"_index":551,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["created",{"_index":480,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/MinioService-1.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{}}}],["created_at",{"_index":1362,"title":{},"body":{"entities/DocumentApplication.html":{},"entities/Queue.html":{},"entities/User.html":{}}}],["createdat",{"_index":116,"title":{},"body":{"entities/Announcement.html":{},"injectables/AnnouncementService.html":{},"entities/Appointment.html":{},"entities/DocumentApplication.html":{},"interfaces/FindAllOptions.html":{},"entities/OTP.html":{},"entities/Queue.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["createdatecolumn",{"_index":123,"title":{},"body":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/OTP.html":{},"entities/Queue.html":{},"entities/User.html":{}}}],["createdatecolumn({name",{"_index":402,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/Queue.html":{},"entities/User.html":{}}}],["createdby",{"_index":117,"title":{},"body":{"entities/Announcement.html":{},"classes/CreateAnnouncementDto.html":{}}}],["createdocumentapplicationdto",{"_index":1264,"title":{"classes/CreateDocumentApplicationDto.html":{}},"body":{"classes/CreateDocumentApplicationDto.html":{},"controllers/DocumentApplicationsController.html":{},"classes/UpdateDocumentApplicationDto.html":{},"coverage.html":{}}}],["createdto",{"_index":1429,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["createparamdecorator",{"_index":2447,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"miscellaneous/variables.html":{}}}],["createquerybuilder",{"_index":1677,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["createquerybuilder('user",{"_index":1639,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["createqueuedto",{"_index":1302,"title":{"classes/CreateQueueDto.html":{}},"body":{"classes/CreateQueueDto.html":{},"injectables/QueueService.html":{},"coverage.html":{}}}],["createqueuedto.address",{"_index":2235,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.appointmenttype",{"_index":2238,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.firstname",{"_index":2232,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.isguest",{"_index":2222,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.lastname",{"_index":2233,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.middleinitial",{"_index":2234,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.phonenumber",{"_index":2236,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.reasonofvisit",{"_index":2237,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.userid",{"_index":2219,"title":{},"body":{"injectables/QueueService.html":{}}}],["creates",{"_index":2639,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuserdto",{"_index":820,"title":{"classes/CreateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":872,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["createuserdto.otp",{"_index":873,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["creating",{"_index":1703,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["creation",{"_index":2608,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["credentials",{"_index":858,"title":{},"body":{"controllers/AuthController.html":{},"classes/QueueGateway.html":{},"interfaces/RequestWithUser.html":{}}}],["credentials'})@apibody({type",{"_index":810,"title":{},"body":{"controllers/AuthController.html":{}}}],["credentials'})@apiresponse({status",{"_index":777,"title":{},"body":{"controllers/AuthController.html":{}}}],["cron",{"_index":2073,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cron('59",{"_index":2060,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cruz",{"_index":1296,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["ctx",{"_index":2449,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":2450,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"miscellaneous/variables.html":{}}}],["current",{"_index":1888,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{},"injectables/QueueService.html":{},"controllers/UsersController.html":{}}}],["current_queue_id",{"_index":1219,"title":{},"body":{"entities/Counter.html":{}}}],["currently",{"_index":2267,"title":{},"body":{"injectables/QueueService.html":{}}}],["currentqueue",{"_index":1214,"title":{},"body":{"entities/Counter.html":{},"injectables/QueueService.html":{}}}],["currentqueueid",{"_index":1215,"title":{},"body":{"entities/Counter.html":{}}}],["currentuser",{"_index":2668,"title":{},"body":{"controllers/UsersController.html":{}}}],["currentuser.id",{"_index":2669,"title":{},"body":{"controllers/UsersController.html":{}}}],["currentuser.roles.some((role",{"_index":2670,"title":{},"body":{"controllers/UsersController.html":{}}}],["daily",{"_index":2062,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["dashboard",{"_index":1602,"title":{},"body":{"injectables/EmailService.html":{}}}],["data",{"_index":342,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/CreateDocumentApplicationDto.html":{},"controllers/DocumentApplicationsController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"miscellaneous/variables.html":{}}}],["data')@apioperation({summary",{"_index":1471,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["data'})@apiresponse({status",{"_index":774,"title":{},"body":{"controllers/AuthController.html":{}}}],["database",{"_index":327,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/OTPService.html":{},"injectables/QueueService.html":{},"miscellaneous/variables.html":{}}}],["databaseconfig",{"_index":299,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["datasource",{"_index":2786,"title":{},"body":{"miscellaneous/functions.html":{}}}],["date",{"_index":122,"title":{},"body":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"entities/Queue.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"dependencies.html":{}}}],["date')@useguards(jwtauthguard",{"_index":502,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["date().toisostring",{"_index":1810,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["date(today",{"_index":2197,"title":{},"body":{"injectables/QueueService.html":{}}}],["date(today.getfullyear",{"_index":2090,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["date.getday",{"_index":654,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["datestr",{"_index":2190,"title":{},"body":{"injectables/QueueService.html":{}}}],["day",{"_index":2076,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["dayofweek",{"_index":653,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["dd",{"_index":734,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["death",{"_index":1398,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["death_certificate",{"_index":1397,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["debug",{"_index":1006,"title":{},"body":{"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/QueueService.html":{}}}],["debugging",{"_index":2223,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["declarations",{"_index":214,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decline",{"_index":1405,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["decorators",{"_index":32,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"controllers/AppController.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"classes/LoginDto.html":{},"entities/OTP.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{}}}],["decorators/roles.decorator",{"_index":846,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["deeper",{"_index":2850,"title":{},"body":{"index.html":{}}}],["default",{"_index":34,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"entities/Appointment.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"injectables/EmailService.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["default_role_id",{"_index":2563,"title":{},"body":{"entities/User.html":{}}}],["defaultrole",{"_index":857,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/RequestWithUser.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["defaultroleid",{"_index":18,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["defaultstrategy",{"_index":947,"title":{},"body":{"modules/AuthModule.html":{}}}],["define",{"_index":2457,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["defined",{"_index":39,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"injectables/EmailService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dela",{"_index":1295,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["delete",{"_index":185,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["delete(':id",{"_index":176,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["delete(':id')@apioperation({summary",{"_index":1459,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["delete(':id')@httpcode(httpstatus.no_content)@apioperation({summary",{"_index":514,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["delete(':id')@useguards(rolesguard)@roles('admin",{"_index":2650,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleted",{"_index":1529,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deletefile",{"_index":1720,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["deletefile(objectname",{"_index":1724,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["deleting",{"_index":687,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/MinioService-1.html":{}}}],["deletion",{"_index":603,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["dependencies",{"_index":212,"title":{"dependencies.html":{}},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":2811,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":2823,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":2817,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":2832,"title":{},"body":{"index.html":{}}}],["deprecated",{"_index":2527,"title":{},"body":{"injectables/RolesService.html":{}}}],["desc",{"_index":257,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["desc').skip(skip).take(limit",{"_index":1647,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["description",{"_index":8,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentApplicationsController.html":{},"classes/LoginDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"index.html":{},"properties.html":{}}}],["detail",{"_index":2294,"title":{},"body":{"injectables/QueueService.html":{}}}],["detail.queue.id",{"_index":2364,"title":{},"body":{"injectables/QueueService.html":{}}}],["details",{"_index":1283,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"injectables/EmailService.html":{},"entities/Queue.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["details.entity",{"_index":1919,"title":{},"body":{"entities/Queue.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["details.entity.ts",{"_index":1925,"title":{},"body":{"entities/QueueDetails.html":{},"coverage.html":{}}}],["details.entity.ts:14",{"_index":1932,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:17",{"_index":1945,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:21",{"_index":1944,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:24",{"_index":1950,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:28",{"_index":1949,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:31",{"_index":1931,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:34",{"_index":1936,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:37",{"_index":1938,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:40",{"_index":1927,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:43",{"_index":1940,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:46",{"_index":1947,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:49",{"_index":1929,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:52",{"_index":1934,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.queue",{"_index":1910,"title":{},"body":{"entities/Queue.html":{}}}],["details?.address",{"_index":2411,"title":{},"body":{"controllers/QueuesController.html":{}}}],["details?.firstname",{"_index":2407,"title":{},"body":{"controllers/QueuesController.html":{}}}],["details?.lastname",{"_index":2408,"title":{},"body":{"controllers/QueuesController.html":{}}}],["details?.middleinitial",{"_index":2409,"title":{},"body":{"controllers/QueuesController.html":{}}}],["details?.phonenumber",{"_index":2412,"title":{},"body":{"controllers/QueuesController.html":{}}}],["details?.reasonofvisit",{"_index":2410,"title":{},"body":{"controllers/QueuesController.html":{}}}],["detailsmap",{"_index":2281,"title":{},"body":{"injectables/QueueService.html":{}}}],["detailsmap[detail.queueid",{"_index":2293,"title":{},"body":{"injectables/QueueService.html":{}}}],["detailsmap[queue.id",{"_index":2305,"title":{},"body":{"injectables/QueueService.html":{}}}],["development",{"_index":344,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["devtools",{"_index":2860,"title":{},"body":{"index.html":{}}}],["didn't",{"_index":1596,"title":{},"body":{"injectables/EmailService.html":{}}}],["different",{"_index":718,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["digits",{"_index":1863,"title":{},"body":{"injectables/OTPService.html":{},"injectables/QueueService.html":{}}}],["disable",{"_index":356,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["disconnected",{"_index":2017,"title":{},"body":{"classes/QueueGateway.html":{}}}],["discord",{"_index":2847,"title":{},"body":{"index.html":{}}}],["dive",{"_index":2849,"title":{},"body":{"index.html":{}}}],["document",{"_index":416,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"classes/UpdateDocumentApplicationDto.html":{},"coverage.html":{}}}],["document_category",{"_index":1552,"title":{},"body":{"entities/DocumentFile.html":{}}}],["documentapplication",{"_index":390,"title":{"entities/DocumentApplication.html":{}},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentApplication.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"coverage.html":{}}}],["documentapplicationscontroller",{"_index":1418,"title":{"controllers/DocumentApplicationsController.html":{}},"body":{"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"coverage.html":{}}}],["documentapplicationsmodule",{"_index":287,"title":{"modules/DocumentApplicationsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules.html":{},"overview.html":{}}}],["documentapplicationsservice",{"_index":1481,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"coverage.html":{},"overview.html":{}}}],["documentation",{"_index":2702,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["documentcategory",{"_index":1469,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{}}}],["documentfile",{"_index":1364,"title":{"entities/DocumentFile.html":{}},"body":{"entities/DocumentApplication.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"coverage.html":{}}}],["doe",{"_index":105,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["doe'})@isstring()@isnotempty",{"_index":2433,"title":{},"body":{"classes/RegisterDto.html":{}}}],["doe'})@isstring()@isoptional",{"_index":67,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["doesn't",{"_index":2265,"title":{},"body":{"injectables/QueueService.html":{}}}],["don't",{"_index":586,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["dotenv",{"_index":2756,"title":{},"body":{"dependencies.html":{}}}],["download",{"_index":1452,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["dropschema",{"_index":348,"title":{},"body":{"modules/AppModule.html":{}}}],["dto",{"_index":9,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["dto/create",{"_index":191,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/login.dto",{"_index":842,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["dto/register.dto",{"_index":843,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["dto/update",{"_index":193,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["dto/user",{"_index":2661,"title":{},"body":{"controllers/UsersController.html":{}}}],["during",{"_index":1135,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueSchedulerService.html":{}}}],["e.g",{"_index":73,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["e2e",{"_index":2807,"title":{},"body":{"index.html":{}}}],["e74c3c",{"_index":1614,"title":{},"body":{"injectables/EmailService.html":{}}}],["each",{"_index":1346,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/QueueService.html":{}}}],["eager",{"_index":1379,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["earlier",{"_index":2274,"title":{},"body":{"injectables/QueueService.html":{}}}],["east",{"_index":1804,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["easy",{"_index":2290,"title":{},"body":{"injectables/QueueService.html":{}}}],["efficient",{"_index":2792,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":2815,"title":{},"body":{"index.html":{}}}],["email",{"_index":22,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"classes/CreateUserDto.html":{},"injectables/EmailService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["email.service",{"_index":1852,"title":{},"body":{"injectables/OTPService.html":{}}}],["emailorusername",{"_index":1711,"title":{},"body":{"classes/LoginDto.html":{}}}],["emailregex",{"_index":1062,"title":{},"body":{"injectables/AuthService.html":{}}}],["emailregex.test(email",{"_index":1064,"title":{},"body":{"injectables/AuthService.html":{}}}],["emailservice",{"_index":291,"title":{"injectables/EmailService.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/EmailService.html":{},"injectables/OTPService.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{},"overview.html":{}}}],["empty",{"_index":2297,"title":{},"body":{"injectables/QueueService.html":{}}}],["enabled",{"_index":871,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["encoding",{"_index":1866,"title":{},"body":{"injectables/OTPService.html":{}}}],["end",{"_index":575,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["enddate",{"_index":507,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["endofday",{"_index":2067,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["endofday.toisostring",{"_index":2098,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["endpoint",{"_index":1737,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"controllers/QueuesController.html":{}}}],["endpoints",{"_index":921,"title":{},"body":{"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{}}}],["endpoint}:${port",{"_index":1800,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["ensure",{"_index":2813,"title":{},"body":{"index.html":{}}}],["ensurebucketexists",{"_index":1767,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["ensures",{"_index":2207,"title":{},"body":{"injectables/QueueService.html":{}}}],["ensuring",{"_index":1807,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["enterprise",{"_index":2862,"title":{},"body":{"index.html":{}}}],["entities",{"_index":114,"title":{},"body":{"entities/Announcement.html":{},"modules/AppModule.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/OTP.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["entities/announcement.entity",{"_index":228,"title":{},"body":{"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{}}}],["entities/application",{"_index":1540,"title":{},"body":{"modules/DocumentApplicationsModule.html":{}}}],["entities/appointment.entity",{"_index":536,"title":{},"body":{"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["entities/document",{"_index":1290,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["entities/otp.entity",{"_index":312,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/OTPService.html":{}}}],["entities/queue",{"_index":2047,"title":{},"body":{"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["entities/queue.entity",{"_index":2046,"title":{},"body":{"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/UpdateQueueDto.html":{}}}],["entities/role.entity",{"_index":2504,"title":{},"body":{"modules/RolesModule.html":{},"injectables/RolesService.html":{}}}],["entities/user.entity",{"_index":1622,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entity",{"_index":112,"title":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/OTP.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{}},"body":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/OTP.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{},"coverage.html":{}}}],["entity('announcements",{"_index":146,"title":{},"body":{"entities/Announcement.html":{}}}],["entity('application_status_history",{"_index":418,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["entity('appointments",{"_index":461,"title":{},"body":{"entities/Appointment.html":{}}}],["entity('counters",{"_index":1231,"title":{},"body":{"entities/Counter.html":{}}}],["entity('document_applications",{"_index":1412,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["entity('document_files",{"_index":1567,"title":{},"body":{"entities/DocumentFile.html":{}}}],["entity('otps",{"_index":1837,"title":{},"body":{"entities/OTP.html":{}}}],["entity('queue_details",{"_index":1952,"title":{},"body":{"entities/QueueDetails.html":{}}}],["entity('queues",{"_index":1922,"title":{},"body":{"entities/Queue.html":{}}}],["entity('roles",{"_index":2477,"title":{},"body":{"entities/Role.html":{}}}],["entity('users",{"_index":2586,"title":{},"body":{"entities/User.html":{}}}],["entity{.ts,.js",{"_index":330,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["enum",{"_index":448,"title":{},"body":{"entities/Appointment.html":{},"entities/Counter.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"entities/Queue.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["enumerations",{"_index":2778,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":334,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["environments",{"_index":349,"title":{},"body":{"modules/AppModule.html":{}}}],["er_dup_entry",{"_index":1109,"title":{},"body":{"injectables/AuthService.html":{}}}],["err",{"_index":1134,"title":{},"body":{"injectables/AuthService.html":{},"controllers/QueuesController.html":{}}}],["error",{"_index":681,"title":{},"body":{"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["error('failed",{"_index":2314,"title":{},"body":{"injectables/QueueService.html":{}}}],["error('invalid",{"_index":2423,"title":{},"body":{"controllers/QueuesController.html":{}}}],["error('jwt_secret",{"_index":1198,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["error('queue",{"_index":2425,"title":{},"body":{"controllers/QueuesController.html":{}}}],["error('unauthorized",{"_index":2672,"title":{},"body":{"controllers/UsersController.html":{}}}],["error('user",{"_index":2524,"title":{},"body":{"injectables/RolesService.html":{}}}],["error(`failed",{"_index":2313,"title":{},"body":{"injectables/QueueService.html":{}}}],["error.code",{"_index":1108,"title":{},"body":{"injectables/AuthService.html":{}}}],["error.message",{"_index":865,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{}}}],["errormessage",{"_index":2311,"title":{},"body":{"injectables/QueueService.html":{}}}],["errors",{"_index":1112,"title":{},"body":{"injectables/AuthService.html":{}}}],["eslint",{"_index":995,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{},"controllers/UsersController.html":{}}}],["eslint/no",{"_index":999,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["estimated_wait_time",{"_index":1912,"title":{},"body":{"entities/Queue.html":{}}}],["estimatedwaittime",{"_index":1900,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["estimation",{"_index":2214,"title":{},"body":{"injectables/QueueService.html":{}}}],["etc",{"_index":1838,"title":{},"body":{"entities/OTP.html":{}}}],["event",{"_index":2027,"title":{},"body":{"classes/QueueGateway.html":{}}}],["example",{"_index":37,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"index.html":{}}}],["exceptions",{"_index":1163,"title":{},"body":{"injectables/AuthService.html":{}}}],["execution",{"_index":2081,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["executioncontext",{"_index":2448,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":1141,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{}}}],["existing",{"_index":1069,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/OTPService.html":{},"injectables/QueueService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["existingappointment",{"_index":741,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["existingappointments",{"_index":695,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["existingappointments.map",{"_index":699,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["existinguser",{"_index":1658,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["existinguserbyemail",{"_index":1032,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["existinguserbyemail.id",{"_index":1073,"title":{},"body":{"injectables/AuthService.html":{}}}],["existinguserbyusername",{"_index":1035,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["existinguserbyusername.id",{"_index":1076,"title":{},"body":{"injectables/AuthService.html":{}}}],["exists",{"_index":866,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService-1.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["exists'})@apibearerauth('jwt",{"_index":786,"title":{},"body":{"controllers/AuthController.html":{}}}],["exists'})@apibody({type",{"_index":817,"title":{},"body":{"controllers/AuthController.html":{}}}],["expectation",{"_index":2010,"title":{},"body":{"classes/QueueGateway.html":{}}}],["expects",{"_index":2355,"title":{},"body":{"injectables/QueueService.html":{}}}],["experience",{"_index":2852,"title":{},"body":{"index.html":{}}}],["expire",{"_index":1594,"title":{},"body":{"injectables/EmailService.html":{}}}],["expired",{"_index":876,"title":{},"body":{"controllers/AuthController.html":{},"injectables/OTPService.html":{},"interfaces/RequestWithUser.html":{}}}],["expiresat",{"_index":1828,"title":{},"body":{"entities/OTP.html":{},"injectables/OTPService.html":{}}}],["expiresat.setminutes(expiresat.getminutes",{"_index":1871,"title":{},"body":{"injectables/OTPService.html":{}}}],["expiresin",{"_index":953,"title":{},"body":{"modules/AuthModule.html":{}}}],["expiry",{"_index":1778,"title":{},"body":{"injectables/MinioService-1.html":{},"injectables/OTPService.html":{}}}],["expiryminutes",{"_index":1869,"title":{},"body":{"injectables/OTPService.html":{}}}],["export",{"_index":99,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"injectables/EmailService.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":217,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":1480,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":1468,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["extends",{"_index":13,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AuthController.html":{},"interfaces/AuthenticatedUser.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateUserDto.html":{}}}],["extension",{"_index":72,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["extract",{"_index":2362,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["extraction",{"_index":2308,"title":{},"body":{"injectables/QueueService.html":{}}}],["extractjwt",{"_index":1189,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":1202,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["f39c12",{"_index":1612,"title":{},"body":{"injectables/EmailService.html":{}}}],["failed",{"_index":900,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/MinioService.html":{},"interfaces/RequestWithUser.html":{}}}],["failing",{"_index":2298,"title":{},"body":{"injectables/QueueService.html":{}}}],["false",{"_index":266,"title":{},"body":{"injectables/AnnouncementService.html":{},"modules/AppModule.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"entities/QueueDetails.html":{},"injectables/QueueSchedulerService.html":{},"entities/Role.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["false})@isoptional()@isenum(applicationstatus",{"_index":2540,"title":{},"body":{"classes/UpdateDocumentApplicationDto.html":{}}}],["false})@isoptional()@isstring",{"_index":1275,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["false})@joincolumn({name",{"_index":396,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["fast",{"_index":2827,"title":{},"body":{"index.html":{}}}],["features",{"_index":2836,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":2282,"title":{},"body":{"injectables/QueueService.html":{}}}],["fetching",{"_index":2295,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["few",{"_index":2829,"title":{},"body":{"index.html":{}}}],["field",{"_index":2444,"title":{},"body":{"classes/RegisterDto.html":{}}}],["fields",{"_index":1046,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"injectables/EmailService.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["file.application",{"_index":1366,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["file.buffer",{"_index":1752,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["file.entity",{"_index":1390,"title":{},"body":{"entities/DocumentApplication.html":{},"modules/DocumentApplicationsModule.html":{}}}],["file.entity.ts",{"_index":1543,"title":{},"body":{"entities/DocumentFile.html":{},"coverage.html":{}}}],["file.entity.ts:17",{"_index":1562,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.entity.ts:20",{"_index":1551,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.entity.ts:23",{"_index":1556,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.entity.ts:26",{"_index":1561,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.entity.ts:29",{"_index":1559,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.entity.ts:32",{"_index":1564,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.entity.ts:35",{"_index":1554,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.entity.ts:38",{"_index":1566,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.entity.ts:45",{"_index":1550,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.mimetype",{"_index":1755,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["file.mimetype.match(/\\/(jpg|jpeg|png|pdf",{"_index":1497,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["file.originalname",{"_index":1757,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["file.size",{"_index":1753,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["file.size.tostring",{"_index":1812,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["file_name",{"_index":1555,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file_size",{"_index":1557,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file_type",{"_index":1560,"title":{},"body":{"entities/DocumentFile.html":{}}}],["filefilter",{"_index":1495,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["fileid",{"_index":1455,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["fileinterceptor",{"_index":1478,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["fileinterceptor('file",{"_index":1489,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["filename",{"_index":1544,"title":{},"body":{"entities/DocumentFile.html":{}}}],["files",{"_index":1355,"title":{},"body":{"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/MinioService-1.html":{}}}],["files.push(obj",{"_index":1823,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["filesize",{"_index":1491,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{}}}],["filetype",{"_index":1545,"title":{},"body":{"entities/DocumentFile.html":{}}}],["filter",{"_index":1643,"title":{},"body":{"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"classes/UserQueryDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["finalisguest",{"_index":2229,"title":{},"body":{"injectables/QueueService.html":{}}}],["finally",{"_index":2127,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["find",{"_index":1166,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"injectables/RolesService.html":{}}}],["findall",{"_index":155,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findall(options",{"_index":1634,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["findall(query",{"_index":2642,"title":{},"body":{"controllers/UsersController.html":{}}}],["findall(status",{"_index":1430,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["findallbyuser",{"_index":614,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["findallbyuser(userid",{"_index":626,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["findalloptions",{"_index":1618,"title":{"interfaces/FindAllOptions.html":{}},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["findbyappointmentnumber",{"_index":467,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["findbyappointmentnumber(@param('number",{"_index":581,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["findbyappointmentnumber(appointmentnumber",{"_index":489,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["findbyemail",{"_index":2688,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyemail(email",{"_index":1698,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["findbyids",{"_index":2528,"title":{},"body":{"injectables/RolesService.html":{}}}],["findbyname",{"_index":2509,"title":{},"body":{"injectables/RolesService.html":{}}}],["findbyname(name",{"_index":2516,"title":{},"body":{"injectables/RolesService.html":{}}}],["findbyqueuenumber",{"_index":2144,"title":{},"body":{"injectables/QueueService.html":{}}}],["findbyqueuenumber(queuenumber",{"_index":2164,"title":{},"body":{"injectables/QueueService.html":{}}}],["findbystatus",{"_index":2145,"title":{},"body":{"injectables/QueueService.html":{}}}],["findbystatus(status",{"_index":2166,"title":{},"body":{"injectables/QueueService.html":{}}}],["findbystatuswithdetails",{"_index":2146,"title":{},"body":{"injectables/QueueService.html":{}}}],["findbystatuswithdetails(status",{"_index":2168,"title":{},"body":{"injectables/QueueService.html":{}}}],["findbyuseridwithdetails",{"_index":2147,"title":{},"body":{"injectables/QueueService.html":{}}}],["findbyuseridwithdetails(userid",{"_index":2170,"title":{},"body":{"injectables/QueueService.html":{}}}],["findbyusername",{"_index":2689,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyusername(username",{"_index":1699,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["finding",{"_index":1167,"title":{},"body":{"injectables/AuthService.html":{}}}],["findone",{"_index":156,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone(@param('id",{"_index":203,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/RolesController.html":{}}}],["findone(id",{"_index":166,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["finduserappointments",{"_index":468,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["finduserappointments(@user",{"_index":560,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["finduserappointments(user",{"_index":494,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["finduserbyemail",{"_index":956,"title":{},"body":{"injectables/AuthService.html":{}}}],["finduserbyemail(email",{"_index":970,"title":{},"body":{"injectables/AuthService.html":{}}}],["first",{"_index":62,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["first_name",{"_index":1930,"title":{},"body":{"entities/QueueDetails.html":{},"entities/User.html":{}}}],["firstname",{"_index":23,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Appointment.html":{},"injectables/AuthService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["fixed",{"_index":2079,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["fk_appointment_user",{"_index":453,"title":{},"body":{"entities/Appointment.html":{}}}],["fk_current_queue",{"_index":1220,"title":{},"body":{"entities/Counter.html":{}}}],["fk_queue_id",{"_index":1943,"title":{},"body":{"entities/QueueDetails.html":{}}}],["fk_user_id",{"_index":1948,"title":{},"body":{"entities/QueueDetails.html":{}}}],["flag",{"_index":2129,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["flatten",{"_index":2397,"title":{},"body":{"controllers/QueuesController.html":{}}}],["fns",{"_index":645,"title":{},"body":{"injectables/AppointmentService.html":{},"dependencies.html":{}}}],["focus",{"_index":2835,"title":{},"body":{"index.html":{}}}],["follow",{"_index":2865,"title":{},"body":{"index.html":{}}}],["following",{"_index":1593,"title":{},"body":{"injectables/EmailService.html":{}}}],["forbidden",{"_index":779,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["foreign",{"_index":357,"title":{},"body":{"modules/AppModule.html":{}}}],["foreign_key_checks=0",{"_index":361,"title":{},"body":{"modules/AppModule.html":{}}}],["foreign_key_checks=1",{"_index":372,"title":{},"body":{"modules/AppModule.html":{}}}],["foreignkeyconstraintname",{"_index":452,"title":{},"body":{"entities/Appointment.html":{},"entities/Counter.html":{},"entities/QueueDetails.html":{}}}],["forgotpassword",{"_index":749,"title":{},"body":{"controllers/AuthController.html":{}}}],["forgotpassword(@body",{"_index":922,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["forgotpassword(undefined",{"_index":792,"title":{},"body":{"controllers/AuthController.html":{}}}],["form",{"_index":1281,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["form_data",{"_index":1368,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["format",{"_index":641,"title":{},"body":{"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["format(today",{"_index":731,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["formats",{"_index":2465,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["formdata",{"_index":1269,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{}}}],["forwardref",{"_index":2001,"title":{},"body":{"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["found",{"_index":262,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["found'})@apiresponse({status",{"_index":783,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["framework",{"_index":2790,"title":{},"body":{"index.html":{}}}],["frontend",{"_index":2365,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["full",{"_index":1029,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"classes/RegisterDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["fullname",{"_index":1096,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["fully",{"_index":1159,"title":{},"body":{"injectables/AuthService.html":{}}}],["function",{"_index":2720,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":2783,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":2831,"title":{},"body":{"index.html":{}}}],["general",{"_index":2115,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["generate",{"_index":701,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/OTPService.html":{},"injectables/QueueService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["generatealltimeslots",{"_index":615,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["generated",{"_index":1336,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["generateotp",{"_index":1841,"title":{},"body":{"injectables/OTPService.html":{}}}],["generateotp(email",{"_index":1846,"title":{},"body":{"injectables/OTPService.html":{}}}],["generating",{"_index":1814,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["get(':id",{"_index":167,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["get(':id')@apioperation({summary",{"_index":1433,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get(':id')@roles('admin",{"_index":2483,"title":{},"body":{"controllers/RolesController.html":{}}}],["get(':id')@useguards(rolesguard)@roles('admin",{"_index":2644,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':id/files",{"_index":1515,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get(':id/files')@apioperation({summary",{"_index":1445,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get(':id/files/all",{"_index":1518,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get(':id/files/all')@apioperation({summary",{"_index":1436,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get('admin/all",{"_index":1530,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get('admin/all')@roles('admin",{"_index":1441,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get('admin/stats",{"_index":1532,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get('admin/stats')@roles('admin",{"_index":1456,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get('available",{"_index":498,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["get('by",{"_index":490,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["get('date",{"_index":508,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["get('files/:fileid/download",{"_index":1521,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get('files/:fileid/download')@apioperation({summary",{"_index":1451,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get('health",{"_index":274,"title":{},"body":{"controllers/AppController.html":{}}}],["get('mine",{"_index":559,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["get('mine')@apioperation({summary",{"_index":495,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["get('minio_use_ssl",{"_index":1792,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["get('profile",{"_index":887,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["get('profile')@apioperation({summary",{"_index":2646,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('recent",{"_index":170,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["get('stats",{"_index":563,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/UsersController.html":{}}}],["get('stats')@useguards(jwtauthguard",{"_index":512,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["get('stats')@useguards(rolesguard)@roles('admin",{"_index":2648,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('user/:userid",{"_index":2376,"title":{},"body":{"controllers/QueuesController.html":{},"controllers/RolesController.html":{}}}],["get('user/:userid')@roles('admin",{"_index":2486,"title":{},"body":{"controllers/RolesController.html":{}}}],["get('walk",{"_index":2378,"title":{},"body":{"controllers/QueuesController.html":{}}}],["get()@apioperation({summary",{"_index":1431,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get()@roles('admin",{"_index":2481,"title":{},"body":{"controllers/RolesController.html":{}}}],["get()@useguards(rolesguard)@roles('admin",{"_index":484,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/UsersController.html":{}}}],["getallapplicationfiles",{"_index":1421,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["getallapplicationfiles(id",{"_index":1435,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["getallapplications",{"_index":1422,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["getapplicationfiles",{"_index":1423,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["getapplicationfiles(id",{"_index":1444,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["getappointmentsbydate",{"_index":616,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["getappointmentsbydate(date",{"_index":631,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["getappointmentsbydaterange",{"_index":617,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["getappointmentsbydaterange(startdate",{"_index":633,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["getappointmentsstats",{"_index":618,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["getavailableslots",{"_index":469,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["getavailableslots(@query('date",{"_index":577,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["getavailableslots(date",{"_index":497,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["getbydate",{"_index":470,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["getbydate(@query('date",{"_index":566,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["getbydate(date",{"_index":501,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["getbydaterange",{"_index":471,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["getbydaterange(startdate",{"_index":506,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["getcounters",{"_index":2148,"title":{},"body":{"injectables/QueueService.html":{}}}],["getdetailsformultiplequeues",{"_index":2149,"title":{},"body":{"injectables/QueueService.html":{}}}],["getdetailsformultiplequeues(queueids",{"_index":2174,"title":{},"body":{"injectables/QueueService.html":{}}}],["getdownloadurl",{"_index":1721,"title":{},"body":{"injectables/MinioService.html":{}}}],["getdownloadurl(objectname",{"_index":1727,"title":{},"body":{"injectables/MinioService.html":{}}}],["getfiledownloadurl",{"_index":1424,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["getfiledownloadurl(fileid",{"_index":1450,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["getfileinfo",{"_index":1768,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["getfileinfo(objectname",{"_index":1775,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["gethello",{"_index":271,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getpresignedurl",{"_index":1769,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["getpresignedurl(objectname",{"_index":1777,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["getprofile",{"_index":750,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["getprofile(@request",{"_index":888,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["getprofile(req",{"_index":796,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["getprofile(userid",{"_index":972,"title":{},"body":{"injectables/AuthService.html":{}}}],["getqueuebyid",{"_index":2370,"title":{},"body":{"controllers/QueuesController.html":{}}}],["getqueuebyid(@param('id",{"_index":2420,"title":{},"body":{"controllers/QueuesController.html":{}}}],["getqueuebyid(id",{"_index":2373,"title":{},"body":{"controllers/QueuesController.html":{}}}],["getqueuedetails",{"_index":2150,"title":{},"body":{"injectables/QueueService.html":{}}}],["getqueuedetails(queueid",{"_index":2177,"title":{},"body":{"injectables/QueueService.html":{}}}],["getqueueposition",{"_index":2151,"title":{},"body":{"injectables/QueueService.html":{}}}],["getqueueposition(queueid",{"_index":2179,"title":{},"body":{"injectables/QueueService.html":{}}}],["getrawmany",{"_index":1690,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["getrecentannouncements",{"_index":157,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{}}}],["getrecentannouncements(@query('limit",{"_index":201,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["getrecentannouncements(limit",{"_index":169,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{}}}],["getstats",{"_index":472,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getting",{"_index":711,"title":{"index.html":{}},"body":{"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/MinioService-1.html":{}}}],["gettodaypendingcount",{"_index":2052,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["getuserqueues",{"_index":2371,"title":{},"body":{"controllers/QueuesController.html":{}}}],["getuserqueues(@param('userid",{"_index":2414,"title":{},"body":{"controllers/QueuesController.html":{}}}],["getuserqueues(userid",{"_index":2375,"title":{},"body":{"controllers/QueuesController.html":{}}}],["getuserroles",{"_index":2480,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["getuserroles(@param('userid",{"_index":2492,"title":{},"body":{"controllers/RolesController.html":{}}}],["getuserroles(userid",{"_index":2485,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["getwalkinqueues",{"_index":2372,"title":{},"body":{"controllers/QueuesController.html":{}}}],["global",{"_index":2032,"title":{},"body":{"classes/QueueGateway.html":{}}}],["graph",{"_index":2857,"title":{},"body":{"index.html":{}}}],["groupby('role.name",{"_index":1689,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["grow",{"_index":2875,"title":{},"body":{"index.html":{}}}],["guard",{"_index":2494,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":2495,"title":{},"body":{"guards/RolesGuard.html":{}}}],["guards/jwt",{"_index":844,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["guards/roles.guard",{"_index":847,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["guest",{"_index":2220,"title":{},"body":{"injectables/QueueService.html":{}}}],["handle",{"_index":1077,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["handleconnection",{"_index":1958,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handleconnection(client",{"_index":1972,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handledailyqueuereset",{"_index":2053,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["handledisconnect",{"_index":1959,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handledisconnect(client",{"_index":1977,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlegetqueueposition",{"_index":1960,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlegetqueueposition(client",{"_index":1979,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoincounter",{"_index":1961,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoincounter(client",{"_index":1982,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoinqueue",{"_index":1962,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoinqueue(client",{"_index":1986,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoinqueueupdates",{"_index":1963,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoinqueueupdates(client",{"_index":1989,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handling",{"_index":2089,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["hands",{"_index":2851,"title":{},"body":{"index.html":{}}}],["handy",{"_index":2841,"title":{},"body":{"index.html":{}}}],["hash",{"_index":1008,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["hashed",{"_index":1701,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["hashedpassword",{"_index":1044,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["haslowercase",{"_index":1180,"title":{},"body":{"injectables/AuthService.html":{}}}],["hasnumbers",{"_index":1182,"title":{},"body":{"injectables/AuthService.html":{}}}],["hasroleassigned",{"_index":1153,"title":{},"body":{"injectables/AuthService.html":{}}}],["hasspecialchars",{"_index":1183,"title":{},"body":{"injectables/AuthService.html":{}}}],["hasuppercase",{"_index":1176,"title":{},"body":{"injectables/AuthService.html":{}}}],["healthcheck",{"_index":272,"title":{},"body":{"controllers/AppController.html":{}}}],["hello",{"_index":377,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":2855,"title":{},"body":{"index.html":{}}}],["here",{"_index":1131,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["history",{"_index":1377,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["history.application",{"_index":1378,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["history.entity",{"_index":1391,"title":{},"body":{"entities/DocumentApplication.html":{},"modules/DocumentApplicationsModule.html":{}}}],["history.entity.ts",{"_index":382,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"coverage.html":{}}}],["history.entity.ts:17",{"_index":407,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["history.entity.ts:20",{"_index":401,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["history.entity.ts:23",{"_index":411,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["history.entity.ts:26",{"_index":409,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["history.entity.ts:29",{"_index":413,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["history.entity.ts:32",{"_index":406,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["history.entity.ts:35",{"_index":404,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["history.entity.ts:43",{"_index":398,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["host",{"_index":321,"title":{},"body":{"modules/AppModule.html":{},"injectables/EmailService.html":{},"miscellaneous/variables.html":{}}}],["hour",{"_index":744,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["html",{"_index":1591,"title":{},"body":{"injectables/EmailService.html":{}}}],["http://localhost:5173",{"_index":2005,"title":{},"body":{"classes/QueueGateway.html":{}}}],["httpcode",{"_index":524,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["httpcode(httpstatus.no_content",{"_index":602,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["https://nestjs.com",{"_index":2888,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":525,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["id",{"_index":36,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"injectables/EmailService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"entities/OTP.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":2703,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":42,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"injectables/QueueService.html":{},"classes/UpdateUserDto.html":{}}}],["ignore",{"_index":1597,"title":{},"body":{"injectables/EmailService.html":{}}}],["ignoreexpiration",{"_index":1203,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["iii",{"_index":75,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["iii)'})@isoptional()@isstring",{"_index":1340,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ildefonso",{"_index":53,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["image",{"_index":118,"title":{},"body":{"entities/Announcement.html":{},"classes/CreateAnnouncementDto.html":{}}}],["implements",{"_index":1786,"title":{},"body":{"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["import",{"_index":87,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"injectables/EmailService.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":229,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}}}],["in(queueids",{"_index":2287,"title":{},"body":{"injectables/QueueService.html":{}}}],["in(roleids",{"_index":2530,"title":{},"body":{"injectables/RolesService.html":{}}}],["inactive",{"_index":1230,"title":{},"body":{"entities/Counter.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"miscellaneous/enumerations.html":{}}}],["inactiveusers",{"_index":1627,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["include",{"_index":2366,"title":{},"body":{"injectables/QueueService.html":{}}}],["including",{"_index":764,"title":{},"body":{"controllers/AuthController.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{}}}],["index",{"_index":15,"title":{"index.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"injectables/EmailService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["index(['applicationid",{"_index":419,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentFile.html":{}}}],["index(['applicationtype",{"_index":1414,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["index(['changedat",{"_index":420,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["index(['createdat",{"_index":1416,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["index(['documentcategory",{"_index":1568,"title":{},"body":{"entities/DocumentFile.html":{}}}],["index(['status",{"_index":1415,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["index(['userid",{"_index":1413,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"injectables/EmailService.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["information",{"_index":97,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"index.html":{}}}],["information'})@apiresponse({status",{"_index":830,"title":{},"body":{"controllers/AuthController.html":{}}}],["infrastructure",{"_index":2838,"title":{},"body":{"index.html":{}}}],["inherited",{"_index":55,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["initial",{"_index":1286,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["inject",{"_index":318,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["inject(forwardref",{"_index":2011,"title":{},"body":{"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["injectable",{"_index":231,"title":{"injectables/AnnouncementService.html":{},"injectables/AppService.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AnnouncementService.html":{},"injectables/AppService.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"injectables/EmailService.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":232,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppService.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/EmailService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":248,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/OTPService.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["injectrepository(announcement",{"_index":249,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["injectrepository(appointment",{"_index":646,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["injectrepository(counter",{"_index":2187,"title":{},"body":{"injectables/QueueService.html":{}}}],["injectrepository(otp",{"_index":1853,"title":{},"body":{"injectables/OTPService.html":{}}}],["injectrepository(queue",{"_index":2074,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["injectrepository(queuedetails",{"_index":2186,"title":{},"body":{"injectables/QueueService.html":{}}}],["injectrepository(role",{"_index":2520,"title":{},"body":{"injectables/RolesService.html":{}}}],["injectrepository(user",{"_index":990,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["input",{"_index":773,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["install",{"_index":2830,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":2800,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":864,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{}}}],["insufficient",{"_index":780,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["interact",{"_index":2858,"title":{},"body":{"index.html":{}}}],["interface",{"_index":851,"title":{"interfaces/AuthenticatedUser.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"interfaces/UserStats.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["interfaces",{"_index":1186,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"interfaces/UserStats.html":{},"overview.html":{}}}],["intervals",{"_index":706,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["invalid",{"_index":597,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["invalidate",{"_index":1854,"title":{},"body":{"injectables/OTPService.html":{}}}],["inversejoincolumn",{"_index":2580,"title":{},"body":{"entities/User.html":{}}}],["is_active",{"_index":2569,"title":{},"body":{"entities/User.html":{}}}],["is_guest",{"_index":1933,"title":{},"body":{"entities/QueueDetails.html":{}}}],["isactive",{"_index":119,"title":{},"body":{"entities/Announcement.html":{},"injectables/AnnouncementService.html":{},"classes/CreateAnnouncementDto.html":{},"interfaces/FindAllOptions.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["isarray",{"_index":92,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["isauthorized",{"_index":1122,"title":{},"body":{"injectables/AuthService.html":{}}}],["isboolean",{"_index":1244,"title":{},"body":{"classes/CreateAnnouncementDto.html":{},"classes/CreateQueueDto.html":{},"classes/UpdateUserStatusDto.html":{}}}],["isboolean()@isoptional",{"_index":1310,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["isdatestring",{"_index":1262,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["isemail",{"_index":88,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["isenum",{"_index":1261,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{}}}],["isenum(applicationstatus",{"_index":2544,"title":{},"body":{"classes/UpdateDocumentApplicationDto.html":{}}}],["isenum(applicationtype",{"_index":1293,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["isenum(appointmentstatus",{"_index":1263,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["isenum(queuestatus",{"_index":2549,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["isenum(queuestatus)@isoptional",{"_index":2547,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["isglobal",{"_index":316,"title":{},"body":{"modules/AppModule.html":{}}}],["isguest",{"_index":427,"title":{},"body":{"entities/Appointment.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{}}}],["isnan(number(payload.sub",{"_index":1207,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["isnan(queueid",{"_index":2422,"title":{},"body":{"controllers/QueuesController.html":{}}}],["isnan(userid",{"_index":1066,"title":{},"body":{"injectables/AuthService.html":{}}}],["isnan(useridnumber",{"_index":2358,"title":{},"body":{"injectables/QueueService.html":{}}}],["isnotempty",{"_index":1243,"title":{},"body":{"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["isnotempty()@isdatestring",{"_index":1249,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["isnotempty()@isstring",{"_index":1247,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["isnumber",{"_index":91,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{}}}],["isobject",{"_index":1289,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["isoptional",{"_index":89,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{}}}],["isoptional()@isboolean",{"_index":1240,"title":{},"body":{"classes/CreateAnnouncementDto.html":{}}}],["isoptional()@isenum(appointmentstatus",{"_index":1258,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["isoptional()@isstring",{"_index":1235,"title":{},"body":{"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{}}}],["isotpvalid",{"_index":874,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["ispasswordvalid",{"_index":1011,"title":{},"body":{"injectables/AuthService.html":{}}}],["isprivileged",{"_index":1516,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["isresetinprogress",{"_index":2051,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["isstring",{"_index":90,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{}}}],["isstring()@isnotempty",{"_index":1237,"title":{},"body":{"classes/CreateAnnouncementDto.html":{},"classes/CreateQueueDto.html":{}}}],["isstring()@isoptional",{"_index":1306,"title":{},"body":{"classes/CreateQueueDto.html":{},"classes/UpdateQueueDto.html":{}}}],["isvalid",{"_index":644,"title":{},"body":{"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["isvalid(date",{"_index":650,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["isvalid(parseddate",{"_index":693,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["isvalidemail",{"_index":957,"title":{},"body":{"injectables/AuthService.html":{}}}],["isvalidemail(email",{"_index":974,"title":{},"body":{"injectables/AuthService.html":{}}}],["it's",{"_index":2332,"title":{},"body":{"injectables/QueueService.html":{}}}],["items",{"_index":856,"title":{},"body":{"controllers/AuthController.html":{},"classes/PaginatedUsersResponseDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UserQueryDto.html":{}}}],["job",{"_index":2868,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":2870,"title":{},"body":{"index.html":{}}}],["john",{"_index":103,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{}}}],["john'})@isstring()@isnotempty",{"_index":2431,"title":{},"body":{"classes/RegisterDto.html":{}}}],["john'})@isstring()@isoptional",{"_index":64,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["john.doe@example.com",{"_index":1326,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["john_doe",{"_index":101,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["john_doe'})@isstring()@isnotempty",{"_index":2442,"title":{},"body":{"classes/RegisterDto.html":{}}}],["john_doe'})@isstring()@isoptional",{"_index":85,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["johndoe",{"_index":1348,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["join",{"_index":2881,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":415,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["joined",{"_index":2025,"title":{},"body":{"classes/QueueGateway.html":{}}}],["jointable",{"_index":2584,"title":{},"body":{"entities/User.html":{}}}],["jpeg",{"_index":1498,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["jr",{"_index":74,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["jr.'})@isstring()@isoptional",{"_index":76,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["json",{"_index":1369,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["juan",{"_index":1294,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["jwt",{"_index":948,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":848,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{}}}],["jwtauthguard",{"_index":529,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":1201,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":940,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":949,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":1192,"title":{"interfaces/JwtPayload.html":{}},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["jwtservice",{"_index":963,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":938,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":2885,"title":{},"body":{"index.html":{}}}],["keep",{"_index":2587,"title":{},"body":{"entities/User.html":{}}}],["keeps",{"_index":2205,"title":{},"body":{"injectables/QueueService.html":{}}}],["key",{"_index":358,"title":{},"body":{"modules/AppModule.html":{},"injectables/OTPService.html":{},"index.html":{}}}],["last",{"_index":66,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["last_modified_by",{"_index":1373,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["last_name",{"_index":1935,"title":{},"body":{"entities/QueueDetails.html":{},"entities/User.html":{}}}],["lastmodifiedby",{"_index":1356,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["lastname",{"_index":24,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Appointment.html":{},"injectables/AuthService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["lastname}${nameextension",{"_index":1030,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["latest",{"_index":1446,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["learn",{"_index":2844,"title":{},"body":{"index.html":{}}}],["leftjoin('user.roles",{"_index":1686,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["leftjoinandselect('user.defaultrole",{"_index":1640,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["leftjoinandselect('user.roles",{"_index":1641,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["legacy",{"_index":2382,"title":{},"body":{"controllers/QueuesController.html":{}}}],["legend",{"_index":213,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":127,"title":{},"body":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{}}}],["lessthan",{"_index":1850,"title":{},"body":{"injectables/OTPService.html":{},"injectables/QueueService.html":{}}}],["lessthan(new",{"_index":1883,"title":{},"body":{"injectables/OTPService.html":{}}}],["lessthan(queue.createdat",{"_index":2276,"title":{},"body":{"injectables/QueueService.html":{}}}],["lessthanorequal",{"_index":2184,"title":{},"body":{"injectables/QueueService.html":{}}}],["lessthanorequal(new",{"_index":2342,"title":{},"body":{"injectables/QueueService.html":{}}}],["let's",{"_index":2360,"title":{},"body":{"injectables/QueueService.html":{}}}],["letter",{"_index":1179,"title":{},"body":{"injectables/AuthService.html":{}}}],["lgu",{"_index":883,"title":{},"body":{"controllers/AuthController.html":{},"injectables/EmailService.html":{},"interfaces/RequestWithUser.html":{}}}],["license",{"_index":1396,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"properties.html":{}}}],["licensed",{"_index":2873,"title":{},"body":{"index.html":{}}}],["limit",{"_index":173,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/UserQueryDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["limits",{"_index":1490,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["line",{"_index":997,"title":{},"body":{"injectables/AuthService.html":{}}}],["linkedin",{"_index":2867,"title":{},"body":{"index.html":{}}}],["listfiles",{"_index":1770,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["listfiles(prefix",{"_index":1780,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["literal",{"_index":793,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser-2.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{}}}],["localhost",{"_index":1739,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"miscellaneous/variables.html":{}}}],["log",{"_index":1507,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"injectables/EmailService.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["logdailystatistics",{"_index":2054,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["logdailystatistics(startofday",{"_index":2066,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["logger",{"_index":338,"title":{},"body":{"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{}}}],["logger(appointmentcontroller.name",{"_index":548,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["logger(minioservice.name",{"_index":1731,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["logger(queuegateway.name",{"_index":1969,"title":{},"body":{"classes/QueueGateway.html":{}}}],["logger(queueschedulerservice.name",{"_index":2071,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["logging",{"_index":336,"title":{},"body":{"modules/AppModule.html":{},"injectables/QueueSchedulerService.html":{},"miscellaneous/variables.html":{}}}],["login",{"_index":751,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{}}}],["login'})@apiresponse({status",{"_index":806,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(@body",{"_index":860,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["login(logindto",{"_index":804,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logindto",{"_index":805,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["logindto.emailorusername",{"_index":992,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto.password",{"_index":1010,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto})@post('login",{"_index":811,"title":{},"body":{"controllers/AuthController.html":{}}}],["looking",{"_index":2818,"title":{},"body":{"index.html":{}}}],["lookup",{"_index":2291,"title":{},"body":{"injectables/QueueService.html":{}}}],["loop",{"_index":2864,"title":{},"body":{"index.html":{}}}],["loss",{"_index":343,"title":{},"body":{"modules/AppModule.html":{}}}],["lowercase",{"_index":1181,"title":{},"body":{"injectables/AuthService.html":{}}}],["mailoptions",{"_index":1606,"title":{},"body":{"injectables/EmailService.html":{}}}],["main",{"_index":50,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["maintain",{"_index":1056,"title":{},"body":{"injectables/AuthService.html":{}}}],["makes",{"_index":2825,"title":{},"body":{"index.html":{}}}],["managing",{"_index":2837,"title":{},"body":{"index.html":{}}}],["manila",{"_index":1301,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["manual",{"_index":2136,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["manualdailyreset",{"_index":2055,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["many",{"_index":2273,"title":{},"body":{"injectables/QueueService.html":{}}}],["manytomany",{"_index":2476,"title":{},"body":{"entities/Role.html":{},"entities/User.html":{}}}],["manytomany(undefined",{"_index":2473,"title":{},"body":{"entities/Role.html":{}}}],["manytomany(undefined)@jointable({name",{"_index":2578,"title":{},"body":{"entities/User.html":{}}}],["manytoone",{"_index":414,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["manytoone(undefined",{"_index":391,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["mark",{"_index":1857,"title":{},"body":{"injectables/OTPService.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["marriage",{"_index":1394,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["marriage_certificate",{"_index":1393,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["marriage_license",{"_index":1395,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["match",{"_index":2009,"title":{},"body":{"classes/QueueGateway.html":{}}}],["matching",{"_index":111,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"injectables/EmailService.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(total",{"_index":1654,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["math.floor",{"_index":2349,"title":{},"body":{"injectables/QueueService.html":{}}}],["mau",{"_index":2821,"title":{},"body":{"index.html":{}}}],["message",{"_index":913,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateDocumentApplicationDto.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateDocumentApplicationDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["metadata",{"_index":1809,"title":{},"body":{"injectables/MinioService-1.html":{},"dependencies.html":{}}}],["method",{"_index":1165,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["methods",{"_index":153,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/EmailService.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["middle",{"_index":69,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["middle_initial",{"_index":1937,"title":{},"body":{"entities/QueueDetails.html":{}}}],["middle_name",{"_index":2572,"title":{},"body":{"entities/User.html":{}}}],["middleinitial",{"_index":428,"title":{},"body":{"entities/Appointment.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["middlename",{"_index":25,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["migrationsrun",{"_index":347,"title":{},"body":{"modules/AppModule.html":{}}}],["miguel",{"_index":1332,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["min",{"_index":78,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{}}}],["min(1",{"_index":2604,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["minimum",{"_index":1342,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserQueryDto.html":{}}}],["minio",{"_index":1735,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"dependencies.html":{}}}],["minio.client",{"_index":1733,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["minio_access_key",{"_index":1795,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["minio_bucket_name",{"_index":1797,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["minio_endpoint",{"_index":1788,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["minio_object_name",{"_index":1563,"title":{},"body":{"entities/DocumentFile.html":{}}}],["minio_secret_key",{"_index":1796,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["minioadmin",{"_index":1746,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["minioadmin123",{"_index":1748,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["minioclient",{"_index":1719,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["minioobjectname",{"_index":1546,"title":{},"body":{"entities/DocumentFile.html":{}}}],["minioservice",{"_index":1537,"title":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}},"body":{"modules/DocumentApplicationsModule.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"coverage.html":{},"overview.html":{}}}],["minlength",{"_index":82,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["minlength(6",{"_index":1351,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(8",{"_index":102,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["minute",{"_index":745,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["minutes",{"_index":1595,"title":{},"body":{"injectables/EmailService.html":{},"injectables/OTPService.html":{},"injectables/QueueService.html":{}}}],["miscellaneous",{"_index":2777,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":2872,"title":{},"body":{"index.html":{}}}],["mm",{"_index":733,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["mode",{"_index":2802,"title":{},"body":{"index.html":{}}}],["module",{"_index":209,"title":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"interfaces/FindAllOptions.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["modules",{"_index":211,"title":{"modules.html":{}},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/announcement/announcement.module",{"_index":307,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/appointment/appointment.module",{"_index":306,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/document",{"_index":308,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/queue/queue.module",{"_index":305,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":1617,"title":{},"body":{"injectables/EmailService.html":{},"injectables/QueueService.html":{},"index.html":{}}}],["multer",{"_index":2759,"title":{},"body":{"dependencies.html":{}}}],["multiple",{"_index":2296,"title":{},"body":{"injectables/QueueService.html":{}}}],["mysql",{"_index":320,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["mysql2",{"_index":2761,"title":{},"body":{"dependencies.html":{}}}],["myśliwiec",{"_index":2886,"title":{},"body":{"index.html":{}}}],["name",{"_index":63,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"injectables/EmailService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["name'})@isstring()@isnotempty",{"_index":1329,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["name_extension",{"_index":2575,"title":{},"body":{"entities/User.html":{}}}],["namecomponents",{"_index":1086,"title":{},"body":{"injectables/AuthService.html":{}}}],["namecomponents.firstname",{"_index":1097,"title":{},"body":{"injectables/AuthService.html":{}}}],["namecomponents.lastname",{"_index":1099,"title":{},"body":{"injectables/AuthService.html":{}}}],["namecomponents.middlename",{"_index":1098,"title":{},"body":{"injectables/AuthService.html":{}}}],["namecomponents.nameextension",{"_index":1100,"title":{},"body":{"injectables/AuthService.html":{}}}],["nameextension",{"_index":26,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["namespace",{"_index":2008,"title":{},"body":{"classes/QueueGateway.html":{}}}],["need",{"_index":1477,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"index.html":{}}}],["nest",{"_index":2795,"title":{},"body":{"index.html":{}}}],["nested",{"_index":2395,"title":{},"body":{"controllers/QueuesController.html":{}}}],["nestframework",{"_index":2890,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":1195,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"index.html":{}}}],["nestjs/common",{"_index":188,"title":{},"body":{"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"injectables/EmailService.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":296,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"injectables/EmailService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":2455,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":941,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":2534,"title":{},"body":{"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["nestjs/passport",{"_index":943,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1479,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"dependencies.html":{}}}],["nestjs/schedule",{"_index":298,"title":{},"body":{"modules/AppModule.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":95,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentApplicationsController.html":{},"classes/LoginDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":226,"title":{},"body":{"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DocumentApplicationsModule.html":{},"interfaces/FindAllOptions.html":{},"injectables/OTPService.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":1998,"title":{},"body":{"classes/QueueGateway.html":{},"dependencies.html":{}}}],["new",{"_index":260,"title":{},"body":{"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["new_status",{"_index":408,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["newdate",{"_index":671,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["newfirstname",{"_index":1669,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["newlastname",{"_index":1671,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["newlastname}${newnameextension",{"_index":1674,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["newmiddlename",{"_index":1670,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["newnameextension",{"_index":1672,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["newpassword",{"_index":931,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["newstatus",{"_index":387,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["newtime",{"_index":673,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["next",{"_index":996,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{}}}],["nextcalled",{"_index":2338,"title":{},"body":{"injectables/QueueService.html":{}}}],["nextqueue",{"_index":2320,"title":{},"body":{"injectables/QueueService.html":{}}}],["nextqueue.counternumber",{"_index":2325,"title":{},"body":{"injectables/QueueService.html":{}}}],["nextqueue.id",{"_index":2328,"title":{},"body":{"injectables/QueueService.html":{}}}],["nextqueue.status",{"_index":2324,"title":{},"body":{"injectables/QueueService.html":{}}}],["node.js",{"_index":2789,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":1579,"title":{},"body":{"injectables/EmailService.html":{},"dependencies.html":{}}}],["nodemailer.createtransport",{"_index":1581,"title":{},"body":{"injectables/EmailService.html":{}}}],["nodemailer.transporter",{"_index":1578,"title":{},"body":{"injectables/EmailService.html":{}}}],["notfoundexception",{"_index":247,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["notfoundexception(`announcement",{"_index":261,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["notfoundexception(`appointment",{"_index":666,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["notfoundexception(`counter",{"_index":2316,"title":{},"body":{"injectables/QueueService.html":{}}}],["notfoundexception(`details",{"_index":2252,"title":{},"body":{"injectables/QueueService.html":{}}}],["notfoundexception(`queue",{"_index":2249,"title":{},"body":{"injectables/QueueService.html":{}}}],["notfoundexception(`role",{"_index":2523,"title":{},"body":{"injectables/RolesService.html":{}}}],["notfoundexception(`user",{"_index":1655,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["notification",{"_index":2116,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["notify",{"_index":2109,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["notifycounterupdate",{"_index":1964,"title":{},"body":{"classes/QueueGateway.html":{}}}],["notifycounterupdate(counterid",{"_index":1992,"title":{},"body":{"classes/QueueGateway.html":{}}}],["notifyqueueupdate",{"_index":1965,"title":{},"body":{"classes/QueueGateway.html":{}}}],["notifyqueueupdate(queueid",{"_index":1994,"title":{},"body":{"classes/QueueGateway.html":{}}}],["npm",{"_index":2799,"title":{},"body":{"index.html":{}}}],["null",{"_index":890,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["null/undefined",{"_index":2401,"title":{},"body":{"controllers/QueuesController.html":{}}}],["nullable",{"_index":135,"title":{},"body":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["number",{"_index":31,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["number'})@isoptional()@isstring",{"_index":1320,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["number(createqueuedto.userid",{"_index":2221,"title":{},"body":{"injectables/QueueService.html":{}}}],["number(payload.sub",{"_index":1208,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["number(req.user.id",{"_index":899,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["number(targetuserid",{"_index":906,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["number/:number",{"_index":491,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["obj",{"_index":1822,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["object",{"_index":855,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["object.assign(announcement",{"_index":264,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["object.assign(appointment",{"_index":677,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["object.values(appointmentstatus).includes(status",{"_index":596,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["object.values(appointmentstatus).join",{"_index":599,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["objectname",{"_index":1726,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["occurred",{"_index":1164,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{}}}],["of(id",{"_index":1679,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["offer",{"_index":2869,"title":{},"body":{"index.html":{}}}],["official",{"_index":2822,"title":{},"body":{"index.html":{}}}],["ok",{"_index":280,"title":{},"body":{"controllers/AppController.html":{}}}],["old_status",{"_index":410,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["oldstatus",{"_index":388,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["omit",{"_index":1632,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["on'].includes(usesslvalue",{"_index":1794,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["ondelete",{"_index":394,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentFile.html":{},"entities/QueueDetails.html":{}}}],["one",{"_index":598,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AuthService.html":{},"injectables/QueueService.html":{}}}],["ones",{"_index":1676,"title":{},"body":{"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["onetomany",{"_index":1389,"title":{},"body":{"entities/DocumentApplication.html":{},"entities/Queue.html":{}}}],["onetomany(undefined",{"_index":1365,"title":{},"body":{"entities/DocumentApplication.html":{},"entities/Queue.html":{}}}],["onetoone",{"_index":1227,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{}}}],["onetoone(undefined",{"_index":1217,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{}}}],["ongatewayconnection",{"_index":1955,"title":{},"body":{"classes/QueueGateway.html":{}}}],["ongatewaydisconnect",{"_index":1956,"title":{},"body":{"classes/QueueGateway.html":{}}}],["only)'})@apiresponse({status",{"_index":1439,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["onmoduleinit",{"_index":1771,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["open",{"_index":2874,"title":{},"body":{"index.html":{}}}],["operator",{"_index":2525,"title":{},"body":{"injectables/RolesService.html":{}}}],["optional",{"_index":17,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/EmailService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser-2.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["optional)'})@isoptional()@isstring",{"_index":1333,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["options",{"_index":1635,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["order",{"_index":256,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["organize",{"_index":2289,"title":{},"body":{"injectables/QueueService.html":{}}}],["origin",{"_index":2003,"title":{},"body":{"classes/QueueGateway.html":{}}}],["original",{"_index":1756,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["otp",{"_index":311,"title":{"entities/OTP.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/EmailService.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["otpentity",{"_index":1873,"title":{},"body":{"injectables/OTPService.html":{}}}],["otpentity.expiresat",{"_index":1880,"title":{},"body":{"injectables/OTPService.html":{}}}],["otpentity.verified",{"_index":1881,"title":{},"body":{"injectables/OTPService.html":{}}}],["otplength",{"_index":1859,"title":{},"body":{"injectables/OTPService.html":{}}}],["otprepository",{"_index":1844,"title":{},"body":{"injectables/OTPService.html":{}}}],["otps",{"_index":1855,"title":{},"body":{"injectables/OTPService.html":{}}}],["otpservice",{"_index":292,"title":{"injectables/OTPService.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/OTPService.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{},"overview.html":{}}}],["out",{"_index":223,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["outer",{"_index":1137,"title":{},"body":{"injectables/AuthService.html":{}}}],["overview",{"_index":2894,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":585,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["package",{"_index":2739,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":1620,"title":{},"body":{"interfaces/FindAllOptions.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/UserQueryDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["pages",{"_index":1891,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{}}}],["paginatedusersresponsedto",{"_index":1884,"title":{"classes/PaginatedUsersResponseDto.html":{}},"body":{"classes/PaginatedUsersResponseDto.html":{},"coverage.html":{}}}],["param",{"_index":184,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["param('fileid",{"_index":1522,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["param('id",{"_index":205,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["param('userid",{"_index":904,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["parameter",{"_index":568,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["parameters",{"_index":163,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/EmailService.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["parse",{"_index":690,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["parseddate",{"_index":691,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["parseduserid",{"_index":2227,"title":{},"body":{"injectables/QueueService.html":{}}}],["parseint(id",{"_index":2421,"title":{},"body":{"controllers/QueuesController.html":{}}}],["parseint(process.env.db_port",{"_index":2904,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseint(process.env.minio_port",{"_index":1740,"title":{},"body":{"injectables/MinioService.html":{}}}],["parseint(stat.count",{"_index":1693,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["parseint(this.configservice.get('otp_expiry_minutes",{"_index":1870,"title":{},"body":{"injectables/OTPService.html":{}}}],["parseint(this.configservice.get('otp_length",{"_index":1860,"title":{},"body":{"injectables/OTPService.html":{}}}],["parseint(userid",{"_index":2357,"title":{},"body":{"injectables/QueueService.html":{}}}],["parseintpipe",{"_index":186,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["parseiso",{"_index":643,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["parseiso(createappointmentdto.appointmentdate",{"_index":649,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["parseiso(date",{"_index":692,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["part",{"_index":2861,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":2533,"title":{},"body":{"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["partialtype(createannouncementdto",{"_index":2532,"title":{},"body":{"classes/UpdateAnnouncementDto.html":{}}}],["partialtype(createappointmentdto",{"_index":2537,"title":{},"body":{"classes/UpdateAppointmentDto.html":{}}}],["parts",{"_index":1083,"title":{},"body":{"injectables/AuthService.html":{}}}],["pass",{"_index":1587,"title":{},"body":{"injectables/EmailService.html":{}}}],["passport",{"_index":1191,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":942,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":946,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":1188,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1196,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["password",{"_index":27,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/EmailService.html":{},"interfaces/FindAllOptions.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["password.length",{"_index":1174,"title":{},"body":{"injectables/AuthService.html":{}}}],["password123",{"_index":81,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["password123'})@isstring()@isnotempty",{"_index":1715,"title":{},"body":{"classes/LoginDto.html":{}}}],["password_reset",{"_index":928,"title":{},"body":{"controllers/AuthController.html":{},"injectables/EmailService.html":{},"entities/OTP.html":{},"interfaces/RequestWithUser.html":{}}}],["passwords",{"_index":1649,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["passwordvalidation",{"_index":1038,"title":{},"body":{"injectables/AuthService.html":{}}}],["passwordvalidation.isvalid",{"_index":1040,"title":{},"body":{"injectables/AuthService.html":{}}}],["past",{"_index":660,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["patch",{"_index":183,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["patch(':id",{"_index":180,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["patch(':id')@apioperation({summary",{"_index":517,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{}}}],["patch(':id')@useguards(rolesguard)@roles('admin",{"_index":2652,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(':id/status",{"_index":594,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["patch(':id/status')@roles('admin",{"_index":1465,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["patch(':id/status')@useguards(jwtauthguard",{"_index":520,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["patch(':id/status')@useguards(rolesguard)@roles('admin",{"_index":2655,"title":{},"body":{"controllers/UsersController.html":{}}}],["path",{"_index":2384,"title":{},"body":{"controllers/QueuesController.html":{}}}],["payload",{"_index":1019,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["payload.roles.map((role",{"_index":1211,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":1206,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["pdf",{"_index":1500,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["pending",{"_index":457,"title":{},"body":{"entities/Appointment.html":{},"injectables/AppointmentService.html":{},"entities/DocumentApplication.html":{},"injectables/EmailService.html":{},"entities/Queue.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"miscellaneous/enumerations.html":{}}}],["pendingaheadcount",{"_index":2275,"title":{},"body":{"injectables/QueueService.html":{}}}],["pendingcount",{"_index":720,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueService.html":{}}}],["pendingqueues",{"_index":2099,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["pendingqueues.length",{"_index":2102,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["pendingqueues.map(queue",{"_index":2106,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["pendingqueueswithdetails",{"_index":2388,"title":{},"body":{"controllers/QueuesController.html":{}}}],["pendingqueueswithdetails.length",{"_index":2392,"title":{},"body":{"controllers/QueuesController.html":{}}}],["per",{"_index":1447,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"classes/PaginatedUsersResponseDto.html":{},"injectables/QueueService.html":{},"classes/UserQueryDto.html":{}}}],["perform",{"_index":1128,"title":{},"body":{"injectables/AuthService.html":{}}}],["performance",{"_index":2284,"title":{},"body":{"injectables/QueueService.html":{}}}],["permission",{"_index":591,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["permissions",{"_index":902,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["permissions'})@apiresponse({status",{"_index":781,"title":{},"body":{"controllers/AuthController.html":{}}}],["permit",{"_index":1401,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["person",{"_index":2215,"title":{},"body":{"injectables/QueueService.html":{}}}],["phone_number",{"_index":1939,"title":{},"body":{"entities/QueueDetails.html":{}}}],["phonenumber",{"_index":429,"title":{},"body":{"entities/Appointment.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["pickup",{"_index":1408,"title":{},"body":{"entities/DocumentApplication.html":{},"injectables/EmailService.html":{},"classes/UpdateDocumentApplicationDto.html":{},"miscellaneous/enumerations.html":{}}}],["platform",{"_index":2820,"title":{},"body":{"index.html":{}}}],["please",{"_index":1592,"title":{},"body":{"injectables/EmailService.html":{},"index.html":{}}}],["pm",{"_index":704,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueSchedulerService.html":{}}}],["png",{"_index":1499,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["port",{"_index":323,"title":{},"body":{"modules/AppModule.html":{},"injectables/EmailService.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"miscellaneous/variables.html":{}}}],["position",{"_index":2021,"title":{},"body":{"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["possible",{"_index":2816,"title":{},"body":{"index.html":{}}}],["post",{"_index":161,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"classes/QueueGateway.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["post(':id/files",{"_index":1488,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["post(':id/files')@useinterceptors(undefined)@apiconsumes('multipart/form",{"_index":1470,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["post('admin",{"_index":2637,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('admin/update",{"_index":903,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["post('forgot",{"_index":794,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["post('login",{"_index":859,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["post('register",{"_index":867,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["post('reset",{"_index":822,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["post('send",{"_index":826,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["post('update",{"_index":897,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["post('verify",{"_index":836,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["post()@apioperation({summary",{"_index":477,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{}}}],["potential",{"_index":2400,"title":{},"body":{"controllers/QueuesController.html":{}}}],["prefix",{"_index":151,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/MinioService-1.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["presigned",{"_index":1815,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["prevent",{"_index":341,"title":{},"body":{"modules/AppModule.html":{},"injectables/QueueSchedulerService.html":{}}}],["primarycolumn",{"_index":1388,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["primarycolumn({length",{"_index":1371,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["primarygeneratedcolumn",{"_index":132,"title":{},"body":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentFile.html":{},"entities/OTP.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["private",{"_index":250,"title":{},"body":{"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/EmailService.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["privileged",{"_index":1437,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["process",{"_index":2087,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["process.env.db_host",{"_index":2903,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_name",{"_index":2909,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_password",{"_index":2908,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_username",{"_index":2906,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.minio_access_key",{"_index":1745,"title":{},"body":{"injectables/MinioService.html":{}}}],["process.env.minio_bucket_name",{"_index":1750,"title":{},"body":{"injectables/MinioService.html":{}}}],["process.env.minio_endpoint",{"_index":1738,"title":{},"body":{"injectables/MinioService.html":{}}}],["process.env.minio_secret_key",{"_index":1747,"title":{},"body":{"injectables/MinioService.html":{}}}],["process.env.minio_use_ssl",{"_index":1743,"title":{},"body":{"injectables/MinioService.html":{}}}],["process.env.node_env",{"_index":2911,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.ws_cors_origin",{"_index":2004,"title":{},"body":{"classes/QueueGateway.html":{}}}],["processing",{"_index":1402,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["production",{"_index":353,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["profile",{"_index":798,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["profile'})@apiresponse({status",{"_index":797,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["progress",{"_index":2084,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["progressive",{"_index":2788,"title":{},"body":{"index.html":{}}}],["project",{"_index":2797,"title":{},"body":{"index.html":{}}}],["promise",{"_index":241,"title":{},"body":{"injectables/AnnouncementService.html":{},"modules/AppModule.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["promise((resolve",{"_index":1817,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["promise.all",{"_index":725,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["propagate",{"_index":2126,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["proper",{"_index":1116,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueSchedulerService.html":{}}}],["properties",{"_index":16,"title":{"properties.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AuthController.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"injectables/EmailService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"properties.html":{}}}],["provided",{"_index":1079,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["provided)'})@isoptional()@isstring",{"_index":1349,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["provided)'})@isstring()@isoptional",{"_index":1337,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["providedisguest",{"_index":2228,"title":{},"body":{"injectables/QueueService.html":{}}}],["provideduserid",{"_index":2226,"title":{},"body":{"injectables/QueueService.html":{}}}],["providers",{"_index":216,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["purpose",{"_index":908,"title":{},"body":{"controllers/AuthController.html":{},"injectables/EmailService.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"interfaces/RequestWithUser.html":{}}}],["purposes",{"_index":1878,"title":{},"body":{"injectables/OTPService.html":{}}}],["qrcode",{"_index":2766,"title":{},"body":{"dependencies.html":{}}}],["query",{"_index":187,"title":{},"body":{"controllers/AnnouncementController.html":{},"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/QueueService.html":{},"controllers/UsersController.html":{}}}],["query('end",{"_index":573,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["query('set",{"_index":371,"title":{},"body":{"modules/AppModule.html":{}}}],["query('start",{"_index":572,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["query('status",{"_index":1510,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["query.dto",{"_index":2662,"title":{},"body":{"controllers/UsersController.html":{}}}],["query.dto.ts",{"_index":2594,"title":{},"body":{"classes/UserQueryDto.html":{},"coverage.html":{}}}],["query.dto.ts:15",{"_index":2597,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["query.dto.ts:26",{"_index":2596,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["query.dto.ts:34",{"_index":2602,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["query.dto.ts:42",{"_index":2599,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["querybuilder",{"_index":1637,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["querybuilder.andwhere('roles.name",{"_index":1645,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["querybuilder.getmanyandcount",{"_index":1648,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["querybuilder.orderby('user.createdat",{"_index":1646,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["querybuilder.where",{"_index":1644,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["questions",{"_index":2845,"title":{},"body":{"index.html":{}}}],["queue",{"_index":1216,"title":{"entities/Queue.html":{}},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"coverage.html":{}}}],["queue.completedat",{"_index":2258,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["queue.completedat.gettime",{"_index":2347,"title":{},"body":{"injectables/QueueService.html":{}}}],["queue.controller",{"_index":2042,"title":{},"body":{"modules/QueueModule.html":{}}}],["queue.counter",{"_index":1218,"title":{},"body":{"entities/Counter.html":{}}}],["queue.counternumber",{"_index":2260,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["queue.createdat",{"_index":2405,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queue.createdat.gettime",{"_index":2348,"title":{},"body":{"injectables/QueueService.html":{}}}],["queue.details",{"_index":1941,"title":{},"body":{"entities/QueueDetails.html":{},"controllers/QueuesController.html":{}}}],["queue.details[0",{"_index":2403,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queue.dto",{"_index":2185,"title":{},"body":{"injectables/QueueService.html":{}}}],["queue.dto.ts",{"_index":1304,"title":{},"body":{"classes/CreateQueueDto.html":{},"classes/UpdateQueueDto.html":{},"coverage.html":{}}}],["queue.dto.ts:11",{"_index":2546,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["queue.dto.ts:13",{"_index":1312,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:17",{"_index":1313,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:21",{"_index":1307,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:25",{"_index":1314,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:29",{"_index":1315,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:33",{"_index":1308,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:37",{"_index":1311,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:5",{"_index":1316,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:7",{"_index":2548,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["queue.dto.ts:9",{"_index":1309,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.entity",{"_index":1951,"title":{},"body":{"entities/QueueDetails.html":{}}}],["queue.estimatedwaittime",{"_index":2406,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queue.gateway",{"_index":2044,"title":{},"body":{"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["queue.id",{"_index":2302,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["queue.queuenumber",{"_index":2404,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queue.service",{"_index":2000,"title":{},"body":{"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"controllers/QueuesController.html":{}}}],["queue.status",{"_index":2257,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["queue/entities/queue.entity",{"_index":1228,"title":{},"body":{"entities/Counter.html":{}}}],["queue_id",{"_index":1942,"title":{},"body":{"entities/QueueDetails.html":{}}}],["queue_number",{"_index":1915,"title":{},"body":{"entities/Queue.html":{}}}],["queuecontroller",{"_index":2040,"title":{},"body":{"modules/QueueModule.html":{},"coverage.html":{}}}],["queuedata",{"_index":2019,"title":{},"body":{"classes/QueueGateway.html":{}}}],["queuedetails",{"_index":1909,"title":{"entities/QueueDetails.html":{}},"body":{"entities/Queue.html":{},"entities/QueueDetails.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"coverage.html":{}}}],["queuedetails.queue",{"_index":2240,"title":{},"body":{"injectables/QueueService.html":{}}}],["queuedetailsrepository",{"_index":2152,"title":{},"body":{"injectables/QueueService.html":{}}}],["queuegateway",{"_index":1953,"title":{"classes/QueueGateway.html":{}},"body":{"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"coverage.html":{},"overview.html":{}}}],["queueid",{"_index":1926,"title":{},"body":{"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["queueids",{"_index":2176,"title":{},"body":{"injectables/QueueService.html":{}}}],["queueids.length",{"_index":2280,"title":{},"body":{"injectables/QueueService.html":{}}}],["queuemodule",{"_index":288,"title":{"modules/QueueModule.html":{}},"body":{"modules/AppModule.html":{},"modules/QueueModule.html":{},"modules.html":{},"overview.html":{}}}],["queuenumber",{"_index":1901,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["queuerepository",{"_index":2058,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["queues",{"_index":2096,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["queues.controller",{"_index":2043,"title":{},"body":{"modules/QueueModule.html":{}}}],["queues.length",{"_index":2300,"title":{},"body":{"injectables/QueueService.html":{}}}],["queues.map((queue",{"_index":2301,"title":{},"body":{"injectables/QueueService.html":{}}}],["queues/user",{"_index":2415,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queues/walk",{"_index":2386,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queueschedulerservice",{"_index":2038,"title":{"injectables/QueueSchedulerService.html":{}},"body":{"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"coverage.html":{},"overview.html":{}}}],["queuescontroller",{"_index":2041,"title":{"controllers/QueuesController.html":{}},"body":{"modules/QueueModule.html":{},"controllers/QueuesController.html":{},"coverage.html":{}}}],["queueservice",{"_index":1967,"title":{"injectables/QueueService.html":{}},"body":{"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"coverage.html":{},"overview.html":{}}}],["queuestatus",{"_index":1917,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/UpdateQueueDto.html":{},"miscellaneous/enumerations.html":{}}}],["queuestatus.cancelled",{"_index":2107,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["queuestatus.completed",{"_index":2131,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["queuestatus.pending",{"_index":1923,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["queuestatus.serving",{"_index":2119,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["range",{"_index":571,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["range')@useguards(jwtauthguard",{"_index":509,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["rate",{"_index":2134,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["re",{"_index":1110,"title":{},"body":{"injectables/AuthService.html":{}}}],["read",{"_index":2882,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":196,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["ready",{"_index":1407,"title":{},"body":{"entities/DocumentApplication.html":{},"injectables/EmailService.html":{},"classes/UpdateDocumentApplicationDto.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["ready_for_pickup",{"_index":1406,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["real",{"_index":2859,"title":{},"body":{"index.html":{}}}],["reason",{"_index":2113,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["reason_of_visit",{"_index":1946,"title":{},"body":{"entities/QueueDetails.html":{}}}],["reasonofvisit",{"_index":430,"title":{},"body":{"entities/Appointment.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["receive",{"_index":927,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["received",{"_index":862,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["recent",{"_index":1694,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["recently",{"_index":2627,"title":{},"body":{"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{}}}],["recentusers",{"_index":1631,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["recentusers.map((user",{"_index":1697,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["record",{"_index":1280,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{}}}],["referencedcolumnname",{"_index":2590,"title":{},"body":{"entities/User.html":{}}}],["reflect",{"_index":2768,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":2454,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["register",{"_index":752,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["register(@body",{"_index":868,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["register(createuserdto",{"_index":813,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(registerdto",{"_index":977,"title":{},"body":{"injectables/AuthService.html":{}}}],["registerdto",{"_index":814,"title":{"classes/RegisterDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["registerdto})@post('register",{"_index":818,"title":{},"body":{"controllers/AuthController.html":{}}}],["registered",{"_index":926,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["registration",{"_index":816,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{}}}],["registration'})@apiresponse({status",{"_index":815,"title":{},"body":{"controllers/AuthController.html":{}}}],["reject",{"_index":1818,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["rejected",{"_index":1404,"title":{},"body":{"entities/DocumentApplication.html":{},"injectables/EmailService.html":{},"miscellaneous/enumerations.html":{}}}],["relation",{"_index":2239,"title":{},"body":{"injectables/QueueService.html":{}}}],["relation(user",{"_index":1678,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["relations",{"_index":421,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"injectables/AuthService.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["remove",{"_index":158,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["remove(@param('id",{"_index":207,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{}}}],["remove(id",{"_index":175,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["remove(user.roles",{"_index":1680,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["replaces",{"_index":2526,"title":{},"body":{"injectables/RolesService.html":{}}}],["repository",{"_index":237,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/OTPService.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["req",{"_index":791,"title":{},"body":{"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["req.user",{"_index":893,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["req.user.id",{"_index":894,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["request",{"_index":772,"title":{},"body":{"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/EmailService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["request.user",{"_index":2451,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"miscellaneous/variables.html":{}}}],["request.user?.roles",{"_index":2464,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["requestwithuser",{"_index":758,"title":{"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["required",{"_index":569,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AuthService.html":{},"classes/CreateDocumentApplicationDto.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/EmailService.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["requiredroles",{"_index":2459,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["requiredroles.some((role",{"_index":2467,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["requires",{"_index":1410,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["requires_additional_info",{"_index":1409,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["requiring",{"_index":2828,"title":{},"body":{"index.html":{}}}],["reserved",{"_index":1600,"title":{},"body":{"injectables/EmailService.html":{}}}],["reset",{"_index":222,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"injectables/EmailService.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resetdto",{"_index":824,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["resetpassword",{"_index":753,"title":{},"body":{"controllers/AuthController.html":{}}}],["resetpassword(@body",{"_index":930,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["resetpassword(resetdto",{"_index":821,"title":{},"body":{"controllers/AuthController.html":{}}}],["resolve(files",{"_index":1826,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["resources",{"_index":2839,"title":{},"body":{"index.html":{}}}],["response",{"_index":1025,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["response.dto",{"_index":1896,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{}}}],["response.dto.ts",{"_index":1886,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"coverage.html":{}}}],["response.dto.ts:14",{"_index":2612,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:15",{"_index":1890,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{},"classes/UsersByRoleDto.html":{}}}],["response.dto.ts:20",{"_index":2622,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:21",{"_index":1889,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{}}}],["response.dto.ts:23",{"_index":2629,"title":{},"body":{"classes/UserStatsResponseDto.html":{}}}],["response.dto.ts:26",{"_index":2613,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:27",{"_index":1887,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{}}}],["response.dto.ts:29",{"_index":2625,"title":{},"body":{"classes/UserStatsResponseDto.html":{}}}],["response.dto.ts:32",{"_index":2617,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:33",{"_index":1892,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{}}}],["response.dto.ts:35",{"_index":2626,"title":{},"body":{"classes/UserStatsResponseDto.html":{}}}],["response.dto.ts:38",{"_index":2616,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:41",{"_index":2631,"title":{},"body":{"classes/UserStatsResponseDto.html":{}}}],["response.dto.ts:44",{"_index":2618,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:47",{"_index":2628,"title":{},"body":{"classes/UserStatsResponseDto.html":{}}}],["response.dto.ts:50",{"_index":2619,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:56",{"_index":2605,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:62",{"_index":2615,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:68",{"_index":2609,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:74",{"_index":2621,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:8",{"_index":2614,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:81",{"_index":2620,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:87",{"_index":2610,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:9",{"_index":1895,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{},"classes/UsersByRoleDto.html":{}}}],["response.dto.ts:93",{"_index":2611,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["result",{"_index":683,"title":{},"body":{"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["result.affected",{"_index":685,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["result.length",{"_index":2307,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["results",{"_index":110,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"injectables/EmailService.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":1104,"title":{},"body":{"injectables/AuthService.html":{}}}],["retrieved",{"_index":799,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["retrieving",{"_index":1161,"title":{},"body":{"injectables/AuthService.html":{}}}],["return",{"_index":198,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/EmailService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":164,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/EmailService.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["reveal",{"_index":924,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["rights",{"_index":1599,"title":{},"body":{"injectables/EmailService.html":{}}}],["robert",{"_index":104,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["robert'})@isstring()@isoptional",{"_index":70,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["role",{"_index":35,"title":{"entities/Role.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["role'})@isoptional()@isstring",{"_index":2598,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["role.id",{"_index":1155,"title":{},"body":{"injectables/AuthService.html":{}}}],["role.name",{"_index":1018,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["role_id",{"_index":2591,"title":{},"body":{"entities/User.html":{}}}],["roleid",{"_index":1142,"title":{},"body":{"injectables/AuthService.html":{}}}],["roleids",{"_index":19,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["roleids.length",{"_index":1681,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["rolename",{"_index":1629,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["rolenames",{"_index":1016,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["rolenames.includes(role",{"_index":2468,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["roles",{"_index":534,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles('admin",{"_index":556,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["roles.controller",{"_index":2505,"title":{},"body":{"modules/RolesModule.html":{}}}],["roles.map((role",{"_index":1017,"title":{},"body":{"injectables/AuthService.html":{}}}],["roles.service",{"_index":2488,"title":{},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{}}}],["roles/entities/role.entity",{"_index":2585,"title":{},"body":{"entities/User.html":{}}}],["roles/roles.module",{"_index":304,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["roles/roles.service",{"_index":989,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["roles_key",{"_index":2456,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolescontroller",{"_index":2478,"title":{"controllers/RolesController.html":{}},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{},"coverage.html":{}}}],["rolesguard",{"_index":532,"title":{"guards/RolesGuard.html":{}},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["rolesguard)@roles('admin",{"_index":503,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["rolesmodule",{"_index":289,"title":{"modules/RolesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["rolesrepository",{"_index":2512,"title":{},"body":{"injectables/RolesService.html":{}}}],["rolesservice",{"_index":964,"title":{"injectables/RolesService.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["rolestats",{"_index":1685,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["rolestats.map((stat",{"_index":1691,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["rollback",{"_index":1055,"title":{},"body":{"injectables/AuthService.html":{}}}],["rolled",{"_index":1060,"title":{},"body":{"injectables/AuthService.html":{}}}],["room",{"_index":2331,"title":{},"body":{"injectables/QueueService.html":{}}}],["rooms",{"_index":2029,"title":{},"body":{"classes/QueueGateway.html":{}}}],["root",{"_index":2907,"title":{},"body":{"miscellaneous/variables.html":{}}}],["run",{"_index":2075,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"index.html":{}}}],["runs",{"_index":2814,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":2770,"title":{},"body":{"dependencies.html":{}}}],["s+@\\s+\\.\\s+/.test(email",{"_index":910,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["s@]+@[^\\s@]+\\.[^\\s",{"_index":1063,"title":{},"body":{"injectables/AuthService.html":{}}}],["salt",{"_index":1042,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["san",{"_index":52,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["sanitizedrecentusers",{"_index":1696,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["sanitizedusers",{"_index":1650,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["save",{"_index":1872,"title":{},"body":{"injectables/OTPService.html":{},"injectables/QueueService.html":{}}}],["saved",{"_index":2244,"title":{},"body":{"injectables/QueueService.html":{}}}],["saveddetails",{"_index":2241,"title":{},"body":{"injectables/QueueService.html":{}}}],["saveddetails.isguest",{"_index":2245,"title":{},"body":{"injectables/QueueService.html":{}}}],["savedqueue",{"_index":2216,"title":{},"body":{"injectables/QueueService.html":{}}}],["savedqueue.id",{"_index":2231,"title":{},"body":{"injectables/QueueService.html":{}}}],["scalable",{"_index":2793,"title":{},"body":{"index.html":{}}}],["schedulemodule",{"_index":297,"title":{},"body":{"modules/AppModule.html":{},"modules/QueueModule.html":{}}}],["schedulemodule.forroot",{"_index":373,"title":{},"body":{"modules/AppModule.html":{},"modules/QueueModule.html":{}}}],["scheduler.service",{"_index":2045,"title":{},"body":{"modules/QueueModule.html":{}}}],["scheduler.service.ts",{"_index":2050,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"coverage.html":{}}}],["scheduler.service.ts:10",{"_index":2072,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["scheduler.service.ts:11",{"_index":2057,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["scheduler.service.ts:113",{"_index":2068,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["scheduler.service.ts:146",{"_index":2070,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["scheduler.service.ts:152",{"_index":2059,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["scheduler.service.ts:24",{"_index":2065,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["schema",{"_index":808,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["search",{"_index":1621,"title":{},"body":{"interfaces/FindAllOptions.html":{},"classes/UserQueryDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["searching",{"_index":2095,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["secret",{"_index":950,"title":{},"body":{"modules/AuthModule.html":{},"injectables/OTPService.html":{}}}],["secretkey",{"_index":1197,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["secretorkey",{"_index":1204,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["secure",{"_index":1584,"title":{},"body":{"injectables/EmailService.html":{}}}],["security",{"_index":925,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["seeddatabaseifneeded",{"_index":2721,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["seeddatabaseifneeded(datasource",{"_index":2785,"title":{},"body":{"miscellaneous/functions.html":{}}}],["select",{"_index":697,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueService.html":{}}}],["select('role.name",{"_index":1687,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["send",{"_index":878,"title":{},"body":{"controllers/AuthController.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{}}}],["sendapplicationnotification",{"_index":1571,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendapplicationnotification(email",{"_index":1574,"title":{},"body":{"injectables/EmailService.html":{}}}],["sending",{"_index":915,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["sendotp",{"_index":754,"title":{},"body":{"controllers/AuthController.html":{},"injectables/EmailService.html":{}}}],["sendotp(@body",{"_index":907,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["sendotp(email",{"_index":1576,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendotp(sendotpdto",{"_index":825,"title":{},"body":{"controllers/AuthController.html":{}}}],["sendotpdto",{"_index":828,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["sent",{"_index":914,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["sequence",{"_index":2189,"title":{},"body":{"injectables/QueueService.html":{}}}],["served",{"_index":2268,"title":{},"body":{"injectables/QueueService.html":{}}}],["server",{"_index":1957,"title":{},"body":{"classes/QueueGateway.html":{},"index.html":{}}}],["service",{"_index":2224,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["services/email.service",{"_index":314,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/RequestWithUser.html":{}}}],["services/minio.service",{"_index":1541,"title":{},"body":{"modules/DocumentApplicationsModule.html":{}}}],["services/otp.service",{"_index":313,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/RequestWithUser.html":{}}}],["serving",{"_index":1921,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"miscellaneous/enumerations.html":{}}}],["servingcount",{"_index":2271,"title":{},"body":{"injectables/QueueService.html":{}}}],["servingqueues",{"_index":2118,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["servingqueues.length",{"_index":2120,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["servingqueues.map(queue",{"_index":2122,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["servingqueueswithdetails",{"_index":2389,"title":{},"body":{"controllers/QueuesController.html":{}}}],["servingqueueswithdetails.length",{"_index":2393,"title":{},"body":{"controllers/QueuesController.html":{}}}],["set",{"_index":362,"title":{},"body":{"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"injectables/AuthService.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{}}}],["setmetadata(roles_key",{"_index":2912,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":2798,"title":{},"body":{"index.html":{}}}],["shouldupdatename",{"_index":1085,"title":{},"body":{"injectables/AuthService.html":{}}}],["side",{"_index":2794,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":952,"title":{},"body":{"modules/AuthModule.html":{}}}],["simple",{"_index":2213,"title":{},"body":{"injectables/QueueService.html":{},"index.html":{}}}],["simplify",{"_index":2218,"title":{},"body":{"injectables/QueueService.html":{}}}],["single",{"_index":2283,"title":{},"body":{"injectables/QueueService.html":{}}}],["size",{"_index":1811,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["skip",{"_index":1636,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["skipping",{"_index":2085,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["slot",{"_index":738,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["slots",{"_index":499,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["smart",{"_index":884,"title":{},"body":{"controllers/AuthController.html":{},"injectables/EmailService.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"interfaces/RequestWithUser.html":{}}}],["socket",{"_index":1973,"title":{},"body":{"classes/QueueGateway.html":{}}}],["socket.io",{"_index":1999,"title":{},"body":{"classes/QueueGateway.html":{},"dependencies.html":{}}}],["soft",{"_index":267,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"injectables/EmailService.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["speakeasy",{"_index":1851,"title":{},"body":{"injectables/OTPService.html":{},"dependencies.html":{}}}],["speakeasy.totp",{"_index":1861,"title":{},"body":{"injectables/OTPService.html":{}}}],["special",{"_index":1184,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{}}}],["specific",{"_index":1111,"title":{},"body":{"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["specified",{"_index":694,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["sponsors",{"_index":2877,"title":{},"body":{"index.html":{}}}],["sql",{"_index":355,"title":{},"body":{"modules/AppModule.html":{}}}],["sr",{"_index":1339,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/.../appointment.entity.ts",{"_index":2780,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../counter.entity.ts",{"_index":2781,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../database.config.ts",{"_index":2899,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../document",{"_index":2779,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":2784,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../queue.entity.ts",{"_index":2782,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../roles.decorator.ts",{"_index":2900,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.decorator.ts",{"_index":2901,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":270,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:14",{"_index":275,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:9",{"_index":273,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":293,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":375,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":376,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":747,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:109",{"_index":819,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:148",{"_index":803,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:170",{"_index":834,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:219",{"_index":790,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:243",{"_index":827,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:266",{"_index":837,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:288",{"_index":795,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:313",{"_index":823,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:70",{"_index":812,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":939,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":955,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:104",{"_index":978,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:18",{"_index":965,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:206",{"_index":975,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:211",{"_index":973,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:239",{"_index":982,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:26",{"_index":986,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:383",{"_index":968,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:41",{"_index":976,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:539",{"_index":971,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:553",{"_index":980,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:584",{"_index":984,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorators/roles.decorator.ts",{"_index":2709,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/user.decorator.ts",{"_index":2446,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dto/login.dto.ts",{"_index":1710,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto.ts:15",{"_index":1713,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/login.dto.ts:23",{"_index":1716,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/register.dto.ts",{"_index":2426,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["src/auth/dto/register.dto.ts:21",{"_index":2430,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:29",{"_index":2443,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:39",{"_index":2441,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:47",{"_index":2432,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:55",{"_index":2435,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:63",{"_index":2434,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:71",{"_index":2436,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:79",{"_index":2437,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:86",{"_index":2428,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:95",{"_index":2439,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/update",{"_index":6,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/auth/guards/jwt",{"_index":1704,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard.ts",{"_index":2452,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard.ts:13",{"_index":2497,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/guards/roles.guard.ts:16",{"_index":2498,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":1187,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:20",{"_index":1708,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:35",{"_index":1709,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/config/database.config.ts",{"_index":2718,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/entities/otp.entity.ts",{"_index":1827,"title":{},"body":{"entities/OTP.html":{},"coverage.html":{}}}],["src/entities/otp.entity.ts:11",{"_index":1833,"title":{},"body":{"entities/OTP.html":{}}}],["src/entities/otp.entity.ts:14",{"_index":1830,"title":{},"body":{"entities/OTP.html":{}}}],["src/entities/otp.entity.ts:17",{"_index":1834,"title":{},"body":{"entities/OTP.html":{}}}],["src/entities/otp.entity.ts:20",{"_index":1835,"title":{},"body":{"entities/OTP.html":{}}}],["src/entities/otp.entity.ts:23",{"_index":1836,"title":{},"body":{"entities/OTP.html":{}}}],["src/entities/otp.entity.ts:26",{"_index":1832,"title":{},"body":{"entities/OTP.html":{}}}],["src/entities/otp.entity.ts:29",{"_index":1829,"title":{},"body":{"entities/OTP.html":{}}}],["src/main.ts",{"_index":2719,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/announcement/announcement.controller.ts",{"_index":150,"title":{},"body":{"controllers/AnnouncementController.html":{},"coverage.html":{}}}],["src/modules/announcement/announcement.controller.ts:21",{"_index":162,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["src/modules/announcement/announcement.controller.ts:26",{"_index":165,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["src/modules/announcement/announcement.controller.ts:31",{"_index":171,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["src/modules/announcement/announcement.controller.ts:36",{"_index":168,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["src/modules/announcement/announcement.controller.ts:41",{"_index":181,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["src/modules/announcement/announcement.controller.ts:49",{"_index":177,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["src/modules/announcement/announcement.module.ts",{"_index":224,"title":{},"body":{"modules/AnnouncementModule.html":{}}}],["src/modules/announcement/announcement.service.ts",{"_index":233,"title":{},"body":{"injectables/AnnouncementService.html":{},"coverage.html":{}}}],["src/modules/announcement/announcement.service.ts:15",{"_index":240,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["src/modules/announcement/announcement.service.ts:24",{"_index":242,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["src/modules/announcement/announcement.service.ts:31",{"_index":243,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["src/modules/announcement/announcement.service.ts:43",{"_index":246,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["src/modules/announcement/announcement.service.ts:53",{"_index":245,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["src/modules/announcement/announcement.service.ts:59",{"_index":244,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["src/modules/announcement/announcement.service.ts:9",{"_index":238,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["src/modules/announcement/dto/create",{"_index":1233,"title":{},"body":{"classes/CreateAnnouncementDto.html":{},"coverage.html":{}}}],["src/modules/announcement/dto/update",{"_index":2531,"title":{},"body":{"classes/UpdateAnnouncementDto.html":{},"coverage.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts",{"_index":115,"title":{},"body":{"entities/Announcement.html":{},"coverage.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts:12",{"_index":133,"title":{},"body":{"entities/Announcement.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts:15",{"_index":141,"title":{},"body":{"entities/Announcement.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts:18",{"_index":131,"title":{},"body":{"entities/Announcement.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts:21",{"_index":137,"title":{},"body":{"entities/Announcement.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts:24",{"_index":139,"title":{},"body":{"entities/Announcement.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts:27",{"_index":129,"title":{},"body":{"entities/Announcement.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts:30",{"_index":124,"title":{},"body":{"entities/Announcement.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts:33",{"_index":143,"title":{},"body":{"entities/Announcement.html":{}}}],["src/modules/appointment/appointment.controller.ts",{"_index":465,"title":{},"body":{"controllers/AppointmentController.html":{},"coverage.html":{}}}],["src/modules/appointment/appointment.controller.ts:110",{"_index":500,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:119",{"_index":493,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:125",{"_index":492,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:132",{"_index":518,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:157",{"_index":521,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:176",{"_index":515,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:44",{"_index":482,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:59",{"_index":488,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:66",{"_index":496,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:74",{"_index":513,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:82",{"_index":505,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:93",{"_index":510,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.module.ts",{"_index":609,"title":{},"body":{"modules/AppointmentModule.html":{}}}],["src/modules/appointment/appointment.service.ts",{"_index":612,"title":{},"body":{"injectables/AppointmentService.html":{},"coverage.html":{}}}],["src/modules/appointment/appointment.service.ts:100",{"_index":628,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:114",{"_index":638,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:14",{"_index":620,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:149",{"_index":637,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:162",{"_index":639,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:177",{"_index":636,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:20",{"_index":624,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:209",{"_index":632,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:230",{"_index":634,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:253",{"_index":635,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:305",{"_index":623,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:330",{"_index":630,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:69",{"_index":625,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:78",{"_index":627,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:88",{"_index":629,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/dto/create",{"_index":1245,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"coverage.html":{}}}],["src/modules/appointment/dto/update",{"_index":2536,"title":{},"body":{"classes/UpdateAppointmentDto.html":{},"coverage.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts",{"_index":423,"title":{},"body":{"entities/Appointment.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:22",{"_index":439,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:25",{"_index":435,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:28",{"_index":438,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:31",{"_index":442,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:34",{"_index":444,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:37",{"_index":432,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:40",{"_index":445,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:43",{"_index":446,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:46",{"_index":433,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:49",{"_index":436,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:56",{"_index":449,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:59",{"_index":455,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:66",{"_index":454,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:69",{"_index":441,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:72",{"_index":437,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:75",{"_index":450,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/counter/entities/counter.entity.ts",{"_index":1213,"title":{},"body":{"entities/Counter.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/modules/counter/entities/counter.entity.ts:18",{"_index":1223,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/counter/entities/counter.entity.ts:21",{"_index":1224,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/counter/entities/counter.entity.ts:28",{"_index":1226,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/counter/entities/counter.entity.ts:31",{"_index":1222,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/counter/entities/counter.entity.ts:38",{"_index":1221,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/document",{"_index":380,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"injectables/MinioService-1.html":{},"classes/UpdateDocumentApplicationDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/modules/queue/dto/create",{"_index":1303,"title":{},"body":{"classes/CreateQueueDto.html":{},"coverage.html":{}}}],["src/modules/queue/dto/update",{"_index":2545,"title":{},"body":{"classes/UpdateQueueDto.html":{},"coverage.html":{}}}],["src/modules/queue/entities/queue",{"_index":1924,"title":{},"body":{"entities/QueueDetails.html":{},"coverage.html":{}}}],["src/modules/queue/entities/queue.entity.ts",{"_index":1897,"title":{},"body":{"entities/Queue.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/modules/queue/entities/queue.entity.ts:22",{"_index":1914,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:25",{"_index":1916,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:32",{"_index":1918,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:35",{"_index":1907,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:38",{"_index":1908,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:41",{"_index":1903,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:44",{"_index":1913,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:47",{"_index":1911,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:52",{"_index":1905,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/queue",{"_index":2049,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"coverage.html":{}}}],["src/modules/queue/queue.controller.ts",{"_index":2733,"title":{},"body":{"coverage.html":{}}}],["src/modules/queue/queue.gateway.ts",{"_index":1954,"title":{},"body":{"classes/QueueGateway.html":{},"coverage.html":{}}}],["src/modules/queue/queue.gateway.ts:23",{"_index":1970,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:26",{"_index":1968,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:34",{"_index":1974,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:39",{"_index":1978,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:44",{"_index":1988,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:51",{"_index":1981,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:57",{"_index":1985,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:63",{"_index":1991,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:70",{"_index":1995,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:75",{"_index":1993,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.module.ts",{"_index":2039,"title":{},"body":{"modules/QueueModule.html":{}}}],["src/modules/queue/queue.service.ts",{"_index":2140,"title":{},"body":{"injectables/QueueService.html":{},"coverage.html":{}}}],["src/modules/queue/queue.service.ts:123",{"_index":2163,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:129",{"_index":2167,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:136",{"_index":2172,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:148",{"_index":2165,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:160",{"_index":2178,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:176",{"_index":2183,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:21",{"_index":2154,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:218",{"_index":2180,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:269",{"_index":2175,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:304",{"_index":2169,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:33",{"_index":2162,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:358",{"_index":2158,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:428",{"_index":2181,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:475",{"_index":2156,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:481",{"_index":2173,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:488",{"_index":2160,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:495",{"_index":2171,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queues.controller.ts",{"_index":2369,"title":{},"body":{"controllers/QueuesController.html":{},"coverage.html":{}}}],["src/modules/queue/queues.controller.ts:109",{"_index":2374,"title":{},"body":{"controllers/QueuesController.html":{}}}],["src/modules/queue/queues.controller.ts:19",{"_index":2379,"title":{},"body":{"controllers/QueuesController.html":{}}}],["src/modules/queue/queues.controller.ts:74",{"_index":2377,"title":{},"body":{"controllers/QueuesController.html":{}}}],["src/roles/entities/role.entity.ts",{"_index":2469,"title":{},"body":{"entities/Role.html":{},"coverage.html":{}}}],["src/roles/entities/role.entity.ts:10",{"_index":2472,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/entities/role.entity.ts:13",{"_index":2470,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/entities/role.entity.ts:16",{"_index":2475,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/entities/role.entity.ts:7",{"_index":2471,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/roles.controller.ts",{"_index":2479,"title":{},"body":{"controllers/RolesController.html":{},"coverage.html":{}}}],["src/roles/roles.controller.ts:14",{"_index":2482,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.controller.ts:20",{"_index":2484,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.controller.ts:26",{"_index":2487,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.module.ts",{"_index":2503,"title":{},"body":{"modules/RolesModule.html":{}}}],["src/roles/roles.service.ts",{"_index":2507,"title":{},"body":{"injectables/RolesService.html":{},"coverage.html":{}}}],["src/roles/roles.service.ts:17",{"_index":2515,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:21",{"_index":2518,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:29",{"_index":2517,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:37",{"_index":2519,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:45",{"_index":2514,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:8",{"_index":2511,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/services/email.service.ts",{"_index":1569,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{}}}],["src/services/email.service.ts:110",{"_index":1575,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/services/email.service.ts:21",{"_index":1577,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/services/email.service.ts:7",{"_index":1573,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/services/minio.service.ts",{"_index":1717,"title":{},"body":{"injectables/MinioService.html":{},"coverage.html":{}}}],["src/services/minio.service.ts:22",{"_index":1730,"title":{},"body":{"injectables/MinioService.html":{}}}],["src/services/minio.service.ts:46",{"_index":1728,"title":{},"body":{"injectables/MinioService.html":{}}}],["src/services/minio.service.ts:59",{"_index":1725,"title":{},"body":{"injectables/MinioService.html":{}}}],["src/services/minio.service.ts:6",{"_index":1732,"title":{},"body":{"injectables/MinioService.html":{}}}],["src/services/minio.service.ts:7",{"_index":1734,"title":{},"body":{"injectables/MinioService.html":{}}}],["src/services/minio.service.ts:8",{"_index":1723,"title":{},"body":{"injectables/MinioService.html":{}}}],["src/services/otp.service.ts",{"_index":1839,"title":{},"body":{"injectables/OTPService.html":{},"coverage.html":{}}}],["src/services/otp.service.ts:11",{"_index":1843,"title":{},"body":{"injectables/OTPService.html":{}}}],["src/services/otp.service.ts:19",{"_index":1847,"title":{},"body":{"injectables/OTPService.html":{}}}],["src/services/otp.service.ts:57",{"_index":1849,"title":{},"body":{"injectables/OTPService.html":{}}}],["src/services/otp.service.ts:83",{"_index":1845,"title":{},"body":{"injectables/OTPService.html":{}}}],["src/users/dto/create",{"_index":1317,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/paginated",{"_index":1885,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":2555,"title":{},"body":{"classes/UpdateUserStatusDto.html":{},"coverage.html":{}}}],["src/users/dto/user",{"_index":2593,"title":{},"body":{"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts",{"_index":2559,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:17",{"_index":2568,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:20",{"_index":2566,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:23",{"_index":2583,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:26",{"_index":2577,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:29",{"_index":2567,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:32",{"_index":2573,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:35",{"_index":2571,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:38",{"_index":2574,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:41",{"_index":2576,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:44",{"_index":2561,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:47",{"_index":2570,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:50",{"_index":2562,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:53",{"_index":2582,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:57",{"_index":2564,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:60",{"_index":2565,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:74",{"_index":2581,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":2634,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:106",{"_index":2653,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:121",{"_index":2651,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:135",{"_index":2656,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:153",{"_index":2641,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:46",{"_index":2643,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:58",{"_index":2647,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:70",{"_index":2649,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:80",{"_index":2645,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":2686,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":1619,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:108",{"_index":2692,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:210",{"_index":2699,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:220",{"_index":2700,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:230",{"_index":2698,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:273",{"_index":2695,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:280",{"_index":2696,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:287",{"_index":2693,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:35",{"_index":2690,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:42",{"_index":2694,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:87",{"_index":2697,"title":{},"body":{"injectables/UsersService.html":{}}}],["st",{"_index":51,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["staff",{"_index":485,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"classes/UserResponseDto.html":{},"controllers/UsersController.html":{}}}],["staff'].includes(role.name",{"_index":1512,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["start",{"_index":574,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/QueueService.html":{},"index.html":{}}}],["start:dev",{"_index":2803,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":2804,"title":{},"body":{"index.html":{}}}],["startdate",{"_index":511,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["started",{"_index":2787,"title":{"index.html":{}},"body":{}}],["starter",{"_index":2796,"title":{},"body":{"index.html":{}}}],["starting",{"_index":2086,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["startofday",{"_index":2069,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["startofday.todatestring",{"_index":2132,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["startofday.toisostring",{"_index":2097,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["stat.rolename",{"_index":1692,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["state",{"_index":1058,"title":{},"body":{"injectables/AuthService.html":{}}}],["statements",{"_index":2704,"title":{},"body":{"coverage.html":{}}}],["statistics",{"_index":564,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/QueueSchedulerService.html":{},"controllers/UsersController.html":{}}}],["stats",{"_index":737,"title":{},"body":{"injectables/AppointmentService.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"coverage.html":{}}}],["status",{"_index":276,"title":{},"body":{"controllers/AppController.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"entities/Counter.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"injectables/EmailService.html":{},"entities/Queue.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserResponseDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["status'})@isboolean",{"_index":2557,"title":{},"body":{"classes/UpdateUserStatusDto.html":{}}}],["status.dto",{"_index":2660,"title":{},"body":{"controllers/UsersController.html":{}}}],["status.dto.ts",{"_index":2556,"title":{},"body":{"classes/UpdateUserStatusDto.html":{},"coverage.html":{}}}],["status.dto.ts:10",{"_index":2558,"title":{},"body":{"classes/UpdateUserStatusDto.html":{}}}],["status_message",{"_index":412,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentApplication.html":{}}}],["statuscolors",{"_index":1611,"title":{},"body":{"injectables/EmailService.html":{}}}],["statusdto",{"_index":1464,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["statusdto.status",{"_index":1526,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["statusdto.statusmessage",{"_index":1527,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["statuses",{"_index":719,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["statushistory",{"_index":1357,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["statusmessage",{"_index":389,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["stay",{"_index":2863,"title":{},"body":{"index.html":{}}}],["step",{"_index":1864,"title":{},"body":{"injectables/OTPService.html":{}}}],["steps",{"_index":2812,"title":{},"body":{"index.html":{}}}],["straightforward",{"_index":2826,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":1190,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["stream",{"_index":1819,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["stream.on('data",{"_index":1821,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["stream.on('end",{"_index":1825,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["stream.on('error",{"_index":1824,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["strength",{"_index":1037,"title":{},"body":{"injectables/AuthService.html":{}}}],["string",{"_index":47,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"injectables/EmailService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["string(error",{"_index":2312,"title":{},"body":{"injectables/QueueService.html":{}}}],["string(payload.email",{"_index":1209,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["string(todaycount",{"_index":2208,"title":{},"body":{"injectables/QueueService.html":{}}}],["structure",{"_index":2396,"title":{},"body":{"controllers/QueuesController.html":{}}}],["sub",{"_index":1020,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["subject",{"_index":1590,"title":{},"body":{"injectables/EmailService.html":{}}}],["submission",{"_index":1287,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["subscribemessage",{"_index":1997,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subscribemessage('getqueueposition",{"_index":1980,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subscribemessage('join_queue_updates",{"_index":1990,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subscribemessage('joincounter",{"_index":1984,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subscribemessage('joinqueue",{"_index":1987,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subtype",{"_index":1271,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["success",{"_index":912,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/QueueGateway.html":{},"interfaces/RequestWithUser.html":{}}}],["successful",{"_index":807,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["successfully",{"_index":481,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["successfully'})@apiresponse({status",{"_index":800,"title":{},"body":{"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["summary",{"_index":549,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["super",{"_index":1200,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["super_admin",{"_index":504,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["super_admin')@apioperation({summary",{"_index":486,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/UsersController.html":{}}}],["super_admin')@post('admin/update",{"_index":788,"title":{},"body":{"controllers/AuthController.html":{}}}],["super_admin')@useguards(rolesguard)@apioperation({summary",{"_index":1442,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["super_admin'].includes(role.name",{"_index":589,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":2846,"title":{},"body":{"index.html":{},"modules.html":{}}}],["supporting",{"_index":2381,"title":{},"body":{"controllers/QueuesController.html":{}}}],["svg",{"_index":2892,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":2773,"title":{},"body":{"dependencies.html":{}}}],["synchronize",{"_index":331,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["table",{"_index":2738,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2737,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":268,"title":{},"body":{"injectables/AnnouncementService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["taken",{"_index":1034,"title":{},"body":{"injectables/AuthService.html":{}}}],["target",{"_index":1125,"title":{},"body":{"injectables/AuthService.html":{}}}],["targetuser",{"_index":1126,"title":{},"body":{"injectables/AuthService.html":{}}}],["targetuserid",{"_index":759,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["template",{"_index":1603,"title":{},"body":{"injectables/EmailService.html":{}}}],["template.html",{"_index":1609,"title":{},"body":{"injectables/EmailService.html":{}}}],["template.subject",{"_index":1608,"title":{},"body":{"injectables/EmailService.html":{}}}],["templates",{"_index":1589,"title":{},"body":{"injectables/EmailService.html":{}}}],["templates.verification",{"_index":1605,"title":{},"body":{"injectables/EmailService.html":{}}}],["templates[purpose",{"_index":1604,"title":{},"body":{"injectables/EmailService.html":{}}}],["temporarily",{"_index":2367,"title":{},"body":{"injectables/QueueService.html":{}}}],["term",{"_index":2600,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["test",{"_index":1714,"title":{},"body":{"classes/LoginDto.html":{},"index.html":{}}}],["test(password",{"_index":1175,"title":{},"body":{"injectables/AuthService.html":{}}}],["test:covdeployment",{"_index":2809,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":2808,"title":{},"body":{"index.html":{}}}],["test@example.com",{"_index":100,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["test@example.com'})@isemail()@isnotempty",{"_index":2429,"title":{},"body":{"classes/RegisterDto.html":{}}}],["test@example.com'})@isemail()@isoptional",{"_index":60,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["test@example.com'})@isnotempty",{"_index":1712,"title":{},"body":{"classes/LoginDto.html":{}}}],["testing",{"_index":1877,"title":{},"body":{"injectables/OTPService.html":{},"injectables/QueueSchedulerService.html":{}}}],["testminioconnection",{"_index":2722,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["tests",{"_index":2805,"title":{},"body":{"index.html":{}}}],["text",{"_index":130,"title":{},"body":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/DocumentApplication.html":{}}}],["thanks",{"_index":2876,"title":{},"body":{"index.html":{}}}],["this.announcementrepository.create",{"_index":252,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["this.announcementrepository.find",{"_index":255,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["this.announcementrepository.findone",{"_index":258,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["this.announcementrepository.save(announcement",{"_index":254,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["this.announcementservice.create(createannouncementdto",{"_index":199,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["this.announcementservice.findall",{"_index":200,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["this.announcementservice.findone(id",{"_index":204,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["this.announcementservice.getrecentannouncements(limit",{"_index":202,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["this.announcementservice.remove(id",{"_index":208,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["this.announcementservice.update(id",{"_index":206,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["this.appointmentrepository.count",{"_index":726,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.appointmentrepository.delete(id",{"_index":684,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.appointmentrepository.find",{"_index":663,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.appointmentrepository.findone",{"_index":665,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.appointmentrepository.save(appointment",{"_index":689,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.appointmentrepository.save(updated",{"_index":679,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.appointmentservice.create(createappointmentdto",{"_index":554,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.findall",{"_index":558,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.findallbyuser(user.id",{"_index":562,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.findbyappointmentnumber(appointmentnumber",{"_index":582,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.findone(+id",{"_index":580,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.getappointmentsbydate(date",{"_index":570,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.getappointmentsbydaterange",{"_index":576,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.getappointmentsstats",{"_index":565,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.getavailableslots(date",{"_index":579,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.remove(+id",{"_index":605,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.update(+id",{"_index":593,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.updatestatus(+id",{"_index":601,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appservice.gethello",{"_index":279,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.adminupdateuser",{"_index":905,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.authservice.finduserbyemail(email",{"_index":923,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.authservice.getprofile(number(req.user.id",{"_index":896,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.authservice.login(logindto",{"_index":863,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.authservice.register(createuserdto",{"_index":877,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.authservice.updatepassword(email",{"_index":932,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.authservice.updateuserinfo",{"_index":898,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.bucketname",{"_index":1749,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["this.checktimeslotavailability(newdate",{"_index":675,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.configservice",{"_index":1791,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.configservice.get",{"_index":1787,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.configservice.get('email_from",{"_index":1607,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.configservice.get('minio_port",{"_index":1789,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.configservice.get('otp_secret",{"_index":1862,"title":{},"body":{"injectables/OTPService.html":{}}}],["this.configservice.get('smtp_host",{"_index":1582,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.configservice.get('smtp_pass",{"_index":1588,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.configservice.get('smtp_port",{"_index":1583,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.configservice.get('smtp_secure",{"_index":1585,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.configservice.get('smtp_user",{"_index":1586,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.configservice.get('ws_cors_origin",{"_index":2016,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.counterrepository.create",{"_index":2352,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.counterrepository.find",{"_index":2354,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.counterrepository.findone",{"_index":2315,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.counterrepository.save(counter",{"_index":2322,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.documentapplicationsservice.create(createdto",{"_index":1487,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.findall",{"_index":1531,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.findall(userid",{"_index":1514,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.findone(id",{"_index":1520,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.getallapplicationfiles",{"_index":1519,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.getapplicationfiles",{"_index":1517,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.getapplicationstats",{"_index":1533,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.getfiledownloadurl",{"_index":1523,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.remove(id",{"_index":1528,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.update",{"_index":1524,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.updatestatus",{"_index":1525,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.uploadfile",{"_index":1509,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.emailservice.sendapplicationnotification",{"_index":880,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.emailservice.sendotp(email",{"_index":1876,"title":{},"body":{"injectables/OTPService.html":{}}}],["this.ensurebucketexists",{"_index":1801,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.findone(id",{"_index":263,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.findone(queueid",{"_index":2250,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.finduserbyemail(email",{"_index":1169,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.generatealltimeslots",{"_index":708,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.getdetailsformultiplequeues(queueids",{"_index":2303,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.getprofile(targetuserid",{"_index":1160,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.getqueueposition(queueid",{"_index":2253,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.getqueueposition(savedqueue.id",{"_index":2246,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.handledailyqueuereset",{"_index":2139,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["this.isresetinprogress",{"_index":2082,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["this.isvalidemail(email",{"_index":1031,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.isvalidemail(updateuserdto.email",{"_index":1072,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(payload",{"_index":1023,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logdailystatistics(startofday",{"_index":2124,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["this.logger.error",{"_index":2125,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["this.logger.error('delete",{"_index":1765,"title":{},"body":{"injectables/MinioService.html":{}}}],["this.logger.error('error",{"_index":1806,"title":{},"body":{"injectables/MinioService-1.html":{},"injectables/QueueSchedulerService.html":{}}}],["this.logger.error('get",{"_index":1763,"title":{},"body":{"injectables/MinioService.html":{}}}],["this.logger.error('upload",{"_index":1760,"title":{},"body":{"injectables/MinioService.html":{}}}],["this.logger.log",{"_index":600,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/QueueSchedulerService.html":{}}}],["this.logger.log('fetching",{"_index":557,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.logger.log(`bucket",{"_index":1805,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.logger.log(`client",{"_index":2012,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.logger.log(`cors",{"_index":2015,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.logger.log(`creating",{"_index":553,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.logger.log(`deleting",{"_index":604,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.logger.log(`fetching",{"_index":561,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.logger.log(`file",{"_index":1758,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["this.logger.log(`minio",{"_index":1798,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.logger.log(`socket",{"_index":2024,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.logger.log(`updating",{"_index":592,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.logger.warn",{"_index":2083,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["this.minioclient",{"_index":1736,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["this.minioclient.bucketexists(this.bucketname",{"_index":1802,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.minioclient.listobjects",{"_index":1820,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.minioclient.makebucket(this.bucketname",{"_index":1803,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.minioclient.presignedgetobject",{"_index":1761,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["this.minioclient.putobject",{"_index":1751,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["this.minioclient.removeobject(this.bucketname",{"_index":1764,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["this.minioclient.statobject(this.bucketname",{"_index":1816,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.otprepository.create",{"_index":1874,"title":{},"body":{"injectables/OTPService.html":{}}}],["this.otprepository.delete",{"_index":1882,"title":{},"body":{"injectables/OTPService.html":{}}}],["this.otprepository.findone",{"_index":1879,"title":{},"body":{"injectables/OTPService.html":{}}}],["this.otprepository.save(otpentity",{"_index":1875,"title":{},"body":{"injectables/OTPService.html":{}}}],["this.otprepository.update",{"_index":1856,"title":{},"body":{"injectables/OTPService.html":{}}}],["this.otpservice.generateotp(email",{"_index":911,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.otpservice.verifyotp",{"_index":875,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.otpservice.verifyotp(email",{"_index":918,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.queuedetailsrepository.create",{"_index":2230,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuedetailsrepository.find",{"_index":2286,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuedetailsrepository.findone",{"_index":2251,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuedetailsrepository.save(queuedetails",{"_index":2242,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuegateway.notifycounterupdate(counterid",{"_index":2337,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuegateway.notifyqueueupdate(id",{"_index":2262,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuegateway.notifyqueueupdate(nextqueue.id",{"_index":2334,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuegateway.notifyqueueupdate(queue.id",{"_index":2111,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["this.queuegateway.server.emit('dailyqueuereset",{"_index":2117,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["this.queuegateway.server.emit('queuelistupdate",{"_index":2247,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.count",{"_index":2130,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["this.queuerepository.create",{"_index":2211,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.find",{"_index":2100,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["this.queuerepository.findone",{"_index":2248,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.save",{"_index":2105,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["this.queuerepository.save(counter.currentqueue",{"_index":2319,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.save(nextqueue",{"_index":2327,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.save(queue",{"_index":2217,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queueservice.findbystatuswithdetails(queuestatus.pending",{"_index":2390,"title":{},"body":{"controllers/QueuesController.html":{}}}],["this.queueservice.findbystatuswithdetails(queuestatus.serving",{"_index":2391,"title":{},"body":{"controllers/QueuesController.html":{}}}],["this.queueservice.findbyuseridwithdetails(userid",{"_index":2417,"title":{},"body":{"controllers/QueuesController.html":{}}}],["this.queueservice.findone(queueid",{"_index":2424,"title":{},"body":{"controllers/QueuesController.html":{}}}],["this.queueservice.getqueuedetails(queueid",{"_index":2020,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.queueservice.getqueueposition(queueid",{"_index":2022,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.reflector.getallandoverride",{"_index":2460,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["this.rolesrepository.find",{"_index":2521,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesrepository.findby",{"_index":2529,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesrepository.findone",{"_index":2522,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesservice.assignrolestouser",{"_index":1146,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.rolesservice.assignrolestouser(id",{"_index":1682,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.rolesservice.assignrolestouser(user.id",{"_index":1051,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.rolesservice.findall",{"_index":2490,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.findbyname('citizen",{"_index":1050,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.rolesservice.findone(+id",{"_index":2491,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.findone(roleid",{"_index":1143,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.rolesservice.findone(updateuserdto.defaultroleid",{"_index":1150,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.rolesservice.getuserroles(+userid",{"_index":2493,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.getuserroles(adminid",{"_index":1119,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.rolesservice.getuserroles(targetuserid",{"_index":1152,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.rolesservice.getuserroles(user.id",{"_index":1015,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.rolesservice.getuserroles(userid",{"_index":1068,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.server.emit('counterlistupdate",{"_index":2034,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.server.emit('queuelistupdate",{"_index":2031,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.server.to(`counter_${counterid}`).emit('counterupdate",{"_index":2033,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.server.to(`queue_${queueid}`).emit('queueupdate",{"_index":2030,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.transporter",{"_index":1580,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.transporter.sendmail(mailoptions",{"_index":1610,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.updateuserinfo(targetuserid",{"_index":1133,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersrepository",{"_index":1638,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.count",{"_index":1684,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.create",{"_index":1047,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.delete(id",{"_index":1683,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.delete(user.id",{"_index":1059,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersrepository.find",{"_index":1695,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.findone",{"_index":991,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.save(user",{"_index":1048,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.update",{"_index":1172,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersrepository.update(id",{"_index":1675,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.update(targetuserid",{"_index":1158,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersrepository.update(userid",{"_index":1102,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.adminupdate(+id",{"_index":2673,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.create(userwithhashedpassword",{"_index":2679,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall",{"_index":2665,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(req.user.id",{"_index":2666,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(user.id",{"_index":2681,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(userid",{"_index":2671,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getstats",{"_index":2667,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.remove(+id",{"_index":2674,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.updatestatus(+id",{"_index":2675,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.validatepasswordstrength(newpassword",{"_index":1168,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.validatepasswordstrength(password",{"_index":1039,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.validatepasswordstrength(updateuserdto.password",{"_index":1081,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":259,"title":{},"body":{"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["time",{"_index":363,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppointmentService.html":{},"injectables/OTPService.html":{},"injectables/QueueService.html":{},"index.html":{}}}],["time_zone",{"_index":367,"title":{},"body":{"modules/AppModule.html":{}}}],["timestamp",{"_index":1831,"title":{},"body":{"entities/OTP.html":{},"injectables/QueueSchedulerService.html":{}}}],["timezone",{"_index":2063,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["title",{"_index":120,"title":{},"body":{"entities/Announcement.html":{},"classes/CreateAnnouncementDto.html":{}}}],["today",{"_index":661,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["today's",{"_index":729,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["today.getdate",{"_index":2092,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["today.getfullyear()}${string(today.getmonth",{"_index":2191,"title":{},"body":{"injectables/QueueService.html":{}}}],["today.getmonth",{"_index":2091,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["today.sethours(0",{"_index":662,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["todayappointments",{"_index":730,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["todaycount",{"_index":2201,"title":{},"body":{"injectables/QueueService.html":{}}}],["todayend",{"_index":2199,"title":{},"body":{"injectables/QueueService.html":{}}}],["todayend.sethours(23",{"_index":2200,"title":{},"body":{"injectables/QueueService.html":{}}}],["todaystart",{"_index":2196,"title":{},"body":{"injectables/QueueService.html":{}}}],["todaystart.sethours(0",{"_index":2198,"title":{},"body":{"injectables/QueueService.html":{}}}],["token",{"_index":1022,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["tokens",{"_index":1194,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["tolowercase",{"_index":1793,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["tomorrow",{"_index":714,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["tomorrow.sethours(0",{"_index":716,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["total",{"_index":735,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"classes/PaginatedUsersResponseDto.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["totalcount",{"_index":724,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueService.html":{}}}],["totalpages",{"_index":1653,"title":{},"body":{"interfaces/FindAllOptions.html":{},"classes/PaginatedUsersResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["totalusers",{"_index":1625,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["totalwaittimems",{"_index":2345,"title":{},"body":{"injectables/QueueService.html":{}}}],["touch",{"_index":2883,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":2603,"title":{},"body":{"classes/UserQueryDto.html":{},"dependencies.html":{}}}],["transporter",{"_index":1570,"title":{},"body":{"injectables/EmailService.html":{}}}],["trigger",{"_index":2137,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["triggered",{"_index":2138,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["triggering",{"_index":2310,"title":{},"body":{"injectables/QueueService.html":{}}}],["true",{"_index":136,"title":{},"body":{"entities/Announcement.html":{},"injectables/AnnouncementService.html":{},"modules/AppModule.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"injectables/EmailService.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["true})@joincolumn({name",{"_index":451,"title":{},"body":{"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["try",{"_index":647,"title":{},"body":{"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["turn",{"_index":2333,"title":{},"body":{"injectables/QueueService.html":{}}}],["twitter",{"_index":2889,"title":{},"body":{"index.html":{}}}],["type",{"_index":29,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"modules/AppModule.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"injectables/EmailService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["typeof",{"_index":1107,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["typeorm",{"_index":145,"title":{},"body":{"entities/Announcement.html":{},"injectables/AnnouncementService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"entities/Role.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":225,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature",{"_index":1542,"title":{},"body":{"modules/DocumentApplicationsModule.html":{}}}],["typeormmodule.forfeature([announcement",{"_index":230,"title":{},"body":{"modules/AnnouncementModule.html":{}}}],["typeormmodule.forfeature([appointment",{"_index":611,"title":{},"body":{"modules/AppointmentModule.html":{}}}],["typeormmodule.forfeature([otp",{"_index":374,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmodule.forfeature([queue",{"_index":2048,"title":{},"body":{"modules/QueueModule.html":{}}}],["typeormmodule.forfeature([role",{"_index":2506,"title":{},"body":{"modules/RolesModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":945,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":317,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":2902,"title":{},"body":{"miscellaneous/variables.html":{}}}],["types",{"_index":2535,"title":{},"body":{"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["types/nodemailer",{"_index":2746,"title":{},"body":{"dependencies.html":{}}}],["types/qrcode",{"_index":2748,"title":{},"body":{"dependencies.html":{}}}],["types/speakeasy",{"_index":2750,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":998,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["ui",{"_index":2774,"title":{},"body":{"dependencies.html":{}}}],["unauthorized",{"_index":776,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["unauthorized'})@apibearerauth('jwt",{"_index":801,"title":{},"body":{"controllers/AuthController.html":{}}}],["unauthorized'})@apiresponse({status",{"_index":831,"title":{},"body":{"controllers/AuthController.html":{}}}],["unauthorizedexception",{"_index":839,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{}}}],["unauthorizedexception('admin",{"_index":1117,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('insufficient",{"_index":1124,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('invalid",{"_index":895,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{}}}],["unauthorizedexception('user",{"_index":1067,"title":{},"body":{"injectables/AuthService.html":{}}}],["uncomment",{"_index":1476,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["undefined",{"_index":44,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Appointment.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateDocumentApplicationDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"injectables/UsersService.html":{}}}],["undefined})@apiresponse({status",{"_index":809,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined})@isarray()@isoptional",{"_index":45,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["undefined})@isenum(applicationtype",{"_index":1278,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["undefined})@isobject",{"_index":1284,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["undefined})@isoptional()@isarray()@isnumber",{"_index":1345,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["unexpected",{"_index":1113,"title":{},"body":{"injectables/AuthService.html":{}}}],["unique",{"_index":462,"title":{},"body":{"entities/Appointment.html":{},"entities/Queue.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["uniqueness",{"_index":1657,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["unit",{"_index":2806,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":483,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/EmailService.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser-1.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["unlicensed",{"_index":2898,"title":{},"body":{"properties.html":{}}}],["unsafe",{"_index":2657,"title":{},"body":{"controllers/UsersController.html":{}}}],["unused",{"_index":1000,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["update",{"_index":11,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/EmailService.html":{},"interfaces/FindAllOptions.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update'})@apibody({type",{"_index":766,"title":{},"body":{"controllers/AuthController.html":{}}}],["update(id",{"_index":178,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/QueueService.html":{},"controllers/UsersController.html":{}}}],["updateannouncementdto",{"_index":179,"title":{"classes/UpdateAnnouncementDto.html":{}},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"classes/UpdateAnnouncementDto.html":{},"coverage.html":{}}}],["updateappointmentdto",{"_index":516,"title":{"classes/UpdateAppointmentDto.html":{}},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"classes/UpdateAppointmentDto.html":{},"coverage.html":{}}}],["updateappointmentdto.appointmentdate",{"_index":669,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["updateappointmentdto.appointmenttime",{"_index":670,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["updated",{"_index":676,"title":{},"body":{"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EmailService.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updated'})@apiresponse({status",{"_index":769,"title":{},"body":{"controllers/AuthController.html":{}}}],["updated_at",{"_index":1383,"title":{},"body":{"entities/DocumentApplication.html":{},"entities/User.html":{}}}],["updatedat",{"_index":121,"title":{},"body":{"entities/Announcement.html":{},"entities/Appointment.html":{},"entities/DocumentApplication.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{}}}],["updatedata",{"_index":1659,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.contactnumber",{"_index":1664,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.defaultroleid",{"_index":1667,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.email",{"_index":1660,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.firstname",{"_index":1662,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.lastname",{"_index":1663,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.middlename",{"_index":1665,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.name",{"_index":1673,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.nameextension",{"_index":1666,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.username",{"_index":1661,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedatecolumn",{"_index":142,"title":{},"body":{"entities/Announcement.html":{},"entities/Appointment.html":{},"entities/DocumentApplication.html":{},"entities/User.html":{}}}],["updatedatecolumn({name",{"_index":1382,"title":{},"body":{"entities/DocumentApplication.html":{},"entities/User.html":{}}}],["updatedocumentapplicationdto",{"_index":1462,"title":{"classes/UpdateDocumentApplicationDto.html":{}},"body":{"controllers/DocumentApplicationsController.html":{},"classes/UpdateDocumentApplicationDto.html":{},"coverage.html":{}}}],["updatedqueue",{"_index":2261,"title":{},"body":{"injectables/QueueService.html":{}}}],["updatedto",{"_index":1461,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["updateduser",{"_index":1103,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateduser.defaultrole?.name",{"_index":1105,"title":{},"body":{"injectables/AuthService.html":{}}}],["updatepassword",{"_index":958,"title":{},"body":{"injectables/AuthService.html":{}}}],["updatepassword(email",{"_index":979,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateprofile",{"_index":755,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["updateprofile(req",{"_index":829,"title":{},"body":{"controllers/AuthController.html":{}}}],["updatequeuedto",{"_index":2182,"title":{"classes/UpdateQueueDto.html":{}},"body":{"injectables/QueueService.html":{},"classes/UpdateQueueDto.html":{},"coverage.html":{}}}],["updatequeuedto.counternumber",{"_index":2259,"title":{},"body":{"injectables/QueueService.html":{}}}],["updatequeuedto.status",{"_index":2256,"title":{},"body":{"injectables/QueueService.html":{}}}],["updates",{"_index":1138,"title":{},"body":{"injectables/AuthService.html":{},"classes/QueueGateway.html":{},"index.html":{}}}],["updatestatus",{"_index":473,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updatestatus(id",{"_index":519,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updatestatusdto",{"_index":2654,"title":{},"body":{"controllers/UsersController.html":{}}}],["updatestatusdto.isactive",{"_index":2676,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuserdto",{"_index":14,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateuserdto.defaultroleid",{"_index":1149,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.email",{"_index":1071,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.firstname",{"_index":1087,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.lastname",{"_index":1091,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.middlename",{"_index":1089,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.nameextension",{"_index":1093,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.password",{"_index":1080,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.roleids",{"_index":1139,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.roleids.includes(updateuserdto.defaultroleid",{"_index":1157,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.roleids.join",{"_index":1148,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.roleids.length",{"_index":1140,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.username",{"_index":1074,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto:22",{"_index":61,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:27",{"_index":86,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:37",{"_index":84,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:42",{"_index":65,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:47",{"_index":71,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:52",{"_index":68,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:60",{"_index":77,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:68",{"_index":59,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:76",{"_index":56,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto['name",{"_index":1101,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto})@useguards(jwtauthguard)@post('update",{"_index":833,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateuserinfo",{"_index":959,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserinfo(userid",{"_index":981,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserstatusdto",{"_index":2554,"title":{"classes/UpdateUserStatusDto.html":{}},"body":{"classes/UpdateUserStatusDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["updating",{"_index":96,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/QueueService.html":{},"classes/UpdateUserDto.html":{}}}],["upload",{"_index":1472,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"injectables/MinioService-1.html":{}}}],["uploaddocument",{"_index":1425,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["uploaddocument(id",{"_index":1467,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["uploaded",{"_index":1759,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["uploaded_at",{"_index":1565,"title":{},"body":{"entities/DocumentFile.html":{}}}],["uploadedat",{"_index":1547,"title":{},"body":{"entities/DocumentFile.html":{}}}],["uploadedfile",{"_index":1475,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["uploadfile",{"_index":1722,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["uploadfile(file",{"_index":1729,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["uploading",{"_index":1813,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["uppercase",{"_index":1178,"title":{},"body":{"injectables/AuthService.html":{}}}],["url",{"_index":1453,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["use",{"_index":333,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/EmailService.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["used",{"_index":1858,"title":{},"body":{"injectables/OTPService.html":{}}}],["usefactory",{"_index":319,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["useguards",{"_index":522,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard",{"_index":545,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["useguards(rolesguard",{"_index":555,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["useinterceptors",{"_index":1474,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["user",{"_index":12,"title":{"entities/User.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/EmailService.html":{},"interfaces/FindAllOptions.html":{},"classes/LoginDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":763,"title":{},"body":{"controllers/AuthController.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{}}}],["user'})@isoptional()@isnumber",{"_index":1323,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.defaultrole?.name",{"_index":1027,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.defaultroleid",{"_index":1053,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.dto",{"_index":845,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":7,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:102",{"_index":1324,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:19",{"_index":1328,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":2550,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:27",{"_index":1350,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:36",{"_index":1344,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:37",{"_index":2553,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:42",{"_index":2551,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:44",{"_index":1330,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:47",{"_index":2552,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:52",{"_index":1334,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:60",{"_index":1331,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:68",{"_index":1338,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:76",{"_index":1341,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:84",{"_index":1321,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:90",{"_index":40,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["user.dto.ts:94",{"_index":1347,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:99",{"_index":46,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["user.email",{"_index":1021,"title":{},"body":{"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.firstname",{"_index":1088,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.id",{"_index":552,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{}}}],["user.lastname",{"_index":1092,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.middlename",{"_index":1090,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.nameextension",{"_index":1094,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.password",{"_index":994,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.roles",{"_index":2474,"title":{},"body":{"entities/Role.html":{},"injectables/RolesService.html":{}}}],["user.roles.map((role",{"_index":1652,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.roles.some((role",{"_index":588,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{}}}],["user.username",{"_index":1075,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user/:userid",{"_index":789,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["user?.id",{"_index":1513,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["user?.roles.some((role",{"_index":1511,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["user_id",{"_index":1385,"title":{},"body":{"entities/DocumentApplication.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["user_roles",{"_index":2579,"title":{},"body":{"entities/User.html":{}}}],["userdetails",{"_index":2361,"title":{},"body":{"injectables/QueueService.html":{}}}],["userdetails.map((detail",{"_index":2363,"title":{},"body":{"injectables/QueueService.html":{}}}],["userid",{"_index":431,"title":{},"body":{"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{}}}],["useridnumber",{"_index":2356,"title":{},"body":{"injectables/QueueService.html":{}}}],["username",{"_index":28,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["username'})@isoptional()@isstring",{"_index":2601,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["userquerydto",{"_index":2592,"title":{"classes/UserQueryDto.html":{}},"body":{"classes/UserQueryDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["userqueues",{"_index":2416,"title":{},"body":{"controllers/QueuesController.html":{}}}],["userqueues.length",{"_index":2418,"title":{},"body":{"controllers/QueuesController.html":{}}}],["userqueues.map((queue",{"_index":2419,"title":{},"body":{"controllers/QueuesController.html":{}}}],["userresponsedto",{"_index":1893,"title":{"classes/UserResponseDto.html":{}},"body":{"classes/PaginatedUsersResponseDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["userroles",{"_index":1151,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["userroles.map((role",{"_index":2466,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["userroles.some",{"_index":1154,"title":{},"body":{"injectables/AuthService.html":{}}}],["users",{"_index":1438,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Role.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users.controller",{"_index":2687,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.map((user",{"_index":1651,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["users.service",{"_index":2659,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/entities/user.entity",{"_index":456,"title":{},"body":{"entities/Appointment.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/DocumentApplication.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{}}}],["users/users.module",{"_index":301,"title":{},"body":{"modules/AppModule.html":{}}}],["usersbyrole",{"_index":1628,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["usersbyroledto",{"_index":2630,"title":{"classes/UsersByRoleDto.html":{}},"body":{"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"coverage.html":{}}}],["userscontroller",{"_index":2633,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":290,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":966,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["usersservice",{"_index":1633,"title":{"injectables/UsersService.html":{}},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["userstats",{"_index":1624,"title":{"interfaces/UserStats.html":{}},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userstatsresponsedto",{"_index":2623,"title":{"classes/UserStatsResponseDto.html":{}},"body":{"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"coverage.html":{}}}],["userwithhashedpassword",{"_index":2678,"title":{},"body":{"controllers/UsersController.html":{}}}],["userwithoutpassword",{"_index":1026,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["userwithroles",{"_index":2680,"title":{},"body":{"controllers/UsersController.html":{}}}],["usessl",{"_index":1742,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["usesslvalue",{"_index":1790,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["using",{"_index":365,"title":{},"body":{"modules/AppModule.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"injectables/RolesService.html":{},"index.html":{}}}],["valid",{"_index":1014,"title":{},"body":{"injectables/AuthService.html":{}}}],["validate",{"_index":909,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{}}}],["validate(payload",{"_index":1205,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["validatepasswordstrength",{"_index":960,"title":{},"body":{"injectables/AuthService.html":{}}}],["validatepasswordstrength(password",{"_index":983,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser",{"_index":961,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(logindto",{"_index":985,"title":{},"body":{"injectables/AuthService.html":{}}}],["validating",{"_index":1193,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["validation",{"_index":1065,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/QueueService.html":{}}}],["validator",{"_index":93,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserQueryDto.html":{},"dependencies.html":{}}}],["validity",{"_index":648,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["value",{"_index":172,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"injectables/EmailService.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"classes/UserQueryDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":2266,"title":{},"body":{"injectables/QueueService.html":{}}}],["varchar",{"_index":126,"title":{},"body":{"entities/Announcement.html":{}}}],["variable",{"_index":335,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{}}}],["variables",{"_index":1199,"title":{"miscellaneous/variables.html":{}},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["vars",{"_index":1001,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["verification",{"_index":870,"title":{},"body":{"controllers/AuthController.html":{},"injectables/EmailService.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{}}}],["verified",{"_index":919,"title":{},"body":{"controllers/AuthController.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"interfaces/RequestWithUser.html":{}}}],["verify",{"_index":869,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EmailService.html":{},"interfaces/RequestWithUser.html":{}}}],["verifying",{"_index":920,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["verifyotp",{"_index":756,"title":{},"body":{"controllers/AuthController.html":{},"injectables/OTPService.html":{}}}],["verifyotp(@body",{"_index":917,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["verifyotp(email",{"_index":1848,"title":{},"body":{"injectables/OTPService.html":{}}}],["verifyotp(verifyotpdto",{"_index":835,"title":{},"body":{"controllers/AuthController.html":{}}}],["verifyotpdto",{"_index":838,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["version",{"_index":2896,"title":{},"body":{"properties.html":{}}}],["video",{"_index":2853,"title":{},"body":{"index.html":{}}}],["view",{"_index":1616,"title":{},"body":{"injectables/EmailService.html":{},"controllers/UsersController.html":{}}}],["visit",{"_index":2843,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":2856,"title":{},"body":{"index.html":{}}}],["void",{"_index":1976,"title":{},"body":{"classes/QueueGateway.html":{}}}],["wait",{"_index":2340,"title":{},"body":{"injectables/QueueService.html":{}}}],["waiting",{"_index":2323,"title":{},"body":{"injectables/QueueService.html":{}}}],["walk",{"_index":2413,"title":{},"body":{"controllers/QueuesController.html":{}}}],["watch",{"_index":2801,"title":{},"body":{"index.html":{}}}],["we'll",{"_index":1130,"title":{},"body":{"injectables/AuthService.html":{}}}],["website",{"_index":2887,"title":{},"body":{"index.html":{}}}],["websocketgateway",{"_index":1996,"title":{},"body":{"classes/QueueGateway.html":{}}}],["websocketserver",{"_index":1971,"title":{},"body":{"classes/QueueGateway.html":{}}}],["weekend",{"_index":652,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["weekends",{"_index":659,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["welcome",{"_index":879,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["willbeassigned",{"_index":1156,"title":{},"body":{"injectables/AuthService.html":{}}}],["without",{"_index":2309,"title":{},"body":{"injectables/QueueService.html":{},"controllers/UsersController.html":{}}}],["working",{"_index":2842,"title":{},"body":{"index.html":{}}}],["world",{"_index":378,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":2866,"title":{},"body":{"index.html":{}}}],["xxx",{"_index":2204,"title":{},"body":{"injectables/QueueService.html":{}}}],["yes",{"_index":1005,"title":{},"body":{"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/MinioService-1.html":{}}}],["you'd",{"_index":2880,"title":{},"body":{"index.html":{}}}],["you're",{"_index":2810,"title":{},"body":{"index.html":{}}}],["yyyy",{"_index":732,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["yyyymmdd",{"_index":2203,"title":{},"body":{"injectables/QueueService.html":{}}}],["zone",{"_index":364,"title":{},"body":{"modules/AppModule.html":{}}}],["zoom",{"_index":221,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AdminUpdateUserDto.html":{"url":"classes/AdminUpdateUserDto.html","title":"class - AdminUpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AdminUpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/update-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for admin to update any user\n\n            \n\n            \n                Extends\n            \n            \n                            UpdateUserDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                defaultRoleId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                roleIds\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                contactNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                middleName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                nameExtension\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        defaultRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Default role ID for the user', example: 2})@IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        roleIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Array of role IDs to assign to the user', example: undefined, type: undefined})@IsArray()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:99\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Complete address', example: '123 Main St, San Ildefonso, Bulacan'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:76\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        contactNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Contact number', example: '09123456789'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:68\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User email address', example: 'test@example.com'})@IsEmail()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:22\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'First name', example: 'John'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:42\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Last name', example: 'Doe'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:52\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Middle name', example: 'Robert'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:47\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        nameExtension\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Name extension (e.g., Jr., III)', example: 'Jr.'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:60\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User password (min 8 characters)', example: 'password123', minLength: 8})@IsString()@IsOptional()@MinLength(8)\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:37\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Username', example: 'john_doe'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:27\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsOptional,\n  IsString,\n  MinLength,\n  IsNumber,\n  IsArray,\n} from 'class-validator';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\n/**\n * DTO for updating user information (citizen)\n * @class UpdateUserDto\n */\nexport class UpdateUserDto {\n  @ApiPropertyOptional({\n    description: 'User email address',\n    example: 'test@example.com',\n  })\n  @IsEmail()\n  @IsOptional()\n  email?: string;\n\n  @ApiPropertyOptional({ description: 'Username', example: 'john_doe' })\n  @IsString()\n  @IsOptional()\n  username?: string;\n\n  @ApiPropertyOptional({\n    description: 'User password (min 8 characters)',\n    example: 'password123',\n    minLength: 8,\n  })\n  @IsString()\n  @IsOptional()\n  @MinLength(8)\n  password?: string;\n\n  @ApiPropertyOptional({ description: 'First name', example: 'John' })\n  @IsString()\n  @IsOptional()\n  firstName?: string;\n\n  @ApiPropertyOptional({ description: 'Middle name', example: 'Robert' })\n  @IsString()\n  @IsOptional()\n  middleName?: string;\n\n  @ApiPropertyOptional({ description: 'Last name', example: 'Doe' })\n  @IsString()\n  @IsOptional()\n  lastName?: string;\n\n  @ApiPropertyOptional({\n    description: 'Name extension (e.g., Jr., III)',\n    example: 'Jr.',\n  })\n  @IsString()\n  @IsOptional()\n  nameExtension?: string;\n\n  @ApiPropertyOptional({\n    description: 'Contact number',\n    example: '09123456789',\n  })\n  @IsString()\n  @IsOptional()\n  contactNumber?: string;\n\n  @ApiPropertyOptional({\n    description: 'Complete address',\n    example: '123 Main St, San Ildefonso, Bulacan',\n  })\n  @IsString()\n  @IsOptional()\n  address?: string;\n}\n\n/**\n * DTO for admin to update any user\n * @class AdminUpdateUserDto\n */\nexport class AdminUpdateUserDto extends UpdateUserDto {\n  @ApiPropertyOptional({\n    description: 'Default role ID for the user',\n    example: 2,\n  })\n  @IsNumber()\n  @IsOptional()\n  defaultRoleId?: number;\n\n  @ApiPropertyOptional({\n    description: 'Array of role IDs to assign to the user',\n    example: [1, 2],\n    type: [Number],\n  })\n  @IsArray()\n  @IsOptional()\n  roleIds?: number[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Announcement.html":{"url":"entities/Announcement.html","title":"entity - Announcement","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Announcement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/announcement/entities/announcement.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                createdBy\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                image\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                title\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/entities/announcement.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 100, default: 'admin'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/entities/announcement.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/entities/announcement.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/entities/announcement.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 500, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/entities/announcement.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'boolean', default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/entities/announcement.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/entities/announcement.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/entities/announcement.entity.ts:33\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  CreateDateColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity('announcements')\nexport class Announcement {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ type: 'varchar', length: 255 })\n  title: string;\n\n  @Column({ type: 'text' })\n  description: string;\n\n  @Column({ type: 'varchar', length: 500, nullable: true })\n  image: string;\n\n  @Column({ type: 'boolean', default: true })\n  isActive: boolean;\n\n  @Column({ type: 'varchar', length: 100, default: 'admin' })\n  createdBy: string;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AnnouncementController.html":{"url":"controllers/AnnouncementController.html","title":"controller - AnnouncementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AnnouncementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/announcement/announcement.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                announcements\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                getRecentAnnouncements\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createAnnouncementDto: CreateAnnouncementDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createAnnouncementDto\n                                            \n                                                            CreateAnnouncementDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getRecentAnnouncements\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRecentAnnouncements(limit: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('recent')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    5\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.controller.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateAnnouncementDto: UpdateAnnouncementDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.controller.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateAnnouncementDto\n                                            \n                                                            UpdateAnnouncementDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  ParseIntPipe,\n  Query,\n} from '@nestjs/common';\nimport { AnnouncementService } from './announcement.service';\nimport { CreateAnnouncementDto } from './dto/create-announcement.dto';\nimport { UpdateAnnouncementDto } from './dto/update-announcement.dto';\n\n@Controller('announcements')\nexport class AnnouncementController {\n  constructor(private readonly announcementService: AnnouncementService) {}\n\n  @Post()\n  create(@Body() createAnnouncementDto: CreateAnnouncementDto) {\n    return this.announcementService.create(createAnnouncementDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.announcementService.findAll();\n  }\n\n  @Get('recent')\n  getRecentAnnouncements(@Query('limit', ParseIntPipe) limit: number = 5) {\n    return this.announcementService.getRecentAnnouncements(limit);\n  }\n\n  @Get(':id')\n  findOne(@Param('id', ParseIntPipe) id: number) {\n    return this.announcementService.findOne(id);\n  }\n\n  @Patch(':id')\n  update(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() updateAnnouncementDto: UpdateAnnouncementDto,\n  ) {\n    return this.announcementService.update(id, updateAnnouncementDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id', ParseIntPipe) id: number) {\n    return this.announcementService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AnnouncementModule.html":{"url":"modules/AnnouncementModule.html","title":"module - AnnouncementModule","body":"\n                   \n\n\n\n\n    Modules\n    AnnouncementModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AnnouncementModule\n\n\n\ncluster_AnnouncementModule_exports\n\n\n\ncluster_AnnouncementModule_providers\n\n\n\n\nAnnouncementService \n\nAnnouncementService \n\n\n\nAnnouncementModule\n\nAnnouncementModule\n\nAnnouncementService  -->\n\nAnnouncementModule->AnnouncementService \n\n\n\n\n\nAnnouncementService\n\nAnnouncementService\n\nAnnouncementModule -->\n\nAnnouncementService->AnnouncementModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/announcement/announcement.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AnnouncementService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AnnouncementController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AnnouncementService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AnnouncementService } from './announcement.service';\nimport { AnnouncementController } from './announcement.controller';\nimport { Announcement } from './entities/announcement.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Announcement])],\n  controllers: [AnnouncementController],\n  providers: [AnnouncementService],\n  exports: [AnnouncementService],\n})\nexport class AnnouncementModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AnnouncementService.html":{"url":"injectables/AnnouncementService.html","title":"injectable - AnnouncementService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AnnouncementService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/announcement/announcement.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getRecentAnnouncements\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(announcementRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/announcement/announcement.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        announcementRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createAnnouncementDto: CreateAnnouncementDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createAnnouncementDto\n                                            \n                                                            CreateAnnouncementDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getRecentAnnouncements\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRecentAnnouncements(limit: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.service.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    5\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.service.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateAnnouncementDto: UpdateAnnouncementDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.service.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateAnnouncementDto\n                                            \n                                                            UpdateAnnouncementDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Announcement } from './entities/announcement.entity';\nimport { CreateAnnouncementDto } from './dto/create-announcement.dto';\nimport { UpdateAnnouncementDto } from './dto/update-announcement.dto';\n\n@Injectable()\nexport class AnnouncementService {\n  constructor(\n    @InjectRepository(Announcement)\n    private announcementRepository: Repository,\n  ) {}\n\n  async create(\n    createAnnouncementDto: CreateAnnouncementDto,\n  ): Promise {\n    const announcement = this.announcementRepository.create(\n      createAnnouncementDto,\n    );\n    return await this.announcementRepository.save(announcement);\n  }\n\n  async findAll(): Promise {\n    return await this.announcementRepository.find({\n      where: { isActive: true },\n      order: { createdAt: 'DESC' },\n    });\n  }\n\n  async findOne(id: number): Promise {\n    const announcement = await this.announcementRepository.findOne({\n      where: { id, isActive: true },\n    });\n\n    if (!announcement) {\n      throw new NotFoundException(`Announcement with ID ${id} not found`);\n    }\n\n    return announcement;\n  }\n\n  async update(\n    id: number,\n    updateAnnouncementDto: UpdateAnnouncementDto,\n  ): Promise {\n    const announcement = await this.findOne(id);\n\n    Object.assign(announcement, updateAnnouncementDto);\n    return await this.announcementRepository.save(announcement);\n  }\n\n  async remove(id: number): Promise {\n    const announcement = await this.findOne(id);\n    announcement.isActive = false; // Soft delete\n    await this.announcementRepository.save(announcement);\n  }\n\n  async getRecentAnnouncements(limit: number = 5): Promise {\n    return await this.announcementRepository.find({\n      where: { isActive: true },\n      order: { createdAt: 'DESC' },\n      take: limit,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                            \n                                    \n                                healthCheck\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        healthCheck\n                        \n                    \n                \n            \n            \n                \n                        \n                    healthCheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('health')\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     { status: string; }\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n\n  @Get('health')\n  healthCheck() {\n    return { status: 'ok' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAnnouncementModule\n\nAnnouncementModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAnnouncementModule->AppModule\n\n\n\n\n\nAppointmentModule\n\nAppointmentModule\n\nAppModule -->\n\nAppointmentModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nDocumentApplicationsModule\n\nDocumentApplicationsModule\n\nAppModule -->\n\nDocumentApplicationsModule->AppModule\n\n\n\n\n\nQueueModule\n\nQueueModule\n\nAppModule -->\n\nQueueModule->AppModule\n\n\n\n\n\nRolesModule\n\nRolesModule\n\nAppModule -->\n\nRolesModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nAppModule -->\n\nEmailService->AppModule\n\n\n\n\n\nOTPService\n\nOTPService\n\nAppModule -->\n\nOTPService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            EmailService\n                        \n                        \n                            OTPService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AnnouncementModule\n                        \n                        \n                            AppointmentModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            DocumentApplicationsModule\n                        \n                        \n                            QueueModule\n                        \n                        \n                            RolesModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ScheduleModule } from '@nestjs/schedule';\n// import { databaseConfig } from './config/database.config';\nimport { UsersModule } from './users/users.module';\nimport { AuthModule } from './auth/auth.module';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { RolesModule } from './roles/roles.module';\nimport { QueueModule } from './modules/queue/queue.module';\nimport { AppointmentModule } from './modules/appointment/appointment.module';\nimport { AnnouncementModule } from './modules/announcement/announcement.module';\nimport { DocumentApplicationsModule } from './modules/document-applications/document-applications.module';\nimport { OTP } from './entities/otp.entity';\nimport { OTPService } from './services/otp.service';\nimport { EmailService } from './services/email.service';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'mysql',\n        host: configService.get('DB_HOST'),\n        port: configService.get('DB_PORT'),\n        username: configService.get('DB_USERNAME'),\n        password: configService.get('DB_PASSWORD'),\n        database: configService.get('DB_NAME'),\n        entities: [__dirname + '/**/*.entity{.ts,.js}'],\n        synchronize: configService.get('DB_SYNCHRONIZE') === 'true', // Use environment variable\n        logging: configService.get('DB_LOGGING') === 'true', // Use environment variable\n        logger: 'advanced-console',\n        // Prevent data loss in development (below code is for development only)\n        // synchronize: true,\n        migrationsRun: false,\n        dropSchema: false,\n\n        // Only for development environments!\n        beforeConnect: async (connection): Promise => {\n          if (configService.get('NODE_ENV') !== 'production') {\n            const conn = connection as {\n              query: (sql: string) => Promise;\n            };\n            // Disable foreign key checks for development\n            await conn.query('SET FOREIGN_KEY_CHECKS=0;');\n            // Set time zone using environment variable\n            await conn.query(`SET time_zone = '${configService.get('DB_TIMEZONE') || '+08:00'}';`);\n          }\n        },\n        afterConnect: async (connection): Promise => {\n          if (configService.get('NODE_ENV') !== 'production') {\n            await (\n              connection as { query: (sql: string) => Promise }\n            ).query('SET FOREIGN_KEY_CHECKS=1;');\n          }\n        },\n      }),\n    }),\n    UsersModule,\n    AuthModule,\n    RolesModule,\n    QueueModule,\n    AppointmentModule,\n    AnnouncementModule,\n    DocumentApplicationsModule,\n    ScheduleModule.forRoot(),\n    TypeOrmModule.forFeature([OTP]),\n  ],\n  controllers: [AppController],\n  providers: [AppService, OTPService, EmailService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/ApplicationStatusHistory.html":{"url":"entities/ApplicationStatusHistory.html","title":"entity - ApplicationStatusHistory","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  ApplicationStatusHistory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/document-applications/entities/application-status-history.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                application\n                            \n                            \n                                    \n                                applicationId\n                            \n                            \n                                    \n                                changedAt\n                            \n                            \n                                    \n                                changedBy\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                newStatus\n                            \n                            \n                                    \n                                oldStatus\n                            \n                            \n                                    \n                                statusMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        application\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DocumentApplication\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, app => app.statusHistory, {onDelete: 'CASCADE', nullable: false})@JoinColumn({name: 'application_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/application-status-history.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        applicationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'application_id', length: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/application-status-history.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        changedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'changed_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/application-status-history.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        changedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'changed_by', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/application-status-history.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/application-status-history.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        newStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'new_status', length: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/application-status-history.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        oldStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'old_status', length: 50, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/application-status-history.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        statusMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'status_message', type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/application-status-history.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  CreateDateColumn,\n  ManyToOne,\n  JoinColumn,\n  Index,\n} from 'typeorm';\nimport { DocumentApplication } from './document-application.entity';\n\n@Entity('application_status_history')\n@Index(['applicationId'])\n@Index(['changedAt'])\nexport class ApplicationStatusHistory {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ name: 'application_id', length: 50 })\n  applicationId: string;\n\n  @Column({ name: 'old_status', length: 50, nullable: true })\n  oldStatus: string;\n\n  @Column({ name: 'new_status', length: 50 })\n  newStatus: string;\n\n  @Column({ name: 'status_message', type: 'text', nullable: true })\n  statusMessage: string;\n\n  @Column({ name: 'changed_by', nullable: true })\n  changedBy: number;\n\n  @CreateDateColumn({ name: 'changed_at' })\n  changedAt: Date;\n\n  // Relations\n  @ManyToOne(() => DocumentApplication, (app) => app.statusHistory, {\n    onDelete: 'CASCADE',\n    nullable: false,\n  })\n  @JoinColumn({ name: 'application_id' })\n  application: DocumentApplication;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Appointment.html":{"url":"entities/Appointment.html","title":"entity - Appointment","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Appointment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/appointment/entities/appointment.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                address\n                            \n                            \n                                    \n                                appointmentDate\n                            \n                            \n                                    \n                                appointmentNumber\n                            \n                            \n                                    \n                                appointmentTime\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isGuest\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                middleInitial\n                            \n                            \n                                    \n                                phoneNumber\n                            \n                            \n                                    \n                                reasonOfVisit\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    \n                                user\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        appointmentDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'date'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        appointmentNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        appointmentTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isGuest\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        middleInitial\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reasonOfVisit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AppointmentStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: AppointmentStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {nullable: true})@JoinColumn({name: 'userId', foreignKeyConstraintName: 'FK_appointment_user'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:59\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  ManyToOne,\n  JoinColumn,\n} from 'typeorm';\nimport { User } from '../../../users/entities/user.entity';\n\nexport enum AppointmentStatus {\n  PENDING = 'pending',\n  CONFIRMED = 'confirmed',\n  COMPLETED = 'completed',\n  CANCELLED = 'cancelled',\n}\n\n@Entity('appointments')\nexport class Appointment {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true })\n  appointmentNumber: string;\n\n  @Column()\n  firstName: string;\n\n  @Column()\n  lastName: string;\n\n  @Column({ nullable: true })\n  middleInitial: string;\n\n  @Column()\n  address: string;\n\n  @Column()\n  phoneNumber: string;\n\n  @Column()\n  reasonOfVisit: string;\n\n  @Column({ type: 'date' })\n  appointmentDate: string;\n\n  @Column()\n  appointmentTime: string;\n\n  @Column({\n    type: 'enum',\n    enum: AppointmentStatus,\n    default: AppointmentStatus.PENDING,\n  })\n  status: AppointmentStatus;\n\n  @Column({ nullable: true })\n  userId: number;\n\n  @ManyToOne(() => User, { nullable: true })\n  @JoinColumn({\n    name: 'userId',\n    foreignKeyConstraintName: 'FK_appointment_user',\n  })\n  user: User;\n\n  @Column({ default: false })\n  isGuest: boolean;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppointmentController.html":{"url":"controllers/AppointmentController.html","title":"controller - AppointmentController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppointmentController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/appointment/appointment.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                appointments\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                findByAppointmentNumber\n                            \n                            \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findUserAppointments\n                            \n                            \n                                    \n                                    Async\n                                getAvailableSlots\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getByDate\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getByDateRange\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getStats\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createAppointmentDto: CreateAppointmentDto, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create new appointment'})@ApiResponse({status: 201, description: 'Appointment created successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createAppointmentDto\n                                            \n                                                            CreateAppointmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(RolesGuard)@Roles('admin', 'staff', 'super_admin')@ApiOperation({summary: 'Get all appointments (Admin/Staff only)'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:59\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findByAppointmentNumber\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByAppointmentNumber(appointmentNumber: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('by-number/:number')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:125\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                appointmentNumber\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:119\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findUserAppointments\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserAppointments(user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('mine')@ApiOperation({summary: 'Get user appointments'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getAvailableSlots\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAvailableSlots(date: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('available-slots')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:110\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getByDate\n                        \n                    \n                \n            \n            \n                \n                        \n                    getByDate(date: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('by-date')@UseGuards(JwtAuthGuard, RolesGuard)@Roles('admin', 'staff', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:82\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getByDateRange\n                        \n                    \n                \n            \n            \n                \n                        \n                    getByDateRange(startDate: string, endDate: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('date-range')@UseGuards(JwtAuthGuard, RolesGuard)@Roles('admin', 'staff', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                startDate\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                endDate\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('stats')@UseGuards(JwtAuthGuard, RolesGuard)@Roles('admin', 'staff', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:74\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.NO_CONTENT)@ApiOperation({summary: 'Delete appointment'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:176\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateAppointmentDto: UpdateAppointmentDto, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOperation({summary: 'Update appointment'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:132\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateAppointmentDto\n                                            \n                                                            UpdateAppointmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(id: string, status: AppointmentStatus)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/status')@UseGuards(JwtAuthGuard, RolesGuard)@Roles('admin', 'staff', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:157\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                status\n                                            \n                                                            AppointmentStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n  Query,\n  BadRequestException,\n  HttpCode,\n  HttpStatus,\n  Logger,\n} from '@nestjs/common';\nimport { AppointmentService } from './appointment.service';\nimport { CreateAppointmentDto } from './dto/create-appointment.dto';\nimport { UpdateAppointmentDto } from './dto/update-appointment.dto';\nimport { JwtAuthGuard } from '../../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../../auth/guards/roles.guard';\nimport { Roles } from '../../auth/decorators/roles.decorator';\nimport { AppointmentStatus } from './entities/appointment.entity';\nimport { User } from '../../auth/decorators/user.decorator';\nimport { AuthenticatedUser } from '../../auth/jwt.strategy';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n} from '@nestjs/swagger';\n\n@ApiTags('Appointments')\n@Controller('appointments')\n@UseGuards(JwtAuthGuard)\n@ApiBearerAuth('JWT-auth')\nexport class AppointmentController {\n  private readonly logger = new Logger(AppointmentController.name);\n\n  constructor(private readonly appointmentService: AppointmentService) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Create new appointment' })\n  @ApiResponse({ status: 201, description: 'Appointment created successfully' })\n  async create(\n    @Body() createAppointmentDto: CreateAppointmentDto,\n    @User() user: AuthenticatedUser,\n  ) {\n    // Set the userId from the authenticated user\n    createAppointmentDto.userId = user.id;\n\n    this.logger.log(`Creating appointment for user ${user.id}`);\n    return this.appointmentService.create(createAppointmentDto);\n  }\n\n  @Get()\n  @UseGuards(RolesGuard)\n  @Roles('admin', 'staff', 'super_admin')\n  @ApiOperation({ summary: 'Get all appointments (Admin/Staff only)' })\n  async findAll() {\n    this.logger.log('Fetching all appointments');\n    return this.appointmentService.findAll();\n  }\n\n  @Get('mine')\n  @ApiOperation({ summary: 'Get user appointments' })\n  async findUserAppointments(@User() user: AuthenticatedUser) {\n    this.logger.log(`Fetching appointments for user ${user.id}`);\n    return this.appointmentService.findAllByUser(user.id);\n  }\n\n  @Get('stats')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles('admin', 'staff', 'super_admin')\n  async getStats() {\n    this.logger.log('Fetching appointment statistics');\n    return this.appointmentService.getAppointmentsStats();\n  }\n\n  @Get('by-date')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles('admin', 'staff', 'super_admin')\n  async getByDate(@Query('date') date: string) {\n    if (!date) {\n      throw new BadRequestException('Date parameter is required');\n    }\n    this.logger.log(`Fetching appointments for date: ${date}`);\n    return this.appointmentService.getAppointmentsByDate(date);\n  }\n\n  @Get('date-range')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles('admin', 'staff', 'super_admin')\n  async getByDateRange(\n    @Query('start') startDate: string,\n    @Query('end') endDate: string,\n  ) {\n    if (!startDate || !endDate) {\n      throw new BadRequestException(\n        'Start and end date parameters are required',\n      );\n    }\n    this.logger.log(`Fetching appointments from ${startDate} to ${endDate}`);\n    return this.appointmentService.getAppointmentsByDateRange(\n      startDate,\n      endDate,\n    );\n  }\n\n  @Get('available-slots')\n  async getAvailableSlots(@Query('date') date: string) {\n    if (!date) {\n      throw new BadRequestException('Date parameter is required');\n    }\n    this.logger.log(`Fetching available slots for date: ${date}`);\n    return this.appointmentService.getAvailableSlots(date);\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: string) {\n    this.logger.log(`Fetching appointment with ID: ${id}`);\n    return this.appointmentService.findOne(+id);\n  }\n\n  @Get('by-number/:number')\n  async findByAppointmentNumber(@Param('number') appointmentNumber: string) {\n    this.logger.log(`Fetching appointment with number: ${appointmentNumber}`);\n    return this.appointmentService.findByAppointmentNumber(appointmentNumber);\n  }\n\n  @Patch(':id')\n  @ApiOperation({ summary: 'Update appointment' })\n  async update(\n    @Param('id') id: string,\n    @Body() updateAppointmentDto: UpdateAppointmentDto,\n    @User() user: AuthenticatedUser,\n  ) {\n    // Get the appointment to check if it belongs to the user\n    const appointment = await this.appointmentService.findOne(+id);\n\n    // If not admin and not the appointment owner, don't allow update\n    if (\n      !user.roles.some((role) => ['admin', 'staff', 'super_admin'].includes(role.name)) &&\n      appointment.userId !== user.id\n    ) {\n      throw new BadRequestException(\n        'You do not have permission to update this appointment',\n      );\n    }\n\n    this.logger.log(`Updating appointment with ID: ${id}`);\n    return this.appointmentService.update(+id, updateAppointmentDto);\n  }\n\n  @Patch(':id/status')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles('admin', 'staff', 'super_admin')\n  async updateStatus(\n    @Param('id') id: string,\n    @Body('status') status: AppointmentStatus,\n  ) {\n    if (!Object.values(AppointmentStatus).includes(status)) {\n      throw new BadRequestException(\n        `Invalid status. Must be one of: ${Object.values(AppointmentStatus).join(', ')}`,\n      );\n    }\n\n    this.logger.log(\n      `Updating status for appointment with ID: ${id} to ${status}`,\n    );\n    return this.appointmentService.updateStatus(+id, status);\n  }\n\n  @Delete(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  @ApiOperation({ summary: 'Delete appointment' })\n  async remove(@Param('id') id: string, @User() user: AuthenticatedUser) {\n    // Get the appointment to check if it belongs to the user\n    const appointment = await this.appointmentService.findOne(+id);\n\n    // If not admin and not the appointment owner, don't allow deletion\n    if (\n      !user.roles.some((role) => ['admin', 'staff', 'super_admin'].includes(role.name)) &&\n      appointment.userId !== user.id\n    ) {\n      throw new BadRequestException(\n        'You do not have permission to delete this appointment',\n      );\n    }\n\n    this.logger.log(`Deleting appointment with ID: ${id}`);\n    await this.appointmentService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppointmentModule.html":{"url":"modules/AppointmentModule.html","title":"module - AppointmentModule","body":"\n                   \n\n\n\n\n    Modules\n    AppointmentModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppointmentModule\n\n\n\ncluster_AppointmentModule_exports\n\n\n\ncluster_AppointmentModule_providers\n\n\n\n\nAppointmentService \n\nAppointmentService \n\n\n\nAppointmentModule\n\nAppointmentModule\n\nAppointmentService  -->\n\nAppointmentModule->AppointmentService \n\n\n\n\n\nAppointmentService\n\nAppointmentService\n\nAppointmentModule -->\n\nAppointmentService->AppointmentModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/appointment/appointment.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppointmentService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppointmentController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AppointmentService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AppointmentService } from './appointment.service';\nimport { AppointmentController } from './appointment.controller';\nimport { Appointment } from './entities/appointment.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Appointment])],\n  controllers: [AppointmentController],\n  providers: [AppointmentService],\n  exports: [AppointmentService],\n})\nexport class AppointmentModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppointmentService.html":{"url":"injectables/AppointmentService.html","title":"injectable - AppointmentService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppointmentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/appointment/appointment.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                checkTimeSlotAvailability\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllByUser\n                            \n                            \n                                    Async\n                                findByAppointmentNumber\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Private\n                                generateAllTimeSlots\n                            \n                            \n                                    Async\n                                getAppointmentsByDate\n                            \n                            \n                                    Async\n                                getAppointmentsByDateRange\n                            \n                            \n                                    Async\n                                getAppointmentsStats\n                            \n                            \n                                    Async\n                                getAvailableSlots\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(appointmentRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/appointment/appointment.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        appointmentRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        checkTimeSlotAvailability\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkTimeSlotAvailability(date: string, time: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:305\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                time\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createAppointmentDto: CreateAppointmentDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createAppointmentDto\n                                            \n                                                            CreateAppointmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:69\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllByUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllByUser(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByAppointmentNumber\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByAppointmentNumber(appointmentNumber: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:100\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                appointmentNumber\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:88\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        generateAllTimeSlots\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateAllTimeSlots()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:330\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     string[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAppointmentsByDate\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAppointmentsByDate(date: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:209\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAppointmentsByDateRange\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAppointmentsByDateRange(startDate: string, endDate: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:230\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                startDate\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                endDate\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAppointmentsStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAppointmentsStats()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:253\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAvailableSlots\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAvailableSlots(date: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:177\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:149\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateAppointmentDto: UpdateAppointmentDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:114\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateAppointmentDto\n                                            \n                                                            UpdateAppointmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(id: number, status: AppointmentStatus)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:162\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                status\n                                            \n                                                            AppointmentStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  BadRequestException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, Between } from 'typeorm';\nimport { Appointment, AppointmentStatus } from './entities/appointment.entity';\nimport { CreateAppointmentDto } from './dto/create-appointment.dto';\nimport { UpdateAppointmentDto } from './dto/update-appointment.dto';\nimport { format, addDays, parseISO, isValid } from 'date-fns';\n\n@Injectable()\nexport class AppointmentService {\n  constructor(\n    @InjectRepository(Appointment)\n    private appointmentRepository: Repository,\n  ) {}\n\n  async create(\n    createAppointmentDto: CreateAppointmentDto,\n  ): Promise {\n    try {\n      // Check date validity\n      const date = parseISO(createAppointmentDto.appointmentDate);\n      if (!isValid(date)) {\n        throw new BadRequestException('Invalid appointment date');\n      }\n\n      // Check if date is a weekend\n      const dayOfWeek = date.getDay();\n      if (dayOfWeek === 0 || dayOfWeek === 6) {\n        throw new BadRequestException('Cannot book appointments on weekends');\n      }\n\n      // Check if date is in the past\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      if (date  {\n    return this.appointmentRepository.find({\n      order: {\n        appointmentDate: 'ASC',\n        appointmentTime: 'ASC',\n      },\n    });\n  }\n\n  async findAllByUser(userId: number): Promise {\n    return this.appointmentRepository.find({\n      where: { userId },\n      order: {\n        appointmentDate: 'DESC',\n        appointmentTime: 'ASC',\n      },\n    });\n  }\n\n  async findOne(id: number): Promise {\n    const appointment = await this.appointmentRepository.findOne({\n      where: { id },\n    });\n\n    if (!appointment) {\n      throw new NotFoundException(`Appointment with ID ${id} not found`);\n    }\n\n    return appointment;\n  }\n\n  async findByAppointmentNumber(\n    appointmentNumber: string,\n  ): Promise {\n    const appointment = await this.appointmentRepository.findOne({\n      where: { appointmentNumber },\n    });\n\n    if (!appointment) {\n      throw new NotFoundException(`Appointment ${appointmentNumber} not found`);\n    }\n\n    return appointment;\n  }\n\n  async update(\n    id: number,\n    updateAppointmentDto: UpdateAppointmentDto,\n  ): Promise {\n    try {\n      const appointment = await this.findOne(id);\n\n      // If changing date or time, check availability\n      if (\n        updateAppointmentDto.appointmentDate ||\n        updateAppointmentDto.appointmentTime\n      ) {\n        const newDate =\n          updateAppointmentDto.appointmentDate || appointment.appointmentDate;\n        const newTime =\n          updateAppointmentDto.appointmentTime || appointment.appointmentTime;\n\n        if (\n          newDate !== appointment.appointmentDate ||\n          newTime !== appointment.appointmentTime\n        ) {\n          await this.checkTimeSlotAvailability(newDate, newTime);\n        }\n      }\n\n      // Update the appointment\n      const updated = Object.assign(appointment, updateAppointmentDto);\n      console.log(`Updated appointment ${id}:`, updated);\n      return this.appointmentRepository.save(updated);\n    } catch (error) {\n      console.error(`Error updating appointment ${id}:`, error);\n      throw error;\n    }\n  }\n\n  async remove(id: number): Promise {\n    try {\n      const result = await this.appointmentRepository.delete(id);\n      if (result.affected === 0) {\n        throw new NotFoundException(`Appointment with ID ${id} not found`);\n      }\n      console.log(`Deleted appointment ${id}`);\n    } catch (error) {\n      console.error(`Error deleting appointment ${id}:`, error);\n      throw error;\n    }\n  }\n\n  async updateStatus(\n    id: number,\n    status: AppointmentStatus,\n  ): Promise {\n    try {\n      const appointment = await this.findOne(id);\n      appointment.status = status;\n      console.log(`Updated status for appointment ${id} to ${status}`);\n      return this.appointmentRepository.save(appointment);\n    } catch (error) {\n      console.error(`Error updating status for appointment ${id}:`, error);\n      throw error;\n    }\n  }\n\n  async getAvailableSlots(date: string): Promise {\n    try {\n      // Parse the date\n      const parsedDate = parseISO(date);\n      if (!isValid(parsedDate)) {\n        throw new BadRequestException('Invalid date format');\n      }\n\n      // Get all appointments for the specified date\n      const existingAppointments = await this.appointmentRepository.find({\n        where: {\n          appointmentDate: date,\n          status: AppointmentStatus.PENDING || AppointmentStatus.CONFIRMED,\n        },\n        select: ['appointmentTime'],\n      });\n\n      const bookedSlots = existingAppointments.map(\n        (app) => app.appointmentTime,\n      );\n\n      // Generate all time slots (8:00 AM - 5:00 PM with 30min intervals)\n      const allTimeSlots = this.generateAllTimeSlots();\n\n      // Return only available slots\n      return allTimeSlots.filter((slot) => !bookedSlots.includes(slot));\n    } catch (error) {\n      console.error(`Error getting available slots for date ${date}:`, error);\n      throw error;\n    }\n  }\n\n  async getAppointmentsByDate(date: string): Promise {\n    try {\n      const parsedDate = parseISO(date);\n      if (!isValid(parsedDate)) {\n        throw new BadRequestException('Invalid date format');\n      }\n\n      return this.appointmentRepository.find({\n        where: {\n          appointmentDate: date,\n        },\n        order: {\n          appointmentTime: 'ASC',\n        },\n      });\n    } catch (error) {\n      console.error(`Error getting appointments for date ${date}:`, error);\n      throw error;\n    }\n  }\n\n  async getAppointmentsByDateRange(\n    startDate: string,\n    endDate: string,\n  ): Promise {\n    try {\n      return this.appointmentRepository.find({\n        where: {\n          appointmentDate: Between(startDate, endDate),\n        },\n        order: {\n          appointmentDate: 'ASC',\n          appointmentTime: 'ASC',\n        },\n      });\n    } catch (error) {\n      console.error(\n        `Error getting appointments in range ${startDate} to ${endDate}:`,\n        error,\n      );\n      throw error;\n    }\n  }\n\n  async getAppointmentsStats() {\n    try {\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n\n      const tomorrow = addDays(today, 1);\n      tomorrow.setHours(0, 0, 0, 0);\n\n      // Get counts for different statuses\n      const [\n        pendingCount,\n        confirmedCount,\n        completedCount,\n        cancelledCount,\n        totalCount,\n      ] = await Promise.all([\n        this.appointmentRepository.count({\n          where: { status: AppointmentStatus.PENDING },\n        }),\n        this.appointmentRepository.count({\n          where: { status: AppointmentStatus.CONFIRMED },\n        }),\n        this.appointmentRepository.count({\n          where: { status: AppointmentStatus.COMPLETED },\n        }),\n        this.appointmentRepository.count({\n          where: { status: AppointmentStatus.CANCELLED },\n        }),\n        this.appointmentRepository.count(),\n      ]);\n\n      // Get today's appointments\n      const todayAppointments = await this.appointmentRepository.count({\n        where: {\n          appointmentDate: format(today, 'yyyy-MM-dd'),\n        },\n      });\n\n      return {\n        pending: pendingCount,\n        confirmed: confirmedCount,\n        completed: completedCount,\n        cancelled: cancelledCount,\n        total: totalCount,\n        today: todayAppointments,\n      };\n    } catch (error) {\n      console.error('Error getting appointment stats:', error);\n      throw error;\n    }\n  }\n\n  private async checkTimeSlotAvailability(\n    date: string,\n    time: string,\n  ): Promise {\n    try {\n      // Check if time slot is already booked\n      const existingAppointment = await this.appointmentRepository.findOne({\n        where: {\n          appointmentDate: date,\n          appointmentTime: time,\n          status: AppointmentStatus.PENDING || AppointmentStatus.CONFIRMED,\n        },\n      });\n\n      if (existingAppointment) {\n        throw new BadRequestException('This time slot is already booked');\n      }\n    } catch (error) {\n      console.error(\n        `Error checking time slot availability for ${date} at ${time}:`,\n        error,\n      );\n      throw error;\n    }\n  }\n  private generateAllTimeSlots(): string[] {\n    const slots: string[] = [];\n    let hour = 8;\n    let minute = 0;\n\n    while (hour \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                adminUpdateUser\n                            \n                            \n                                    \n                                    Async\n                                forgotPassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                getProfile\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                register\n                            \n                            \n                                    \n                                    Async\n                                resetPassword\n                            \n                            \n                                    \n                                    Async\n                                sendOTP\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                updateProfile\n                            \n                            \n                                    \n                                    Async\n                                verifyOTP\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        adminUpdateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    adminUpdateUser(req: RequestWithUser, targetUserId: string, updateUserDto: AdminUpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin update user', description: 'Allows administrators to update any user's information including role assignments'})@ApiParam({name: 'userId', description: 'ID of the user to update'})@ApiBody({type: AdminUpdateUserDto})@ApiResponse({status: 200, description: 'User successfully updated'})@ApiResponse({status: 400, description: 'Bad request - invalid input data'})@ApiResponse({status: 401, description: 'Unauthorized - invalid credentials'})@ApiResponse({status: 403, description: 'Forbidden - insufficient permissions'})@ApiResponse({status: 404, description: 'Not found - user or role not found'})@ApiResponse({status: 409, description: 'Conflict - email or username already exists'})@ApiBearerAuth('JWT-auth')@UseGuards(JwtAuthGuard, RolesGuard)@Roles('admin', 'super_admin')@Post('admin/update-user/:userId')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:219\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestWithUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                targetUserId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            AdminUpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        forgotPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    forgotPassword(undefined: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('forgot-password')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:288\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(req: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get user profile'})@ApiResponse({status: 200, description: 'Profile retrieved successfully'})@ApiResponse({status: 401, description: 'Unauthorized'})@ApiBearerAuth('JWT-auth')@UseGuards(JwtAuthGuard)@Get('profile')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:148\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestWithUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'User login'})@ApiResponse({status: 200, description: 'Login successful', schema: undefined})@ApiResponse({status: 401, description: 'Unauthorized - invalid credentials'})@ApiBody({type: LoginDto})@Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:70\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(createUserDto: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'User registration'})@ApiResponse({status: 201, description: 'Registration successful', schema: undefined})@ApiResponse({status: 400, description: 'Bad request - invalid data'})@ApiResponse({status: 409, description: 'Conflict - email or username already exists'})@ApiBody({type: RegisterDto})@Post('register')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:109\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            RegisterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        resetPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetPassword(resetDto: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('reset-password')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:313\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                resetDto\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        sendOTP\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendOTP(sendOtpDto: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('send-otp')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:243\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sendOtpDto\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        updateProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProfile(req: RequestWithUser, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update user profile', description: 'Allows a user to update their own profile information'})@ApiResponse({status: 200, description: 'Profile updated successfully'})@ApiResponse({status: 400, description: 'Bad request - invalid data'})@ApiResponse({status: 401, description: 'Unauthorized'})@ApiResponse({status: 409, description: 'Conflict - email or username already exists'})@ApiBearerAuth('JWT-auth')@ApiBody({type: UpdateUserDto})@UseGuards(JwtAuthGuard)@Post('update-profile')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:170\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestWithUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        verifyOTP\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyOTP(verifyOtpDto: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('verify-otp')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:266\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                verifyOtpDto\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  Get,\n  UseGuards,\n  Request,\n  UnauthorizedException,\n  Param,\n  BadRequestException,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\nimport { UpdateUserDto, AdminUpdateUserDto } from './dto/update-user.dto';\nimport { Roles } from './decorators/roles.decorator';\nimport { RolesGuard } from './guards/roles.guard';\nimport { AuthenticatedUser } from './jwt.strategy';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n  ApiParam,\n  ApiBody,\n} from '@nestjs/swagger';\nimport { OTPService } from '../services/otp.service';\nimport { EmailService } from '../services/email.service';\n\ninterface RequestWithUser extends Request {\n  user: AuthenticatedUser;\n}\n\n@ApiTags('Authentication')\n@Controller('auth')\nexport class AuthController {\n  constructor(\n    private authService: AuthService,\n    private otpService: OTPService, \n    private emailService: EmailService, \n  ) {}\n\n  @ApiOperation({ summary: 'User login' })\n  @ApiResponse({\n    status: 200,\n    description: 'Login successful',\n    schema: {\n      properties: {\n        access_token: { type: 'string' },\n        user: {\n          type: 'object',\n          properties: {\n            id: { type: 'number' },\n            email: { type: 'string' },\n            username: { type: 'string' },\n            roles: { type: 'array', items: { type: 'string' } },\n            defaultRole: { type: 'string' },\n          },\n        },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Unauthorized - invalid credentials',\n  })\n  @ApiBody({ type: LoginDto })\n  @Post('login')\n  async login(@Body() loginDto: LoginDto) {\n    console.log('Login request received:', loginDto);\n    try {\n      const result = await this.authService.login(loginDto);\n      return result;\n    } catch (error) {\n      throw new UnauthorizedException(\n        error instanceof Error ? error.message : 'Invalid credentials',\n      );\n    }\n  }\n\n  @ApiOperation({ summary: 'User registration' })\n  @ApiResponse({\n    status: 201,\n    description: 'Registration successful',\n    schema: {\n      properties: {\n        access_token: { type: 'string' },\n        user: {\n          type: 'object',\n          properties: {\n            id: { type: 'number' },\n            email: { type: 'string' },\n            username: { type: 'string' },\n            roles: { type: 'array', items: { type: 'string' } },\n            defaultRole: { type: 'string' },\n          },\n        },\n      },\n    },\n  })\n  @ApiResponse({ status: 400, description: 'Bad request - invalid data' })\n  @ApiResponse({\n    status: 409,\n    description: 'Conflict - email or username already exists',\n  })\n  @ApiBody({ type: RegisterDto })\n  @Post('register')\n  async register(@Body() createUserDto: RegisterDto) {\n    try {\n      // First verify OTP if email verification is enabled\n      if (createUserDto.email && createUserDto.otp) {\n        const isOtpValid = await this.otpService.verifyOTP(\n          createUserDto.email,\n          createUserDto.otp,\n          'verification',\n        );\n\n        if (!isOtpValid) {\n          throw new BadRequestException('Invalid or expired OTP');\n        }\n      }\n\n      const result = await this.authService.register(createUserDto);\n\n      // Send welcome email\n      if (createUserDto.email) {\n        await this.emailService.sendApplicationNotification(\n          createUserDto.email,\n          'Welcome!',\n          'Account Created',\n          'Welcome to Bulak LGU Smart Connect',\n        );\n      }\n\n      return result;\n    } catch (error) {\n      console.error('Registration error:', error);\n      throw error;\n    }\n  }\n  @ApiOperation({ summary: 'Get user profile' })\n  @ApiResponse({ status: 200, description: 'Profile retrieved successfully' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @ApiBearerAuth('JWT-auth')\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  getProfile(@Request() req: RequestWithUser) {\n    // Add null check before converting to number\n    if (!req.user || req.user.id === undefined || req.user.id === null) {\n      throw new UnauthorizedException('Invalid user ID');\n    }\n    return this.authService.getProfile(Number(req.user.id));\n  }\n  @ApiOperation({\n    summary: 'Update user profile',\n    description: 'Allows a user to update their own profile information',\n  })\n  @ApiResponse({ status: 200, description: 'Profile updated successfully' })\n  @ApiResponse({ status: 400, description: 'Bad request - invalid data' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @ApiResponse({\n    status: 409,\n    description: 'Conflict - email or username already exists',\n  })\n  @ApiBearerAuth('JWT-auth')\n  @ApiBody({ type: UpdateUserDto })\n  @UseGuards(JwtAuthGuard)\n  @Post('update-profile')\n  async updateProfile(\n    @Request() req: RequestWithUser,\n    @Body() updateUserDto: UpdateUserDto,\n  ) {\n    // Add null check before converting to number\n    if (!req.user || req.user.id === undefined || req.user.id === null) {\n      throw new UnauthorizedException('Invalid user ID');\n    }\n\n    try {\n      return await this.authService.updateUserInfo(\n        Number(req.user.id),\n        updateUserDto,\n      );\n    } catch (error) {\n      throw new UnauthorizedException(\n        error instanceof Error ? error.message : 'Failed to update profile',\n      );\n    }\n  }\n  @ApiOperation({\n    summary: 'Admin update user',\n    description:\n      \"Allows administrators to update any user's information including role assignments\",\n  })\n  @ApiParam({ name: 'userId', description: 'ID of the user to update' })\n  @ApiBody({ type: AdminUpdateUserDto })\n  @ApiResponse({ status: 200, description: 'User successfully updated' })\n  @ApiResponse({ status: 400, description: 'Bad request - invalid input data' })\n  @ApiResponse({\n    status: 401,\n    description: 'Unauthorized - invalid credentials',\n  })\n  @ApiResponse({\n    status: 403,\n    description: 'Forbidden - insufficient permissions',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Not found - user or role not found',\n  })\n  @ApiResponse({\n    status: 409,\n    description: 'Conflict - email or username already exists',\n  })\n  @ApiBearerAuth('JWT-auth')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles('admin', 'super_admin')\n  @Post('admin/update-user/:userId')\n  async adminUpdateUser(\n    @Request() req: RequestWithUser,\n    @Param('userId') targetUserId: string,\n    @Body() updateUserDto: AdminUpdateUserDto,\n  ) {\n    // Add null check before converting to number\n    if (!req.user || req.user.id === undefined || req.user.id === null) {\n      throw new UnauthorizedException('Invalid admin ID');\n    }\n\n    try {\n      return await this.authService.adminUpdateUser(\n        Number(req.user.id),\n        Number(targetUserId),\n        updateUserDto,\n      );\n    } catch (error) {\n      throw new UnauthorizedException(\n        error instanceof Error ? error.message : 'Failed to update user',\n      );\n    }\n  }\n\n  @Post('send-otp')\n  async sendOTP(@Body() sendOtpDto: { email: string; purpose?: string }) {\n    try {\n      const { email, purpose = 'verification' } = sendOtpDto;\n\n      // Validate email format\n      if (!email || !/\\S+@\\S+\\.\\S+/.test(email)) {\n        throw new BadRequestException('Invalid email format');\n      }\n\n      await this.otpService.generateOTP(email, purpose);\n\n      return {\n        success: true,\n        message: 'OTP sent successfully',\n        email: email,\n      };\n    } catch (error) {\n      console.error('Error sending OTP:', error);\n      throw new BadRequestException('Failed to send OTP');\n    }\n  }\n\n  @Post('verify-otp')\n  async verifyOTP(@Body() verifyOtpDto: { email: string; otp: string; purpose?: string }) {\n    try {\n      const { email, otp, purpose = 'verification' } = verifyOtpDto;\n\n      const isValid = await this.otpService.verifyOTP(email, otp, purpose);\n\n      if (!isValid) {\n        throw new UnauthorizedException('Invalid or expired OTP');\n      }\n\n      return {\n        success: true,\n        message: 'OTP verified successfully',\n      };\n    } catch (error) {\n      console.error('Error verifying OTP:', error);\n      throw new UnauthorizedException('Invalid or expired OTP');\n    }\n  }\n\n  // Add password reset endpoints\n  @Post('forgot-password')\n  async forgotPassword(@Body() { email }: { email: string }) {\n    try {\n      // Check if user exists\n      const user = await this.authService.findUserByEmail(email);\n      if (!user) {\n        // Don't reveal if email exists for security\n        return {\n          success: true,\n          message: 'If this email is registered, you will receive a password reset code',\n        };\n      }\n\n      await this.otpService.generateOTP(email, 'password_reset');\n\n      return {\n        success: true,\n        message: 'Password reset code sent to your email',\n      };\n    } catch (error) {\n      console.error('Forgot password error:', error);\n      throw new BadRequestException('Failed to send password reset code');\n    }\n  }\n\n  @Post('reset-password')\n  async resetPassword(@Body() resetDto: { email: string; otp: string; newPassword: string }) {\n    try {\n      const { email, otp, newPassword } = resetDto;\n\n      // Verify OTP\n      const isOtpValid = await this.otpService.verifyOTP(email, otp, 'password_reset');\n      if (!isOtpValid) {\n        throw new UnauthorizedException('Invalid or expired reset code');\n      }\n\n      // Update password\n      await this.authService.updatePassword(email, newPassword);\n\n      return {\n        success: true,\n        message: 'Password reset successfully',\n      };\n    } catch (error) {\n      console.error('Reset password error:', error);\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nRolesModule\n\nRolesModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nRolesModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nEmailService \n\nEmailService \n\nEmailService  -->\n\nAuthModule->EmailService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nOTPService \n\nOTPService \n\nOTPService  -->\n\nAuthModule->OTPService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nAuthModule -->\n\nEmailService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nOTPService\n\nOTPService\n\nAuthModule -->\n\nOTPService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            EmailService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            OTPService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RolesModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            EmailService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            OTPService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { User } from '../users/entities/user.entity';\nimport { JwtStrategy } from './jwt.strategy';\nimport { RolesModule } from '../roles/roles.module';\nimport { OTP } from '../entities/otp.entity'; \nimport { OTPService } from '../services/otp.service'; \nimport { EmailService } from '../services/email.service'; \n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([User, OTP]), \n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        secret: configService.get('JWT_SECRET'),\n        signOptions: { expiresIn: '24h' },\n      }),\n    }),\n    RolesModule,\n  ],\n  providers: [\n    AuthService, \n    JwtStrategy, \n    OTPService,    \n    EmailService    \n  ],\n  controllers: [AuthController],\n  exports: [AuthService, JwtStrategy, PassportModule, OTPService, EmailService], \n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                adminUpdateUser\n                            \n                            \n                                    Async\n                                findUserByEmail\n                            \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Private\n                                isValidEmail\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                updatePassword\n                            \n                            \n                                    Async\n                                updateUserInfo\n                            \n                            \n                                    Private\n                                validatePasswordStrength\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, jwtService: JwtService, rolesService: RolesService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        rolesService\n                                                  \n                                                        \n                                                                        RolesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        adminUpdateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    adminUpdateUser(adminId: number, targetUserId: number, updateUserDto: AdminUpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:383\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                adminId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                targetUserId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            AdminUpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findUserByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:539\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:211\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isValidEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    isValidEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:206\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(registerDto: RegisterDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:104\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                registerDto\n                                            \n                                                            RegisterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updatePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePassword(email: string, newPassword: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:553\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateUserInfo\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUserInfo(userId: number, updateUserDto: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:239\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        validatePasswordStrength\n                        \n                    \n                \n            \n            \n                \n                        \n                    validatePasswordStrength(password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:584\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(loginDto: LoginDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  UnauthorizedException,\n  ConflictException,\n  BadRequestException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from '../users/entities/user.entity';\nimport * as bcrypt from 'bcrypt';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { RolesService } from '../roles/roles.service';\nimport { UpdateUserDto, AdminUpdateUserDto } from './dto/update-user.dto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n    private jwtService: JwtService,\n    private rolesService: RolesService,\n  ) {}\n\n  async validateUser(loginDto: LoginDto): Promise {\n    const user = await this.usersRepository.findOne({\n      where: [\n        { email: loginDto.emailOrUsername },\n        { username: loginDto.emailOrUsername },\n      ],\n    });\n    if (user && (await bcrypt.compare(loginDto.password, user.password))) {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { password: __password, ...result } = user;\n      return result;\n    }\n    return null;\n  }\n\n  async login(loginDto: LoginDto) {\n    console.log('Login attempt with:', loginDto);\n\n    try {\n      const user = await this.usersRepository.findOne({\n        where: [\n          { email: loginDto.emailOrUsername },\n          { username: loginDto.emailOrUsername },\n        ],\n        relations: ['defaultRole'],\n      });\n\n      console.log('User found:', user ? 'Yes' : 'No');\n\n      if (!user) {\n        throw new UnauthorizedException('Invalid email or password');\n      }\n\n      // Debug password check\n      console.log('Stored password hash:', user.password);\n      console.log('Comparing with:', loginDto.password);\n\n      const isPasswordValid = await bcrypt.compare(\n        loginDto.password,\n        user.password,\n      );\n      console.log('Password valid:', isPasswordValid);\n\n      if (!isPasswordValid) {\n        throw new UnauthorizedException('Invalid email or password');\n      }\n\n      // Get user roles\n      const roles = await this.rolesService.getUserRoles(user.id);\n      const roleNames = roles.map((role) => role.name);\n\n      const payload = {\n        sub: user.id,\n        email: user.email,\n        roles: roleNames,\n      };\n\n      const token = this.jwtService.sign(payload);\n      console.log('Generated token:', token ? 'Success' : 'Failed');\n\n      // Remove password from response\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { password: __password, ...userWithoutPassword } = user;\n\n      return {\n        access_token: token,\n        user: {\n          ...userWithoutPassword,\n          roles: roleNames,\n          defaultRole: user.defaultRole?.name || 'citizen',\n        },\n      };\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  }\n\n  async register(registerDto: RegisterDto) {\n    const {\n      email,\n      username,\n      password,\n      firstName,\n      middleName,\n      lastName,\n      nameExtension,\n      contactNumber,\n    } = registerDto;\n\n    // Generate full name\n    const name = `${firstName} ${middleName ? middleName + ' ' : ''}${lastName}${nameExtension ? ' ' + nameExtension : ''}`;\n\n    // Validate email format\n    if (!this.isValidEmail(email)) {\n      throw new BadRequestException('Invalid email format');\n    }\n\n    // Check if user exists by email\n    const existingUserByEmail = await this.usersRepository.findOne({\n      where: { email },\n    });\n    if (existingUserByEmail) {\n      throw new ConflictException('Email already exists');\n    }\n\n    // Check if username is taken\n    if (username) {\n      const existingUserByUsername = await this.usersRepository.findOne({\n        where: { username },\n      });\n      if (existingUserByUsername) {\n        throw new ConflictException('Username already exists');\n      }\n    }\n\n    // Validate password strength\n    const passwordValidation = this.validatePasswordStrength(password);\n    if (!passwordValidation.isValid) {\n      throw new BadRequestException(passwordValidation.message);\n    }\n\n    // Hash password\n    const salt = await bcrypt.genSalt();\n    const hashedPassword = await bcrypt.hash(password, salt);\n\n    try {\n      // Create new user with all fields\n      const user = this.usersRepository.create({\n        email,\n        username,\n        password: hashedPassword,\n        firstName,\n        middleName,\n        lastName,\n        nameExtension,\n        contactNumber,\n        name,\n      });\n\n      await this.usersRepository.save(user);\n\n      // Add citizen role to the user\n      try {\n        const citizenRole = await this.rolesService.findByName('citizen');\n        await this.rolesService.assignRolesToUser(user.id, [citizenRole.id]);\n\n        // Set default role\n        user.defaultRoleId = citizenRole.id;\n        await this.usersRepository.save(user);\n      } catch (error) {\n        console.error('Error assigning citizen role:', error);\n        // Rollback: Delete the user to maintain a consistent state\n        await this.usersRepository.delete(user.id);\n        throw new ConflictException(\n          'Failed to assign citizen role. Registration rolled back.',\n        );\n      }\n\n      // Generate JWT token\n      const payload = { sub: user.id, email: user.email, roles: ['citizen'] };\n\n      // Remove password from response\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { password: __password, ...userWithoutPassword } = user;\n\n      return {\n        access_token: this.jwtService.sign(payload),\n        user: {\n          ...userWithoutPassword,\n          roles: ['citizen'],\n          defaultRole: 'citizen',\n        },\n      };\n    } catch (error) {\n      console.error('Registration error:', error);\n      throw error;\n    }\n  }\n\n  private isValidEmail(email: string): boolean {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  }\n\n  async getProfile(userId: number) {\n    // Validation for userId\n    if (!userId || isNaN(userId)) {\n      throw new UnauthorizedException('Invalid user ID');\n    }\n\n    const user = await this.usersRepository.findOne({\n      where: { id: userId },\n      relations: ['defaultRole'],\n    });\n    if (!user) {\n      throw new UnauthorizedException('User not found');\n    }\n\n    // Get user roles\n    const roles = await this.rolesService.getUserRoles(userId);\n    const roleNames = roles.map((role) => role.name);\n\n    // Remove password from response\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { password: __password, ...result } = user;\n    return {\n      ...result,\n      roles: roleNames,\n      defaultRole: user.defaultRole?.name || 'citizen',\n    };\n  }\n\n  async updateUserInfo(userId: number, updateUserDto: UpdateUserDto) {\n    try {\n      // First get the existing user\n      const user = await this.usersRepository.findOne({\n        where: { id: userId },\n      });\n\n      if (!user) {\n        throw new UnauthorizedException('User not found');\n      }\n\n      // Check if email is being updated and not already taken\n      if (updateUserDto.email && updateUserDto.email !== user.email) {\n        // Validate email format\n        if (!this.isValidEmail(updateUserDto.email)) {\n          throw new BadRequestException('Invalid email format');\n        }\n\n        const existingUserByEmail = await this.usersRepository.findOne({\n          where: { email: updateUserDto.email },\n        });\n\n        if (existingUserByEmail && existingUserByEmail.id !== userId) {\n          throw new ConflictException('Email already exists');\n        }\n      }\n\n      // Check if username is being updated and not already taken\n      if (updateUserDto.username && updateUserDto.username !== user.username) {\n        const existingUserByUsername = await this.usersRepository.findOne({\n          where: { username: updateUserDto.username },\n        });\n\n        if (existingUserByUsername && existingUserByUsername.id !== userId) {\n          throw new ConflictException('Username already exists');\n        }\n      }\n\n      // Handle password change if provided\n      if (updateUserDto.password) {\n        // Validate password strength\n        const passwordValidation = this.validatePasswordStrength(updateUserDto.password);\n        if (!passwordValidation.isValid) {\n          throw new BadRequestException(passwordValidation.message);\n        }\n\n        // Hash new password\n        const salt = await bcrypt.genSalt();\n        const hashedPassword = await bcrypt.hash(updateUserDto.password, salt);\n        updateUserDto.password = hashedPassword;\n      } else {\n        // Remove password from DTO if not being updated\n        delete updateUserDto.password;\n      }\n\n      // Update name if name parts are changed\n      let shouldUpdateName = false;\n      const nameComponents = {\n        firstName: updateUserDto.firstName || user.firstName,\n        middleName:\n          updateUserDto.middleName !== undefined\n            ? updateUserDto.middleName\n            : user.middleName,\n        lastName: updateUserDto.lastName || user.lastName,\n        nameExtension:\n          updateUserDto.nameExtension !== undefined\n            ? updateUserDto.nameExtension\n            : user.nameExtension,\n      };\n\n      if (\n        updateUserDto.firstName ||\n        updateUserDto.middleName !== undefined ||\n        updateUserDto.lastName ||\n        updateUserDto.nameExtension !== undefined\n      ) {\n        shouldUpdateName = true;\n      }\n\n      // Generate full name if any name component changed\n      if (shouldUpdateName) {\n        const fullName = `${nameComponents.firstName} ${\n          nameComponents.middleName ? nameComponents.middleName + ' ' : ''\n        }${nameComponents.lastName}${\n          nameComponents.nameExtension ? ' ' + nameComponents.nameExtension : ''\n        }`;\n        updateUserDto['name'] = fullName;\n      }\n\n      try {\n        // Update user with all provided fields\n        await this.usersRepository.update(userId, updateUserDto);\n\n        // Get updated user with relations\n        const updatedUser = await this.usersRepository.findOne({\n          where: { id: userId },\n          relations: ['defaultRole'],\n        });\n\n        if (!updatedUser) {\n          throw new BadRequestException('Failed to retrieve updated user');\n        }\n\n        // Get user roles\n        const roles = await this.rolesService.getUserRoles(userId);\n        const roleNames = roles.map((role) => role.name);\n\n        // Remove password from response\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { password: __password, ...result } = updatedUser;\n\n        return {\n          ...result,\n          roles: roleNames,\n          defaultRole: updatedUser.defaultRole?.name || 'citizen',\n        };\n      } catch (error: unknown) {\n        console.error('User update database error:', error);\n        if (\n          typeof error === 'object' &&\n          error !== null &&\n          'code' in error &&\n          error.code === 'ER_DUP_ENTRY'\n        ) {\n          throw new ConflictException('Email or username already exists');\n        }\n        throw new BadRequestException(\n          'Failed to update user information in database',\n        );\n      }\n    } catch (error) {\n      console.error('User update error:', error);\n      // Re-throw specific errors\n      if (\n        error instanceof UnauthorizedException ||\n        error instanceof BadRequestException ||\n        error instanceof ConflictException\n      ) {\n        throw error;\n      }\n      // For any other unexpected error\n      throw new BadRequestException('Failed to update user information');\n    }\n  }\n  async adminUpdateUser(\n    adminId: number,\n    targetUserId: number,\n    updateUserDto: AdminUpdateUserDto,\n  ) {\n    console.log(\n      `Admin ${adminId} attempting to update user ${targetUserId}`,\n      updateUserDto,\n    );\n\n    try {\n      // Verify the admin has proper permissions\n      const admin = await this.usersRepository.findOne({\n        where: { id: adminId },\n      });\n\n      if (!admin) {\n        throw new UnauthorizedException('Admin not found');\n      }\n\n      // Get admin roles\n      const adminRoles = await this.rolesService.getUserRoles(adminId);\n      const adminRoleNames = adminRoles.map((role) => role.name);\n\n      // Check if the user has admin or super_admin role\n      const isAuthorized = adminRoleNames.some(\n        (role) => role === 'admin' || role === 'super_admin',\n      );\n\n      if (!isAuthorized) {\n        throw new UnauthorizedException('Insufficient permissions');\n      }\n\n      // Check if target user exists\n      const targetUser = await this.usersRepository.findOne({\n        where: { id: targetUserId },\n      });\n\n      if (!targetUser) {\n        throw new BadRequestException(`User with ID ${targetUserId} not found`);\n      }\n\n      // First perform the basic user update\n      // We'll catch any errors here to handle them appropriately\n      try {\n        await this.updateUserInfo(targetUserId, updateUserDto);\n      } catch (err) {\n        console.error('Error during basic user update:', err);\n        throw err; // Re-throw to be caught by outer try-catch\n      }\n\n      // Handle role updates if provided\n      if (updateUserDto.roleIds && updateUserDto.roleIds.length > 0) {\n        try {\n          // Verify all roles exist before assigning\n          for (const roleId of updateUserDto.roleIds) {\n            try {\n              await this.rolesService.findOne(roleId);\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            } catch (_) {\n              throw new BadRequestException(`Role with ID ${roleId} not found`);\n            }\n          }\n\n          // Assign roles\n          await this.rolesService.assignRolesToUser(\n            targetUserId,\n            updateUserDto.roleIds,\n          );\n          console.log(\n            `Assigned roles ${updateUserDto.roleIds.join(', ')} to user ${targetUserId}`,\n          );\n        } catch (error) {\n          console.error('Error assigning roles:', error);\n          throw new BadRequestException(\n            error instanceof Error ? error.message : 'Failed to assign roles',\n          );\n        }\n      }\n\n      // Update default role if provided\n      if (updateUserDto.defaultRoleId) {\n        try {\n          // Verify the role exists\n          try {\n            await this.rolesService.findOne(updateUserDto.defaultRoleId);\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          } catch (_) {\n            throw new BadRequestException(\n              `Default role with ID ${updateUserDto.defaultRoleId} not found`,\n            );\n          }\n\n          // Verify user has this role assigned or will have it assigned\n          const userRoles = await this.rolesService.getUserRoles(targetUserId);\n          const hasRoleAssigned = userRoles.some(\n            (role) => role.id === updateUserDto.defaultRoleId,\n          );\n\n          const willBeAssigned =\n            updateUserDto.roleIds &&\n            updateUserDto.roleIds.includes(updateUserDto.defaultRoleId);\n\n          if (!hasRoleAssigned && !willBeAssigned) {\n            throw new BadRequestException(\n              'Cannot set default role to a role the user does not have',\n            );\n          }\n\n          // Update the default role\n          await this.usersRepository.update(targetUserId, {\n            defaultRoleId: updateUserDto.defaultRoleId,\n          });\n          console.log(\n            `Updated default role to ${updateUserDto.defaultRoleId} for user ${targetUserId}`,\n          );\n        } catch (error) {\n          console.error('Error updating default role:', error);\n          throw new BadRequestException(\n            error instanceof Error\n              ? error.message\n              : 'Failed to update default role',\n          );\n        }\n      }\n\n      // Return the fully updated user\n      try {\n        const updatedUser = await this.getProfile(targetUserId);\n        return updatedUser;\n      } catch (error) {\n        console.error('Error retrieving updated user profile:', error);\n        throw new BadRequestException(\n          'User was updated but profile could not be retrieved',\n        );\n      }\n    } catch (error) {\n      console.error('Admin update user error:', error);\n\n      // Re-throw specific exceptions\n      if (\n        error instanceof UnauthorizedException ||\n        error instanceof BadRequestException ||\n        error instanceof ConflictException\n      ) {\n        throw error;\n      }\n\n      // For any other errors\n      throw new BadRequestException(\n        'Failed to update user: Unexpected error occurred',\n      );\n    }\n  }\n\n  // Add this method to find user by email\n  async findUserByEmail(email: string): Promise {\n    try {\n      const user = await this.usersRepository.findOne({\n        where: { email },\n        relations: ['defaultRole'],\n      });\n      return user;\n    } catch (error) {\n      console.error('Error finding user by email:', error);\n      return null;\n    }\n  }\n\n  // Add this method to update password\n  async updatePassword(email: string, newPassword: string): Promise {\n    try {\n      // Validate password strength\n      const passwordValidation = this.validatePasswordStrength(newPassword);\n      if (!passwordValidation.isValid) {\n        throw new BadRequestException(passwordValidation.message);\n      }\n\n      // Find user by email\n      const user = await this.findUserByEmail(email);\n      if (!user) {\n        throw new BadRequestException('User not found');\n      }\n\n      // Hash new password\n      const salt = await bcrypt.genSalt();\n      const hashedPassword = await bcrypt.hash(newPassword, salt);\n\n      // Update password in database\n      await this.usersRepository.update(\n        { id: user.id },\n        { password: hashedPassword }\n      );\n\n      console.log(`Password updated successfully for user: ${email}`);\n    } catch (error) {\n      console.error('Error updating password:', error);\n      throw error;\n    }\n  }\n\n  private validatePasswordStrength(password: string): { isValid: boolean; message?: string } {\n    if (!password) {\n      return { isValid: false, message: 'Password is required' };\n    }\n\n    if (password.length ]/.test(password);\n\n    if (!hasUpperCase) {\n      return { isValid: false, message: 'Password must contain at least one uppercase letter' };\n    }\n\n    if (!hasLowerCase) {\n      return { isValid: false, message: 'Password must contain at least one lowercase letter' };\n    }\n\n    if (!hasNumbers) {\n      return { isValid: false, message: 'Password must contain at least one number' };\n    }\n\n    if (!hasSpecialChars) {\n      return { isValid: false, message: 'Password must contain at least one special character (!@#$%^&*(),.?\":{}|<>)' };\n    }\n\n    return { isValid: true };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthenticatedUser.html":{"url":"interfaces/AuthenticatedUser.html","title":"interface - AuthenticatedUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AuthenticatedUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            roles\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        roles:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\n\ninterface JwtPayload {\n  sub: number;\n  email: string;\n  roles?: string[];\n}\n\n// Strategy for validating JWT tokens in NestJS\nexport interface AuthenticatedUser {\n  id: number;\n  email: string;\n  roles: Array;\n}\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private configService: ConfigService) {\n    const secretKey = configService.get('JWT_SECRET');\n\n    if (!secretKey) {\n      throw new Error('JWT_SECRET is not defined in environment variables');\n    }\n\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: secretKey,\n    });\n  }\n\n  validate(payload: JwtPayload): AuthenticatedUser {\n    // Validation for the payload\n    if (!payload || payload.sub === undefined || isNaN(Number(payload.sub))) {\n      throw new UnauthorizedException('Invalid token payload');\n    }\n\n    const userId = Number(payload.sub);\n    const email = String(payload.email || '');\n    const roles = Array.isArray(payload.roles)\n      ? payload.roles.map((role) => ({ name: role }))\n      : [];\n\n    return {\n      id: userId,\n      email,\n      roles,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Counter.html":{"url":"entities/Counter.html","title":"entity - Counter","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Counter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/counter/entities/counter.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                currentQueue\n                            \n                            \n                                    \n                                currentQueueId\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        currentQueue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Queue | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, queue => queue.counter, {nullable: true})@JoinColumn({name: 'current_queue_id', foreignKeyConstraintName: 'fk_current_queue'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        currentQueueId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'current_queue_id', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CounterStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: CounterStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:28\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  OneToOne,\n  JoinColumn,\n} from 'typeorm';\nimport { Queue } from '../../queue/entities/queue.entity';\n\nexport enum CounterStatus {\n  ACTIVE = 'active',\n  INACTIVE = 'inactive',\n}\n\n@Entity('counters')\nexport class Counter {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  name: string;\n\n  @Column({\n    type: 'enum',\n    enum: CounterStatus,\n    default: CounterStatus.ACTIVE,\n  })\n  status: CounterStatus;\n\n  @Column({ name: 'current_queue_id', nullable: true })\n  currentQueueId: number | null;\n\n  @OneToOne(() => Queue, (queue) => queue.counter, { nullable: true })\n  @JoinColumn({\n    name: 'current_queue_id',\n    foreignKeyConstraintName: 'fk_current_queue',\n  })\n  currentQueue: Queue | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAnnouncementDto.html":{"url":"classes/CreateAnnouncementDto.html","title":"class - CreateAnnouncementDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAnnouncementDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/announcement/dto/create-announcement.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                createdBy\n                            \n                            \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                image\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                isActive\n                            \n                            \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        createdBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/dto/create-announcement.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/dto/create-announcement.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/dto/create-announcement.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/dto/create-announcement.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/dto/create-announcement.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsOptional, IsBoolean } from 'class-validator';\n\nexport class CreateAnnouncementDto {\n  @IsString()\n  @IsNotEmpty()\n  title: string;\n\n  @IsString()\n  @IsNotEmpty()\n  description: string;\n\n  @IsOptional()\n  @IsString()\n  image?: string;\n\n  @IsOptional()\n  @IsString()\n  createdBy?: string;\n\n  @IsOptional()\n  @IsBoolean()\n  isActive?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAppointmentDto.html":{"url":"classes/CreateAppointmentDto.html","title":"class - CreateAppointmentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAppointmentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/appointment/dto/create-appointment.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                address\n                            \n                            \n                                    \n                                    \n                                appointmentDate\n                            \n                            \n                                    \n                                    \n                                appointmentTime\n                            \n                            \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    Optional\n                                isGuest\n                            \n                            \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                middleInitial\n                            \n                            \n                                    \n                                    \n                                phoneNumber\n                            \n                            \n                                    \n                                    \n                                reasonOfVisit\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                            \n                                    \n                                    Optional\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        appointmentDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        appointmentTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        isGuest\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        middleInitial\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        reasonOfVisit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AppointmentStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEnum(AppointmentStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:48\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsNotEmpty,\n  IsString,\n  IsOptional,\n  IsEnum,\n  IsDateString,\n} from 'class-validator';\nimport { AppointmentStatus } from '../entities/appointment.entity';\n\nexport class CreateAppointmentDto {\n  @IsNotEmpty()\n  @IsString()\n  firstName: string;\n\n  @IsNotEmpty()\n  @IsString()\n  lastName: string;\n\n  @IsOptional()\n  @IsString()\n  middleInitial: string;\n\n  @IsNotEmpty()\n  @IsString()\n  address: string;\n\n  @IsNotEmpty()\n  @IsString()\n  phoneNumber: string;\n\n  @IsNotEmpty()\n  @IsString()\n  reasonOfVisit: string;\n\n  @IsNotEmpty()\n  @IsDateString()\n  appointmentDate: string;\n\n  @IsNotEmpty()\n  @IsString()\n  appointmentTime: string;\n\n  @IsOptional()\n  @IsEnum(AppointmentStatus)\n  status?: AppointmentStatus;\n\n  @IsOptional()\n  userId?: number;\n\n  @IsOptional()\n  isGuest?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateDocumentApplicationDto.html":{"url":"classes/CreateDocumentApplicationDto.html","title":"class - CreateDocumentApplicationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateDocumentApplicationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/document-applications/dto/create-document-application.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                applicationSubtype\n                            \n                            \n                                    \n                                    \n                                applicationType\n                            \n                            \n                                    \n                                    \n                                formData\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                statusMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        applicationSubtype\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Application subtype (optional)', example: 'Copy of Birth Certificate', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/dto/create-document-application.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        applicationType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ApplicationType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: ApplicationType, description: 'Type of document application', example: undefined})@IsEnum(ApplicationType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/dto/create-document-application.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        formData\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Form data containing all application details', example: undefined})@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/dto/create-document-application.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        statusMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Optional status message', example: 'Initial application submission', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/dto/create-document-application.dto.ts:42\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsOptional, IsObject, IsString } from 'class-validator';\nimport { ApplicationType } from '../entities/document-application.entity';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateDocumentApplicationDto {\n  @ApiProperty({\n    enum: ApplicationType,\n    description: 'Type of document application',\n    example: ApplicationType.BIRTH_CERTIFICATE,\n  })\n  @IsEnum(ApplicationType)\n  applicationType: ApplicationType;\n\n  @ApiProperty({\n    description: 'Application subtype (optional)',\n    example: 'Copy of Birth Certificate',\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  applicationSubtype?: string;\n\n  @ApiProperty({\n    description: 'Form data containing all application details',\n    example: {\n      firstName: 'Juan',\n      lastName: 'Dela Cruz',\n      birthDate: '1990-01-01',\n      birthPlace: 'Manila',\n    },\n  })\n  @IsObject()\n  formData: Record;\n\n  @ApiProperty({\n    description: 'Optional status message',\n    example: 'Initial application submission',\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  statusMessage?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateQueueDto.html":{"url":"classes/CreateQueueDto.html","title":"class - CreateQueueDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateQueueDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/dto/create-queue.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                    \n                                    \n                                appointmentType\n                            \n                            \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                isGuest\n                            \n                            \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                middleInitial\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                phoneNumber\n                            \n                            \n                                    \n                                    \n                                reasonOfVisit\n                            \n                            \n                                    \n                                    Optional\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        appointmentType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        isGuest\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        middleInitial\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        reasonOfVisit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsOptional, IsNotEmpty, IsBoolean } from 'class-validator';\n\nexport class CreateQueueDto {\n  @IsOptional()\n  userId?: number | string;\n\n  @IsString()\n  @IsNotEmpty()\n  firstName: string;\n\n  @IsString()\n  @IsNotEmpty()\n  lastName: string;\n\n  @IsString()\n  @IsOptional()\n  middleInitial?: string;\n\n  @IsString()\n  @IsOptional()\n  address?: string;\n\n  @IsString()\n  @IsOptional()\n  phoneNumber?: string;\n\n  @IsString()\n  @IsNotEmpty()\n  reasonOfVisit: string;\n\n  @IsString()\n  @IsNotEmpty()\n  appointmentType: string;\n\n  @IsBoolean()\n  @IsOptional()\n  isGuest?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                contactNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                defaultRoleId\n                            \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                middleName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                nameExtension\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                roleIds\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        contactNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: '+639123456789', description: 'Contact number'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        defaultRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 4, description: 'Default role ID for the user'})@IsOptional()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:102\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'john.doe@example.com', description: 'User email address'})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'John', description: 'User first name'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Doe', description: 'User last name'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'Miguel', description: 'User middle name (optional)'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'John Miguel Doe Jr.', description: 'Full name (auto-generated if not provided)'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        nameExtension\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'Jr.', description: 'Name extension (e.g., Jr., Sr., III)'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'password123', description: 'User password (minimum 6 characters)', minLength: 6})@IsString()@MinLength(6)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        roleIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: undefined, description: 'Array of role IDs to assign to the user', type: undefined})@IsOptional()@IsArray()@IsNumber({}, {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'johndoe', description: 'Username (optional, will use email if not provided)'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsString,\n  IsOptional,\n  MinLength,\n  IsArray,\n  IsNumber,\n  IsNotEmpty,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @ApiProperty({\n    example: 'john.doe@example.com',\n    description: 'User email address',\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @ApiPropertyOptional({\n    example: 'johndoe',\n    description: 'Username (optional, will use email if not provided)',\n  })\n  @IsOptional()\n  @IsString()\n  username?: string;\n\n  @ApiProperty({\n    example: 'password123',\n    description: 'User password (minimum 6 characters)',\n    minLength: 6,\n  })\n  @IsString()\n  @MinLength(6)\n  password: string;\n\n  @ApiProperty({\n    example: 'John',\n    description: 'User first name',\n  })\n  @IsString()\n  @IsNotEmpty()\n  firstName: string;\n\n  @ApiPropertyOptional({\n    example: 'Miguel',\n    description: 'User middle name (optional)',\n  })\n  @IsOptional()\n  @IsString()\n  middleName?: string;\n\n  @ApiProperty({\n    example: 'Doe',\n    description: 'User last name',\n  })\n  @IsString()\n  @IsNotEmpty()\n  lastName: string;\n\n  @ApiPropertyOptional({\n    example: 'John Miguel Doe Jr.',\n    description: 'Full name (auto-generated if not provided)',\n  })\n  @IsString()\n  @IsOptional()\n  name?: string;\n\n  @ApiPropertyOptional({\n    example: 'Jr.',\n    description: 'Name extension (e.g., Jr., Sr., III)',\n  })\n  @IsOptional()\n  @IsString()\n  nameExtension?: string;\n\n  @ApiPropertyOptional({\n    example: '+639123456789',\n    description: 'Contact number',\n  })\n  @IsOptional()\n  @IsString()\n  contactNumber?: string;\n\n  @ApiPropertyOptional({\n    example: [2, 3],\n    description: 'Array of role IDs to assign to the user',\n    type: [Number],\n  })\n  @IsOptional()\n  @IsArray()\n  @IsNumber({}, { each: true })\n  roleIds?: number[];\n\n  @ApiPropertyOptional({\n    example: 4,\n    description: 'Default role ID for the user',\n  })\n  @IsOptional()\n  @IsNumber()\n  defaultRoleId?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DocumentApplication.html":{"url":"entities/DocumentApplication.html","title":"entity - DocumentApplication","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DocumentApplication\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/document-applications/entities/document-application.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                applicationSubtype\n                            \n                            \n                                    \n                                applicationType\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                files\n                            \n                            \n                                    \n                                formData\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastModifiedBy\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                statusHistory\n                            \n                            \n                                    \n                                statusMessage\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    \n                                user\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        applicationSubtype\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'application_subtype', length: 100, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        applicationType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ApplicationType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: ApplicationType, name: 'application_type'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        files\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DocumentFile[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, file => file.application, {cascade: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        formData\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'form_data', type: 'json'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn({length: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastModifiedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'last_modified_by', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ApplicationStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: ApplicationStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        statusHistory\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ApplicationStatusHistory[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, history => history.application, {cascade: false, eager: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        statusMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'status_message', type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({name: 'updated_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {nullable: true})@JoinColumn({name: 'user_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'user_id', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:44\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryColumn,\n  Column,\n  CreateDateColumn,\n  UpdateDateColumn,\n  OneToMany,\n  ManyToOne,\n  JoinColumn,\n  Index,\n} from 'typeorm';\nimport { User } from '../../../users/entities/user.entity';\nimport { DocumentFile } from './document-file.entity';\nimport { ApplicationStatusHistory } from './application-status-history.entity';\n\nexport enum ApplicationType {\n  BIRTH_CERTIFICATE = 'Birth Certificate',\n  MARRIAGE_CERTIFICATE = 'Marriage Certificate',\n  MARRIAGE_LICENSE = 'Marriage License',\n  DEATH_CERTIFICATE = 'Death Certificate',\n  BUSINESS_PERMIT = 'Business Permit',\n}\n\nexport enum ApplicationStatus {\n  PENDING = 'Pending',\n  PROCESSING = 'Processing',\n  APPROVED = 'Approved',\n  REJECTED = 'Rejected',\n  DECLINE = 'Decline',\n  READY_FOR_PICKUP = 'Ready for Pickup',\n  REQUIRES_ADDITIONAL_INFO = 'Requires Additional Info',\n}\n\n@Entity('document_applications')\n@Index(['userId'])\n@Index(['applicationType'])\n@Index(['status'])\n@Index(['createdAt'])\nexport class DocumentApplication {\n  @PrimaryColumn({ length: 50 })\n  id: string;\n\n  @Column({ name: 'user_id', nullable: true })\n  userId: number;\n\n  @Column({\n    type: 'enum',\n    enum: ApplicationType,\n    name: 'application_type',\n  })\n  applicationType: ApplicationType;\n\n  @Column({ name: 'application_subtype', length: 100, nullable: true })\n  applicationSubtype: string;\n\n  @Column({\n    type: 'enum',\n    enum: ApplicationStatus,\n    default: ApplicationStatus.PENDING,\n  })\n  status: ApplicationStatus;\n\n  @Column({ name: 'status_message', type: 'text', nullable: true })\n  statusMessage: string;\n\n  @Column({ name: 'form_data', type: 'json' })\n  formData: Record;\n\n  @CreateDateColumn({ name: 'created_at' })\n  createdAt: Date;\n\n  @UpdateDateColumn({ name: 'updated_at' })\n  updatedAt: Date;\n\n  @Column({ name: 'last_modified_by', nullable: true })\n  lastModifiedBy: number;\n\n  // Relations\n  @ManyToOne(() => User, { nullable: true })\n  @JoinColumn({ name: 'user_id' })\n  user: User;\n\n  @OneToMany(() => DocumentFile, (file) => file.application, { cascade: true })\n  files: DocumentFile[];\n\n  @OneToMany(() => ApplicationStatusHistory, (history) => history.application, {\n    cascade: false,\n    eager: false,\n  })\n  statusHistory: ApplicationStatusHistory[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/DocumentApplicationsController.html":{"url":"controllers/DocumentApplicationsController.html","title":"controller - DocumentApplicationsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  DocumentApplicationsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/document-applications/document-applications.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                document-applications\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getAllApplicationFiles\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getAllApplications\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getApplicationFiles\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getFileDownloadUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getStats\n                            \n                            \n                                    \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                updateStatus\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                uploadDocument\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createDto: CreateDocumentApplicationDto, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create new document application'})@ApiResponse({status: 201, description: 'Application created successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createDto\n                                            \n                                                            CreateDocumentApplicationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(status?: string, user?: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Get user applications'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:96\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'Get specific application'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:154\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getAllApplicationFiles\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllApplicationFiles(id: string, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/files/all')@ApiOperation({summary: 'Get all application files (privileged users only)'})@ApiResponse({status: 200, description: 'All files retrieved successfully'})@ApiResponse({status: 404, description: 'Application not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:136\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getAllApplications\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllApplications()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('admin/all')@Roles('admin', 'staff', 'super_admin')@UseGuards(RolesGuard)@ApiOperation({summary: 'Get all applications (Privileged users only)'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:241\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getApplicationFiles\n                        \n                    \n                \n            \n            \n                \n                        \n                    getApplicationFiles(id: string, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/files')@ApiOperation({summary: 'Get application files (latest per category)'})@ApiResponse({status: 200, description: 'Files retrieved successfully'})@ApiResponse({status: 404, description: 'Application not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:112\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getFileDownloadUrl\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFileDownloadUrl(fileId: string, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('files/:fileId/download')@ApiOperation({summary: 'Get file download URL'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:165\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fileId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('admin/stats')@Roles('admin', 'super_admin')@UseGuards(RolesGuard)@ApiOperation({summary: 'Get application statistics (Admin/Super Admin only)'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:249\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise>\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({summary: 'Delete application'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:226\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateDto: UpdateDocumentApplicationDto, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOperation({summary: 'Update application'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:183\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateDto\n                                            \n                                                            UpdateDocumentApplicationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(id: string, statusDto: literal type, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/status')@Roles('admin', 'staff', 'super_admin')@UseGuards(RolesGuard)@ApiOperation({summary: 'Update application status (Privileged users only)'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:211\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                statusDto\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        uploadDocument\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadDocument(id: string, file: Express.Multer.File, documentCategory: string, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':id/files')@UseInterceptors(undefined)@ApiConsumes('multipart/form-data')@ApiOperation({summary: 'Upload document file'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                documentCategory\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseInterceptors,\n  UploadedFile,\n  Query,\n  UseGuards,\n  //Request, // Uncomment if you need to use Request object\n  BadRequestException,\n} from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { DocumentApplicationsService } from './document-applications.service';\nimport { CreateDocumentApplicationDto } from './dto/create-document-application.dto';\nimport { UpdateDocumentApplicationDto } from './dto/update-document-application.dto';\nimport { JwtAuthGuard } from '../../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../../auth/guards/roles.guard';\nimport { Roles } from '../../auth/decorators/roles.decorator';\nimport { User } from '../../auth/decorators/user.decorator';\nimport { AuthenticatedUser } from '../../auth/jwt.strategy';\nimport { ApplicationStatus } from './entities/document-application.entity';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n  ApiConsumes,\n} from '@nestjs/swagger';\n\n@ApiTags('Document Applications')\n@Controller('document-applications')\n@UseGuards(JwtAuthGuard)\n@ApiBearerAuth('JWT-auth')\nexport class DocumentApplicationsController {\n  constructor(\n    private readonly documentApplicationsService: DocumentApplicationsService,\n  ) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Create new document application' })\n  @ApiResponse({ status: 201, description: 'Application created successfully' })\n  async create(\n    @Body() createDto: CreateDocumentApplicationDto,\n    @User() user: AuthenticatedUser,\n  ) {\n    return this.documentApplicationsService.create(createDto, user.id);\n  }\n\n  @Post(':id/files')\n  @UseInterceptors(\n    FileInterceptor('file', {\n      limits: {\n        fileSize: 10 * 1024 * 1024, // 10MB limit\n      },\n      fileFilter: (req, file, callback) => {\n        if (!file.mimetype.match(/\\/(jpg|jpeg|png|pdf)$/)) {\n          return callback(\n            new BadRequestException(\n              'Only JPEG, PNG, and PDF files are allowed',\n            ),\n            false,\n          );\n        }\n        callback(null, true);\n      },\n    }),\n  )\n  @ApiConsumes('multipart/form-data')\n  @ApiOperation({ summary: 'Upload document file' })\n  async uploadDocument(\n    @Param('id') id: string,\n    @UploadedFile() file: Express.Multer.File,\n    @Body('documentCategory') documentCategory: string,\n    @User() user: AuthenticatedUser,\n  ) {\n    console.log('Received document category:', documentCategory); // Debug log\n\n    if (!documentCategory) {\n      throw new BadRequestException('Document category is required');\n    }\n\n    return this.documentApplicationsService.uploadFile(\n      id,\n      file,\n      documentCategory,\n      user.id,\n    );\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Get user applications' })\n  async findAll(\n    @Query('status') status?: string,\n    @User() user?: AuthenticatedUser,\n  ) {\n    const userId = user?.roles.some((role) =>\n      ['admin', 'super_admin', 'staff'].includes(role.name),\n    )\n      ? undefined\n      : user?.id;\n    return this.documentApplicationsService.findAll(userId);\n  }\n\n  @Get(':id/files')\n  @ApiOperation({ summary: 'Get application files (latest per category)' })\n  @ApiResponse({ status: 200, description: 'Files retrieved successfully' })\n  @ApiResponse({ status: 404, description: 'Application not found' })\n  async getApplicationFiles(\n    @Param('id') id: string,\n    @User() user: AuthenticatedUser,\n  ) {\n    const userId = user.roles.some((role) =>\n      ['admin', 'super_admin', 'staff'].includes(role.name),\n    )\n      ? undefined\n      : user.id;\n\n    console.log(\n      `Getting files for application ${id}, user: ${user.email}, isPrivileged: ${!userId}`,\n    );\n\n    return await this.documentApplicationsService.getApplicationFiles(\n      id,\n      userId,\n    );\n  }\n\n  @Get(':id/files/all')\n  @ApiOperation({ summary: 'Get all application files (privileged users only)' })\n  @ApiResponse({ status: 200, description: 'All files retrieved successfully' })\n  @ApiResponse({ status: 404, description: 'Application not found' })\n  async getAllApplicationFiles(\n    @Param('id') id: string,\n    @User() user: AuthenticatedUser,\n  ) {\n    const userId = user.roles.some((role) =>\n      ['admin', 'super_admin', 'staff'].includes(role.name),\n    )\n      ? undefined\n      : user.id;\n\n    return await this.documentApplicationsService.getAllApplicationFiles(\n      id,\n      userId,\n    );\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: 'Get specific application' })\n  async findOne(@Param('id') id: string, @User() user: AuthenticatedUser) {\n    const userId = user.roles.some((role) =>\n      ['admin', 'super_admin', 'staff'].includes(role.name),\n    )\n      ? undefined\n      : user.id;\n    return this.documentApplicationsService.findOne(id, userId);\n  }\n\n  @Get('files/:fileId/download')\n  @ApiOperation({ summary: 'Get file download URL' })\n  async getFileDownloadUrl(\n    @Param('fileId') fileId: string,\n    @User() user: AuthenticatedUser,\n  ) {\n    const userId = user.roles.some((role) =>\n      ['admin', 'super_admin', 'staff'].includes(role.name),\n    )\n      ? undefined\n      : user.id;\n    const url = await this.documentApplicationsService.getFileDownloadUrl(\n      +fileId,\n      userId,\n    );\n    return { url };\n  }\n\n  @Patch(':id')\n  @ApiOperation({ summary: 'Update application' })\n  async update(\n    @Param('id') id: string,\n    @Body() updateDto: UpdateDocumentApplicationDto,\n    @User() user: AuthenticatedUser,\n  ) {\n    const userId = user.roles.some((role) =>\n      ['admin', 'super_admin', 'staff'].includes(role.name),\n    )\n      ? undefined\n      : user.id;\n    const adminId = user.roles.some((role) =>\n      ['admin', 'super_admin', 'staff'].includes(role.name),\n    )\n      ? user.id\n      : undefined;\n\n    return this.documentApplicationsService.update(\n      id,\n      updateDto,\n      userId,\n      adminId,\n    );\n  }\n\n  @Patch(':id/status')\n  @Roles('admin', 'staff', 'super_admin')\n  @UseGuards(RolesGuard)\n  @ApiOperation({ summary: 'Update application status (Privileged users only)' })\n  async updateStatus(\n    @Param('id') id: string,\n    @Body() statusDto: { status: string; statusMessage?: string },\n    @User() user: AuthenticatedUser,\n  ) {\n    return this.documentApplicationsService.updateStatus(\n      id,\n      statusDto.status as ApplicationStatus,\n      statusDto.statusMessage,\n      user.id,\n    );\n  }\n\n  @Delete(':id')\n  @ApiOperation({ summary: 'Delete application' })\n  async remove(@Param('id') id: string, @User() user: AuthenticatedUser) {\n    const userId = user.roles.some((role) =>\n      ['admin', 'super_admin', 'staff'].includes(role.name),\n    )\n      ? undefined\n      : user.id;\n    await this.documentApplicationsService.remove(id, userId);\n    return { message: 'Application deleted successfully' };\n  }\n\n  // Admin endpoints\n  @Get('admin/all')\n  @Roles('admin', 'staff', 'super_admin')\n  @UseGuards(RolesGuard)\n  @ApiOperation({ summary: 'Get all applications (Privileged users only)' })\n  async getAllApplications() {\n    return this.documentApplicationsService.findAll();\n  }\n\n  @Get('admin/stats')\n  @Roles('admin', 'super_admin')\n  @UseGuards(RolesGuard)\n  @ApiOperation({ summary: 'Get application statistics (Admin/Super Admin only)' })\n  async getStats(): Promise\n  > {\n    return this.documentApplicationsService.getApplicationStats();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DocumentApplicationsModule.html":{"url":"modules/DocumentApplicationsModule.html","title":"module - DocumentApplicationsModule","body":"\n                   \n\n\n\n\n    Modules\n    DocumentApplicationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DocumentApplicationsModule\n\n\n\ncluster_DocumentApplicationsModule_exports\n\n\n\ncluster_DocumentApplicationsModule_providers\n\n\n\n\nDocumentApplicationsService \n\nDocumentApplicationsService \n\n\n\nMinioService \n\nMinioService \n\n\n\nDocumentApplicationsModule\n\nDocumentApplicationsModule\n\nDocumentApplicationsService  -->\n\nDocumentApplicationsModule->DocumentApplicationsService \n\n\n\nMinioService  -->\n\nDocumentApplicationsModule->MinioService \n\n\n\n\n\nDocumentApplicationsService\n\nDocumentApplicationsService\n\nDocumentApplicationsModule -->\n\nDocumentApplicationsService->DocumentApplicationsModule\n\n\n\n\n\nMinioService\n\nMinioService\n\nDocumentApplicationsModule -->\n\nMinioService->DocumentApplicationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/document-applications/document-applications.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DocumentApplicationsService\n                        \n                        \n                            MinioService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            DocumentApplicationsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            DocumentApplicationsService\n                        \n                        \n                            MinioService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { DocumentApplicationsService } from './document-applications.service';\nimport { DocumentApplicationsController } from './document-applications.controller';\nimport { DocumentApplication } from './entities/document-application.entity';\nimport { DocumentFile } from './entities/document-file.entity';\nimport { ApplicationStatusHistory } from './entities/application-status-history.entity';\nimport { MinioService } from './services/minio.service';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      DocumentApplication,\n      DocumentFile,\n      ApplicationStatusHistory,\n    ]),\n  ],\n  controllers: [DocumentApplicationsController],\n  providers: [DocumentApplicationsService, MinioService],\n  exports: [DocumentApplicationsService, MinioService],\n})\nexport class DocumentApplicationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DocumentFile.html":{"url":"entities/DocumentFile.html","title":"entity - DocumentFile","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DocumentFile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/document-applications/entities/document-file.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                application\n                            \n                            \n                                    \n                                applicationId\n                            \n                            \n                                    \n                                documentCategory\n                            \n                            \n                                    \n                                fileName\n                            \n                            \n                                    \n                                fileSize\n                            \n                            \n                                    \n                                fileType\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                minioObjectName\n                            \n                            \n                                    \n                                uploadedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        application\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DocumentApplication\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, app => app.files, {onDelete: 'CASCADE'})@JoinColumn({name: 'application_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        applicationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'application_id', length: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        documentCategory\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'document_category', length: 250, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        fileName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'file_name', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        fileSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'file_size', type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        fileType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'file_type', length: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        minioObjectName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'minio_object_name', length: 500})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        uploadedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'uploaded_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:38\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  CreateDateColumn,\n  ManyToOne,\n  JoinColumn,\n  Index,\n} from 'typeorm';\nimport { DocumentApplication } from './document-application.entity';\n\n@Entity('document_files')\n@Index(['applicationId'])\n@Index(['documentCategory'])\nexport class DocumentFile {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ name: 'application_id', length: 50 })\n  applicationId: string;\n\n  @Column({ name: 'file_name', length: 255 })\n  fileName: string;\n\n  @Column({ name: 'file_type', length: 100 })\n  fileType: string;\n\n  @Column({ name: 'file_size', type: 'bigint' })\n  fileSize: number;\n\n  @Column({ name: 'minio_object_name', length: 500 })\n  minioObjectName: string;\n\n  @Column({ name: 'document_category', length: 250, nullable: true })\n  documentCategory: string;\n\n  @CreateDateColumn({ name: 'uploaded_at' })\n  uploadedAt: Date;\n\n  // Relations\n  @ManyToOne(() => DocumentApplication, (app) => app.files, {\n    onDelete: 'CASCADE',\n  })\n  @JoinColumn({ name: 'application_id' })\n  application: DocumentApplication;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailService.html":{"url":"injectables/EmailService.html","title":"injectable - EmailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/email.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                transporter\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendApplicationNotification\n                            \n                            \n                                    Async\n                                sendOTP\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/services/email.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendApplicationNotification\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendApplicationNotification(email: string, applicationId: string, status: string, applicationType: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/email.service.ts:110\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                applicationId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                status\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                applicationType\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendOTP\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendOTP(email: string, otp: string, purpose: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/email.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                otp\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                purpose\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'verification'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        transporter\n                        \n                    \n                \n            \n                \n                    \n                        Type :     nodemailer.Transporter\n\n                    \n                \n                    \n                        \n                                Defined in src/services/email.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport * as nodemailer from 'nodemailer';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class EmailService {\n  private transporter: nodemailer.Transporter;\n\n  constructor(private configService: ConfigService) {\n    this.transporter = nodemailer.createTransport({\n      host: this.configService.get('SMTP_HOST'),\n      port: this.configService.get('SMTP_PORT'),\n      secure: this.configService.get('SMTP_SECURE') === 'true',\n      auth: {\n        user: this.configService.get('SMTP_USER'),\n        pass: this.configService.get('SMTP_PASS'),\n      },\n    });\n  }\n\n  async sendOTP(email: string, otp: string, purpose: string = 'verification') {\n    const templates = {\n      verification: {\n        subject: '🔐 Bulak LGU Smart Connect - Email Verification',\n        html: `\n          \n            \n              Bulak LGU Smart Connect\n            \n            \n              Email Verification Required\n              \n                Please use the following OTP to verify your email address:\n              \n              ${otp}\n              \n                This OTP will expire in 5 minutes. If you didn't request this, please ignore this email.\n              \n            \n            \n              © 2025 Bulak LGU Smart Connect. All rights reserved.\n            \n          \n        `\n      },\n      password_reset: {\n        subject: '🔒 Bulak LGU Smart Connect - Password Reset',\n        html: `\n          \n            \n              Bulak LGU Smart Connect\n            \n            \n              Password Reset Request\n              \n                Use this OTP to reset your password:\n              \n              ${otp}\n              \n                This OTP will expire in 5 minutes. If you didn't request this, please secure your account.\n              \n            \n            \n              © 2025 Bulak LGU Smart Connect. All rights reserved.\n            \n          \n        `\n      },\n      application_update: {\n        subject: '📋 Bulak LGU Smart Connect - Application Status Update',\n        html: `\n          \n            \n              Bulak LGU Smart Connect\n            \n            \n              Application Status Update\n              \n                Your application status has been updated. Please check your dashboard for details.\n              \n              \n                Status: ${otp}\n              \n            \n            \n              © 2025 Bulak LGU Smart Connect. All rights reserved.\n            \n          \n        `\n      }\n    };\n\n    const template = templates[purpose] || templates.verification;\n\n    const mailOptions = {\n      from: this.configService.get('EMAIL_FROM'),\n      to: email,\n      subject: template.subject,\n      html: template.html,\n    };\n\n    return await this.transporter.sendMail(mailOptions);\n  }\n\n  async sendApplicationNotification(email: string, applicationId: string, status: string, applicationType: string) {\n    const statusColors = {\n      'Pending': '#f39c12',\n      'Approved': '#27ae60',\n      'Rejected': '#e74c3c',\n      'Ready for Pickup': '#3498db'\n    };\n\n    const mailOptions = {\n      from: this.configService.get('EMAIL_FROM'),\n      to: email,\n      subject: `📋 Application ${applicationId} - Status: ${status}`,\n      html: `\n        \n          \n            Bulak LGU Smart Connect\n          \n          \n            Application Status Update\n            \n              Your ${applicationType} application has been updated.\n            \n            \n              Application ID: ${applicationId}\n              Status: ${status}\n            \n            \n              Please log in to your account to view more details.\n            \n          \n          \n            © 2025 Bulak LGU Smart Connect. All rights reserved.\n          \n        \n      `,\n    };\n\n    return await this.transporter.sendMail(mailOptions);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FindAllOptions.html":{"url":"interfaces/FindAllOptions.html","title":"interface - FindAllOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FindAllOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            limit\n                                        \n                                \n                                \n                                        \n                                            page\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            role\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            search\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        limit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        limit:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        page\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        page:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        search\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        search:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  BadRequestException,\n  ConflictException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, Like, In } from 'typeorm';\nimport { User } from './entities/user.entity';\nimport { AdminUpdateUserDto } from '../auth/dto/update-user.dto'; // Import from auth module\nimport { RolesService } from '../roles/roles.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport * as bcrypt from 'bcrypt';\n\ninterface FindAllOptions {\n  page: number;\n  limit: number;\n  search?: string;\n  role?: string;\n}\n\nexport interface UserStats {\n  totalUsers: number;\n  activeUsers: number;\n  inactiveUsers: number;\n  usersByRole: { roleName: string; count: number }[];\n  recentUsers: Omit[];\n}\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n    private rolesService: RolesService,\n  ) {}\n\n  async findAll(options: FindAllOptions) {\n    const { page, limit, search, role } = options;\n    const skip = (page - 1) * limit;\n\n    const queryBuilder = this.usersRepository\n      .createQueryBuilder('user')\n      .leftJoinAndSelect('user.defaultRole', 'defaultRole')\n      .leftJoinAndSelect('user.roles', 'roles');\n\n    // Apply search filter\n    if (search) {\n      queryBuilder.where(\n        '(user.firstName LIKE :search OR user.lastName LIKE :search OR user.email LIKE :search OR user.username LIKE :search)',\n        { search: `%${search}%` },\n      );\n    }\n\n    // Apply role filter\n    if (role) {\n      queryBuilder.andWhere('roles.name = :role', { role });\n    }\n\n    queryBuilder.orderBy('user.createdAt', 'DESC').skip(skip).take(limit);\n\n    const [users, total] = await queryBuilder.getManyAndCount();\n\n    // Remove passwords from response\n    const sanitizedUsers = users.map((user) => {\n      const { password, ...userWithoutPassword } = user;\n      return {\n        ...userWithoutPassword,\n        roles: user.roles.map((role) => role.name),\n        defaultRole: user.defaultRole?.name || 'citizen',\n      };\n    });\n\n    return {\n      users: sanitizedUsers,\n      total,\n      page,\n      limit,\n      totalPages: Math.ceil(total / limit),\n    };\n  }\n\n  async findOne(id: number): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id },\n      relations: ['defaultRole', 'roles'],\n    });\n\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    // Remove password and format response\n\n    const { password, ...userWithoutPassword } = user;\n    return {\n      ...userWithoutPassword,\n      roles: user.roles.map((role) => role.name),\n      defaultRole: user.defaultRole?.name || 'citizen',\n    };\n  }\n\n  // Admin-only update method\n  async adminUpdate(\n    id: number,\n    updateUserDto: AdminUpdateUserDto,\n  ): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id },\n      relations: ['roles'],\n    });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    const {\n      email,\n\n      username,\n\n      firstName,\n\n      middleName,\n\n      lastName,\n\n      nameExtension,\n\n      contactNumber,\n\n      roleIds,\n\n      defaultRoleId,\n    } = updateUserDto;\n\n    // Check email uniqueness if being updated\n    if (email && email !== user.email) {\n      const existingUser = await this.usersRepository.findOne({\n        where: { email },\n      });\n      if (existingUser) {\n        throw new ConflictException('Email already exists');\n      }\n    }\n\n    // Check username uniqueness if being updated\n    if (username && username !== user.username) {\n      const existingUser = await this.usersRepository.findOne({\n        where: { username },\n      });\n      if (existingUser) {\n        throw new ConflictException('Username already exists');\n      }\n    }\n\n    // Update fields\n    const updateData: any = {};\n\n    if (email) updateData.email = email;\n    if (username) updateData.username = username;\n    if (firstName) updateData.firstName = firstName;\n    if (lastName) updateData.lastName = lastName;\n    if (contactNumber) updateData.contactNumber = contactNumber;\n\n    // Handle optional fields\n    if (middleName !== undefined) updateData.middleName = middleName;\n    if (nameExtension !== undefined) updateData.nameExtension = nameExtension;\n    if (defaultRoleId !== undefined) updateData.defaultRoleId = defaultRoleId;\n\n    // Update name if name components changed\n    if (\n      firstName ||\n      middleName !== undefined ||\n      lastName ||\n      nameExtension !== undefined\n    ) {\n      const newFirstName = firstName || user.firstName;\n      const newMiddleName =\n        middleName !== undefined ? middleName : user.middleName;\n      const newLastName = lastName || user.lastName;\n      const newNameExtension =\n        nameExtension !== undefined ? nameExtension : user.nameExtension;\n\n      updateData.name = `${newFirstName} ${newMiddleName ? newMiddleName + ' ' : ''}${newLastName}${newNameExtension ? ' ' + newNameExtension : ''}`;\n    }\n\n    await this.usersRepository.update(id, updateData);\n\n    // Update roles if provided\n    if (roleIds !== undefined) {\n      // Remove existing roles and assign new ones\n      await this.usersRepository\n        .createQueryBuilder()\n        .relation(User, 'roles')\n        .of(id)\n        .remove(user.roles);\n\n      if (roleIds.length > 0) {\n        await this.rolesService.assignRolesToUser(id, roleIds);\n      }\n    }\n\n    return this.findOne(id);\n  }\n\n  async remove(id: number): Promise {\n    const user = await this.usersRepository.findOne({ where: { id } });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    await this.usersRepository.delete(id);\n    return { message: `User with ID ${id} has been deleted` };\n  }\n\n  async updateStatus(id: number, isActive: boolean): Promise {\n    const user = await this.usersRepository.findOne({ where: { id } });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    await this.usersRepository.update(id, { isActive });\n    return this.findOne(id);\n  }\n\n  async getStats(): Promise {\n    const totalUsers = await this.usersRepository.count();\n    const activeUsers = await this.usersRepository.count({\n      where: { isActive: true },\n    });\n    const inactiveUsers = totalUsers - activeUsers;\n\n    // Get user count by role\n    const roleStats = await this.usersRepository\n      .createQueryBuilder('user')\n      .leftJoin('user.roles', 'role')\n      .select('role.name', 'roleName')\n      .addSelect('COUNT(user.id)', 'count')\n      .groupBy('role.name')\n      .getRawMany();\n\n    const usersByRole = roleStats.map((stat) => ({\n      roleName: stat.roleName || 'No Role',\n\n      count: parseInt(stat.count),\n    }));\n\n    // Get recent users (last 10)\n    const recentUsers = await this.usersRepository.find({\n      order: { createdAt: 'DESC' },\n      take: 10,\n      relations: ['defaultRole', 'roles'],\n    });\n\n    const sanitizedRecentUsers = recentUsers.map((user) => {\n      const { password, ...userWithoutPassword } = user;\n      return userWithoutPassword as Omit;\n    });\n\n    return {\n      totalUsers,\n      activeUsers,\n      inactiveUsers,\n      usersByRole,\n      recentUsers: sanitizedRecentUsers,\n    };\n  }\n\n  async findByEmail(email: string): Promise {\n    return this.usersRepository.findOne({\n      where: { email },\n      relations: ['defaultRole', 'roles'],\n    });\n  }\n\n  async findByUsername(username: string): Promise {\n    return this.usersRepository.findOne({\n      where: { username },\n      relations: ['defaultRole', 'roles'],\n    });\n  }\n\n  async create(createUserDto: CreateUserDto) {\n    const {\n      email,\n      username,\n      password,\n      firstName,\n      middleName,\n      lastName,\n      nameExtension,\n      contactNumber,\n      name,\n      roleIds,\n      defaultRoleId,\n    } = createUserDto;\n\n    // Generate full name if not provided\n    const fullName =\n      name ||\n      `${firstName} ${middleName ? middleName + ' ' : ''}${lastName}${nameExtension ? ' ' + nameExtension : ''}`;\n\n    // Check if user already exists\n    const existingUserByEmail = await this.usersRepository.findOne({\n      where: { email },\n    });\n    if (existingUserByEmail) {\n      throw new ConflictException('Email already exists');\n    }\n\n    if (username) {\n      const existingUserByUsername = await this.usersRepository.findOne({\n        where: { username },\n      });\n      if (existingUserByUsername) {\n        throw new ConflictException('Username already exists');\n      }\n    }\n\n    try {\n      // Create user\n      const user = this.usersRepository.create({\n        email,\n        username,\n        password, // Should be hashed by the caller\n        firstName,\n        middleName,\n        lastName,\n        nameExtension,\n        contactNumber,\n        name: fullName,\n        defaultRoleId: defaultRoleId || 4, // Default to citizen\n      });\n\n      await this.usersRepository.save(user);\n\n      // Assign roles if provided\n      if (roleIds && roleIds.length > 0) {\n        await this.rolesService.assignRolesToUser(user.id, roleIds);\n      }\n\n      return user;\n    } catch (error) {\n      console.error('Error creating user:', error);\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            roles\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        roles:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\n\ninterface JwtPayload {\n  sub: number;\n  email: string;\n  roles?: string[];\n}\n\n// Strategy for validating JWT tokens in NestJS\nexport interface AuthenticatedUser {\n  id: number;\n  email: string;\n  roles: Array;\n}\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private configService: ConfigService) {\n    const secretKey = configService.get('JWT_SECRET');\n\n    if (!secretKey) {\n      throw new Error('JWT_SECRET is not defined in environment variables');\n    }\n\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: secretKey,\n    });\n  }\n\n  validate(payload: JwtPayload): AuthenticatedUser {\n    // Validation for the payload\n    if (!payload || payload.sub === undefined || isNaN(Number(payload.sub))) {\n      throw new UnauthorizedException('Invalid token payload');\n    }\n\n    const userId = Number(payload.sub);\n    const email = String(payload.email || '');\n    const roles = Array.isArray(payload.roles)\n      ? payload.roles.map((role) => ({ name: role }))\n      : [];\n\n    return {\n      id: userId,\n      email,\n      roles,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(payload: JwtPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            JwtPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         AuthenticatedUser\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\n\ninterface JwtPayload {\n  sub: number;\n  email: string;\n  roles?: string[];\n}\n\n// Strategy for validating JWT tokens in NestJS\nexport interface AuthenticatedUser {\n  id: number;\n  email: string;\n  roles: Array;\n}\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private configService: ConfigService) {\n    const secretKey = configService.get('JWT_SECRET');\n\n    if (!secretKey) {\n      throw new Error('JWT_SECRET is not defined in environment variables');\n    }\n\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: secretKey,\n    });\n  }\n\n  validate(payload: JwtPayload): AuthenticatedUser {\n    // Validation for the payload\n    if (!payload || payload.sub === undefined || isNaN(Number(payload.sub))) {\n      throw new UnauthorizedException('Invalid token payload');\n    }\n\n    const userId = Number(payload.sub);\n    const email = String(payload.email || '');\n    const roles = Array.isArray(payload.roles)\n      ? payload.roles.map((role) => ({ name: role }))\n      : [];\n\n    return {\n      id: userId,\n      email,\n      roles,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for user login\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                emailOrUsername\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        emailOrUsername\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Email or username for login', example: 'test@example.com'})@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Test User password', example: 'password123'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\n/**\n * DTO for user login\n * @class LoginDto\n */\n\nexport class LoginDto {\n  @ApiProperty({\n    description: 'Email or username for login',\n    example: 'test@example.com',\n  })\n  @IsNotEmpty()\n  emailOrUsername: string;\n\n  @ApiProperty({\n    description: 'Test User password',\n    example: 'password123',\n  })\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MinioService.html":{"url":"injectables/MinioService.html","title":"injectable - MinioService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MinioService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/minio.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                bucketName\n                            \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                minioClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteFile\n                            \n                            \n                                    Async\n                                getDownloadUrl\n                            \n                            \n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/services/minio.service.ts:8\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteFile(objectName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/minio.service.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                objectName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getDownloadUrl\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDownloadUrl(objectName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/minio.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                objectName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(file: Express.Multer.File, objectName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/minio.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                objectName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        bucketName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/services/minio.service.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(MinioService.name)\n                    \n                \n                    \n                        \n                                Defined in src/services/minio.service.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        minioClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Minio.Client\n\n                    \n                \n                    \n                        \n                                Defined in src/services/minio.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport * as Minio from 'minio';\n\n@Injectable()\nexport class MinioService {\n  private readonly logger = new Logger(MinioService.name);\n  private minioClient: Minio.Client;\n  private bucketName: string;\n\n  constructor() {\n    this.minioClient = new Minio.Client({\n      endPoint: process.env.MINIO_ENDPOINT || 'localhost',\n      port: parseInt(process.env.MINIO_PORT || '9000'),\n      useSSL: process.env.MINIO_USE_SSL === 'true',\n      accessKey: process.env.MINIO_ACCESS_KEY || 'minioadmin',\n      secretKey: process.env.MINIO_SECRET_KEY || 'minioadmin123',\n    });\n\n    this.bucketName = process.env.MINIO_BUCKET_NAME || 'bulak-smart-connect';\n  }\n\n  async uploadFile(\n    file: Express.Multer.File,\n    objectName: string,\n  ): Promise {\n    try {\n      await this.minioClient.putObject(\n        this.bucketName,\n        objectName,\n        file.buffer,\n        file.size,\n        {\n          'Content-Type': file.mimetype,\n          'Original-Name': file.originalname,\n        },\n      );\n\n      this.logger.log(`File uploaded: ${objectName}`);\n      return objectName;\n    } catch (error) {\n      this.logger.error('Upload failed:', error);\n      throw error;\n    }\n  }\n\n  async getDownloadUrl(objectName: string): Promise {\n    try {\n      return await this.minioClient.presignedGetObject(\n        this.bucketName,\n        objectName,\n        3600,\n      );\n    } catch (error) {\n      this.logger.error('Get URL failed:', error);\n      throw error;\n    }\n  }\n\n  async deleteFile(objectName: string): Promise {\n    try {\n      await this.minioClient.removeObject(this.bucketName, objectName);\n      this.logger.log(`File deleted: ${objectName}`);\n    } catch (error) {\n      this.logger.error('Delete failed:', error);\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MinioService-1.html":{"url":"injectables/MinioService-1.html","title":"injectable - MinioService-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MinioService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/document-applications/services/minio.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                bucketName\n                            \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                minioClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteFile\n                            \n                            \n                                    Async\n                                ensureBucketExists\n                            \n                            \n                                    Async\n                                getFileInfo\n                            \n                            \n                                    Async\n                                getPresignedUrl\n                            \n                            \n                                    Async\n                                listFiles\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                            \n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/document-applications/services/minio.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteFile(objectName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/document-applications/services/minio.service.ts:109\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                objectName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        ensureBucketExists\n                        \n                    \n                \n            \n            \n                \n                        \n                    ensureBucketExists()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/document-applications/services/minio.service.ts:50\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getFileInfo\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFileInfo(objectName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/document-applications/services/minio.service.ts:119\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                objectName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPresignedUrl\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPresignedUrl(objectName: string, expiry: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/document-applications/services/minio.service.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                objectName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                expiry\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    3600\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        listFiles\n                        \n                    \n                \n            \n            \n                \n                        \n                    listFiles(prefix?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/document-applications/services/minio.service.ts:128\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                prefix\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/document-applications/services/minio.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(file: Express.Multer.File, objectName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/document-applications/services/minio.service.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                objectName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        bucketName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/services/minio.service.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(MinioService.name)\n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/services/minio.service.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        minioClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Minio.Client\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/services/minio.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, OnModuleInit } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport * as Minio from 'minio';\n\n@Injectable()\nexport class MinioService implements OnModuleInit {\n  private readonly logger = new Logger(MinioService.name);\n  private minioClient: Minio.Client;\n  private bucketName: string;\n\n  constructor(private configService: ConfigService) {\n    const endpoint = this.configService.get(\n      'MINIO_ENDPOINT',\n      'localhost',\n    );\n    const port = this.configService.get('MINIO_PORT', 9000);\n    const useSSLValue = this.configService\n      .get('MINIO_USE_SSL', 'false')\n      .toLowerCase();\n    const useSSL = ['true', '1', 'yes', 'on'].includes(useSSLValue);\n    const accessKey = this.configService.get(\n      'MINIO_ACCESS_KEY',\n      'minioadmin',\n    );\n    const secretKey = this.configService.get(\n      'MINIO_SECRET_KEY',\n      'minioadmin123',\n    );\n\n    this.minioClient = new Minio.Client({\n      endPoint: endpoint,\n      port: port,\n      useSSL: useSSL,\n      accessKey: accessKey,\n      secretKey: secretKey,\n    });\n\n    this.bucketName = this.configService.get(\n      'MINIO_BUCKET_NAME',\n      'bulak-smart-connect',\n    );\n\n    this.logger.log(`MinIO configured with endpoint: ${endpoint}:${port}`);\n  }\n\n  async onModuleInit() {\n    await this.ensureBucketExists();\n  }\n\n  async ensureBucketExists(): Promise {\n    try {\n      const exists = await this.minioClient.bucketExists(this.bucketName);\n      if (!exists) {\n        await this.minioClient.makeBucket(this.bucketName, 'us-east-1');\n        this.logger.log(`Bucket ${this.bucketName} created successfully`);\n      } else {\n        this.logger.log(`Bucket ${this.bucketName} already exists`);\n      }\n    } catch (error) {\n      this.logger.error('Error ensuring bucket exists:', error);\n      throw error;\n    }\n  }\n\n  async uploadFile(\n    file: Express.Multer.File,\n    objectName: string,\n  ): Promise {\n    try {\n      const metaData = {\n        'Content-Type': file.mimetype,\n        'Original-Name': file.originalname,\n        'Upload-Date': new Date().toISOString(),\n        'File-Size': file.size.toString(),\n      };\n\n      await this.minioClient.putObject(\n        this.bucketName,\n        objectName,\n        file.buffer,\n        file.size,\n        metaData,\n      );\n\n      this.logger.log(`File uploaded successfully: ${objectName}`);\n      return objectName;\n    } catch (error) {\n      this.logger.error('Error uploading file:', error);\n      throw error;\n    }\n  }\n\n  async getPresignedUrl(\n    objectName: string,\n    expiry: number = 3600,\n  ): Promise {\n    try {\n      return await this.minioClient.presignedGetObject(\n        this.bucketName,\n        objectName,\n        expiry,\n      );\n    } catch (error) {\n      this.logger.error('Error generating presigned URL:', error);\n      throw error;\n    }\n  }\n\n  async deleteFile(objectName: string): Promise {\n    try {\n      await this.minioClient.removeObject(this.bucketName, objectName);\n      this.logger.log(`File deleted successfully: ${objectName}`);\n    } catch (error) {\n      this.logger.error('Error deleting file:', error);\n      throw error;\n    }\n  }\n\n  async getFileInfo(objectName: string): Promise {\n    try {\n      return await this.minioClient.statObject(this.bucketName, objectName);\n    } catch (error) {\n      this.logger.error('Error getting file info:', error);\n      throw error;\n    }\n  }\n\n  async listFiles(prefix?: string): Promise {\n    return new Promise((resolve, reject) => {\n      const files: any[] = [];\n      const stream = this.minioClient.listObjects(\n        this.bucketName,\n        prefix,\n        true,\n      );\n\n      stream.on('data', (obj) => files.push(obj));\n      stream.on('error', reject);\n      stream.on('end', () => resolve(files));\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/OTP.html":{"url":"entities/OTP.html","title":"entity - OTP","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  OTP\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/otp.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                expiresAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                otp\n                            \n                            \n                                    \n                                purpose\n                            \n                            \n                                    \n                                verified\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/otp.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/otp.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        expiresAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/otp.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/otp.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        otp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/otp.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        purpose\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/otp.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        verified\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/otp.entity.ts:23\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  CreateDateColumn,\n} from 'typeorm';\n\n@Entity('otps')\nexport class OTP {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  email: string;\n\n  @Column()\n  otp: string;\n\n  @Column()\n  purpose: string; // 'verification', 'password_reset', etc.\n\n  @Column({ default: false })\n  verified: boolean;\n\n  @Column({ type: 'timestamp' })\n  expiresAt: Date;\n\n  @CreateDateColumn()\n  createdAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OTPService.html":{"url":"injectables/OTPService.html","title":"injectable - OTPService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OTPService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/otp.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                cleanupExpiredOTPs\n                            \n                            \n                                    Async\n                                generateOTP\n                            \n                            \n                                    Async\n                                verifyOTP\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(otpRepository: Repository, emailService: EmailService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/services/otp.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        otpRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        emailService\n                                                  \n                                                        \n                                                                        EmailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        cleanupExpiredOTPs\n                        \n                    \n                \n            \n            \n                \n                        \n                    cleanupExpiredOTPs()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/otp.service.ts:83\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateOTP\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateOTP(email: string, purpose: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/otp.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                purpose\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'verification'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyOTP\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyOTP(email: string, otp: string, purpose: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/otp.service.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                otp\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                purpose\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'verification'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { LessThan } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport * as speakeasy from 'speakeasy';\nimport { ConfigService } from '@nestjs/config';\nimport { EmailService } from './email.service';\nimport { OTP } from '../entities/otp.entity';\n\n@Injectable()\nexport class OTPService {\n  constructor(\n    @InjectRepository(OTP)\n    private otpRepository: Repository,\n    private emailService: EmailService,\n    private configService: ConfigService,\n  ) {}\n\n  async generateOTP(email: string, purpose: string = 'verification'): Promise {\n    // Invalidate any existing OTPs for this email and purpose\n    await this.otpRepository.update(\n      { email, purpose, verified: false },\n      { verified: true } // Mark as used\n    );\n\n    // Generate new OTP\n    const otpLength = parseInt(this.configService.get('OTP_LENGTH', '6'));\n    const otp = speakeasy.totp({\n      secret: this.configService.get('OTP_SECRET') || 'default-secret-key',\n      digits: otpLength,\n      step: 300, // 5 minutes\n      encoding: 'base32'\n    });\n\n    // Calculate expiry time\n    const expiryMinutes = parseInt(this.configService.get('OTP_EXPIRY_MINUTES', '5'));\n    const expiresAt = new Date();\n    expiresAt.setMinutes(expiresAt.getMinutes() + expiryMinutes);\n\n    // Save OTP to database\n    const otpEntity = this.otpRepository.create({\n      email,\n      otp,\n      purpose,\n      expiresAt,\n      verified: false\n    });\n\n    await this.otpRepository.save(otpEntity);\n\n    // Send email\n    await this.emailService.sendOTP(email, otp, purpose);\n\n    return otp; // Only return for testing purposes\n  }\n\n  async verifyOTP(email: string, otp: string, purpose: string = 'verification'): Promise {\n    const otpEntity = await this.otpRepository.findOne({\n      where: {\n        email,\n        otp,\n        purpose,\n        verified: false\n      }\n    });\n\n    if (!otpEntity) {\n      return false;\n    }\n\n    // Check if expired\n    if (new Date() > otpEntity.expiresAt) {\n      return false;\n    }\n\n    // Mark as verified\n    otpEntity.verified = true;\n    await this.otpRepository.save(otpEntity);\n\n    return true;\n  }\n\n  async cleanupExpiredOTPs(): Promise {\n    await this.otpRepository.delete({\n      expiresAt: LessThan(new Date())\n    });\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginatedUsersResponseDto.html":{"url":"classes/PaginatedUsersResponseDto.html","title":"class - PaginatedUsersResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginatedUsersResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/paginated-users-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                limit\n                            \n                            \n                                    \n                                page\n                            \n                            \n                                    \n                                total\n                            \n                            \n                                    \n                                totalPages\n                            \n                            \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 10, description: 'Number of items per page'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/paginated-users-response.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 1, description: 'Current page number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/paginated-users-response.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        total\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 100, description: 'Total number of users'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/paginated-users-response.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        totalPages\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 10, description: 'Total number of pages'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/paginated-users-response.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserResponseDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined, description: 'Array of users'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/paginated-users-response.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { UserResponseDto } from './user-response.dto';\n\nexport class PaginatedUsersResponseDto {\n  @ApiProperty({\n    type: [UserResponseDto],\n    description: 'Array of users',\n  })\n  users: UserResponseDto[];\n\n  @ApiProperty({\n    example: 100,\n    description: 'Total number of users',\n  })\n  total: number;\n\n  @ApiProperty({\n    example: 1,\n    description: 'Current page number',\n  })\n  page: number;\n\n  @ApiProperty({\n    example: 10,\n    description: 'Number of items per page',\n  })\n  limit: number;\n\n  @ApiProperty({\n    example: 10,\n    description: 'Total number of pages',\n  })\n  totalPages: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Queue.html":{"url":"entities/Queue.html","title":"entity - Queue","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Queue\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/entities/queue.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                completedAt\n                            \n                            \n                                    \n                                counter\n                            \n                            \n                                    \n                                counterNumber\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                details\n                            \n                            \n                                    \n                                estimatedWaitTime\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                queueNumber\n                            \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        completedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'completed_at', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        counter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Counter\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, counter => counter.currentQueue, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        counterNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'counter_number', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        details\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueueDetails[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, details => details.queue)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        estimatedWaitTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'estimated_wait_time', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        queueNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'queue_number', unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueueStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: QueueStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:32\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  OneToMany,\n  CreateDateColumn,\n  OneToOne,\n} from 'typeorm';\nimport { QueueDetails } from './queue-details.entity';\nimport { Counter } from '../../counter/entities/counter.entity';\n\nexport enum QueueStatus {\n  PENDING = 'pending',\n  SERVING = 'serving',\n  COMPLETED = 'completed',\n  CANCELLED = 'cancelled',\n}\n\n@Entity('queues')\nexport class Queue {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ name: 'queue_number', unique: true })\n  queueNumber: string;\n\n  @Column({\n    type: 'enum',\n    enum: QueueStatus,\n    default: QueueStatus.PENDING,\n  })\n  status: QueueStatus;\n\n  @Column({ name: 'counter_number', nullable: true })\n  counterNumber: string;\n\n  @CreateDateColumn({ name: 'created_at' })\n  createdAt: Date;\n\n  @Column({ name: 'completed_at', nullable: true })\n  completedAt: Date;\n\n  @Column({ name: 'estimated_wait_time', nullable: true })\n  estimatedWaitTime: number;\n\n  @OneToMany(() => QueueDetails, (details) => details.queue)\n  details: QueueDetails[];\n\n  @OneToOne(() => Counter, (counter) => counter.currentQueue, {\n    nullable: true,\n  })\n  counter: Counter;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/QueueDetails.html":{"url":"entities/QueueDetails.html","title":"entity - QueueDetails","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  QueueDetails\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/entities/queue-details.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                address\n                            \n                            \n                                    \n                                appointmentType\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isGuest\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                middleInitial\n                            \n                            \n                                    \n                                phoneNumber\n                            \n                            \n                                    \n                                    \n                                queue\n                            \n                            \n                                    \n                                queueId\n                            \n                            \n                                    \n                                reasonOfVisit\n                            \n                            \n                                    \n                                    \n                                user\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        appointmentType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'appointment_type'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'first_name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isGuest\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'is_guest', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'last_name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        middleInitial\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'middle_initial', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'phone_number', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        queue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Queue\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, queue => queue.details, {onDelete: 'CASCADE'})@JoinColumn({name: 'queue_id', foreignKeyConstraintName: 'fk_queue_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        queueId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'queue_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reasonOfVisit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'reason_of_visit'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {onDelete: 'SET NULL', nullable: true})@JoinColumn({name: 'user_id', foreignKeyConstraintName: 'fk_user_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'user_id', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:24\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  JoinColumn,\n} from 'typeorm';\nimport { Queue } from './queue.entity';\nimport { User } from '../../../users/entities/user.entity';\n\n@Entity('queue_details')\nexport class QueueDetails {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ name: 'queue_id' })\n  queueId: number;\n\n  @ManyToOne(() => Queue, (queue) => queue.details, { onDelete: 'CASCADE' })\n  @JoinColumn({ name: 'queue_id', foreignKeyConstraintName: 'fk_queue_id' })\n  queue: Queue;\n\n  @Column({ name: 'user_id', nullable: true })\n  userId: number;\n\n  @ManyToOne(() => User, { onDelete: 'SET NULL', nullable: true })\n  @JoinColumn({ name: 'user_id', foreignKeyConstraintName: 'fk_user_id' })\n  user: User;\n\n  @Column({ name: 'first_name' })\n  firstName: string;\n\n  @Column({ name: 'last_name' })\n  lastName: string;\n\n  @Column({ name: 'middle_initial', nullable: true })\n  middleInitial: string;\n\n  @Column({ nullable: true })\n  address: string;\n\n  @Column({ name: 'phone_number', nullable: true })\n  phoneNumber: string;\n\n  @Column({ name: 'reason_of_visit' })\n  reasonOfVisit: string;\n\n  @Column({ name: 'appointment_type' })\n  appointmentType: string;\n\n  @Column({ name: 'is_guest', default: false })\n  isGuest: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QueueGateway.html":{"url":"classes/QueueGateway.html","title":"class - QueueGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QueueGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/queue.gateway.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        OnGatewayConnection\n                        OnGatewayDisconnect\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleConnection\n                            \n                            \n                                handleDisconnect\n                            \n                            \n                                    \n                                    Async\n                                handleGetQueuePosition\n                            \n                            \n                                    \n                                    Async\n                                handleJoinCounter\n                            \n                            \n                                    \n                                    Async\n                                handleJoinQueue\n                            \n                            \n                                    \n                                    Async\n                                handleJoinQueueUpdates\n                            \n                            \n                                notifyCounterUpdate\n                            \n                            \n                                notifyQueueUpdate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(queueService: QueueService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/queue/queue.gateway.ts:26\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        queueService\n                                                  \n                                                        \n                                                                        QueueService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(QueueGateway.name)\n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/queue.gateway.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/queue.gateway.ts:26\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handleConnection\n                        \n                    \n                \n            \n            \n                \nhandleConnection(client: Socket)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleDisconnect\n                        \n                    \n                \n            \n            \n                \nhandleDisconnect(client: Socket)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleGetQueuePosition\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleGetQueuePosition(client: Socket, queueId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('getQueuePosition')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleJoinCounter\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleJoinCounter(client: Socket, counterId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('joinCounter')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                counterId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleJoinQueue\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleJoinQueue(client: Socket, queueId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('joinQueue')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleJoinQueueUpdates\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleJoinQueueUpdates(client: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('join_queue_updates')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notifyCounterUpdate\n                        \n                    \n                \n            \n            \n                \nnotifyCounterUpdate(counterId: number, data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                counterId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notifyQueueUpdate\n                        \n                    \n                \n            \n            \n                \nnotifyQueueUpdate(queueId: number, data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:70\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  WebSocketGateway,\n  WebSocketServer,\n  SubscribeMessage,\n  OnGatewayConnection,\n  OnGatewayDisconnect,\n} from '@nestjs/websockets';\nimport { Server, Socket } from 'socket.io';\nimport { QueueService } from './queue.service';\nimport { Logger, Inject, forwardRef } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\n@WebSocketGateway({\n  cors: {\n    origin: process.env.WS_CORS_ORIGIN || 'http://localhost:5173',\n    methods: ['GET', 'POST'],\n    credentials: true,\n    allowedHeaders: ['Content-Type', 'Authorization'],\n  },\n  namespace: 'socket.io', // Add this to match client expectation\n})\nexport class QueueGateway implements OnGatewayConnection, OnGatewayDisconnect {\n  private readonly logger = new Logger(QueueGateway.name);\n\n  @WebSocketServer()\n  server: Server;\n\n  constructor(\n    @Inject(forwardRef(() => QueueService))\n    private readonly queueService: QueueService,\n    private readonly configService: ConfigService,\n  ) {}\n\n  handleConnection(client: Socket) {\n    this.logger.log(`Client connected: ${client.id}`);\n    this.logger.log(`CORS origin configured: ${this.configService.get('WS_CORS_ORIGIN')}`);\n  }\n\n  handleDisconnect(client: Socket) {\n    this.logger.log(`Client disconnected: ${client.id}`);\n  }\n\n  @SubscribeMessage('joinQueue')\n  async handleJoinQueue(client: Socket, queueId: number) {\n    await client.join(`queue_${queueId}`);\n    const queueData = await this.queueService.getQueueDetails(queueId);\n    return queueData;\n  }\n\n  @SubscribeMessage('getQueuePosition')\n  async handleGetQueuePosition(client: Socket, queueId: number) {\n    const position = await this.queueService.getQueuePosition(queueId);\n    return { position };\n  }\n\n  @SubscribeMessage('joinCounter')\n  async handleJoinCounter(client: Socket, counterId: number) {\n    await client.join(`counter_${counterId}`);\n    return { success: true };\n  }\n\n  @SubscribeMessage('join_queue_updates')\n  async handleJoinQueueUpdates(client: Socket) {\n    this.logger.log(`Socket ${client.id} joined queue updates`);\n    await client.join('queue_updates');\n    return { event: 'joined', data: 'Successfully joined queue updates' };\n  }\n\n  // Send updates to all clients or specific rooms\n  notifyQueueUpdate(queueId: number, data: any) {\n    void this.server.to(`queue_${queueId}`).emit('queueUpdate', data);\n    void this.server.emit('queueListUpdate'); // Global queue update\n  }\n\n  notifyCounterUpdate(counterId: number, data: any) {\n    void this.server.to(`counter_${counterId}`).emit('counterUpdate', data);\n    void this.server.emit('counterListUpdate'); // Global counter update\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/QueueModule.html":{"url":"modules/QueueModule.html","title":"module - QueueModule","body":"\n                   \n\n\n\n\n    Modules\n    QueueModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_QueueModule\n\n\n\ncluster_QueueModule_providers\n\n\n\ncluster_QueueModule_exports\n\n\n\n\nQueueGateway \n\nQueueGateway \n\n\n\nQueueSchedulerService \n\nQueueSchedulerService \n\n\n\nQueueService \n\nQueueService \n\n\n\nQueueModule\n\nQueueModule\n\nQueueGateway  -->\n\nQueueModule->QueueGateway \n\n\n\nQueueSchedulerService  -->\n\nQueueModule->QueueSchedulerService \n\n\n\nQueueService  -->\n\nQueueModule->QueueService \n\n\n\n\n\nQueueSchedulerService\n\nQueueSchedulerService\n\nQueueModule -->\n\nQueueSchedulerService->QueueModule\n\n\n\n\n\nQueueService\n\nQueueService\n\nQueueModule -->\n\nQueueService->QueueModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/queue/queue.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            QueueSchedulerService\n                        \n                        \n                            QueueService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            QueueController\n                        \n                        \n                            QueuesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            QueueGateway\n                        \n                        \n                            QueueSchedulerService\n                        \n                        \n                            QueueService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {\n  Module,\n  //forwardRef, // Uncomment if you need to use forwardRef\n} from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ScheduleModule } from '@nestjs/schedule';\nimport { QueueService } from './queue.service';\nimport { QueueController } from './queue.controller';\nimport { QueuesController } from './queues.controller';\nimport { QueueGateway } from './queue.gateway';\nimport { QueueSchedulerService } from './queue-scheduler.service';\nimport { Queue } from './entities/queue.entity';\nimport { QueueDetails } from './entities/queue-details.entity';\nimport { Counter } from '../counter/entities/counter.entity';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Queue, QueueDetails, Counter]),\n    ScheduleModule.forRoot(),\n  ],\n  controllers: [QueueController, QueuesController],\n  providers: [QueueService, QueueGateway, QueueSchedulerService],\n  exports: [QueueService, QueueGateway, QueueSchedulerService],\n})\nexport class QueueModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QueueSchedulerService.html":{"url":"injectables/QueueSchedulerService.html","title":"injectable - QueueSchedulerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  QueueSchedulerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/queue-scheduler.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                isResetInProgress\n                            \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getTodayPendingCount\n                            \n                            \n                                    \n                                    Async\n                                handleDailyQueueReset\n                            \n                            \n                                    Private\n                                    Async\n                                logDailyStatistics\n                            \n                            \n                                    Async\n                                manualDailyReset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(queueRepository: Repository, queueGateway: QueueGateway)\n                    \n                \n                        \n                            \n                                Defined in src/modules/queue/queue-scheduler.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        queueRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queueGateway\n                                                  \n                                                        \n                                                                        QueueGateway\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getTodayPendingCount\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTodayPendingCount()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue-scheduler.service.ts:152\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleDailyQueueReset\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleDailyQueueReset()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron('59 23 * * *', {name: 'daily-queue-reset', timeZone: 'Asia/Manila'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue-scheduler.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        logDailyStatistics\n                        \n                    \n                \n            \n            \n                \n                        \n                    logDailyStatistics(startOfDay: Date, endOfDay: Date)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue-scheduler.service.ts:113\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                startOfDay\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                endOfDay\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        manualDailyReset\n                        \n                    \n                \n            \n            \n                \n                        \n                    manualDailyReset()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue-scheduler.service.ts:146\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isResetInProgress\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/queue-scheduler.service.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(QueueSchedulerService.name)\n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/queue-scheduler.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { Cron } from '@nestjs/schedule';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, Between } from 'typeorm';\nimport { Queue, QueueStatus } from './entities/queue.entity';\nimport { QueueGateway } from './queue.gateway';\n\n@Injectable()\nexport class QueueSchedulerService {\n  private readonly logger = new Logger(QueueSchedulerService.name);\n  private isResetInProgress = false; \n\n  constructor(\n    @InjectRepository(Queue)\n    private queueRepository: Repository,\n    private queueGateway: QueueGateway,\n  ) {}\n\n  // Run every day at 11:59 PM (23:59)\n  @Cron('59 23 * * *', {\n    name: 'daily-queue-reset',\n    timeZone: 'Asia/Manila',\n  })\n  async handleDailyQueueReset() {\n    // ✅ FIXED: Prevent concurrent execution\n    if (this.isResetInProgress) {\n      this.logger.warn('🚫 Daily reset already in progress, skipping...');\n      return;\n    }\n\n    this.isResetInProgress = true;\n    this.logger.log('🔄 Starting daily queue reset process...');\n\n    try {\n      // ✅ FIXED: Better timezone handling\n      const today = new Date();\n      const startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n      const endOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 23, 59, 59, 999);\n\n      this.logger.log(`🗓️ Searching for queues between: ${startOfDay.toISOString()} and ${endOfDay.toISOString()}`);\n\n      // Get all pending queues created today\n      const pendingQueues = await this.queueRepository.find({\n        where: {\n          status: QueueStatus.PENDING,\n          createdAt: Between(startOfDay, endOfDay),\n        },\n      });\n\n      this.logger.log(`📋 Found ${pendingQueues.length} pending queues to cancel`);\n\n      if (pendingQueues.length > 0) {\n        // Mark all pending queues as cancelled\n        const cancelledQueues = await this.queueRepository.save(\n          pendingQueues.map(queue => ({\n            ...queue,\n            status: QueueStatus.CANCELLED,\n            completedAt: new Date(),\n          }))\n        );\n\n        this.logger.log(`❌ Cancelled ${cancelledQueues.length} pending queues`);\n\n        // Notify clients about cancellations\n        for (const queue of cancelledQueues) {\n          this.queueGateway.notifyQueueUpdate(queue.id, {\n            action: 'cancelled',\n            reason: 'End of day auto-cancellation',\n            queue: queue,\n          });\n        }\n\n        // Send general notification\n        this.queueGateway.server.emit('dailyQueueReset', {\n          cancelledCount: cancelledQueues.length,\n          timestamp: new Date(),\n          message: 'Daily queue reset completed. All pending queues have been cancelled.',\n        });\n      }\n\n      // Also cancel any serving queues\n      const servingQueues = await this.queueRepository.find({\n        where: {\n          status: QueueStatus.SERVING,\n          createdAt: Between(startOfDay, endOfDay),\n        },\n      });\n\n      if (servingQueues.length > 0) {\n        const cancelledServingQueues = await this.queueRepository.save(\n          servingQueues.map(queue => ({\n            ...queue,\n            status: QueueStatus.CANCELLED,\n            completedAt: new Date(),\n          }))\n        );\n\n        this.logger.log(`❌ Cancelled ${cancelledServingQueues.length} serving queues`);\n      }\n\n      this.logger.log('✅ Daily queue reset completed successfully');\n      await this.logDailyStatistics(startOfDay, endOfDay);\n\n    } catch (error) {\n      this.logger.error('❌ Error during daily queue reset:', error);\n      throw error; // ✅ FIXED: Propagate error for proper handling\n    } finally {\n      this.isResetInProgress = false; // ✅ FIXED: Always reset flag\n    }\n  }\n\n  // Optional: Log daily statistics\n  private async logDailyStatistics(startOfDay: Date, endOfDay: Date) {\n    try {\n      const [completed, cancelled, total] = await Promise.all([\n        this.queueRepository.count({\n          where: {\n            status: QueueStatus.COMPLETED,\n            createdAt: Between(startOfDay, endOfDay),\n          },\n        }),\n        this.queueRepository.count({\n          where: {\n            status: QueueStatus.CANCELLED,\n            createdAt: Between(startOfDay, endOfDay),\n          },\n        }),\n        this.queueRepository.count({\n          where: {\n            createdAt: Between(startOfDay, endOfDay),\n          },\n        }),\n      ]);\n\n      this.logger.log(`📊 Daily Statistics for ${startOfDay.toDateString()}:`);\n      this.logger.log(`   Total Queues: ${total}`);\n      this.logger.log(`   Completed: ${completed}`);\n      this.logger.log(`   Cancelled: ${cancelled}`);\n      this.logger.log(`   Completion Rate: ${total > 0 ? ((completed / total) * 100).toFixed(1) : 0}%`);\n    } catch (error) {\n      this.logger.error('Error logging daily statistics:', error);\n    }\n  }\n\n  // Manual trigger for testing or admin use\n  async manualDailyReset() {\n    this.logger.log('🔄 Manual daily queue reset triggered');\n    return await this.handleDailyQueueReset(); // ✅ FIXED: Return result\n  }\n\n  // Get pending queues count for today\n  async getTodayPendingCount(): Promise {\n    const today = new Date();\n    const startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n    const endOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 23, 59, 59, 999);\n\n    return await this.queueRepository.count({\n      where: {\n        status: QueueStatus.PENDING,\n        createdAt: Between(startOfDay, endOfDay),\n      },\n    });\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QueueService.html":{"url":"injectables/QueueService.html","title":"injectable - QueueService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  QueueService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/queue.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addCounter\n                            \n                            \n                                    Async\n                                callNext\n                            \n                            \n                                    Async\n                                checkExists\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByQueueNumber\n                            \n                            \n                                    Async\n                                findByStatus\n                            \n                            \n                                    Async\n                                findByStatusWithDetails\n                            \n                            \n                                    Async\n                                findByUserIdWithDetails\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getCounters\n                            \n                            \n                                    Async\n                                getDetailsForMultipleQueues\n                            \n                            \n                                    Async\n                                getQueueDetails\n                            \n                            \n                                    Async\n                                getQueuePosition\n                            \n                            \n                                    Async\n                                getStats\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(queueRepository: Repository, queueDetailsRepository: Repository, counterRepository: Repository, queueGateway: QueueGateway)\n                    \n                \n                        \n                            \n                                Defined in src/modules/queue/queue.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        queueRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queueDetailsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        counterRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queueGateway\n                                                  \n                                                        \n                                                                        QueueGateway\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addCounter\n                        \n                    \n                \n            \n            \n                \n                        \n                    addCounter(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:475\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        callNext\n                        \n                    \n                \n            \n            \n                \n                        \n                    callNext(counterId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:358\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                counterId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        checkExists\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkExists(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:488\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createQueueDto: CreateQueueDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createQueueDto\n                                            \n                                                            CreateQueueDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:123\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByQueueNumber\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByQueueNumber(queueNumber: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:148\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueNumber\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByStatus(status: QueueStatus)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:129\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            QueueStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByStatusWithDetails\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByStatusWithDetails(status: QueueStatus)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:304\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            QueueStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByUserIdWithDetails\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByUserIdWithDetails(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:495\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:136\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCounters\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCounters()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:481\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getDetailsForMultipleQueues\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDetailsForMultipleQueues(queueIds: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:269\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueIds\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getQueueDetails\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQueueDetails(queueId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:160\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getQueuePosition\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQueuePosition(queueId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:218\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:428\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateQueueDto: UpdateQueueDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:176\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateQueueDto\n                                            \n                                                            UpdateQueueDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  Inject,\n  forwardRef,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, LessThanOrEqual, LessThan, In, Between } from 'typeorm';\nimport { Queue, QueueStatus } from './entities/queue.entity';\nimport { QueueDetails } from './entities/queue-details.entity';\nimport {\n  Counter,\n  //CounterStatus, //Uncomment if you need to use CounterStatus\n} from '../counter/entities/counter.entity';\nimport { CreateQueueDto } from './dto/create-queue.dto';\nimport { UpdateQueueDto } from './dto/update-queue.dto';\nimport { QueueGateway } from './queue.gateway';\n\n@Injectable()\nexport class QueueService {\n  constructor(\n    @InjectRepository(Queue)\n    private queueRepository: Repository,\n    @InjectRepository(QueueDetails)\n    private queueDetailsRepository: Repository,\n    @InjectRepository(Counter)\n    private counterRepository: Repository,\n    @Inject(forwardRef(() => QueueGateway))\n    private queueGateway: QueueGateway,\n  ) {}\n\n  async create(createQueueDto: CreateQueueDto) {\n    // Generate a queue number based on date and sequence\n    const today = new Date();\n    const dateStr = `${today.getFullYear()}${String(today.getMonth() + 1).padStart(2, '0')}${String(today.getDate()).padStart(2, '0')}`;\n\n    // Get the start and end of today for accurate daily counting\n    const todayStart = new Date(today);\n    todayStart.setHours(0, 0, 0, 0);\n    \n    const todayEnd = new Date(today);\n    todayEnd.setHours(23, 59, 59, 999);\n\n    // Count ONLY queues created TODAY (this will reset to 0 each day)\n    const todayCount = await this.queueRepository.count({\n      where: {\n        createdAt: Between(todayStart, todayEnd),\n      },\n    });\n\n    // Format the queue number: YYYYMMDD-XXX (using 3 digits for daily sequence)\n    // This keeps your existing backend format but ensures daily reset\n    const queueNumber = `${dateStr}-${String(todayCount + 1).padStart(3, '0')}`;\n\n    console.log(`Creating queue number: ${queueNumber} for today. Daily count: ${todayCount + 1}`);\n\n    // Create and save the queue\n    const queue = this.queueRepository.create({\n      queueNumber,\n      status: QueueStatus.PENDING,\n      estimatedWaitTime: 15 * (todayCount + 1), // Simple estimation: 15 minutes per person\n    });\n\n    const savedQueue = await this.queueRepository.save(queue);\n\n    // Simplify the user ID handling\n    const userId =\n      typeof createQueueDto.userId === 'number'\n        ? createQueueDto.userId\n        : typeof createQueueDto.userId === 'string' &&\n            createQueueDto.userId !== 'guest'\n          ? Number(createQueueDto.userId)\n          : undefined;\n\n    // isGuest is already a boolean from the DTO validation\n    const isGuest = createQueueDto.isGuest ?? !userId;\n\n    // Log for debugging\n    console.log('=== QUEUE SERVICE CREATE DEBUG ===');\n    console.log('Creating queue details with:', {\n      providedUserId: createQueueDto.userId,\n      parsedUserId: userId,\n      providedIsGuest: createQueueDto.isGuest,\n      finalIsGuest: isGuest,\n    });\n\n    // Create queue details\n    const queueDetails = this.queueDetailsRepository.create({\n      queueId: savedQueue.id,\n      userId: userId,\n      firstName: createQueueDto.firstName,\n      lastName: createQueueDto.lastName,\n      middleInitial: createQueueDto.middleInitial,\n      address: createQueueDto.address,\n      phoneNumber: createQueueDto.phoneNumber,\n      reasonOfVisit: createQueueDto.reasonOfVisit,\n      appointmentType: createQueueDto.appointmentType,\n      isGuest: isGuest,\n    });\n\n    // Set the queue relation\n    queueDetails.queue = savedQueue;\n\n    const savedDetails = await this.queueDetailsRepository.save(queueDetails);\n\n    console.log('Queue details saved with isGuest:', savedDetails.isGuest);\n\n    // Get queue position\n    const position = await this.getQueuePosition(savedQueue.id);\n\n    const result = { queue: savedQueue, details: savedDetails, position };\n\n    // Notify all clients that a new queue has been created\n    this.queueGateway.server.emit('queueListUpdate', {\n      action: 'created',\n      queueId: savedQueue.id,\n    });\n\n    return result;\n  }\n\n  async findAll() {\n    return await this.queueRepository.find({\n      order: { createdAt: 'ASC' },\n    });\n  }\n\n  async findByStatus(status: QueueStatus) {\n    return await this.queueRepository.find({\n      where: { status },\n      order: { createdAt: 'ASC' },\n    });\n  }\n\n  async findOne(id: number) {\n    const queue = await this.queueRepository.findOne({\n      where: { id },\n    });\n\n    if (!queue) {\n      throw new NotFoundException(`Queue #${id} not found`);\n    }\n\n    return queue;\n  }\n\n  async findByQueueNumber(queueNumber: string) {\n    const queue = await this.queueRepository.findOne({\n      where: { queueNumber },\n    });\n\n    if (!queue) {\n      throw new NotFoundException(`Queue #${queueNumber} not found`);\n    }\n\n    return queue;\n  }\n\n  async getQueueDetails(queueId: number) {\n    const queue = await this.findOne(queueId);\n\n    const details = await this.queueDetailsRepository.findOne({\n      where: { queueId },\n      relations: ['user'],\n    });\n\n    if (!details) {\n      throw new NotFoundException(`Details for queue #${queueId} not found`);\n    }\n\n    const position = await this.getQueuePosition(queueId);\n\n    return { queue, details, position };\n  }\n  async update(id: number, updateQueueDto: UpdateQueueDto) {\n    console.log(`Updating queue ${id} with:`, updateQueueDto);\n\n    try {\n      // Find the queue\n      const queue = await this.findOne(id);\n      console.log('Found queue:', queue);\n\n      if (updateQueueDto.status) {\n        // Log the status change\n        console.log(\n          `Changing status from ${queue.status} to ${updateQueueDto.status}`,\n        );\n        queue.status = updateQueueDto.status;\n\n        // If completed, set completion time\n        if (updateQueueDto.status === QueueStatus.COMPLETED) {\n          queue.completedAt = new Date();\n        }\n      }\n\n      if (updateQueueDto.counterNumber) {\n        queue.counterNumber = updateQueueDto.counterNumber;\n      }\n\n      // Save the updated queue\n      const updatedQueue = await this.queueRepository.save(queue);\n      console.log('Queue updated successfully:', updatedQueue);\n\n      // Notify clients about the queue update\n      this.queueGateway.notifyQueueUpdate(id, {\n        action: 'updated',\n        queue: updatedQueue,\n      });\n\n      return updatedQueue;\n    } catch (error) {\n      console.error(`Error updating queue ${id}:`, error);\n      throw error;\n    }\n  }\n\n  async getQueuePosition(queueId: number) {\n    console.log(`Getting position for queue ID: ${queueId}`);\n\n    const queue = await this.findOne(queueId);\n    console.log(`Found queue:`, queue);\n\n    // If the queue doesn't exist, return position 0\n    if (!queue) {\n      console.log('Queue not found');\n      return { position: 0 };\n    }\n\n    // If the queue is not pending, return special position values\n    if (queue.status === QueueStatus.SERVING) {\n      console.log('Queue is currently being served');\n      return { position: 0, status: 'serving' };\n    }\n\n    if (queue.status === QueueStatus.COMPLETED) {\n      console.log('Queue is completed');\n      return { position: 0, status: 'completed' };\n    }\n\n    if (queue.status !== QueueStatus.PENDING) {\n      console.log(`Queue status is ${queue.status}, not pending`);\n      return { position: 0, status: queue.status };\n    }\n\n    // Count serving queues (they are ahead of all pending queues)\n    const servingCount = await this.queueRepository.count({\n      where: {\n        status: QueueStatus.SERVING,\n      },\n    });\n    console.log(`Serving queues count: ${servingCount}`);\n\n    // Count how many pending queues are ahead of this one (created earlier)\n    const pendingAheadCount = await this.queueRepository.count({\n      where: {\n        status: QueueStatus.PENDING,\n        createdAt: LessThan(queue.createdAt), // Queues created before this one\n      },\n    });\n    console.log(`Pending queues ahead: ${pendingAheadCount}`);\n\n    // Total position = serving queues + pending queues ahead + 1\n    const position = servingCount + pendingAheadCount + 1;\n    console.log(`Calculated position: ${position}`);\n\n    return { position, status: 'pending' };\n  }\n  async getDetailsForMultipleQueues(queueIds: number[]) {\n    console.log('Getting details for queue IDs:', queueIds);\n\n    if (!queueIds || queueIds.length === 0) {\n      return {};\n    }\n\n    const detailsMap = {};\n\n    try {\n      // Fetch all queue details in a single query for better performance\n      const allDetails = await this.queueDetailsRepository.find({\n        where: {\n          queueId: In(queueIds),\n        },\n        relations: ['user'],\n      });\n\n      console.log(\n        `Found ${allDetails.length} details for ${queueIds.length} queues`,\n      );\n\n      // Organize by queueId for easy lookup\n      allDetails.forEach((detail) => {\n        detailsMap[detail.queueId] = detail;\n      });\n\n      return detailsMap;\n    } catch (error: unknown) {\n      console.error('Error fetching details for multiple queues:', error);\n      // Return empty details rather than failing\n      return {};\n    }\n  }\n\n  async findByStatusWithDetails(status: QueueStatus) {\n    console.log(`Finding queues with status: ${status} and their details`);\n\n    try {\n      // First get all queues with this status\n      const queues = await this.queueRepository.find({\n        where: { status },\n        order: { createdAt: 'ASC' },\n      });\n\n      console.log(`Found ${queues.length} queues with status ${status}`);\n\n      if (queues.length === 0) {\n        return [];\n      }\n\n      // Get all queue IDs\n      const queueIds = queues.map((queue) => queue.id);\n\n      // Fetch details for all these queues\n      const detailsMap = await this.getDetailsForMultipleQueues(queueIds);\n\n      // Combine queue and details data\n      const result = queues.map((queue) => {\n        return {\n          ...queue,\n          details: detailsMap[queue.id] || null,\n        };\n      });\n\n      console.log(`Returning ${result.length} queues with details`);\n      return result;\n    } catch (error: unknown) {\n      // Handle error message extraction without triggering ESLint\n      let errorMessage: string;\n\n      if (error instanceof Error) {\n        errorMessage = error.message;\n      } else {\n        errorMessage = String(error);\n      }\n\n      console.error('Error in findByStatusWithDetails:', errorMessage);\n\n      if (error instanceof Error) {\n        throw new Error(`Failed to get queue details: ${error.message}`);\n      }\n      if (typeof error === 'string') {\n        throw new Error(`Failed to get queue details: ${error}`);\n      }\n      throw new Error('Failed to get queue details: An unknown error occurred');\n    }\n  }\n\n  async callNext(counterId: number) {\n    const counter = await this.counterRepository.findOne({\n      where: { id: counterId },\n      relations: ['currentQueue'],\n    });\n\n    if (!counter) {\n      throw new NotFoundException(`Counter #${counterId} not found`);\n    }\n\n    // Mark current queue as completed if exists\n    if (counter.currentQueue) {\n      counter.currentQueue.status = QueueStatus.COMPLETED;\n      counter.currentQueue.completedAt = new Date();\n      await this.queueRepository.save(counter.currentQueue);\n    }\n\n    // Find the next pending queue\n    const nextQueue = await this.queueRepository.findOne({\n      where: { status: QueueStatus.PENDING },\n      order: { createdAt: 'ASC' },\n    });\n\n    if (!nextQueue) {\n      counter.currentQueueId = null;\n      counter.currentQueue = null;\n      await this.counterRepository.save(counter);\n      return { counter, message: 'No more queues waiting' };\n    }\n\n    // Update the next queue\n    nextQueue.status = QueueStatus.SERVING;\n    nextQueue.counterNumber = counter.name;\n    await this.queueRepository.save(nextQueue);\n\n    // Update counter\n    counter.currentQueueId = nextQueue.id;\n    counter.currentQueue = nextQueue;\n    await this.counterRepository.save(counter);\n\n    // Get associated details\n    const details = await this.queueDetailsRepository.findOne({\n      where: { queueId: nextQueue.id },\n    });\n\n    const result = {\n      counter,\n      queue: nextQueue,\n      details,\n      message: 'Next queue called successfully',\n    };\n\n    if (nextQueue) {\n      // Notify the specific queue room that it's their turn\n      this.queueGateway.notifyQueueUpdate(nextQueue.id, {\n        action: 'called',\n        counterName: counter.name,\n        counterId: counter.id,\n      });\n    }\n\n    // Notify counter clients\n    this.queueGateway.notifyCounterUpdate(counterId, {\n      action: 'nextCalled',\n      ...result,\n    });\n\n    return result;\n  }\n\n  async getStats() {\n    const [\n      pendingCount,\n      servingCount,\n      completedCount,\n      cancelledCount,\n      totalCount,\n    ] = await Promise.all([\n      this.queueRepository.count({ where: { status: QueueStatus.PENDING } }),\n      this.queueRepository.count({ where: { status: QueueStatus.SERVING } }),\n      this.queueRepository.count({ where: { status: QueueStatus.COMPLETED } }),\n      this.queueRepository.count({ where: { status: QueueStatus.CANCELLED } }),\n      this.queueRepository.count(),\n    ]);\n\n    // Calculate average wait time\n    const completedQueues = await this.queueRepository.find({\n      where: {\n        status: QueueStatus.COMPLETED,\n        completedAt: LessThanOrEqual(new Date()),\n      },\n      select: ['createdAt', 'completedAt'],\n    });\n\n    let averageWaitTime = 0;\n    if (completedQueues.length > 0) {\n      const totalWaitTimeMs = completedQueues.reduce((total, queue) => {\n        return (\n          total + (queue.completedAt.getTime() - queue.createdAt.getTime())\n        );\n      }, 0);\n      averageWaitTime = Math.floor(\n        totalWaitTimeMs / completedQueues.length / 60000,\n      ); // Convert to minutes\n    }\n\n    return {\n      pending: pendingCount,\n      serving: servingCount,\n      completed: completedCount,\n      cancelled: cancelledCount,\n      total: totalCount,\n      averageWaitTime,\n    };\n  }\n\n  // Add a counter\n  async addCounter(name: string) {\n    const counter = this.counterRepository.create({ name });\n    return await this.counterRepository.save(counter);\n  }\n\n  // Get all counters\n  async getCounters() {\n    return await this.counterRepository.find({\n      relations: ['currentQueue'],\n    });\n  }\n\n  // Check if queue exists\n  async checkExists(id: number): Promise {\n    const queue = await this.queueRepository.findOne({\n      where: { id },\n    });\n    return !!queue;\n  }\n\n  async findByUserIdWithDetails(userId: string) {\n    // Convert string userId to number since the database expects a number\n    const userIdNumber = parseInt(userId, 10);\n\n    if (isNaN(userIdNumber)) {\n      console.error('Invalid userId provided:', userId);\n      return [];\n    }\n\n    // First, let's find the user's queue details that contain the userId\n    const userDetails = await this.queueDetailsRepository.find({\n      where: {\n        userId: userIdNumber,\n      },\n      relations: ['queue'],\n    });\n\n    // Extract queue IDs from the details\n    const queueIds = userDetails.map((detail) => detail.queue.id);\n\n    if (queueIds.length === 0) {\n      return [];\n    }\n\n    // Find ALL queues (including completed ones) but filter them in the frontend\n    // Change this to include completed queues temporarily so we can clear them\n    return await this.queueRepository.find({\n      where: {\n        id: In(queueIds),\n        // Remove status filter to get all queues including completed ones\n      },\n      relations: ['details'],\n      order: { createdAt: 'ASC' },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/QueuesController.html":{"url":"controllers/QueuesController.html","title":"controller - QueuesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  QueuesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/queues.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                queues\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                getQueueById\n                            \n                            \n                                    \n                                    Async\n                                getUserQueues\n                            \n                            \n                                    \n                                    Async\n                                getWalkInQueues\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getQueueById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQueueById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queues.controller.ts:109\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getUserQueues\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserQueues(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('user/:userId')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queues.controller.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getWalkInQueues\n                        \n                    \n                \n            \n            \n                \n                        \n                    getWalkInQueues()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('walk-in')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queues.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param } from '@nestjs/common';\nimport { QueueService } from './queue.service';\nimport { QueueStatus } from './entities/queue.entity';\n\ninterface QueueDetails {\n  firstName?: string;\n  lastName?: string;\n  middleInitial?: string;\n  reasonOfVisit?: string;\n  address?: string;\n  phoneNumber?: string;\n}\n\n@Controller('queues')\nexport class QueuesController {\n  constructor(private readonly queueService: QueueService) {}\n  // This endpoint is for supporting the legacy API path that the frontend is using\n  @Get('walk-in')\n  async getWalkInQueues() {\n    console.log('GET /queues/walk-in endpoint called');\n    try {\n      // Get both pending and serving queues with details using the service methods\n      const [pendingQueuesWithDetails, servingQueuesWithDetails] =\n        await Promise.all([\n          this.queueService.findByStatusWithDetails(QueueStatus.PENDING),\n          this.queueService.findByStatusWithDetails(QueueStatus.SERVING),\n        ]);\n\n      console.log('Found pending queues:', pendingQueuesWithDetails.length);\n      console.log('Found serving queues:', servingQueuesWithDetails.length);\n\n      // Combine all queues\n      const allQueues = [\n        ...pendingQueuesWithDetails,\n        ...servingQueuesWithDetails,\n      ];\n\n      // Extract details from the nested structure and flatten them for the frontend\n      const result = allQueues.map((queue) => {\n        // For debugging\n        console.log('Processing queue:', queue.id, 'status:', queue.status);\n\n        // Handle potential null/undefined details\n        const details: QueueDetails | null = Array.isArray(queue.details)\n          ? (queue.details[0] as QueueDetails)\n          : (queue.details as QueueDetails);\n\n        return {\n          id: queue.id,\n          queueNumber: queue.queueNumber,\n          status: queue.status,\n          counterNumber: queue.counterNumber,\n          createdAt: queue.createdAt,\n          completedAt: queue.completedAt,\n          estimatedWaitTime: queue.estimatedWaitTime,\n          firstName: details?.firstName || null,\n          lastName: details?.lastName || null,\n          middleInitial: details?.middleInitial || null,\n          reasonOfVisit: details?.reasonOfVisit || null,\n          address: details?.address || null,\n          phoneNumber: details?.phoneNumber || null,\n        };\n      });\n\n      console.log(`Returning ${result.length} walk-in queues`);\n      return result;\n    } catch (err: unknown) {\n      console.error('Error fetching walk-in queues:', err);\n      throw err;\n    }\n  }\n\n  @Get('user/:userId')\n  async getUserQueues(@Param('userId') userId: string) {\n    console.log('GET /queues/user/' + userId + ' endpoint called');\n    try {\n      // Find queues for the specific user that are not completed\n      const userQueues =\n        await this.queueService.findByUserIdWithDetails(userId);\n\n      console.log('Found user queues:', userQueues.length);\n\n      const result = userQueues.map((queue) => {\n        const details = Array.isArray(queue.details)\n          ? queue.details[0]\n          : queue.details;\n\n        return {\n          id: queue.id,\n          queueNumber: queue.queueNumber,\n          status: queue.status,\n          counterNumber: queue.counterNumber,\n          createdAt: queue.createdAt,\n          completedAt: queue.completedAt,\n          firstName: details?.firstName || null,\n          lastName: details?.lastName || null,\n          reasonOfVisit: details?.reasonOfVisit || null,\n        };\n      });\n\n      return result;\n    } catch (err) {\n      console.error('Error fetching user queues:', err);\n      throw err;\n    }\n  }\n\n  @Get(':id')\n  async getQueueById(@Param('id') id: string) {\n    console.log('GET /queues/' + id + ' endpoint called');\n    try {\n      const queueId = parseInt(id, 10);\n      if (isNaN(queueId)) {\n        throw new Error('Invalid queue ID');\n      }\n\n      const queue = await this.queueService.findOne(queueId);\n\n      if (!queue) {\n        throw new Error('Queue not found');\n      }\n\n      const details = Array.isArray(queue.details)\n        ? queue.details[0]\n        : queue.details;\n\n      return {\n        id: queue.id,\n        queueNumber: queue.queueNumber,\n        status: queue.status,\n        counterNumber: queue.counterNumber,\n        createdAt: queue.createdAt,\n        completedAt: queue.completedAt,\n        firstName: details?.firstName || null,\n        lastName: details?.lastName || null,\n        reasonOfVisit: details?.reasonOfVisit || null,\n      };\n    } catch (err) {\n      console.error('Error fetching queue:', err);\n      throw err;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/register.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for user registration\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                contactNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                middleName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                nameExtension\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                otp\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        contactNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Contact number', example: '09123456789'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User email address', example: 'test@example.com'})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User first name', example: 'John'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User last name', example: 'Doe'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User middle name (optional)', example: 'Robert'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Full name (auto-generated)', example: 'John Robert Doe'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        nameExtension\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Name extension (e.g., Jr., III)', example: 'Jr.'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        otp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'OTP code for email verification (optional)', example: '123456'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:95\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User password (min 8 characters)', example: 'password123', minLength: 8})@IsString()@IsNotEmpty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Username for login', example: 'john_doe'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:29\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  MinLength,\n} from 'class-validator';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\n/**\n * DTO for user registration\n * @class RegisterDto\n */\nexport class RegisterDto {\n  @ApiProperty({\n    description: 'User email address',\n    example: 'test@example.com',\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @ApiProperty({\n    description: 'Username for login',\n    example: 'john_doe',\n  })\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n\n  @ApiProperty({\n    description: 'User password (min 8 characters)',\n    example: 'password123',\n    minLength: 8,\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  password: string;\n\n  @ApiProperty({\n    description: 'User first name',\n    example: 'John',\n  })\n  @IsString()\n  @IsNotEmpty()\n  firstName: string;\n\n  @ApiPropertyOptional({\n    description: 'User middle name (optional)',\n    example: 'Robert',\n  })\n  @IsString()\n  @IsOptional()\n  middleName?: string;\n\n  @ApiProperty({\n    description: 'User last name',\n    example: 'Doe',\n  })\n  @IsString()\n  @IsNotEmpty()\n  lastName: string;\n\n  @ApiPropertyOptional({\n    description: 'Full name (auto-generated)',\n    example: 'John Robert Doe',\n  })\n  @IsString()\n  @IsOptional()\n  name?: string;\n\n  @ApiPropertyOptional({\n    description: 'Name extension (e.g., Jr., III)',\n    example: 'Jr.',\n  })\n  @IsString()\n  @IsOptional()\n  nameExtension?: string;\n\n  @ApiPropertyOptional({\n    description: 'Contact number',\n    example: '09123456789',\n  })\n  @IsString()\n  contactNumber?: string;\n\n  // OTP field for email verification\n  @ApiPropertyOptional({\n    description: 'OTP code for email verification (optional)',\n    example: '123456',\n  })\n  @IsString()\n  @IsOptional()\n  otp?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser.html":{"url":"interfaces/RequestWithUser.html","title":"interface - RequestWithUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         AuthenticatedUser\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AuthenticatedUser\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  Get,\n  UseGuards,\n  Request,\n  UnauthorizedException,\n  Param,\n  BadRequestException,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\nimport { UpdateUserDto, AdminUpdateUserDto } from './dto/update-user.dto';\nimport { Roles } from './decorators/roles.decorator';\nimport { RolesGuard } from './guards/roles.guard';\nimport { AuthenticatedUser } from './jwt.strategy';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n  ApiParam,\n  ApiBody,\n} from '@nestjs/swagger';\nimport { OTPService } from '../services/otp.service';\nimport { EmailService } from '../services/email.service';\n\ninterface RequestWithUser extends Request {\n  user: AuthenticatedUser;\n}\n\n@ApiTags('Authentication')\n@Controller('auth')\nexport class AuthController {\n  constructor(\n    private authService: AuthService,\n    private otpService: OTPService, \n    private emailService: EmailService, \n  ) {}\n\n  @ApiOperation({ summary: 'User login' })\n  @ApiResponse({\n    status: 200,\n    description: 'Login successful',\n    schema: {\n      properties: {\n        access_token: { type: 'string' },\n        user: {\n          type: 'object',\n          properties: {\n            id: { type: 'number' },\n            email: { type: 'string' },\n            username: { type: 'string' },\n            roles: { type: 'array', items: { type: 'string' } },\n            defaultRole: { type: 'string' },\n          },\n        },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Unauthorized - invalid credentials',\n  })\n  @ApiBody({ type: LoginDto })\n  @Post('login')\n  async login(@Body() loginDto: LoginDto) {\n    console.log('Login request received:', loginDto);\n    try {\n      const result = await this.authService.login(loginDto);\n      return result;\n    } catch (error) {\n      throw new UnauthorizedException(\n        error instanceof Error ? error.message : 'Invalid credentials',\n      );\n    }\n  }\n\n  @ApiOperation({ summary: 'User registration' })\n  @ApiResponse({\n    status: 201,\n    description: 'Registration successful',\n    schema: {\n      properties: {\n        access_token: { type: 'string' },\n        user: {\n          type: 'object',\n          properties: {\n            id: { type: 'number' },\n            email: { type: 'string' },\n            username: { type: 'string' },\n            roles: { type: 'array', items: { type: 'string' } },\n            defaultRole: { type: 'string' },\n          },\n        },\n      },\n    },\n  })\n  @ApiResponse({ status: 400, description: 'Bad request - invalid data' })\n  @ApiResponse({\n    status: 409,\n    description: 'Conflict - email or username already exists',\n  })\n  @ApiBody({ type: RegisterDto })\n  @Post('register')\n  async register(@Body() createUserDto: RegisterDto) {\n    try {\n      // First verify OTP if email verification is enabled\n      if (createUserDto.email && createUserDto.otp) {\n        const isOtpValid = await this.otpService.verifyOTP(\n          createUserDto.email,\n          createUserDto.otp,\n          'verification',\n        );\n\n        if (!isOtpValid) {\n          throw new BadRequestException('Invalid or expired OTP');\n        }\n      }\n\n      const result = await this.authService.register(createUserDto);\n\n      // Send welcome email\n      if (createUserDto.email) {\n        await this.emailService.sendApplicationNotification(\n          createUserDto.email,\n          'Welcome!',\n          'Account Created',\n          'Welcome to Bulak LGU Smart Connect',\n        );\n      }\n\n      return result;\n    } catch (error) {\n      console.error('Registration error:', error);\n      throw error;\n    }\n  }\n  @ApiOperation({ summary: 'Get user profile' })\n  @ApiResponse({ status: 200, description: 'Profile retrieved successfully' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @ApiBearerAuth('JWT-auth')\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  getProfile(@Request() req: RequestWithUser) {\n    // Add null check before converting to number\n    if (!req.user || req.user.id === undefined || req.user.id === null) {\n      throw new UnauthorizedException('Invalid user ID');\n    }\n    return this.authService.getProfile(Number(req.user.id));\n  }\n  @ApiOperation({\n    summary: 'Update user profile',\n    description: 'Allows a user to update their own profile information',\n  })\n  @ApiResponse({ status: 200, description: 'Profile updated successfully' })\n  @ApiResponse({ status: 400, description: 'Bad request - invalid data' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @ApiResponse({\n    status: 409,\n    description: 'Conflict - email or username already exists',\n  })\n  @ApiBearerAuth('JWT-auth')\n  @ApiBody({ type: UpdateUserDto })\n  @UseGuards(JwtAuthGuard)\n  @Post('update-profile')\n  async updateProfile(\n    @Request() req: RequestWithUser,\n    @Body() updateUserDto: UpdateUserDto,\n  ) {\n    // Add null check before converting to number\n    if (!req.user || req.user.id === undefined || req.user.id === null) {\n      throw new UnauthorizedException('Invalid user ID');\n    }\n\n    try {\n      return await this.authService.updateUserInfo(\n        Number(req.user.id),\n        updateUserDto,\n      );\n    } catch (error) {\n      throw new UnauthorizedException(\n        error instanceof Error ? error.message : 'Failed to update profile',\n      );\n    }\n  }\n  @ApiOperation({\n    summary: 'Admin update user',\n    description:\n      \"Allows administrators to update any user's information including role assignments\",\n  })\n  @ApiParam({ name: 'userId', description: 'ID of the user to update' })\n  @ApiBody({ type: AdminUpdateUserDto })\n  @ApiResponse({ status: 200, description: 'User successfully updated' })\n  @ApiResponse({ status: 400, description: 'Bad request - invalid input data' })\n  @ApiResponse({\n    status: 401,\n    description: 'Unauthorized - invalid credentials',\n  })\n  @ApiResponse({\n    status: 403,\n    description: 'Forbidden - insufficient permissions',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Not found - user or role not found',\n  })\n  @ApiResponse({\n    status: 409,\n    description: 'Conflict - email or username already exists',\n  })\n  @ApiBearerAuth('JWT-auth')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles('admin', 'super_admin')\n  @Post('admin/update-user/:userId')\n  async adminUpdateUser(\n    @Request() req: RequestWithUser,\n    @Param('userId') targetUserId: string,\n    @Body() updateUserDto: AdminUpdateUserDto,\n  ) {\n    // Add null check before converting to number\n    if (!req.user || req.user.id === undefined || req.user.id === null) {\n      throw new UnauthorizedException('Invalid admin ID');\n    }\n\n    try {\n      return await this.authService.adminUpdateUser(\n        Number(req.user.id),\n        Number(targetUserId),\n        updateUserDto,\n      );\n    } catch (error) {\n      throw new UnauthorizedException(\n        error instanceof Error ? error.message : 'Failed to update user',\n      );\n    }\n  }\n\n  @Post('send-otp')\n  async sendOTP(@Body() sendOtpDto: { email: string; purpose?: string }) {\n    try {\n      const { email, purpose = 'verification' } = sendOtpDto;\n\n      // Validate email format\n      if (!email || !/\\S+@\\S+\\.\\S+/.test(email)) {\n        throw new BadRequestException('Invalid email format');\n      }\n\n      await this.otpService.generateOTP(email, purpose);\n\n      return {\n        success: true,\n        message: 'OTP sent successfully',\n        email: email,\n      };\n    } catch (error) {\n      console.error('Error sending OTP:', error);\n      throw new BadRequestException('Failed to send OTP');\n    }\n  }\n\n  @Post('verify-otp')\n  async verifyOTP(@Body() verifyOtpDto: { email: string; otp: string; purpose?: string }) {\n    try {\n      const { email, otp, purpose = 'verification' } = verifyOtpDto;\n\n      const isValid = await this.otpService.verifyOTP(email, otp, purpose);\n\n      if (!isValid) {\n        throw new UnauthorizedException('Invalid or expired OTP');\n      }\n\n      return {\n        success: true,\n        message: 'OTP verified successfully',\n      };\n    } catch (error) {\n      console.error('Error verifying OTP:', error);\n      throw new UnauthorizedException('Invalid or expired OTP');\n    }\n  }\n\n  // Add password reset endpoints\n  @Post('forgot-password')\n  async forgotPassword(@Body() { email }: { email: string }) {\n    try {\n      // Check if user exists\n      const user = await this.authService.findUserByEmail(email);\n      if (!user) {\n        // Don't reveal if email exists for security\n        return {\n          success: true,\n          message: 'If this email is registered, you will receive a password reset code',\n        };\n      }\n\n      await this.otpService.generateOTP(email, 'password_reset');\n\n      return {\n        success: true,\n        message: 'Password reset code sent to your email',\n      };\n    } catch (error) {\n      console.error('Forgot password error:', error);\n      throw new BadRequestException('Failed to send password reset code');\n    }\n  }\n\n  @Post('reset-password')\n  async resetPassword(@Body() resetDto: { email: string; otp: string; newPassword: string }) {\n    try {\n      const { email, otp, newPassword } = resetDto;\n\n      // Verify OTP\n      const isOtpValid = await this.otpService.verifyOTP(email, otp, 'password_reset');\n      if (!isOtpValid) {\n        throw new UnauthorizedException('Invalid or expired reset code');\n      }\n\n      // Update password\n      await this.authService.updatePassword(email, newPassword);\n\n      return {\n        success: true,\n        message: 'Password reset successfully',\n      };\n    } catch (error) {\n      console.error('Reset password error:', error);\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser-1.html":{"url":"interfaces/RequestWithUser-1.html","title":"interface - RequestWithUser-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/decorators/user.decorator.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         AuthenticatedUser\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AuthenticatedUser\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { createParamDecorator, ExecutionContext } from '@nestjs/common';\nimport { AuthenticatedUser } from '../jwt.strategy';\n\ninterface RequestWithUser {\n  user: AuthenticatedUser;\n}\n\nexport const User = createParamDecorator(\n  (data: unknown, ctx: ExecutionContext): AuthenticatedUser => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.user;\n  },\n);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser-2.html":{"url":"interfaces/RequestWithUser-2.html","title":"interface - RequestWithUser-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/roles.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ROLES_KEY } from '../decorators/roles.decorator';\n\n// Define interface for request with user\ninterface RequestWithUser extends Request {\n  user?: {\n    roles?: Array | string[];\n  };\n}\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(\n      ROLES_KEY,\n      [context.getHandler(), context.getClass()],\n    );\n\n    if (!requiredRoles) {\n      return true;\n    }\n\n    const request = context.switchToHttp().getRequest();\n    const userRoles = request.user?.roles || [];\n\n    // Handle both string array and object array formats\n    const roleNames = userRoles.map((role: string | { name: string }) =>\n      typeof role === 'string' ? role : (role as { name: string }).name,\n    );\n\n    return requiredRoles.some((role) => roleNames.includes(role));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Role.html":{"url":"entities/Role.html","title":"entity - Role","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Role\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/entities/role.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, user => user.roles)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:16\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, PrimaryGeneratedColumn, ManyToMany } from 'typeorm';\nimport { User } from '../../users/entities/user.entity';\n\n@Entity('roles')\nexport class Role {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true, nullable: false })\n  name: string;\n\n  @Column({ nullable: true })\n  description: string;\n\n  @ManyToMany(() => User, (user) => user.roles)\n  users: User[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RolesController.html":{"url":"controllers/RolesController.html","title":"controller - RolesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RolesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/roles.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                roles\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                getUserRoles\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@Roles('admin', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/roles/roles.controller.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@Roles('admin', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/roles/roles.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getUserRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserRoles(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('user/:userId')@Roles('admin', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/roles/roles.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, UseGuards } from '@nestjs/common';\nimport { RolesService } from './roles.service';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../auth/guards/roles.guard';\nimport { Roles } from '../auth/decorators/roles.decorator';\n\n@Controller('roles')\n@UseGuards(JwtAuthGuard, RolesGuard)\nexport class RolesController {\n  constructor(private readonly rolesService: RolesService) {}\n\n  @Get()\n  @Roles('admin', 'super_admin')\n  findAll() {\n    return this.rolesService.findAll();\n  }\n\n  @Get(':id')\n  @Roles('admin', 'super_admin')\n  findOne(@Param('id') id: string) {\n    return this.rolesService.findOne(+id);\n  }\n\n  @Get('user/:userId')\n  @Roles('admin', 'super_admin')\n  getUserRoles(@Param('userId') userId: string) {\n    return this.rolesService.getUserRoles(+userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/roles.guard.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/roles.guard.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ROLES_KEY } from '../decorators/roles.decorator';\n\n// Define interface for request with user\ninterface RequestWithUser extends Request {\n  user?: {\n    roles?: Array | string[];\n  };\n}\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(\n      ROLES_KEY,\n      [context.getHandler(), context.getClass()],\n    );\n\n    if (!requiredRoles) {\n      return true;\n    }\n\n    const request = context.switchToHttp().getRequest();\n    const userRoles = request.user?.roles || [];\n\n    // Handle both string array and object array formats\n    const roleNames = userRoles.map((role: string | { name: string }) =>\n      typeof role === 'string' ? role : (role as { name: string }).name,\n    );\n\n    return requiredRoles.some((role) => roleNames.includes(role));\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RolesModule.html":{"url":"modules/RolesModule.html","title":"module - RolesModule","body":"\n                   \n\n\n\n\n    Modules\n    RolesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_providers\n\n\n\ncluster_RolesModule_exports\n\n\n\n\nRolesService \n\nRolesService \n\n\n\nRolesModule\n\nRolesModule\n\nRolesService  -->\n\nRolesModule->RolesService \n\n\n\n\n\nRolesService\n\nRolesService\n\nRolesModule -->\n\nRolesService->RolesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/roles/roles.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RolesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RolesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RolesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Role } from './entities/role.entity';\nimport { User } from '../users/entities/user.entity';\nimport { RolesService } from './roles.service';\nimport { RolesController } from './roles.controller';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Role, User])],\n  providers: [RolesService],\n  controllers: [RolesController],\n  exports: [RolesService],\n})\nexport class RolesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RolesService.html":{"url":"injectables/RolesService.html","title":"injectable - RolesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RolesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/roles.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                assignRolesToUser\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByName\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getUserRoles\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(rolesRepository: Repository, usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/roles/roles.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        rolesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        assignRolesToUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    assignRolesToUser(userId: number, roleIds: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roleIds\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByName\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByName(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserRoles(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, In } from 'typeorm';\nimport { Role } from './entities/role.entity';\nimport { User } from '../users/entities/user.entity';\n\n@Injectable()\nexport class RolesService {\n  constructor(\n    @InjectRepository(Role)\n    private rolesRepository: Repository,\n\n    @InjectRepository(User)\n    private usersRepository: Repository,\n  ) {}\n\n  async findAll(): Promise {\n    return this.rolesRepository.find();\n  }\n\n  async findOne(id: number): Promise {\n    const role = await this.rolesRepository.findOne({ where: { id } });\n    if (!role) {\n      throw new NotFoundException(`Role with ID ${id} not found`);\n    }\n    return role;\n  }\n\n  async findByName(name: string): Promise {\n    const role = await this.rolesRepository.findOne({ where: { name } });\n    if (!role) {\n      throw new NotFoundException(`Role with name ${name} not found`);\n    }\n    return role;\n  }\n\n  async getUserRoles(userId: number): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id: userId },\n      relations: ['roles'],\n    });\n    return user ? user.roles : [];\n  }\n\n  async assignRolesToUser(userId: number, roleIds: number[]): Promise {\n    // Find the user\n    const user = await this.usersRepository.findOne({\n      where: { id: userId },\n      relations: ['roles'],\n    });\n\n    if (!user) {\n      throw new Error('User not found');\n    }\n\n    // Find the roles using In operator (replaces deprecated findByIds)\n    const roles = await this.rolesRepository.findBy({\n      id: In(roleIds),\n    });\n\n    // Assign roles to user\n    user.roles = roles;\n    await this.usersRepository.save(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAnnouncementDto.html":{"url":"classes/UpdateAnnouncementDto.html","title":"class - UpdateAnnouncementDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAnnouncementDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/announcement/dto/update-announcement.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateAnnouncementDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateAnnouncementDto } from './create-announcement.dto';\n\nexport class UpdateAnnouncementDto extends PartialType(CreateAnnouncementDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAppointmentDto.html":{"url":"classes/UpdateAppointmentDto.html","title":"class - UpdateAppointmentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAppointmentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/appointment/dto/update-appointment.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateAppointmentDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AppointmentStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEnum(AppointmentStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/update-appointment.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { IsOptional, IsEnum } from 'class-validator';\nimport { CreateAppointmentDto } from './create-appointment.dto';\nimport { AppointmentStatus } from '../entities/appointment.entity';\n\nexport class UpdateAppointmentDto extends PartialType(CreateAppointmentDto) {\n  @IsOptional()\n  @IsEnum(AppointmentStatus)\n  status?: AppointmentStatus;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateDocumentApplicationDto.html":{"url":"classes/UpdateDocumentApplicationDto.html","title":"class - UpdateDocumentApplicationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateDocumentApplicationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/document-applications/dto/update-document-application.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(\n  CreateDocumentApplicationDto,\n)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                statusMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ApplicationStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: ApplicationStatus, description: 'Application status', example: undefined, required: false})@IsOptional()@IsEnum(ApplicationStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/dto/update-document-application.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        statusMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Status message', example: 'Application approved and ready for pickup', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/dto/update-document-application.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateDocumentApplicationDto } from './create-document-application.dto';\nimport { IsEnum, IsOptional, IsString } from 'class-validator';\nimport { ApplicationStatus } from '../entities/document-application.entity';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class UpdateDocumentApplicationDto extends PartialType(\n  CreateDocumentApplicationDto,\n) {\n  @ApiProperty({\n    enum: ApplicationStatus,\n    description: 'Application status',\n    example: ApplicationStatus.APPROVED,\n    required: false,\n  })\n  @IsOptional()\n  @IsEnum(ApplicationStatus)\n  status?: ApplicationStatus;\n\n  @ApiProperty({\n    description: 'Status message',\n    example: 'Application approved and ready for pickup',\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  statusMessage?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateQueueDto.html":{"url":"classes/UpdateQueueDto.html","title":"class - UpdateQueueDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateQueueDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/dto/update-queue.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                counterNumber\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        counterNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/update-queue.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueueStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(QueueStatus)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/update-queue.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsEnum, IsOptional } from 'class-validator';\nimport { QueueStatus } from '../entities/queue.entity';\n\nexport class UpdateQueueDto {\n  @IsEnum(QueueStatus)\n  @IsOptional()\n  status?: QueueStatus;\n\n  @IsString()\n  @IsOptional()\n  counterNumber?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/update-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for updating user information (citizen)\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                contactNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                middleName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                nameExtension\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Complete address', example: '123 Main St, San Ildefonso, Bulacan'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        contactNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Contact number', example: '09123456789'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User email address', example: 'test@example.com'})@IsEmail()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'First name', example: 'John'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Last name', example: 'Doe'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Middle name', example: 'Robert'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        nameExtension\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Name extension (e.g., Jr., III)', example: 'Jr.'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User password (min 8 characters)', example: 'password123', minLength: 8})@IsString()@IsOptional()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Username', example: 'john_doe'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsOptional,\n  IsString,\n  MinLength,\n  IsNumber,\n  IsArray,\n} from 'class-validator';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\n/**\n * DTO for updating user information (citizen)\n * @class UpdateUserDto\n */\nexport class UpdateUserDto {\n  @ApiPropertyOptional({\n    description: 'User email address',\n    example: 'test@example.com',\n  })\n  @IsEmail()\n  @IsOptional()\n  email?: string;\n\n  @ApiPropertyOptional({ description: 'Username', example: 'john_doe' })\n  @IsString()\n  @IsOptional()\n  username?: string;\n\n  @ApiPropertyOptional({\n    description: 'User password (min 8 characters)',\n    example: 'password123',\n    minLength: 8,\n  })\n  @IsString()\n  @IsOptional()\n  @MinLength(8)\n  password?: string;\n\n  @ApiPropertyOptional({ description: 'First name', example: 'John' })\n  @IsString()\n  @IsOptional()\n  firstName?: string;\n\n  @ApiPropertyOptional({ description: 'Middle name', example: 'Robert' })\n  @IsString()\n  @IsOptional()\n  middleName?: string;\n\n  @ApiPropertyOptional({ description: 'Last name', example: 'Doe' })\n  @IsString()\n  @IsOptional()\n  lastName?: string;\n\n  @ApiPropertyOptional({\n    description: 'Name extension (e.g., Jr., III)',\n    example: 'Jr.',\n  })\n  @IsString()\n  @IsOptional()\n  nameExtension?: string;\n\n  @ApiPropertyOptional({\n    description: 'Contact number',\n    example: '09123456789',\n  })\n  @IsString()\n  @IsOptional()\n  contactNumber?: string;\n\n  @ApiPropertyOptional({\n    description: 'Complete address',\n    example: '123 Main St, San Ildefonso, Bulacan',\n  })\n  @IsString()\n  @IsOptional()\n  address?: string;\n}\n\n/**\n * DTO for admin to update any user\n * @class AdminUpdateUserDto\n */\nexport class AdminUpdateUserDto extends UpdateUserDto {\n  @ApiPropertyOptional({\n    description: 'Default role ID for the user',\n    example: 2,\n  })\n  @IsNumber()\n  @IsOptional()\n  defaultRoleId?: number;\n\n  @ApiPropertyOptional({\n    description: 'Array of role IDs to assign to the user',\n    example: [1, 2],\n    type: [Number],\n  })\n  @IsArray()\n  @IsOptional()\n  roleIds?: number[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserStatusDto.html":{"url":"classes/UpdateUserStatusDto.html","title":"class - UpdateUserStatusDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserStatusDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user-status.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                isActive\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: true, description: 'User active status'})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user-status.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsBoolean } from 'class-validator';\n\nexport class UpdateUserStatusDto {\n  @ApiProperty({\n    example: true,\n    description: 'User active status',\n  })\n  @IsBoolean()\n  isActive: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                contactNumber\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                defaultRole\n                            \n                            \n                                    \n                                defaultRoleId\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                middleName\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                nameExtension\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                roles\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        contactNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'contact_number', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        defaultRole\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {nullable: true})@JoinColumn({name: 'default_role_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        defaultRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'default_role_id', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'first_name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'is_active', default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'last_name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'middle_name', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        nameExtension\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'name_extension', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined)@JoinTable({name: 'user_roles', joinColumn: undefined, inverseJoinColumn: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({name: 'updated_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:23\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  ManyToOne,\n  JoinColumn,\n  ManyToMany,\n  JoinTable,\n} from 'typeorm';\nimport { Role } from '../../roles/entities/role.entity';\n\n@Entity('users')\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true })\n  email: string;\n\n  @Column({ unique: true })\n  username: string;\n\n  @Column()\n  password: string;\n\n  @Column({ name: 'first_name' })\n  firstName: string;\n\n  @Column({ name: 'middle_name', nullable: true })\n  middleName: string;\n\n  @Column({ name: 'last_name' })\n  lastName: string;\n\n  @Column()\n  name: string; // Keep for backward compatibility\n\n  @Column({ name: 'name_extension', nullable: true })\n  nameExtension: string;\n\n  @Column({ name: 'contact_number', nullable: true })\n  contactNumber: string;\n\n  @Column({ name: 'is_active', default: true })\n  isActive: boolean;\n\n  @CreateDateColumn({ name: 'created_at' })\n  createdAt: Date;\n\n  @UpdateDateColumn({ name: 'updated_at' })\n  updatedAt: Date;\n\n  @ManyToOne(() => Role, { nullable: true })\n  @JoinColumn({ name: 'default_role_id' })\n  defaultRole: Role;\n\n  @Column({ name: 'default_role_id', nullable: true })\n  defaultRoleId: number;\n\n  @ManyToMany(() => Role)\n  @JoinTable({\n    name: 'user_roles',\n    joinColumn: {\n      name: 'user_id',\n      referencedColumnName: 'id',\n    },\n    inverseJoinColumn: {\n      name: 'role_id',\n      referencedColumnName: 'id',\n    },\n  })\n  roles: Role[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserQueryDto.html":{"url":"classes/UserQueryDto.html","title":"class - UserQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/user-query.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                role\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                search\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 10, description: 'Number of items per page', minimum: 1})@IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-query.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 1, description: 'Page number', minimum: 1})@IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-query.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'citizen', description: 'Filter by role'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-query.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        search\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'john', description: 'Search term for name, email, or username'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-query.dto.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { IsOptional, IsString, IsNumber, Min } from 'class-validator';\nimport { Type } from 'class-transformer';\n\nexport class UserQueryDto {\n  @ApiPropertyOptional({\n    example: 1,\n    description: 'Page number',\n    minimum: 1,\n  })\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  page?: number = 1;\n\n  @ApiPropertyOptional({\n    example: 10,\n    description: 'Number of items per page',\n    minimum: 1,\n  })\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  limit?: number = 10;\n\n  @ApiPropertyOptional({\n    example: 'john',\n    description: 'Search term for name, email, or username',\n  })\n  @IsOptional()\n  @IsString()\n  search?: string;\n\n  @ApiPropertyOptional({\n    example: 'citizen',\n    description: 'Filter by role',\n  })\n  @IsOptional()\n  @IsString()\n  role?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserResponseDto.html":{"url":"classes/UserResponseDto.html","title":"class - UserResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/user-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                contactNumber\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                defaultRole\n                            \n                            \n                                    \n                                    Optional\n                                defaultRoleId\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    Optional\n                                middleName\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    Optional\n                                nameExtension\n                            \n                            \n                                    \n                                roles\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    Optional\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        contactNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '+639123456789', description: 'Contact number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2024-01-01T00:00:00.000Z', description: 'User creation date'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        defaultRole\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'citizen', description: 'Default role name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:87\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        defaultRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 4, description: 'Default role ID'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'john.doe@example.com', description: 'User email address'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'John', description: 'User first name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 1, description: 'User ID'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: true, description: 'User active status'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Doe', description: 'User last name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'Miguel', description: 'User middle name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'John Miguel Doe', description: 'Full name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        nameExtension\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'Jr.', description: 'Name extension'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined, description: 'User roles', type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2024-01-01T00:00:00.000Z', description: 'User last update date'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'johndoe', description: 'Username'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class UserResponseDto {\n  @ApiProperty({\n    example: 1,\n    description: 'User ID',\n  })\n  id: number;\n\n  @ApiProperty({\n    example: 'john.doe@example.com',\n    description: 'User email address',\n  })\n  email: string;\n\n  @ApiPropertyOptional({\n    example: 'johndoe',\n    description: 'Username',\n  })\n  username?: string;\n\n  @ApiProperty({\n    example: 'John',\n    description: 'User first name',\n  })\n  firstName: string;\n\n  @ApiPropertyOptional({\n    example: 'Miguel',\n    description: 'User middle name',\n  })\n  middleName?: string;\n\n  @ApiProperty({\n    example: 'Doe',\n    description: 'User last name',\n  })\n  lastName: string;\n\n  @ApiProperty({\n    example: 'John Miguel Doe',\n    description: 'Full name',\n  })\n  name: string;\n\n  @ApiPropertyOptional({\n    example: 'Jr.',\n    description: 'Name extension',\n  })\n  nameExtension?: string;\n\n  @ApiProperty({\n    example: '+639123456789',\n    description: 'Contact number',\n  })\n  contactNumber: string;\n\n  @ApiProperty({\n    example: true,\n    description: 'User active status',\n  })\n  isActive: boolean;\n\n  @ApiProperty({\n    example: '2024-01-01T00:00:00.000Z',\n    description: 'User creation date',\n  })\n  createdAt: Date;\n\n  @ApiProperty({\n    example: '2024-01-01T00:00:00.000Z',\n    description: 'User last update date',\n  })\n  updatedAt: Date;\n\n  @ApiProperty({\n    example: ['citizen', 'staff'],\n    description: 'User roles',\n    type: [String],\n  })\n  roles: string[];\n\n  @ApiProperty({\n    example: 'citizen',\n    description: 'Default role name',\n  })\n  defaultRole: string;\n\n  @ApiPropertyOptional({\n    example: 4,\n    description: 'Default role ID',\n  })\n  defaultRoleId?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserStats.html":{"url":"interfaces/UserStats.html","title":"interface - UserStats","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserStats\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            activeUsers\n                                        \n                                \n                                \n                                        \n                                            inactiveUsers\n                                        \n                                \n                                \n                                        \n                                            recentUsers\n                                        \n                                \n                                \n                                        \n                                            totalUsers\n                                        \n                                \n                                \n                                        \n                                            usersByRole\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        activeUsers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        activeUsers:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        inactiveUsers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        inactiveUsers:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        recentUsers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        recentUsers:         Omit[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Omit[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        totalUsers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        totalUsers:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        usersByRole\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        usersByRole:     literal type[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  BadRequestException,\n  ConflictException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, Like, In } from 'typeorm';\nimport { User } from './entities/user.entity';\nimport { AdminUpdateUserDto } from '../auth/dto/update-user.dto'; // Import from auth module\nimport { RolesService } from '../roles/roles.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport * as bcrypt from 'bcrypt';\n\ninterface FindAllOptions {\n  page: number;\n  limit: number;\n  search?: string;\n  role?: string;\n}\n\nexport interface UserStats {\n  totalUsers: number;\n  activeUsers: number;\n  inactiveUsers: number;\n  usersByRole: { roleName: string; count: number }[];\n  recentUsers: Omit[];\n}\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n    private rolesService: RolesService,\n  ) {}\n\n  async findAll(options: FindAllOptions) {\n    const { page, limit, search, role } = options;\n    const skip = (page - 1) * limit;\n\n    const queryBuilder = this.usersRepository\n      .createQueryBuilder('user')\n      .leftJoinAndSelect('user.defaultRole', 'defaultRole')\n      .leftJoinAndSelect('user.roles', 'roles');\n\n    // Apply search filter\n    if (search) {\n      queryBuilder.where(\n        '(user.firstName LIKE :search OR user.lastName LIKE :search OR user.email LIKE :search OR user.username LIKE :search)',\n        { search: `%${search}%` },\n      );\n    }\n\n    // Apply role filter\n    if (role) {\n      queryBuilder.andWhere('roles.name = :role', { role });\n    }\n\n    queryBuilder.orderBy('user.createdAt', 'DESC').skip(skip).take(limit);\n\n    const [users, total] = await queryBuilder.getManyAndCount();\n\n    // Remove passwords from response\n    const sanitizedUsers = users.map((user) => {\n      const { password, ...userWithoutPassword } = user;\n      return {\n        ...userWithoutPassword,\n        roles: user.roles.map((role) => role.name),\n        defaultRole: user.defaultRole?.name || 'citizen',\n      };\n    });\n\n    return {\n      users: sanitizedUsers,\n      total,\n      page,\n      limit,\n      totalPages: Math.ceil(total / limit),\n    };\n  }\n\n  async findOne(id: number): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id },\n      relations: ['defaultRole', 'roles'],\n    });\n\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    // Remove password and format response\n\n    const { password, ...userWithoutPassword } = user;\n    return {\n      ...userWithoutPassword,\n      roles: user.roles.map((role) => role.name),\n      defaultRole: user.defaultRole?.name || 'citizen',\n    };\n  }\n\n  // Admin-only update method\n  async adminUpdate(\n    id: number,\n    updateUserDto: AdminUpdateUserDto,\n  ): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id },\n      relations: ['roles'],\n    });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    const {\n      email,\n\n      username,\n\n      firstName,\n\n      middleName,\n\n      lastName,\n\n      nameExtension,\n\n      contactNumber,\n\n      roleIds,\n\n      defaultRoleId,\n    } = updateUserDto;\n\n    // Check email uniqueness if being updated\n    if (email && email !== user.email) {\n      const existingUser = await this.usersRepository.findOne({\n        where: { email },\n      });\n      if (existingUser) {\n        throw new ConflictException('Email already exists');\n      }\n    }\n\n    // Check username uniqueness if being updated\n    if (username && username !== user.username) {\n      const existingUser = await this.usersRepository.findOne({\n        where: { username },\n      });\n      if (existingUser) {\n        throw new ConflictException('Username already exists');\n      }\n    }\n\n    // Update fields\n    const updateData: any = {};\n\n    if (email) updateData.email = email;\n    if (username) updateData.username = username;\n    if (firstName) updateData.firstName = firstName;\n    if (lastName) updateData.lastName = lastName;\n    if (contactNumber) updateData.contactNumber = contactNumber;\n\n    // Handle optional fields\n    if (middleName !== undefined) updateData.middleName = middleName;\n    if (nameExtension !== undefined) updateData.nameExtension = nameExtension;\n    if (defaultRoleId !== undefined) updateData.defaultRoleId = defaultRoleId;\n\n    // Update name if name components changed\n    if (\n      firstName ||\n      middleName !== undefined ||\n      lastName ||\n      nameExtension !== undefined\n    ) {\n      const newFirstName = firstName || user.firstName;\n      const newMiddleName =\n        middleName !== undefined ? middleName : user.middleName;\n      const newLastName = lastName || user.lastName;\n      const newNameExtension =\n        nameExtension !== undefined ? nameExtension : user.nameExtension;\n\n      updateData.name = `${newFirstName} ${newMiddleName ? newMiddleName + ' ' : ''}${newLastName}${newNameExtension ? ' ' + newNameExtension : ''}`;\n    }\n\n    await this.usersRepository.update(id, updateData);\n\n    // Update roles if provided\n    if (roleIds !== undefined) {\n      // Remove existing roles and assign new ones\n      await this.usersRepository\n        .createQueryBuilder()\n        .relation(User, 'roles')\n        .of(id)\n        .remove(user.roles);\n\n      if (roleIds.length > 0) {\n        await this.rolesService.assignRolesToUser(id, roleIds);\n      }\n    }\n\n    return this.findOne(id);\n  }\n\n  async remove(id: number): Promise {\n    const user = await this.usersRepository.findOne({ where: { id } });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    await this.usersRepository.delete(id);\n    return { message: `User with ID ${id} has been deleted` };\n  }\n\n  async updateStatus(id: number, isActive: boolean): Promise {\n    const user = await this.usersRepository.findOne({ where: { id } });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    await this.usersRepository.update(id, { isActive });\n    return this.findOne(id);\n  }\n\n  async getStats(): Promise {\n    const totalUsers = await this.usersRepository.count();\n    const activeUsers = await this.usersRepository.count({\n      where: { isActive: true },\n    });\n    const inactiveUsers = totalUsers - activeUsers;\n\n    // Get user count by role\n    const roleStats = await this.usersRepository\n      .createQueryBuilder('user')\n      .leftJoin('user.roles', 'role')\n      .select('role.name', 'roleName')\n      .addSelect('COUNT(user.id)', 'count')\n      .groupBy('role.name')\n      .getRawMany();\n\n    const usersByRole = roleStats.map((stat) => ({\n      roleName: stat.roleName || 'No Role',\n\n      count: parseInt(stat.count),\n    }));\n\n    // Get recent users (last 10)\n    const recentUsers = await this.usersRepository.find({\n      order: { createdAt: 'DESC' },\n      take: 10,\n      relations: ['defaultRole', 'roles'],\n    });\n\n    const sanitizedRecentUsers = recentUsers.map((user) => {\n      const { password, ...userWithoutPassword } = user;\n      return userWithoutPassword as Omit;\n    });\n\n    return {\n      totalUsers,\n      activeUsers,\n      inactiveUsers,\n      usersByRole,\n      recentUsers: sanitizedRecentUsers,\n    };\n  }\n\n  async findByEmail(email: string): Promise {\n    return this.usersRepository.findOne({\n      where: { email },\n      relations: ['defaultRole', 'roles'],\n    });\n  }\n\n  async findByUsername(username: string): Promise {\n    return this.usersRepository.findOne({\n      where: { username },\n      relations: ['defaultRole', 'roles'],\n    });\n  }\n\n  async create(createUserDto: CreateUserDto) {\n    const {\n      email,\n      username,\n      password,\n      firstName,\n      middleName,\n      lastName,\n      nameExtension,\n      contactNumber,\n      name,\n      roleIds,\n      defaultRoleId,\n    } = createUserDto;\n\n    // Generate full name if not provided\n    const fullName =\n      name ||\n      `${firstName} ${middleName ? middleName + ' ' : ''}${lastName}${nameExtension ? ' ' + nameExtension : ''}`;\n\n    // Check if user already exists\n    const existingUserByEmail = await this.usersRepository.findOne({\n      where: { email },\n    });\n    if (existingUserByEmail) {\n      throw new ConflictException('Email already exists');\n    }\n\n    if (username) {\n      const existingUserByUsername = await this.usersRepository.findOne({\n        where: { username },\n      });\n      if (existingUserByUsername) {\n        throw new ConflictException('Username already exists');\n      }\n    }\n\n    try {\n      // Create user\n      const user = this.usersRepository.create({\n        email,\n        username,\n        password, // Should be hashed by the caller\n        firstName,\n        middleName,\n        lastName,\n        nameExtension,\n        contactNumber,\n        name: fullName,\n        defaultRoleId: defaultRoleId || 4, // Default to citizen\n      });\n\n      await this.usersRepository.save(user);\n\n      // Assign roles if provided\n      if (roleIds && roleIds.length > 0) {\n        await this.rolesService.assignRolesToUser(user.id, roleIds);\n      }\n\n      return user;\n    } catch (error) {\n      console.error('Error creating user:', error);\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserStatsResponseDto.html":{"url":"classes/UserStatsResponseDto.html","title":"class - UserStatsResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserStatsResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/user-stats-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                activeUsers\n                            \n                            \n                                    \n                                inactiveUsers\n                            \n                            \n                                    \n                                recentUsers\n                            \n                            \n                                    \n                                totalUsers\n                            \n                            \n                                    \n                                usersByRole\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        activeUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 85, description: 'Number of active users'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-stats-response.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        inactiveUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 15, description: 'Number of inactive users'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-stats-response.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        recentUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserResponseDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined, description: 'Recently created users'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-stats-response.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        totalUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 100, description: 'Total number of users'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-stats-response.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        usersByRole\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UsersByRoleDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined, description: 'User count by role'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-stats-response.dto.ts:41\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { UserResponseDto } from './user-response.dto';\n\nclass UsersByRoleDto {\n  @ApiProperty({\n    example: 'citizen',\n    description: 'Role name',\n  })\n  roleName: string;\n\n  @ApiProperty({\n    example: 25,\n    description: 'Number of users with this role',\n  })\n  count: number;\n}\n\nexport class UserStatsResponseDto {\n  @ApiProperty({\n    example: 100,\n    description: 'Total number of users',\n  })\n  totalUsers: number;\n\n  @ApiProperty({\n    example: 85,\n    description: 'Number of active users',\n  })\n  activeUsers: number;\n\n  @ApiProperty({\n    example: 15,\n    description: 'Number of inactive users',\n  })\n  inactiveUsers: number;\n\n  @ApiProperty({\n    type: [UsersByRoleDto],\n    description: 'User count by role',\n  })\n  usersByRole: UsersByRoleDto[];\n\n  @ApiProperty({\n    type: [UserResponseDto],\n    description: 'Recently created users',\n  })\n  recentUsers: UserResponseDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UsersByRoleDto.html":{"url":"classes/UsersByRoleDto.html","title":"class - UsersByRoleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UsersByRoleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/user-stats-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                count\n                            \n                            \n                                    \n                                roleName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 25, description: 'Number of users with this role'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-stats-response.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        roleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'citizen', description: 'Role name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-stats-response.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { UserResponseDto } from './user-response.dto';\n\nclass UsersByRoleDto {\n  @ApiProperty({\n    example: 'citizen',\n    description: 'Role name',\n  })\n  roleName: string;\n\n  @ApiProperty({\n    example: 25,\n    description: 'Number of users with this role',\n  })\n  count: number;\n}\n\nexport class UserStatsResponseDto {\n  @ApiProperty({\n    example: 100,\n    description: 'Total number of users',\n  })\n  totalUsers: number;\n\n  @ApiProperty({\n    example: 85,\n    description: 'Number of active users',\n  })\n  activeUsers: number;\n\n  @ApiProperty({\n    example: 15,\n    description: 'Number of inactive users',\n  })\n  inactiveUsers: number;\n\n  @ApiProperty({\n    type: [UsersByRoleDto],\n    description: 'User count by role',\n  })\n  usersByRole: UsersByRoleDto[];\n\n  @ApiProperty({\n    type: [UserResponseDto],\n    description: 'Recently created users',\n  })\n  recentUsers: UserResponseDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                adminCreateUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getProfile\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getStats\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        adminCreateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    adminCreateUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('admin-create')@UseGuards(JwtAuthGuard, RolesGuard)@Roles('admin', 'super_admin')@ApiOperation({summary: 'Admin creates user with role assignment'})@ApiResponse({status: 201, description: 'User created successfully', type: UserResponseDto})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:153\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(query: UserQueryDto, req: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(RolesGuard)@Roles('admin', 'staff', 'super_admin')@ApiOperation({summary: 'Get all users (Admin only)'})@ApiResponse({status: 200, description: 'Users retrieved successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            UserQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string, req: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@UseGuards(RolesGuard)@Roles('admin', 'staff', 'super_admin')@ApiOperation({summary: 'Get user by ID (Admin only)'})@ApiResponse({status: 200, description: 'User found'})@ApiResponse({status: 404, description: 'User not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:80\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(req: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('profile')@ApiOperation({summary: 'Get current user profile'})@ApiResponse({status: 200, description: 'Profile retrieved successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('stats')@UseGuards(RolesGuard)@Roles('admin', 'staff', 'super_admin')@ApiOperation({summary: 'Get user statistics (Admin only)'})@ApiResponse({status: 200, description: 'Statistics retrieved successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:70\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string, req: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@UseGuards(RolesGuard)@Roles('admin', 'super_admin')@ApiOperation({summary: 'Delete user (Admin only)'})@ApiResponse({status: 200, description: 'User deleted successfully'})@ApiResponse({status: 404, description: 'User not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:121\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateUserDto: AdminUpdateUserDto, req: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@UseGuards(RolesGuard)@Roles('admin', 'super_admin')@ApiOperation({summary: 'Update user (Admin only)'})@ApiResponse({status: 200, description: 'User updated successfully'})@ApiResponse({status: 404, description: 'User not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:106\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            AdminUpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(id: string, updateStatusDto: UpdateUserStatusDto, req: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/status')@UseGuards(RolesGuard)@Roles('admin', 'super_admin')@ApiOperation({summary: 'Update user status (Admin only)'})@ApiResponse({status: 200, description: 'User status updated successfully'})@ApiResponse({status: 404, description: 'User not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:135\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateStatusDto\n                                            \n                                                            UpdateUserStatusDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-unsafe-return */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nimport {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n  Request,\n  Query,\n} from '@nestjs/common';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n} from '@nestjs/swagger';\nimport { UsersService } from './users.service';\nimport { AdminUpdateUserDto } from '../auth/dto/update-user.dto'; // Import from auth module\nimport { UpdateUserStatusDto } from './dto/update-user-status.dto';\nimport { UserQueryDto } from './dto/user-query.dto';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../auth/guards/roles.guard';\nimport { Roles } from '../auth/decorators/roles.decorator';\nimport { AuthenticatedUser } from '../auth/jwt.strategy';\nimport * as bcrypt from 'bcrypt';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UserResponseDto } from './dto/user-response.dto';\n\n@ApiTags('users')\n@Controller('users')\n@UseGuards(JwtAuthGuard)\n@ApiBearerAuth()\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Get()\n  @UseGuards(RolesGuard)\n  @Roles('admin', 'staff', 'super_admin')\n  @ApiOperation({ summary: 'Get all users (Admin only)' })\n  @ApiResponse({ status: 200, description: 'Users retrieved successfully' })\n  async findAll(\n    @Query() query: UserQueryDto,\n\n    @Request() req: { user: AuthenticatedUser },\n  ) {\n    const { page = 1, limit = 10, search, role } = query;\n    return this.usersService.findAll({ page, limit, search, role });\n  }\n\n  @Get('profile')\n  @ApiOperation({ summary: 'Get current user profile' })\n  @ApiResponse({ status: 200, description: 'Profile retrieved successfully' })\n  async getProfile(@Request() req: { user: AuthenticatedUser }) {\n    return this.usersService.findOne(req.user.id);\n  }\n\n  @Get('stats')\n  @UseGuards(RolesGuard)\n  @Roles('admin', 'staff', 'super_admin')\n  @ApiOperation({ summary: 'Get user statistics (Admin only)' })\n  @ApiResponse({\n    status: 200,\n    description: 'Statistics retrieved successfully',\n  })\n  async getStats() {\n    return this.usersService.getStats();\n  }\n\n  @Get(':id')\n  @UseGuards(RolesGuard)\n  @Roles('admin', 'staff', 'super_admin')\n  @ApiOperation({ summary: 'Get user by ID (Admin only)' })\n  @ApiResponse({ status: 200, description: 'User found' })\n  @ApiResponse({ status: 404, description: 'User not found' })\n  async findOne(\n    @Param('id') id: string,\n    @Request() req: { user: AuthenticatedUser },\n  ) {\n    // Allow users to view their own profile\n    const userId = +id;\n    const currentUser = req.user;\n\n    if (\n      userId === currentUser.id ||\n      currentUser.roles.some((role) =>\n        ['admin', 'staff', 'super_admin'].includes(role.name),\n      )\n    ) {\n      return this.usersService.findOne(userId);\n    }\n\n    throw new Error('Unauthorized');\n  }\n\n  @Patch(':id')\n  @UseGuards(RolesGuard)\n  @Roles('admin', 'super_admin')\n  @ApiOperation({ summary: 'Update user (Admin only)' })\n  @ApiResponse({ status: 200, description: 'User updated successfully' })\n  @ApiResponse({ status: 404, description: 'User not found' })\n  async update(\n    @Param('id') id: string,\n    @Body() updateUserDto: AdminUpdateUserDto,\n\n    @Request() req: { user: AuthenticatedUser },\n  ) {\n    return this.usersService.adminUpdate(+id, updateUserDto);\n  }\n\n  @Delete(':id')\n  @UseGuards(RolesGuard)\n  @Roles('admin', 'super_admin')\n  @ApiOperation({ summary: 'Delete user (Admin only)' })\n  @ApiResponse({ status: 200, description: 'User deleted successfully' })\n  @ApiResponse({ status: 404, description: 'User not found' })\n  async remove(\n    @Param('id') id: string,\n\n    @Request() req: { user: AuthenticatedUser },\n  ) {\n    return this.usersService.remove(+id);\n  }\n\n  @Patch(':id/status')\n  @UseGuards(RolesGuard)\n  @Roles('admin', 'super_admin')\n  @ApiOperation({ summary: 'Update user status (Admin only)' })\n  @ApiResponse({ status: 200, description: 'User status updated successfully' })\n  @ApiResponse({ status: 404, description: 'User not found' })\n  async updateStatus(\n    @Param('id') id: string,\n    @Body() updateStatusDto: UpdateUserStatusDto,\n\n    @Request() req: { user: AuthenticatedUser },\n  ) {\n    return this.usersService.updateStatus(+id, updateStatusDto.isActive);\n  }\n\n  @Post('admin-create')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles('admin', 'super_admin')\n  @ApiOperation({ summary: 'Admin creates user with role assignment' })\n  @ApiResponse({\n    status: 201,\n    description: 'User created successfully',\n    type: UserResponseDto,\n  })\n  async adminCreateUser(\n    @Body() createUserDto: CreateUserDto,\n  ): Promise {\n    try {\n      // Hash password\n      const salt = await bcrypt.genSalt();\n      const hashedPassword = await bcrypt.hash(createUserDto.password, salt);\n\n      // Create user with hashed password\n      const userWithHashedPassword = {\n        ...createUserDto,\n        password: hashedPassword,\n      };\n\n      const user = await this.usersService.create(userWithHashedPassword);\n\n      // Return user without password\n\n      const { password, ...userWithoutPassword } = user;\n\n      // Get user with roles for response\n\n      const userWithRoles = await this.usersService.findOne(user.id);\n\n      return userWithRoles;\n    } catch (error) {\n      console.error('Error in admin create user:', error);\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nRolesModule\n\nRolesModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nRolesModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RolesModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { User } from './entities/user.entity';\nimport { RolesModule } from '../roles/roles.module';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User]), RolesModule],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService, TypeOrmModule],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                adminUpdate\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByEmail\n                            \n                            \n                                    Async\n                                findByUsername\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getStats\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, rolesService: RolesService)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:35\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        rolesService\n                                                  \n                                                        \n                                                                        RolesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        adminUpdate\n                        \n                    \n                \n            \n            \n                \n                        \n                    adminUpdate(id: number, updateUserDto: AdminUpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:108\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            AdminUpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:287\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(options: FindAllOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                            FindAllOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:273\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByUsername\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByUsername(username: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:280\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:87\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:230\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:210\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(id: number, isActive: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:220\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                isActive\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  BadRequestException,\n  ConflictException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, Like, In } from 'typeorm';\nimport { User } from './entities/user.entity';\nimport { AdminUpdateUserDto } from '../auth/dto/update-user.dto'; // Import from auth module\nimport { RolesService } from '../roles/roles.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport * as bcrypt from 'bcrypt';\n\ninterface FindAllOptions {\n  page: number;\n  limit: number;\n  search?: string;\n  role?: string;\n}\n\nexport interface UserStats {\n  totalUsers: number;\n  activeUsers: number;\n  inactiveUsers: number;\n  usersByRole: { roleName: string; count: number }[];\n  recentUsers: Omit[];\n}\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n    private rolesService: RolesService,\n  ) {}\n\n  async findAll(options: FindAllOptions) {\n    const { page, limit, search, role } = options;\n    const skip = (page - 1) * limit;\n\n    const queryBuilder = this.usersRepository\n      .createQueryBuilder('user')\n      .leftJoinAndSelect('user.defaultRole', 'defaultRole')\n      .leftJoinAndSelect('user.roles', 'roles');\n\n    // Apply search filter\n    if (search) {\n      queryBuilder.where(\n        '(user.firstName LIKE :search OR user.lastName LIKE :search OR user.email LIKE :search OR user.username LIKE :search)',\n        { search: `%${search}%` },\n      );\n    }\n\n    // Apply role filter\n    if (role) {\n      queryBuilder.andWhere('roles.name = :role', { role });\n    }\n\n    queryBuilder.orderBy('user.createdAt', 'DESC').skip(skip).take(limit);\n\n    const [users, total] = await queryBuilder.getManyAndCount();\n\n    // Remove passwords from response\n    const sanitizedUsers = users.map((user) => {\n      const { password, ...userWithoutPassword } = user;\n      return {\n        ...userWithoutPassword,\n        roles: user.roles.map((role) => role.name),\n        defaultRole: user.defaultRole?.name || 'citizen',\n      };\n    });\n\n    return {\n      users: sanitizedUsers,\n      total,\n      page,\n      limit,\n      totalPages: Math.ceil(total / limit),\n    };\n  }\n\n  async findOne(id: number): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id },\n      relations: ['defaultRole', 'roles'],\n    });\n\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    // Remove password and format response\n\n    const { password, ...userWithoutPassword } = user;\n    return {\n      ...userWithoutPassword,\n      roles: user.roles.map((role) => role.name),\n      defaultRole: user.defaultRole?.name || 'citizen',\n    };\n  }\n\n  // Admin-only update method\n  async adminUpdate(\n    id: number,\n    updateUserDto: AdminUpdateUserDto,\n  ): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id },\n      relations: ['roles'],\n    });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    const {\n      email,\n\n      username,\n\n      firstName,\n\n      middleName,\n\n      lastName,\n\n      nameExtension,\n\n      contactNumber,\n\n      roleIds,\n\n      defaultRoleId,\n    } = updateUserDto;\n\n    // Check email uniqueness if being updated\n    if (email && email !== user.email) {\n      const existingUser = await this.usersRepository.findOne({\n        where: { email },\n      });\n      if (existingUser) {\n        throw new ConflictException('Email already exists');\n      }\n    }\n\n    // Check username uniqueness if being updated\n    if (username && username !== user.username) {\n      const existingUser = await this.usersRepository.findOne({\n        where: { username },\n      });\n      if (existingUser) {\n        throw new ConflictException('Username already exists');\n      }\n    }\n\n    // Update fields\n    const updateData: any = {};\n\n    if (email) updateData.email = email;\n    if (username) updateData.username = username;\n    if (firstName) updateData.firstName = firstName;\n    if (lastName) updateData.lastName = lastName;\n    if (contactNumber) updateData.contactNumber = contactNumber;\n\n    // Handle optional fields\n    if (middleName !== undefined) updateData.middleName = middleName;\n    if (nameExtension !== undefined) updateData.nameExtension = nameExtension;\n    if (defaultRoleId !== undefined) updateData.defaultRoleId = defaultRoleId;\n\n    // Update name if name components changed\n    if (\n      firstName ||\n      middleName !== undefined ||\n      lastName ||\n      nameExtension !== undefined\n    ) {\n      const newFirstName = firstName || user.firstName;\n      const newMiddleName =\n        middleName !== undefined ? middleName : user.middleName;\n      const newLastName = lastName || user.lastName;\n      const newNameExtension =\n        nameExtension !== undefined ? nameExtension : user.nameExtension;\n\n      updateData.name = `${newFirstName} ${newMiddleName ? newMiddleName + ' ' : ''}${newLastName}${newNameExtension ? ' ' + newNameExtension : ''}`;\n    }\n\n    await this.usersRepository.update(id, updateData);\n\n    // Update roles if provided\n    if (roleIds !== undefined) {\n      // Remove existing roles and assign new ones\n      await this.usersRepository\n        .createQueryBuilder()\n        .relation(User, 'roles')\n        .of(id)\n        .remove(user.roles);\n\n      if (roleIds.length > 0) {\n        await this.rolesService.assignRolesToUser(id, roleIds);\n      }\n    }\n\n    return this.findOne(id);\n  }\n\n  async remove(id: number): Promise {\n    const user = await this.usersRepository.findOne({ where: { id } });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    await this.usersRepository.delete(id);\n    return { message: `User with ID ${id} has been deleted` };\n  }\n\n  async updateStatus(id: number, isActive: boolean): Promise {\n    const user = await this.usersRepository.findOne({ where: { id } });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    await this.usersRepository.update(id, { isActive });\n    return this.findOne(id);\n  }\n\n  async getStats(): Promise {\n    const totalUsers = await this.usersRepository.count();\n    const activeUsers = await this.usersRepository.count({\n      where: { isActive: true },\n    });\n    const inactiveUsers = totalUsers - activeUsers;\n\n    // Get user count by role\n    const roleStats = await this.usersRepository\n      .createQueryBuilder('user')\n      .leftJoin('user.roles', 'role')\n      .select('role.name', 'roleName')\n      .addSelect('COUNT(user.id)', 'count')\n      .groupBy('role.name')\n      .getRawMany();\n\n    const usersByRole = roleStats.map((stat) => ({\n      roleName: stat.roleName || 'No Role',\n\n      count: parseInt(stat.count),\n    }));\n\n    // Get recent users (last 10)\n    const recentUsers = await this.usersRepository.find({\n      order: { createdAt: 'DESC' },\n      take: 10,\n      relations: ['defaultRole', 'roles'],\n    });\n\n    const sanitizedRecentUsers = recentUsers.map((user) => {\n      const { password, ...userWithoutPassword } = user;\n      return userWithoutPassword as Omit;\n    });\n\n    return {\n      totalUsers,\n      activeUsers,\n      inactiveUsers,\n      usersByRole,\n      recentUsers: sanitizedRecentUsers,\n    };\n  }\n\n  async findByEmail(email: string): Promise {\n    return this.usersRepository.findOne({\n      where: { email },\n      relations: ['defaultRole', 'roles'],\n    });\n  }\n\n  async findByUsername(username: string): Promise {\n    return this.usersRepository.findOne({\n      where: { username },\n      relations: ['defaultRole', 'roles'],\n    });\n  }\n\n  async create(createUserDto: CreateUserDto) {\n    const {\n      email,\n      username,\n      password,\n      firstName,\n      middleName,\n      lastName,\n      nameExtension,\n      contactNumber,\n      name,\n      roleIds,\n      defaultRoleId,\n    } = createUserDto;\n\n    // Generate full name if not provided\n    const fullName =\n      name ||\n      `${firstName} ${middleName ? middleName + ' ' : ''}${lastName}${nameExtension ? ' ' + nameExtension : ''}`;\n\n    // Check if user already exists\n    const existingUserByEmail = await this.usersRepository.findOne({\n      where: { email },\n    });\n    if (existingUserByEmail) {\n      throw new ConflictException('Email already exists');\n    }\n\n    if (username) {\n      const existingUserByUsername = await this.usersRepository.findOne({\n        where: { username },\n      });\n      if (existingUserByUsername) {\n        throw new ConflictException('Username already exists');\n      }\n    }\n\n    try {\n      // Create user\n      const user = this.usersRepository.create({\n        email,\n        username,\n        password, // Should be hashed by the caller\n        firstName,\n        middleName,\n        lastName,\n        nameExtension,\n        contactNumber,\n        name: fullName,\n        defaultRoleId: defaultRoleId || 4, // Default to citizen\n      });\n\n      await this.usersRepository.save(user);\n\n      // Assign roles if provided\n      if (roleIds && roleIds.length > 0) {\n        await this.rolesService.assignRolesToUser(user.id, roleIds);\n      }\n\n      return user;\n    } catch (error) {\n      console.error('Error creating user:', error);\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                        src/auth/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/decorators/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/user.decorator.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/auth/decorators/user.decorator.ts\n            \n            variable\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/auth/dto/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                9 %\n                (1/11)\n            \n        \n        \n            \n                \n                src/auth/dto/update-user.dto.ts\n            \n            class\n            AdminUpdateUserDto\n            \n                8 %\n                (1/12)\n            \n        \n        \n            \n                \n                src/auth/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                10 %\n                (1/10)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/roles.guard.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            interface\n            AuthenticatedUser\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            interface\n            JwtPayload\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/config/database.config.ts\n            \n            variable\n            databaseConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/entities/otp.entity.ts\n            \n            entity\n            OTP\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            seedDatabaseIfNeeded\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            testMinIOConnection\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/announcement/announcement.controller.ts\n            \n            controller\n            AnnouncementController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/announcement/announcement.service.ts\n            \n            injectable\n            AnnouncementService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/announcement/dto/create-announcement.dto.ts\n            \n            class\n            CreateAnnouncementDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/announcement/dto/update-announcement.dto.ts\n            \n            class\n            UpdateAnnouncementDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/announcement/entities/announcement.entity.ts\n            \n            entity\n            Announcement\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/appointment/appointment.controller.ts\n            \n            controller\n            AppointmentController\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/modules/appointment/appointment.service.ts\n            \n            injectable\n            AppointmentService\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/modules/appointment/dto/create-appointment.dto.ts\n            \n            class\n            CreateAppointmentDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/modules/appointment/dto/update-appointment.dto.ts\n            \n            class\n            UpdateAppointmentDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/appointment/entities/appointment.entity.ts\n            \n            entity\n            Appointment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/counter/entities/counter.entity.ts\n            \n            entity\n            Counter\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/document-applications/document-applications.controller.ts\n            \n            controller\n            DocumentApplicationsController\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/modules/document-applications/document-applications.service.ts\n            \n            injectable\n            DocumentApplicationsService\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/modules/document-applications/dto/create-document-application.dto.ts\n            \n            class\n            CreateDocumentApplicationDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/document-applications/dto/update-document-application.dto.ts\n            \n            class\n            UpdateDocumentApplicationDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/document-applications/entities/application-status-history.entity.ts\n            \n            entity\n            ApplicationStatusHistory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/document-applications/entities/application-status-history.entity.ts\n            \n            class\n            ApplicationStatusHistory\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/modules/document-applications/entities/document-application.entity.ts\n            \n            entity\n            DocumentApplication\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/document-applications/entities/document-application.entity.ts\n            \n            class\n            DocumentApplication\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/modules/document-applications/entities/document-file.entity.ts\n            \n            entity\n            DocumentFile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/document-applications/entities/document-file.entity.ts\n            \n            class\n            DocumentFile\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/document-applications/services/minio.service.ts\n            \n            injectable\n            MinioService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/modules/queue/dto/create-queue.dto.ts\n            \n            class\n            CreateQueueDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/queue/dto/update-queue.dto.ts\n            \n            class\n            UpdateQueueDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/queue/entities/queue-details.entity.ts\n            \n            entity\n            QueueDetails\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/queue/entities/queue.entity.ts\n            \n            entity\n            Queue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/queue/queue-scheduler.service.ts\n            \n            injectable\n            QueueSchedulerService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/queue/queue.controller.ts\n            \n            controller\n            QueueController\n            \n                0 %\n                (0/24)\n            \n        \n        \n            \n                \n                src/modules/queue/queue.gateway.ts\n            \n            class\n            QueueGateway\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/modules/queue/queue.service.ts\n            \n            injectable\n            QueueService\n            \n                0 %\n                (0/18)\n            \n        \n        \n            \n                \n                src/modules/queue/queues.controller.ts\n            \n            controller\n            QueuesController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/queue/queues.controller.ts\n            \n            interface\n            QueueDetails\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/roles/entities/role.entity.ts\n            \n            entity\n            Role\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/roles/roles.controller.ts\n            \n            controller\n            RolesController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/roles/roles.service.ts\n            \n            injectable\n            RolesService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/services/email.service.ts\n            \n            injectable\n            EmailService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/services/minio.service.ts\n            \n            injectable\n            MinioService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/services/otp.service.ts\n            \n            injectable\n            OTPService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/users/dto/paginated-users-response.dto.ts\n            \n            class\n            PaginatedUsersResponseDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/dto/update-user-status.dto.ts\n            \n            class\n            UpdateUserStatusDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dto/user-query.dto.ts\n            \n            class\n            UserQueryDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dto/user-response.dto.ts\n            \n            class\n            UserResponseDto\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/users/dto/user-stats-response.dto.ts\n            \n            class\n            UsersByRoleDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dto/user-stats-response.dto.ts\n            \n            class\n            UserStatsResponseDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            interface\n            FindAllOptions\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            interface\n            UserStats\n            \n                0 %\n                (0/6)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^11.1.0\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.1.0\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/passport : ^11.0.5\n        \n            @nestjs/platform-express : ^11.1.0\n        \n            @nestjs/platform-socket.io : ^11.1.0\n        \n            @nestjs/schedule : ^6.0.0\n        \n            @nestjs/swagger : ^11.2.0\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            @nestjs/websockets : ^11.1.0\n        \n            @types/nodemailer : ^6.4.17\n        \n            @types/qrcode : ^1.5.5\n        \n            @types/speakeasy : ^2.0.10\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            date-fns : ^4.1.0\n        \n            dotenv : ^16.5.0\n        \n            minio : ^8.0.5\n        \n            multer : ^2.0.0\n        \n            mysql2 : ^3.14.1\n        \n            nodemailer : ^7.0.4\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            qrcode : ^1.5.4\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.2\n        \n            socket.io : ^4.8.1\n        \n            speakeasy : ^2.0.0\n        \n            swagger-ui-express : ^5.0.1\n        \n            typeorm : ^0.3.22\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ApplicationStatus   (src/.../document-application.entity.ts)\n                        \n                        \n                            ApplicationType   (src/.../document-application.entity.ts)\n                        \n                        \n                            AppointmentStatus   (src/.../appointment.entity.ts)\n                        \n                        \n                            CounterStatus   (src/.../counter.entity.ts)\n                        \n                        \n                            QueueStatus   (src/.../queue.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/document-applications/entities/document-application.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        ApplicationStatus\n                    \n                \n                        \n                            \n                                 PENDING\n                            \n                        \n                        \n                            \n                                Value : Pending\n                            \n                        \n                        \n                            \n                                 PROCESSING\n                            \n                        \n                        \n                            \n                                Value : Processing\n                            \n                        \n                        \n                            \n                                 APPROVED\n                            \n                        \n                        \n                            \n                                Value : Approved\n                            \n                        \n                        \n                            \n                                 REJECTED\n                            \n                        \n                        \n                            \n                                Value : Rejected\n                            \n                        \n                        \n                            \n                                 DECLINE\n                            \n                        \n                        \n                            \n                                Value : Decline\n                            \n                        \n                        \n                            \n                                 READY_FOR_PICKUP\n                            \n                        \n                        \n                            \n                                Value : Ready for Pickup\n                            \n                        \n                        \n                            \n                                 REQUIRES_ADDITIONAL_INFO\n                            \n                        \n                        \n                            \n                                Value : Requires Additional Info\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ApplicationType\n                    \n                \n                        \n                            \n                                 BIRTH_CERTIFICATE\n                            \n                        \n                        \n                            \n                                Value : Birth Certificate\n                            \n                        \n                        \n                            \n                                 MARRIAGE_CERTIFICATE\n                            \n                        \n                        \n                            \n                                Value : Marriage Certificate\n                            \n                        \n                        \n                            \n                                 MARRIAGE_LICENSE\n                            \n                        \n                        \n                            \n                                Value : Marriage License\n                            \n                        \n                        \n                            \n                                 DEATH_CERTIFICATE\n                            \n                        \n                        \n                            \n                                Value : Death Certificate\n                            \n                        \n                        \n                            \n                                 BUSINESS_PERMIT\n                            \n                        \n                        \n                            \n                                Value : Business Permit\n                            \n                        \n            \n        \n\n    src/modules/appointment/entities/appointment.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        AppointmentStatus\n                    \n                \n                        \n                            \n                                 PENDING\n                            \n                        \n                        \n                            \n                                Value : pending\n                            \n                        \n                        \n                            \n                                 CONFIRMED\n                            \n                        \n                        \n                            \n                                Value : confirmed\n                            \n                        \n                        \n                            \n                                 COMPLETED\n                            \n                        \n                        \n                            \n                                Value : completed\n                            \n                        \n                        \n                            \n                                 CANCELLED\n                            \n                        \n                        \n                            \n                                Value : cancelled\n                            \n                        \n            \n        \n\n    src/modules/counter/entities/counter.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        CounterStatus\n                    \n                \n                        \n                            \n                                 ACTIVE\n                            \n                        \n                        \n                            \n                                Value : active\n                            \n                        \n                        \n                            \n                                 INACTIVE\n                            \n                        \n                        \n                            \n                                Value : inactive\n                            \n                        \n            \n        \n\n    src/modules/queue/entities/queue.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        QueueStatus\n                    \n                \n                        \n                            \n                                 PENDING\n                            \n                        \n                        \n                            \n                                Value : pending\n                            \n                        \n                        \n                            \n                                 SERVING\n                            \n                        \n                        \n                            \n                                Value : serving\n                            \n                        \n                        \n                            \n                                 COMPLETED\n                            \n                        \n                        \n                            \n                                Value : completed\n                            \n                        \n                        \n                            \n                                 CANCELLED\n                            \n                        \n                        \n                            \n                                Value : cancelled\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            seedDatabaseIfNeeded   (src/.../main.ts)\n                        \n                        \n                            testMinIOConnection   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seedDatabaseIfNeeded\n                        \n                    \n                \n            \n            \n                \nseedDatabaseIfNeeded(dataSource: DataSource)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dataSource\n                                            \n                                                        DataSource\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        testMinIOConnection\n                        \n                    \n                \n            \n            \n                \ntestMinIOConnection()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AnnouncementModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppointmentModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DocumentApplicationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        QueueModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RolesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AnnouncementModule\n\n\n\ncluster_AnnouncementModule_exports\n\n\n\ncluster_AnnouncementModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppointmentModule\n\n\n\ncluster_AppointmentModule_exports\n\n\n\ncluster_AppointmentModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_DocumentApplicationsModule\n\n\n\ncluster_DocumentApplicationsModule_exports\n\n\n\ncluster_DocumentApplicationsModule_providers\n\n\n\ncluster_QueueModule\n\n\n\ncluster_QueueModule_exports\n\n\n\ncluster_QueueModule_providers\n\n\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_exports\n\n\n\ncluster_RolesModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAnnouncementService \n\nAnnouncementService \n\n\n\nAnnouncementModule\n\nAnnouncementModule\n\nAnnouncementService  -->\n\nAnnouncementModule->AnnouncementService \n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAnnouncementModule->AppModule\n\n\n\n\n\nAnnouncementService\n\nAnnouncementService\n\nAnnouncementModule -->\n\nAnnouncementService->AnnouncementModule\n\n\n\n\n\nAppointmentModule\n\nAppointmentModule\n\nAppModule -->\n\nAppointmentModule->AppModule\n\n\n\n\n\nAppointmentService \n\nAppointmentService \n\nAppointmentService  -->\n\nAppointmentModule->AppointmentService \n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nEmailService \n\nEmailService \n\nEmailService  -->\n\nAuthModule->EmailService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nOTPService \n\nOTPService \n\nOTPService  -->\n\nAuthModule->OTPService \n\n\n\n\n\nDocumentApplicationsModule\n\nDocumentApplicationsModule\n\nAppModule -->\n\nDocumentApplicationsModule->AppModule\n\n\n\n\n\nDocumentApplicationsService \n\nDocumentApplicationsService \n\nDocumentApplicationsService  -->\n\nDocumentApplicationsModule->DocumentApplicationsService \n\n\n\n\n\nMinioService \n\nMinioService \n\nMinioService  -->\n\nDocumentApplicationsModule->MinioService \n\n\n\n\n\nQueueModule\n\nQueueModule\n\nAppModule -->\n\nQueueModule->AppModule\n\n\n\n\n\nQueueGateway \n\nQueueGateway \n\nQueueGateway  -->\n\nQueueModule->QueueGateway \n\n\n\n\n\nQueueSchedulerService \n\nQueueSchedulerService \n\nQueueSchedulerService  -->\n\nQueueModule->QueueSchedulerService \n\n\n\n\n\nQueueService \n\nQueueService \n\nQueueService  -->\n\nQueueModule->QueueService \n\n\n\n\n\nRolesModule\n\nRolesModule\n\nAuthModule -->\n\nRolesModule->AuthModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nRolesModule->UsersModule\n\n\n\nAppModule -->\n\nRolesModule->AppModule\n\n\n\n\n\nRolesService \n\nRolesService \n\nRolesService  -->\n\nRolesModule->RolesService \n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nAuthModule -->\n\nEmailService->AuthModule\n\n\n\nAppModule -->\n\nEmailService->AppModule\n\n\n\n\n\nOTPService\n\nOTPService\n\nAuthModule -->\n\nOTPService->AuthModule\n\n\n\nAppModule -->\n\nOTPService->AppModule\n\n\n\n\n\nAppointmentService\n\nAppointmentService\n\nAppointmentModule -->\n\nAppointmentService->AppointmentModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nDocumentApplicationsService\n\nDocumentApplicationsService\n\nDocumentApplicationsModule -->\n\nDocumentApplicationsService->DocumentApplicationsModule\n\n\n\n\n\nMinioService\n\nMinioService\n\nDocumentApplicationsModule -->\n\nMinioService->DocumentApplicationsModule\n\n\n\n\n\nQueueSchedulerService\n\nQueueSchedulerService\n\nQueueModule -->\n\nQueueSchedulerService->QueueModule\n\n\n\n\n\nQueueService\n\nQueueService\n\nQueueModule -->\n\nQueueService->QueueModule\n\n\n\n\n\nRolesService\n\nRolesService\n\nRolesModule -->\n\nRolesService->RolesModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        8 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    9 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    11 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    15 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    23 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    8 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            databaseConfig   (src/.../database.config.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                        \n                            User   (src/.../user.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/database.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        databaseConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TypeOrmModuleOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'mysql',\n  host: process.env.DB_HOST || 'localhost',\n  port: parseInt(process.env.DB_PORT || '3306'),\n  username: process.env.DB_USERNAME || 'root',\n  password: process.env.DB_PASSWORD || '',\n  database: process.env.DB_NAME || 'bulak_smart_connect',\n  entities: [__dirname + '/../**/*.entity{.ts,.js}'],\n  synchronize: process.env.NODE_ENV !== 'production',\n  logging: process.env.NODE_ENV !== 'production',\n}\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: string[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        User\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext): AuthenticatedUser => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.user;\n  },\n)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
