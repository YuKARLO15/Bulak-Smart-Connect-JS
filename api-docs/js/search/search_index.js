var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.359,1,2.237]],["body/controllers/AppController.html",[0,2.162,1,3.558,2,1.86,3,0.368,4,0.324,5,0.324,6,3.618,7,0.46,8,2.012,9,5.176,10,6.139,11,1.63,12,0.028,13,0.981,14,4.29,15,2.012,16,0.836,17,5.368,18,4.29,19,2.952,20,0.46,21,0.784,22,3.222,23,3.618,24,0.368,25,0.087,26,1.86,27,2.844,28,1.52,29,4.29,30,4.29,31,0.021,32,0.021]],["title/modules/AppModule.html",[33,1.265,34,2.237]],["body/modules/AppModule.html",[1,3.069,2,1.705,3,0.232,4,0.205,5,0.205,12,0.028,16,0.561,20,0.527,21,0.495,22,3.094,23,2.286,24,0.232,25,0.055,31,0.016,32,0.016,33,1.735,34,4.252,35,1.268,36,1.372,37,1.63,38,1.63,39,1.372,40,2.784,41,1.491,42,2.286,43,2.286,44,2.286,45,3.382,46,3.382,47,3.094,48,3.382,49,2.365,50,1.63,51,1.491,52,2.711,53,2.784,54,3.934,55,3.367,56,1.63,57,1.63,58,1.175,59,2.006,60,2.711,61,2.711,62,2.711,63,2.711,64,2.286,65,2.711,66,2.711,67,2.711,68,2.007,69,2.711,70,1.797,71,2.286,72,0.353,73,2.286,74,2.286,75,2.711,76,2.286,77,2.711,78,1.63,79,2.711,80,1.491,81,2.711,82,2.286,83,2.711,84,1.268,85,2.286,86,2.286,87,3.317,88,3.934,89,3.367,90,2.607,91,2.711,92,4.548,93,2.286,94,2.711,95,1.63,96,2.711,97,2.711,98,2.711,99,2.711,100,2.607,101,2.711,102,2.711,103,2.711,104,1.991,105,5.08,106,3.759,107,3.317,108,1.016,109,2.711,110,3.934,111,3.934,112,2.286,113,2.711,114,2.286,115,2.711,116,2.343,117,2.711,118,2.711,119,2.911,120,3.934,121,2.711,122,2.711,123,2.711,124,2.711,125,2.711,126,2.711,127,2.711,128,2.711,129,2.711,130,2.711,131,2.711,132,2.711]],["title/injectables/AppService.html",[22,1.856,133,0.891]],["body/injectables/AppService.html",[3,0.409,4,0.36,5,0.36,7,0.512,8,2.147,9,5.369,12,0.027,13,0.872,15,1.788,16,0.817,20,0.409,21,0.872,22,3.15,24,0.409,25,0.097,28,1.351,31,0.023,32,0.023,133,1.512,134,2.414,135,4.022,136,4.77,137,4.77,138,4.77]],["title/controllers/AuthController.html",[0,1.359,139,2.029]],["body/controllers/AuthController.html",[0,1.214,2,1.307,3,0.258,4,0.227,5,0.227,7,0.323,8,1.591,11,1.492,12,0.028,13,0.898,15,1.841,16,0.606,20,0.482,21,0.551,24,0.258,25,0.061,26,1.307,28,1.391,31,0.017,32,0.017,72,0.641,95,1.813,104,2.95,108,1.13,116,1.526,139,2.552,140,2.231,141,2.231,142,3.015,143,3.579,144,3.141,145,3.579,146,3.015,147,2.698,148,3.015,149,3.015,150,1.978,151,1.297,152,1.391,153,3.579,154,2.542,155,3.294,156,3.579,157,3.015,158,2.813,159,2.542,160,3.294,161,3.579,162,3.015,163,2.231,164,2.231,165,2.231,166,3.256,167,2.552,168,2.486,169,2.231,170,2.231,171,2.231,172,1.658,173,2.542,174,2.231,175,1.214,176,1.526,177,1.044,178,1.813,179,1.289,180,1.526,181,1.053,182,2.542,183,2.542,184,2.231,185,2.542,186,2.231,187,2.813,188,2.542,189,2.231,190,3.635,191,2.148,192,1.84,193,2.542,194,2.542,195,2.542,196,2.542,197,2.542,198,2.542,199,2.542,200,2.542,201,2.542,202,2.542,203,2.542,204,2.231,205,2.542,206,2.542,207,2.231,208,2.334,209,1.998,210,2.542,211,2.542,212,2.542,213,3.579,214,1.526,215,1.813,216,1.13,217,2.542]],["title/modules/AuthModule.html",[33,1.265,45,2.029]],["body/modules/AuthModule.html",[2,2.001,3,0.292,4,0.257,5,0.257,12,0.028,20,0.553,21,0.622,24,0.292,25,0.069,28,0.964,31,0.018,32,0.018,33,1.963,35,1.592,36,1.723,37,2.047,38,2.047,39,1.723,40,3.149,41,2.88,45,3.946,47,3.329,49,2.775,50,2.047,51,1.872,53,2.775,55,3.472,56,2.047,57,2.047,58,1.476,64,2.87,70,2.256,71,2.87,139,3.149,168,3.321,169,2.519,177,0.837,218,2.87,219,3.404,220,2.87,221,2.87,222,3.609,223,3.404,224,3.404,225,2.519,226,4.616,227,2.047,228,1.872,229,3.404,230,3.404,231,3.404,232,3.404,233,2.256,234,3.404,235,3.404,236,3.404,237,3.404,238,3.404,239,3.404,240,3.404,241,2.87]],["title/injectables/AuthService.html",[133,0.891,168,1.708]],["body/injectables/AuthService.html",[3,0.157,4,0.138,5,0.138,7,0.196,8,1.092,12,0.028,13,0.881,15,1.696,16,0.416,20,0.464,21,0.334,24,0.157,25,0.037,28,1.174,31,0.012,32,0.012,58,0.793,72,0.629,78,2.899,80,3.115,104,2.866,106,2.156,108,2.223,112,3.063,116,2.56,133,0.769,134,0.925,143,2.457,144,2.156,145,2.457,150,1.942,151,1.386,152,1.366,154,2.457,155,3.051,158,2.408,159,2.457,160,2.652,167,1.1,168,1.475,170,1.353,171,1.353,177,1.418,178,1.1,179,0.885,180,2.866,181,1.58,184,1.353,186,1.353,187,2.746,189,1.353,190,3.066,191,2.44,192,1.962,208,1.006,209,2.408,215,1.752,225,1.353,228,1.006,242,1.542,243,3,244,2.914,245,2.914,246,1.603,247,1.829,248,2.746,249,5.058,250,2.56,251,1.829,252,2.457,253,1.829,254,1.829,255,0.855,256,1.829,257,1.829,258,1.353,259,1.829,260,1.829,261,2.914,262,1.829,263,1.829,264,1.829,265,1.353,266,0.793,267,2.457,268,1.829,269,1.542,270,3.494,271,4.144,272,1.829,273,3.633,274,3.633,275,2.688,276,3.063,277,3.063,278,3.633,279,3.633,280,3.633,281,3.633,282,1.829,283,1.353,284,3.063,285,1.829,286,1.353,287,1.829,288,1.829,289,1.829,290,1.829,291,1.829,292,2.914,293,3.633,294,1.829,295,1.829,296,1.829,297,1.829,298,4.144,299,1.829,300,2.914,301,1.353,302,1.829,303,1.829,304,3.066,305,1.829,306,1.829,307,1.542,308,1.829,309,2.914,310,2.914,311,2.914,312,1.829,313,2.914,314,2.914,315,1.829,316,1.603,317,2.688,318,1.006,319,2.156,320,1.353,321,1.542,322,1.542,323,1.829,324,2.457,325,2.457,326,1.829,327,1.829,328,3.063,329,2.914,330,1.829,331,2.914,332,1.829,333,2.914,334,1.829,335,1.829,336,1.829]],["title/entities/Counter.html",[337,1.265,338,1.708]],["body/entities/Counter.html",[3,0.292,4,0.257,5,0.257,7,0.366,11,1.784,12,0.027,13,1.074,16,0.66,19,2.884,20,0.396,24,0.396,25,0.069,31,0.018,32,0.018,68,2.273,72,0.79,84,1.596,151,1.551,179,1.707,208,3.091,214,1.727,216,1.966,266,1.479,337,1.279,338,2.34,339,2.525,340,1.309,341,4.422,342,5.244,343,2.625,344,2.877,345,4.623,346,3.379,347,2.525,348,5.621,349,3.899,350,4.623,351,3.412,352,2.262,353,3.412,354,3.153,355,3.412,356,3.532,357,3.412,358,4.347,359,2.877,360,4.954,361,3.064,362,3.412,363,3.899,364,3.421,365,3.412,366,3.899,367,3.899,368,3.412,369,3.412]],["title/classes/CreateQueueDto.html",[25,0.069,370,2.029]],["body/classes/CreateQueueDto.html",[3,0.297,4,0.261,5,0.261,7,0.371,11,1.92,12,0.027,13,1.155,16,0.95,20,0.297,24,0.297,25,0.095,31,0.018,32,0.018,72,0.824,152,1.79,179,1.418,255,2.47,316,2.905,318,2.905,340,1.322,370,2.807,371,1.903,372,5.401,373,2.561,374,3.908,375,3.908,376,3.908,377,3.908,378,3.908,379,3.908,380,3.461,381,4.184,382,3.461,383,3.461,384,3.461,385,3.461,386,3.461,387,3.461,388,4.5,389,3.461,390,4.19,391,4.368,392,2.081]],["title/injectables/JwtAuthGuard.html",[133,0.891,172,1.856]],["body/injectables/JwtAuthGuard.html",[3,0.421,4,0.371,5,0.371,12,0.027,20,0.5,21,0.898,24,0.421,25,0.1,31,0.023,32,0.023,133,1.54,134,2.487,172,3.207,176,2.951,227,2.955,393,4.145,394,4.145,395,5.832,396,4.916]],["title/interfaces/JwtPayload.html",[175,1.359,397,2.237]],["body/interfaces/JwtPayload.html",[3,0.299,4,0.264,5,0.264,7,0.375,12,0.028,13,0.639,16,0.87,20,0.486,21,0.639,24,0.299,25,0.071,26,1.515,28,0.99,31,0.019,32,0.019,55,3.518,56,2.101,72,0.692,100,2.316,108,2.128,133,1.24,152,1.331,167,2.101,175,1.407,176,1.768,178,3.561,179,1.612,180,3.086,181,2.13,191,2.377,192,2.037,214,1.768,215,2.101,222,1.922,227,2.101,233,2.316,255,2.197,301,3.928,304,2.586,340,1.331,397,3.762,398,2.316,399,2.586,400,2.947,401,2.947,402,2.947,403,2.586,404,2.947,405,4.476,406,2.947,407,2.947,408,2.947,409,2.316,410,2.947,411,2.947,412,2.947,413,2.947,414,2.947,415,2.947,416,2.947,417,2.947,418,2.947,419,2.947,420,2.947,421,2.947,422,2.947]],["title/injectables/JwtStrategy.html",[133,0.891,222,1.856]],["body/injectables/JwtStrategy.html",[3,0.294,4,0.259,5,0.259,7,0.369,8,1.741,12,0.028,13,0.962,15,1.288,16,0.663,20,0.483,21,0.628,24,0.294,25,0.07,26,1.49,28,0.973,31,0.018,32,0.018,55,4.023,56,2.066,72,0.606,100,2.278,108,2.113,133,1.227,134,1.739,150,1.871,151,1.227,152,1.316,167,2.066,175,1.384,176,2.351,178,2.793,179,1.044,180,2.663,181,1.838,191,2.351,192,2.014,214,1.739,215,2.066,222,2.555,227,2.066,233,2.278,246,1.89,255,2.172,301,4.171,304,2.543,324,3.917,397,4.023,399,2.543,400,2.898,401,2.898,402,2.898,403,2.543,404,3.917,405,4.438,406,2.898,407,2.898,408,2.898,409,2.278,410,2.898,411,2.898,412,2.898,413,2.898,414,2.898,415,3.917,416,2.898,417,2.898,418,2.898,419,2.898,420,2.898,421,2.898,422,2.898,423,3.436,424,3.436,425,3.436]],["title/classes/LoginDto.html",[25,0.069,155,1.856]],["body/classes/LoginDto.html",[3,0.377,4,0.332,5,0.332,7,0.471,11,1.655,12,0.027,13,0.996,16,0.883,20,0.377,24,0.377,25,0.12,31,0.022,32,0.022,72,0.711,80,3.257,144,4.032,155,3.257,177,1.34,340,1.543,371,2.417,381,3.252,390,3.611,391,4.581,392,2.642,426,3.705,427,2.642,428,4.594,429,5.922,430,4.394,431,4.394]],["title/entities/Queue.html",[337,1.265,343,1.463]],["body/entities/Queue.html",[3,0.244,4,0.215,5,0.215,7,0.306,11,1.863,12,0.028,13,1.121,16,0.742,19,2.619,20,0.408,24,0.349,25,0.058,31,0.016,32,0.016,68,2.698,72,0.812,84,1.332,151,1.452,179,1.579,214,1.442,216,1.785,266,1.235,337,1.068,338,3.104,340,1.155,343,2.064,344,2.402,346,3.623,352,3.445,354,2.863,356,3.44,359,2.402,360,4.638,361,2.703,363,3.438,432,2.108,433,4.015,434,4.015,435,3.523,436,4.638,437,4.015,438,3.523,439,3.846,440,4.078,441,2.849,442,3.438,443,2.849,444,4.078,445,2.849,446,2.402,447,3.438,448,2.849,449,2.859,450,2.849,451,4.078,452,2.849,453,4.078,454,2.849,455,2.849,456,4.078,457,3.017,458,2.849,459,3.307,460,2.849,461,4.078,462,3.438,463,2.108,464,2.108,465,3.017,466,3.017,467,3.017,468,3.017,469,2.849,470,2.402]],["title/controllers/QueueController.html",[0,1.359,471,2.237]],["body/controllers/QueueController.html",[0,0.869,2,0.935,3,0.185,4,0.163,5,0.163,7,0.231,8,1.243,11,1.885,12,0.028,13,1.135,15,2.327,16,0.911,19,1.824,20,0.419,21,0.394,24,0.185,25,0.044,26,0.935,27,1.43,28,1.758,31,0.013,32,0.013,72,0.772,95,1.994,141,1.597,150,2.295,151,1.536,152,1.614,163,2.99,164,2.455,216,2.082,275,2.455,343,0.935,370,3.107,438,2.455,459,2.727,471,2.199,472,1.82,473,2.797,474,2.797,475,2.797,476,3.006,477,2.797,478,2.797,479,4.536,480,2.199,481,4.536,482,4.536,483,3.824,484,2.797,485,2.797,486,3.824,487,2.455,488,2.158,489,2.455,490,3.317,491,2.158,492,1.82,493,3.317,494,2.158,495,2.455,496,1.82,497,2.158,498,2.158,499,1.82,500,3.317,501,2.158,502,1.82,503,3.317,504,2.158,505,3.317,506,2.158,507,1.43,508,2.797,509,2.158,510,3.317,511,2.158,512,3.317,513,2.158,514,3.317,515,2.158,516,2.158,517,3.317,518,2.158,519,2.158,520,3.317,521,2.158,522,3.317,523,2.158,524,1.82,525,3.34,526,3.317,527,2.158,528,2.158,529,1.82,530,3.317,531,1.597,532,2.158,533,2.158,534,2.158,535,2.045,536,1.597,537,1.82,538,2.797,539,1.82,540,1.43,541,2.158,542,2.158,543,2.158,544,2.158,545,2.158,546,2.158,547,2.158,548,2.158,549,2.158,550,2.158,551,1.82,552,2.158,553,2.158,554,2.158,555,2.158,556,2.158,557,2.158,558,2.158,559,2.158,560,2.158,561,2.158,562,2.158,563,2.158,564,2.158,565,2.158]],["title/entities/QueueDetails.html",[337,1.265,449,1.856]],["body/entities/QueueDetails.html",[3,0.22,4,0.193,5,0.193,7,0.275,11,1.893,12,0.027,13,1.139,16,0.906,20,0.384,24,0.22,25,0.052,31,0.015,32,0.015,68,2.59,72,0.813,84,1.198,90,2.502,151,1.604,177,1.403,179,1.675,208,2.076,216,1.68,228,1.409,255,2.096,266,1.111,316,2.465,318,2.465,337,0.96,340,1.069,343,2.59,346,3.592,347,1.896,349,4.17,352,3.879,354,2.695,356,3.653,364,3.317,374,3.317,375,3.317,376,3.317,377,3.317,378,3.317,449,2.076,566,5.31,567,2.161,568,3.317,569,2.161,570,2.562,571,3.775,572,2.562,573,3.183,574,2.562,575,2.562,576,3.183,577,2.562,578,3.775,579,2.562,580,3.775,581,2.562,582,3.183,583,3.775,584,4.945,585,2.562,586,4.945,587,3.775,588,2.562,589,2.562,590,3.775,591,2.562,592,4.17,593,3.775,594,2.562,595,2.562,596,3.779,597,2.562,598,2.562,599,2.562]],["title/classes/QueueGateway.html",[25,0.069,600,1.856]],["body/classes/QueueGateway.html",[3,0.199,4,0.175,5,0.175,7,0.249,8,1.316,11,1.431,12,0.028,13,1.084,15,2.07,20,0.404,21,0.425,24,0.199,25,0.047,27,3.123,28,1.198,31,0.014,32,0.014,68,1.007,70,1.54,72,0.759,89,1.54,90,1.54,95,3.419,104,2.945,108,1.316,116,2.385,150,2.29,151,1.501,152,1.61,158,2.803,179,1.911,192,1.521,243,3.123,246,1.93,307,1.96,338,1.176,340,0.994,343,1.007,361,1.54,371,1.278,487,2.597,495,3.487,535,2.795,536,1.72,568,4.087,600,1.93,601,1.96,602,2.597,603,4.23,604,4.23,605,4.712,606,4.486,607,3.51,608,3.51,609,3.51,610,3.51,611,3.51,612,3.51,613,3.51,614,2.324,615,3.51,616,1.72,617,3.51,618,2.324,619,4.23,620,3.51,621,6.342,622,2.324,623,5.059,624,5.686,625,3.51,626,2.324,627,3.51,628,3.51,629,2.324,630,3.51,631,3.51,632,2.324,633,3.51,634,3.51,635,2.324,636,3.51,637,2.324,638,3.51,639,2.324,640,3.51,641,2.324,642,1.96,643,1.96,644,1.72,645,2.324,646,2.324,647,2.324,648,2.324,649,1.96,650,3.51,651,2.324,652,3.51,653,2.324,654,2.324,655,3.51,656,2.324,657,2.96,658,2.324,659,2.324,660,2.324,661,1.96,662,1.96,663,1.96,664,2.324,665,2.324,666,2.324,667,3.51,668,2.324,669,2.324]],["title/modules/QueueModule.html",[33,1.265,46,2.029]],["body/modules/QueueModule.html",[2,2.155,3,0.326,4,0.287,5,0.287,12,0.027,20,0.553,21,0.696,24,0.326,25,0.077,31,0.02,32,0.02,33,2.076,35,1.78,36,1.926,37,2.288,38,2.288,39,1.926,40,3.329,41,3.045,46,3.881,49,2.989,50,2.288,51,2.093,53,2.288,57,2.288,58,1.65,338,2.516,343,1.65,449,2.734,463,2.816,464,2.816,471,3.67,531,2.816,535,3.378,536,2.816,540,2.523,600,3.55,644,3.679,670,3.209,671,3.209,672,3.209,673,3.806,674,2.816,675,3.209,676,3.806,677,3.209,678,3.209,679,3.806]],["title/injectables/QueueService.html",[133,0.891,535,1.708]],["body/injectables/QueueService.html",[3,0.097,4,0.086,5,0.086,7,0.122,8,0.735,12,0.028,13,0.93,15,1.863,16,0.543,19,2.575,20,0.386,21,0.208,24,0.097,25,0.023,28,1.5,31,0.008,32,0.008,58,0.493,70,0.753,72,0.611,90,0.753,104,3.161,108,2.245,116,3.012,119,1.452,133,0.518,134,0.575,150,1.886,151,1.312,152,1.326,158,3.294,177,0.28,179,1.702,187,2.305,191,1.559,192,1.955,207,0.841,208,1.079,216,1.528,243,2.042,246,1.079,248,3.104,255,0.531,265,0.841,266,0.493,275,1.916,276,0.958,283,1.916,286,2.28,316,0.625,318,0.625,321,0.958,325,0.958,328,0.958,338,2.282,341,1.654,343,2.653,358,1.452,370,2.091,374,0.841,375,0.841,376,0.841,377,0.841,378,0.841,433,1.654,435,2.815,436,3.634,437,0.958,438,2.573,439,2.573,442,2.183,449,1.424,459,1.852,463,0.841,464,0.841,465,2.28,466,0.841,467,1.916,468,0.841,470,2.932,473,1.654,474,1.654,475,2.598,476,2.042,477,1.654,478,1.654,480,1.3,483,2.598,484,1.654,485,1.654,486,2.598,487,2.573,492,1.654,495,2.28,496,1.654,499,1.654,502,1.654,507,1.3,524,1.654,525,2.451,531,0.841,535,0.993,537,0.958,538,1.654,539,0.958,540,0.753,568,3.017,600,2.37,644,0.841,649,0.958,657,3.438,662,2.183,663,0.958,674,0.841,675,0.958,677,0.958,678,0.958,680,0.958,681,1.137,682,2.589,683,2.589,684,1.137,685,1.962,686,1.962,687,1.137,688,1.137,689,1.137,690,1.137,691,1.137,692,1.137,693,1.137,694,1.137,695,1.962,696,1.137,697,1.962,698,1.137,699,1.137,700,1.137,701,0.958,702,1.137,703,1.137,704,1.137,705,1.137,706,0.958,707,2.589,708,1.962,709,1.962,710,1.137,711,1.137,712,1.137,713,3.802,714,1.962,715,2.589,716,2.589,717,1.137,718,1.137,719,1.137,720,1.137,721,1.962,722,4.077,723,1.137,724,1.137,725,1.962,726,1.137,727,1.137,728,1.137,729,1.137,730,1.962,731,0.841,732,0.958,733,1.137,734,1.962,735,1.137,736,1.137,737,2.589,738,1.962,739,1.137,740,1.962,741,1.137,742,1.137,743,1.137,744,1.137,745,1.137,746,1.137,747,1.137,748,1.137,749,1.137,750,1.137,751,3.081,752,1.137,753,3.081,754,2.589,755,2.589,756,2.589,757,2.589,758,1.962,759,1.962,760,1.962,761,1.137,762,1.137,763,1.137,764,2.589,765,1.962,766,1.137,767,3.081,768,1.137,769,1.962,770,1.137,771,2.589,772,1.137,773,1.137,774,1.962,775,1.137,776,1.137,777,1.137,778,1.137,779,1.137,780,1.137,781,1.137,782,0.958,783,1.137,784,1.137,785,1.137,786,1.137,787,1.137,788,1.137,789,1.137,790,0.958,791,3.477,792,1.962,793,2.589,794,1.962,795,0.958,796,1.137,797,1.137,798,1.962,799,1.137,800,1.962,801,1.137,802,1.962,803,1.137,804,1.962,805,1.137,806,1.137,807,1.137,808,1.137,809,1.137,810,1.137,811,1.137,812,1.137,813,1.962,814,1.962,815,1.962,816,1.962,817,1.962,818,1.137,819,1.137,820,1.137,821,1.137,822,1.137,823,1.137,824,1.137,825,1.137,826,2.589,827,1.962,828,1.962,829,1.137,830,1.962,831,1.137,832,1.137,833,1.137,834,1.137,835,1.137,836,1.137,837,1.137,838,1.137]],["title/classes/RegisterDto.html",[25,0.069,160,1.856]],["body/classes/RegisterDto.html",[3,0.282,4,0.249,5,0.249,7,0.353,11,1.925,12,0.027,13,1.159,16,0.96,20,0.282,24,0.282,25,0.105,31,0.018,32,0.018,72,0.827,78,3.097,80,2.833,151,1.36,152,1.77,160,2.833,177,1.111,180,2.606,316,2.833,317,3.811,318,2.833,319,3.811,320,3.811,340,1.279,371,1.813,379,3.811,381,3.811,388,4.1,390,4.251,391,4.435,392,1.982,427,1.982,428,3.808,839,2.779,840,4.515,841,3.296,842,3.296,843,3.296,844,3.296,845,3.296,846,3.296,847,3.296,848,3.296,849,3.296,850,3.296,851,3.296,852,4.515,853,3.296,854,3.296]],["title/interfaces/RequestWithUser.html",[147,1.708,175,1.359]],["body/interfaces/RequestWithUser.html",[0,1.358,3,0.289,4,0.254,5,0.254,7,0.362,12,0.028,16,0.654,20,0.501,21,0.616,24,0.289,25,0.069,26,1.462,28,1.476,31,0.018,32,0.018,72,0.68,95,2.028,104,2.321,108,1.264,116,1.707,139,2.028,140,2.495,147,2.638,153,2.844,155,3.076,156,2.844,160,3.076,161,2.844,163,2.495,164,2.495,165,2.495,166,3.708,167,2.758,168,2.638,169,2.495,170,2.495,171,2.495,172,1.855,173,2.844,174,2.495,175,1.358,176,2.321,177,1.439,178,2.028,179,1.393,180,1.707,181,1.178,182,2.844,183,2.844,184,2.495,185,2.844,186,2.495,187,3.04,188,2.844,189,2.495,190,3.857,191,2.321,192,1.988,193,2.844,194,2.844,195,2.844,196,2.844,197,2.844,198,2.844,199,2.844,200,2.844,201,2.844,202,2.844,203,2.844,204,2.495,205,2.844,206,2.844,207,2.495,208,2.523,209,2.235,210,2.844,211,2.844,212,2.844,213,3.868,214,1.707,215,2.028,216,1.264,217,2.844,340,1.299,398,2.235,489,3.394]],["title/interfaces/RequestWithUser-1.html",[147,1.43,175,1.138,731,2.091]],["body/interfaces/RequestWithUser-1.html",[3,0.338,4,0.297,5,0.297,7,0.423,12,0.028,16,0.562,20,0.482,21,0.72,24,0.338,25,0.08,26,1.708,28,1.44,31,0.02,32,0.02,68,1.708,72,0.734,108,2.111,133,1.343,147,2.573,152,1.44,166,3.944,175,2.048,176,2.573,177,1.515,181,1.376,258,2.916,340,1.44,398,2.612,489,3.763,602,2.916,855,2.916,856,4.288,857,4.288,858,4.748,859,2.916,860,3.371,861,3.323,862,3.323,863,2.369,864,3.323,865,4.288,866,3.323,867,3.323,868,3.323,869,3.323,870,3.323,871,3.323,872,3.323,873,3.323]],["title/entities/Role.html",[337,1.265,874,1.856]],["body/entities/Role.html",[3,0.337,4,0.297,5,0.297,7,0.421,11,1.805,12,0.027,13,1.086,16,0.848,20,0.435,24,0.337,25,0.08,31,0.02,32,0.02,68,2.576,72,0.775,84,1.838,100,3.365,151,1.485,177,1.55,179,1.542,216,2.108,228,2.161,266,1.704,337,1.473,340,1.438,346,3.381,354,3.381,356,3.381,427,3.381,457,2.908,569,3.314,874,2.792,875,3.314,876,5.623,877,3.93,878,3.93,879,3.314,880,3.93,881,3.93,882,4.281,883,3.93,884,4.281,885,3.93]],["title/controllers/RolesController.html",[0,1.359,886,2.237]],["body/controllers/RolesController.html",[0,1.471,2,1.583,3,0.313,4,0.276,5,0.276,7,0.392,8,1.814,11,1.648,12,0.027,13,0.992,15,2.034,16,0.881,20,0.515,21,0.668,24,0.313,25,0.074,26,1.583,27,2.421,28,1.537,31,0.019,32,0.019,72,0.631,141,2.703,150,1.949,151,1.278,152,1.371,165,2.703,172,2.009,174,2.703,181,1.69,204,2.703,216,1.814,250,2.746,255,2.263,476,3.83,480,3.208,507,2.421,508,3.08,529,3.08,551,3.08,863,2.91,886,3.208,887,3.08,888,4.081,889,3.653,890,6.177,891,3.653,892,3.653,893,3.653,894,3.08,895,3.653,896,3.653,897,3.08,898,3.653,899,3.653,900,3.653,901,3.653,902,5.427,903,3.653,904,3.653,905,3.653,906,3.653,907,3.653]],["title/guards/RolesGuard.html",[863,2.029,908,2.497]],["body/guards/RolesGuard.html",[3,0.324,4,0.286,5,0.286,7,0.406,8,1.857,12,0.028,13,0.906,15,1.419,16,0.54,20,0.473,21,0.692,24,0.324,25,0.077,26,1.641,28,1.403,31,0.02,32,0.02,68,1.641,72,0.646,108,2.07,133,1.308,147,1.916,150,1.996,151,1.308,152,1.403,166,3.661,175,1.996,176,1.916,177,1.219,181,1.322,246,2.082,258,3.667,602,2.802,855,2.802,856,4.941,857,4.941,858,5.261,859,2.802,860,3.284,861,3.193,862,3.193,863,2.979,864,4.178,865,4.178,866,3.193,867,3.193,868,3.193,869,3.193,870,3.193,871,3.193,872,3.193,873,3.193,909,3.786,910,3.786,911,3.786,912,3.786,913,3.786]],["title/modules/RolesModule.html",[33,1.265,47,1.856]],["body/modules/RolesModule.html",[2,2.26,3,0.351,4,0.309,5,0.309,12,0.027,20,0.546,21,0.749,24,0.351,25,0.083,31,0.021,32,0.021,33,2.149,35,1.916,36,2.073,37,2.463,38,2.463,39,2.073,40,3.448,41,3.154,47,3.561,49,3.134,50,2.463,51,2.253,53,2.463,57,2.463,58,1.776,177,1.282,228,2.253,250,3.414,874,2.253,886,3.801,897,3.454,914,3.454,915,3.454,916,3.454,917,4.097,918,3.454,919,4.097,920,4.097]],["title/injectables/RolesService.html",[133,0.891,250,1.708]],["body/injectables/RolesService.html",[3,0.225,4,0.198,5,0.198,7,0.281,8,1.439,12,0.028,13,1.016,15,1.995,16,0.648,20,0.456,21,0.479,24,0.225,25,0.053,28,1.416,31,0.015,32,0.015,58,1.137,72,0.694,104,3.251,106,4.52,108,1.995,116,2.814,133,1.014,134,1.327,150,2.144,151,1.587,152,1.507,177,1.413,179,1.902,181,1.942,191,2.299,192,1.969,216,2.085,228,1.442,243,2.545,246,2.112,248,3.808,250,1.943,252,3.831,255,2.338,265,1.94,266,1.137,269,2.211,270,3.238,283,2.841,286,3.362,476,3.315,480,2.545,507,2.545,701,2.211,790,3.238,874,3.16,882,3.238,888,3.238,894,3.238,918,2.211,921,2.211,922,3.84,923,3.84,924,2.622,925,2.622,926,3.84,927,3.84,928,4.543,929,2.622,930,2.622,931,3.84,932,2.622,933,2.622,934,2.622,935,2.622,936,2.622,937,3.84,938,3.84,939,2.622,940,2.622,941,2.622,942,2.622]],["title/classes/UpdateQueueDto.html",[25,0.069,525,2.029]],["body/classes/UpdateQueueDto.html",[3,0.375,4,0.331,5,0.331,7,0.47,11,1.651,12,0.027,13,0.994,16,0.776,19,3.252,20,0.466,24,0.375,25,0.111,31,0.022,32,0.022,72,0.709,152,1.751,340,1.54,371,2.409,373,3.242,379,3.242,388,4.376,390,3.605,392,2.634,434,4.987,459,3.556,525,3.27,540,2.904,943,4.987,944,4.381,945,4.381,946,4.381,947,4.381,948,4.381]],["title/entities/User.html",[177,0.83,337,1.265]],["body/entities/User.html",[3,0.215,4,0.19,5,0.19,7,0.27,11,1.922,12,0.027,13,1.157,16,0.927,20,0.319,24,0.215,25,0.051,31,0.015,32,0.015,68,2.72,72,0.826,78,2.665,80,2.437,84,1.175,151,1.671,177,0.915,179,1.488,180,2.243,181,1.548,214,1.883,216,1.961,266,1.089,284,3.737,316,2.437,317,3.279,318,2.437,319,3.279,320,3.279,337,0.942,340,1.054,346,3.636,347,1.86,352,3.63,354,2.665,356,3.772,364,3.625,435,3.279,439,2.754,446,2.119,447,3.138,457,2.754,462,3.138,573,3.138,576,3.138,582,2.119,592,2.119,596,3.138,874,3.117,879,3.138,884,3.138,949,2.119,950,4.432,951,3.722,952,2.513,953,2.513,954,4.9,955,2.513,956,2.513,957,2.513,958,2.513,959,2.513,960,2.513,961,3.722,962,2.513,963,2.513,964,3.722,965,2.513,966,2.513,967,2.513,968,3.722,969,3.722,970,2.513,971,2.513,972,3.722,973,2.513,974,2.513,975,2.513,976,2.513,977,2.513,978,3.722,979,2.513]],["title/modules/UsersModule.html",[33,1.265,48,2.029]],["body/modules/UsersModule.html",[3,0.414,4,0.365,5,0.365,12,0.027,20,0.529,21,0.884,24,0.414,25,0.098,31,0.023,32,0.023,33,2.164,35,2.26,41,2.658,48,3.471,53,2.906,57,3.471,58,2.095,177,1.189,241,4.076,980,4.834,981,4.834]],["title/coverage.html",[982,3.395]],["body/coverage.html",[0,2.198,1,2.108,5,0.24,6,2.682,12,0.027,22,1.749,25,0.117,31,0.017,32,0.017,39,1.609,59,2.353,72,0.415,133,1.565,135,2.682,139,1.912,140,3.26,147,2.229,155,1.749,160,1.749,168,1.609,172,1.749,175,2.036,177,0.782,181,1.111,192,1.379,222,1.749,242,2.682,250,1.609,337,2.148,338,1.609,339,2.353,343,1.379,370,1.912,372,2.682,373,3.26,393,2.682,394,2.682,397,2.108,399,3.26,426,2.682,432,2.353,449,1.749,471,2.108,472,2.682,525,1.912,535,1.609,566,2.682,567,2.682,600,1.749,601,2.682,680,2.682,713,5.776,839,2.682,855,3.26,860,2.108,863,1.912,874,1.749,875,2.682,886,2.108,887,2.682,908,2.353,921,2.682,943,2.682,949,2.682,982,2.353,983,2.682,984,3.18,985,3.18,986,5.457,987,5.055,988,5.055,989,4.406,990,3.715,991,5.055,992,6.434,993,3.18,994,3.18,995,3.18,996,3.18,997,2.682,998,3.715,999,4.406,1000,2.682,1001,3.18,1002,3.18,1003,3.18,1004,3.18,1005,3.18,1006,3.18]],["title/dependencies.html",[36,2.051,1007,2.383]],["body/dependencies.html",[12,0.028,21,0.798,25,0.089,31,0.021,32,0.021,36,2.21,56,2.626,58,1.893,225,3.232,227,2.626,233,2.895,266,1.893,267,3.683,392,2.626,403,4.016,642,3.683,643,4.577,859,3.232,1008,6.353,1009,4.368,1010,5.428,1011,4.368,1012,5.428,1013,4.368,1014,4.368,1015,4.368,1016,4.368,1017,4.368,1018,4.368,1019,4.368,1020,4.368,1021,4.368,1022,4.368,1023,4.368,1024,4.368,1025,4.368,1026,4.368,1027,4.368,1028,4.368]],["title/miscellaneous/enumerations.html",[1029,1.554,1030,3.418]],["body/miscellaneous/enumerations.html",[7,0.512,12,0.027,31,0.023,32,0.023,339,3.53,358,4.239,366,4.83,367,4.83,432,3.53,459,3.444,465,4.239,466,4.239,467,4.239,468,4.239,616,4.894,1029,2.623,1030,4.022,1031,4.77,1032,4.77]],["title/miscellaneous/functions.html",[1029,1.554,1033,3.418]],["body/miscellaneous/functions.html",[7,0.538,12,0.025,31,0.023,32,0.023,39,3.174,72,0.654,150,2.021,151,1.325,152,1.421,998,4.231,1000,4.978,1029,2.759,1033,4.231,1034,5.903,1035,5.018,1036,6.272]],["title/index.html",[7,0.303,1037,2.826,1038,2.826]],["body/index.html",[4,0.215,12,0.026,31,0.016,32,0.016,51,3.147,89,2.703,92,2.402,114,2.402,119,3.523,209,3.793,248,1.888,277,2.402,322,2.402,427,1.713,606,2.402,661,2.402,674,2.108,706,2.402,732,2.402,782,2.402,795,4.383,982,2.108,983,3.438,1039,2.849,1040,2.849,1041,4.762,1042,4.078,1043,2.849,1044,2.849,1045,2.849,1046,4.078,1047,4.762,1048,2.849,1049,5.198,1050,2.849,1051,5.198,1052,6.026,1053,2.849,1054,5.892,1055,2.849,1056,2.849,1057,4.078,1058,2.849,1059,2.849,1060,4.762,1061,2.849,1062,4.078,1063,2.849,1064,2.849,1065,2.849,1066,2.849,1067,2.849,1068,5.198,1069,6.026,1070,5.722,1071,4.078,1072,2.849,1073,2.849,1074,2.849,1075,2.849,1076,2.849,1077,4.078,1078,2.849,1079,4.078,1080,2.849,1081,4.078,1082,5.722,1083,5.198,1084,2.849,1085,4.078,1086,2.849,1087,2.849,1088,2.849,1089,2.849,1090,5.198,1091,2.849,1092,2.849,1093,2.849,1094,4.078,1095,2.849,1096,2.849,1097,2.849,1098,2.849,1099,2.849,1100,4.078,1101,2.849,1102,2.849,1103,2.849,1104,4.078,1105,2.849,1106,2.849,1107,4.383,1108,4.078,1109,2.849,1110,2.849,1111,2.849,1112,2.849,1113,2.849,1114,2.849,1115,2.849,1116,2.849,1117,4.078,1118,2.849,1119,2.402,1120,2.849,1121,2.849,1122,2.849,1123,2.849,1124,2.849,1125,4.078,1126,2.849,1127,2.849,1128,2.849,1129,2.849,1130,4.078,1131,2.849,1132,2.849,1133,2.849,1134,4.078,1135,4.078,1136,2.849,1137,2.849,1138,2.849,1139,2.849,1140,2.849,1141,2.849,1142,2.849,1143,2.849,1144,2.849,1145,2.849,1146,2.849,1147,2.402,1148,2.849,1149,2.849,1150,2.849,1151,2.849,1152,2.849,1153,2.849,1154,2.402]],["title/modules.html",[35,2.146]],["body/modules.html",[12,0.023,31,0.023,32,0.023,34,3.269,35,2.306,45,2.965,46,2.965,47,2.713,48,2.965,1107,5.429,1119,4.159,1155,6.438,1156,6.438,1157,6.572,1158,4.932]],["title/overview.html",[1159,3.869]],["body/overview.html",[2,1.583,12,0.027,22,2.985,31,0.019,32,0.019,33,1.369,34,4.398,35,1.708,36,1.848,37,2.196,38,2.196,39,1.848,40,2.196,41,2.009,42,3.08,43,3.08,44,3.08,45,3.963,46,3.789,47,3.465,48,3.263,49,2.91,50,2.196,51,2.009,84,1.708,134,1.848,168,3.189,218,3.08,220,3.08,221,3.08,222,3.465,250,3.189,371,2.009,398,2.421,535,3.189,600,3.177,670,3.08,671,3.08,672,3.08,731,2.703,908,2.703,914,3.08,915,3.08,916,3.08,1159,3.08,1160,5.427,1161,3.653,1162,3.653,1163,3.653]],["title/properties.html",[340,1.148,1007,2.383]],["body/properties.html",[12,0.027,31,0.024,32,0.024,340,1.467,427,3.114,1147,4.367,1154,4.367,1164,5.179,1165,5.179,1166,5.179]],["title/miscellaneous/variables.html",[409,2.687,1029,1.554]],["body/miscellaneous/variables.html",[7,0.457,12,0.027,16,0.763,31,0.021,32,0.021,59,3.957,72,0.762,73,3.596,74,3.596,76,3.596,78,2.564,80,2.346,82,3.596,84,1.994,85,3.596,86,3.596,87,3.596,89,3.545,93,3.596,107,4.51,181,2.203,361,3.872,409,2.827,616,4.323,860,3.545,990,3.596,997,3.596,1029,2.346,1167,4.265,1168,5.348,1169,4.265,1170,4.265,1171,4.265,1172,4.265,1173,4.265,1174,4.265,1175,4.265,1176,4.265,1177,4.265,1178,4.265,1179,4.265]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":713,"title":{},"body":{"injectables/QueueService.html":{},"coverage.html":{}}}],["0')}${string(today.getdate()).padstart(2",{"_index":712,"title":{},"body":{"injectables/QueueService.html":{}}}],["0.0.1",{"_index":1165,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1015,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":1024,"title":{},"body":{"dependencies.html":{}}}],["0.3.22",{"_index":1028,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":1020,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":992,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1003,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":1004,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":1002,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":987,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":986,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":988,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":989,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1001,"title":{},"body":{"coverage.html":{}}}],["08:00",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["1",{"_index":731,"title":{"interfaces/RequestWithUser-1.html":{}},"body":{"injectables/QueueService.html":{},"overview.html":{}}}],["1).padstart(2",{"_index":711,"title":{},"body":{"injectables/QueueService.html":{}}}],["1).padstart(4",{"_index":727,"title":{},"body":{"injectables/QueueService.html":{}}}],["1/10",{"_index":996,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":994,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":995,"title":{},"body":{"coverage.html":{}}}],["11.0.0",{"_index":1010,"title":{},"body":{"dependencies.html":{}}}],["11.0.5",{"_index":1011,"title":{},"body":{"dependencies.html":{}}}],["11.1.0",{"_index":1008,"title":{},"body":{"dependencies.html":{}}}],["15",{"_index":730,"title":{},"body":{"injectables/QueueService.html":{}}}],["16.5.0",{"_index":1017,"title":{},"body":{"dependencies.html":{}}}],["1d",{"_index":240,"title":{},"body":{"modules/AuthModule.html":{}}}],["3",{"_index":1163,"title":{},"body":{"overview.html":{}}}],["3.14.1",{"_index":1019,"title":{},"body":{"dependencies.html":{}}}],["33",{"_index":993,"title":{},"body":{"coverage.html":{}}}],["3306",{"_index":1173,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4",{"_index":1161,"title":{},"body":{"overview.html":{}}}],["4.0.1",{"_index":1021,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":1009,"title":{},"body":{"dependencies.html":{}}}],["4.8.1",{"_index":1027,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":1160,"title":{},"body":{"overview.html":{}}}],["5.1.1",{"_index":1014,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":1162,"title":{},"body":{"overview.html":{}}}],["60000",{"_index":834,"title":{},"body":{"injectables/QueueService.html":{}}}],["7.8.2",{"_index":1026,"title":{},"body":{"dependencies.html":{}}}],["__dirname",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["__password",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{}}}],["access_token",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{}}}],["action",{"_index":753,"title":{},"body":{"injectables/QueueService.html":{}}}],["active",{"_index":366,"title":{},"body":{"entities/Counter.html":{},"miscellaneous/enumerations.html":{}}}],["add",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{}}}],["addcounter",{"_index":473,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["addcounter(@body",{"_index":563,"title":{},"body":{"controllers/QueueController.html":{}}}],["addcounter(data",{"_index":488,"title":{},"body":{"controllers/QueueController.html":{}}}],["addcounter(name",{"_index":686,"title":{},"body":{"injectables/QueueService.html":{}}}],["address",{"_index":374,"title":{},"body":{"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{}}}],["afterconnect",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["ahead",{"_index":776,"title":{},"body":{"injectables/QueueService.html":{}}}],["allowing",{"_index":1095,"title":{},"body":{"index.html":{}}}],["already",{"_index":331,"title":{},"body":{"injectables/AuthService.html":{}}}],["amazing",{"_index":1140,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":1070,"title":{},"body":{"index.html":{}}}],["applications",{"_index":1046,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":34,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appointment_type",{"_index":571,"title":{},"body":{"entities/QueueDetails.html":{}}}],["appointmenttype",{"_index":375,"title":{},"body":{"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{}}}],["appservice",{"_index":22,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array.isarray(payload.roles",{"_index":421,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["asc",{"_index":756,"title":{},"body":{"injectables/QueueService.html":{}}}],["assign",{"_index":941,"title":{},"body":{"injectables/RolesService.html":{}}}],["assignrolestouser",{"_index":922,"title":{},"body":{"injectables/RolesService.html":{}}}],["assignrolestouser(userid",{"_index":927,"title":{},"body":{"injectables/RolesService.html":{}}}],["associated",{"_index":803,"title":{},"body":{"injectables/QueueService.html":{}}}],["async",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{}}}],["attempt",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":229,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{}}}],["auth.guard.ts",{"_index":394,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/RequestWithUser.html":{}}}],["auth/auth.module",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/decorators/roles.decorator",{"_index":900,"title":{},"body":{"controllers/RolesController.html":{}}}],["auth/guards/jwt",{"_index":898,"title":{},"body":{"controllers/RolesController.html":{}}}],["auth/guards/roles.guard",{"_index":899,"title":{},"body":{"controllers/RolesController.html":{}}}],["authcontroller",{"_index":139,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["authguard",{"_index":396,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":395,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":45,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1147,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":168,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":1158,"title":{},"body":{"modules.html":{}}}],["average",{"_index":821,"title":{},"body":{"injectables/QueueService.html":{}}}],["averagewaittime",{"_index":826,"title":{},"body":{"injectables/QueueService.html":{}}}],["await",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{}}}],["aws",{"_index":1085,"title":{},"body":{"index.html":{}}}],["backers",{"_index":1141,"title":{},"body":{"index.html":{}}}],["backward",{"_index":976,"title":{},"body":{"entities/User.html":{}}}],["badrequestexception",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('invalid",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{}}}],["based",{"_index":706,"title":{},"body":{"injectables/QueueService.html":{},"index.html":{}}}],["bcrypt",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["bcrypt.compare",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.compare(logindto.password",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{}}}],["before",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["beforeconnect",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["below",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["board",{"_index":1133,"title":{},"body":{"index.html":{}}}],["body",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QueueController.html":{},"interfaces/RequestWithUser.html":{}}}],["boolean",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["bootstrap",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["break",{"_index":780,"title":{},"body":{"injectables/QueueService.html":{}}}],["browse",{"_index":1157,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1155,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1042,"title":{},"body":{"index.html":{}}}],["bulak_smart_connect",{"_index":1178,"title":{},"body":{"miscellaneous/variables.html":{}}}],["calculate",{"_index":820,"title":{},"body":{"injectables/QueueService.html":{}}}],["called",{"_index":804,"title":{},"body":{"injectables/QueueService.html":{}}}],["callnext",{"_index":474,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["callnext(@param('counterid",{"_index":561,"title":{},"body":{"controllers/QueueController.html":{}}}],["callnext(counterid",{"_index":492,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["canactivate",{"_index":856,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":864,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["cancelled",{"_index":468,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{},"miscellaneous/enumerations.html":{}}}],["cancelledcount",{"_index":816,"title":{},"body":{"injectables/QueueService.html":{}}}],["cascade",{"_index":599,"title":{},"body":{"entities/QueueDetails.html":{}}}],["cascade'})@joincolumn({name",{"_index":585,"title":{},"body":{"entities/QueueDetails.html":{}}}],["catch",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["channel",{"_index":1110,"title":{},"body":{"index.html":{}}}],["check",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{},"index.html":{}}}],["checks",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["citizen",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{}}}],["class",{"_index":25,"title":{"classes/CreateQueueDto.html":{},"classes/LoginDto.html":{},"classes/QueueGateway.html":{},"classes/RegisterDto.html":{},"classes/UpdateQueueDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":371,"title":{},"body":{"classes/CreateQueueDto.html":{},"classes/LoginDto.html":{},"classes/QueueGateway.html":{},"classes/RegisterDto.html":{},"classes/UpdateQueueDto.html":{},"overview.html":{}}}],["clicks",{"_index":1094,"title":{},"body":{"index.html":{}}}],["client",{"_index":623,"title":{},"body":{"classes/QueueGateway.html":{}}}],["client.id",{"_index":652,"title":{},"body":{"classes/QueueGateway.html":{}}}],["client.join(`counter_${counterid",{"_index":659,"title":{},"body":{"classes/QueueGateway.html":{}}}],["client.join(`queue_${queueid",{"_index":654,"title":{},"body":{"classes/QueueGateway.html":{}}}],["clients",{"_index":662,"title":{},"body":{"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["cloud",{"_index":1080,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":218,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":220,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":219,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":221,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_queuemodule",{"_index":670,"title":{},"body":{"modules/QueueModule.html":{},"overview.html":{}}}],["cluster_queuemodule_exports",{"_index":671,"title":{},"body":{"modules/QueueModule.html":{},"overview.html":{}}}],["cluster_queuemodule_providers",{"_index":672,"title":{},"body":{"modules/QueueModule.html":{},"overview.html":{}}}],["cluster_rolesmodule",{"_index":914,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_rolesmodule_exports",{"_index":915,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_rolesmodule_providers",{"_index":916,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["code",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["column",{"_index":356,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["column({name",{"_index":352,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["column({nullable",{"_index":569,"title":{},"body":{"entities/QueueDetails.html":{},"entities/Role.html":{}}}],["column({type",{"_index":359,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{}}}],["column({unique",{"_index":879,"title":{},"body":{"entities/Role.html":{},"entities/User.html":{}}}],["come",{"_index":1101,"title":{},"body":{"index.html":{}}}],["compatibility",{"_index":977,"title":{},"body":{"entities/User.html":{}}}],["completed",{"_index":467,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{},"miscellaneous/enumerations.html":{}}}],["completed_at",{"_index":440,"title":{},"body":{"entities/Queue.html":{}}}],["completedat",{"_index":433,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{}}}],["completedcount",{"_index":815,"title":{},"body":{"injectables/QueueService.html":{}}}],["completedqueues",{"_index":823,"title":{},"body":{"injectables/QueueService.html":{}}}],["completedqueues.length",{"_index":827,"title":{},"body":{"injectables/QueueService.html":{}}}],["completedqueues.reduce((total",{"_index":829,"title":{},"body":{"injectables/QueueService.html":{}}}],["completion",{"_index":766,"title":{},"body":{"injectables/QueueService.html":{}}}],["config",{"_index":235,"title":{},"body":{"modules/AuthModule.html":{}}}],["config.get('jwt_secret",{"_index":237,"title":{},"body":{"modules/AuthModule.html":{}}}],["config/database.config",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('db_host",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_name",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_password",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_port",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_username",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('jwt_secret",{"_index":406,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('node_env",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["conflictexception",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{}}}],["conflictexception('email",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{}}}],["conflictexception('username",{"_index":334,"title":{},"body":{"injectables/AuthService.html":{}}}],["conn",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["conn.query(\"set",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["conn.query('set",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["connected",{"_index":651,"title":{},"body":{"classes/QueueGateway.html":{}}}],["connection",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["consistent",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["console.error('login",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('comparing",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('generated",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('login",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["console.log('password",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('register",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["console.log('stored",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('user",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{}}}],["const",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{}}}],["constructor",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{}}}],["constructor(configservice",{"_index":423,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(private",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{}}}],["constructor(queuerepository",{"_index":681,"title":{},"body":{"injectables/QueueService.html":{}}}],["constructor(queueservice",{"_index":614,"title":{},"body":{"classes/QueueGateway.html":{}}}],["constructor(reflector",{"_index":910,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(rolesrepository",{"_index":924,"title":{},"body":{"injectables/RolesService.html":{}}}],["constructor(usersrepository",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["contact_number",{"_index":951,"title":{},"body":{"entities/User.html":{}}}],["contactnumber",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{},"classes/RegisterDto.html":{},"entities/User.html":{}}}],["context",{"_index":913,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":868,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":867,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":869,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/QueueController.html":{},"controllers/RolesController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/QueueController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["controller('queue",{"_index":541,"title":{},"body":{"controllers/QueueController.html":{}}}],["controller('roles",{"_index":901,"title":{},"body":{"controllers/RolesController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/QueueController.html":{},"modules/QueueModule.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"overview.html":{}}}],["convert",{"_index":835,"title":{},"body":{"injectables/QueueService.html":{}}}],["converting",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["cors",{"_index":645,"title":{},"body":{"classes/QueueGateway.html":{}}}],["count",{"_index":714,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter",{"_index":338,"title":{"entities/Counter.html":{}},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"coverage.html":{}}}],["counter.currentqueue",{"_index":442,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{}}}],["counter.currentqueue.completedat",{"_index":788,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter.currentqueue.status",{"_index":787,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter.currentqueueid",{"_index":792,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter.id",{"_index":810,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter.name",{"_index":800,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter/entities/counter.entity",{"_index":464,"title":{},"body":{"entities/Queue.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["counter_number",{"_index":444,"title":{},"body":{"entities/Queue.html":{}}}],["counterid",{"_index":495,"title":{},"body":{"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["countername",{"_index":809,"title":{},"body":{"injectables/QueueService.html":{}}}],["counternumber",{"_index":434,"title":{},"body":{"entities/Queue.html":{},"classes/UpdateQueueDto.html":{}}}],["counterrepository",{"_index":683,"title":{},"body":{"injectables/QueueService.html":{}}}],["counters",{"_index":837,"title":{},"body":{"injectables/QueueService.html":{}}}],["counterstatus",{"_index":358,"title":{},"body":{"entities/Counter.html":{},"injectables/QueueService.html":{},"miscellaneous/enumerations.html":{}}}],["counterstatus.active",{"_index":369,"title":{},"body":{"entities/Counter.html":{}}}],["courses",{"_index":1116,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":982,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":475,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["create(@body",{"_index":542,"title":{},"body":{"controllers/QueueController.html":{}}}],["create(createqueuedto",{"_index":496,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["created",{"_index":716,"title":{},"body":{"injectables/QueueService.html":{}}}],["created_at",{"_index":447,"title":{},"body":{"entities/Queue.html":{},"entities/User.html":{}}}],["createdat",{"_index":435,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{},"entities/User.html":{}}}],["createdatecolumn",{"_index":462,"title":{},"body":{"entities/Queue.html":{},"entities/User.html":{}}}],["createdatecolumn({name",{"_index":446,"title":{},"body":{"entities/Queue.html":{},"entities/User.html":{}}}],["createqueuedto",{"_index":370,"title":{"classes/CreateQueueDto.html":{}},"body":{"classes/CreateQueueDto.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"coverage.html":{}}}],["createqueuedto.address",{"_index":745,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.appointmenttype",{"_index":748,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.firstname",{"_index":742,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.lastname",{"_index":743,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.middleinitial",{"_index":744,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.phonenumber",{"_index":746,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.reasonofvisit",{"_index":747,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.userid",{"_index":741,"title":{},"body":{"injectables/QueueService.html":{}}}],["credentials",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["current",{"_index":786,"title":{},"body":{"injectables/QueueService.html":{}}}],["current_queue_id",{"_index":348,"title":{},"body":{"entities/Counter.html":{}}}],["currentqueue",{"_index":341,"title":{},"body":{"entities/Counter.html":{},"injectables/QueueService.html":{}}}],["currentqueueid",{"_index":342,"title":{},"body":{"entities/Counter.html":{}}}],["data",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"interfaces/RequestWithUser.html":{}}}],["database",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["databaseconfig",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["datasource",{"_index":1036,"title":{},"body":{"miscellaneous/functions.html":{}}}],["date",{"_index":439,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{},"entities/User.html":{}}}],["date(today",{"_index":719,"title":{},"body":{"injectables/QueueService.html":{}}}],["datestr",{"_index":709,"title":{},"body":{"injectables/QueueService.html":{}}}],["datetime",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["debug",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{}}}],["debugging",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["declarations",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"overview.html":{}}}],["decorators",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{}}}],["decorators/roles.decorator",{"_index":861,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["deeper",{"_index":1112,"title":{},"body":{"index.html":{}}}],["default",{"_index":361,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"classes/QueueGateway.html":{},"miscellaneous/variables.html":{}}}],["default_role_id",{"_index":954,"title":{},"body":{"entities/User.html":{}}}],["defaultrole",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{}}}],["defaultroleid",{"_index":950,"title":{},"body":{"entities/User.html":{}}}],["defaultstrategy",{"_index":232,"title":{},"body":{"modules/AuthModule.html":{}}}],["define",{"_index":862,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["defined",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{}}}],["delete",{"_index":530,"title":{},"body":{"controllers/QueueController.html":{}}}],["dependencies",{"_index":36,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":1068,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":1084,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":1077,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":1093,"title":{},"body":{"index.html":{}}}],["description",{"_index":427,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":436,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{}}}],["details.entity",{"_index":463,"title":{},"body":{"entities/Queue.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["details.entity.ts",{"_index":567,"title":{},"body":{"entities/QueueDetails.html":{},"coverage.html":{}}}],["details.entity.ts:14",{"_index":575,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:17",{"_index":589,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:21",{"_index":588,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:24",{"_index":595,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:28",{"_index":594,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:31",{"_index":574,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:34",{"_index":577,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:37",{"_index":579,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:40",{"_index":570,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:43",{"_index":581,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:46",{"_index":591,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:49",{"_index":572,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.queue",{"_index":451,"title":{},"body":{"entities/Queue.html":{}}}],["determine",{"_index":717,"title":{},"body":{"injectables/QueueService.html":{}}}],["development",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["devtools",{"_index":1122,"title":{},"body":{"index.html":{}}}],["disable",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["disconnected",{"_index":653,"title":{},"body":{"classes/QueueGateway.html":{}}}],["discord",{"_index":1109,"title":{},"body":{"index.html":{}}}],["dive",{"_index":1111,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":983,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dotenv",{"_index":1016,"title":{},"body":{"dependencies.html":{}}}],["dropschema",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["dto",{"_index":428,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["dto/create",{"_index":537,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["dto/login.dto",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["dto/register.dto",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["dto/update",{"_index":539,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["e2e",{"_index":1063,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":1043,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":1075,"title":{},"body":{"index.html":{}}}],["email",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"entities/User.html":{}}}],["emailorusername",{"_index":429,"title":{},"body":{"classes/LoginDto.html":{}}}],["endpoint",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["ensure",{"_index":1073,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":1124,"title":{},"body":{"index.html":{}}}],["entities",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["entities/queue",{"_index":678,"title":{},"body":{"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["entities/queue.entity",{"_index":540,"title":{},"body":{"controllers/QueueController.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/UpdateQueueDto.html":{}}}],["entities/role.entity",{"_index":918,"title":{},"body":{"modules/RolesModule.html":{},"injectables/RolesService.html":{}}}],["entities/user.entity",{"_index":981,"title":{},"body":{"modules/UsersModule.html":{}}}],["entity",{"_index":337,"title":{"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{}},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{},"coverage.html":{}}}],["entity('counters",{"_index":368,"title":{},"body":{"entities/Counter.html":{}}}],["entity('queue_details",{"_index":598,"title":{},"body":{"entities/QueueDetails.html":{}}}],["entity('queues",{"_index":469,"title":{},"body":{"entities/Queue.html":{}}}],["entity('roles",{"_index":885,"title":{},"body":{"entities/Role.html":{}}}],["entity('users",{"_index":974,"title":{},"body":{"entities/User.html":{}}}],["entity{.ts,.js",{"_index":86,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["enum",{"_index":360,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{}}}],["enumerations",{"_index":1030,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":408,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["environments",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["error",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["error('jwt_secret",{"_index":407,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["error('user",{"_index":939,"title":{},"body":{"injectables/RolesService.html":{}}}],["error.message",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["eslint",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{}}}],["eslint/no",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{}}}],["estimated_wait_time",{"_index":453,"title":{},"body":{"entities/Queue.html":{}}}],["estimatedwaittime",{"_index":437,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{}}}],["estimation",{"_index":733,"title":{},"body":{"injectables/QueueService.html":{}}}],["example",{"_index":1051,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":857,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["existinguserbyemail",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{}}}],["existinguserbyusername",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{}}}],["exists",{"_index":328,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{}}}],["experience",{"_index":1114,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":239,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{}}}],["exports",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":1013,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["extractjwt",{"_index":401,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":412,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["failed",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{}}}],["false",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"entities/Role.html":{}}}],["fast",{"_index":1088,"title":{},"body":{"index.html":{}}}],["features",{"_index":1097,"title":{},"body":{"index.html":{}}}],["few",{"_index":1090,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["find",{"_index":790,"title":{},"body":{"injectables/QueueService.html":{},"injectables/RolesService.html":{}}}],["findall",{"_index":476,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["findbyname",{"_index":923,"title":{},"body":{"injectables/RolesService.html":{}}}],["findbyname(name",{"_index":931,"title":{},"body":{"injectables/RolesService.html":{}}}],["findbyqueuenumber",{"_index":477,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["findbyqueuenumber(@param('queuenumber",{"_index":553,"title":{},"body":{"controllers/QueueController.html":{}}}],["findbyqueuenumber(queuenumber",{"_index":499,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["findbystatus",{"_index":478,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["findbystatus(@param('status",{"_index":545,"title":{},"body":{"controllers/QueueController.html":{}}}],["findbystatus(status",{"_index":502,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["findcompleted",{"_index":479,"title":{},"body":{"controllers/QueueController.html":{}}}],["findone",{"_index":480,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["findone(@param('id",{"_index":551,"title":{},"body":{"controllers/QueueController.html":{},"controllers/RolesController.html":{}}}],["findone(id",{"_index":507,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["findpending",{"_index":481,"title":{},"body":{"controllers/QueueController.html":{}}}],["findserving",{"_index":482,"title":{},"body":{"controllers/QueueController.html":{}}}],["first_name",{"_index":573,"title":{},"body":{"entities/QueueDetails.html":{},"entities/User.html":{}}}],["firstname",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"entities/User.html":{}}}],["fk_current_queue",{"_index":350,"title":{},"body":{"entities/Counter.html":{}}}],["fk_queue_id",{"_index":587,"title":{},"body":{"entities/QueueDetails.html":{}}}],["fk_user_id",{"_index":593,"title":{},"body":{"entities/QueueDetails.html":{}}}],["focus",{"_index":1096,"title":{},"body":{"index.html":{}}}],["follow",{"_index":1127,"title":{},"body":{"index.html":{}}}],["foreign",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["foreign_key_checks=0",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["foreign_key_checks=1",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["foreignkeyconstraintname",{"_index":349,"title":{},"body":{"entities/Counter.html":{},"entities/QueueDetails.html":{}}}],["format",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{}}}],["forwardref",{"_index":644,"title":{},"body":{"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["found",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{}}}],["framework",{"_index":1041,"title":{},"body":{"index.html":{}}}],["frontend",{"_index":647,"title":{},"body":{"classes/QueueGateway.html":{}}}],["full",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["function",{"_index":999,"title":{},"body":{"coverage.html":{}}}],["functionality",{"_index":534,"title":{},"body":{"controllers/QueueController.html":{}}}],["functions",{"_index":1033,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":1092,"title":{},"body":{"index.html":{}}}],["generate",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{}}}],["get(':id",{"_index":508,"title":{},"body":{"controllers/QueueController.html":{},"controllers/RolesController.html":{}}}],["get(':id')@roles('admin",{"_index":892,"title":{},"body":{"controllers/RolesController.html":{}}}],["get(':id/details",{"_index":517,"title":{},"body":{"controllers/QueueController.html":{}}}],["get(':id/position",{"_index":520,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('completed",{"_index":505,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('counters",{"_index":514,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('health",{"_index":17,"title":{},"body":{"controllers/AppController.html":{}}}],["get('number/:queuenumber",{"_index":500,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('pending",{"_index":510,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('profile",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["get('serving",{"_index":512,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('stats",{"_index":522,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('status/:status",{"_index":503,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('user/:userid",{"_index":905,"title":{},"body":{"controllers/RolesController.html":{}}}],["get('user/:userid')@roles('admin",{"_index":895,"title":{},"body":{"controllers/RolesController.html":{}}}],["get()@roles('admin",{"_index":889,"title":{},"body":{"controllers/RolesController.html":{}}}],["getcounters",{"_index":483,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getprofile",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["getprofile(@request",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["getprofile(req",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(userid",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{}}}],["getqueuedetails",{"_index":484,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["getqueuedetails(@param('id",{"_index":555,"title":{},"body":{"controllers/QueueController.html":{}}}],["getqueuedetails(id",{"_index":516,"title":{},"body":{"controllers/QueueController.html":{}}}],["getqueuedetails(queueid",{"_index":695,"title":{},"body":{"injectables/QueueService.html":{}}}],["getqueueposition",{"_index":485,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["getqueueposition(@param('id",{"_index":557,"title":{},"body":{"controllers/QueueController.html":{}}}],["getqueueposition(id",{"_index":519,"title":{},"body":{"controllers/QueueController.html":{}}}],["getqueueposition(queueid",{"_index":697,"title":{},"body":{"injectables/QueueService.html":{}}}],["getstats",{"_index":486,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["getting",{"_index":1037,"title":{"index.html":{}},"body":{}}],["getuserroles",{"_index":888,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["getuserroles(@param('userid",{"_index":906,"title":{},"body":{"controllers/RolesController.html":{}}}],["getuserroles(userid",{"_index":894,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["global",{"_index":667,"title":{},"body":{"classes/QueueGateway.html":{}}}],["graph",{"_index":1119,"title":{},"body":{"index.html":{},"modules.html":{}}}],["grow",{"_index":1137,"title":{},"body":{"index.html":{}}}],["guard",{"_index":908,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":909,"title":{},"body":{"guards/RolesGuard.html":{}}}],["guards/jwt",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["handleconnection",{"_index":607,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handleconnection(client",{"_index":620,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handledisconnect",{"_index":608,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handledisconnect(client",{"_index":625,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlegetqueueposition",{"_index":609,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlegetqueueposition(client",{"_index":627,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoincounter",{"_index":610,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoincounter(client",{"_index":630,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoinqueue",{"_index":611,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoinqueue(client",{"_index":633,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handling",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["hands",{"_index":1113,"title":{},"body":{"index.html":{}}}],["handy",{"_index":1102,"title":{},"body":{"index.html":{}}}],["hash",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{}}}],["healthcheck",{"_index":10,"title":{},"body":{"controllers/AppController.html":{}}}],["hello",{"_index":137,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":1117,"title":{},"body":{"index.html":{}}}],["here",{"_index":1145,"title":{},"body":{"index.html":{}}}],["hit",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["host",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["https://nestjs.com",{"_index":1151,"title":{},"body":{"index.html":{}}}],["id",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{},"entities/Counter.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"entities/User.html":{}}}],["identifier",{"_index":984,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":413,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["implement",{"_index":533,"title":{},"body":{"controllers/QueueController.html":{}}}],["implements",{"_index":602,"title":{},"body":{"classes/QueueGateway.html":{},"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["import",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{}}}],["imports",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}}}],["inactive",{"_index":367,"title":{},"body":{"entities/Counter.html":{},"miscellaneous/enumerations.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{}}}],["information",{"_index":1078,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":1099,"title":{},"body":{"index.html":{}}}],["inject",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["inject(forwardref",{"_index":649,"title":{},"body":{"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["injectable",{"_index":133,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"coverage.html":{}}}],["injectables",{"_index":134,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{},"overview.html":{}}}],["injectrepository",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{}}}],["injectrepository(counter",{"_index":705,"title":{},"body":{"injectables/QueueService.html":{}}}],["injectrepository(queue",{"_index":703,"title":{},"body":{"injectables/QueueService.html":{}}}],["injectrepository(queuedetails",{"_index":704,"title":{},"body":{"injectables/QueueService.html":{}}}],["injectrepository(role",{"_index":935,"title":{},"body":{"injectables/RolesService.html":{}}}],["injectrepository(user",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RolesService.html":{}}}],["install",{"_index":1091,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":1053,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["interact",{"_index":1120,"title":{},"body":{"index.html":{}}}],["interface",{"_index":175,"title":{"interfaces/JwtPayload.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["interfaces",{"_index":398,"title":{},"body":{"interfaces/JwtPayload.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"overview.html":{}}}],["invalid",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["inversejoincolumn",{"_index":969,"title":{},"body":{"entities/User.html":{}}}],["isemail",{"_index":852,"title":{},"body":{"classes/RegisterDto.html":{}}}],["isemail()@isnotempty",{"_index":842,"title":{},"body":{"classes/RegisterDto.html":{}}}],["isenum",{"_index":947,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["isenum(queuestatus",{"_index":948,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["isenum(queuestatus)@isoptional",{"_index":945,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["isglobal",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["isnan(number(payload.sub",{"_index":418,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["isnotempty",{"_index":391,"title":{},"body":{"classes/CreateQueueDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["isoptional",{"_index":388,"title":{},"body":{"classes/CreateQueueDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateQueueDto.html":{}}}],["ispasswordvalid",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{}}}],["isstring",{"_index":390,"title":{},"body":{"classes/CreateQueueDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateQueueDto.html":{}}}],["isstring()@isnotempty",{"_index":381,"title":{},"body":{"classes/CreateQueueDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["isstring()@isnotempty()@minlength(8",{"_index":849,"title":{},"body":{"classes/RegisterDto.html":{}}}],["isstring()@isoptional",{"_index":379,"title":{},"body":{"classes/CreateQueueDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateQueueDto.html":{}}}],["isvalidemail",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["isvalidemail(email",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["it's",{"_index":774,"title":{},"body":{"injectables/QueueService.html":{}}}],["job",{"_index":1130,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":1132,"title":{},"body":{"index.html":{}}}],["join",{"_index":1143,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":364,"title":{},"body":{"entities/Counter.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["jointable",{"_index":972,"title":{},"body":{"entities/User.html":{}}}],["jwt",{"_index":233,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":230,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":172,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":411,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":224,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":234,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":397,"title":{"interfaces/JwtPayload.html":{}},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["jwtservice",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":222,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":1148,"title":{},"body":{"index.html":{}}}],["keep",{"_index":975,"title":{},"body":{"entities/User.html":{}}}],["key",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["last_name",{"_index":576,"title":{},"body":{"entities/QueueDetails.html":{},"entities/User.html":{}}}],["lastname",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"entities/User.html":{}}}],["lastname}${nameextension",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{}}}],["learn",{"_index":1105,"title":{},"body":{"index.html":{}}}],["legend",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"overview.html":{}}}],["lessthanorequal",{"_index":702,"title":{},"body":{"injectables/QueueService.html":{}}}],["lessthanorequal(new",{"_index":824,"title":{},"body":{"injectables/QueueService.html":{}}}],["lessthanorequal(queue.createdat",{"_index":778,"title":{},"body":{"injectables/QueueService.html":{}}}],["lessthanorequal(queueid",{"_index":779,"title":{},"body":{"injectables/QueueService.html":{}}}],["lessthanorequal(today",{"_index":723,"title":{},"body":{"injectables/QueueService.html":{}}}],["license",{"_index":1154,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1135,"title":{},"body":{"index.html":{}}}],["line",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{}}}],["linkedin",{"_index":1129,"title":{},"body":{"index.html":{}}}],["literal",{"_index":489,"title":{},"body":{"controllers/QueueController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{}}}],["localhost",{"_index":1171,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logger",{"_index":605,"title":{},"body":{"classes/QueueGateway.html":{}}}],["logger(queuegateway.name",{"_index":617,"title":{},"body":{"classes/QueueGateway.html":{}}}],["logging",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["login",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{}}}],["login(@body",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["login(logindto",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logindto",{"_index":155,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["logindto.emailorusername",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto.password",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["looking",{"_index":1079,"title":{},"body":{"index.html":{}}}],["loop",{"_index":1126,"title":{},"body":{"index.html":{}}}],["loss",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["makes",{"_index":1086,"title":{},"body":{"index.html":{}}}],["managing",{"_index":1098,"title":{},"body":{"index.html":{}}}],["many",{"_index":775,"title":{},"body":{"injectables/QueueService.html":{}}}],["manytomany",{"_index":884,"title":{},"body":{"entities/Role.html":{},"entities/User.html":{}}}],["manytomany(undefined",{"_index":881,"title":{},"body":{"entities/Role.html":{}}}],["manytomany(undefined)@jointable({name",{"_index":967,"title":{},"body":{"entities/User.html":{}}}],["manytoone",{"_index":596,"title":{},"body":{"entities/QueueDetails.html":{},"entities/User.html":{}}}],["manytoone(undefined",{"_index":582,"title":{},"body":{"entities/QueueDetails.html":{},"entities/User.html":{}}}],["mark",{"_index":785,"title":{},"body":{"injectables/QueueService.html":{}}}],["matching",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.floor",{"_index":833,"title":{},"body":{"injectables/QueueService.html":{}}}],["mau",{"_index":1082,"title":{},"body":{"index.html":{}}}],["message",{"_index":794,"title":{},"body":{"injectables/QueueService.html":{}}}],["metadata",{"_index":1023,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{}}}],["middle_initial",{"_index":578,"title":{},"body":{"entities/QueueDetails.html":{}}}],["middle_name",{"_index":961,"title":{},"body":{"entities/User.html":{}}}],["middleinitial",{"_index":376,"title":{},"body":{"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{}}}],["middlename",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{},"classes/RegisterDto.html":{},"entities/User.html":{}}}],["migrationsrun",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["minlength",{"_index":853,"title":{},"body":{"classes/RegisterDto.html":{}}}],["minlength(8",{"_index":854,"title":{},"body":{"classes/RegisterDto.html":{}}}],["minutes",{"_index":734,"title":{},"body":{"injectables/QueueService.html":{}}}],["miscellaneous",{"_index":1029,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1134,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1057,"title":{},"body":{"index.html":{}}}],["module",{"_index":33,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":35,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/queue/queue.module",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":795,"title":{},"body":{"injectables/QueueService.html":{},"index.html":{}}}],["mysql",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["mysql2",{"_index":1018,"title":{},"body":{"dependencies.html":{}}}],["myśliwiec",{"_index":1149,"title":{},"body":{"index.html":{}}}],["name",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"injectables/JwtStrategy.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"miscellaneous/functions.html":{}}}],["name_extension",{"_index":964,"title":{},"body":{"entities/User.html":{}}}],["nameextension",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{},"classes/RegisterDto.html":{},"entities/User.html":{}}}],["need",{"_index":674,"title":{},"body":{"modules/QueueModule.html":{},"injectables/QueueService.html":{},"index.html":{}}}],["nest",{"_index":1047,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1153,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":1069,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":859,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":225,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":227,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1012,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":642,"title":{},"body":{"classes/QueueGateway.html":{},"dependencies.html":{}}}],["new",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{},"coverage.html":{}}}],["next",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["nextcalled",{"_index":812,"title":{},"body":{"injectables/QueueService.html":{}}}],["nextqueue",{"_index":791,"title":{},"body":{"injectables/QueueService.html":{}}}],["nextqueue.counternumber",{"_index":799,"title":{},"body":{"injectables/QueueService.html":{}}}],["nextqueue.id",{"_index":802,"title":{},"body":{"injectables/QueueService.html":{}}}],["nextqueue.status",{"_index":797,"title":{},"body":{"injectables/QueueService.html":{}}}],["node.js",{"_index":1040,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":701,"title":{},"body":{"injectables/QueueService.html":{},"injectables/RolesService.html":{}}}],["notfoundexception(`counter",{"_index":784,"title":{},"body":{"injectables/QueueService.html":{}}}],["notfoundexception(`details",{"_index":761,"title":{},"body":{"injectables/QueueService.html":{}}}],["notfoundexception(`queue",{"_index":758,"title":{},"body":{"injectables/QueueService.html":{}}}],["notfoundexception(`role",{"_index":938,"title":{},"body":{"injectables/RolesService.html":{}}}],["notify",{"_index":751,"title":{},"body":{"injectables/QueueService.html":{}}}],["notifycounterupdate",{"_index":612,"title":{},"body":{"classes/QueueGateway.html":{}}}],["notifycounterupdate(counterid",{"_index":636,"title":{},"body":{"classes/QueueGateway.html":{}}}],["notifyqueueupdate",{"_index":613,"title":{},"body":{"classes/QueueGateway.html":{}}}],["notifyqueueupdate(queueid",{"_index":638,"title":{},"body":{"classes/QueueGateway.html":{}}}],["npm",{"_index":1052,"title":{},"body":{"index.html":{}}}],["null",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{}}}],["nullable",{"_index":346,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["number",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"injectables/RolesService.html":{},"entities/User.html":{}}}],["number(payload.sub",{"_index":419,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["offer",{"_index":1131,"title":{},"body":{"index.html":{}}}],["official",{"_index":1083,"title":{},"body":{"index.html":{}}}],["ok",{"_index":30,"title":{},"body":{"controllers/AppController.html":{}}}],["ondelete",{"_index":584,"title":{},"body":{"entities/QueueDetails.html":{}}}],["one",{"_index":777,"title":{},"body":{"injectables/QueueService.html":{}}}],["onetomany",{"_index":461,"title":{},"body":{"entities/Queue.html":{}}}],["onetomany(undefined",{"_index":450,"title":{},"body":{"entities/Queue.html":{}}}],["onetoone",{"_index":363,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{}}}],["onetoone(undefined",{"_index":344,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{}}}],["ongatewayconnection",{"_index":603,"title":{},"body":{"classes/QueueGateway.html":{}}}],["ongatewaydisconnect",{"_index":604,"title":{},"body":{"classes/QueueGateway.html":{}}}],["open",{"_index":1136,"title":{},"body":{"index.html":{}}}],["optional",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateQueueDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser-1.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"miscellaneous/functions.html":{}}}],["order",{"_index":755,"title":{},"body":{"injectables/QueueService.html":{}}}],["origin",{"_index":646,"title":{},"body":{"classes/QueueGateway.html":{}}}],["out",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":1159,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1007,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":529,"title":{},"body":{"controllers/QueueController.html":{},"controllers/RolesController.html":{}}}],["parameters",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"miscellaneous/functions.html":{}}}],["parseint(process.env.db_port",{"_index":1172,"title":{},"body":{"miscellaneous/variables.html":{}}}],["part",{"_index":1123,"title":{},"body":{"index.html":{}}}],["passport",{"_index":403,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":226,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":231,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":400,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":404,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["password",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["password.length",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{}}}],["patch",{"_index":528,"title":{},"body":{"controllers/QueueController.html":{}}}],["patch(':id",{"_index":526,"title":{},"body":{"controllers/QueueController.html":{}}}],["payload",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["payload.roles",{"_index":422,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":417,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["pending",{"_index":465,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{},"miscellaneous/enumerations.html":{}}}],["pendingcount",{"_index":813,"title":{},"body":{"injectables/QueueService.html":{}}}],["per",{"_index":735,"title":{},"body":{"injectables/QueueService.html":{}}}],["person",{"_index":736,"title":{},"body":{"injectables/QueueService.html":{}}}],["philippines",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["phone_number",{"_index":580,"title":{},"body":{"entities/QueueDetails.html":{}}}],["phonenumber",{"_index":377,"title":{},"body":{"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{}}}],["platform",{"_index":1081,"title":{},"body":{"index.html":{}}}],["please",{"_index":1108,"title":{},"body":{"index.html":{}}}],["port",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["position",{"_index":657,"title":{},"body":{"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["possible",{"_index":1076,"title":{},"body":{"index.html":{}}}],["post",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QueueController.html":{},"interfaces/RequestWithUser.html":{}}}],["post('counter",{"_index":490,"title":{},"body":{"controllers/QueueController.html":{}}}],["post('counter/:counterid/call",{"_index":493,"title":{},"body":{"controllers/QueueController.html":{}}}],["post('login",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["post('register",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["prefix",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QueueController.html":{},"controllers/RolesController.html":{}}}],["prevent",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["primarygeneratedcolumn",{"_index":354,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["private",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{}}}],["process.env.db_host",{"_index":1170,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_name",{"_index":1177,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_password",{"_index":1176,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_username",{"_index":1174,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["production",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"classes/QueueGateway.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["progressive",{"_index":1039,"title":{},"body":{"index.html":{}}}],["project",{"_index":1049,"title":{},"body":{"index.html":{}}}],["promise",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/RolesService.html":{}}}],["promise.all",{"_index":818,"title":{},"body":{"injectables/QueueService.html":{}}}],["properties",{"_index":340,"title":{"properties.html":{}},"body":{"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"properties.html":{}}}],["providers",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"overview.html":{}}}],["query",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["query('set",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["questions",{"_index":1106,"title":{},"body":{"index.html":{}}}],["queue",{"_index":343,"title":{"entities/Queue.html":{}},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"coverage.html":{}}}],["queue.completedat",{"_index":768,"title":{},"body":{"injectables/QueueService.html":{}}}],["queue.completedat.gettime",{"_index":831,"title":{},"body":{"injectables/QueueService.html":{}}}],["queue.controller",{"_index":676,"title":{},"body":{"modules/QueueModule.html":{}}}],["queue.counter",{"_index":345,"title":{},"body":{"entities/Counter.html":{}}}],["queue.counternumber",{"_index":770,"title":{},"body":{"injectables/QueueService.html":{}}}],["queue.createdat.gettime",{"_index":832,"title":{},"body":{"injectables/QueueService.html":{}}}],["queue.details",{"_index":583,"title":{},"body":{"entities/QueueDetails.html":{}}}],["queue.dto",{"_index":538,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["queue.dto.ts",{"_index":373,"title":{},"body":{"classes/CreateQueueDto.html":{},"classes/UpdateQueueDto.html":{},"coverage.html":{}}}],["queue.dto.ts:10",{"_index":384,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:11",{"_index":944,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["queue.dto.ts:14",{"_index":385,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:18",{"_index":380,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:22",{"_index":386,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:26",{"_index":387,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:30",{"_index":382,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:33",{"_index":389,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:6",{"_index":383,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:7",{"_index":946,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["queue.entity",{"_index":597,"title":{},"body":{"entities/QueueDetails.html":{}}}],["queue.gateway",{"_index":677,"title":{},"body":{"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["queue.service",{"_index":536,"title":{},"body":{"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{}}}],["queue.status",{"_index":765,"title":{},"body":{"injectables/QueueService.html":{}}}],["queue/entities/queue.entity",{"_index":365,"title":{},"body":{"entities/Counter.html":{}}}],["queue_id",{"_index":586,"title":{},"body":{"entities/QueueDetails.html":{}}}],["queue_number",{"_index":456,"title":{},"body":{"entities/Queue.html":{}}}],["queuecontroller",{"_index":471,"title":{"controllers/QueueController.html":{}},"body":{"controllers/QueueController.html":{},"modules/QueueModule.html":{},"coverage.html":{}}}],["queuedata",{"_index":655,"title":{},"body":{"classes/QueueGateway.html":{}}}],["queuedetails",{"_index":449,"title":{"entities/QueueDetails.html":{}},"body":{"entities/Queue.html":{},"entities/QueueDetails.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"coverage.html":{}}}],["queuedetailsrepository",{"_index":682,"title":{},"body":{"injectables/QueueService.html":{}}}],["queuegateway",{"_index":600,"title":{"classes/QueueGateway.html":{}},"body":{"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"coverage.html":{},"overview.html":{}}}],["queueid",{"_index":568,"title":{},"body":{"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["queuemodule",{"_index":46,"title":{"modules/QueueModule.html":{}},"body":{"modules/AppModule.html":{},"modules/QueueModule.html":{},"modules.html":{},"overview.html":{}}}],["queuenumber",{"_index":438,"title":{},"body":{"entities/Queue.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["queuerepository",{"_index":685,"title":{},"body":{"injectables/QueueService.html":{}}}],["queues",{"_index":715,"title":{},"body":{"injectables/QueueService.html":{}}}],["queueservice",{"_index":535,"title":{"injectables/QueueService.html":{}},"body":{"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"coverage.html":{},"overview.html":{}}}],["queuestatus",{"_index":459,"title":{},"body":{"entities/Queue.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"classes/UpdateQueueDto.html":{},"miscellaneous/enumerations.html":{}}}],["queuestatus.cancelled",{"_index":819,"title":{},"body":{"injectables/QueueService.html":{}}}],["queuestatus.completed",{"_index":767,"title":{},"body":{"injectables/QueueService.html":{}}}],["queuestatus.pending",{"_index":470,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{}}}],["queuestatus.serving",{"_index":798,"title":{},"body":{"injectables/QueueService.html":{}}}],["read",{"_index":1144,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"controllers/RolesController.html":{}}}],["ready",{"_index":1067,"title":{},"body":{"index.html":{}}}],["real",{"_index":1121,"title":{},"body":{"index.html":{}}}],["reason_of_visit",{"_index":590,"title":{},"body":{"entities/QueueDetails.html":{}}}],["reasonofvisit",{"_index":378,"title":{},"body":{"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{}}}],["received",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["referencedcolumnname",{"_index":978,"title":{},"body":{"entities/User.html":{}}}],["reflect",{"_index":1022,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":858,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["register",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["register(@body",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["register(registerdto",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["registerdto",{"_index":160,"title":{"classes/RegisterDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["registration",{"_index":840,"title":{},"body":{"classes/RegisterDto.html":{}}}],["relations",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{}}}],["remove",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{}}}],["repository",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{},"index.html":{}}}],["req",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["req.user",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["req.user.sub",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["request",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["request.user?.roles",{"_index":871,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["requestwithuser",{"_index":147,"title":{"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["requiredroles",{"_index":865,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["requiredroles.some((role",{"_index":872,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["requiring",{"_index":1089,"title":{},"body":{"index.html":{}}}],["reset",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"overview.html":{}}}],["resources",{"_index":1100,"title":{},"body":{"index.html":{}}}],["response",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{}}}],["result",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{}}}],["results",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{}}}],["returns",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{}}}],["role",{"_index":874,"title":{"entities/Role.html":{}},"body":{"entities/Role.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"coverage.html":{}}}],["role.name",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{}}}],["role_id",{"_index":979,"title":{},"body":{"entities/User.html":{}}}],["roleids",{"_index":928,"title":{},"body":{"injectables/RolesService.html":{}}}],["rolenames",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{}}}],["roles",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles('admin",{"_index":902,"title":{},"body":{"controllers/RolesController.html":{}}}],["roles.controller",{"_index":919,"title":{},"body":{"modules/RolesModule.html":{}}}],["roles.map((role",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{}}}],["roles.service",{"_index":897,"title":{},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{}}}],["roles/entities/role.entity",{"_index":973,"title":{},"body":{"entities/User.html":{}}}],["roles/roles.module",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["roles/roles.service",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{}}}],["roles_key",{"_index":860,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolescontroller",{"_index":886,"title":{"controllers/RolesController.html":{}},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{},"coverage.html":{}}}],["rolesguard",{"_index":863,"title":{"guards/RolesGuard.html":{}},"body":{"interfaces/RequestWithUser-1.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["rolesmodule",{"_index":47,"title":{"modules/RolesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RolesModule.html":{},"modules.html":{},"overview.html":{}}}],["rolesrepository",{"_index":926,"title":{},"body":{"injectables/RolesService.html":{}}}],["rolesservice",{"_index":250,"title":{"injectables/RolesService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"coverage.html":{},"overview.html":{}}}],["room",{"_index":806,"title":{},"body":{"injectables/QueueService.html":{}}}],["rooms",{"_index":664,"title":{},"body":{"classes/QueueGateway.html":{}}}],["root",{"_index":1175,"title":{},"body":{"miscellaneous/variables.html":{}}}],["run",{"_index":1054,"title":{},"body":{"index.html":{}}}],["runs",{"_index":1074,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1025,"title":{},"body":{"dependencies.html":{}}}],["save",{"_index":728,"title":{},"body":{"injectables/QueueService.html":{}}}],["savedqueue",{"_index":737,"title":{},"body":{"injectables/QueueService.html":{}}}],["savedqueue.id",{"_index":740,"title":{},"body":{"injectables/QueueService.html":{}}}],["scalable",{"_index":1044,"title":{},"body":{"index.html":{}}}],["secret",{"_index":236,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretkey",{"_index":405,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["secretorkey",{"_index":414,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["seeddatabaseifneeded",{"_index":1000,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["seeddatabaseifneeded(datasource",{"_index":1035,"title":{},"body":{"miscellaneous/functions.html":{}}}],["select",{"_index":825,"title":{},"body":{"injectables/QueueService.html":{}}}],["send",{"_index":660,"title":{},"body":{"classes/QueueGateway.html":{}}}],["sequence",{"_index":707,"title":{},"body":{"injectables/QueueService.html":{}}}],["server",{"_index":606,"title":{},"body":{"classes/QueueGateway.html":{},"index.html":{}}}],["serving",{"_index":466,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{},"miscellaneous/enumerations.html":{}}}],["servingcount",{"_index":814,"title":{},"body":{"injectables/QueueService.html":{}}}],["set",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["setmetadata(roles_key",{"_index":1179,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":1050,"title":{},"body":{"index.html":{}}}],["sheesh",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["side",{"_index":1045,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":238,"title":{},"body":{"modules/AuthModule.html":{}}}],["simple",{"_index":732,"title":{},"body":{"injectables/QueueService.html":{},"index.html":{}}}],["socket",{"_index":621,"title":{},"body":{"classes/QueueGateway.html":{}}}],["socket.io",{"_index":643,"title":{},"body":{"classes/QueueGateway.html":{},"dependencies.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["specific",{"_index":663,"title":{},"body":{"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["sponsors",{"_index":1139,"title":{},"body":{"index.html":{}}}],["sql",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["src/.../counter.entity.ts",{"_index":1031,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../database.config.ts",{"_index":1167,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1034,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../queue.entity.ts",{"_index":1032,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../roles.decorator.ts",{"_index":1168,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:14",{"_index":18,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:9",{"_index":14,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":135,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":136,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:24",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:37",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:44",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":223,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:103",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:17",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:204",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:209",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:25",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:40",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorators/roles.decorator.ts",{"_index":990,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dto/login.dto.ts",{"_index":426,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto.ts:10",{"_index":430,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/login.dto.ts:14",{"_index":431,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/register.dto.ts",{"_index":839,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["src/auth/dto/register.dto.ts:17",{"_index":843,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:21",{"_index":851,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:26",{"_index":850,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:30",{"_index":844,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:34",{"_index":846,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:38",{"_index":845,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:42",{"_index":847,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:46",{"_index":848,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:49",{"_index":841,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/guards/jwt",{"_index":393,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard.ts",{"_index":855,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard.ts:11",{"_index":911,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/guards/roles.guard.ts:14",{"_index":912,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":399,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:13",{"_index":424,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:28",{"_index":425,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/config/database.config.ts",{"_index":997,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":998,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/counter/entities/counter.entity.ts",{"_index":339,"title":{},"body":{"entities/Counter.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/modules/counter/entities/counter.entity.ts:18",{"_index":355,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/counter/entities/counter.entity.ts:21",{"_index":357,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/counter/entities/counter.entity.ts:28",{"_index":362,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/counter/entities/counter.entity.ts:31",{"_index":353,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/counter/entities/counter.entity.ts:38",{"_index":351,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/queue/dto/create",{"_index":372,"title":{},"body":{"classes/CreateQueueDto.html":{},"coverage.html":{}}}],["src/modules/queue/dto/update",{"_index":943,"title":{},"body":{"classes/UpdateQueueDto.html":{},"coverage.html":{}}}],["src/modules/queue/entities/queue",{"_index":566,"title":{},"body":{"entities/QueueDetails.html":{},"coverage.html":{}}}],["src/modules/queue/entities/queue.entity.ts",{"_index":432,"title":{},"body":{"entities/Queue.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/modules/queue/entities/queue.entity.ts:22",{"_index":455,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:25",{"_index":458,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:32",{"_index":460,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:35",{"_index":445,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:38",{"_index":448,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:41",{"_index":441,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:44",{"_index":454,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:47",{"_index":452,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:52",{"_index":443,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/queue.controller.ts",{"_index":472,"title":{},"body":{"controllers/QueueController.html":{},"coverage.html":{}}}],["src/modules/queue/queue.controller.ts:20",{"_index":497,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:25",{"_index":498,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:30",{"_index":504,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:35",{"_index":511,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:40",{"_index":513,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:45",{"_index":506,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:50",{"_index":523,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:55",{"_index":509,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:60",{"_index":501,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:65",{"_index":518,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:70",{"_index":521,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:75",{"_index":527,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:80",{"_index":494,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:85",{"_index":491,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:90",{"_index":515,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.gateway.ts",{"_index":601,"title":{},"body":{"classes/QueueGateway.html":{},"coverage.html":{}}}],["src/modules/queue/queue.gateway.ts:18",{"_index":618,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:21",{"_index":615,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:28",{"_index":622,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:32",{"_index":626,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:37",{"_index":635,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:44",{"_index":629,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:50",{"_index":632,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:56",{"_index":639,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:61",{"_index":637,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.module.ts",{"_index":673,"title":{},"body":{"modules/QueueModule.html":{}}}],["src/modules/queue/queue.service.ts",{"_index":680,"title":{},"body":{"injectables/QueueService.html":{},"coverage.html":{}}}],["src/modules/queue/queue.service.ts:102",{"_index":693,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:114",{"_index":691,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:126",{"_index":696,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:143",{"_index":700,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:170",{"_index":698,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:190",{"_index":688,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:20",{"_index":684,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:260",{"_index":699,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:307",{"_index":687,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:313",{"_index":694,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:32",{"_index":689,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:89",{"_index":690,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:95",{"_index":692,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/roles/entities/role.entity.ts",{"_index":875,"title":{},"body":{"entities/Role.html":{},"coverage.html":{}}}],["src/roles/entities/role.entity.ts:10",{"_index":880,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/entities/role.entity.ts:13",{"_index":877,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/entities/role.entity.ts:16",{"_index":883,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/entities/role.entity.ts:7",{"_index":878,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/roles.controller.ts",{"_index":887,"title":{},"body":{"controllers/RolesController.html":{},"coverage.html":{}}}],["src/roles/roles.controller.ts:14",{"_index":891,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.controller.ts:20",{"_index":893,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.controller.ts:26",{"_index":896,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.module.ts",{"_index":917,"title":{},"body":{"modules/RolesModule.html":{}}}],["src/roles/roles.service.ts",{"_index":921,"title":{},"body":{"injectables/RolesService.html":{},"coverage.html":{}}}],["src/roles/roles.service.ts:17",{"_index":930,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:21",{"_index":933,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:29",{"_index":932,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:37",{"_index":934,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:45",{"_index":929,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:8",{"_index":925,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/users/entities/user.entity.ts",{"_index":949,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:16",{"_index":959,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:19",{"_index":957,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:22",{"_index":971,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:25",{"_index":966,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:28",{"_index":958,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:31",{"_index":962,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:34",{"_index":960,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:37",{"_index":963,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:40",{"_index":965,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:43",{"_index":952,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:46",{"_index":953,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:50",{"_index":955,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:53",{"_index":956,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:67",{"_index":970,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.module.ts",{"_index":980,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":1055,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1058,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":1059,"title":{},"body":{"index.html":{}}}],["started",{"_index":1038,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1048,"title":{},"body":{"index.html":{}}}],["statement",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["statements",{"_index":985,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"entities/Counter.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"classes/UpdateQueueDto.html":{}}}],["stay",{"_index":1125,"title":{},"body":{"index.html":{}}}],["steps",{"_index":1071,"title":{},"body":{"index.html":{}}}],["straightforward",{"_index":1087,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":402,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["strength",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{}}}],["string",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["string(payload.email",{"_index":420,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["string(todaycount",{"_index":726,"title":{},"body":{"injectables/QueueService.html":{}}}],["sub",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{}}}],["subscribemessage",{"_index":641,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subscribemessage('getqueueposition",{"_index":628,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subscribemessage('joincounter",{"_index":631,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subscribemessage('joinqueue",{"_index":634,"title":{},"body":{"classes/QueueGateway.html":{}}}],["success",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{},"classes/QueueGateway.html":{}}}],["successfully",{"_index":805,"title":{},"body":{"injectables/QueueService.html":{}}}],["super",{"_index":410,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["super_admin",{"_index":890,"title":{},"body":{"controllers/RolesController.html":{}}}],["support",{"_index":1107,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1156,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["table",{"_index":1006,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1005,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":1072,"title":{},"body":{"index.html":{}}}],["taken",{"_index":332,"title":{},"body":{"injectables/AuthService.html":{}}}],["test",{"_index":1062,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":1065,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1064,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1060,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":1138,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":29,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.getprofile(number(req.user.sub",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.authservice.login(logindto",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.authservice.register(registerdto",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.counterrepository.create",{"_index":836,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.counterrepository.find",{"_index":838,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.counterrepository.findone",{"_index":783,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.counterrepository.save(counter",{"_index":793,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.findone(id",{"_index":763,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.findone(queueid",{"_index":759,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.getqueueposition(queueid",{"_index":762,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.getqueueposition(savedqueue.id",{"_index":750,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.isvalidemail(email",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(payload",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.log(`client",{"_index":650,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.queuedetailsrepository.create",{"_index":739,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuedetailsrepository.findone",{"_index":760,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuedetailsrepository.save(queuedetails",{"_index":749,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuegateway.notifycounterupdate(counterid",{"_index":811,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuegateway.notifyqueueupdate(id",{"_index":772,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuegateway.notifyqueueupdate(nextqueue.id",{"_index":808,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuegateway.server.emit('queuelistupdate",{"_index":752,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.count",{"_index":722,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.create",{"_index":729,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.find",{"_index":754,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.findone",{"_index":757,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.save(counter.currentqueue",{"_index":789,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.save(nextqueue",{"_index":801,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.save(queue",{"_index":738,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queueservice.addcounter(data.name",{"_index":564,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.callnext(+counterid",{"_index":562,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.create(createqueuedto",{"_index":543,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findall",{"_index":544,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findbyqueuenumber(queuenumber",{"_index":554,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findbystatus(queuestatus.completed",{"_index":549,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findbystatus(queuestatus.pending",{"_index":547,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findbystatus(queuestatus.serving",{"_index":548,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findbystatus(status",{"_index":546,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findone(+id",{"_index":552,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.getcounters",{"_index":565,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.getqueuedetails(+id",{"_index":556,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.getqueuedetails(queueid",{"_index":656,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.queueservice.getqueueposition(+id",{"_index":558,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.getqueueposition(queueid",{"_index":658,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.queueservice.getstats",{"_index":550,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.update(+id",{"_index":560,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.reflector.getallandoverride",{"_index":866,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["this.rolesrepository.find",{"_index":936,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesrepository.findbyids(roleids",{"_index":940,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesrepository.findone",{"_index":937,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesservice.findall",{"_index":903,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.findone(+id",{"_index":904,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.getuserroles(+userid",{"_index":907,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.getuserroles(user.id",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.server.emit('counterlistupdate",{"_index":669,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.server.emit('queuelistupdate",{"_index":666,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.server.to(`counter_${counterid}`).emit('counterupdate",{"_index":668,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.server.to(`queue_${queueid}`).emit('queueupdate",{"_index":665,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.usersrepository.findone",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RolesService.html":{}}}],["this.usersrepository.save(user",{"_index":942,"title":{},"body":{"injectables/RolesService.html":{}}}],["throw",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{}}}],["ties",{"_index":781,"title":{},"body":{"injectables/QueueService.html":{}}}],["time",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"injectables/QueueService.html":{},"index.html":{}}}],["time_zone",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["today",{"_index":708,"title":{},"body":{"injectables/QueueService.html":{}}}],["today.getfullyear()}${string(today.getmonth",{"_index":710,"title":{},"body":{"injectables/QueueService.html":{}}}],["todaycount",{"_index":721,"title":{},"body":{"injectables/QueueService.html":{}}}],["todaystart",{"_index":718,"title":{},"body":{"injectables/QueueService.html":{}}}],["todaystart.sethours(0",{"_index":720,"title":{},"body":{"injectables/QueueService.html":{}}}],["token",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["total",{"_index":830,"title":{},"body":{"injectables/QueueService.html":{}}}],["totalcount",{"_index":817,"title":{},"body":{"injectables/QueueService.html":{}}}],["totalwaittimems",{"_index":828,"title":{},"body":{"injectables/QueueService.html":{}}}],["touch",{"_index":1146,"title":{},"body":{"index.html":{}}}],["true",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"entities/User.html":{}}}],["true})@joincolumn({name",{"_index":347,"title":{},"body":{"entities/Counter.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["try",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["turn",{"_index":807,"title":{},"body":{"injectables/QueueService.html":{}}}],["twitter",{"_index":1152,"title":{},"body":{"index.html":{}}}],["type",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{},"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"entities/Role.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([queue",{"_index":679,"title":{},"body":{"modules/QueueModule.html":{}}}],["typeormmodule.forfeature([role",{"_index":920,"title":{},"body":{"modules/RolesModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":241,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":1169,"title":{},"body":{"miscellaneous/variables.html":{}}}],["typescript",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["unauthorizedexception",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{}}}],["unauthorizedexception('invalid",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{}}}],["uncomment",{"_index":531,"title":{},"body":{"controllers/QueueController.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["undefined",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{},"entities/Counter.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"entities/Queue.html":{},"interfaces/RequestWithUser.html":{},"entities/User.html":{}}}],["unique",{"_index":457,"title":{},"body":{"entities/Queue.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["unit",{"_index":1061,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["unlicensed",{"_index":1166,"title":{},"body":{"properties.html":{}}}],["unused",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{}}}],["update",{"_index":487,"title":{},"body":{"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["update(@param('id",{"_index":559,"title":{},"body":{"controllers/QueueController.html":{}}}],["update(id",{"_index":524,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["updated",{"_index":773,"title":{},"body":{"injectables/QueueService.html":{}}}],["updatedqueue",{"_index":771,"title":{},"body":{"injectables/QueueService.html":{}}}],["updatequeuedto",{"_index":525,"title":{"classes/UpdateQueueDto.html":{}},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{},"classes/UpdateQueueDto.html":{},"coverage.html":{}}}],["updatequeuedto.counternumber",{"_index":769,"title":{},"body":{"injectables/QueueService.html":{}}}],["updatequeuedto.status",{"_index":764,"title":{},"body":{"injectables/QueueService.html":{}}}],["updates",{"_index":661,"title":{},"body":{"classes/QueueGateway.html":{},"index.html":{}}}],["url",{"_index":648,"title":{},"body":{"classes/QueueGateway.html":{}}}],["use",{"_index":675,"title":{},"body":{"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["usefactory",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["useguards",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{}}}],["useguards(jwtauthguard",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{}}}],["useguards(jwtauthguard)@get('profile",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":177,"title":{"entities/User.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["user.defaultrole?.name",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.email",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.id",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.roles",{"_index":882,"title":{},"body":{"entities/Role.html":{},"injectables/RolesService.html":{}}}],["user_id",{"_index":592,"title":{},"body":{"entities/QueueDetails.html":{},"entities/User.html":{}}}],["user_roles",{"_index":968,"title":{},"body":{"entities/User.html":{}}}],["userid",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateQueueDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["username",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["userroles",{"_index":870,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["userroles.includes(role",{"_index":873,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["users",{"_index":876,"title":{},"body":{"entities/Role.html":{}}}],["users/entities/user.entity",{"_index":228,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{}}}],["users/users.module",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["usersmodule",{"_index":48,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RolesService.html":{}}}],["userwithoutpassword",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{}}}],["using",{"_index":782,"title":{},"body":{"injectables/QueueService.html":{},"index.html":{}}}],["utc",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["utc+8",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["valid",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{}}}],["validate",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":415,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(logindto",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{}}}],["validation",{"_index":416,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["validator",{"_index":392,"title":{},"body":{"classes/CreateQueueDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateQueueDto.html":{},"dependencies.html":{}}}],["value",{"_index":616,"title":{},"body":{"classes/QueueGateway.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":991,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":409,"title":{"miscellaneous/variables.html":{}},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["vars",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["version",{"_index":1164,"title":{},"body":{"properties.html":{}}}],["video",{"_index":1115,"title":{},"body":{"index.html":{}}}],["visit",{"_index":1104,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":1118,"title":{},"body":{"index.html":{}}}],["void",{"_index":624,"title":{},"body":{"classes/QueueGateway.html":{}}}],["wait",{"_index":822,"title":{},"body":{"injectables/QueueService.html":{}}}],["waiting",{"_index":796,"title":{},"body":{"injectables/QueueService.html":{}}}],["want",{"_index":532,"title":{},"body":{"controllers/QueueController.html":{}}}],["watch",{"_index":1056,"title":{},"body":{"index.html":{}}}],["website",{"_index":1150,"title":{},"body":{"index.html":{}}}],["websocketgateway",{"_index":640,"title":{},"body":{"classes/QueueGateway.html":{}}}],["websocketserver",{"_index":619,"title":{},"body":{"classes/QueueGateway.html":{}}}],["working",{"_index":1103,"title":{},"body":{"index.html":{}}}],["world",{"_index":138,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":1128,"title":{},"body":{"index.html":{}}}],["xxxx",{"_index":725,"title":{},"body":{"injectables/QueueService.html":{}}}],["yes",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{}}}],["you'd",{"_index":1142,"title":{},"body":{"index.html":{}}}],["you're",{"_index":1066,"title":{},"body":{"index.html":{}}}],["yyyymmdd",{"_index":724,"title":{},"body":{"injectables/QueueService.html":{}}}],["zone",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["zoom",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                            \n                                    \n                                healthCheck\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        healthCheck\n                        \n                    \n                \n            \n            \n                \n                        \n                    healthCheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('health')\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     { status: string; }\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n\n  @Get('health')\n  healthCheck() {\n    return { status: 'ok' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nQueueModule\n\nQueueModule\n\nAppModule -->\n\nQueueModule->AppModule\n\n\n\n\n\nRolesModule\n\nRolesModule\n\nAppModule -->\n\nRolesModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            QueueModule\n                        \n                        \n                            RolesModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n// import { databaseConfig } from './config/database.config';\nimport { UsersModule } from './users/users.module';\nimport { AuthModule } from './auth/auth.module';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { RolesModule } from './roles/roles.module';\nimport { QueueModule } from './modules/queue/queue.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'mysql',\n        host: configService.get('DB_HOST'),\n        port: configService.get('DB_PORT'),\n        username: configService.get('DB_USERNAME'),\n        password: configService.get('DB_PASSWORD'),\n        database: configService.get('DB_NAME'),\n        entities: [__dirname + '/**/*.entity{.ts,.js}'],\n        synchronize: configService.get('NODE_ENV') !== 'production', //set this sheesh to true in development only\n        logging: configService.get('NODE_ENV') !== 'production',\n        // Prevent data loss in development (below code is for development only)\n        // synchronize: true,\n        migrationsRun: false,\n        dropSchema: false,\n\n        // Only for development environments!\n        beforeConnect: async (connection): Promise => {\n          if (process.env.NODE_ENV !== 'production') {\n            const conn = connection as {\n              query: (sql: string) => Promise;\n            };\n            // Disable foreign key checks for development\n            await conn.query('SET FOREIGN_KEY_CHECKS=0;');\n            // Set time zone to UTC for consistent datetime handling\n            await conn.query(\"SET time_zone = '+08:00';\"); // Philippines time zone (UTC+8)\n          }\n        },\n        afterConnect: async (connection): Promise => {\n          if (process.env.NODE_ENV !== 'production') {\n            await (\n              connection as { query: (sql: string) => Promise }\n            ).query('SET FOREIGN_KEY_CHECKS=1;');\n          }\n        },\n      }),\n    }),\n    UsersModule,\n    AuthModule,\n    RolesModule,\n    QueueModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                getProfile\n                            \n                            \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(req: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('profile')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestWithUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(registerDto: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                registerDto\n                                            \n                                                            RegisterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  Get,\n  UseGuards,\n  Request,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\n\ninterface RequestWithUser extends Request {\n  user: { sub: number; email: string; roles: string[] };\n}\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @Post('login')\n  async login(@Body() loginDto: LoginDto) {\n    console.log('Login request received:', loginDto);\n    try {\n      const result = await this.authService.login(loginDto);\n      return result;\n    } catch (error) {\n      throw new UnauthorizedException(\n        error instanceof Error ? error.message : 'Invalid credentials',\n      );\n    }\n  }\n\n  @Post('register')\n  async register(@Body() registerDto: RegisterDto) {\n    console.log('Register endpoint hit with data:', registerDto); //Debugging Statement\n    return this.authService.register(registerDto);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  getProfile(@Request() req: RequestWithUser) {\n    // Add null check before converting to number\n    if (!req.user || req.user.sub === undefined || req.user.sub === null) {\n      throw new UnauthorizedException('Invalid user ID');\n    }\n    return this.authService.getProfile(Number(req.user.sub));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nRolesModule\n\nRolesModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nRolesModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RolesModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from '../users/entities/user.entity';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { JwtStrategy } from './jwt.strategy';\nimport { ConfigService } from '@nestjs/config';\nimport { RolesModule } from '../roles/roles.module';\n\n@Module({\n  imports: [\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.registerAsync({\n      inject: [ConfigService],\n      useFactory: (config: ConfigService) => {\n        return {\n          secret: config.get('JWT_SECRET'),\n          signOptions: { expiresIn: '1d' },\n        };\n      },\n    }),\n    TypeOrmModule.forFeature([User]),\n    RolesModule,\n  ],\n  providers: [AuthService, JwtStrategy],\n  controllers: [AuthController],\n  exports: [AuthService, JwtStrategy, PassportModule],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Private\n                                isValidEmail\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, jwtService: JwtService, rolesService: RolesService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        rolesService\n                                                  \n                                                        \n                                                                        RolesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:209\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isValidEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    isValidEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:204\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(registerDto: RegisterDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:103\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                registerDto\n                                            \n                                                            RegisterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(loginDto: LoginDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  UnauthorizedException,\n  ConflictException,\n  BadRequestException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from '../users/entities/user.entity';\nimport * as bcrypt from 'bcrypt';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { RolesService } from '../roles/roles.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n    private jwtService: JwtService,\n    private rolesService: RolesService,\n  ) {}\n\n  async validateUser(loginDto: LoginDto): Promise {\n    const user = await this.usersRepository.findOne({\n      where: [\n        { email: loginDto.emailOrUsername },\n        { username: loginDto.emailOrUsername },\n      ],\n    });\n    if (user && (await bcrypt.compare(loginDto.password, user.password))) {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { password: __password, ...result } = user;\n      return result;\n    }\n    return null;\n  }\n\n  async login(loginDto: LoginDto) {\n    console.log('Login attempt with:', loginDto);\n\n    try {\n      const user = await this.usersRepository.findOne({\n        where: [\n          { email: loginDto.emailOrUsername },\n          { username: loginDto.emailOrUsername },\n        ],\n        relations: ['defaultRole'],\n      });\n\n      console.log('User found:', user ? 'Yes' : 'No');\n\n      if (!user) {\n        throw new UnauthorizedException('Invalid email or password');\n      }\n\n      // Debug password check\n      console.log('Stored password hash:', user.password);\n      console.log('Comparing with:', loginDto.password);\n\n      const isPasswordValid = await bcrypt.compare(\n        loginDto.password,\n        user.password,\n      );\n      console.log('Password valid:', isPasswordValid);\n\n      if (!isPasswordValid) {\n        throw new UnauthorizedException('Invalid email or password');\n      }\n\n      // Get user roles\n      const roles = await this.rolesService.getUserRoles(user.id);\n      const roleNames = roles.map((role) => role.name);\n\n      const payload = {\n        sub: user.id,\n        email: user.email,\n        roles: roleNames,\n      };\n\n      const token = this.jwtService.sign(payload);\n      console.log('Generated token:', token ? 'Success' : 'Failed');\n\n      // Remove password from response\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { password: __password, ...userWithoutPassword } = user;\n\n      return {\n        access_token: token,\n        user: {\n          ...userWithoutPassword,\n          roles: roleNames,\n          defaultRole: user.defaultRole?.name || 'citizen',\n        },\n      };\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  }\n\n  async register(registerDto: RegisterDto) {\n    const {\n      email,\n      username,\n      password,\n      firstName,\n      middleName,\n      lastName,\n      nameExtension,\n      contactNumber,\n    } = registerDto;\n\n    // Generate full name\n    const name = `${firstName} ${middleName ? middleName + ' ' : ''}${lastName}${nameExtension ? ' ' + nameExtension : ''}`;\n\n    // Validate email format\n    if (!this.isValidEmail(email)) {\n      throw new BadRequestException('Invalid email format');\n    }\n\n    // Check if user exists by email\n    const existingUserByEmail = await this.usersRepository.findOne({\n      where: { email },\n    });\n    if (existingUserByEmail) {\n      throw new ConflictException('Email already exists');\n    }\n\n    // Check if username is taken\n    if (username) {\n      const existingUserByUsername = await this.usersRepository.findOne({\n        where: { username },\n      });\n      if (existingUserByUsername) {\n        throw new ConflictException('Username already exists');\n      }\n    }\n\n    // Validate password strength\n    if (password.length  role.name);\n\n    // Remove password from response\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { password: __password, ...result } = user;\n    return {\n      ...result,\n      roles: roleNames,\n      defaultRole: user.defaultRole?.name || 'citizen',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Counter.html":{"url":"entities/Counter.html","title":"entity - Counter","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Counter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/counter/entities/counter.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                currentQueue\n                            \n                            \n                                    \n                                currentQueueId\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        currentQueue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Queue | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, queue => queue.counter, {nullable: true})@JoinColumn({name: 'current_queue_id', foreignKeyConstraintName: 'fk_current_queue'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        currentQueueId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'current_queue_id', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CounterStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: CounterStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:28\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  OneToOne,\n  JoinColumn,\n} from 'typeorm';\nimport { Queue } from '../../queue/entities/queue.entity';\n\nexport enum CounterStatus {\n  ACTIVE = 'active',\n  INACTIVE = 'inactive',\n}\n\n@Entity('counters')\nexport class Counter {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  name: string;\n\n  @Column({\n    type: 'enum',\n    enum: CounterStatus,\n    default: CounterStatus.ACTIVE,\n  })\n  status: CounterStatus;\n\n  @Column({ name: 'current_queue_id', nullable: true })\n  currentQueueId: number | null;\n\n  @OneToOne(() => Queue, (queue) => queue.counter, { nullable: true })\n  @JoinColumn({\n    name: 'current_queue_id',\n    foreignKeyConstraintName: 'fk_current_queue',\n  })\n  currentQueue: Queue | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateQueueDto.html":{"url":"classes/CreateQueueDto.html","title":"class - CreateQueueDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateQueueDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/dto/create-queue.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                    \n                                    \n                                appointmentType\n                            \n                            \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                middleInitial\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                phoneNumber\n                            \n                            \n                                    \n                                    \n                                reasonOfVisit\n                            \n                            \n                                    \n                                    Optional\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        appointmentType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        middleInitial\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        reasonOfVisit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsOptional, IsNotEmpty } from 'class-validator';\n\nexport class CreateQueueDto {\n  @IsString()\n  @IsNotEmpty()\n  firstName: string;\n\n  @IsString()\n  @IsNotEmpty()\n  lastName: string;\n\n  @IsString()\n  @IsOptional()\n  middleInitial?: string;\n\n  @IsString()\n  @IsOptional()\n  address?: string;\n\n  @IsString()\n  @IsOptional()\n  phoneNumber?: string;\n\n  @IsString()\n  @IsNotEmpty()\n  reasonOfVisit: string;\n\n  @IsString()\n  @IsNotEmpty()\n  appointmentType: string;\n\n  @IsOptional()\n  userId?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            roles\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        roles:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\n\ninterface JwtPayload {\n  sub: number;\n  email: string;\n  roles?: string[];\n}\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private configService: ConfigService) {\n    const secretKey = configService.get('JWT_SECRET');\n\n    if (!secretKey) {\n      throw new Error('JWT_SECRET is not defined in environment variables');\n    }\n\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: secretKey,\n    });\n  }\n\n  validate(payload: JwtPayload): JwtPayload {\n    // Validation for the payload\n    if (!payload || payload.sub === undefined || isNaN(Number(payload.sub))) {\n      throw new UnauthorizedException('Invalid token payload');\n    }\n\n    const userId = Number(payload.sub);\n    const email = String(payload.email || '');\n    const roles = Array.isArray(payload.roles) ? payload.roles : [];\n\n    return { sub: userId, email, roles };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(payload: JwtPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            JwtPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         JwtPayload\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\n\ninterface JwtPayload {\n  sub: number;\n  email: string;\n  roles?: string[];\n}\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private configService: ConfigService) {\n    const secretKey = configService.get('JWT_SECRET');\n\n    if (!secretKey) {\n      throw new Error('JWT_SECRET is not defined in environment variables');\n    }\n\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: secretKey,\n    });\n  }\n\n  validate(payload: JwtPayload): JwtPayload {\n    // Validation for the payload\n    if (!payload || payload.sub === undefined || isNaN(Number(payload.sub))) {\n      throw new UnauthorizedException('Invalid token payload');\n    }\n\n    const userId = Number(payload.sub);\n    const email = String(payload.email || '');\n    const roles = Array.isArray(payload.roles) ? payload.roles : [];\n\n    return { sub: userId, email, roles };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for user login\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                emailOrUsername\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        emailOrUsername\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\n/**\n * DTO for user login\n * @class LoginDto\n */\n\nexport class LoginDto {\n  @IsNotEmpty()\n  emailOrUsername: string;\n\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Queue.html":{"url":"entities/Queue.html","title":"entity - Queue","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Queue\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/entities/queue.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                completedAt\n                            \n                            \n                                    \n                                counter\n                            \n                            \n                                    \n                                counterNumber\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                details\n                            \n                            \n                                    \n                                estimatedWaitTime\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                queueNumber\n                            \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        completedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'completed_at', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        counter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Counter\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, counter => counter.currentQueue, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        counterNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'counter_number', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        details\n                        \n                    \n                \n            \n                \n                    \n                        Type :     QueueDetails[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, details => details.queue)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        estimatedWaitTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'estimated_wait_time', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        queueNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'queue_number', unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueueStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: QueueStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:32\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  OneToMany,\n  CreateDateColumn,\n  OneToOne,\n} from 'typeorm';\nimport { QueueDetails } from './queue-details.entity';\nimport { Counter } from '../../counter/entities/counter.entity';\n\nexport enum QueueStatus {\n  PENDING = 'pending',\n  SERVING = 'serving',\n  COMPLETED = 'completed',\n  CANCELLED = 'cancelled',\n}\n\n@Entity('queues')\nexport class Queue {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ name: 'queue_number', unique: true })\n  queueNumber: string;\n\n  @Column({\n    type: 'enum',\n    enum: QueueStatus,\n    default: QueueStatus.PENDING,\n  })\n  status: QueueStatus;\n\n  @Column({ name: 'counter_number', nullable: true })\n  counterNumber: string;\n\n  @CreateDateColumn({ name: 'created_at' })\n  createdAt: Date;\n\n  @Column({ name: 'completed_at', nullable: true })\n  completedAt: Date;\n\n  @Column({ name: 'estimated_wait_time', nullable: true })\n  estimatedWaitTime: number;\n\n  @OneToMany(() => QueueDetails, (details) => details.queue)\n  details: QueueDetails[];\n\n  @OneToOne(() => Counter, (counter) => counter.currentQueue, {\n    nullable: true,\n  })\n  counter: Counter;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/QueueController.html":{"url":"controllers/QueueController.html","title":"controller - QueueController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  QueueController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/queue.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                queue\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                addCounter\n                            \n                            \n                                    \n                                callNext\n                            \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findByQueueNumber\n                            \n                            \n                                    \n                                findByStatus\n                            \n                            \n                                    \n                                findCompleted\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                findPending\n                            \n                            \n                                    \n                                findServing\n                            \n                            \n                                    \n                                getCounters\n                            \n                            \n                                    \n                                getQueueDetails\n                            \n                            \n                                    \n                                getQueuePosition\n                            \n                            \n                                    \n                                getStats\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        addCounter\n                        \n                    \n                \n            \n            \n                \n                        \n                    addCounter(data: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('counter')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        callNext\n                        \n                    \n                \n            \n            \n                \n                        \n                    callNext(counterId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('counter/:counterId/call-next')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:80\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                counterId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createQueueDto: CreateQueueDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createQueueDto\n                                            \n                                                            CreateQueueDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findByQueueNumber\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByQueueNumber(queueNumber: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('number/:queueNumber')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueNumber\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findByStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByStatus(status: QueueStatus)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('status/:status')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            QueueStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findCompleted\n                        \n                    \n                \n            \n            \n                \n                        \n                    findCompleted()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('completed')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:45\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findPending\n                        \n                    \n                \n            \n            \n                \n                        \n                    findPending()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('pending')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findServing\n                        \n                    \n                \n            \n            \n                \n                        \n                    findServing()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('serving')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getCounters\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCounters()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('counters')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:90\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getQueueDetails\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQueueDetails(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/details')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getQueuePosition\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQueuePosition(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/position')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:70\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('stats')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:50\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateQueueDto: UpdateQueueDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateQueueDto\n                                            \n                                                            UpdateQueueDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  //Delete, // Uncomment if you want to implement delete functionality\n} from '@nestjs/common';\nimport { QueueService } from './queue.service';\nimport { CreateQueueDto } from './dto/create-queue.dto';\nimport { UpdateQueueDto } from './dto/update-queue.dto';\nimport { QueueStatus } from './entities/queue.entity';\n\n@Controller('queue')\nexport class QueueController {\n  constructor(private readonly queueService: QueueService) {}\n\n  @Post()\n  create(@Body() createQueueDto: CreateQueueDto) {\n    return this.queueService.create(createQueueDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.queueService.findAll();\n  }\n\n  @Get('status/:status')\n  findByStatus(@Param('status') status: QueueStatus) {\n    return this.queueService.findByStatus(status);\n  }\n\n  @Get('pending')\n  findPending() {\n    return this.queueService.findByStatus(QueueStatus.PENDING);\n  }\n\n  @Get('serving')\n  findServing() {\n    return this.queueService.findByStatus(QueueStatus.SERVING);\n  }\n\n  @Get('completed')\n  findCompleted() {\n    return this.queueService.findByStatus(QueueStatus.COMPLETED);\n  }\n\n  @Get('stats')\n  getStats() {\n    return this.queueService.getStats();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.queueService.findOne(+id);\n  }\n\n  @Get('number/:queueNumber')\n  findByQueueNumber(@Param('queueNumber') queueNumber: string) {\n    return this.queueService.findByQueueNumber(queueNumber);\n  }\n\n  @Get(':id/details')\n  getQueueDetails(@Param('id') id: string) {\n    return this.queueService.getQueueDetails(+id);\n  }\n\n  @Get(':id/position')\n  getQueuePosition(@Param('id') id: string) {\n    return this.queueService.getQueuePosition(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateQueueDto: UpdateQueueDto) {\n    return this.queueService.update(+id, updateQueueDto);\n  }\n\n  @Post('counter/:counterId/call-next')\n  callNext(@Param('counterId') counterId: string) {\n    return this.queueService.callNext(+counterId);\n  }\n\n  @Post('counter')\n  addCounter(@Body() data: { name: string }) {\n    return this.queueService.addCounter(data.name);\n  }\n\n  @Get('counters')\n  getCounters() {\n    return this.queueService.getCounters();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/QueueDetails.html":{"url":"entities/QueueDetails.html","title":"entity - QueueDetails","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  QueueDetails\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/entities/queue-details.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                address\n                            \n                            \n                                    \n                                appointmentType\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                middleInitial\n                            \n                            \n                                    \n                                phoneNumber\n                            \n                            \n                                    \n                                    \n                                queue\n                            \n                            \n                                    \n                                queueId\n                            \n                            \n                                    \n                                reasonOfVisit\n                            \n                            \n                                    \n                                    \n                                user\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        appointmentType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'appointment_type'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'first_name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'last_name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        middleInitial\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'middle_initial', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'phone_number', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        queue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Queue\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, queue => queue.details, {onDelete: 'CASCADE'})@JoinColumn({name: 'queue_id', foreignKeyConstraintName: 'fk_queue_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        queueId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'queue_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reasonOfVisit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'reason_of_visit'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {onDelete: 'SET NULL', nullable: true})@JoinColumn({name: 'user_id', foreignKeyConstraintName: 'fk_user_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'user_id', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:24\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  JoinColumn,\n} from 'typeorm';\nimport { Queue } from './queue.entity';\nimport { User } from '../../../users/entities/user.entity';\n\n@Entity('queue_details')\nexport class QueueDetails {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ name: 'queue_id' })\n  queueId: number;\n\n  @ManyToOne(() => Queue, (queue) => queue.details, { onDelete: 'CASCADE' })\n  @JoinColumn({ name: 'queue_id', foreignKeyConstraintName: 'fk_queue_id' })\n  queue: Queue;\n\n  @Column({ name: 'user_id', nullable: true })\n  userId: number;\n\n  @ManyToOne(() => User, { onDelete: 'SET NULL', nullable: true })\n  @JoinColumn({ name: 'user_id', foreignKeyConstraintName: 'fk_user_id' })\n  user: User;\n\n  @Column({ name: 'first_name' })\n  firstName: string;\n\n  @Column({ name: 'last_name' })\n  lastName: string;\n\n  @Column({ name: 'middle_initial', nullable: true })\n  middleInitial: string;\n\n  @Column({ nullable: true })\n  address: string;\n\n  @Column({ name: 'phone_number', nullable: true })\n  phoneNumber: string;\n\n  @Column({ name: 'reason_of_visit' })\n  reasonOfVisit: string;\n\n  @Column({ name: 'appointment_type' })\n  appointmentType: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QueueGateway.html":{"url":"classes/QueueGateway.html","title":"class - QueueGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QueueGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/queue.gateway.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        OnGatewayConnection\n                        OnGatewayDisconnect\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleConnection\n                            \n                            \n                                handleDisconnect\n                            \n                            \n                                    \n                                    Async\n                                handleGetQueuePosition\n                            \n                            \n                                    \n                                    Async\n                                handleJoinCounter\n                            \n                            \n                                    \n                                    Async\n                                handleJoinQueue\n                            \n                            \n                                notifyCounterUpdate\n                            \n                            \n                                notifyQueueUpdate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(queueService: QueueService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/queue/queue.gateway.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        queueService\n                                                  \n                                                        \n                                                                        QueueService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(QueueGateway.name)\n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/queue.gateway.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/queue.gateway.ts:21\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handleConnection\n                        \n                    \n                \n            \n            \n                \nhandleConnection(client: Socket)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleDisconnect\n                        \n                    \n                \n            \n            \n                \nhandleDisconnect(client: Socket)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleGetQueuePosition\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleGetQueuePosition(client: Socket, queueId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('getQueuePosition')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleJoinCounter\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleJoinCounter(client: Socket, counterId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('joinCounter')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                counterId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleJoinQueue\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleJoinQueue(client: Socket, queueId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('joinQueue')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notifyCounterUpdate\n                        \n                    \n                \n            \n            \n                \nnotifyCounterUpdate(counterId: number, data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                counterId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notifyQueueUpdate\n                        \n                    \n                \n            \n            \n                \nnotifyQueueUpdate(queueId: number, data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  WebSocketGateway,\n  WebSocketServer,\n  SubscribeMessage,\n  OnGatewayConnection,\n  OnGatewayDisconnect,\n} from '@nestjs/websockets';\nimport { Server, Socket } from 'socket.io';\nimport { QueueService } from './queue.service';\nimport { Logger, Inject, forwardRef } from '@nestjs/common';\n\n@WebSocketGateway({\n  cors: {\n    origin: '*', // In production, set to your frontend URL\n  },\n})\nexport class QueueGateway implements OnGatewayConnection, OnGatewayDisconnect {\n  private readonly logger = new Logger(QueueGateway.name);\n\n  @WebSocketServer()\n  server: Server;\n\n  constructor(\n    @Inject(forwardRef(() => QueueService))\n    private readonly queueService: QueueService,\n  ) {}\n\n  handleConnection(client: Socket) {\n    this.logger.log(`Client connected: ${client.id}`);\n  }\n\n  handleDisconnect(client: Socket) {\n    this.logger.log(`Client disconnected: ${client.id}`);\n  }\n\n  @SubscribeMessage('joinQueue')\n  async handleJoinQueue(client: Socket, queueId: number) {\n    await client.join(`queue_${queueId}`);\n    const queueData = await this.queueService.getQueueDetails(queueId);\n    return queueData;\n  }\n\n  @SubscribeMessage('getQueuePosition')\n  async handleGetQueuePosition(client: Socket, queueId: number) {\n    const position = await this.queueService.getQueuePosition(queueId);\n    return { position };\n  }\n\n  @SubscribeMessage('joinCounter')\n  async handleJoinCounter(client: Socket, counterId: number) {\n    await client.join(`counter_${counterId}`);\n    return { success: true };\n  }\n\n  // Send updates to all clients or specific rooms\n  notifyQueueUpdate(queueId: number, data: any) {\n    void this.server.to(`queue_${queueId}`).emit('queueUpdate', data);\n    void this.server.emit('queueListUpdate'); // Global queue update\n  }\n\n  notifyCounterUpdate(counterId: number, data: any) {\n    void this.server.to(`counter_${counterId}`).emit('counterUpdate', data);\n    void this.server.emit('counterListUpdate'); // Global counter update\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/QueueModule.html":{"url":"modules/QueueModule.html","title":"module - QueueModule","body":"\n                   \n\n\n\n\n    Modules\n    QueueModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_QueueModule\n\n\n\ncluster_QueueModule_exports\n\n\n\ncluster_QueueModule_providers\n\n\n\n\nQueueGateway \n\nQueueGateway \n\n\n\nQueueService \n\nQueueService \n\n\n\nQueueModule\n\nQueueModule\n\nQueueGateway  -->\n\nQueueModule->QueueGateway \n\n\n\nQueueService  -->\n\nQueueModule->QueueService \n\n\n\n\n\nQueueService\n\nQueueService\n\nQueueModule -->\n\nQueueService->QueueModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/queue/queue.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            QueueService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            QueueController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            QueueGateway\n                        \n                        \n                            QueueService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {\n  Module,\n  //forwardRef, // Uncomment if you need to use forwardRef\n} from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { QueueService } from './queue.service';\nimport { QueueController } from './queue.controller';\nimport { QueueGateway } from './queue.gateway';\nimport { Queue } from './entities/queue.entity';\nimport { QueueDetails } from './entities/queue-details.entity';\nimport { Counter } from '../counter/entities/counter.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Queue, QueueDetails, Counter])],\n  controllers: [QueueController],\n  providers: [QueueService, QueueGateway],\n  exports: [QueueService, QueueGateway],\n})\nexport class QueueModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QueueService.html":{"url":"injectables/QueueService.html","title":"injectable - QueueService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  QueueService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/queue.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addCounter\n                            \n                            \n                                    Async\n                                callNext\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByQueueNumber\n                            \n                            \n                                    Async\n                                findByStatus\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getCounters\n                            \n                            \n                                    Async\n                                getQueueDetails\n                            \n                            \n                                    Async\n                                getQueuePosition\n                            \n                            \n                                    Async\n                                getStats\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(queueRepository: Repository, queueDetailsRepository: Repository, counterRepository: Repository, queueGateway: QueueGateway)\n                    \n                \n                        \n                            \n                                Defined in src/modules/queue/queue.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        queueRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queueDetailsRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        counterRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queueGateway\n                                                  \n                                                        \n                                                                        QueueGateway\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addCounter\n                        \n                    \n                \n            \n            \n                \n                        \n                    addCounter(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:307\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        callNext\n                        \n                    \n                \n            \n            \n                \n                        \n                    callNext(counterId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:190\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                counterId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createQueueDto: CreateQueueDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createQueueDto\n                                            \n                                                            CreateQueueDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:89\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByQueueNumber\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByQueueNumber(queueNumber: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:114\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueNumber\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByStatus(status: QueueStatus)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:95\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            QueueStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:102\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCounters\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCounters()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:313\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getQueueDetails\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQueueDetails(queueId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:126\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getQueuePosition\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQueuePosition(queueId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:170\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:260\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateQueueDto: UpdateQueueDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:143\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateQueueDto\n                                            \n                                                            UpdateQueueDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  Inject,\n  forwardRef,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, LessThanOrEqual } from 'typeorm';\nimport { Queue, QueueStatus } from './entities/queue.entity';\nimport { QueueDetails } from './entities/queue-details.entity';\nimport {\n  Counter,\n  //CounterStatus, //Uncomment if you need to use CounterStatus\n} from '../counter/entities/counter.entity';\nimport { CreateQueueDto } from './dto/create-queue.dto';\nimport { UpdateQueueDto } from './dto/update-queue.dto';\nimport { QueueGateway } from './queue.gateway';\n\n@Injectable()\nexport class QueueService {\n  constructor(\n    @InjectRepository(Queue)\n    private queueRepository: Repository,\n    @InjectRepository(QueueDetails)\n    private queueDetailsRepository: Repository,\n    @InjectRepository(Counter)\n    private counterRepository: Repository,\n    @Inject(forwardRef(() => QueueGateway))\n    private queueGateway: QueueGateway,\n  ) {}\n\n  async create(createQueueDto: CreateQueueDto) {\n    // Generate a queue number based on date and sequence\n    const today = new Date();\n    const dateStr = `${today.getFullYear()}${String(today.getMonth() + 1).padStart(2, '0')}${String(today.getDate()).padStart(2, '0')}`;\n\n    // Get the count of queues created today to determine the sequence number\n    const todayStart = new Date(today);\n    todayStart.setHours(0, 0, 0, 0);\n\n    const todayCount = await this.queueRepository.count({\n      where: {\n        createdAt: LessThanOrEqual(today),\n      },\n    });\n\n    // Format the queue number: YYYYMMDD-XXXX where XXXX is the sequence number\n    const queueNumber = `${dateStr}-${String(todayCount + 1).padStart(4, '0')}`;\n\n    // Create and save the queue\n    const queue = this.queueRepository.create({\n      queueNumber,\n      status: QueueStatus.PENDING,\n      estimatedWaitTime: 15 * (todayCount + 1), // Simple estimation: 15 minutes per person\n    });\n\n    const savedQueue = await this.queueRepository.save(queue);\n\n    // Create queue details\n    const queueDetails = this.queueDetailsRepository.create({\n      queue: savedQueue,\n      queueId: savedQueue.id,\n      userId: createQueueDto.userId,\n      firstName: createQueueDto.firstName,\n      lastName: createQueueDto.lastName,\n      middleInitial: createQueueDto.middleInitial,\n      address: createQueueDto.address,\n      phoneNumber: createQueueDto.phoneNumber,\n      reasonOfVisit: createQueueDto.reasonOfVisit,\n      appointmentType: createQueueDto.appointmentType,\n    });\n\n    await this.queueDetailsRepository.save(queueDetails);\n\n    // Get queue position\n    const position = await this.getQueuePosition(savedQueue.id);\n\n    const result = { queue: savedQueue, details: queueDetails, position };\n\n    // Notify all clients that a new queue has been created\n    this.queueGateway.server.emit('queueListUpdate', {\n      action: 'created',\n      queueId: savedQueue.id,\n    });\n\n    return result;\n  }\n\n  async findAll() {\n    return await this.queueRepository.find({\n      order: { createdAt: 'ASC' },\n    });\n  }\n\n  async findByStatus(status: QueueStatus) {\n    return await this.queueRepository.find({\n      where: { status },\n      order: { createdAt: 'ASC' },\n    });\n  }\n\n  async findOne(id: number) {\n    const queue = await this.queueRepository.findOne({\n      where: { id },\n    });\n\n    if (!queue) {\n      throw new NotFoundException(`Queue #${id} not found`);\n    }\n\n    return queue;\n  }\n\n  async findByQueueNumber(queueNumber: string) {\n    const queue = await this.queueRepository.findOne({\n      where: { queueNumber },\n    });\n\n    if (!queue) {\n      throw new NotFoundException(`Queue #${queueNumber} not found`);\n    }\n\n    return queue;\n  }\n\n  async getQueueDetails(queueId: number) {\n    const queue = await this.findOne(queueId);\n\n    const details = await this.queueDetailsRepository.findOne({\n      where: { queueId },\n      relations: ['user'],\n    });\n\n    if (!details) {\n      throw new NotFoundException(`Details for queue #${queueId} not found`);\n    }\n\n    const position = await this.getQueuePosition(queueId);\n\n    return { queue, details, position };\n  }\n\n  async update(id: number, updateQueueDto: UpdateQueueDto) {\n    const queue = await this.findOne(id);\n\n    if (updateQueueDto.status) {\n      queue.status = updateQueueDto.status;\n\n      // If completed, set completion time\n      if (updateQueueDto.status === QueueStatus.COMPLETED) {\n        queue.completedAt = new Date();\n      }\n    }\n\n    if (updateQueueDto.counterNumber) {\n      queue.counterNumber = updateQueueDto.counterNumber;\n    }\n\n    const updatedQueue = await this.queueRepository.save(queue);\n\n    // Notify clients about the queue update\n    this.queueGateway.notifyQueueUpdate(id, {\n      action: 'updated',\n      queue: updatedQueue,\n    });\n\n    return updatedQueue;\n  }\n\n  async getQueuePosition(queueId: number) {\n    const queue = await this.findOne(queueId);\n\n    // If the queue is not pending, it's not in line\n    if (queue.status !== QueueStatus.PENDING) {\n      return 0;\n    }\n\n    // Count how many pending queues are ahead of this one\n    const position = await this.queueRepository.count({\n      where: {\n        status: QueueStatus.PENDING,\n        createdAt: LessThanOrEqual(queue.createdAt),\n        id: LessThanOrEqual(queueId), // Break ties using ID\n      },\n    });\n\n    return position;\n  }\n\n  async callNext(counterId: number) {\n    const counter = await this.counterRepository.findOne({\n      where: { id: counterId },\n      relations: ['currentQueue'],\n    });\n\n    if (!counter) {\n      throw new NotFoundException(`Counter #${counterId} not found`);\n    }\n\n    // Mark current queue as completed if exists\n    if (counter.currentQueue) {\n      counter.currentQueue.status = QueueStatus.COMPLETED;\n      counter.currentQueue.completedAt = new Date();\n      await this.queueRepository.save(counter.currentQueue);\n    }\n\n    // Find the next pending queue\n    const nextQueue = await this.queueRepository.findOne({\n      where: { status: QueueStatus.PENDING },\n      order: { createdAt: 'ASC' },\n    });\n\n    if (!nextQueue) {\n      counter.currentQueueId = null;\n      counter.currentQueue = null;\n      await this.counterRepository.save(counter);\n      return { counter, message: 'No more queues waiting' };\n    }\n\n    // Update the next queue\n    nextQueue.status = QueueStatus.SERVING;\n    nextQueue.counterNumber = counter.name;\n    await this.queueRepository.save(nextQueue);\n\n    // Update counter\n    counter.currentQueueId = nextQueue.id;\n    counter.currentQueue = nextQueue;\n    await this.counterRepository.save(counter);\n\n    // Get associated details\n    const details = await this.queueDetailsRepository.findOne({\n      where: { queueId: nextQueue.id },\n    });\n\n    const result = {\n      counter,\n      queue: nextQueue,\n      details,\n      message: 'Next queue called successfully',\n    };\n\n    if (nextQueue) {\n      // Notify the specific queue room that it's their turn\n      this.queueGateway.notifyQueueUpdate(nextQueue.id, {\n        action: 'called',\n        counterName: counter.name,\n        counterId: counter.id,\n      });\n    }\n\n    // Notify counter clients\n    this.queueGateway.notifyCounterUpdate(counterId, {\n      action: 'nextCalled',\n      ...result,\n    });\n\n    return result;\n  }\n\n  async getStats() {\n    const [\n      pendingCount,\n      servingCount,\n      completedCount,\n      cancelledCount,\n      totalCount,\n    ] = await Promise.all([\n      this.queueRepository.count({ where: { status: QueueStatus.PENDING } }),\n      this.queueRepository.count({ where: { status: QueueStatus.SERVING } }),\n      this.queueRepository.count({ where: { status: QueueStatus.COMPLETED } }),\n      this.queueRepository.count({ where: { status: QueueStatus.CANCELLED } }),\n      this.queueRepository.count(),\n    ]);\n\n    // Calculate average wait time\n    const completedQueues = await this.queueRepository.find({\n      where: {\n        status: QueueStatus.COMPLETED,\n        completedAt: LessThanOrEqual(new Date()),\n      },\n      select: ['createdAt', 'completedAt'],\n    });\n\n    let averageWaitTime = 0;\n    if (completedQueues.length > 0) {\n      const totalWaitTimeMs = completedQueues.reduce((total, queue) => {\n        return (\n          total + (queue.completedAt.getTime() - queue.createdAt.getTime())\n        );\n      }, 0);\n      averageWaitTime = Math.floor(\n        totalWaitTimeMs / completedQueues.length / 60000,\n      ); // Convert to minutes\n    }\n\n    return {\n      pending: pendingCount,\n      serving: servingCount,\n      completed: completedCount,\n      cancelled: cancelledCount,\n      total: totalCount,\n      averageWaitTime,\n    };\n  }\n\n  // Add a counter\n  async addCounter(name: string) {\n    const counter = this.counterRepository.create({ name });\n    return await this.counterRepository.save(counter);\n  }\n\n  // Get all counters\n  async getCounters() {\n    return await this.counterRepository.find({\n      relations: ['currentQueue'],\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/register.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for user registration\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                contactNumber\n                            \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                middleName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                nameExtension\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        contactNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        nameExtension\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  MinLength,\n} from 'class-validator';\n\n/**\n * DTO for user registration\n * @class RegisterDto\n */\n\nexport class RegisterDto {\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  password: string;\n\n  @IsString()\n  @IsNotEmpty()\n  firstName: string;\n\n  @IsString()\n  @IsOptional()\n  middleName?: string;\n\n  @IsString()\n  @IsNotEmpty()\n  lastName: string;\n\n  @IsString()\n  @IsOptional()\n  name?: string;\n\n  @IsString()\n  @IsOptional()\n  nameExtension?: string;\n\n  @IsString()\n  contactNumber?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser.html":{"url":"interfaces/RequestWithUser.html","title":"interface - RequestWithUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  Get,\n  UseGuards,\n  Request,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\n\ninterface RequestWithUser extends Request {\n  user: { sub: number; email: string; roles: string[] };\n}\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @Post('login')\n  async login(@Body() loginDto: LoginDto) {\n    console.log('Login request received:', loginDto);\n    try {\n      const result = await this.authService.login(loginDto);\n      return result;\n    } catch (error) {\n      throw new UnauthorizedException(\n        error instanceof Error ? error.message : 'Invalid credentials',\n      );\n    }\n  }\n\n  @Post('register')\n  async register(@Body() registerDto: RegisterDto) {\n    console.log('Register endpoint hit with data:', registerDto); //Debugging Statement\n    return this.authService.register(registerDto);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  getProfile(@Request() req: RequestWithUser) {\n    // Add null check before converting to number\n    if (!req.user || req.user.sub === undefined || req.user.sub === null) {\n      throw new UnauthorizedException('Invalid user ID');\n    }\n    return this.authService.getProfile(Number(req.user.sub));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser-1.html":{"url":"interfaces/RequestWithUser-1.html","title":"interface - RequestWithUser-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/roles.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ROLES_KEY } from '../decorators/roles.decorator';\n\n// Define interface for request with user\ninterface RequestWithUser extends Request {\n  user?: { roles?: string[] };\n}\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(\n      ROLES_KEY,\n      [context.getHandler(), context.getClass()],\n    );\n\n    if (!requiredRoles) {\n      return true;\n    }\n\n    const request = context.switchToHttp().getRequest();\n    const userRoles = request.user?.roles || [];\n    return requiredRoles.some((role) => userRoles.includes(role));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Role.html":{"url":"entities/Role.html","title":"entity - Role","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Role\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/entities/role.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, user => user.roles)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:16\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, PrimaryGeneratedColumn, ManyToMany } from 'typeorm';\nimport { User } from '../../users/entities/user.entity';\n\n@Entity('roles')\nexport class Role {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true, nullable: false })\n  name: string;\n\n  @Column({ nullable: true })\n  description: string;\n\n  @ManyToMany(() => User, (user) => user.roles)\n  users: User[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RolesController.html":{"url":"controllers/RolesController.html","title":"controller - RolesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RolesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/roles.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                roles\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                getUserRoles\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@Roles('admin', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/roles/roles.controller.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@Roles('admin', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/roles/roles.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getUserRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserRoles(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('user/:userId')@Roles('admin', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/roles/roles.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, UseGuards } from '@nestjs/common';\nimport { RolesService } from './roles.service';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../auth/guards/roles.guard';\nimport { Roles } from '../auth/decorators/roles.decorator';\n\n@Controller('roles')\n@UseGuards(JwtAuthGuard, RolesGuard)\nexport class RolesController {\n  constructor(private readonly rolesService: RolesService) {}\n\n  @Get()\n  @Roles('admin', 'super_admin')\n  findAll() {\n    return this.rolesService.findAll();\n  }\n\n  @Get(':id')\n  @Roles('admin', 'super_admin')\n  findOne(@Param('id') id: string) {\n    return this.rolesService.findOne(+id);\n  }\n\n  @Get('user/:userId')\n  @Roles('admin', 'super_admin')\n  getUserRoles(@Param('userId') userId: string) {\n    return this.rolesService.getUserRoles(+userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/roles.guard.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/roles.guard.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ROLES_KEY } from '../decorators/roles.decorator';\n\n// Define interface for request with user\ninterface RequestWithUser extends Request {\n  user?: { roles?: string[] };\n}\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(\n      ROLES_KEY,\n      [context.getHandler(), context.getClass()],\n    );\n\n    if (!requiredRoles) {\n      return true;\n    }\n\n    const request = context.switchToHttp().getRequest();\n    const userRoles = request.user?.roles || [];\n    return requiredRoles.some((role) => userRoles.includes(role));\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RolesModule.html":{"url":"modules/RolesModule.html","title":"module - RolesModule","body":"\n                   \n\n\n\n\n    Modules\n    RolesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_exports\n\n\n\ncluster_RolesModule_providers\n\n\n\n\nRolesService \n\nRolesService \n\n\n\nRolesModule\n\nRolesModule\n\nRolesService  -->\n\nRolesModule->RolesService \n\n\n\n\n\nRolesService\n\nRolesService\n\nRolesModule -->\n\nRolesService->RolesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/roles/roles.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RolesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RolesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RolesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Role } from './entities/role.entity';\nimport { User } from '../users/entities/user.entity';\nimport { RolesService } from './roles.service';\nimport { RolesController } from './roles.controller';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Role, User])],\n  providers: [RolesService],\n  controllers: [RolesController],\n  exports: [RolesService],\n})\nexport class RolesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RolesService.html":{"url":"injectables/RolesService.html","title":"injectable - RolesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RolesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/roles.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                assignRolesToUser\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByName\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getUserRoles\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(rolesRepository: Repository, usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/roles/roles.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        rolesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        assignRolesToUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    assignRolesToUser(userId: number, roleIds: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roleIds\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByName\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByName(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserRoles(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Role } from './entities/role.entity';\nimport { User } from '../users/entities/user.entity';\n\n@Injectable()\nexport class RolesService {\n  constructor(\n    @InjectRepository(Role)\n    private rolesRepository: Repository,\n\n    @InjectRepository(User)\n    private usersRepository: Repository,\n  ) {}\n\n  async findAll(): Promise {\n    return this.rolesRepository.find();\n  }\n\n  async findOne(id: number): Promise {\n    const role = await this.rolesRepository.findOne({ where: { id } });\n    if (!role) {\n      throw new NotFoundException(`Role with ID ${id} not found`);\n    }\n    return role;\n  }\n\n  async findByName(name: string): Promise {\n    const role = await this.rolesRepository.findOne({ where: { name } });\n    if (!role) {\n      throw new NotFoundException(`Role with name ${name} not found`);\n    }\n    return role;\n  }\n\n  async getUserRoles(userId: number): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id: userId },\n      relations: ['roles'],\n    });\n    return user ? user.roles : [];\n  }\n\n  async assignRolesToUser(userId: number, roleIds: number[]): Promise {\n    // Find the user\n    const user = await this.usersRepository.findOne({\n      where: { id: userId },\n      relations: ['roles'],\n    });\n\n    if (!user) {\n      throw new Error('User not found');\n    }\n\n    // Find the roles\n    const roles = await this.rolesRepository.findByIds(roleIds);\n\n    // Assign roles to user\n    user.roles = roles;\n    await this.usersRepository.save(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateQueueDto.html":{"url":"classes/UpdateQueueDto.html","title":"class - UpdateQueueDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateQueueDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/dto/update-queue.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                counterNumber\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        counterNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/update-queue.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueueStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(QueueStatus)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/update-queue.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsEnum, IsOptional } from 'class-validator';\nimport { QueueStatus } from '../entities/queue.entity';\n\nexport class UpdateQueueDto {\n  @IsEnum(QueueStatus)\n  @IsOptional()\n  status?: QueueStatus;\n\n  @IsString()\n  @IsOptional()\n  counterNumber?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                contactNumber\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                defaultRole\n                            \n                            \n                                    \n                                defaultRoleId\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                middleName\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                nameExtension\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                roles\n                            \n                            \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        contactNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'contact_number', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        defaultRole\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {nullable: true})@JoinColumn({name: 'default_role_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        defaultRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'default_role_id', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'first_name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'last_name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'middle_name', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        nameExtension\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'name_extension', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined)@JoinTable({name: 'user_roles', joinColumn: undefined, inverseJoinColumn: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:22\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  ManyToOne,\n  JoinColumn,\n  ManyToMany,\n  JoinTable,\n} from 'typeorm';\nimport { Role } from '../../roles/entities/role.entity';\n\n@Entity('users')\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true })\n  email: string;\n\n  @Column({ unique: true })\n  username: string;\n\n  @Column()\n  password: string;\n\n  @Column({ name: 'first_name' })\n  firstName: string;\n\n  @Column({ name: 'middle_name', nullable: true })\n  middleName: string;\n\n  @Column({ name: 'last_name' })\n  lastName: string;\n\n  @Column()\n  name: string; // Keep for backward compatibility\n\n  @Column({ name: 'name_extension', nullable: true })\n  nameExtension: string;\n\n  @Column({ name: 'contact_number', nullable: true })\n  contactNumber: string;\n\n  @CreateDateColumn({ name: 'created_at' })\n  createdAt: Date;\n\n  @ManyToOne(() => Role, { nullable: true })\n  @JoinColumn({ name: 'default_role_id' })\n  defaultRole: Role;\n\n  @Column({ name: 'default_role_id', nullable: true })\n  defaultRoleId: number;\n\n  @ManyToMany(() => Role)\n  @JoinTable({\n    name: 'user_roles',\n    joinColumn: {\n      name: 'user_id',\n      referencedColumnName: 'id',\n    },\n    inverseJoinColumn: {\n      name: 'role_id',\n      referencedColumnName: 'id',\n    },\n  })\n  roles: Role[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './entities/user.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  exports: [TypeOrmModule],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/auth/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/decorators/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/auth/dto/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                10 %\n                (1/10)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/roles.guard.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            interface\n            JwtPayload\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/config/database.config.ts\n            \n            variable\n            databaseConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            seedDatabaseIfNeeded\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/counter/entities/counter.entity.ts\n            \n            entity\n            Counter\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/queue/dto/create-queue.dto.ts\n            \n            class\n            CreateQueueDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/modules/queue/dto/update-queue.dto.ts\n            \n            class\n            UpdateQueueDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/queue/entities/queue-details.entity.ts\n            \n            entity\n            QueueDetails\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/queue/entities/queue.entity.ts\n            \n            entity\n            Queue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/queue/queue.controller.ts\n            \n            controller\n            QueueController\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/modules/queue/queue.gateway.ts\n            \n            class\n            QueueGateway\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/modules/queue/queue.service.ts\n            \n            injectable\n            QueueService\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/roles/entities/role.entity.ts\n            \n            entity\n            Role\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/roles/roles.controller.ts\n            \n            controller\n            RolesController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/roles/roles.service.ts\n            \n            injectable\n            RolesService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^11.1.0\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.1.0\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/passport : ^11.0.5\n        \n            @nestjs/platform-express : ^11.1.0\n        \n            @nestjs/platform-socket.io : ^11.1.0\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            @nestjs/websockets : ^11.1.0\n        \n            bcrypt : ^5.1.1\n        \n            class-validator : ^0.14.1\n        \n            dotenv : ^16.5.0\n        \n            mysql2 : ^3.14.1\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.2\n        \n            socket.io : ^4.8.1\n        \n            typeorm : ^0.3.22\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CounterStatus   (src/.../counter.entity.ts)\n                        \n                        \n                            QueueStatus   (src/.../queue.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/counter/entities/counter.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        CounterStatus\n                    \n                \n                        \n                            \n                                 ACTIVE\n                            \n                        \n                        \n                            \n                                Value : active\n                            \n                        \n                        \n                            \n                                 INACTIVE\n                            \n                        \n                        \n                            \n                                Value : inactive\n                            \n                        \n            \n        \n\n    src/modules/queue/entities/queue.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        QueueStatus\n                    \n                \n                        \n                            \n                                 PENDING\n                            \n                        \n                        \n                            \n                                Value : pending\n                            \n                        \n                        \n                            \n                                 SERVING\n                            \n                        \n                        \n                            \n                                Value : serving\n                            \n                        \n                        \n                            \n                                 COMPLETED\n                            \n                        \n                        \n                            \n                                Value : completed\n                            \n                        \n                        \n                            \n                                 CANCELLED\n                            \n                        \n                        \n                            \n                                Value : cancelled\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            seedDatabaseIfNeeded   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seedDatabaseIfNeeded\n                        \n                    \n                \n            \n            \n                \nseedDatabaseIfNeeded(dataSource: DataSource)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dataSource\n                                            \n                                                        DataSource\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        QueueModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RolesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_QueueModule\n\n\n\ncluster_QueueModule_exports\n\n\n\ncluster_QueueModule_providers\n\n\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_exports\n\n\n\ncluster_RolesModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nQueueModule\n\nQueueModule\n\nAppModule -->\n\nQueueModule->AppModule\n\n\n\n\n\nQueueGateway \n\nQueueGateway \n\nQueueGateway  -->\n\nQueueModule->QueueGateway \n\n\n\n\n\nQueueService \n\nQueueService \n\nQueueService  -->\n\nQueueModule->QueueService \n\n\n\n\n\nRolesModule\n\nRolesModule\n\nAuthModule -->\n\nRolesModule->AuthModule\n\n\n\nAppModule -->\n\nRolesModule->AppModule\n\n\n\n\n\nRolesService \n\nRolesService \n\nRolesService  -->\n\nRolesModule->RolesService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nQueueService\n\nQueueService\n\nQueueModule -->\n\nQueueService->QueueModule\n\n\n\n\n\nRolesService\n\nRolesService\n\nRolesModule -->\n\nRolesService->RolesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            databaseConfig   (src/.../database.config.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/database.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        databaseConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TypeOrmModuleOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'mysql',\n  host: process.env.DB_HOST || 'localhost',\n  port: parseInt(process.env.DB_PORT || '3306'),\n  username: process.env.DB_USERNAME || 'root',\n  password: process.env.DB_PASSWORD || '',\n  database: process.env.DB_NAME || 'bulak_smart_connect',\n  entities: [__dirname + '/../**/*.entity{.ts,.js}'],\n  synchronize: process.env.NODE_ENV !== 'production',\n  logging: process.env.NODE_ENV !== 'production',\n}\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: string[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
