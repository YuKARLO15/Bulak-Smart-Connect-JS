var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AdminUpdateUserDto.html",[0,0.012,1,1.78]],["body/classes/AdminUpdateUserDto.html",[0,0.019,1,2.377,2,1.263,3,0.203,4,0.179,5,0.179,6,3.429,7,1.965,8,2.847,9,2.806,10,2.365,11,1.858,12,1.358,13,1.729,14,3.333,15,0.253,16,0.954,17,1.782,18,3.082,19,3.429,20,3.021,21,2.806,22,2.248,23,2.051,24,2.051,25,2.806,26,2.806,27,2.591,28,2.248,29,0.819,30,0.025,31,1.438,32,1.657,33,4.704,34,1.858,35,1.971,36,1.16,37,4.137,38,2.635,39,1.02,40,2.635,41,2.365,42,2.891,43,2.598,44,1.096,45,2.635,46,2.635,47,0.922,48,3.282,49,3.282,50,3.282,51,3.282,52,3.282,53,3.282,54,2.231,55,6.119,56,2.635,57,2.891,58,2.231,59,2.635,60,2.231,61,2.635,62,2.365,63,1.38,64,2.231,65,2.635,66,2.891,67,1.965,68,2.635,69,2.891,70,1.965,71,2.635,72,2.891,73,2.891,74,3.429,75,2.891,76,1.965,77,2.635,78,2.891,79,3.082,80,2.891,81,2.598,82,3.429,83,2.231,84,2.635,85,2.231,86,2.635,87,0.298,88,2.891,89,3.894,90,3.426,91,3.282,92,3.282,93,1.362,94,1.766,95,4.76,96,1.362,97,1.607,98,1.475,99,1.965,100,0.298,101,1.766,102,1.965,103,1.965,104,1.965,105,1.965,106,1.965,107,1.965,108,2.231,109,3.282,110,1.607,111,0.014,112,0.014]],["title/controllers/AppController.html",[113,1.173,114,2.308]],["body/controllers/AppController.html",[0,0.017,3,0.362,4,0.319,5,0.319,15,0.452,30,0.026,32,1.506,39,0.927,47,0.854,87,0.441,100,0.362,111,0.021,112,0.021,113,1.953,114,3.843,115,1.958,116,3.986,117,2.085,118,5.448,119,6.434,120,4.707,121,2.085,122,5.733,123,4.707,124,2.557,125,0.882,126,3.462,127,3.986,128,1.958,129,2.872,130,1.607,131,4.707,132,4.707]],["title/modules/AppModule.html",[133,1.338,134,2.308]],["body/modules/AppModule.html",[0,0.012,3,0.251,4,0.222,5,0.222,27,1.566,28,1.359,29,0.415,30,0.026,47,0.625,87,0.502,100,0.251,111,0.016,112,0.016,114,3.474,115,1.88,125,0.612,126,3.4,127,2.766,133,2.015,134,4.513,135,1.566,136,1.689,137,1.993,138,1.993,139,1.689,140,3.162,141,1.83,142,2.766,143,2.766,144,2.766,145,3.705,146,3.705,147,3.4,148,3.705,149,2.758,150,1.993,151,1.83,152,3.267,153,3.162,154,4.52,155,3.748,156,1.993,157,1.993,158,1.457,159,2.437,160,3.267,161,3.267,162,3.267,163,3.267,164,2.766,165,3.267,166,3.267,167,3.267,168,2.156,169,3.267,170,2.19,171,2.766,172,2.766,173,2.766,174,3.267,175,2.766,176,3.267,177,3.267,178,3.267,179,2.437,180,3.267,181,1.566,182,2.766,183,2.766,184,3.827,185,4.52,186,4.17,187,3.03,188,3.267,189,4.971,190,2.766,191,2.766,192,3.267,193,3.267,194,3.267,195,1.83,196,3.267,197,3.267,198,3.267,199,3.267,200,2.531,201,3.267,202,3.267,203,3.267,204,2.016,205,5.592,206,3.748,207,3.827,208,1.113,209,3.267,210,3.827,211,4.52,212,2.766,213,3.267,214,2.766,215,3.267,216,2.312,217,3.267,218,3.267,219,3.371,220,4.52,221,3.267,222,3.267,223,3.267,224,2.766,225,3.267,226,3.267,227,3.267,228,3.267,229,3.267,230,3.267,231,3.267,232,3.267]],["title/injectables/AppService.html",[126,1.928,233,0.965]],["body/injectables/AppService.html",[0,0.018,3,0.392,4,0.345,5,0.345,15,0.489,30,0.025,39,0.823,47,0.83,87,0.392,100,0.392,111,0.022,112,0.022,117,2.185,118,5.591,121,1.851,125,0.953,126,3.364,130,1.427,233,1.684,234,2.631,235,4.308,236,5.088,237,5.088,238,5.088]],["title/controllers/AuthController.html",[113,1.173,239,2.101]],["body/controllers/AuthController.html",[0,0.006,1,2.276,3,0.13,4,0.115,5,0.115,8,3.019,10,2.121,11,2.699,12,1.386,13,0.756,14,3.018,15,0.163,16,0.985,17,1.157,22,2.227,28,2.154,29,0.822,30,0.026,31,1.16,32,1.157,35,1.556,36,1.487,39,0.712,41,1.679,44,1.446,47,0.829,63,1.086,87,0.412,96,0.876,98,1.946,100,0.13,111,0.01,112,0.01,113,0.577,115,0.705,117,1.001,121,1.601,124,2.735,125,0.317,128,0.705,130,1.234,195,2.241,204,2.56,208,0.577,216,1.551,239,1.679,240,1.264,241,1.136,242,3.389,243,2.592,244,2.331,245,2.686,246,2.331,247,2.943,248,1.694,249,2.844,250,2.592,251,4.402,252,3.389,253,2.331,254,2.053,255,2.331,256,1.694,257,1.07,258,1.694,259,1.694,260,4.384,261,2.442,262,1.694,263,3.993,264,3.993,265,3.434,266,4.197,267,2.331,268,3.476,269,4.384,270,3.993,271,1.694,272,2.331,273,2.331,274,2.331,275,1.694,276,2.331,277,2.121,278,1.694,279,3.993,280,3.993,281,3.517,282,2.753,283,1.694,284,1.694,285,1.694,286,2.331,287,1.694,288,1.831,289,3.517,290,2.241,291,1.694,292,1.694,293,4.28,294,2.053,295,2.753,296,1.694,297,1.694,298,1.694,299,1.435,300,2.899,301,1.694,302,3.389,303,3.389,304,2.753,305,1.694,306,1.694,307,1.694,308,1.435,309,2.899,310,1.694,311,2.331,312,2.592,313,1.694,314,1.694,315,1.694,316,1.694,317,1.694,318,2.121,319,1.694,320,1.694,321,1.694,322,1.694,323,1.034,324,2.33,325,1.034,326,2.442,327,1.034,328,1.797,329,1.264,330,1.264,331,1.264,332,0.876,333,1.435,334,1.136,335,1.034,336,1.264,337,1.456,338,1.136,339,1.423,340,1.435,341,1.435,342,3.993,343,5.239,344,1.435,345,2.331,346,3.727,347,0.705,348,1.034,349,1.435,350,1.435,351,3.727,352,2.053,353,2.331,354,2.331,355,1.845,356,2.592,357,1.435,358,1.435,359,1.264,360,1.435,361,1.946,362,1.541,363,1.435,364,1.946,365,2.997,366,2.104,367,2.104,368,2.592,369,2.592,370,2.121,371,1.435,372,1.435,373,1.435,374,1.136,375,1.435,376,1.136,377,1.435,378,1.435,379,2.943,380,2.33,381,1.435,382,1.435,383,2.33,384,2.261,385,2.121,386,2.592,387,2.943,388,2.943,389,3.993,390,2.121,391,1.435,392,1.435,393,1.435,394,2.331,395,2.053,396,1.435,397,1.264,398,1.264,399,1.136,400,1.435,401,1.435,402,1.435,403,1.435]],["title/modules/AuthModule.html",[133,1.338,145,2.101]],["body/modules/AuthModule.html",[0,0.014,3,0.303,4,0.268,5,0.268,12,0.849,30,0.026,87,0.52,100,0.303,111,0.018,112,0.018,115,2.133,125,0.739,130,1.105,133,2.215,135,1.89,136,2.038,137,2.405,138,2.405,139,2.038,140,3.477,141,3.191,145,4.174,147,3.591,149,3.128,150,2.405,151,2.208,153,3.128,155,3.82,156,2.405,157,2.405,158,1.759,164,3.338,170,2.643,171,3.338,239,3.477,328,3.537,329,2.94,404,3.338,405,3.943,406,3.338,407,3.338,408,3.831,409,3.943,410,3.943,411,2.94,412,5.128,413,2.405,414,2.208,415,3.943,416,3.943,417,3.943,418,3.943,419,2.405,420,3.943,421,3.943,422,3.943,423,3.943,424,3.943,425,3.943,426,3.943,427,3.338]],["title/injectables/AuthService.html",[233,0.965,328,1.78]],["body/injectables/AuthService.html",[0,0.005,1,1.783,3,0.103,4,0.09,5,0.09,10,2.721,11,2.556,12,1.372,14,2.756,15,0.128,17,1.232,18,0.893,21,0.813,22,2.346,23,1.006,24,0.594,25,1.788,26,1.375,27,2.703,28,2.033,29,0.596,30,0.026,31,1.28,34,2.139,35,2.224,36,1.253,39,0.759,43,1.511,47,0.312,62,1.375,63,1.164,87,0.389,97,0.813,98,1.262,99,2.186,100,0.103,111,0.008,112,0.008,117,0.82,121,1.622,125,0.249,130,1.251,158,0.594,179,1.681,187,0.893,204,2.585,206,1.511,208,2.151,212,2.92,216,2.669,233,0.632,234,0.689,243,2.186,244,1.909,245,1.375,246,1.909,250,3.644,257,1.499,277,2.555,281,3.327,288,1.951,290,2.16,293,1.681,294,0.993,299,1.909,300,2.83,308,1.909,309,2.345,318,2.555,326,1.788,328,1.166,330,0.993,331,0.993,335,0.813,336,0.993,337,1.939,348,0.813,352,0.993,355,2.311,359,0.993,361,2.83,362,2.345,364,2.985,365,3.67,366,2.83,367,2.714,368,3.498,369,1.681,370,2.862,384,0.639,385,2.721,386,0.993,390,1.375,395,2.571,397,1.681,399,1.511,411,0.993,414,0.746,428,1.128,429,2.585,430,2.254,431,2.254,432,2.254,433,1.262,434,1.332,435,2.311,436,4.461,437,2.306,438,1.332,439,1.909,440,1.332,441,1.332,442,3.448,443,1.332,444,1.332,445,1.332,446,1.332,447,0.813,448,1.332,449,1.332,450,2.254,451,1.332,452,2.254,453,1.332,454,2.931,455,4.69,456,0.993,457,0.594,458,1.909,459,1.332,460,1.128,461,4.137,462,3.448,463,1.332,464,2.931,465,3.448,466,2.571,467,2.92,468,2.92,469,3.448,470,3.448,471,3.448,472,3.448,473,1.332,474,0.993,475,1.332,476,1.332,477,1.332,478,1.332,479,1.332,480,1.332,481,2.254,482,2.931,483,1.332,484,1.332,485,1.332,486,1.332,487,3.857,488,1.332,489,3.448,490,0.993,491,1.332,492,2.254,493,2.311,494,1.332,495,1.332,496,1.128,497,2.931,498,2.931,499,2.254,500,2.254,501,1.332,502,1.128,503,0.993,504,1.332,505,2.571,506,2.92,507,1.332,508,2.254,509,3.448,510,2.931,511,2.931,512,3.448,513,2.254,514,2.254,515,1.332,516,1.332,517,1.332,518,2.254,519,2.931,520,1.332,521,1.332,522,2.931,523,1.332,524,1.332,525,2.482,526,1.128,527,2.482,528,1.332,529,1.332,530,2.931,531,1.332,532,2.254,533,1.332,534,1.332,535,2.254,536,2.931,537,1.681,538,2.931,539,2.254,540,2.931,541,1.332,542,3.448,543,1.332,544,1.332,545,1.332,546,1.332,547,1.332,548,1.332,549,2.254,550,1.332,551,1.332,552,1.332,553,2.254,554,1.332,555,1.332,556,2.254,557,1.332,558,1.128,559,1.332,560,2.254,561,1.332,562,2.571,563,1.332,564,1.332,565,1.332,566,0.993,567,3.448,568,1.332,569,0.993,570,1.332,571,2.254,572,2.254,573,1.332,574,1.332,575,1.332,576,2.931,577,1.332,578,3.857,579,1.332,580,0.993,581,1.332,582,2.254,583,1.332,584,1.332,585,2.254,586,1.332,587,1.332,588,1.332,589,1.332,590,1.332,591,1.332,592,1.332,593,1.332,594,1.332]],["title/entities/Counter.html",[595,1.338,596,1.78]],["body/entities/Counter.html",[0,0.014,3,0.304,4,0.268,5,0.268,15,0.379,16,1.263,29,0.815,30,0.026,31,1.486,32,1.645,34,2.461,36,1.706,39,1.012,44,1.643,47,0.71,63,1.441,87,0.395,100,0.395,111,0.018,112,0.018,124,2.544,168,2.373,181,1.894,384,2.895,457,1.762,595,1.535,596,2.654,597,2.946,598,4.829,599,5.704,600,2.669,601,3.344,602,5.134,603,3.684,604,2.946,605,6.039,606,4.347,607,5.134,608,3.95,609,2.648,610,3.95,611,3.48,612,3.95,613,3.819,614,3.95,615,4.668,616,3.344,617,4.668,618,3.95,619,4.347,620,3.828,621,3.95,622,4.347,623,4.347,624,3.95,625,3.95]],["title/classes/CreateQueueDto.html",[0,0.012,626,2.101]],["body/classes/CreateQueueDto.html",[0,0.018,2,1.839,3,0.295,4,0.26,5,0.26,15,0.368,16,1.239,17,1.765,20,2.907,23,2.508,24,2.508,29,0.846,30,0.025,31,1.239,32,1.749,39,1.077,47,0.959,87,0.295,89,3.957,90,3.685,93,1.983,100,0.295,111,0.018,112,0.018,257,2.186,447,3.073,626,3.073,627,5.689,628,2.861,629,4.194,630,4.194,631,3.769,632,3.769,633,3.769,634,4.761,635,3.836,636,5.971,637,3.836,638,3.836,639,3.836,640,3.836,641,3.836,642,3.836,643,3.836,644,3.836,645,3.836,646,4.624,647,5.037]],["title/injectables/JwtAuthGuard.html",[233,0.965,332,1.78]],["body/injectables/JwtAuthGuard.html",[0,0.019,3,0.4,4,0.353,5,0.353,13,2.714,30,0.025,87,0.468,100,0.4,111,0.022,112,0.022,125,0.974,233,1.706,234,2.688,332,3.146,413,3.172,648,4.403,649,4.403,650,6.084,651,5.2]],["title/interfaces/JwtPayload.html",[347,1.432,652,2.308]],["body/interfaces/JwtPayload.html",[0,0.014,3,0.31,4,0.273,5,0.273,13,1.795,15,0.386,16,1.279,17,1.365,22,2.683,29,0.731,30,0.026,31,1.416,39,0.651,44,1.674,47,0.891,87,0.468,100,0.31,111,0.019,112,0.019,125,0.754,128,1.674,130,1.128,155,3.857,156,2.455,200,2.253,208,2.071,233,1.457,257,2.02,326,2.455,337,2.345,347,1.674,348,3.841,366,2.318,367,2.318,390,2.455,408,2.253,413,2.455,419,2.455,490,4.291,493,2.698,652,4.077,653,2.698,654,3.001,655,3.407,656,3.407,657,3.407,658,3.001,659,3.407,660,4.873,661,3.407,662,3.407,663,3.407,664,2.698,665,3.407,666,3.407,667,3.407,668,3.407,669,3.407,670,3.407,671,3.407,672,3.407,673,3.407,674,3.407,675,3.407,676,3.407,677,3.407]],["title/injectables/JwtStrategy.html",[233,0.965,408,1.928]],["body/injectables/JwtStrategy.html",[0,0.014,3,0.306,4,0.27,5,0.27,13,2.298,15,0.381,17,1.354,22,2.379,29,0.655,30,0.026,31,0.977,39,0.925,44,1.652,47,0.712,63,1.186,87,0.466,100,0.306,111,0.019,112,0.019,117,1.874,121,1.445,125,0.744,128,1.652,130,1.114,155,4.307,156,2.423,200,2.224,208,2.061,233,1.445,234,2.054,257,2.003,288,2.144,326,2.423,337,2.08,347,1.652,348,3.143,366,2.298,367,2.298,390,2.423,408,2.885,413,2.423,419,2.423,433,2.224,490,4.513,493,2.662,505,3.842,652,4.307,654,2.962,655,3.363,656,3.363,657,3.363,658,2.962,659,4.363,660,4.842,661,3.363,662,3.363,663,3.363,664,2.662,665,3.363,666,3.363,667,3.363,668,3.363,669,3.363,670,4.363,671,3.363,672,3.363,673,3.363,674,3.363,675,3.363,676,3.363,677,3.363,678,3.972,679,3.972,680,3.972]],["title/classes/LoginDto.html",[0,0.012,300,1.928]],["body/classes/LoginDto.html",[0,0.022,2,2.148,3,0.345,4,0.304,5,0.304,8,2.698,9,3.393,12,1.361,15,0.43,16,1.368,22,2.314,27,3.118,28,2.314,29,0.707,30,0.025,32,1.461,37,3.859,39,0.9,47,0.874,81,3.003,87,0.428,90,3.114,93,2.316,94,4.054,96,2.316,100,0.345,101,3.003,111,0.02,112,0.02,245,3.859,300,3.387,646,4.51,681,3.793,682,6.048,683,4.709,684,4.48,685,4.48,686,4.709,687,4.48,688,4.48]],["title/entities/Queue.html",[595,1.338,600,1.432]],["body/entities/Queue.html",[0,0.012,3,0.263,4,0.232,5,0.232,15,0.328,16,1.147,29,0.836,30,0.026,31,1.403,32,1.709,34,2.236,36,1.588,39,1.052,44,1.422,47,0.788,63,1.374,87,0.408,100,0.359,111,0.017,112,0.017,124,2.367,168,2.737,181,1.639,457,1.525,595,1.329,596,3.363,600,2.208,601,2.895,603,3.913,609,3.821,611,3.238,613,3.756,616,2.895,617,4.449,619,3.948,689,2.55,690,3.957,691,3.957,692,3.557,693,3.999,694,3.957,695,3.557,696,4.251,697,4.663,698,3.419,699,3.948,700,3.419,701,4.663,702,3.419,703,2.895,704,3.948,705,3.419,706,3.192,707,3.419,708,4.663,709,3.419,710,4.663,711,3.419,712,3.419,713,4.663,714,3.477,715,3.419,716,3.34,717,3.419,718,4.663,719,3.948,720,2.55,721,2.55,722,2.845,723,2.845,724,3.477,725,3.477,726,3.419,727,2.895]],["title/controllers/QueueController.html",[113,1.173,728,2.308]],["body/controllers/QueueController.html",[0,0.007,3,0.151,4,0.134,5,0.134,9,1.2,11,1.841,12,0.423,15,0.189,17,1.569,29,0.809,30,0.026,31,0.484,32,1.695,36,1.89,39,1.044,44,0.819,47,0.914,63,1.395,87,0.388,97,1.893,100,0.151,111,0.011,112,0.011,113,0.67,115,0.819,117,1.128,121,2.346,124,2.621,125,0.369,128,0.819,129,1.2,130,1.829,168,0.819,195,1.737,200,1.737,204,2.248,208,1.308,216,1.384,241,1.319,254,1.467,257,1.695,261,1.2,265,1.2,266,1.467,288,2.485,289,2.313,290,1.737,318,1.2,323,1.893,324,3.938,325,1.2,327,1.2,332,1.017,334,1.319,335,1.2,361,1.737,362,1.737,364,1.737,365,2.822,366,0.878,370,2.66,374,2.922,380,1.319,384,0.943,419,1.2,466,2.313,493,1.319,505,1.467,600,2.097,617,1.467,626,3.219,693,3.18,695,2.079,716,2.657,722,1.2,723,1.2,728,2.079,729,1.666,730,2.627,731,2.627,732,3.102,733,2.627,734,2.922,735,2.627,736,2.627,737,4.36,738,2.079,739,4.36,740,4.36,741,4.36,742,4.36,743,3.691,744,2.627,745,2.627,746,2.627,747,3.691,748,3.102,749,1.967,750,3.759,751,3.102,752,1.967,753,1.666,754,3.102,755,1.967,756,2.313,757,1.967,758,3.102,759,1.967,760,1.967,761,1.967,762,1.967,763,1.967,764,1.666,765,3.102,766,1.967,767,1.666,768,3.102,769,1.967,770,3.102,771,1.967,772,1.319,773,2.627,774,1.967,775,3.102,776,1.967,777,3.102,778,1.967,779,3.102,780,1.967,781,3.102,782,1.967,783,3.102,784,1.967,785,1.967,786,3.102,787,1.967,788,1.967,789,3.102,790,1.967,791,1.967,792,3.102,793,1.967,794,3.102,795,1.967,796,1.666,797,3.336,798,3.102,799,1.967,800,1.967,801,3.102,802,1.967,803,1.967,804,3.102,805,1.467,806,1.967,807,1.967,808,1.967,809,1.841,810,1.319,811,1.666,812,2.627,813,1.2,814,1.666,815,1.967,816,1.967,817,1.666,818,3.102,819,1.967,820,1.967,821,1.967,822,2.627,823,1.967,824,2.864,825,2.627,826,2.627,827,1.967,828,1.967,829,1.967,830,1.967,831,1.967,832,1.967,833,1.967,834,1.666,835,1.666,836,1.967,837,1.467,838,1.967,839,1.666,840,1.967,841,1.967,842,1.967,843,1.967,844,2.574,845,1.967,846,1.967,847,3.841,848,1.967,849,1.967,850,3.102,851,1.967,852,2.627,853,1.967,854,1.666,855,1.967,856,1.967,857,1.967,858,1.967,859,1.967,860,1.967,861,1.967,862,1.967,863,1.967,864,1.967,865,1.967,866,1.967,867,1.967,868,1.967,869,1.967,870,1.967]],["title/entities/QueueDetails.html",[595,1.338,706,1.928]],["body/entities/QueueDetails.html",[0,0.011,3,0.234,4,0.206,5,0.206,12,1.313,15,0.291,16,1.056,20,2.575,23,2.222,24,2.222,29,0.84,30,0.026,31,1.46,32,1.737,34,2.058,36,1.49,39,1.069,47,0.92,63,1.496,87,0.383,100,0.234,111,0.015,112,0.015,168,2.635,181,1.455,187,2.878,200,2.404,257,1.936,384,2.058,414,1.7,447,2.619,457,1.354,595,1.18,600,2.635,603,3.865,604,2.263,606,4.585,609,4.246,611,3.039,613,3.963,620,3.714,629,3.714,630,3.714,631,3.339,632,3.339,633,3.339,706,2.404,871,5.637,872,2.57,873,3.714,874,2.57,875,3.035,876,4.293,877,3.035,878,3.635,879,3.035,880,3.035,881,4.293,882,3.035,883,3.635,884,3.035,885,4.293,886,3.035,887,4.293,888,3.035,889,3.635,890,3.635,891,5.415,892,3.035,893,5.415,894,4.293,895,3.035,896,3.035,897,4.293,898,3.035,899,4.585,900,4.293,901,3.035,902,3.035,903,4.217,904,3.035,905,3.035,906,3.035]],["title/classes/QueueGateway.html",[0,0.012,907,1.928]],["body/classes/QueueGateway.html",[0,0.01,2,1.289,3,0.207,4,0.182,5,0.182,11,1.886,15,0.258,16,0.968,17,1.616,29,0.794,30,0.026,31,1.617,32,1.431,34,1.289,39,1.025,63,1.416,87,0.394,100,0.207,111,0.014,112,0.014,117,1.692,121,2.193,125,0.503,129,3.123,130,1.436,168,1.636,170,1.802,191,4.335,195,3.444,204,2.859,208,1.34,216,2.43,261,1.64,288,2.559,290,2.867,323,1.64,356,2.004,367,1.755,383,1.802,429,3.432,433,2.202,496,2.276,537,2.004,566,3.469,596,1.39,600,1.935,756,3.818,809,2.819,810,1.802,844,1.802,873,4.385,907,2.202,908,2.276,909,2.933,910,4.652,911,4.652,912,4.819,913,3.933,914,3.933,915,3.933,916,3.933,917,3.933,918,3.933,919,3.933,920,3.933,921,2.688,922,3.933,923,3.933,924,2.688,925,4.652,926,3.933,927,6.72,928,2.688,929,5.88,930,6.029,931,3.933,932,2.688,933,3.933,934,3.933,935,2.688,936,3.933,937,3.933,938,2.688,939,3.933,940,3.933,941,2.688,942,3.933,943,3.933,944,2.688,945,3.933,946,2.688,947,3.933,948,2.688,949,3.933,950,2.688,951,2.276,952,3.33,953,2.004,954,3.933,955,2.688,956,2.688,957,3.933,958,2.688,959,2.688,960,2.688,961,2.688,962,2.276,963,3.933,964,2.688,965,4.652,966,2.688,967,2.688,968,3.933,969,2.688,970,3.33,971,2.688,972,2.688,973,2.688,974,4.652,975,2.688,976,2.688,977,2.688,978,2.276,979,2.688,980,2.688,981,2.688,982,3.933,983,2.688,984,2.688]],["title/modules/QueueModule.html",[133,1.338,146,2.101]],["body/modules/QueueModule.html",[0,0.015,3,0.326,4,0.288,5,0.288,30,0.026,87,0.522,100,0.326,111,0.019,112,0.019,115,2.235,125,0.794,133,2.293,135,2.033,136,2.192,137,2.587,138,2.587,139,2.192,140,3.598,141,3.302,146,4.099,149,3.278,150,2.587,151,2.374,153,2.587,157,2.587,158,1.891,596,2.778,600,1.764,706,3.008,720,3.162,721,3.162,728,3.953,805,3.162,809,3.313,810,2.842,813,2.587,907,3.762,953,4.007,985,3.59,986,3.59,987,3.59,988,4.24,989,3.953,990,3.162,991,3.59,992,4.24,993,4.24,994,3.59,995,3.59,996,4.24]],["title/injectables/QueueService.html",[233,0.965,809,1.651]],["body/injectables/QueueService.html",[0,0.004,3,0.094,4,0.083,5,0.083,11,1.752,12,0.59,15,0.117,17,1.389,20,0.629,23,0.542,24,0.542,29,0.672,30,0.026,31,1.511,36,1.545,39,0.902,41,0.742,42,1.556,44,0.506,47,0.59,62,0.742,63,1.264,87,0.362,97,0.742,100,0.094,110,0.742,111,0.007,112,0.007,113,0.414,117,0.759,121,1.997,124,2.638,125,0.228,130,1.711,158,0.542,170,0.815,187,1.398,195,0.681,204,2.941,206,1.398,208,2.191,210,1.03,216,2.801,219,1.556,224,1.03,233,0.585,234,0.629,257,1.658,261,1.273,277,1.981,288,2.199,290,3.02,318,1.671,335,0.742,361,1.534,362,2.389,364,1.534,365,2.389,366,1.63,367,2.098,370,1.273,376,0.815,383,0.815,384,1.313,385,0.742,429,2.177,433,1.168,435,3.27,456,0.907,457,0.542,466,2.043,467,1.03,474,2.422,502,1.03,506,1.03,526,1.03,527,1.03,537,0.907,562,0.907,569,3.752,596,2.431,598,1.766,600,2.749,615,1.556,626,2.23,629,0.907,630,2.422,631,0.815,632,0.815,633,0.815,690,1.556,692,2.86,693,3.927,694,0.907,695,2.45,696,2.726,699,2.319,706,1.534,716,2.389,720,0.907,721,0.907,722,1.981,723,0.742,724,2.043,725,0.907,727,3.095,730,1.766,731,1.766,733,2.75,734,2.177,735,1.766,736,1.766,738,1.398,743,2.75,744,1.766,745,1.766,746,1.766,747,2.75,753,1.766,756,2.422,764,1.766,767,1.766,772,1.398,796,1.766,797,2.746,805,0.907,809,1,811,1.03,812,1.766,813,0.742,824,3.852,825,3.095,826,1.03,837,0.907,839,2.75,852,1.766,873,3.507,907,2.521,953,0.907,962,1.03,970,3.612,978,2.319,990,0.907,991,1.766,994,1.03,995,1.03,997,1.03,998,2.086,999,2.086,1000,1.216,1001,2.739,1002,2.739,1003,1.216,1004,2.086,1005,2.086,1006,1.216,1007,1.216,1008,2.086,1009,1.216,1010,2.086,1011,1.216,1012,1.216,1013,1.216,1014,1.216,1015,2.086,1016,1.216,1017,1.216,1018,1.216,1019,2.086,1020,1.216,1021,2.086,1022,1.216,1023,2.086,1024,1.216,1025,1.216,1026,1.216,1027,1.03,1028,1.216,1029,1.216,1030,1.216,1031,1.216,1032,1.03,1033,2.739,1034,2.086,1035,2.086,1036,1.216,1037,1.216,1038,1.216,1039,2.086,1040,2.739,1041,1.216,1042,1.216,1043,1.216,1044,1.216,1045,2.086,1046,4.266,1047,1.216,1048,1.216,1049,2.086,1050,1.216,1051,1.216,1052,2.086,1053,1.216,1054,2.086,1055,1.03,1056,1.216,1057,2.086,1058,1.216,1059,1.216,1060,2.739,1061,2.086,1062,1.216,1063,1.216,1064,2.086,1065,1.216,1066,1.216,1067,2.086,1068,1.216,1069,1.216,1070,1.216,1071,1.398,1072,2.086,1073,1.216,1074,2.086,1075,1.216,1076,1.216,1077,1.216,1078,1.216,1079,1.216,1080,1.216,1081,1.216,1082,1.216,1083,1.216,1084,1.216,1085,1.216,1086,3.248,1087,1.216,1088,3.248,1089,3.248,1090,3.248,1091,3.248,1092,3.248,1093,2.086,1094,2.086,1095,2.086,1096,1.216,1097,1.216,1098,1.216,1099,1.766,1100,1.216,1101,1.03,1102,3.248,1103,1.216,1104,2.319,1105,1.216,1106,3.248,1107,1.03,1108,2.086,1109,1.03,1110,3.248,1111,1.216,1112,1.216,1113,2.086,1114,1.216,1115,1.216,1116,1.216,1117,1.216,1118,1.216,1119,1.216,1120,1.216,1121,1.216,1122,2.086,1123,2.739,1124,2.086,1125,1.216,1126,1.216,1127,1.216,1128,1.216,1129,1.216,1130,1.216,1131,2.086,1132,1.216,1133,1.216,1134,1.216,1135,1.216,1136,1.216,1137,1.216,1138,1.216,1139,1.216,1140,2.086,1141,2.086,1142,1.216,1143,2.086,1144,2.086,1145,1.03,1146,1.216,1147,1.03,1148,1.216,1149,1.03,1150,1.03,1151,1.216,1152,1.216,1153,1.216,1154,1.216,1155,1.216,1156,1.216,1157,1.216,1158,1.216,1159,3.655,1160,2.086,1161,2.739,1162,2.086,1163,1.03,1164,1.216,1165,1.216,1166,2.086,1167,1.216,1168,2.086,1169,1.216,1170,2.086,1171,1.216,1172,1.766,1173,1.216,1174,1.216,1175,1.216,1176,1.216,1177,1.216,1178,1.216,1179,1.216,1180,2.086,1181,2.086,1182,2.086,1183,2.086,1184,2.086,1185,1.03,1186,1.216,1187,1.216,1188,1.216,1189,1.216,1190,1.216,1191,1.216,1192,1.216,1193,2.739,1194,2.086,1195,2.086,1196,1.216,1197,2.086,1198,1.216,1199,1.216,1200,1.216,1201,1.216,1202,1.216,1203,1.216,1204,1.216,1205,1.216]],["title/controllers/QueuesController.html",[113,1.173,989,2.308]],["body/controllers/QueuesController.html",[0,0.013,3,0.281,4,0.248,5,0.248,15,0.351,20,1.889,23,1.629,24,1.629,30,0.026,32,0.96,36,1.093,39,0.591,87,0.422,100,0.281,111,0.018,112,0.018,113,1.244,115,1.52,117,1.996,121,1.329,124,2.175,125,0.684,128,1.52,129,2.229,130,1.367,204,2.448,208,1.995,216,1.629,241,2.448,290,2.045,323,2.229,324,2.448,325,2.229,327,2.229,361,2.045,362,2.73,364,2.045,365,3.073,366,1.629,374,3.268,376,2.448,384,3.01,525,3.093,562,2.724,600,1.52,631,2.448,632,2.448,633,2.448,690,2.724,691,2.724,692,2.448,693,3.926,694,2.724,695,2.448,716,2.045,722,2.975,723,2.975,809,2.631,810,2.448,813,2.229,817,3.093,824,4.779,834,3.093,835,3.093,837,2.724,890,3.093,989,3.268,1071,3.268,1101,4.129,1104,4.129,1107,3.093,1109,3.093,1145,4.129,1147,3.093,1149,3.093,1150,3.093,1172,3.093,1185,3.093,1206,3.093,1207,5.857,1208,4.876,1209,3.653,1210,3.653,1211,3.653,1212,3.653,1213,3.653,1214,3.653,1215,4.876,1216,3.653,1217,3.653,1218,3.653,1219,3.653,1220,4.876,1221,4.876,1222,3.653,1223,3.653,1224,3.653,1225,3.653,1226,3.653,1227,3.653,1228,3.653,1229,3.653,1230,3.653,1231,3.653,1232,3.653,1233,3.653,1234,3.653,1235,3.653,1236,3.653,1237,3.653,1238,3.653,1239,3.653,1240,3.653,1241,3.653,1242,3.653,1243,4.876]],["title/classes/RegisterDto.html",[0,0.012,309,1.928]],["body/classes/RegisterDto.html",[0,0.018,2,1.474,3,0.237,4,0.209,5,0.209,8,2.872,9,2.643,12,1.415,15,0.295,16,1.066,17,1.692,20,2.24,21,3.06,22,2.389,23,2.238,24,2.238,25,3.06,26,3.06,27,2.753,28,2.389,29,0.807,30,0.025,31,1.066,32,1.669,33,4.061,37,4.153,39,1.028,47,0.941,57,3.231,62,2.643,63,1.526,66,3.231,67,2.293,69,3.231,70,2.293,72,3.231,73,3.231,74,3.741,75,3.231,76,2.293,78,3.231,79,3.362,80,3.231,81,2.904,82,3.741,87,0.333,88,3.231,89,3.323,90,3.558,93,1.59,94,3.993,95,4.281,96,1.59,100,0.237,101,2.061,102,2.293,103,2.293,104,3.741,105,3.741,106,3.231,107,2.293,111,0.016,112,0.016,245,2.643,309,2.809,312,3.231,503,3.231,646,4.442,683,4.861,1244,2.603,1245,3.075,1246,3.075,1247,3.075,1248,3.075,1249,3.075,1250,3.075,1251,3.075,1252,3.075,1253,3.075,1254,4.332,1255,4.332,1256,3.075,1257,3.075,1258,3.075,1259,3.075,1260,3.075,1261,3.075]],["title/interfaces/RequestWithUser.html",[249,1.78,347,1.432]],["body/interfaces/RequestWithUser.html",[0,0.008,1,2.069,3,0.161,4,0.142,5,0.142,8,2.907,10,1.989,11,2.591,12,1.386,13,1.455,14,2.794,15,0.201,16,1.274,22,2.154,28,2.034,29,0.84,30,0.026,31,1.274,35,1.268,36,1.549,41,1.989,44,1.665,47,0.85,63,0.483,87,0.442,96,1.084,98,1.826,100,0.161,111,0.012,112,0.012,113,0.714,124,2.851,125,0.393,128,0.872,130,1.371,195,2.528,204,2.013,208,0.714,216,1.785,239,1.279,240,1.564,242,3.388,243,1.564,245,1.989,247,1.775,249,2.528,250,1.564,252,2.761,253,1.775,254,1.564,255,1.775,257,0.815,260,3.822,261,2.441,263,3.388,264,3.388,265,3.501,266,3.861,267,1.775,269,3.822,270,3.822,272,1.775,273,1.775,274,1.775,276,1.775,277,1.989,279,3.388,280,3.388,281,2.984,286,1.775,289,2.984,293,4.03,294,1.564,300,2.738,302,2.761,303,2.761,309,2.738,311,1.775,312,2.432,318,1.989,323,1.279,324,2.682,325,1.279,326,2.754,327,1.279,328,2.069,329,1.564,330,1.564,331,1.564,332,1.084,333,1.775,334,1.405,335,1.279,336,1.564,337,1.642,338,1.405,339,1.686,340,1.775,341,1.775,342,4.383,343,5.451,344,1.775,345,2.761,346,4.14,347,0.872,348,1.279,349,1.775,350,1.775,351,4.14,352,2.432,353,2.761,354,2.761,355,2.186,356,2.984,357,1.775,358,1.775,359,1.564,360,1.775,361,2.241,362,1.826,363,1.775,364,2.241,365,3.214,366,2.309,367,2.309,368,2.984,369,2.984,370,2.441,371,1.775,372,1.775,373,1.775,374,1.405,375,1.775,376,1.405,377,1.775,378,1.775,379,3.388,380,2.682,381,1.775,382,1.775,383,2.682,384,2.482,385,2.441,386,2.984,387,3.388,388,3.388,389,4.383,390,2.441,391,1.775,392,1.775,393,1.775,394,2.761,395,2.432,396,1.775,397,1.564,398,1.564,399,1.405,400,1.775,401,1.775,402,1.775,403,1.775,653,1.405,750,2.432]],["title/interfaces/RequestWithUser-1.html",[110,1.758,249,1.49,347,1.199]],["body/interfaces/RequestWithUser-1.html",[0,0.016,3,0.34,4,0.3,5,0.3,12,1.394,13,2.458,15,0.424,16,1.356,17,1.448,29,0.764,30,0.026,47,0.61,87,0.462,100,0.34,111,0.02,112,0.02,125,0.827,128,1.837,130,1.545,168,1.837,208,2.047,233,1.545,249,2.849,265,3.839,337,1.606,338,2.96,339,2.283,347,2.293,447,2.694,580,3.293,653,2.96,750,4.11,909,3.293,1262,3.293,1263,4.666,1264,4.666,1265,5.087,1266,3.293,1267,3.694,1268,3.738,1269,3.738,1270,4.666,1271,3.738,1272,3.738,1273,3.738,1274,3.738,1275,3.738,1276,3.738,1277,3.738]],["title/entities/Role.html",[35,1.338,595,1.338]],["body/entities/Role.html",[0,0.016,3,0.339,4,0.299,5,0.299,8,2.678,12,1.421,15,0.423,16,1.354,29,0.799,30,0.026,31,1.354,32,1.652,35,2.14,36,1.796,39,1.017,47,0.869,63,1.382,87,0.424,100,0.339,111,0.02,112,0.02,168,2.616,181,2.113,200,3.082,414,2.467,457,1.965,595,1.713,603,3.662,611,3.662,613,3.662,714,3.286,822,5.083,874,3.731,1278,3.731,1279,4.406,1280,4.406,1281,3.731,1282,4.406,1283,4.406,1284,4.66,1285,4.406,1286,4.66,1287,4.406]],["title/controllers/RolesController.html",[113,1.173,1288,2.308]],["body/controllers/RolesController.html",[0,0.015,3,0.321,4,0.283,5,0.283,15,0.4,17,1.396,29,0.675,30,0.026,32,1.537,36,1.589,39,0.946,47,0.899,63,1.223,87,0.49,100,0.321,111,0.019,112,0.019,113,1.419,115,1.733,117,1.932,121,2.127,125,0.78,128,1.733,129,2.541,130,1.64,241,2.792,257,2.065,288,2.21,325,2.541,327,2.541,332,2.154,334,2.792,337,1.932,339,2.747,380,2.792,398,4.362,399,4.362,437,3.024,734,4.129,738,3.561,772,2.792,773,3.527,814,3.527,854,3.527,1288,3.561,1289,3.527,1290,4.498,1291,4.166,1292,4.166,1293,4.166,1294,4.166,1295,3.527,1296,4.166,1297,4.166,1298,3.527,1299,4.166,1300,4.166,1301,4.166,1302,4.166,1303,4.166,1304,4.166,1305,4.166,1306,4.166]],["title/guards/RolesGuard.html",[339,1.78,1307,2.568]],["body/guards/RolesGuard.html",[0,0.015,3,0.33,4,0.291,5,0.291,12,1.164,13,1.91,15,0.411,17,1.42,29,0.687,30,0.026,39,0.875,47,0.592,63,1.245,87,0.456,100,0.33,111,0.019,112,0.019,117,1.966,121,1.558,125,0.802,128,1.782,130,1.516,168,1.782,208,2.018,233,1.516,249,2.214,265,3.615,288,2.249,337,1.558,338,2.871,339,2.795,347,2.249,433,2.398,447,3.299,580,3.194,909,3.194,1262,3.194,1263,5.269,1264,5.269,1265,5.549,1266,3.194,1267,3.624,1268,3.626,1269,4.578,1270,4.578,1271,3.626,1272,3.626,1273,3.626,1274,3.626,1275,3.626,1276,3.626,1277,3.626,1308,4.283,1309,4.283,1310,4.283,1311,4.283,1312,4.283]],["title/modules/RolesModule.html",[133,1.338,147,1.928]],["body/modules/RolesModule.html",[0,0.016,3,0.35,4,0.309,5,0.309,12,1.208,30,0.025,35,1.768,87,0.512,100,0.35,111,0.02,112,0.02,115,2.335,125,0.852,133,2.367,135,2.18,136,2.351,137,2.774,138,2.774,139,2.351,140,3.714,141,3.409,147,3.775,149,3.424,150,2.774,151,2.546,153,2.774,157,2.774,158,2.028,414,2.546,437,3.606,1288,4.081,1298,3.85,1313,3.85,1314,3.85,1315,3.85,1316,4.547,1317,3.85,1318,4.547,1319,4.547]],["title/injectables/RolesService.html",[233,0.965,437,1.78]],["body/injectables/RolesService.html",[0,0.011,3,0.243,4,0.214,5,0.214,12,1.327,15,0.303,17,1.523,19,3.794,29,0.737,30,0.026,31,1.625,35,2.397,36,1.845,39,0.972,43,2.116,47,0.703,63,1.472,87,0.446,100,0.243,111,0.016,112,0.016,117,1.605,121,2.109,125,0.591,130,1.545,158,1.408,204,3.005,206,4.34,208,1.975,216,2.679,233,1.237,234,1.632,257,2.142,277,3.104,288,2.412,337,2.185,366,2.269,367,2.269,414,1.767,429,2.958,433,2.471,435,4.133,437,2.281,439,4.308,456,2.354,457,1.408,460,2.672,461,3.736,474,3.291,734,3.693,738,2.958,772,2.958,1027,2.672,1071,2.116,1099,3.736,1284,3.736,1290,3.736,1295,3.736,1317,2.672,1320,2.672,1321,4.413,1322,4.413,1323,3.156,1324,3.156,1325,4.413,1326,4.413,1327,3.156,1328,3.156,1329,4.413,1330,3.156,1331,3.156,1332,3.156,1333,3.156,1334,3.156,1335,4.413,1336,4.413,1337,3.156,1338,3.156,1339,3.156,1340,3.156,1341,3.156,1342,3.156,1343,3.156,1344,3.156]],["title/classes/UpdateQueueDto.html",[0,0.012,797,2.101]],["body/classes/UpdateQueueDto.html",[0,0.021,2,2.292,3,0.368,4,0.324,5,0.324,15,0.459,16,1.424,17,1.699,29,0.736,30,0.025,32,1.521,39,0.936,47,0.8,87,0.445,89,3.797,90,3.241,93,2.472,100,0.368,111,0.021,112,0.021,124,2.776,628,3.565,634,4.048,691,4.642,716,3.485,797,3.531,813,2.917,1345,5.27,1346,4.781,1347,4.781,1348,4.781,1349,4.781,1350,4.781]],["title/classes/UpdateUserDto.html",[0,0.012,14,1.78]],["body/classes/UpdateUserDto.html",[0,0.02,1,2.101,2,1.348,3,0.216,4,0.191,5,0.191,6,4.71,7,2.097,8,2.884,9,2.912,10,1.715,11,1.348,12,1.339,13,1.254,14,2.704,15,0.27,16,1,17,1.768,18,1.885,19,2.097,20,3.082,21,2.912,22,2.308,23,2.129,24,2.129,25,2.912,26,2.912,27,2.66,28,2.308,29,0.803,30,0.025,31,1.365,32,1.634,33,4.638,34,1.348,35,1.58,36,0.841,37,4.14,39,1.006,41,1.715,42,2.097,43,1.885,47,0.93,48,3.441,49,3.441,50,3.441,51,3.441,52,3.441,53,3.441,54,2.381,57,3.031,58,2.381,60,2.381,62,2.48,63,1.406,64,2.381,66,3.031,67,2.097,69,3.031,70,2.097,72,3.031,73,3.031,74,3.56,75,3.031,76,2.097,78,3.031,79,3.2,80,3.031,81,2.724,82,3.56,83,2.381,85,2.381,87,0.313,88,3.031,89,3.944,90,3.483,91,3.441,92,3.441,93,1.454,94,1.885,95,4.821,96,1.454,97,2.48,98,2.276,99,3.031,100,0.313,101,1.885,102,2.097,103,2.097,104,2.097,105,2.097,106,2.097,107,2.097,108,2.381,109,3.441,110,1.715,111,0.015,112,0.015,1351,2.812,1352,2.812,1353,2.812,1354,2.812,1355,2.812,1356,2.812,1357,2.812,1358,2.812,1359,2.812]],["title/entities/User.html",[12,0.741,595,1.338]],["body/entities/User.html",[0,0.011,3,0.237,4,0.209,5,0.209,12,0.934,15,0.296,16,1.068,18,3.368,21,3.065,22,2.09,23,2.241,24,2.241,25,3.065,26,3.065,27,2.409,28,2.09,29,0.848,30,0.026,31,1.342,32,1.753,35,2.381,36,1.719,39,1.08,44,1.806,47,0.941,63,1.537,87,0.334,100,0.237,111,0.016,112,0.016,168,2.758,181,1.478,337,1.827,355,3.368,457,1.375,595,1.199,603,3.931,604,2.299,609,3.996,611,3.065,613,4.044,620,4.066,692,3.368,696,3.237,703,2.611,704,3.675,714,3.237,719,3.675,878,3.675,883,3.675,889,2.611,899,2.611,903,3.675,1281,3.675,1286,3.675,1360,2.611,1361,4.341,1362,3.083,1363,3.083,1364,5.453,1365,3.083,1366,3.083,1367,3.083,1368,3.083,1369,3.083,1370,3.083,1371,4.341,1372,3.083,1373,3.083,1374,4.341,1375,3.083,1376,3.083,1377,3.083,1378,4.341,1379,4.341,1380,3.083,1381,3.083,1382,4.341,1383,3.083,1384,3.083,1385,3.083,1386,3.083,1387,3.083,1388,4.341,1389,3.083]],["title/modules/UsersModule.html",[133,1.338,148,2.101]],["body/modules/UsersModule.html",[0,0.018,3,0.395,4,0.349,5,0.349,12,1.106,30,0.025,87,0.494,100,0.395,111,0.022,112,0.022,125,0.962,133,2.348,135,2.463,141,2.877,148,3.686,153,3.134,157,3.686,158,2.292,427,4.35,1390,5.137,1391,5.137]],["title/coverage.html",[1392,3.494]],["body/coverage.html",[0,0.023,1,1.866,5,0.245,6,3.607,7,3.607,12,0.777,14,1.866,29,0.459,30,0.026,35,1.403,79,2.42,111,0.017,112,0.017,113,2.07,114,2.42,116,3.056,126,2.021,139,1.866,159,2.692,233,1.754,235,3.056,239,2.202,240,3.607,249,2.501,300,2.021,309,2.021,328,1.866,332,1.866,337,1.313,339,1.866,347,2.27,367,1.61,408,2.021,428,3.056,437,1.866,569,5.273,595,2.363,596,1.866,597,2.692,600,1.502,626,2.202,627,3.056,628,3.607,648,3.056,649,3.056,652,2.42,654,3.607,681,3.056,689,2.692,706,2.021,728,2.42,729,3.056,797,2.202,809,1.731,871,3.056,872,3.056,907,2.021,908,3.056,989,2.42,997,3.056,1206,3.056,1244,3.056,1262,3.607,1267,2.42,1278,3.056,1288,2.42,1289,3.056,1307,2.692,1320,3.056,1345,3.056,1360,3.056,1392,2.692,1393,3.056,1394,3.61,1395,3.61,1396,5.829,1397,5.829,1398,3.61,1399,3.61,1400,4.096,1401,5.456,1402,6.703,1403,3.61,1404,3.61,1405,4.837,1406,4.837,1407,3.61,1408,4.837,1409,3.056,1410,4.096,1411,4.837,1412,3.056,1413,3.61,1414,3.61,1415,3.61,1416,3.61,1417,3.61,1418,3.61,1419,3.61]],["title/dependencies.html",[136,2.139,1420,2.44]],["body/dependencies.html",[0,0.02,30,0.026,93,2.402,96,2.402,111,0.02,112,0.02,125,0.87,136,2.402,156,2.834,158,2.072,411,3.464,413,2.834,419,2.834,457,2.072,458,3.934,658,4.241,951,3.934,952,4.815,1266,3.464,1421,6.571,1422,4.646,1423,5.687,1424,4.646,1425,5.687,1426,5.687,1427,4.646,1428,4.646,1429,4.646,1430,4.646,1431,4.646,1432,4.646,1433,4.646,1434,4.646,1435,4.646,1436,4.646,1437,4.646,1438,4.646,1439,4.646,1440,4.646,1441,4.646,1442,4.646,1443,4.646,1444,4.646,1445,4.646,1446,4.646,1447,4.646]],["title/miscellaneous/enumerations.html",[1448,1.614,1449,3.503]],["body/miscellaneous/enumerations.html",[15,0.489,30,0.025,111,0.022,112,0.022,597,3.795,615,4.48,622,5.086,623,5.086,689,3.795,716,3.364,722,3.665,723,3.665,724,4.48,725,4.48,844,4.578,1448,2.849,1449,4.308,1450,5.088,1451,5.088]],["title/miscellaneous/functions.html",[1448,1.614,1452,3.503]],["body/miscellaneous/functions.html",[15,0.507,17,1.386,29,0.671,30,0.023,63,1.215,111,0.022,112,0.022,139,3.355,288,2.195,1410,4.468,1412,5.196,1448,2.955,1452,4.468,1453,6.137,1454,5.277,1455,6.489]],["title/index.html",[15,0.277,1456,2.882,1457,2.882]],["body/index.html",[4,0.232,8,1.525,30,0.025,37,3.478,98,1.914,111,0.017,112,0.017,151,3.447,186,3.477,189,2.895,214,2.895,219,3.957,385,3.756,435,2.292,468,2.895,503,2.55,558,2.895,566,2.55,686,3.948,912,2.895,990,2.55,1032,2.895,1055,2.895,1071,2.292,1163,4.826,1392,2.55,1393,3.948,1458,3.419,1459,3.419,1460,5.307,1461,4.663,1462,3.419,1463,3.419,1464,3.419,1465,4.663,1466,5.307,1467,3.419,1468,5.7,1469,3.419,1470,6.414,1471,3.419,1472,6.301,1473,3.419,1474,3.419,1475,4.663,1476,3.419,1477,3.419,1478,5.307,1479,3.419,1480,3.419,1481,3.419,1482,3.419,1483,3.419,1484,3.419,1485,5.7,1486,6.414,1487,6.157,1488,4.663,1489,3.419,1490,3.419,1491,3.419,1492,3.419,1493,3.419,1494,4.663,1495,4.663,1496,3.419,1497,4.663,1498,6.157,1499,5.7,1500,3.419,1501,4.663,1502,3.419,1503,3.419,1504,3.419,1505,3.419,1506,5.7,1507,3.419,1508,3.419,1509,3.419,1510,4.663,1511,3.419,1512,3.419,1513,3.419,1514,3.419,1515,3.419,1516,4.663,1517,3.419,1518,3.419,1519,3.419,1520,4.663,1521,3.419,1522,3.419,1523,4.826,1524,4.663,1525,3.419,1526,3.419,1527,3.419,1528,3.419,1529,3.419,1530,3.419,1531,3.419,1532,3.419,1533,4.663,1534,3.419,1535,2.895,1536,3.419,1537,3.419,1538,3.419,1539,3.419,1540,3.419,1541,4.663,1542,3.419,1543,3.419,1544,3.419,1545,3.419,1546,4.663,1547,3.419,1548,3.419,1549,3.419,1550,4.663,1551,4.663,1552,3.419,1553,3.419,1554,3.419,1555,3.419,1556,3.419,1557,3.419,1558,3.419,1559,3.419,1560,3.419,1561,3.419,1562,2.895,1563,3.419,1564,3.419,1565,3.419,1566,3.419,1567,3.419,1568,3.419,1569,2.895]],["title/modules.html",[135,2.246]],["body/modules.html",[30,0.022,111,0.022,112,0.022,134,3.494,135,2.499,145,3.18,146,3.18,147,2.919,148,3.18,1523,5.635,1535,4.413,1570,6.655,1571,6.655,1572,6.78,1573,5.213]],["title/overview.html",[1574,3.967]],["body/overview.html",[2,1.997,30,0.025,110,2.541,111,0.019,112,0.019,115,1.733,126,3.275,133,1.619,134,4.621,135,1.997,136,2.154,137,2.541,138,2.541,139,2.154,140,2.541,141,2.333,142,3.527,143,3.527,144,3.527,145,4.183,146,4.034,147,3.703,148,3.569,149,3.241,150,2.541,151,2.333,181,1.997,234,2.154,328,3.419,404,3.527,406,3.527,407,3.527,408,3.703,437,3.419,653,2.792,809,3.171,907,3.45,985,3.527,986,3.527,987,3.527,1307,3.106,1313,3.527,1314,3.527,1315,3.527,1574,3.527,1575,5.849,1576,4.166,1577,4.166,1578,4.166]],["title/properties.html",[16,1.018,1420,2.44]],["body/properties.html",[8,2.407,16,1.328,30,0.025,111,0.022,112,0.022,1562,4.57,1569,4.57,1579,5.397,1580,5.397,1581,5.397]],["title/miscellaneous/variables.html",[664,2.773,1448,1.614]],["body/miscellaneous/variables.html",[15,0.45,27,2.247,28,1.95,29,0.784,30,0.026,34,2.958,47,0.79,111,0.021,112,0.021,159,4.264,172,3.968,173,3.968,175,3.968,179,3.495,181,2.247,182,3.968,183,3.968,184,3.968,186,4.264,190,3.968,207,4.841,337,2.396,664,3.141,844,4.136,1267,3.833,1400,3.968,1409,3.968,1448,2.624,1582,4.687,1583,5.718,1584,4.687,1585,4.687,1586,4.687,1587,4.687,1588,4.687,1589,4.687,1590,4.687,1591,4.687,1592,4.687,1593,4.687,1594,4.687]]],"invertedIndex":[["",{"_index":30,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":569,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{},"coverage.html":{}}}],["0')}${string(today.getdate()).padstart(2",{"_index":1038,"title":{},"body":{"injectables/QueueService.html":{}}}],["0.0.1",{"_index":1580,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1431,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":1440,"title":{},"body":{"dependencies.html":{}}}],["0.3.22",{"_index":1447,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1430,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":1436,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1402,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1413,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1415,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":1416,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1397,"title":{},"body":{"coverage.html":{}}}],["0/21",{"_index":1414,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1396,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1408,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1398,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1417,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1399,"title":{},"body":{"coverage.html":{}}}],["08:00",{"_index":227,"title":{},"body":{"modules/AppModule.html":{}}}],["09123456789",{"_index":107,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["09123456789'})@isstring",{"_index":1245,"title":{},"body":{"classes/RegisterDto.html":{}}}],["09123456789'})@isstring()@isoptional",{"_index":58,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["1",{"_index":110,"title":{"interfaces/RequestWithUser-1.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/QueueService.html":{},"classes/UpdateUserDto.html":{},"overview.html":{}}}],["1).padstart(2",{"_index":1037,"title":{},"body":{"injectables/QueueService.html":{}}}],["1).padstart(4",{"_index":1051,"title":{},"body":{"injectables/QueueService.html":{}}}],["1/10",{"_index":1406,"title":{},"body":{"coverage.html":{}}}],["1/12",{"_index":1407,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":1404,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":1405,"title":{},"body":{"coverage.html":{}}}],["11.0.0",{"_index":1423,"title":{},"body":{"dependencies.html":{}}}],["11.0.5",{"_index":1424,"title":{},"body":{"dependencies.html":{}}}],["11.1.0",{"_index":1421,"title":{},"body":{"dependencies.html":{}}}],["11.2.0",{"_index":1427,"title":{},"body":{"dependencies.html":{}}}],["123",{"_index":49,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["15",{"_index":1054,"title":{},"body":{"injectables/QueueService.html":{}}}],["16.5.0",{"_index":1433,"title":{},"body":{"dependencies.html":{}}}],["1d",{"_index":426,"title":{},"body":{"modules/AuthModule.html":{}}}],["2",{"_index":109,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["200",{"_index":260,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["201",{"_index":311,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["2})@isnumber()@isoptional",{"_index":38,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["3",{"_index":1578,"title":{},"body":{"overview.html":{}}}],["3.14.1",{"_index":1435,"title":{},"body":{"dependencies.html":{}}}],["33",{"_index":1403,"title":{},"body":{"coverage.html":{}}}],["3306",{"_index":1588,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4.0.1",{"_index":1437,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":1422,"title":{},"body":{"dependencies.html":{}}}],["4.8.1",{"_index":1443,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":263,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["401",{"_index":269,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["403",{"_index":272,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["404",{"_index":276,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["409",{"_index":279,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["5",{"_index":1575,"title":{},"body":{"overview.html":{}}}],["5.0.1",{"_index":1446,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":1428,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":1576,"title":{},"body":{"overview.html":{}}}],["60000",{"_index":1201,"title":{},"body":{"injectables/QueueService.html":{}}}],["7",{"_index":1577,"title":{},"body":{"overview.html":{}}}],["7.8.2",{"_index":1442,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":79,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["8})@isstring()@isnotempty()@minlength(8",{"_index":1258,"title":{},"body":{"classes/RegisterDto.html":{}}}],["8})@isstring()@isoptional()@minlength(8",{"_index":83,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["__dirname",{"_index":182,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["__password",{"_index":472,"title":{},"body":{"injectables/AuthService.html":{}}}],["access_token",{"_index":352,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["action",{"_index":1088,"title":{},"body":{"injectables/QueueService.html":{}}}],["active",{"_index":622,"title":{},"body":{"entities/Counter.html":{},"miscellaneous/enumerations.html":{}}}],["add",{"_index":383,"title":{},"body":{"controllers/AuthController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{}}}],["addcounter",{"_index":730,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["addcounter(@body",{"_index":865,"title":{},"body":{"controllers/QueueController.html":{}}}],["addcounter(data",{"_index":749,"title":{},"body":{"controllers/QueueController.html":{}}}],["addcounter(name",{"_index":1005,"title":{},"body":{"injectables/QueueService.html":{}}}],["address",{"_index":20,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["admin",{"_index":10,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{}}}],["adminid",{"_index":442,"title":{},"body":{"injectables/AuthService.html":{}}}],["administrators",{"_index":253,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["adminrolenames",{"_index":547,"title":{},"body":{"injectables/AuthService.html":{}}}],["adminrolenames.some",{"_index":550,"title":{},"body":{"injectables/AuthService.html":{}}}],["adminroles",{"_index":545,"title":{},"body":{"injectables/AuthService.html":{}}}],["adminroles.map((role",{"_index":548,"title":{},"body":{"injectables/AuthService.html":{}}}],["adminupdateuser",{"_index":243,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["adminupdateuser(adminid",{"_index":440,"title":{},"body":{"injectables/AuthService.html":{}}}],["adminupdateuser(req",{"_index":248,"title":{},"body":{"controllers/AuthController.html":{}}}],["adminupdateuserdto",{"_index":1,"title":{"classes/AdminUpdateUserDto.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["adminupdateuserdto})@apiresponse({status",{"_index":259,"title":{},"body":{"controllers/AuthController.html":{}}}],["advanced",{"_index":192,"title":{},"body":{"modules/AppModule.html":{}}}],["afterconnect",{"_index":230,"title":{},"body":{"modules/AppModule.html":{}}}],["ahead",{"_index":1115,"title":{},"body":{"injectables/QueueService.html":{}}}],["alldetails",{"_index":1128,"title":{},"body":{"injectables/QueueService.html":{}}}],["alldetails.foreach((detail",{"_index":1136,"title":{},"body":{"injectables/QueueService.html":{}}}],["alldetails.length",{"_index":1132,"title":{},"body":{"injectables/QueueService.html":{}}}],["allowing",{"_index":1511,"title":{},"body":{"index.html":{}}}],["allows",{"_index":252,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["allqueues",{"_index":1224,"title":{},"body":{"controllers/QueuesController.html":{}}}],["allqueues.map(queue",{"_index":1228,"title":{},"body":{"controllers/QueuesController.html":{}}}],["already",{"_index":281,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["amazing",{"_index":1556,"title":{},"body":{"index.html":{}}}],["api",{"_index":1213,"title":{},"body":{"controllers/QueuesController.html":{}}}],["apibearerauth",{"_index":344,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["apibearerauth('jwt",{"_index":379,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["apibody",{"_index":346,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["apioperation",{"_index":342,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["apioperation({summary",{"_index":251,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiparam",{"_index":345,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["apiproperty",{"_index":94,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["apiproperty({description",{"_index":683,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["apipropertyoptional",{"_index":95,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["apipropertyoptional({description",{"_index":33,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["apiresponse",{"_index":343,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["apitags",{"_index":341,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["apitags('authentication",{"_index":349,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["app's",{"_index":958,"title":{},"body":{"classes/QueueGateway.html":{}}}],["app.controller",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":127,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":114,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":1487,"title":{},"body":{"index.html":{}}}],["applications",{"_index":1465,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":134,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appointment_type",{"_index":876,"title":{},"body":{"entities/QueueDetails.html":{}}}],["appointmenttype",{"_index":629,"title":{},"body":{"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{}}}],["appropriately",{"_index":559,"title":{},"body":{"injectables/AuthService.html":{}}}],["appservice",{"_index":126,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":41,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AuthController.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{}}}],["array.isarray(payload.roles",{"_index":676,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["array.isarray(queue.details",{"_index":1232,"title":{},"body":{"controllers/QueuesController.html":{}}}],["asc",{"_index":1091,"title":{},"body":{"injectables/QueueService.html":{}}}],["assign",{"_index":43,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AuthService.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{}}}],["assigned",{"_index":576,"title":{},"body":{"injectables/AuthService.html":{}}}],["assigning",{"_index":571,"title":{},"body":{"injectables/AuthService.html":{}}}],["assignments",{"_index":396,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["assignments'})@apiparam({name",{"_index":256,"title":{},"body":{"controllers/AuthController.html":{}}}],["assignrolestouser",{"_index":1321,"title":{},"body":{"injectables/RolesService.html":{}}}],["assignrolestouser(userid",{"_index":1326,"title":{},"body":{"injectables/RolesService.html":{}}}],["associated",{"_index":1171,"title":{},"body":{"injectables/QueueService.html":{}}}],["async",{"_index":204,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{}}}],["attempt",{"_index":473,"title":{},"body":{"injectables/AuthService.html":{}}}],["attempting",{"_index":541,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth",{"_index":242,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["auth')@apibody({type",{"_index":320,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth')@useguards(jwtauthguard",{"_index":283,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth')@useguards(jwtauthguard)@get('profile",{"_index":297,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":415,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":334,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QueueController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{}}}],["auth.guard.ts",{"_index":649,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":329,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/RequestWithUser.html":{}}}],["auth/auth.module",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/decorators/roles.decorator",{"_index":1300,"title":{},"body":{"controllers/RolesController.html":{}}}],["auth/guards/jwt",{"_index":814,"title":{},"body":{"controllers/QueueController.html":{},"controllers/RolesController.html":{}}}],["auth/guards/roles.guard",{"_index":1299,"title":{},"body":{"controllers/RolesController.html":{}}}],["authcontroller",{"_index":239,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["authenticated",{"_index":818,"title":{},"body":{"controllers/QueueController.html":{}}}],["authguard",{"_index":651,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":650,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":145,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1562,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":328,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{},"overview.html":{}}}],["auto",{"_index":1254,"title":{},"body":{"classes/RegisterDto.html":{}}}],["available",{"_index":1573,"title":{},"body":{"modules.html":{}}}],["average",{"_index":1188,"title":{},"body":{"injectables/QueueService.html":{}}}],["averagewaittime",{"_index":1193,"title":{},"body":{"injectables/QueueService.html":{}}}],["await",{"_index":216,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{}}}],["aws",{"_index":1501,"title":{},"body":{"index.html":{}}}],["backers",{"_index":1557,"title":{},"body":{"index.html":{}}}],["backward",{"_index":1386,"title":{},"body":{"entities/User.html":{}}}],["bad",{"_index":264,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["badrequestexception",{"_index":455,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('failed",{"_index":535,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('invalid",{"_index":508,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('user",{"_index":591,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception(`role",{"_index":574,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception(`user",{"_index":554,"title":{},"body":{"injectables/AuthService.html":{}}}],["based",{"_index":1032,"title":{},"body":{"injectables/QueueService.html":{},"index.html":{}}}],["basic",{"_index":556,"title":{},"body":{"injectables/AuthService.html":{}}}],["basicupdate",{"_index":560,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt",{"_index":458,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["bcrypt.compare",{"_index":483,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.compare(logindto.password",{"_index":463,"title":{},"body":{"injectables/AuthService.html":{}}}],["before",{"_index":386,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["beforeconnect",{"_index":203,"title":{},"body":{"modules/AppModule.html":{}}}],["being",{"_index":518,"title":{},"body":{"injectables/AuthService.html":{}}}],["below",{"_index":197,"title":{},"body":{"modules/AppModule.html":{}}}],["better",{"_index":1126,"title":{},"body":{"injectables/QueueService.html":{}}}],["board",{"_index":1549,"title":{},"body":{"index.html":{}}}],["body",{"_index":324,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QueueController.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["body.status",{"_index":847,"title":{},"body":{"controllers/QueueController.html":{}}}],["boolean",{"_index":447,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["bootstrap",{"_index":139,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["both",{"_index":1218,"title":{},"body":{"controllers/QueuesController.html":{}}}],["break",{"_index":1119,"title":{},"body":{"injectables/QueueService.html":{}}}],["browse",{"_index":1572,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1570,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1461,"title":{},"body":{"index.html":{}}}],["bulacan",{"_index":108,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["bulacan'})@isstring()@isoptional",{"_index":54,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["bulak_smart_connect",{"_index":1593,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bulk",{"_index":836,"title":{},"body":{"controllers/QueueController.html":{}}}],["calculate",{"_index":1187,"title":{},"body":{"injectables/QueueService.html":{}}}],["called",{"_index":1172,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["callnext",{"_index":731,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["callnext(@param('counterid",{"_index":863,"title":{},"body":{"controllers/QueueController.html":{}}}],["callnext(counterid",{"_index":753,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["canactivate",{"_index":1263,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":1269,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["cancelled",{"_index":725,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{},"miscellaneous/enumerations.html":{}}}],["cancelledcount",{"_index":1183,"title":{},"body":{"injectables/QueueService.html":{}}}],["cascade",{"_index":906,"title":{},"body":{"entities/QueueDetails.html":{}}}],["cascade'})@joincolumn({name",{"_index":892,"title":{},"body":{"entities/QueueDetails.html":{}}}],["catch",{"_index":364,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["caught",{"_index":564,"title":{},"body":{"injectables/AuthService.html":{}}}],["change",{"_index":526,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{}}}],["channel",{"_index":1526,"title":{},"body":{"index.html":{}}}],["characters",{"_index":80,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["check",{"_index":385,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"index.html":{}}}],["checkexists",{"_index":998,"title":{},"body":{"injectables/QueueService.html":{}}}],["checkexists(id",{"_index":1008,"title":{},"body":{"injectables/QueueService.html":{}}}],["checking",{"_index":870,"title":{},"body":{"controllers/QueueController.html":{}}}],["checkqueueexists",{"_index":732,"title":{},"body":{"controllers/QueueController.html":{}}}],["checkqueueexists(@param('id",{"_index":868,"title":{},"body":{"controllers/QueueController.html":{}}}],["checkqueueexists(id",{"_index":757,"title":{},"body":{"controllers/QueueController.html":{}}}],["checks",{"_index":215,"title":{},"body":{"modules/AppModule.html":{}}}],["citizen",{"_index":99,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AuthService.html":{},"classes/UpdateUserDto.html":{}}}],["class",{"_index":0,"title":{"classes/AdminUpdateUserDto.html":{},"classes/CreateQueueDto.html":{},"classes/LoginDto.html":{},"classes/QueueGateway.html":{},"classes/RegisterDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateQueueDto.html":{},"classes/LoginDto.html":{},"classes/QueueGateway.html":{},"classes/RegisterDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"overview.html":{}}}],["clicks",{"_index":1510,"title":{},"body":{"index.html":{}}}],["client",{"_index":929,"title":{},"body":{"classes/QueueGateway.html":{}}}],["client.id",{"_index":965,"title":{},"body":{"classes/QueueGateway.html":{}}}],["client.join('queue_updates",{"_index":975,"title":{},"body":{"classes/QueueGateway.html":{}}}],["client.join(`counter_${counterid",{"_index":972,"title":{},"body":{"classes/QueueGateway.html":{}}}],["client.join(`queue_${queueid",{"_index":967,"title":{},"body":{"classes/QueueGateway.html":{}}}],["clients",{"_index":978,"title":{},"body":{"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["cloud",{"_index":1496,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":142,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":404,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":406,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":405,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":407,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_queuemodule",{"_index":985,"title":{},"body":{"modules/QueueModule.html":{},"overview.html":{}}}],["cluster_queuemodule_exports",{"_index":986,"title":{},"body":{"modules/QueueModule.html":{},"overview.html":{}}}],["cluster_queuemodule_providers",{"_index":987,"title":{},"body":{"modules/QueueModule.html":{},"overview.html":{}}}],["cluster_rolesmodule",{"_index":1313,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_rolesmodule_exports",{"_index":1314,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_rolesmodule_providers",{"_index":1315,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["code",{"_index":198,"title":{},"body":{"modules/AppModule.html":{}}}],["column",{"_index":613,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["column({name",{"_index":609,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["column({nullable",{"_index":874,"title":{},"body":{"entities/QueueDetails.html":{},"entities/Role.html":{}}}],["column({type",{"_index":616,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{}}}],["column({unique",{"_index":1281,"title":{},"body":{"entities/Role.html":{},"entities/User.html":{}}}],["combine",{"_index":1147,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["come",{"_index":1517,"title":{},"body":{"index.html":{}}}],["compatibility",{"_index":1387,"title":{},"body":{"entities/User.html":{}}}],["complete",{"_index":48,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["completed",{"_index":724,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{},"miscellaneous/enumerations.html":{}}}],["completed_at",{"_index":697,"title":{},"body":{"entities/Queue.html":{}}}],["completedat",{"_index":690,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["completedcount",{"_index":1182,"title":{},"body":{"injectables/QueueService.html":{}}}],["completedqueues",{"_index":1190,"title":{},"body":{"injectables/QueueService.html":{}}}],["completedqueues.length",{"_index":1194,"title":{},"body":{"injectables/QueueService.html":{}}}],["completedqueues.reduce((total",{"_index":1196,"title":{},"body":{"injectables/QueueService.html":{}}}],["completion",{"_index":1105,"title":{},"body":{"injectables/QueueService.html":{}}}],["config",{"_index":421,"title":{},"body":{"modules/AuthModule.html":{}}}],["config.get('jwt_secret",{"_index":423,"title":{},"body":{"modules/AuthModule.html":{}}}],["config/database.config",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":155,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('db_host",{"_index":174,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_name",{"_index":180,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_password",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_port",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_username",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('jwt_secret",{"_index":661,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('node_env",{"_index":185,"title":{},"body":{"modules/AppModule.html":{}}}],["conflict",{"_index":280,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["conflictexception",{"_index":454,"title":{},"body":{"injectables/AuthService.html":{}}}],["conflictexception('email",{"_index":510,"title":{},"body":{"injectables/AuthService.html":{}}}],["conflictexception('username",{"_index":513,"title":{},"body":{"injectables/AuthService.html":{}}}],["conn",{"_index":209,"title":{},"body":{"modules/AppModule.html":{}}}],["conn.query(\"set",{"_index":225,"title":{},"body":{"modules/AppModule.html":{}}}],["conn.query('set",{"_index":217,"title":{},"body":{"modules/AppModule.html":{}}}],["connected",{"_index":964,"title":{},"body":{"classes/QueueGateway.html":{}}}],["connection",{"_index":205,"title":{},"body":{"modules/AppModule.html":{}}}],["consistent",{"_index":222,"title":{},"body":{"modules/AppModule.html":{}}}],["console",{"_index":193,"title":{},"body":{"modules/AppModule.html":{}}}],["console.error('admin",{"_index":592,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.error('error",{"_index":562,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["console.error('login",{"_index":501,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.error('user",{"_index":532,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.error(`error",{"_index":852,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["console.error(`invalid",{"_index":846,"title":{},"body":{"controllers/QueueController.html":{}}}],["console.log",{"_index":540,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('comparing",{"_index":480,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('creating",{"_index":1068,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.log('found",{"_index":1101,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["console.log('generated",{"_index":495,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('get",{"_index":1216,"title":{},"body":{"controllers/QueuesController.html":{}}}],["console.log('getting",{"_index":1121,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.log('login",{"_index":359,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["console.log('password",{"_index":484,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('processing",{"_index":1229,"title":{},"body":{"controllers/QueuesController.html":{}}}],["console.log('queue",{"_index":1111,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.log('register",{"_index":373,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["console.log('stored",{"_index":478,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('user",{"_index":475,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(`changing",{"_index":1103,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.log(`finding",{"_index":1142,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.log(`found",{"_index":1131,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.log(`patch",{"_index":842,"title":{},"body":{"controllers/QueueController.html":{}}}],["console.log(`queue",{"_index":851,"title":{},"body":{"controllers/QueueController.html":{}}}],["console.log(`returning",{"_index":1149,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["console.log(`updating",{"_index":1098,"title":{},"body":{"injectables/QueueService.html":{}}}],["const",{"_index":208,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{}}}],["constructor",{"_index":433,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{}}}],["constructor(configservice",{"_index":678,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(private",{"_index":128,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{}}}],["constructor(queuerepository",{"_index":1000,"title":{},"body":{"injectables/QueueService.html":{}}}],["constructor(queueservice",{"_index":921,"title":{},"body":{"classes/QueueGateway.html":{}}}],["constructor(reflector",{"_index":1309,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(rolesrepository",{"_index":1323,"title":{},"body":{"injectables/RolesService.html":{}}}],["constructor(usersrepository",{"_index":434,"title":{},"body":{"injectables/AuthService.html":{}}}],["contact",{"_index":57,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["contact_number",{"_index":1361,"title":{},"body":{"entities/User.html":{}}}],["contactnumber",{"_index":21,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AuthService.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{}}}],["context",{"_index":1312,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":1273,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":1272,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":1274,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["controller",{"_index":113,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/QueueController.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":350,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["controller('queue",{"_index":815,"title":{},"body":{"controllers/QueueController.html":{}}}],["controller('queues",{"_index":1210,"title":{},"body":{"controllers/QueuesController.html":{}}}],["controller('roles",{"_index":1301,"title":{},"body":{"controllers/RolesController.html":{}}}],["controllers",{"_index":115,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/QueueController.html":{},"modules/QueueModule.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"overview.html":{}}}],["convert",{"_index":1202,"title":{},"body":{"injectables/QueueService.html":{}}}],["converting",{"_index":387,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["cors",{"_index":954,"title":{},"body":{"classes/QueueGateway.html":{}}}],["count",{"_index":1039,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter",{"_index":596,"title":{"entities/Counter.html":{}},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"coverage.html":{}}}],["counter.currentqueue",{"_index":699,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{}}}],["counter.currentqueue.completedat",{"_index":1157,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter.currentqueue.status",{"_index":1156,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter.currentqueueid",{"_index":1160,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter.id",{"_index":1177,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter.name",{"_index":1168,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter/entities/counter.entity",{"_index":721,"title":{},"body":{"entities/Queue.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["counter_number",{"_index":701,"title":{},"body":{"entities/Queue.html":{}}}],["counterid",{"_index":756,"title":{},"body":{"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["countername",{"_index":1176,"title":{},"body":{"injectables/QueueService.html":{}}}],["counternumber",{"_index":691,"title":{},"body":{"entities/Queue.html":{},"controllers/QueuesController.html":{},"classes/UpdateQueueDto.html":{}}}],["counterrepository",{"_index":1002,"title":{},"body":{"injectables/QueueService.html":{}}}],["counters",{"_index":1204,"title":{},"body":{"injectables/QueueService.html":{}}}],["counterstatus",{"_index":615,"title":{},"body":{"entities/Counter.html":{},"injectables/QueueService.html":{},"miscellaneous/enumerations.html":{}}}],["counterstatus.active",{"_index":625,"title":{},"body":{"entities/Counter.html":{}}}],["courses",{"_index":1532,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":1392,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":733,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["create(@request",{"_index":816,"title":{},"body":{"controllers/QueueController.html":{}}}],["create(createqueuedto",{"_index":1010,"title":{},"body":{"injectables/QueueService.html":{}}}],["create(req",{"_index":760,"title":{},"body":{"controllers/QueueController.html":{}}}],["created",{"_index":1040,"title":{},"body":{"injectables/QueueService.html":{}}}],["created_at",{"_index":704,"title":{},"body":{"entities/Queue.html":{},"entities/User.html":{}}}],["createdat",{"_index":692,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"entities/User.html":{}}}],["createdatecolumn",{"_index":719,"title":{},"body":{"entities/Queue.html":{},"entities/User.html":{}}}],["createdatecolumn({name",{"_index":703,"title":{},"body":{"entities/Queue.html":{},"entities/User.html":{}}}],["createqueuedto",{"_index":626,"title":{"classes/CreateQueueDto.html":{}},"body":{"classes/CreateQueueDto.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"coverage.html":{}}}],["createqueuedto.address",{"_index":1078,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.appointmenttype",{"_index":1081,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.firstname",{"_index":1075,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.isguest",{"_index":826,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["createqueuedto.lastname",{"_index":1076,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.middleinitial",{"_index":1077,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.phonenumber",{"_index":1079,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.reasonofvisit",{"_index":1080,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.userid",{"_index":825,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["creating",{"_index":823,"title":{},"body":{"controllers/QueueController.html":{}}}],["credentials",{"_index":356,"title":{},"body":{"controllers/AuthController.html":{},"classes/QueueGateway.html":{},"interfaces/RequestWithUser.html":{}}}],["credentials'})@apibody({type",{"_index":305,"title":{},"body":{"controllers/AuthController.html":{}}}],["credentials'})@apiresponse({status",{"_index":271,"title":{},"body":{"controllers/AuthController.html":{}}}],["current",{"_index":1155,"title":{},"body":{"injectables/QueueService.html":{}}}],["current_queue_id",{"_index":605,"title":{},"body":{"entities/Counter.html":{}}}],["currentqueue",{"_index":598,"title":{},"body":{"entities/Counter.html":{},"injectables/QueueService.html":{}}}],["currentqueueid",{"_index":599,"title":{},"body":{"entities/Counter.html":{}}}],["data",{"_index":195,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{}}}],["data'})@apiresponse({status",{"_index":268,"title":{},"body":{"controllers/AuthController.html":{}}}],["database",{"_index":179,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["databaseconfig",{"_index":159,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["datasource",{"_index":1455,"title":{},"body":{"miscellaneous/functions.html":{}}}],["date",{"_index":696,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{},"entities/User.html":{}}}],["date(today",{"_index":1043,"title":{},"body":{"injectables/QueueService.html":{}}}],["datestr",{"_index":1035,"title":{},"body":{"injectables/QueueService.html":{}}}],["datetime",{"_index":223,"title":{},"body":{"modules/AppModule.html":{}}}],["debug",{"_index":477,"title":{},"body":{"injectables/AuthService.html":{}}}],["debugging",{"_index":376,"title":{},"body":{"controllers/AuthController.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["declarations",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"overview.html":{}}}],["decorators",{"_index":32,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{}}}],["decorators/roles.decorator",{"_index":338,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["deeper",{"_index":1528,"title":{},"body":{"index.html":{}}}],["default",{"_index":34,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["default_role_id",{"_index":1364,"title":{},"body":{"entities/User.html":{}}}],["defaultrole",{"_index":355,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{},"entities/User.html":{}}}],["defaultroleid",{"_index":18,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AuthService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{}}}],["defaultstrategy",{"_index":418,"title":{},"body":{"modules/AuthModule.html":{}}}],["define",{"_index":1268,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["defined",{"_index":39,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{}}}],["delete",{"_index":804,"title":{},"body":{"controllers/QueueController.html":{}}}],["dependencies",{"_index":136,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":1485,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":1500,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":1494,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":1509,"title":{},"body":{"index.html":{}}}],["deprecated",{"_index":1340,"title":{},"body":{"injectables/RolesService.html":{}}}],["description",{"_index":8,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AuthController.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"classes/UpdateUserDto.html":{},"index.html":{},"properties.html":{}}}],["detail",{"_index":1138,"title":{},"body":{"injectables/QueueService.html":{}}}],["details",{"_index":693,"title":{},"body":{"entities/Queue.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["details.entity",{"_index":720,"title":{},"body":{"entities/Queue.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["details.entity.ts",{"_index":872,"title":{},"body":{"entities/QueueDetails.html":{},"coverage.html":{}}}],["details.entity.ts:14",{"_index":880,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:17",{"_index":896,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:21",{"_index":895,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:24",{"_index":902,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:28",{"_index":901,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:31",{"_index":879,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:34",{"_index":884,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:37",{"_index":886,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:40",{"_index":875,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:43",{"_index":888,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:46",{"_index":898,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:49",{"_index":877,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:52",{"_index":882,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.queue",{"_index":708,"title":{},"body":{"entities/Queue.html":{}}}],["details?.address",{"_index":1241,"title":{},"body":{"controllers/QueuesController.html":{}}}],["details?.firstname",{"_index":1237,"title":{},"body":{"controllers/QueuesController.html":{}}}],["details?.lastname",{"_index":1238,"title":{},"body":{"controllers/QueuesController.html":{}}}],["details?.middleinitial",{"_index":1239,"title":{},"body":{"controllers/QueuesController.html":{}}}],["details?.phonenumber",{"_index":1242,"title":{},"body":{"controllers/QueuesController.html":{}}}],["details?.reasonofvisit",{"_index":1240,"title":{},"body":{"controllers/QueuesController.html":{}}}],["detailsmap",{"_index":1123,"title":{},"body":{"injectables/QueueService.html":{}}}],["detailsmap[detail.queueid",{"_index":1137,"title":{},"body":{"injectables/QueueService.html":{}}}],["detailsmap[queue.id",{"_index":1148,"title":{},"body":{"injectables/QueueService.html":{}}}],["determine",{"_index":1041,"title":{},"body":{"injectables/QueueService.html":{}}}],["development",{"_index":189,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["devtools",{"_index":1538,"title":{},"body":{"index.html":{}}}],["disable",{"_index":212,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["disconnected",{"_index":966,"title":{},"body":{"classes/QueueGateway.html":{}}}],["discord",{"_index":1525,"title":{},"body":{"index.html":{}}}],["dive",{"_index":1527,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":1393,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["doe",{"_index":106,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["doe'})@isstring()@isnotempty",{"_index":1251,"title":{},"body":{"classes/RegisterDto.html":{}}}],["doe'})@isstring()@isoptional",{"_index":67,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["dotenv",{"_index":1432,"title":{},"body":{"dependencies.html":{}}}],["dropschema",{"_index":201,"title":{},"body":{"modules/AppModule.html":{}}}],["dto",{"_index":9,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/LoginDto.html":{},"controllers/QueueController.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["dto/create",{"_index":811,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["dto/login.dto",{"_index":330,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["dto/register.dto",{"_index":331,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["dto/update",{"_index":335,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{}}}],["during",{"_index":563,"title":{},"body":{"injectables/AuthService.html":{}}}],["e.g",{"_index":73,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["e2e",{"_index":1480,"title":{},"body":{"index.html":{}}}],["easy",{"_index":1134,"title":{},"body":{"injectables/QueueService.html":{}}}],["efficient",{"_index":1462,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":1492,"title":{},"body":{"index.html":{}}}],["email",{"_index":22,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{}}}],["emailorusername",{"_index":682,"title":{},"body":{"classes/LoginDto.html":{}}}],["empty",{"_index":1140,"title":{},"body":{"injectables/QueueService.html":{}}}],["endpoint",{"_index":374,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QueueController.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["ensure",{"_index":1490,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":1540,"title":{},"body":{"index.html":{}}}],["entities",{"_index":181,"title":{},"body":{"modules/AppModule.html":{},"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["entities/queue",{"_index":995,"title":{},"body":{"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["entities/queue.entity",{"_index":813,"title":{},"body":{"controllers/QueueController.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/UpdateQueueDto.html":{}}}],["entities/role.entity",{"_index":1317,"title":{},"body":{"modules/RolesModule.html":{},"injectables/RolesService.html":{}}}],["entities/user.entity",{"_index":1391,"title":{},"body":{"modules/UsersModule.html":{}}}],["entity",{"_index":595,"title":{"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{}},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{},"coverage.html":{}}}],["entity('counters",{"_index":624,"title":{},"body":{"entities/Counter.html":{}}}],["entity('queue_details",{"_index":905,"title":{},"body":{"entities/QueueDetails.html":{}}}],["entity('queues",{"_index":726,"title":{},"body":{"entities/Queue.html":{}}}],["entity('roles",{"_index":1287,"title":{},"body":{"entities/Role.html":{}}}],["entity('users",{"_index":1384,"title":{},"body":{"entities/User.html":{}}}],["entity{.ts,.js",{"_index":183,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["enum",{"_index":617,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{}}}],["enumerations",{"_index":1449,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":663,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["environments",{"_index":202,"title":{},"body":{"modules/AppModule.html":{}}}],["er_dup_entry",{"_index":534,"title":{},"body":{"injectables/AuthService.html":{}}}],["error",{"_index":365,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["error('jwt_secret",{"_index":662,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["error('user",{"_index":1337,"title":{},"body":{"injectables/RolesService.html":{}}}],["error.code",{"_index":533,"title":{},"body":{"injectables/AuthService.html":{}}}],["error.message",{"_index":369,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["errors",{"_index":538,"title":{},"body":{"injectables/AuthService.html":{}}}],["eslint",{"_index":465,"title":{},"body":{"injectables/AuthService.html":{}}}],["eslint/no",{"_index":469,"title":{},"body":{"injectables/AuthService.html":{}}}],["estimated_wait_time",{"_index":710,"title":{},"body":{"entities/Queue.html":{}}}],["estimatedwaittime",{"_index":694,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["estimation",{"_index":1056,"title":{},"body":{"injectables/QueueService.html":{}}}],["event",{"_index":976,"title":{},"body":{"classes/QueueGateway.html":{}}}],["example",{"_index":37,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"index.html":{}}}],["exceptions",{"_index":593,"title":{},"body":{"injectables/AuthService.html":{}}}],["executioncontext",{"_index":1264,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["exist",{"_index":570,"title":{},"body":{"injectables/AuthService.html":{}}}],["existing",{"_index":516,"title":{},"body":{"injectables/AuthService.html":{}}}],["existinguserbyemail",{"_index":509,"title":{},"body":{"injectables/AuthService.html":{}}}],["existinguserbyemail.id",{"_index":521,"title":{},"body":{"injectables/AuthService.html":{}}}],["existinguserbyusername",{"_index":512,"title":{},"body":{"injectables/AuthService.html":{}}}],["existinguserbyusername.id",{"_index":524,"title":{},"body":{"injectables/AuthService.html":{}}}],["exists",{"_index":370,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{}}}],["exists'})@apibearerauth('jwt",{"_index":282,"title":{},"body":{"controllers/AuthController.html":{}}}],["exists'})@apibody({type",{"_index":313,"title":{},"body":{"controllers/AuthController.html":{}}}],["expectation",{"_index":961,"title":{},"body":{"classes/QueueGateway.html":{}}}],["experience",{"_index":1530,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":425,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":100,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{}}}],["exports",{"_index":141,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":1426,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":13,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{}}}],["extension",{"_index":72,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["extract",{"_index":817,"title":{},"body":{"controllers/QueueController.html":{},"controllers/QueuesController.html":{}}}],["extractjwt",{"_index":656,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":667,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["failed",{"_index":395,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["failing",{"_index":1141,"title":{},"body":{"injectables/QueueService.html":{}}}],["false",{"_index":200,"title":{},"body":{"modules/AppModule.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{}}}],["fast",{"_index":1504,"title":{},"body":{"index.html":{}}}],["features",{"_index":1513,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":1124,"title":{},"body":{"injectables/QueueService.html":{}}}],["fetching",{"_index":837,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["few",{"_index":1506,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["find",{"_index":1099,"title":{},"body":{"injectables/QueueService.html":{},"injectables/RolesService.html":{}}}],["findall",{"_index":734,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["findbyids",{"_index":1341,"title":{},"body":{"injectables/RolesService.html":{}}}],["findbyname",{"_index":1322,"title":{},"body":{"injectables/RolesService.html":{}}}],["findbyname(name",{"_index":1329,"title":{},"body":{"injectables/RolesService.html":{}}}],["findbyqueuenumber",{"_index":735,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["findbyqueuenumber(@param('queuenumber",{"_index":856,"title":{},"body":{"controllers/QueueController.html":{}}}],["findbyqueuenumber(queuenumber",{"_index":764,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["findbystatus",{"_index":736,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["findbystatus(@param('status",{"_index":829,"title":{},"body":{"controllers/QueueController.html":{}}}],["findbystatus(status",{"_index":767,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["findbystatuswithdetails",{"_index":999,"title":{},"body":{"injectables/QueueService.html":{}}}],["findbystatuswithdetails(status",{"_index":1015,"title":{},"body":{"injectables/QueueService.html":{}}}],["findcompleted",{"_index":737,"title":{},"body":{"controllers/QueueController.html":{}}}],["finding",{"_index":1151,"title":{},"body":{"injectables/QueueService.html":{}}}],["findone",{"_index":738,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["findone(@param('id",{"_index":854,"title":{},"body":{"controllers/QueueController.html":{},"controllers/RolesController.html":{}}}],["findone(id",{"_index":772,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["findpending",{"_index":739,"title":{},"body":{"controllers/QueueController.html":{}}}],["findpendingwithdetails",{"_index":740,"title":{},"body":{"controllers/QueueController.html":{}}}],["findserving",{"_index":741,"title":{},"body":{"controllers/QueueController.html":{}}}],["findservingwithdetails",{"_index":742,"title":{},"body":{"controllers/QueueController.html":{}}}],["first",{"_index":62,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AuthService.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["first_name",{"_index":878,"title":{},"body":{"entities/QueueDetails.html":{},"entities/User.html":{}}}],["firstname",{"_index":23,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AuthService.html":{},"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{}}}],["fk_current_queue",{"_index":607,"title":{},"body":{"entities/Counter.html":{}}}],["fk_queue_id",{"_index":894,"title":{},"body":{"entities/QueueDetails.html":{}}}],["fk_user_id",{"_index":900,"title":{},"body":{"entities/QueueDetails.html":{}}}],["flatten",{"_index":1227,"title":{},"body":{"controllers/QueuesController.html":{}}}],["focus",{"_index":1512,"title":{},"body":{"index.html":{}}}],["follow",{"_index":1543,"title":{},"body":{"index.html":{}}}],["forbidden",{"_index":273,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["foreign",{"_index":213,"title":{},"body":{"modules/AppModule.html":{}}}],["foreign_key_checks=0",{"_index":218,"title":{},"body":{"modules/AppModule.html":{}}}],["foreign_key_checks=1",{"_index":232,"title":{},"body":{"modules/AppModule.html":{}}}],["foreignkeyconstraintname",{"_index":606,"title":{},"body":{"entities/Counter.html":{},"entities/QueueDetails.html":{}}}],["format",{"_index":506,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{}}}],["forwardref",{"_index":953,"title":{},"body":{"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["found",{"_index":277,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{}}}],["found'})@apiresponse({status",{"_index":278,"title":{},"body":{"controllers/AuthController.html":{}}}],["framework",{"_index":1460,"title":{},"body":{"index.html":{}}}],["frontend",{"_index":1215,"title":{},"body":{"controllers/QueuesController.html":{}}}],["full",{"_index":503,"title":{},"body":{"injectables/AuthService.html":{},"classes/RegisterDto.html":{},"index.html":{}}}],["fully",{"_index":588,"title":{},"body":{"injectables/AuthService.html":{}}}],["function",{"_index":1411,"title":{},"body":{"coverage.html":{}}}],["functionality",{"_index":808,"title":{},"body":{"controllers/QueueController.html":{}}}],["functions",{"_index":1452,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":1508,"title":{},"body":{"index.html":{}}}],["generate",{"_index":502,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{}}}],["generated",{"_index":1255,"title":{},"body":{"classes/RegisterDto.html":{}}}],["get(':id",{"_index":773,"title":{},"body":{"controllers/QueueController.html":{},"controllers/RolesController.html":{}}}],["get(':id')@roles('admin",{"_index":1293,"title":{},"body":{"controllers/RolesController.html":{}}}],["get(':id/details",{"_index":789,"title":{},"body":{"controllers/QueueController.html":{}}}],["get(':id/exists",{"_index":758,"title":{},"body":{"controllers/QueueController.html":{}}}],["get(':id/position",{"_index":792,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('completed",{"_index":770,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('counters",{"_index":783,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('health",{"_index":122,"title":{},"body":{"controllers/AppController.html":{}}}],["get('number/:queuenumber",{"_index":765,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('pending",{"_index":775,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('pending/details",{"_index":777,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('profile",{"_index":381,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["get('serving",{"_index":779,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('serving/details",{"_index":781,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('stats",{"_index":794,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('status/:status",{"_index":768,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('user/:userid",{"_index":1304,"title":{},"body":{"controllers/RolesController.html":{}}}],["get('user/:userid')@roles('admin",{"_index":1296,"title":{},"body":{"controllers/RolesController.html":{}}}],["get('walk",{"_index":1208,"title":{},"body":{"controllers/QueuesController.html":{}}}],["get()@roles('admin",{"_index":1291,"title":{},"body":{"controllers/RolesController.html":{}}}],["getcounters",{"_index":743,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["getdetailsformultiplequeues",{"_index":744,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["getdetailsformultiplequeues(@body",{"_index":838,"title":{},"body":{"controllers/QueueController.html":{}}}],["getdetailsformultiplequeues(body",{"_index":785,"title":{},"body":{"controllers/QueueController.html":{}}}],["getdetailsformultiplequeues(queueids",{"_index":1019,"title":{},"body":{"injectables/QueueService.html":{}}}],["gethello",{"_index":118,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getprofile",{"_index":244,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["getprofile(@request",{"_index":382,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["getprofile(req",{"_index":291,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(userid",{"_index":443,"title":{},"body":{"injectables/AuthService.html":{}}}],["getqueuedetails",{"_index":745,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["getqueuedetails(@param('id",{"_index":858,"title":{},"body":{"controllers/QueueController.html":{}}}],["getqueuedetails(id",{"_index":788,"title":{},"body":{"controllers/QueueController.html":{}}}],["getqueuedetails(queueid",{"_index":1021,"title":{},"body":{"injectables/QueueService.html":{}}}],["getqueueposition",{"_index":746,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["getqueueposition(@param('id",{"_index":860,"title":{},"body":{"controllers/QueueController.html":{}}}],["getqueueposition(id",{"_index":791,"title":{},"body":{"controllers/QueueController.html":{}}}],["getqueueposition(queueid",{"_index":1023,"title":{},"body":{"injectables/QueueService.html":{}}}],["getstats",{"_index":747,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["getting",{"_index":1456,"title":{"index.html":{}},"body":{}}],["getuserroles",{"_index":1290,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["getuserroles(@param('userid",{"_index":1305,"title":{},"body":{"controllers/RolesController.html":{}}}],["getuserroles(userid",{"_index":1295,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["getwalkinqueues",{"_index":1207,"title":{},"body":{"controllers/QueuesController.html":{}}}],["global",{"_index":982,"title":{},"body":{"classes/QueueGateway.html":{}}}],["graph",{"_index":1535,"title":{},"body":{"index.html":{},"modules.html":{}}}],["grow",{"_index":1553,"title":{},"body":{"index.html":{}}}],["guard",{"_index":1307,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":1308,"title":{},"body":{"guards/RolesGuard.html":{}}}],["guards/jwt",{"_index":333,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["guards/roles.guard",{"_index":340,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["guest",{"_index":1065,"title":{},"body":{"injectables/QueueService.html":{}}}],["handle",{"_index":525,"title":{},"body":{"injectables/AuthService.html":{},"controllers/QueuesController.html":{}}}],["handleconnection",{"_index":913,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handleconnection(client",{"_index":926,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handledisconnect",{"_index":914,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handledisconnect(client",{"_index":931,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlegetqueueposition",{"_index":915,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlegetqueueposition(client",{"_index":933,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoincounter",{"_index":916,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoincounter(client",{"_index":936,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoinqueue",{"_index":917,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoinqueue(client",{"_index":939,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoinqueueupdates",{"_index":918,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoinqueueupdates(client",{"_index":942,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handling",{"_index":224,"title":{},"body":{"modules/AppModule.html":{},"injectables/QueueService.html":{}}}],["hands",{"_index":1529,"title":{},"body":{"index.html":{}}}],["handy",{"_index":1518,"title":{},"body":{"index.html":{}}}],["hash",{"_index":479,"title":{},"body":{"injectables/AuthService.html":{}}}],["hasroleassigned",{"_index":582,"title":{},"body":{"injectables/AuthService.html":{}}}],["healthcheck",{"_index":119,"title":{},"body":{"controllers/AppController.html":{}}}],["hello",{"_index":237,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":1533,"title":{},"body":{"index.html":{}}}],["here",{"_index":558,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["hit",{"_index":375,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["host",{"_index":173,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["http://localhost:5173",{"_index":956,"title":{},"body":{"classes/QueueGateway.html":{}}}],["https://nestjs.com",{"_index":1566,"title":{},"body":{"index.html":{}}}],["id",{"_index":36,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{}}}],["identifier",{"_index":1394,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":42,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/QueueService.html":{},"classes/UpdateUserDto.html":{}}}],["ignoreexpiration",{"_index":668,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["iii",{"_index":75,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["ildefonso",{"_index":53,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["implement",{"_index":807,"title":{},"body":{"controllers/QueueController.html":{}}}],["implements",{"_index":909,"title":{},"body":{"classes/QueueGateway.html":{},"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["import",{"_index":87,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{}}}],["imports",{"_index":153,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}}}],["in(queueids",{"_index":1130,"title":{},"body":{"injectables/QueueService.html":{}}}],["in(roleids",{"_index":1343,"title":{},"body":{"injectables/RolesService.html":{}}}],["inactive",{"_index":623,"title":{},"body":{"entities/Counter.html":{},"miscellaneous/enumerations.html":{}}}],["including",{"_index":255,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["index",{"_index":15,"title":{"index.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{}}}],["information",{"_index":98,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"index.html":{}}}],["information'})@apiresponse({status",{"_index":317,"title":{},"body":{"controllers/AuthController.html":{}}}],["infrastructure",{"_index":1515,"title":{},"body":{"index.html":{}}}],["inherited",{"_index":55,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["inject",{"_index":170,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["inject(forwardref",{"_index":962,"title":{},"body":{"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["injectable",{"_index":233,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"coverage.html":{}}}],["injectables",{"_index":234,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{},"overview.html":{}}}],["injectrepository",{"_index":456,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{}}}],["injectrepository(counter",{"_index":1031,"title":{},"body":{"injectables/QueueService.html":{}}}],["injectrepository(queue",{"_index":1029,"title":{},"body":{"injectables/QueueService.html":{}}}],["injectrepository(queuedetails",{"_index":1030,"title":{},"body":{"injectables/QueueService.html":{}}}],["injectrepository(role",{"_index":1333,"title":{},"body":{"injectables/RolesService.html":{}}}],["injectrepository(user",{"_index":460,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RolesService.html":{}}}],["input",{"_index":267,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["install",{"_index":1507,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":1471,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":368,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["insufficient",{"_index":274,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["interact",{"_index":1536,"title":{},"body":{"index.html":{}}}],["interface",{"_index":347,"title":{"interfaces/JwtPayload.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["interfaces",{"_index":653,"title":{},"body":{"interfaces/JwtPayload.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"overview.html":{}}}],["invalid",{"_index":266,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QueueController.html":{},"interfaces/RequestWithUser.html":{}}}],["inversejoincolumn",{"_index":1379,"title":{},"body":{"entities/User.html":{}}}],["is_guest",{"_index":881,"title":{},"body":{"entities/QueueDetails.html":{}}}],["isarray",{"_index":92,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["isauthorized",{"_index":549,"title":{},"body":{"injectables/AuthService.html":{}}}],["isboolean",{"_index":647,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["isboolean()@isoptional",{"_index":639,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["isemail",{"_index":88,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["isenum",{"_index":1349,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["isenum(queuestatus",{"_index":1350,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["isenum(queuestatus)@isoptional",{"_index":1347,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["isglobal",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["isguest",{"_index":630,"title":{},"body":{"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{}}}],["isnan(number(payload.sub",{"_index":673,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["isnotempty",{"_index":646,"title":{},"body":{"classes/CreateQueueDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["isnumber",{"_index":91,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["isoptional",{"_index":89,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateQueueDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{}}}],["ispasswordvalid",{"_index":482,"title":{},"body":{"injectables/AuthService.html":{}}}],["isstring",{"_index":90,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateQueueDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{}}}],["isstring()@isnotempty",{"_index":636,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["isstring()@isoptional",{"_index":634,"title":{},"body":{"classes/CreateQueueDto.html":{},"classes/UpdateQueueDto.html":{}}}],["isvalidemail",{"_index":430,"title":{},"body":{"injectables/AuthService.html":{}}}],["isvalidemail(email",{"_index":445,"title":{},"body":{"injectables/AuthService.html":{}}}],["it's",{"_index":1113,"title":{},"body":{"injectables/QueueService.html":{}}}],["items",{"_index":354,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["job",{"_index":1546,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":1548,"title":{},"body":{"index.html":{}}}],["john",{"_index":104,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["john'})@isstring()@isnotempty",{"_index":1249,"title":{},"body":{"classes/RegisterDto.html":{}}}],["john'})@isstring()@isoptional",{"_index":64,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["john_doe",{"_index":102,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["john_doe'})@isstring()@isnotempty",{"_index":1260,"title":{},"body":{"classes/RegisterDto.html":{}}}],["john_doe'})@isstring()@isoptional",{"_index":85,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["join",{"_index":1559,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":620,"title":{},"body":{"entities/Counter.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["joined",{"_index":974,"title":{},"body":{"classes/QueueGateway.html":{}}}],["jointable",{"_index":1382,"title":{},"body":{"entities/User.html":{}}}],["jr",{"_index":74,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["jr.'})@isstring()@isoptional",{"_index":76,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["jwt",{"_index":419,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":416,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":332,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/QueueController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":666,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":410,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":420,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":652,"title":{"interfaces/JwtPayload.html":{}},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["jwtservice",{"_index":436,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":408,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":1563,"title":{},"body":{"index.html":{}}}],["keep",{"_index":1385,"title":{},"body":{"entities/User.html":{}}}],["key",{"_index":214,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["last",{"_index":66,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["last_name",{"_index":883,"title":{},"body":{"entities/QueueDetails.html":{},"entities/User.html":{}}}],["lastname",{"_index":24,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AuthService.html":{},"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{}}}],["lastname}${nameextension",{"_index":504,"title":{},"body":{"injectables/AuthService.html":{}}}],["learn",{"_index":1521,"title":{},"body":{"index.html":{}}}],["legacy",{"_index":1212,"title":{},"body":{"controllers/QueuesController.html":{}}}],["legend",{"_index":137,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"overview.html":{}}}],["lessthanorequal",{"_index":1028,"title":{},"body":{"injectables/QueueService.html":{}}}],["lessthanorequal(new",{"_index":1191,"title":{},"body":{"injectables/QueueService.html":{}}}],["lessthanorequal(queue.createdat",{"_index":1117,"title":{},"body":{"injectables/QueueService.html":{}}}],["lessthanorequal(queueid",{"_index":1118,"title":{},"body":{"injectables/QueueService.html":{}}}],["lessthanorequal(today",{"_index":1047,"title":{},"body":{"injectables/QueueService.html":{}}}],["license",{"_index":1569,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1551,"title":{},"body":{"index.html":{}}}],["line",{"_index":467,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{}}}],["linkedin",{"_index":1545,"title":{},"body":{"index.html":{}}}],["literal",{"_index":750,"title":{},"body":{"controllers/QueueController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{}}}],["localhost",{"_index":1586,"title":{},"body":{"miscellaneous/variables.html":{}}}],["log",{"_index":1067,"title":{},"body":{"injectables/QueueService.html":{}}}],["logger",{"_index":191,"title":{},"body":{"modules/AppModule.html":{},"classes/QueueGateway.html":{}}}],["logger(queuegateway.name",{"_index":923,"title":{},"body":{"classes/QueueGateway.html":{}}}],["logging",{"_index":190,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["login",{"_index":245,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{}}}],["login'})@apiresponse({status",{"_index":301,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(@body",{"_index":358,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["login(logindto",{"_index":299,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logindto",{"_index":300,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["logindto.emailorusername",{"_index":462,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto.password",{"_index":481,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto})@post('login",{"_index":306,"title":{},"body":{"controllers/AuthController.html":{}}}],["looking",{"_index":1495,"title":{},"body":{"index.html":{}}}],["lookup",{"_index":1135,"title":{},"body":{"injectables/QueueService.html":{}}}],["loop",{"_index":1542,"title":{},"body":{"index.html":{}}}],["loss",{"_index":196,"title":{},"body":{"modules/AppModule.html":{}}}],["main",{"_index":50,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["makes",{"_index":1502,"title":{},"body":{"index.html":{}}}],["managing",{"_index":1514,"title":{},"body":{"index.html":{}}}],["many",{"_index":1114,"title":{},"body":{"injectables/QueueService.html":{}}}],["manytomany",{"_index":1286,"title":{},"body":{"entities/Role.html":{},"entities/User.html":{}}}],["manytomany(undefined",{"_index":1283,"title":{},"body":{"entities/Role.html":{}}}],["manytomany(undefined)@jointable({name",{"_index":1377,"title":{},"body":{"entities/User.html":{}}}],["manytoone",{"_index":903,"title":{},"body":{"entities/QueueDetails.html":{},"entities/User.html":{}}}],["manytoone(undefined",{"_index":889,"title":{},"body":{"entities/QueueDetails.html":{},"entities/User.html":{}}}],["mark",{"_index":1154,"title":{},"body":{"injectables/QueueService.html":{}}}],["match",{"_index":957,"title":{},"body":{"classes/QueueGateway.html":{}}}],["matching",{"_index":112,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.floor",{"_index":1200,"title":{},"body":{"injectables/QueueService.html":{}}}],["mau",{"_index":1498,"title":{},"body":{"index.html":{}}}],["message",{"_index":1162,"title":{},"body":{"injectables/QueueService.html":{}}}],["metadata",{"_index":1439,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":117,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{}}}],["middle",{"_index":69,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["middle_initial",{"_index":885,"title":{},"body":{"entities/QueueDetails.html":{}}}],["middle_name",{"_index":1371,"title":{},"body":{"entities/User.html":{}}}],["middleinitial",{"_index":631,"title":{},"body":{"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["middlename",{"_index":25,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AuthService.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{}}}],["migrationsrun",{"_index":199,"title":{},"body":{"modules/AppModule.html":{}}}],["min",{"_index":78,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["minlength",{"_index":82,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["minlength(8",{"_index":103,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["minutes",{"_index":1057,"title":{},"body":{"injectables/QueueService.html":{}}}],["miscellaneous",{"_index":1448,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1550,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1475,"title":{},"body":{"index.html":{}}}],["module",{"_index":133,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":135,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/queue/queue.module",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":1163,"title":{},"body":{"injectables/QueueService.html":{},"index.html":{}}}],["multiple",{"_index":1139,"title":{},"body":{"injectables/QueueService.html":{}}}],["mysql",{"_index":172,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["mysql2",{"_index":1434,"title":{},"body":{"dependencies.html":{}}}],["myśliwiec",{"_index":1564,"title":{},"body":{"index.html":{}}}],["name",{"_index":63,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"injectables/JwtStrategy.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"miscellaneous/functions.html":{}}}],["name_extension",{"_index":1374,"title":{},"body":{"entities/User.html":{}}}],["nameextension",{"_index":26,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AuthService.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{}}}],["namespace",{"_index":960,"title":{},"body":{"classes/QueueGateway.html":{}}}],["need",{"_index":990,"title":{},"body":{"modules/QueueModule.html":{},"injectables/QueueService.html":{},"index.html":{}}}],["nest",{"_index":1466,"title":{},"body":{"index.html":{}}}],["nested",{"_index":1225,"title":{},"body":{"controllers/QueuesController.html":{}}}],["nestframework",{"_index":1568,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":1486,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":125,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":156,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1266,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":411,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":413,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1425,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":96,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AuthController.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":158,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":951,"title":{},"body":{"classes/QueueGateway.html":{},"dependencies.html":{}}}],["new",{"_index":367,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{},"coverage.html":{}}}],["next",{"_index":466,"title":{},"body":{"injectables/AuthService.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["nextcalled",{"_index":1179,"title":{},"body":{"injectables/QueueService.html":{}}}],["nextqueue",{"_index":1159,"title":{},"body":{"injectables/QueueService.html":{}}}],["nextqueue.counternumber",{"_index":1167,"title":{},"body":{"injectables/QueueService.html":{}}}],["nextqueue.id",{"_index":1170,"title":{},"body":{"injectables/QueueService.html":{}}}],["nextqueue.status",{"_index":1165,"title":{},"body":{"injectables/QueueService.html":{}}}],["node.js",{"_index":1459,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":1027,"title":{},"body":{"injectables/QueueService.html":{},"injectables/RolesService.html":{}}}],["notfoundexception(`counter",{"_index":1153,"title":{},"body":{"injectables/QueueService.html":{}}}],["notfoundexception(`details",{"_index":1096,"title":{},"body":{"injectables/QueueService.html":{}}}],["notfoundexception(`queue",{"_index":1093,"title":{},"body":{"injectables/QueueService.html":{}}}],["notfoundexception(`role",{"_index":1336,"title":{},"body":{"injectables/RolesService.html":{}}}],["notify",{"_index":1086,"title":{},"body":{"injectables/QueueService.html":{}}}],["notifycounterupdate",{"_index":919,"title":{},"body":{"classes/QueueGateway.html":{}}}],["notifycounterupdate(counterid",{"_index":945,"title":{},"body":{"classes/QueueGateway.html":{}}}],["notifyqueueupdate",{"_index":920,"title":{},"body":{"classes/QueueGateway.html":{}}}],["notifyqueueupdate(queueid",{"_index":947,"title":{},"body":{"classes/QueueGateway.html":{}}}],["npm",{"_index":1470,"title":{},"body":{"index.html":{}}}],["null",{"_index":384,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["null/undefined",{"_index":1231,"title":{},"body":{"controllers/QueuesController.html":{}}}],["nullable",{"_index":603,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["number",{"_index":31,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{}}}],["number(createqueuedto.userid",{"_index":1066,"title":{},"body":{"injectables/QueueService.html":{}}}],["number(payload.sub",{"_index":674,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["number(req.user.sub",{"_index":394,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["number(targetuserid",{"_index":403,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["object",{"_index":353,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["object.values(queuestatus",{"_index":849,"title":{},"body":{"controllers/QueueController.html":{}}}],["object.values(queuestatus).includes(body.status",{"_index":845,"title":{},"body":{"controllers/QueueController.html":{}}}],["occurred",{"_index":594,"title":{},"body":{"injectables/AuthService.html":{}}}],["offer",{"_index":1547,"title":{},"body":{"index.html":{}}}],["official",{"_index":1499,"title":{},"body":{"index.html":{}}}],["ok",{"_index":132,"title":{},"body":{"controllers/AppController.html":{}}}],["ondelete",{"_index":891,"title":{},"body":{"entities/QueueDetails.html":{}}}],["one",{"_index":1116,"title":{},"body":{"injectables/QueueService.html":{}}}],["onetomany",{"_index":718,"title":{},"body":{"entities/Queue.html":{}}}],["onetomany(undefined",{"_index":707,"title":{},"body":{"entities/Queue.html":{}}}],["onetoone",{"_index":619,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{}}}],["onetoone(undefined",{"_index":601,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{}}}],["ongatewayconnection",{"_index":910,"title":{},"body":{"classes/QueueGateway.html":{}}}],["ongatewaydisconnect",{"_index":911,"title":{},"body":{"classes/QueueGateway.html":{}}}],["open",{"_index":1552,"title":{},"body":{"index.html":{}}}],["operator",{"_index":1338,"title":{},"body":{"injectables/RolesService.html":{}}}],["optional",{"_index":17,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateQueueDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser-1.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/functions.html":{}}}],["order",{"_index":1090,"title":{},"body":{"injectables/QueueService.html":{}}}],["organize",{"_index":1133,"title":{},"body":{"injectables/QueueService.html":{}}}],["origin",{"_index":955,"title":{},"body":{"classes/QueueGateway.html":{}}}],["out",{"_index":151,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"index.html":{},"overview.html":{}}}],["outer",{"_index":565,"title":{},"body":{"injectables/AuthService.html":{}}}],["override",{"_index":820,"title":{},"body":{"controllers/QueueController.html":{}}}],["overview",{"_index":1574,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1420,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":327,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QueueController.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{}}}],["param('userid",{"_index":401,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["parameters",{"_index":288,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"miscellaneous/functions.html":{}}}],["parseduserid",{"_index":1070,"title":{},"body":{"injectables/QueueService.html":{}}}],["parseint(process.env.db_port",{"_index":1587,"title":{},"body":{"miscellaneous/variables.html":{}}}],["part",{"_index":1539,"title":{},"body":{"index.html":{}}}],["passport",{"_index":658,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":412,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":417,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":655,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":659,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["password",{"_index":27,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["password.length",{"_index":515,"title":{},"body":{"injectables/AuthService.html":{}}}],["password123",{"_index":81,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["password123'})@isstring()@isnotempty",{"_index":687,"title":{},"body":{"classes/LoginDto.html":{}}}],["patch",{"_index":803,"title":{},"body":{"controllers/QueueController.html":{}}}],["patch(':id",{"_index":798,"title":{},"body":{"controllers/QueueController.html":{}}}],["patch(':id/status",{"_index":801,"title":{},"body":{"controllers/QueueController.html":{}}}],["path",{"_index":1214,"title":{},"body":{"controllers/QueuesController.html":{}}}],["payload",{"_index":490,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["payload.roles",{"_index":677,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":672,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["pending",{"_index":722,"title":{},"body":{"entities/Queue.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"miscellaneous/enumerations.html":{}}}],["pendingcount",{"_index":1180,"title":{},"body":{"injectables/QueueService.html":{}}}],["pendingqueueswithdetails",{"_index":1220,"title":{},"body":{"controllers/QueuesController.html":{}}}],["pendingqueueswithdetails.length",{"_index":1222,"title":{},"body":{"controllers/QueuesController.html":{}}}],["per",{"_index":1058,"title":{},"body":{"injectables/QueueService.html":{}}}],["perform",{"_index":555,"title":{},"body":{"injectables/AuthService.html":{}}}],["performance",{"_index":1127,"title":{},"body":{"injectables/QueueService.html":{}}}],["permissions",{"_index":397,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["permissions'})@apiresponse({status",{"_index":275,"title":{},"body":{"controllers/AuthController.html":{}}}],["person",{"_index":1059,"title":{},"body":{"injectables/QueueService.html":{}}}],["philippines",{"_index":228,"title":{},"body":{"modules/AppModule.html":{}}}],["phone_number",{"_index":887,"title":{},"body":{"entities/QueueDetails.html":{}}}],["phonenumber",{"_index":632,"title":{},"body":{"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["platform",{"_index":1497,"title":{},"body":{"index.html":{}}}],["please",{"_index":1524,"title":{},"body":{"index.html":{}}}],["port",{"_index":175,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["position",{"_index":970,"title":{},"body":{"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["possible",{"_index":1493,"title":{},"body":{"index.html":{}}}],["post",{"_index":323,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["post('admin/update",{"_index":400,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["post('bulk",{"_index":786,"title":{},"body":{"controllers/QueueController.html":{}}}],["post('counter",{"_index":751,"title":{},"body":{"controllers/QueueController.html":{}}}],["post('counter/:counterid/call",{"_index":754,"title":{},"body":{"controllers/QueueController.html":{}}}],["post('login",{"_index":357,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["post('register",{"_index":371,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["post('update",{"_index":392,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["post()@useguards(jwtauthguard",{"_index":761,"title":{},"body":{"controllers/QueueController.html":{}}}],["potential",{"_index":1230,"title":{},"body":{"controllers/QueuesController.html":{}}}],["prefix",{"_index":241,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QueueController.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{}}}],["prevent",{"_index":194,"title":{},"body":{"modules/AppModule.html":{}}}],["prevents",{"_index":821,"title":{},"body":{"controllers/QueueController.html":{}}}],["primarygeneratedcolumn",{"_index":611,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["private",{"_index":429,"title":{},"body":{"injectables/AuthService.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{}}}],["process.env.db_host",{"_index":1585,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_name",{"_index":1592,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_password",{"_index":1591,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_username",{"_index":1589,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":207,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["production",{"_index":186,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["profile",{"_index":293,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["profile'})@apiresponse({status",{"_index":292,"title":{},"body":{"controllers/AuthController.html":{}}}],["progressive",{"_index":1458,"title":{},"body":{"index.html":{}}}],["project",{"_index":1468,"title":{},"body":{"index.html":{}}}],["promise",{"_index":206,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{}}}],["promise.all",{"_index":1185,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["proper",{"_index":543,"title":{},"body":{"injectables/AuthService.html":{}}}],["properties",{"_index":16,"title":{"properties.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AuthController.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"properties.html":{}}}],["provided",{"_index":527,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{}}}],["provideduserid",{"_index":1069,"title":{},"body":{"injectables/QueueService.html":{}}}],["providers",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"overview.html":{}}}],["query",{"_index":210,"title":{},"body":{"modules/AppModule.html":{},"injectables/QueueService.html":{}}}],["query('set",{"_index":231,"title":{},"body":{"modules/AppModule.html":{}}}],["questions",{"_index":1522,"title":{},"body":{"index.html":{}}}],["queue",{"_index":600,"title":{"entities/Queue.html":{}},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"coverage.html":{}}}],["queue.completedat",{"_index":1107,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["queue.completedat.gettime",{"_index":1198,"title":{},"body":{"injectables/QueueService.html":{}}}],["queue.controller",{"_index":992,"title":{},"body":{"modules/QueueModule.html":{}}}],["queue.counter",{"_index":602,"title":{},"body":{"entities/Counter.html":{}}}],["queue.counternumber",{"_index":1109,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["queue.createdat",{"_index":1235,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queue.createdat.gettime",{"_index":1199,"title":{},"body":{"injectables/QueueService.html":{}}}],["queue.details",{"_index":890,"title":{},"body":{"entities/QueueDetails.html":{},"controllers/QueuesController.html":{}}}],["queue.details[0",{"_index":1233,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queue.dto",{"_index":812,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["queue.dto.ts",{"_index":628,"title":{},"body":{"classes/CreateQueueDto.html":{},"classes/UpdateQueueDto.html":{},"coverage.html":{}}}],["queue.dto.ts:11",{"_index":1346,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["queue.dto.ts:13",{"_index":641,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:17",{"_index":642,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:21",{"_index":635,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:25",{"_index":643,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:29",{"_index":644,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:33",{"_index":637,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:37",{"_index":640,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:5",{"_index":645,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:7",{"_index":1348,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["queue.dto.ts:9",{"_index":638,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.entity",{"_index":904,"title":{},"body":{"entities/QueueDetails.html":{}}}],["queue.estimatedwaittime",{"_index":1236,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queue.gateway",{"_index":994,"title":{},"body":{"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["queue.id",{"_index":1145,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["queue.queuenumber",{"_index":1234,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queue.service",{"_index":810,"title":{},"body":{"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"controllers/QueuesController.html":{}}}],["queue.status",{"_index":1104,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["queue/${id}/status",{"_index":843,"title":{},"body":{"controllers/QueueController.html":{}}}],["queue/entities/queue.entity",{"_index":621,"title":{},"body":{"entities/Counter.html":{}}}],["queue_id",{"_index":893,"title":{},"body":{"entities/QueueDetails.html":{}}}],["queue_number",{"_index":713,"title":{},"body":{"entities/Queue.html":{}}}],["queuecontroller",{"_index":728,"title":{"controllers/QueueController.html":{}},"body":{"controllers/QueueController.html":{},"modules/QueueModule.html":{},"coverage.html":{}}}],["queuedata",{"_index":968,"title":{},"body":{"classes/QueueGateway.html":{}}}],["queuedetails",{"_index":706,"title":{"entities/QueueDetails.html":{}},"body":{"entities/Queue.html":{},"entities/QueueDetails.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"coverage.html":{}}}],["queuedetails.queue",{"_index":1083,"title":{},"body":{"injectables/QueueService.html":{}}}],["queuedetailsrepository",{"_index":1001,"title":{},"body":{"injectables/QueueService.html":{}}}],["queuegateway",{"_index":907,"title":{"classes/QueueGateway.html":{}},"body":{"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"coverage.html":{},"overview.html":{}}}],["queueid",{"_index":873,"title":{},"body":{"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["queueids",{"_index":839,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["queueids.length",{"_index":1122,"title":{},"body":{"injectables/QueueService.html":{}}}],["queuemodule",{"_index":146,"title":{"modules/QueueModule.html":{}},"body":{"modules/AppModule.html":{},"modules/QueueModule.html":{},"modules.html":{},"overview.html":{}}}],["queuenumber",{"_index":695,"title":{},"body":{"entities/Queue.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["queuerepository",{"_index":1004,"title":{},"body":{"injectables/QueueService.html":{}}}],["queues",{"_index":824,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["queues.controller",{"_index":993,"title":{},"body":{"modules/QueueModule.html":{}}}],["queues.length",{"_index":1143,"title":{},"body":{"injectables/QueueService.html":{}}}],["queues.map((queue",{"_index":1144,"title":{},"body":{"injectables/QueueService.html":{}}}],["queues/walk",{"_index":1217,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queuescontroller",{"_index":989,"title":{"controllers/QueuesController.html":{}},"body":{"modules/QueueModule.html":{},"controllers/QueuesController.html":{},"coverage.html":{}}}],["queueservice",{"_index":809,"title":{"injectables/QueueService.html":{}},"body":{"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"coverage.html":{},"overview.html":{}}}],["queuestatus",{"_index":716,"title":{},"body":{"entities/Queue.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/UpdateQueueDto.html":{},"miscellaneous/enumerations.html":{}}}],["queuestatus.cancelled",{"_index":1186,"title":{},"body":{"injectables/QueueService.html":{}}}],["queuestatus.completed",{"_index":1106,"title":{},"body":{"injectables/QueueService.html":{}}}],["queuestatus.pending",{"_index":727,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{}}}],["queuestatus.serving",{"_index":1166,"title":{},"body":{"injectables/QueueService.html":{}}}],["re",{"_index":536,"title":{},"body":{"injectables/AuthService.html":{}}}],["read",{"_index":1560,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":129,"title":{},"body":{"controllers/AppController.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{}}}],["ready",{"_index":1484,"title":{},"body":{"index.html":{}}}],["real",{"_index":1537,"title":{},"body":{"index.html":{}}}],["reason_of_visit",{"_index":897,"title":{},"body":{"entities/QueueDetails.html":{}}}],["reasonofvisit",{"_index":633,"title":{},"body":{"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["received",{"_index":360,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["referencedcolumnname",{"_index":1388,"title":{},"body":{"entities/User.html":{}}}],["reflect",{"_index":1438,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":1265,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["register",{"_index":246,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["register(@body",{"_index":372,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["register(registerdto",{"_index":308,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["registerdto",{"_index":309,"title":{"classes/RegisterDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["registerdto})@post('register",{"_index":314,"title":{},"body":{"controllers/AuthController.html":{}}}],["registration",{"_index":312,"title":{},"body":{"controllers/AuthController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{}}}],["registration'})@apiresponse({status",{"_index":310,"title":{},"body":{"controllers/AuthController.html":{}}}],["relation",{"_index":1082,"title":{},"body":{"injectables/QueueService.html":{}}}],["relations",{"_index":474,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{}}}],["remove",{"_index":497,"title":{},"body":{"injectables/AuthService.html":{}}}],["replaces",{"_index":1339,"title":{},"body":{"injectables/RolesService.html":{}}}],["repository",{"_index":435,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{},"index.html":{}}}],["req",{"_index":289,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QueueController.html":{},"interfaces/RequestWithUser.html":{}}}],["req.user",{"_index":388,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["req.user.sub",{"_index":389,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["req.user?.id",{"_index":819,"title":{},"body":{"controllers/QueueController.html":{}}}],["request",{"_index":265,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QueueController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["request.user?.roles",{"_index":1275,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["requestwithuser",{"_index":249,"title":{"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["requiredroles",{"_index":1270,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["requiredroles.some((role",{"_index":1276,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["requiring",{"_index":1505,"title":{},"body":{"index.html":{}}}],["reset",{"_index":150,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"overview.html":{}}}],["resources",{"_index":1516,"title":{},"body":{"index.html":{}}}],["response",{"_index":498,"title":{},"body":{"injectables/AuthService.html":{}}}],["result",{"_index":362,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["result.length",{"_index":1150,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["results",{"_index":111,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retrieved",{"_index":294,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["retrieving",{"_index":590,"title":{},"body":{"injectables/AuthService.html":{}}}],["return",{"_index":130,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{}}}],["returns",{"_index":121,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{}}}],["robert",{"_index":105,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["robert'})@isstring()@isoptional",{"_index":70,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["role",{"_index":35,"title":{"entities/Role.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"coverage.html":{}}}],["role.id",{"_index":584,"title":{},"body":{"injectables/AuthService.html":{}}}],["role.name",{"_index":489,"title":{},"body":{"injectables/AuthService.html":{}}}],["role_id",{"_index":1389,"title":{},"body":{"entities/User.html":{}}}],["roleid",{"_index":572,"title":{},"body":{"injectables/AuthService.html":{}}}],["roleids",{"_index":19,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{}}}],["rolenames",{"_index":487,"title":{},"body":{"injectables/AuthService.html":{}}}],["roles",{"_index":337,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles('admin",{"_index":398,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{}}}],["roles.controller",{"_index":1318,"title":{},"body":{"modules/RolesModule.html":{}}}],["roles.map((role",{"_index":488,"title":{},"body":{"injectables/AuthService.html":{}}}],["roles.service",{"_index":1298,"title":{},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{}}}],["roles/entities/role.entity",{"_index":1383,"title":{},"body":{"entities/User.html":{}}}],["roles/roles.module",{"_index":164,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["roles/roles.service",{"_index":459,"title":{},"body":{"injectables/AuthService.html":{}}}],["roles_key",{"_index":1267,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolescontroller",{"_index":1288,"title":{"controllers/RolesController.html":{}},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{},"coverage.html":{}}}],["rolesguard",{"_index":339,"title":{"guards/RolesGuard.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["rolesguard)@roles('admin",{"_index":284,"title":{},"body":{"controllers/AuthController.html":{}}}],["rolesmodule",{"_index":147,"title":{"modules/RolesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RolesModule.html":{},"modules.html":{},"overview.html":{}}}],["rolesrepository",{"_index":1325,"title":{},"body":{"injectables/RolesService.html":{}}}],["rolesservice",{"_index":437,"title":{"injectables/RolesService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"coverage.html":{},"overview.html":{}}}],["room",{"_index":1173,"title":{},"body":{"injectables/QueueService.html":{}}}],["rooms",{"_index":979,"title":{},"body":{"classes/QueueGateway.html":{}}}],["root",{"_index":1590,"title":{},"body":{"miscellaneous/variables.html":{}}}],["run",{"_index":1472,"title":{},"body":{"index.html":{}}}],["runs",{"_index":1491,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1441,"title":{},"body":{"dependencies.html":{}}}],["san",{"_index":52,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["save",{"_index":1052,"title":{},"body":{"injectables/QueueService.html":{}}}],["savedqueue",{"_index":1060,"title":{},"body":{"injectables/QueueService.html":{}}}],["savedqueue.id",{"_index":1074,"title":{},"body":{"injectables/QueueService.html":{}}}],["scalable",{"_index":1463,"title":{},"body":{"index.html":{}}}],["schema",{"_index":303,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["secret",{"_index":422,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretkey",{"_index":660,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["secretorkey",{"_index":669,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["seeddatabaseifneeded",{"_index":1412,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["seeddatabaseifneeded(datasource",{"_index":1454,"title":{},"body":{"miscellaneous/functions.html":{}}}],["select",{"_index":1192,"title":{},"body":{"injectables/QueueService.html":{}}}],["send",{"_index":977,"title":{},"body":{"classes/QueueGateway.html":{}}}],["sequence",{"_index":1033,"title":{},"body":{"injectables/QueueService.html":{}}}],["server",{"_index":912,"title":{},"body":{"classes/QueueGateway.html":{},"index.html":{}}}],["service",{"_index":1219,"title":{},"body":{"controllers/QueuesController.html":{}}}],["serving",{"_index":723,"title":{},"body":{"entities/Queue.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"miscellaneous/enumerations.html":{}}}],["servingcount",{"_index":1181,"title":{},"body":{"injectables/QueueService.html":{}}}],["servingqueueswithdetails",{"_index":1221,"title":{},"body":{"controllers/QueuesController.html":{}}}],["servingqueueswithdetails.length",{"_index":1223,"title":{},"body":{"controllers/QueuesController.html":{}}}],["set",{"_index":187,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{}}}],["setmetadata(roles_key",{"_index":1594,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setting",{"_index":959,"title":{},"body":{"classes/QueueGateway.html":{}}}],["setup",{"_index":1469,"title":{},"body":{"index.html":{}}}],["sheesh",{"_index":188,"title":{},"body":{"modules/AppModule.html":{}}}],["side",{"_index":1464,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":424,"title":{},"body":{"modules/AuthModule.html":{}}}],["simple",{"_index":1055,"title":{},"body":{"injectables/QueueService.html":{},"index.html":{}}}],["simplified",{"_index":1072,"title":{},"body":{"injectables/QueueService.html":{}}}],["simplify",{"_index":1062,"title":{},"body":{"injectables/QueueService.html":{}}}],["single",{"_index":1125,"title":{},"body":{"injectables/QueueService.html":{}}}],["socket",{"_index":927,"title":{},"body":{"classes/QueueGateway.html":{}}}],["socket.io",{"_index":952,"title":{},"body":{"classes/QueueGateway.html":{},"dependencies.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["specific",{"_index":537,"title":{},"body":{"injectables/AuthService.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["sponsors",{"_index":1555,"title":{},"body":{"index.html":{}}}],["sql",{"_index":211,"title":{},"body":{"modules/AppModule.html":{}}}],["src/.../counter.entity.ts",{"_index":1450,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../database.config.ts",{"_index":1582,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1453,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../queue.entity.ts",{"_index":1451,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../roles.decorator.ts",{"_index":1583,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":116,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:14",{"_index":123,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:9",{"_index":120,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":235,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":236,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":240,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:101",{"_index":315,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:111",{"_index":298,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:133",{"_index":322,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:182",{"_index":287,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:62",{"_index":307,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":409,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":428,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:104",{"_index":449,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:18",{"_index":438,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:205",{"_index":446,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:210",{"_index":444,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:238",{"_index":451,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:26",{"_index":453,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:372",{"_index":441,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:41",{"_index":448,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorators/roles.decorator.ts",{"_index":1400,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dto/login.dto.ts",{"_index":681,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto.ts:15",{"_index":685,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/login.dto.ts:23",{"_index":688,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/register.dto.ts",{"_index":1244,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["src/auth/dto/register.dto.ts:22",{"_index":1248,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:30",{"_index":1261,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:40",{"_index":1259,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:48",{"_index":1250,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:56",{"_index":1253,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:64",{"_index":1252,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:72",{"_index":1256,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:80",{"_index":1257,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:87",{"_index":1246,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/update",{"_index":6,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/auth/guards/jwt",{"_index":648,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard.ts",{"_index":1262,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard.ts:11",{"_index":1310,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/guards/roles.guard.ts:14",{"_index":1311,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":654,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:13",{"_index":679,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:28",{"_index":680,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/config/database.config.ts",{"_index":1409,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":1410,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/counter/entities/counter.entity.ts",{"_index":597,"title":{},"body":{"entities/Counter.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/modules/counter/entities/counter.entity.ts:18",{"_index":612,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/counter/entities/counter.entity.ts:21",{"_index":614,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/counter/entities/counter.entity.ts:28",{"_index":618,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/counter/entities/counter.entity.ts:31",{"_index":610,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/counter/entities/counter.entity.ts:38",{"_index":608,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/queue/dto/create",{"_index":627,"title":{},"body":{"classes/CreateQueueDto.html":{},"coverage.html":{}}}],["src/modules/queue/dto/update",{"_index":1345,"title":{},"body":{"classes/UpdateQueueDto.html":{},"coverage.html":{}}}],["src/modules/queue/entities/queue",{"_index":871,"title":{},"body":{"entities/QueueDetails.html":{},"coverage.html":{}}}],["src/modules/queue/entities/queue.entity.ts",{"_index":689,"title":{},"body":{"entities/Queue.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/modules/queue/entities/queue.entity.ts:22",{"_index":712,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:25",{"_index":715,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:32",{"_index":717,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:35",{"_index":702,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:38",{"_index":705,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:41",{"_index":698,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:44",{"_index":711,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:47",{"_index":709,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:52",{"_index":700,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/queue.controller.ts",{"_index":729,"title":{},"body":{"controllers/QueueController.html":{},"coverage.html":{}}}],["src/modules/queue/queue.controller.ts:109",{"_index":795,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:114",{"_index":774,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:119",{"_index":766,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:124",{"_index":790,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:129",{"_index":793,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:134",{"_index":799,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:139",{"_index":755,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:144",{"_index":752,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:149",{"_index":784,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:154",{"_index":759,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:24",{"_index":762,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:42",{"_index":763,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:47",{"_index":769,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:52",{"_index":776,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:57",{"_index":780,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:62",{"_index":771,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:68",{"_index":778,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:74",{"_index":782,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:80",{"_index":787,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:85",{"_index":802,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.gateway.ts",{"_index":908,"title":{},"body":{"classes/QueueGateway.html":{},"coverage.html":{}}}],["src/modules/queue/queue.gateway.ts:21",{"_index":924,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:24",{"_index":922,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:31",{"_index":928,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:35",{"_index":932,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:40",{"_index":941,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:47",{"_index":935,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:53",{"_index":938,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:59",{"_index":944,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:66",{"_index":948,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:71",{"_index":946,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.module.ts",{"_index":988,"title":{},"body":{"modules/QueueModule.html":{}}}],["src/modules/queue/queue.service.ts",{"_index":997,"title":{},"body":{"injectables/QueueService.html":{},"coverage.html":{}}}],["src/modules/queue/queue.service.ts:110",{"_index":1012,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:116",{"_index":1014,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:123",{"_index":1017,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:135",{"_index":1013,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:147",{"_index":1022,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:163",{"_index":1026,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:20",{"_index":1003,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:203",{"_index":1024,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:222",{"_index":1020,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:254",{"_index":1016,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:293",{"_index":1007,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:32",{"_index":1011,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:363",{"_index":1025,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:410",{"_index":1006,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:416",{"_index":1018,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:423",{"_index":1009,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queues.controller.ts",{"_index":1206,"title":{},"body":{"controllers/QueuesController.html":{},"coverage.html":{}}}],["src/modules/queue/queues.controller.ts:10",{"_index":1209,"title":{},"body":{"controllers/QueuesController.html":{}}}],["src/roles/entities/role.entity.ts",{"_index":1278,"title":{},"body":{"entities/Role.html":{},"coverage.html":{}}}],["src/roles/entities/role.entity.ts:10",{"_index":1282,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/entities/role.entity.ts:13",{"_index":1279,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/entities/role.entity.ts:16",{"_index":1285,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/entities/role.entity.ts:7",{"_index":1280,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/roles.controller.ts",{"_index":1289,"title":{},"body":{"controllers/RolesController.html":{},"coverage.html":{}}}],["src/roles/roles.controller.ts:14",{"_index":1292,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.controller.ts:20",{"_index":1294,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.controller.ts:26",{"_index":1297,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.module.ts",{"_index":1316,"title":{},"body":{"modules/RolesModule.html":{}}}],["src/roles/roles.service.ts",{"_index":1320,"title":{},"body":{"injectables/RolesService.html":{},"coverage.html":{}}}],["src/roles/roles.service.ts:17",{"_index":1328,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:21",{"_index":1331,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:29",{"_index":1330,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:37",{"_index":1332,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:45",{"_index":1327,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:8",{"_index":1324,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/users/entities/user.entity.ts",{"_index":1360,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:16",{"_index":1369,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:19",{"_index":1367,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:22",{"_index":1381,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:25",{"_index":1376,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:28",{"_index":1368,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:31",{"_index":1372,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:34",{"_index":1370,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:37",{"_index":1373,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:40",{"_index":1375,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:43",{"_index":1362,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:46",{"_index":1363,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:50",{"_index":1365,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:53",{"_index":1366,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:67",{"_index":1380,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.module.ts",{"_index":1390,"title":{},"body":{"modules/UsersModule.html":{}}}],["st",{"_index":51,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["start",{"_index":1473,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1476,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":1477,"title":{},"body":{"index.html":{}}}],["started",{"_index":1457,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1467,"title":{},"body":{"index.html":{}}}],["statement",{"_index":377,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["statements",{"_index":1395,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":124,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"entities/Counter.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateQueueDto.html":{}}}],["stay",{"_index":1541,"title":{},"body":{"index.html":{}}}],["steps",{"_index":1488,"title":{},"body":{"index.html":{}}}],["straightforward",{"_index":1503,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":657,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["strength",{"_index":514,"title":{},"body":{"injectables/AuthService.html":{}}}],["string",{"_index":47,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["string(payload.email",{"_index":675,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["string(todaycount",{"_index":1050,"title":{},"body":{"injectables/QueueService.html":{}}}],["structure",{"_index":1226,"title":{},"body":{"controllers/QueuesController.html":{}}}],["sub",{"_index":348,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{}}}],["subscribemessage",{"_index":950,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subscribemessage('getqueueposition",{"_index":934,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subscribemessage('join_queue_updates",{"_index":943,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subscribemessage('joincounter",{"_index":937,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subscribemessage('joinqueue",{"_index":940,"title":{},"body":{"classes/QueueGateway.html":{}}}],["success",{"_index":496,"title":{},"body":{"injectables/AuthService.html":{},"classes/QueueGateway.html":{}}}],["successful",{"_index":302,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["successfully",{"_index":261,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{}}}],["successfully'})@apiresponse({status",{"_index":295,"title":{},"body":{"controllers/AuthController.html":{}}}],["summary",{"_index":351,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["super",{"_index":665,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["super_admin",{"_index":399,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{}}}],["super_admin')@post('admin/update",{"_index":285,"title":{},"body":{"controllers/AuthController.html":{}}}],["support",{"_index":1523,"title":{},"body":{"index.html":{},"modules.html":{}}}],["supporting",{"_index":1211,"title":{},"body":{"controllers/QueuesController.html":{}}}],["svg",{"_index":1571,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1444,"title":{},"body":{"dependencies.html":{}}}],["synchronize",{"_index":184,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["table",{"_index":1419,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1418,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":1489,"title":{},"body":{"index.html":{}}}],["taken",{"_index":511,"title":{},"body":{"injectables/AuthService.html":{}}}],["target",{"_index":552,"title":{},"body":{"injectables/AuthService.html":{}}}],["targetuser",{"_index":553,"title":{},"body":{"injectables/AuthService.html":{}}}],["targetuserid",{"_index":250,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["test",{"_index":686,"title":{},"body":{"classes/LoginDto.html":{},"index.html":{}}}],["test:covdeployment",{"_index":1482,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1481,"title":{},"body":{"index.html":{}}}],["test@example.com",{"_index":101,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["test@example.com'})@isemail()@isnotempty",{"_index":1247,"title":{},"body":{"classes/RegisterDto.html":{}}}],["test@example.com'})@isemail()@isoptional",{"_index":60,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["test@example.com'})@isnotempty",{"_index":684,"title":{},"body":{"classes/LoginDto.html":{}}}],["tests",{"_index":1478,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":1554,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":131,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.adminupdateuser",{"_index":402,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.authservice.getprofile(number(req.user.sub",{"_index":391,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.authservice.login(logindto",{"_index":363,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.authservice.register(registerdto",{"_index":378,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.authservice.updateuserinfo",{"_index":393,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.counterrepository.create",{"_index":1203,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.counterrepository.find",{"_index":1205,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.counterrepository.findone",{"_index":1152,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.counterrepository.save(counter",{"_index":1161,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.findone(id",{"_index":1100,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.findone(queueid",{"_index":1094,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.getdetailsformultiplequeues(queueids",{"_index":1146,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.getprofile(targetuserid",{"_index":589,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.getqueueposition(queueid",{"_index":1097,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.getqueueposition(savedqueue.id",{"_index":1085,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.isvalidemail(email",{"_index":507,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.isvalidemail(updateuserdto.email",{"_index":520,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(payload",{"_index":494,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.log(`client",{"_index":963,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.logger.log(`socket",{"_index":973,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.queuedetailsrepository.create",{"_index":1073,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuedetailsrepository.find",{"_index":1129,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuedetailsrepository.findone",{"_index":1095,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuedetailsrepository.save(queuedetails",{"_index":1084,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuegateway.notifycounterupdate(counterid",{"_index":1178,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuegateway.notifyqueueupdate(id",{"_index":1112,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuegateway.notifyqueueupdate(nextqueue.id",{"_index":1175,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuegateway.server.emit('queuelistupdate",{"_index":1087,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.count",{"_index":1046,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.create",{"_index":1053,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.find",{"_index":1089,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.findone",{"_index":1092,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.save(counter.currentqueue",{"_index":1158,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.save(nextqueue",{"_index":1169,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.save(queue",{"_index":1061,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queueservice.addcounter(data.name",{"_index":866,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.callnext(+counterid",{"_index":864,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.checkexists(+id",{"_index":869,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.create(createqueuedto",{"_index":827,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findall",{"_index":828,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findbyqueuenumber(queuenumber",{"_index":857,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findbystatus(queuestatus.completed",{"_index":833,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findbystatus(queuestatus.pending",{"_index":831,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findbystatus(queuestatus.serving",{"_index":832,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findbystatus(status",{"_index":830,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findbystatuswithdetails(queuestatus.pending",{"_index":834,"title":{},"body":{"controllers/QueueController.html":{},"controllers/QueuesController.html":{}}}],["this.queueservice.findbystatuswithdetails(queuestatus.serving",{"_index":835,"title":{},"body":{"controllers/QueueController.html":{},"controllers/QueuesController.html":{}}}],["this.queueservice.findone(+id",{"_index":855,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.getcounters",{"_index":867,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.getdetailsformultiplequeues(body.queueids",{"_index":840,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.getqueuedetails(+id",{"_index":859,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.getqueuedetails(queueid",{"_index":969,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.queueservice.getqueueposition(+id",{"_index":861,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.getqueueposition(queueid",{"_index":971,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.queueservice.getstats",{"_index":853,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.update(+id",{"_index":850,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.reflector.getallandoverride",{"_index":1271,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["this.rolesrepository.find",{"_index":1334,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesrepository.findby",{"_index":1342,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesrepository.findone",{"_index":1335,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesservice.assignrolestouser",{"_index":575,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.rolesservice.findall",{"_index":1302,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.findone(+id",{"_index":1303,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.findone(roleid",{"_index":573,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.rolesservice.findone(updateuserdto.defaultroleid",{"_index":579,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.rolesservice.getuserroles(+userid",{"_index":1306,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.getuserroles(adminid",{"_index":546,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.rolesservice.getuserroles(targetuserid",{"_index":581,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.rolesservice.getuserroles(user.id",{"_index":486,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.server.emit('counterlistupdate",{"_index":984,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.server.emit('queuelistupdate",{"_index":981,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.server.to(`counter_${counterid}`).emit('counterupdate",{"_index":983,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.server.to(`queue_${queueid}`).emit('queueupdate",{"_index":980,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.updateuserinfo(targetuserid",{"_index":561,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersrepository.findone",{"_index":461,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RolesService.html":{}}}],["this.usersrepository.save(user",{"_index":1344,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.usersrepository.update(targetuserid",{"_index":587,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":366,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{}}}],["ties",{"_index":1120,"title":{},"body":{"injectables/QueueService.html":{}}}],["time",{"_index":219,"title":{},"body":{"modules/AppModule.html":{},"injectables/QueueService.html":{},"index.html":{}}}],["time_zone",{"_index":226,"title":{},"body":{"modules/AppModule.html":{}}}],["today",{"_index":1034,"title":{},"body":{"injectables/QueueService.html":{}}}],["today.getfullyear()}${string(today.getmonth",{"_index":1036,"title":{},"body":{"injectables/QueueService.html":{}}}],["todaycount",{"_index":1045,"title":{},"body":{"injectables/QueueService.html":{}}}],["todaystart",{"_index":1042,"title":{},"body":{"injectables/QueueService.html":{}}}],["todaystart.sethours(0",{"_index":1044,"title":{},"body":{"injectables/QueueService.html":{}}}],["token",{"_index":493,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{}}}],["total",{"_index":1197,"title":{},"body":{"injectables/QueueService.html":{}}}],["totalcount",{"_index":1184,"title":{},"body":{"injectables/QueueService.html":{}}}],["totalwaittimems",{"_index":1195,"title":{},"body":{"injectables/QueueService.html":{}}}],["touch",{"_index":1561,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":1429,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":168,"title":{},"body":{"modules/AppModule.html":{},"entities/Counter.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"entities/User.html":{}}}],["true})@joincolumn({name",{"_index":604,"title":{},"body":{"entities/Counter.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["trust",{"_index":1063,"title":{},"body":{"injectables/QueueService.html":{}}}],["try",{"_index":361,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["turn",{"_index":1174,"title":{},"body":{"injectables/QueueService.html":{}}}],["twitter",{"_index":1567,"title":{},"body":{"index.html":{}}}],["type",{"_index":29,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["typeof",{"_index":1064,"title":{},"body":{"injectables/QueueService.html":{}}}],["typeorm",{"_index":457,"title":{},"body":{"injectables/AuthService.html":{},"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"entities/Role.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":157,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([queue",{"_index":996,"title":{},"body":{"modules/QueueModule.html":{}}}],["typeormmodule.forfeature([role",{"_index":1319,"title":{},"body":{"modules/RolesModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":427,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":1584,"title":{},"body":{"miscellaneous/variables.html":{}}}],["typescript",{"_index":468,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["ui",{"_index":1445,"title":{},"body":{"dependencies.html":{}}}],["unauthorized",{"_index":270,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["unauthorized'})@apibearerauth('jwt",{"_index":296,"title":{},"body":{"controllers/AuthController.html":{}}}],["unauthorized'})@apiresponse({status",{"_index":319,"title":{},"body":{"controllers/AuthController.html":{}}}],["unauthorizedexception",{"_index":326,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{}}}],["unauthorizedexception('admin",{"_index":544,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('insufficient",{"_index":551,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('invalid",{"_index":390,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{}}}],["unauthorizedexception('user",{"_index":517,"title":{},"body":{"injectables/AuthService.html":{}}}],["uncomment",{"_index":805,"title":{},"body":{"controllers/QueueController.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["undefined",{"_index":44,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AuthController.html":{},"entities/Counter.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"entities/User.html":{}}}],["undefined})@apiresponse({status",{"_index":304,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined})@isarray()@isoptional",{"_index":45,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["unexpected",{"_index":539,"title":{},"body":{"injectables/AuthService.html":{}}}],["unique",{"_index":714,"title":{},"body":{"entities/Queue.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["unit",{"_index":1479,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":290,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["unlicensed",{"_index":1581,"title":{},"body":{"properties.html":{}}}],["unused",{"_index":470,"title":{},"body":{"injectables/AuthService.html":{}}}],["update",{"_index":11,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{}}}],["update'})@apibody({type",{"_index":258,"title":{},"body":{"controllers/AuthController.html":{}}}],["update(@param('id",{"_index":862,"title":{},"body":{"controllers/QueueController.html":{}}}],["update(id",{"_index":796,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["updated",{"_index":318,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{}}}],["updated'})@apiresponse({status",{"_index":262,"title":{},"body":{"controllers/AuthController.html":{}}}],["updatedqueue",{"_index":1110,"title":{},"body":{"injectables/QueueService.html":{}}}],["updateduser",{"_index":530,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateduser.defaultrole?.name",{"_index":531,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateprofile",{"_index":247,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["updateprofile(req",{"_index":316,"title":{},"body":{"controllers/AuthController.html":{}}}],["updatequeuedto",{"_index":797,"title":{"classes/UpdateQueueDto.html":{}},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{},"classes/UpdateQueueDto.html":{},"coverage.html":{}}}],["updatequeuedto.counternumber",{"_index":1108,"title":{},"body":{"injectables/QueueService.html":{}}}],["updatequeuedto.status",{"_index":1102,"title":{},"body":{"injectables/QueueService.html":{}}}],["updates",{"_index":566,"title":{},"body":{"injectables/AuthService.html":{},"classes/QueueGateway.html":{},"index.html":{}}}],["updatestatus",{"_index":748,"title":{},"body":{"controllers/QueueController.html":{}}}],["updatestatus(@param('id",{"_index":841,"title":{},"body":{"controllers/QueueController.html":{}}}],["updatestatus(id",{"_index":800,"title":{},"body":{"controllers/QueueController.html":{}}}],["updateuserdto",{"_index":14,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["updateuserdto.defaultroleid",{"_index":578,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.email",{"_index":519,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.password",{"_index":528,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.password.length",{"_index":529,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.roleids",{"_index":567,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.roleids.includes(updateuserdto.defaultroleid",{"_index":586,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.roleids.join",{"_index":577,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.roleids.length",{"_index":568,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.username",{"_index":522,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto:22",{"_index":61,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:27",{"_index":86,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:37",{"_index":84,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:42",{"_index":65,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:47",{"_index":71,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:52",{"_index":68,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:60",{"_index":77,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:68",{"_index":59,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:76",{"_index":56,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto})@useguards(jwtauthguard)@post('update",{"_index":321,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateuserinfo",{"_index":431,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserinfo(userid",{"_index":450,"title":{},"body":{"injectables/AuthService.html":{}}}],["updating",{"_index":97,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AuthService.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"classes/UpdateUserDto.html":{}}}],["use",{"_index":991,"title":{},"body":{"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["usefactory",{"_index":171,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["useguards",{"_index":325,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QueueController.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{}}}],["useguards(jwtauthguard",{"_index":380,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QueueController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{}}}],["user",{"_index":12,"title":{"entities/User.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["user's",{"_index":254,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QueueController.html":{},"interfaces/RequestWithUser.html":{}}}],["user.defaultrole?.name",{"_index":500,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.dto",{"_index":336,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["user.dto.ts",{"_index":7,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:22",{"_index":1353,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:27",{"_index":1359,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:37",{"_index":1358,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:42",{"_index":1354,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:47",{"_index":1356,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:52",{"_index":1355,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:60",{"_index":1357,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:68",{"_index":1352,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:76",{"_index":1351,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:90",{"_index":40,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["user.dto.ts:99",{"_index":46,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["user.email",{"_index":492,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.id",{"_index":491,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":464,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.roles",{"_index":1284,"title":{},"body":{"entities/Role.html":{},"injectables/RolesService.html":{}}}],["user.username",{"_index":523,"title":{},"body":{"injectables/AuthService.html":{}}}],["user/:userid",{"_index":286,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["user_id",{"_index":899,"title":{},"body":{"entities/QueueDetails.html":{},"entities/User.html":{}}}],["user_roles",{"_index":1378,"title":{},"body":{"entities/User.html":{}}}],["userid",{"_index":257,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateQueueDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["username",{"_index":28,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["userroles",{"_index":580,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["userroles.includes(role",{"_index":1277,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["userroles.some",{"_index":583,"title":{},"body":{"injectables/AuthService.html":{}}}],["users",{"_index":822,"title":{},"body":{"controllers/QueueController.html":{},"entities/Role.html":{}}}],["users/entities/user.entity",{"_index":414,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{}}}],["users/users.module",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["usersmodule",{"_index":148,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":439,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RolesService.html":{}}}],["userwithoutpassword",{"_index":499,"title":{},"body":{"injectables/AuthService.html":{}}}],["using",{"_index":1071,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"injectables/RolesService.html":{},"index.html":{}}}],["utc",{"_index":221,"title":{},"body":{"modules/AppModule.html":{}}}],["utc+8",{"_index":229,"title":{},"body":{"modules/AppModule.html":{}}}],["valid",{"_index":485,"title":{},"body":{"injectables/AuthService.html":{}}}],["validate",{"_index":505,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{}}}],["validate(payload",{"_index":670,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":432,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(logindto",{"_index":452,"title":{},"body":{"injectables/AuthService.html":{}}}],["validation",{"_index":671,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["validator",{"_index":93,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateQueueDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["validvalues",{"_index":848,"title":{},"body":{"controllers/QueueController.html":{}}}],["value",{"_index":844,"title":{},"body":{"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":1401,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":664,"title":{"miscellaneous/variables.html":{}},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["vars",{"_index":471,"title":{},"body":{"injectables/AuthService.html":{}}}],["verify",{"_index":542,"title":{},"body":{"injectables/AuthService.html":{}}}],["version",{"_index":1579,"title":{},"body":{"properties.html":{}}}],["video",{"_index":1531,"title":{},"body":{"index.html":{}}}],["visit",{"_index":1520,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":1534,"title":{},"body":{"index.html":{}}}],["void",{"_index":930,"title":{},"body":{"classes/QueueGateway.html":{}}}],["wait",{"_index":1189,"title":{},"body":{"injectables/QueueService.html":{}}}],["waiting",{"_index":1164,"title":{},"body":{"injectables/QueueService.html":{}}}],["walk",{"_index":1243,"title":{},"body":{"controllers/QueuesController.html":{}}}],["want",{"_index":806,"title":{},"body":{"controllers/QueueController.html":{}}}],["watch",{"_index":1474,"title":{},"body":{"index.html":{}}}],["we'll",{"_index":557,"title":{},"body":{"injectables/AuthService.html":{}}}],["website",{"_index":1565,"title":{},"body":{"index.html":{}}}],["websocketgateway",{"_index":949,"title":{},"body":{"classes/QueueGateway.html":{}}}],["websocketserver",{"_index":925,"title":{},"body":{"classes/QueueGateway.html":{}}}],["willbeassigned",{"_index":585,"title":{},"body":{"injectables/AuthService.html":{}}}],["working",{"_index":1519,"title":{},"body":{"index.html":{}}}],["world",{"_index":238,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":1544,"title":{},"body":{"index.html":{}}}],["xxxx",{"_index":1049,"title":{},"body":{"injectables/QueueService.html":{}}}],["yes",{"_index":476,"title":{},"body":{"injectables/AuthService.html":{}}}],["you'd",{"_index":1558,"title":{},"body":{"index.html":{}}}],["you're",{"_index":1483,"title":{},"body":{"index.html":{}}}],["yyyymmdd",{"_index":1048,"title":{},"body":{"injectables/QueueService.html":{}}}],["zone",{"_index":220,"title":{},"body":{"modules/AppModule.html":{}}}],["zoom",{"_index":149,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AdminUpdateUserDto.html":{"url":"classes/AdminUpdateUserDto.html","title":"class - AdminUpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AdminUpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/update-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for admin to update any user\n\n            \n\n            \n                Extends\n            \n            \n                            UpdateUserDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                defaultRoleId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                roleIds\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                contactNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                middleName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                nameExtension\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        defaultRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Default role ID for the user', example: 2})@IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        roleIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Array of role IDs to assign to the user', example: undefined, type: undefined})@IsArray()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:99\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Complete address', example: '123 Main St, San Ildefonso, Bulacan'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:76\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        contactNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Contact number', example: '09123456789'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:68\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User email address', example: 'test@example.com'})@IsEmail()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:22\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'First name', example: 'John'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:42\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Last name', example: 'Doe'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:52\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Middle name', example: 'Robert'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:47\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        nameExtension\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Name extension (e.g., Jr., III)', example: 'Jr.'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:60\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User password (min 8 characters)', example: 'password123', minLength: 8})@IsString()@IsOptional()@MinLength(8)\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:37\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Username', example: 'john_doe'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:27\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsOptional,\n  IsString,\n  MinLength,\n  IsNumber,\n  IsArray,\n} from 'class-validator';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\n/**\n * DTO for updating user information (citizen)\n * @class UpdateUserDto\n */\nexport class UpdateUserDto {\n  @ApiPropertyOptional({\n    description: 'User email address',\n    example: 'test@example.com',\n  })\n  @IsEmail()\n  @IsOptional()\n  email?: string;\n\n  @ApiPropertyOptional({ description: 'Username', example: 'john_doe' })\n  @IsString()\n  @IsOptional()\n  username?: string;\n\n  @ApiPropertyOptional({\n    description: 'User password (min 8 characters)',\n    example: 'password123',\n    minLength: 8,\n  })\n  @IsString()\n  @IsOptional()\n  @MinLength(8)\n  password?: string;\n\n  @ApiPropertyOptional({ description: 'First name', example: 'John' })\n  @IsString()\n  @IsOptional()\n  firstName?: string;\n\n  @ApiPropertyOptional({ description: 'Middle name', example: 'Robert' })\n  @IsString()\n  @IsOptional()\n  middleName?: string;\n\n  @ApiPropertyOptional({ description: 'Last name', example: 'Doe' })\n  @IsString()\n  @IsOptional()\n  lastName?: string;\n\n  @ApiPropertyOptional({\n    description: 'Name extension (e.g., Jr., III)',\n    example: 'Jr.',\n  })\n  @IsString()\n  @IsOptional()\n  nameExtension?: string;\n\n  @ApiPropertyOptional({\n    description: 'Contact number',\n    example: '09123456789',\n  })\n  @IsString()\n  @IsOptional()\n  contactNumber?: string;\n\n  @ApiPropertyOptional({\n    description: 'Complete address',\n    example: '123 Main St, San Ildefonso, Bulacan',\n  })\n  @IsString()\n  @IsOptional()\n  address?: string;\n}\n\n/**\n * DTO for admin to update any user\n * @class AdminUpdateUserDto\n */\nexport class AdminUpdateUserDto extends UpdateUserDto {\n  @ApiPropertyOptional({\n    description: 'Default role ID for the user',\n    example: 2,\n  })\n  @IsNumber()\n  @IsOptional()\n  defaultRoleId?: number;\n\n  @ApiPropertyOptional({\n    description: 'Array of role IDs to assign to the user',\n    example: [1, 2],\n    type: [Number],\n  })\n  @IsArray()\n  @IsOptional()\n  roleIds?: number[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                            \n                                    \n                                healthCheck\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        healthCheck\n                        \n                    \n                \n            \n            \n                \n                        \n                    healthCheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('health')\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     { status: string; }\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n\n  @Get('health')\n  healthCheck() {\n    return { status: 'ok' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nQueueModule\n\nQueueModule\n\nAppModule -->\n\nQueueModule->AppModule\n\n\n\n\n\nRolesModule\n\nRolesModule\n\nAppModule -->\n\nRolesModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            QueueModule\n                        \n                        \n                            RolesModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n// import { databaseConfig } from './config/database.config';\nimport { UsersModule } from './users/users.module';\nimport { AuthModule } from './auth/auth.module';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { RolesModule } from './roles/roles.module';\nimport { QueueModule } from './modules/queue/queue.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'mysql',\n        host: configService.get('DB_HOST'),\n        port: configService.get('DB_PORT'),\n        username: configService.get('DB_USERNAME'),\n        password: configService.get('DB_PASSWORD'),\n        database: configService.get('DB_NAME'),\n        entities: [__dirname + '/**/*.entity{.ts,.js}'],\n        synchronize: configService.get('NODE_ENV') !== 'production', //set this sheesh to true in development only\n        logging: configService.get('NODE_ENV') !== 'production',\n        logger: 'advanced-console',\n        // Prevent data loss in development (below code is for development only)\n        // synchronize: true,\n        migrationsRun: false,\n        dropSchema: false,\n\n        // Only for development environments!\n        beforeConnect: async (connection): Promise => {\n          if (process.env.NODE_ENV !== 'production') {\n            const conn = connection as {\n              query: (sql: string) => Promise;\n            };\n            // Disable foreign key checks for development\n            await conn.query('SET FOREIGN_KEY_CHECKS=0;');\n            // Set time zone to UTC for consistent datetime handling\n            await conn.query(\"SET time_zone = '+08:00';\"); // Philippines time zone (UTC+8)\n          }\n        },\n        afterConnect: async (connection): Promise => {\n          if (process.env.NODE_ENV !== 'production') {\n            await (\n              connection as { query: (sql: string) => Promise }\n            ).query('SET FOREIGN_KEY_CHECKS=1;');\n          }\n        },\n      }),\n    }),\n    UsersModule,\n    AuthModule,\n    RolesModule,\n    QueueModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                adminUpdateUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                getProfile\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                register\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                updateProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        adminUpdateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    adminUpdateUser(req: RequestWithUser, targetUserId: string, updateUserDto: AdminUpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin update user', description: 'Allows administrators to update any user's information including role assignments'})@ApiParam({name: 'userId', description: 'ID of the user to update'})@ApiBody({type: AdminUpdateUserDto})@ApiResponse({status: 200, description: 'User successfully updated'})@ApiResponse({status: 400, description: 'Bad request - invalid input data'})@ApiResponse({status: 401, description: 'Unauthorized - invalid credentials'})@ApiResponse({status: 403, description: 'Forbidden - insufficient permissions'})@ApiResponse({status: 404, description: 'Not found - user or role not found'})@ApiResponse({status: 409, description: 'Conflict - email or username already exists'})@ApiBearerAuth('JWT-auth')@UseGuards(JwtAuthGuard, RolesGuard)@Roles('admin', 'super_admin')@Post('admin/update-user/:userId')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:182\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestWithUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                targetUserId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            AdminUpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(req: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get user profile'})@ApiResponse({status: 200, description: 'Profile retrieved successfully'})@ApiResponse({status: 401, description: 'Unauthorized'})@ApiBearerAuth('JWT-auth')@UseGuards(JwtAuthGuard)@Get('profile')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:111\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestWithUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'User login'})@ApiResponse({status: 200, description: 'Login successful', schema: undefined})@ApiResponse({status: 401, description: 'Unauthorized - invalid credentials'})@ApiBody({type: LoginDto})@Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(registerDto: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'User registration'})@ApiResponse({status: 201, description: 'Registration successful', schema: undefined})@ApiResponse({status: 400, description: 'Bad request - invalid data'})@ApiResponse({status: 409, description: 'Conflict - email or username already exists'})@ApiBody({type: RegisterDto})@Post('register')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:101\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                registerDto\n                                            \n                                                            RegisterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        updateProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProfile(req: RequestWithUser, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update user profile', description: 'Allows a user to update their own profile information'})@ApiResponse({status: 200, description: 'Profile updated successfully'})@ApiResponse({status: 400, description: 'Bad request - invalid data'})@ApiResponse({status: 401, description: 'Unauthorized'})@ApiResponse({status: 409, description: 'Conflict - email or username already exists'})@ApiBearerAuth('JWT-auth')@ApiBody({type: UpdateUserDto})@UseGuards(JwtAuthGuard)@Post('update-profile')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:133\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestWithUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  Get,\n  UseGuards,\n  Request,\n  UnauthorizedException,\n  Param,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\nimport { UpdateUserDto, AdminUpdateUserDto } from './dto/update-user.dto';\nimport { Roles } from './decorators/roles.decorator';\nimport { RolesGuard } from './guards/roles.guard';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n  ApiParam,\n  ApiBody,\n} from '@nestjs/swagger';\n\ninterface RequestWithUser extends Request {\n  user: { sub: number; email: string; roles: string[] };\n}\n\n@ApiTags('Authentication')\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @ApiOperation({ summary: 'User login' })\n  @ApiResponse({\n    status: 200,\n    description: 'Login successful',\n    schema: {\n      properties: {\n        access_token: { type: 'string' },\n        user: {\n          type: 'object',\n          properties: {\n            id: { type: 'number' },\n            email: { type: 'string' },\n            username: { type: 'string' },\n            roles: { type: 'array', items: { type: 'string' } },\n            defaultRole: { type: 'string' },\n          },\n        },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Unauthorized - invalid credentials',\n  })\n  @ApiBody({ type: LoginDto })\n  @Post('login')\n  async login(@Body() loginDto: LoginDto) {\n    console.log('Login request received:', loginDto);\n    try {\n      const result = await this.authService.login(loginDto);\n      return result;\n    } catch (error) {\n      throw new UnauthorizedException(\n        error instanceof Error ? error.message : 'Invalid credentials',\n      );\n    }\n  }\n\n  @ApiOperation({ summary: 'User registration' })\n  @ApiResponse({\n    status: 201,\n    description: 'Registration successful',\n    schema: {\n      properties: {\n        access_token: { type: 'string' },\n        user: {\n          type: 'object',\n          properties: {\n            id: { type: 'number' },\n            email: { type: 'string' },\n            username: { type: 'string' },\n            roles: { type: 'array', items: { type: 'string' } },\n            defaultRole: { type: 'string' },\n          },\n        },\n      },\n    },\n  })\n  @ApiResponse({ status: 400, description: 'Bad request - invalid data' })\n  @ApiResponse({\n    status: 409,\n    description: 'Conflict - email or username already exists',\n  })\n  @ApiBody({ type: RegisterDto })\n  @Post('register')\n  async register(@Body() registerDto: RegisterDto) {\n    console.log('Register endpoint hit with data:', registerDto); //Debugging Statement\n    return this.authService.register(registerDto);\n  }\n  @ApiOperation({ summary: 'Get user profile' })\n  @ApiResponse({ status: 200, description: 'Profile retrieved successfully' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @ApiBearerAuth('JWT-auth')\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  getProfile(@Request() req: RequestWithUser) {\n    // Add null check before converting to number\n    if (!req.user || req.user.sub === undefined || req.user.sub === null) {\n      throw new UnauthorizedException('Invalid user ID');\n    }\n    return this.authService.getProfile(Number(req.user.sub));\n  }\n  @ApiOperation({\n    summary: 'Update user profile',\n    description: 'Allows a user to update their own profile information',\n  })\n  @ApiResponse({ status: 200, description: 'Profile updated successfully' })\n  @ApiResponse({ status: 400, description: 'Bad request - invalid data' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @ApiResponse({\n    status: 409,\n    description: 'Conflict - email or username already exists',\n  })\n  @ApiBearerAuth('JWT-auth')\n  @ApiBody({ type: UpdateUserDto })\n  @UseGuards(JwtAuthGuard)\n  @Post('update-profile')\n  async updateProfile(\n    @Request() req: RequestWithUser,\n    @Body() updateUserDto: UpdateUserDto,\n  ) {\n    // Add null check before converting to number\n    if (!req.user || req.user.sub === undefined || req.user.sub === null) {\n      throw new UnauthorizedException('Invalid user ID');\n    }\n\n    try {\n      return await this.authService.updateUserInfo(\n        Number(req.user.sub),\n        updateUserDto,\n      );\n    } catch (error) {\n      throw new UnauthorizedException(\n        error instanceof Error ? error.message : 'Failed to update profile',\n      );\n    }\n  }\n  @ApiOperation({\n    summary: 'Admin update user',\n    description:\n      \"Allows administrators to update any user's information including role assignments\",\n  })\n  @ApiParam({ name: 'userId', description: 'ID of the user to update' })\n  @ApiBody({ type: AdminUpdateUserDto })\n  @ApiResponse({ status: 200, description: 'User successfully updated' })\n  @ApiResponse({ status: 400, description: 'Bad request - invalid input data' })\n  @ApiResponse({\n    status: 401,\n    description: 'Unauthorized - invalid credentials',\n  })\n  @ApiResponse({\n    status: 403,\n    description: 'Forbidden - insufficient permissions',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Not found - user or role not found',\n  })\n  @ApiResponse({\n    status: 409,\n    description: 'Conflict - email or username already exists',\n  })\n  @ApiBearerAuth('JWT-auth')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles('admin', 'super_admin')\n  @Post('admin/update-user/:userId')\n  async adminUpdateUser(\n    @Request() req: RequestWithUser,\n    @Param('userId') targetUserId: string,\n    @Body() updateUserDto: AdminUpdateUserDto,\n  ) {\n    // Add null check before converting to number\n    if (!req.user || req.user.sub === undefined || req.user.sub === null) {\n      throw new UnauthorizedException('Invalid admin ID');\n    }\n\n    try {\n      return await this.authService.adminUpdateUser(\n        Number(req.user.sub),\n        Number(targetUserId),\n        updateUserDto,\n      );\n    } catch (error) {\n      throw new UnauthorizedException(\n        error instanceof Error ? error.message : 'Failed to update user',\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nRolesModule\n\nRolesModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nRolesModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RolesModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from '../users/entities/user.entity';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { JwtStrategy } from './jwt.strategy';\nimport { ConfigService } from '@nestjs/config';\nimport { RolesModule } from '../roles/roles.module';\n\n@Module({\n  imports: [\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.registerAsync({\n      inject: [ConfigService],\n      useFactory: (config: ConfigService) => {\n        return {\n          secret: config.get('JWT_SECRET'),\n          signOptions: { expiresIn: '1d' },\n        };\n      },\n    }),\n    TypeOrmModule.forFeature([User]),\n    RolesModule,\n  ],\n  providers: [AuthService, JwtStrategy],\n  controllers: [AuthController],\n  exports: [AuthService, JwtStrategy, PassportModule],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                adminUpdateUser\n                            \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Private\n                                isValidEmail\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                updateUserInfo\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, jwtService: JwtService, rolesService: RolesService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        rolesService\n                                                  \n                                                        \n                                                                        RolesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        adminUpdateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    adminUpdateUser(adminId: number, targetUserId: number, updateUserDto: AdminUpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:372\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                adminId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                targetUserId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            AdminUpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:210\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isValidEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    isValidEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:205\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(registerDto: RegisterDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:104\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                registerDto\n                                            \n                                                            RegisterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateUserInfo\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUserInfo(userId: number, updateUserDto: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:238\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(loginDto: LoginDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  UnauthorizedException,\n  ConflictException,\n  BadRequestException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from '../users/entities/user.entity';\nimport * as bcrypt from 'bcrypt';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { RolesService } from '../roles/roles.service';\nimport { UpdateUserDto, AdminUpdateUserDto } from './dto/update-user.dto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n    private jwtService: JwtService,\n    private rolesService: RolesService,\n  ) {}\n\n  async validateUser(loginDto: LoginDto): Promise {\n    const user = await this.usersRepository.findOne({\n      where: [\n        { email: loginDto.emailOrUsername },\n        { username: loginDto.emailOrUsername },\n      ],\n    });\n    if (user && (await bcrypt.compare(loginDto.password, user.password))) {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { password: __password, ...result } = user;\n      return result;\n    }\n    return null;\n  }\n\n  async login(loginDto: LoginDto) {\n    console.log('Login attempt with:', loginDto);\n\n    try {\n      const user = await this.usersRepository.findOne({\n        where: [\n          { email: loginDto.emailOrUsername },\n          { username: loginDto.emailOrUsername },\n        ],\n        relations: ['defaultRole'],\n      });\n\n      console.log('User found:', user ? 'Yes' : 'No');\n\n      if (!user) {\n        throw new UnauthorizedException('Invalid email or password');\n      }\n\n      // Debug password check\n      console.log('Stored password hash:', user.password);\n      console.log('Comparing with:', loginDto.password);\n\n      const isPasswordValid = await bcrypt.compare(\n        loginDto.password,\n        user.password,\n      );\n      console.log('Password valid:', isPasswordValid);\n\n      if (!isPasswordValid) {\n        throw new UnauthorizedException('Invalid email or password');\n      }\n\n      // Get user roles\n      const roles = await this.rolesService.getUserRoles(user.id);\n      const roleNames = roles.map((role) => role.name);\n\n      const payload = {\n        sub: user.id,\n        email: user.email,\n        roles: roleNames,\n      };\n\n      const token = this.jwtService.sign(payload);\n      console.log('Generated token:', token ? 'Success' : 'Failed');\n\n      // Remove password from response\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { password: __password, ...userWithoutPassword } = user;\n\n      return {\n        access_token: token,\n        user: {\n          ...userWithoutPassword,\n          roles: roleNames,\n          defaultRole: user.defaultRole?.name || 'citizen',\n        },\n      };\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  }\n\n  async register(registerDto: RegisterDto) {\n    const {\n      email,\n      username,\n      password,\n      firstName,\n      middleName,\n      lastName,\n      nameExtension,\n      contactNumber,\n    } = registerDto;\n\n    // Generate full name\n    const name = `${firstName} ${middleName ? middleName + ' ' : ''}${lastName}${nameExtension ? ' ' + nameExtension : ''}`;\n\n    // Validate email format\n    if (!this.isValidEmail(email)) {\n      throw new BadRequestException('Invalid email format');\n    }\n\n    // Check if user exists by email\n    const existingUserByEmail = await this.usersRepository.findOne({\n      where: { email },\n    });\n    if (existingUserByEmail) {\n      throw new ConflictException('Email already exists');\n    }\n\n    // Check if username is taken\n    if (username) {\n      const existingUserByUsername = await this.usersRepository.findOne({\n        where: { username },\n      });\n      if (existingUserByUsername) {\n        throw new ConflictException('Username already exists');\n      }\n    }\n\n    // Validate password strength\n    if (password.length  role.name);\n\n    // Remove password from response\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { password: __password, ...result } = user;\n    return {\n      ...result,\n      roles: roleNames,\n      defaultRole: user.defaultRole?.name || 'citizen',\n    };\n  }\n\n  async updateUserInfo(userId: number, updateUserDto: UpdateUserDto) {\n    try {\n      // First get the existing user\n      const user = await this.usersRepository.findOne({\n        where: { id: userId },\n      });\n\n      if (!user) {\n        throw new UnauthorizedException('User not found');\n      }\n\n      // Check if email is being updated and not already taken\n      if (updateUserDto.email && updateUserDto.email !== user.email) {\n        // Validate email format\n        if (!this.isValidEmail(updateUserDto.email)) {\n          throw new BadRequestException('Invalid email format');\n        }\n\n        const existingUserByEmail = await this.usersRepository.findOne({\n          where: { email: updateUserDto.email },\n        });\n\n        if (existingUserByEmail && existingUserByEmail.id !== userId) {\n          throw new ConflictException('Email already exists');\n        }\n      }\n\n      // Check if username is being updated and not already taken\n      if (updateUserDto.username && updateUserDto.username !== user.username) {\n        const existingUserByUsername = await this.usersRepository.findOne({\n          where: { username: updateUserDto.username },\n        });\n\n        if (existingUserByUsername && existingUserByUsername.id !== userId) {\n          throw new ConflictException('Username already exists');\n        }\n      }\n\n      // Handle password change if provided\n      if (updateUserDto.password) {\n        // Validate password strength\n        if (updateUserDto.password.length  role.name);\n\n        // Remove password from response\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { password: __password, ...result } = updatedUser;\n\n        return {\n          ...result,\n          roles: roleNames,\n          defaultRole: updatedUser.defaultRole?.name || 'citizen',\n        };\n      } catch (error) {\n        console.error('User update database error:', error);\n        if (error.code === 'ER_DUP_ENTRY') {\n          throw new ConflictException('Email or username already exists');\n        }\n        throw new BadRequestException('Failed to update user information in database');\n      }\n    } catch (error) {\n      console.error('User update error:', error);\n      // Re-throw specific errors\n      if (error instanceof UnauthorizedException || \n          error instanceof BadRequestException || \n          error instanceof ConflictException) {\n        throw error;\n      }\n      // For any other unexpected error\n      throw new BadRequestException('Failed to update user information');\n    }\n  }\n  async adminUpdateUser(\n    adminId: number,\n    targetUserId: number,\n    updateUserDto: AdminUpdateUserDto,\n  ) {\n    console.log(\n      `Admin ${adminId} attempting to update user ${targetUserId}`,\n      updateUserDto,\n    );\n\n    try {\n      // Verify the admin has proper permissions\n      const admin = await this.usersRepository.findOne({\n        where: { id: adminId },\n      });\n\n      if (!admin) {\n        throw new UnauthorizedException('Admin not found');\n      }\n\n      // Get admin roles\n      const adminRoles = await this.rolesService.getUserRoles(adminId);\n      const adminRoleNames = adminRoles.map((role) => role.name);\n\n      // Check if the user has admin or super_admin role\n      const isAuthorized = adminRoleNames.some(\n        (role) => role === 'admin' || role === 'super_admin',\n      );\n\n      if (!isAuthorized) {\n        throw new UnauthorizedException('Insufficient permissions');\n      }\n\n      // Check if target user exists\n      const targetUser = await this.usersRepository.findOne({\n        where: { id: targetUserId },\n      });\n\n      if (!targetUser) {\n        throw new BadRequestException(`User with ID ${targetUserId} not found`);\n      }\n\n      // First perform the basic user update\n      // We'll catch any errors here to handle them appropriately\n      let basicUpdate;\n      try {\n        basicUpdate = await this.updateUserInfo(targetUserId, updateUserDto);\n      } catch (error) {\n        console.error('Error during basic user update:', error);\n        throw error; // Re-throw to be caught by outer try-catch\n      }\n\n      // Handle role updates if provided\n      if (updateUserDto.roleIds && updateUserDto.roleIds.length > 0) {\n        try {\n          // Verify all roles exist before assigning\n          for (const roleId of updateUserDto.roleIds) {\n            try {\n              await this.rolesService.findOne(roleId);\n            } catch (error) {\n              throw new BadRequestException(`Role with ID ${roleId} not found`);\n            }\n          }\n\n          // Assign roles\n          await this.rolesService.assignRolesToUser(\n            targetUserId,\n            updateUserDto.roleIds,\n          );\n          console.log(\n            `Assigned roles ${updateUserDto.roleIds.join(', ')} to user ${targetUserId}`,\n          );\n        } catch (error) {\n          console.error('Error assigning roles:', error);\n          throw new BadRequestException(\n            error instanceof Error ? error.message : 'Failed to assign roles',\n          );\n        }\n      }\n\n      // Update default role if provided\n      if (updateUserDto.defaultRoleId) {\n        try {\n          // Verify the role exists\n          try {\n            await this.rolesService.findOne(updateUserDto.defaultRoleId);\n          } catch (error) {\n            throw new BadRequestException(\n              `Default role with ID ${updateUserDto.defaultRoleId} not found`,\n            );\n          }\n\n          // Verify user has this role assigned or will have it assigned \n          const userRoles = await this.rolesService.getUserRoles(targetUserId);\n          const hasRoleAssigned = userRoles.some(\n            (role) => role.id === updateUserDto.defaultRoleId,\n          );\n          \n          const willBeAssigned = updateUserDto.roleIds && \n            updateUserDto.roleIds.includes(updateUserDto.defaultRoleId);\n\n          if (!hasRoleAssigned && !willBeAssigned) {\n            throw new BadRequestException(\n              'Cannot set default role to a role the user does not have',\n            );\n          }\n\n          // Update the default role\n          await this.usersRepository.update(targetUserId, {\n            defaultRoleId: updateUserDto.defaultRoleId,\n          });\n          console.log(\n            `Updated default role to ${updateUserDto.defaultRoleId} for user ${targetUserId}`,\n          );\n        } catch (error) {\n          console.error('Error updating default role:', error);\n          throw new BadRequestException(\n            error instanceof Error\n              ? error.message\n              : 'Failed to update default role',\n          );\n        }\n      }\n\n      // Return the fully updated user\n      try {\n        const updatedUser = await this.getProfile(targetUserId);\n        return updatedUser;\n      } catch (error) {\n        console.error('Error retrieving updated user profile:', error);\n        throw new BadRequestException('User was updated but profile could not be retrieved');\n      }\n    } catch (error) {\n      console.error('Admin update user error:', error);\n      \n      // Re-throw specific exceptions\n      if (error instanceof UnauthorizedException || \n          error instanceof BadRequestException || \n          error instanceof ConflictException) {\n        throw error;\n      }\n      \n      // For any other errors\n      throw new BadRequestException(\n        'Failed to update user: Unexpected error occurred'\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Counter.html":{"url":"entities/Counter.html","title":"entity - Counter","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Counter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/counter/entities/counter.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                currentQueue\n                            \n                            \n                                    \n                                currentQueueId\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        currentQueue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Queue | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, queue => queue.counter, {nullable: true})@JoinColumn({name: 'current_queue_id', foreignKeyConstraintName: 'fk_current_queue'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        currentQueueId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'current_queue_id', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CounterStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: CounterStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:28\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  OneToOne,\n  JoinColumn,\n} from 'typeorm';\nimport { Queue } from '../../queue/entities/queue.entity';\n\nexport enum CounterStatus {\n  ACTIVE = 'active',\n  INACTIVE = 'inactive',\n}\n\n@Entity('counters')\nexport class Counter {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  name: string;\n\n  @Column({\n    type: 'enum',\n    enum: CounterStatus,\n    default: CounterStatus.ACTIVE,\n  })\n  status: CounterStatus;\n\n  @Column({ name: 'current_queue_id', nullable: true })\n  currentQueueId: number | null;\n\n  @OneToOne(() => Queue, (queue) => queue.counter, { nullable: true })\n  @JoinColumn({\n    name: 'current_queue_id',\n    foreignKeyConstraintName: 'fk_current_queue',\n  })\n  currentQueue: Queue | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateQueueDto.html":{"url":"classes/CreateQueueDto.html","title":"class - CreateQueueDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateQueueDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/dto/create-queue.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                    \n                                    \n                                appointmentType\n                            \n                            \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                isGuest\n                            \n                            \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                middleInitial\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                phoneNumber\n                            \n                            \n                                    \n                                    \n                                reasonOfVisit\n                            \n                            \n                                    \n                                    Optional\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        appointmentType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        isGuest\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        middleInitial\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        reasonOfVisit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsOptional, IsNotEmpty, IsBoolean } from 'class-validator';\n\nexport class CreateQueueDto {\n  @IsOptional()\n  userId?: number | string;\n\n  @IsString()\n  @IsNotEmpty()\n  firstName: string;\n\n  @IsString()\n  @IsNotEmpty()\n  lastName: string;\n\n  @IsString()\n  @IsOptional()\n  middleInitial?: string;\n\n  @IsString()\n  @IsOptional()\n  address?: string;\n\n  @IsString()\n  @IsOptional()\n  phoneNumber?: string;\n\n  @IsString()\n  @IsNotEmpty()\n  reasonOfVisit: string;\n\n  @IsString()\n  @IsNotEmpty()\n  appointmentType: string;\n\n  @IsBoolean()\n  @IsOptional()\n  isGuest?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            roles\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        roles:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\n\ninterface JwtPayload {\n  sub: number;\n  email: string;\n  roles?: string[];\n}\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private configService: ConfigService) {\n    const secretKey = configService.get('JWT_SECRET');\n\n    if (!secretKey) {\n      throw new Error('JWT_SECRET is not defined in environment variables');\n    }\n\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: secretKey,\n    });\n  }\n\n  validate(payload: JwtPayload): JwtPayload {\n    // Validation for the payload\n    if (!payload || payload.sub === undefined || isNaN(Number(payload.sub))) {\n      throw new UnauthorizedException('Invalid token payload');\n    }\n\n    const userId = Number(payload.sub);\n    const email = String(payload.email || '');\n    const roles = Array.isArray(payload.roles) ? payload.roles : [];\n\n    return { sub: userId, email, roles };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(payload: JwtPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            JwtPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         JwtPayload\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\n\ninterface JwtPayload {\n  sub: number;\n  email: string;\n  roles?: string[];\n}\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private configService: ConfigService) {\n    const secretKey = configService.get('JWT_SECRET');\n\n    if (!secretKey) {\n      throw new Error('JWT_SECRET is not defined in environment variables');\n    }\n\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: secretKey,\n    });\n  }\n\n  validate(payload: JwtPayload): JwtPayload {\n    // Validation for the payload\n    if (!payload || payload.sub === undefined || isNaN(Number(payload.sub))) {\n      throw new UnauthorizedException('Invalid token payload');\n    }\n\n    const userId = Number(payload.sub);\n    const email = String(payload.email || '');\n    const roles = Array.isArray(payload.roles) ? payload.roles : [];\n\n    return { sub: userId, email, roles };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for user login\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                emailOrUsername\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        emailOrUsername\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Email or username for login', example: 'test@example.com'})@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Test User password', example: 'password123'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\n/**\n * DTO for user login\n * @class LoginDto\n */\n\nexport class LoginDto {\n  @ApiProperty({\n    description: 'Email or username for login',\n    example: 'test@example.com',\n  })\n  @IsNotEmpty()\n  emailOrUsername: string;\n\n  @ApiProperty({\n    description: 'Test User password',\n    example: 'password123',\n  })\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Queue.html":{"url":"entities/Queue.html","title":"entity - Queue","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Queue\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/entities/queue.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                completedAt\n                            \n                            \n                                    \n                                counter\n                            \n                            \n                                    \n                                counterNumber\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                details\n                            \n                            \n                                    \n                                estimatedWaitTime\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                queueNumber\n                            \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        completedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'completed_at', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        counter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Counter\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, counter => counter.currentQueue, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        counterNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'counter_number', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        details\n                        \n                    \n                \n            \n                \n                    \n                        Type :     QueueDetails[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, details => details.queue)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        estimatedWaitTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'estimated_wait_time', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        queueNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'queue_number', unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueueStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: QueueStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:32\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  OneToMany,\n  CreateDateColumn,\n  OneToOne,\n} from 'typeorm';\nimport { QueueDetails } from './queue-details.entity';\nimport { Counter } from '../../counter/entities/counter.entity';\n\nexport enum QueueStatus {\n  PENDING = 'pending',\n  SERVING = 'serving',\n  COMPLETED = 'completed',\n  CANCELLED = 'cancelled',\n}\n\n@Entity('queues')\nexport class Queue {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ name: 'queue_number', unique: true })\n  queueNumber: string;\n\n  @Column({\n    type: 'enum',\n    enum: QueueStatus,\n    default: QueueStatus.PENDING,\n  })\n  status: QueueStatus;\n\n  @Column({ name: 'counter_number', nullable: true })\n  counterNumber: string;\n\n  @CreateDateColumn({ name: 'created_at' })\n  createdAt: Date;\n\n  @Column({ name: 'completed_at', nullable: true })\n  completedAt: Date;\n\n  @Column({ name: 'estimated_wait_time', nullable: true })\n  estimatedWaitTime: number;\n\n  @OneToMany(() => QueueDetails, (details) => details.queue)\n  details: QueueDetails[];\n\n  @OneToOne(() => Counter, (counter) => counter.currentQueue, {\n    nullable: true,\n  })\n  counter: Counter;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/QueueController.html":{"url":"controllers/QueueController.html","title":"controller - QueueController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  QueueController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/queue.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                queue\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                addCounter\n                            \n                            \n                                    \n                                callNext\n                            \n                            \n                                    \n                                    Async\n                                checkQueueExists\n                            \n                            \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findByQueueNumber\n                            \n                            \n                                    \n                                findByStatus\n                            \n                            \n                                    \n                                findCompleted\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                findPending\n                            \n                            \n                                    \n                                findPendingWithDetails\n                            \n                            \n                                    \n                                findServing\n                            \n                            \n                                    \n                                findServingWithDetails\n                            \n                            \n                                    \n                                getCounters\n                            \n                            \n                                    \n                                getDetailsForMultipleQueues\n                            \n                            \n                                    \n                                getQueueDetails\n                            \n                            \n                                    \n                                getQueuePosition\n                            \n                            \n                                    \n                                getStats\n                            \n                            \n                                    \n                                update\n                            \n                            \n                                    \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        addCounter\n                        \n                    \n                \n            \n            \n                \n                        \n                    addCounter(data: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('counter')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:144\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        callNext\n                        \n                    \n                \n            \n            \n                \n                        \n                    callNext(counterId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('counter/:counterId/call-next')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:139\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                counterId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        checkQueueExists\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkQueueExists(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/exists')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:154\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(req, createQueueDto: CreateQueueDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(JwtAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createQueueDto\n                                            \n                                                            CreateQueueDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:42\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findByQueueNumber\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByQueueNumber(queueNumber: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('number/:queueNumber')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:119\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueNumber\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findByStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByStatus(status: QueueStatus)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('status/:status')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            QueueStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findCompleted\n                        \n                    \n                \n            \n            \n                \n                        \n                    findCompleted()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('completed')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:62\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:114\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findPending\n                        \n                    \n                \n            \n            \n                \n                        \n                    findPending()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('pending')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:52\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findPendingWithDetails\n                        \n                    \n                \n            \n            \n                \n                        \n                    findPendingWithDetails()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('pending/details')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:68\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findServing\n                        \n                    \n                \n            \n            \n                \n                        \n                    findServing()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('serving')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:57\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findServingWithDetails\n                        \n                    \n                \n            \n            \n                \n                        \n                    findServingWithDetails()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('serving/details')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:74\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getCounters\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCounters()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('counters')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:149\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getDetailsForMultipleQueues\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDetailsForMultipleQueues(body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('bulk-details')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:80\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getQueueDetails\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQueueDetails(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/details')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:124\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getQueuePosition\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQueuePosition(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/position')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:129\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('stats')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:109\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateQueueDto: UpdateQueueDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:134\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateQueueDto\n                                            \n                                                            UpdateQueueDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(id: string, body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/status')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  //Delete, // Uncomment if you want to implement delete functionality\n  Request,\n  UseGuards,\n} from '@nestjs/common';\nimport { QueueService } from './queue.service';\nimport { CreateQueueDto } from './dto/create-queue.dto';\nimport { UpdateQueueDto } from './dto/update-queue.dto';\nimport { QueueStatus } from './entities/queue.entity';\nimport { JwtAuthGuard } from '../../auth/guards/jwt-auth.guard';\n\n@Controller('queue')\nexport class QueueController {\n  constructor(private readonly queueService: QueueService) {}\n\n  @Post()\n  @UseGuards(JwtAuthGuard)\n  create(@Request() req, @Body() createQueueDto: CreateQueueDto) {\n    // Extract user ID from JWT token if authenticated\n    const userId = req.user?.id || null;\n\n    // Override the userId in the DTO with the authenticated user's ID\n    // This prevents users from creating queues for other users\n    if (userId) {\n      createQueueDto.userId = userId;\n      createQueueDto.isGuest = false;\n    } else {\n      createQueueDto.userId = undefined;\n      createQueueDto.isGuest = true;\n    }\n\n    return this.queueService.create(createQueueDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.queueService.findAll();\n  }\n\n  @Get('status/:status')\n  findByStatus(@Param('status') status: QueueStatus) {\n    return this.queueService.findByStatus(status);\n  }\n\n  @Get('pending')\n  findPending() {\n    return this.queueService.findByStatus(QueueStatus.PENDING);\n  }\n\n  @Get('serving')\n  findServing() {\n    return this.queueService.findByStatus(QueueStatus.SERVING);\n  }\n\n  @Get('completed')\n  findCompleted() {\n    return this.queueService.findByStatus(QueueStatus.COMPLETED);\n  }\n\n  // Endpoint for pending queues with details\n  @Get('pending/details')\n  findPendingWithDetails() {\n    return this.queueService.findByStatusWithDetails(QueueStatus.PENDING);\n  }\n\n  // Endpoint for serving queues with details\n  @Get('serving/details')\n  findServingWithDetails() {\n    return this.queueService.findByStatusWithDetails(QueueStatus.SERVING);\n  }\n\n  // Endpoint for bulk fetching queue details\n  @Post('bulk-details')\n  getDetailsForMultipleQueues(@Body() body: { queueIds: number[] }) {\n    return this.queueService.getDetailsForMultipleQueues(body.queueIds);\n  }\n  // Endpoint for updating queue status\n  @Patch(':id/status')\n  async updateStatus(@Param('id') id: string, @Body() body: { status: QueueStatus }) {\n    console.log(`PATCH /queue/${id}/status with body:`, body);\n    \n    try {\n      // Validate the status enum value\n      if (!Object.values(QueueStatus).includes(body.status)) {\n        console.error(`Invalid status value: ${body.status}`);\n        return { \n          error: 'Invalid status value',\n          validValues: Object.values(QueueStatus)\n        };\n      }\n      \n      // Update the queue status\n      const result = await this.queueService.update(+id, { status: body.status });\n      console.log(`Queue ${id} status updated successfully to ${body.status}`);\n      return result;\n    } catch (error) {\n      console.error(`Error updating queue ${id} status:`, error);\n      throw error;\n    }\n  }\n\n  @Get('stats')\n  getStats() {\n    return this.queueService.getStats();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.queueService.findOne(+id);\n  }\n\n  @Get('number/:queueNumber')\n  findByQueueNumber(@Param('queueNumber') queueNumber: string) {\n    return this.queueService.findByQueueNumber(queueNumber);\n  }\n\n  @Get(':id/details')\n  getQueueDetails(@Param('id') id: string) {\n    return this.queueService.getQueueDetails(+id);\n  }\n\n  @Get(':id/position')\n  getQueuePosition(@Param('id') id: string) {\n    return this.queueService.getQueuePosition(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateQueueDto: UpdateQueueDto) {\n    return this.queueService.update(+id, updateQueueDto);\n  }\n\n  @Post('counter/:counterId/call-next')\n  callNext(@Param('counterId') counterId: string) {\n    return this.queueService.callNext(+counterId);\n  }\n\n  @Post('counter')\n  addCounter(@Body() data: { name: string }) {\n    return this.queueService.addCounter(data.name);\n  }\n\n  @Get('counters')\n  getCounters() {\n    return this.queueService.getCounters();\n  }\n\n  @Get(':id/exists')\n  async checkQueueExists(@Param('id') id: string) {\n    try {\n      const exists = await this.queueService.checkExists(+id);\n      return { exists };\n    } catch (error) {\n      console.error(`Error checking if queue ${id} exists:`, error);\n      return { exists: false };\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/QueueDetails.html":{"url":"entities/QueueDetails.html","title":"entity - QueueDetails","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  QueueDetails\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/entities/queue-details.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                address\n                            \n                            \n                                    \n                                appointmentType\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isGuest\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                middleInitial\n                            \n                            \n                                    \n                                phoneNumber\n                            \n                            \n                                    \n                                    \n                                queue\n                            \n                            \n                                    \n                                queueId\n                            \n                            \n                                    \n                                reasonOfVisit\n                            \n                            \n                                    \n                                    \n                                user\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        appointmentType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'appointment_type'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'first_name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isGuest\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'is_guest', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'last_name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        middleInitial\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'middle_initial', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'phone_number', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        queue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Queue\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, queue => queue.details, {onDelete: 'CASCADE'})@JoinColumn({name: 'queue_id', foreignKeyConstraintName: 'fk_queue_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        queueId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'queue_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reasonOfVisit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'reason_of_visit'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {onDelete: 'SET NULL', nullable: true})@JoinColumn({name: 'user_id', foreignKeyConstraintName: 'fk_user_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'user_id', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:24\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  JoinColumn,\n} from 'typeorm';\nimport { Queue } from './queue.entity';\nimport { User } from '../../../users/entities/user.entity';\n\n@Entity('queue_details')\nexport class QueueDetails {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ name: 'queue_id' })\n  queueId: number;\n\n  @ManyToOne(() => Queue, (queue) => queue.details, { onDelete: 'CASCADE' })\n  @JoinColumn({ name: 'queue_id', foreignKeyConstraintName: 'fk_queue_id' })\n  queue: Queue;\n\n  @Column({ name: 'user_id', nullable: true })\n  userId: number;\n\n  @ManyToOne(() => User, { onDelete: 'SET NULL', nullable: true })\n  @JoinColumn({ name: 'user_id', foreignKeyConstraintName: 'fk_user_id' })\n  user: User;\n\n  @Column({ name: 'first_name' })\n  firstName: string;\n\n  @Column({ name: 'last_name' })\n  lastName: string;\n\n  @Column({ name: 'middle_initial', nullable: true })\n  middleInitial: string;\n\n  @Column({ nullable: true })\n  address: string;\n\n  @Column({ name: 'phone_number', nullable: true })\n  phoneNumber: string;\n\n  @Column({ name: 'reason_of_visit' })\n  reasonOfVisit: string;\n\n  @Column({ name: 'appointment_type' })\n  appointmentType: string;\n\n  @Column({ name: 'is_guest', default: false })\n  isGuest: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QueueGateway.html":{"url":"classes/QueueGateway.html","title":"class - QueueGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QueueGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/queue.gateway.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        OnGatewayConnection\n                        OnGatewayDisconnect\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleConnection\n                            \n                            \n                                handleDisconnect\n                            \n                            \n                                    \n                                    Async\n                                handleGetQueuePosition\n                            \n                            \n                                    \n                                    Async\n                                handleJoinCounter\n                            \n                            \n                                    \n                                    Async\n                                handleJoinQueue\n                            \n                            \n                                    \n                                    Async\n                                handleJoinQueueUpdates\n                            \n                            \n                                notifyCounterUpdate\n                            \n                            \n                                notifyQueueUpdate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(queueService: QueueService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/queue/queue.gateway.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        queueService\n                                                  \n                                                        \n                                                                        QueueService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(QueueGateway.name)\n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/queue.gateway.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/queue.gateway.ts:24\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handleConnection\n                        \n                    \n                \n            \n            \n                \nhandleConnection(client: Socket)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleDisconnect\n                        \n                    \n                \n            \n            \n                \nhandleDisconnect(client: Socket)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleGetQueuePosition\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleGetQueuePosition(client: Socket, queueId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('getQueuePosition')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleJoinCounter\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleJoinCounter(client: Socket, counterId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('joinCounter')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                counterId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleJoinQueue\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleJoinQueue(client: Socket, queueId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('joinQueue')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleJoinQueueUpdates\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleJoinQueueUpdates(client: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('join_queue_updates')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notifyCounterUpdate\n                        \n                    \n                \n            \n            \n                \nnotifyCounterUpdate(counterId: number, data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                counterId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notifyQueueUpdate\n                        \n                    \n                \n            \n            \n                \nnotifyQueueUpdate(queueId: number, data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  WebSocketGateway,\n  WebSocketServer,\n  SubscribeMessage,\n  OnGatewayConnection,\n  OnGatewayDisconnect,\n} from '@nestjs/websockets';\nimport { Server, Socket } from 'socket.io';\nimport { QueueService } from './queue.service';\nimport { Logger, Inject, forwardRef } from '@nestjs/common';\n\n@WebSocketGateway({\n  cors: {\n    origin: 'http://localhost:5173', // Match your app's CORS setting\n    methods: ['GET', 'POST'],\n    credentials: true,\n  },\n  namespace: 'socket.io', // Add this to match client expectation\n})\nexport class QueueGateway implements OnGatewayConnection, OnGatewayDisconnect {\n  private readonly logger = new Logger(QueueGateway.name);\n\n  @WebSocketServer()\n  server: Server;\n\n  constructor(\n    @Inject(forwardRef(() => QueueService))\n    private readonly queueService: QueueService,\n  ) {}\n\n  handleConnection(client: Socket) {\n    this.logger.log(`Client connected: ${client.id}`);\n  }\n\n  handleDisconnect(client: Socket) {\n    this.logger.log(`Client disconnected: ${client.id}`);\n  }\n\n  @SubscribeMessage('joinQueue')\n  async handleJoinQueue(client: Socket, queueId: number) {\n    await client.join(`queue_${queueId}`);\n    const queueData = await this.queueService.getQueueDetails(queueId);\n    return queueData;\n  }\n\n  @SubscribeMessage('getQueuePosition')\n  async handleGetQueuePosition(client: Socket, queueId: number) {\n    const position = await this.queueService.getQueuePosition(queueId);\n    return { position };\n  }\n\n  @SubscribeMessage('joinCounter')\n  async handleJoinCounter(client: Socket, counterId: number) {\n    await client.join(`counter_${counterId}`);\n    return { success: true };\n  }\n\n  @SubscribeMessage('join_queue_updates')\n  async handleJoinQueueUpdates(client: Socket) {\n    this.logger.log(`Socket ${client.id} joined queue updates`);\n    await client.join('queue_updates');\n    return { event: 'joined', data: 'Successfully joined queue updates' };\n  }\n\n  // Send updates to all clients or specific rooms\n  notifyQueueUpdate(queueId: number, data: any) {\n    void this.server.to(`queue_${queueId}`).emit('queueUpdate', data);\n    void this.server.emit('queueListUpdate'); // Global queue update\n  }\n\n  notifyCounterUpdate(counterId: number, data: any) {\n    void this.server.to(`counter_${counterId}`).emit('counterUpdate', data);\n    void this.server.emit('counterListUpdate'); // Global counter update\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/QueueModule.html":{"url":"modules/QueueModule.html","title":"module - QueueModule","body":"\n                   \n\n\n\n\n    Modules\n    QueueModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_QueueModule\n\n\n\ncluster_QueueModule_exports\n\n\n\ncluster_QueueModule_providers\n\n\n\n\nQueueGateway \n\nQueueGateway \n\n\n\nQueueService \n\nQueueService \n\n\n\nQueueModule\n\nQueueModule\n\nQueueGateway  -->\n\nQueueModule->QueueGateway \n\n\n\nQueueService  -->\n\nQueueModule->QueueService \n\n\n\n\n\nQueueService\n\nQueueService\n\nQueueModule -->\n\nQueueService->QueueModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/queue/queue.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            QueueService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            QueueController\n                        \n                        \n                            QueuesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            QueueGateway\n                        \n                        \n                            QueueService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {\n  Module,\n  //forwardRef, // Uncomment if you need to use forwardRef\n} from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { QueueService } from './queue.service';\nimport { QueueController } from './queue.controller';\nimport { QueuesController } from './queues.controller';\nimport { QueueGateway } from './queue.gateway';\nimport { Queue } from './entities/queue.entity';\nimport { QueueDetails } from './entities/queue-details.entity';\nimport { Counter } from '../counter/entities/counter.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Queue, QueueDetails, Counter])],\n  controllers: [QueueController, QueuesController],\n  providers: [QueueService, QueueGateway],\n  exports: [QueueService, QueueGateway],\n})\nexport class QueueModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QueueService.html":{"url":"injectables/QueueService.html","title":"injectable - QueueService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  QueueService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/queue.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addCounter\n                            \n                            \n                                    Async\n                                callNext\n                            \n                            \n                                    Async\n                                checkExists\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByQueueNumber\n                            \n                            \n                                    Async\n                                findByStatus\n                            \n                            \n                                    Async\n                                findByStatusWithDetails\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getCounters\n                            \n                            \n                                    Async\n                                getDetailsForMultipleQueues\n                            \n                            \n                                    Async\n                                getQueueDetails\n                            \n                            \n                                    Async\n                                getQueuePosition\n                            \n                            \n                                    Async\n                                getStats\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(queueRepository: Repository, queueDetailsRepository: Repository, counterRepository: Repository, queueGateway: QueueGateway)\n                    \n                \n                        \n                            \n                                Defined in src/modules/queue/queue.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        queueRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queueDetailsRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        counterRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queueGateway\n                                                  \n                                                        \n                                                                        QueueGateway\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addCounter\n                        \n                    \n                \n            \n            \n                \n                        \n                    addCounter(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:410\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        callNext\n                        \n                    \n                \n            \n            \n                \n                        \n                    callNext(counterId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:293\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                counterId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        checkExists\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkExists(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:423\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createQueueDto: CreateQueueDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createQueueDto\n                                            \n                                                            CreateQueueDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:110\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByQueueNumber\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByQueueNumber(queueNumber: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:135\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueNumber\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByStatus(status: QueueStatus)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:116\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            QueueStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByStatusWithDetails\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByStatusWithDetails(status: QueueStatus)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:254\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            QueueStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:123\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCounters\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCounters()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:416\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getDetailsForMultipleQueues\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDetailsForMultipleQueues(queueIds: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:222\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueIds\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getQueueDetails\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQueueDetails(queueId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:147\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getQueuePosition\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQueuePosition(queueId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:203\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:363\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateQueueDto: UpdateQueueDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:163\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateQueueDto\n                                            \n                                                            UpdateQueueDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  Inject,\n  forwardRef,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, LessThanOrEqual, In } from 'typeorm';\nimport { Queue, QueueStatus } from './entities/queue.entity';\nimport { QueueDetails } from './entities/queue-details.entity';\nimport {\n  Counter,\n  //CounterStatus, //Uncomment if you need to use CounterStatus\n} from '../counter/entities/counter.entity';\nimport { CreateQueueDto } from './dto/create-queue.dto';\nimport { UpdateQueueDto } from './dto/update-queue.dto';\nimport { QueueGateway } from './queue.gateway';\n\n@Injectable()\nexport class QueueService {\n  constructor(\n    @InjectRepository(Queue)\n    private queueRepository: Repository,\n    @InjectRepository(QueueDetails)\n    private queueDetailsRepository: Repository,\n    @InjectRepository(Counter)\n    private counterRepository: Repository,\n    @Inject(forwardRef(() => QueueGateway))\n    private queueGateway: QueueGateway,\n  ) {}\n\n  async create(createQueueDto: CreateQueueDto) {\n    // Generate a queue number based on date and sequence\n    const today = new Date();\n    const dateStr = `${today.getFullYear()}${String(today.getMonth() + 1).padStart(2, '0')}${String(today.getDate()).padStart(2, '0')}`;\n\n    // Get the count of queues created today to determine the sequence number\n    const todayStart = new Date(today);\n    todayStart.setHours(0, 0, 0, 0);\n\n    const todayCount = await this.queueRepository.count({\n      where: {\n        createdAt: LessThanOrEqual(today),\n      },\n    });\n\n    // Format the queue number: YYYYMMDD-XXXX where XXXX is the sequence number\n    const queueNumber = `${dateStr}-${String(todayCount + 1).padStart(4, '0')}`;\n\n    // Create and save the queue\n    const queue = this.queueRepository.create({\n      queueNumber,\n      status: QueueStatus.PENDING,\n      estimatedWaitTime: 15 * (todayCount + 1), // Simple estimation: 15 minutes per person\n    });\n\n    const savedQueue = await this.queueRepository.save(queue);\n\n    // Simplify the user ID handling - trust what the controller provided\n    const userId =\n      typeof createQueueDto.userId === 'number'\n        ? createQueueDto.userId\n        : typeof createQueueDto.userId === 'string' &&\n            createQueueDto.userId !== 'guest'\n          ? Number(createQueueDto.userId)\n          : undefined;\n\n    const isGuest = createQueueDto.isGuest || !userId;\n\n    // Log for debugging\n    console.log('Creating queue details with:', {\n      providedUserId: createQueueDto.userId,\n      parsedUserId: userId,\n      isGuest,\n    });\n\n    // Create queue details using the simplified userId\n    const queueDetails = this.queueDetailsRepository.create({\n      queueId: savedQueue.id,\n      userId: userId, // Use the simplified userId\n      firstName: createQueueDto.firstName,\n      lastName: createQueueDto.lastName,\n      middleInitial: createQueueDto.middleInitial,\n      address: createQueueDto.address,\n      phoneNumber: createQueueDto.phoneNumber,\n      reasonOfVisit: createQueueDto.reasonOfVisit,\n      appointmentType: createQueueDto.appointmentType,\n      isGuest: isGuest,\n    });\n\n    // Set the queue relation\n    queueDetails.queue = savedQueue;\n\n    await this.queueDetailsRepository.save(queueDetails);\n\n    // Get queue position\n    const position = await this.getQueuePosition(savedQueue.id);\n\n    const result = { queue: savedQueue, details: queueDetails, position };\n\n    // Notify all clients that a new queue has been created\n    this.queueGateway.server.emit('queueListUpdate', {\n      action: 'created',\n      queueId: savedQueue.id,\n    });\n\n    return result;\n  }\n\n  async findAll() {\n    return await this.queueRepository.find({\n      order: { createdAt: 'ASC' },\n    });\n  }\n\n  async findByStatus(status: QueueStatus) {\n    return await this.queueRepository.find({\n      where: { status },\n      order: { createdAt: 'ASC' },\n    });\n  }\n\n  async findOne(id: number) {\n    const queue = await this.queueRepository.findOne({\n      where: { id },\n    });\n\n    if (!queue) {\n      throw new NotFoundException(`Queue #${id} not found`);\n    }\n\n    return queue;\n  }\n\n  async findByQueueNumber(queueNumber: string) {\n    const queue = await this.queueRepository.findOne({\n      where: { queueNumber },\n    });\n\n    if (!queue) {\n      throw new NotFoundException(`Queue #${queueNumber} not found`);\n    }\n\n    return queue;\n  }\n\n  async getQueueDetails(queueId: number) {\n    const queue = await this.findOne(queueId);\n\n    const details = await this.queueDetailsRepository.findOne({\n      where: { queueId },\n      relations: ['user'],\n    });\n\n    if (!details) {\n      throw new NotFoundException(`Details for queue #${queueId} not found`);\n    }\n\n    const position = await this.getQueuePosition(queueId);\n\n    return { queue, details, position };\n  }\n  async update(id: number, updateQueueDto: UpdateQueueDto) {\n    console.log(`Updating queue ${id} with:`, updateQueueDto);\n    \n    try {\n      // Find the queue\n      const queue = await this.findOne(id);\n      console.log('Found queue:', queue);\n\n      if (updateQueueDto.status) {\n        // Log the status change\n        console.log(`Changing status from ${queue.status} to ${updateQueueDto.status}`);\n        queue.status = updateQueueDto.status;\n\n        // If completed, set completion time\n        if (updateQueueDto.status === QueueStatus.COMPLETED) {\n          queue.completedAt = new Date();\n        }\n      }\n\n      if (updateQueueDto.counterNumber) {\n        queue.counterNumber = updateQueueDto.counterNumber;\n      }\n\n      // Save the updated queue\n      const updatedQueue = await this.queueRepository.save(queue);\n      console.log('Queue updated successfully:', updatedQueue);\n\n      // Notify clients about the queue update\n      this.queueGateway.notifyQueueUpdate(id, {\n        action: 'updated',\n        queue: updatedQueue,\n      });\n\n      return updatedQueue;\n    } catch (error) {\n      console.error(`Error updating queue ${id}:`, error);\n      throw error;\n    }\n  }\n\n  async getQueuePosition(queueId: number) {\n    const queue = await this.findOne(queueId);\n\n    // If the queue is not pending, it's not in line\n    if (queue.status !== QueueStatus.PENDING) {\n      return 0;\n    }\n\n    // Count how many pending queues are ahead of this one\n    const position = await this.queueRepository.count({\n      where: {\n        status: QueueStatus.PENDING,\n        createdAt: LessThanOrEqual(queue.createdAt),\n        id: LessThanOrEqual(queueId), // Break ties using ID\n      },\n    });\n\n    return position;\n  }\n  async getDetailsForMultipleQueues(queueIds: number[]) {\n    console.log('Getting details for queue IDs:', queueIds);\n    \n    if (!queueIds || queueIds.length === 0) {\n      return {};\n    }\n\n    const detailsMap = {};\n\n    try {\n      // Fetch all queue details in a single query for better performance\n      const allDetails = await this.queueDetailsRepository.find({\n        where: {\n          queueId: In(queueIds),\n        },\n        relations: ['user'],\n      });\n\n      console.log(`Found ${allDetails.length} details for ${queueIds.length} queues`);\n\n      // Organize by queueId for easy lookup\n      allDetails.forEach((detail) => {\n        detailsMap[detail.queueId] = detail;\n      });\n\n      return detailsMap;\n    } catch (error) {\n      console.error('Error fetching details for multiple queues:', error);\n      // Return empty details rather than failing\n      return {};\n    }\n  }\n  async findByStatusWithDetails(status: QueueStatus) {\n    console.log(`Finding queues with status: ${status} and their details`);\n    \n    try {\n      // First get all queues with this status\n      const queues = await this.queueRepository.find({\n        where: { status },\n        order: { createdAt: 'ASC' },\n      });\n\n      console.log(`Found ${queues.length} queues with status ${status}`);\n      \n      if (queues.length === 0) {\n        return [];\n      }\n\n      // Get all queue IDs\n      const queueIds = queues.map((queue) => queue.id);\n\n      // Fetch details for all these queues\n      const detailsMap = await this.getDetailsForMultipleQueues(queueIds);\n\n      // Combine queue and details data\n      const result = queues.map((queue) => {\n        return {\n          ...queue,\n          details: detailsMap[queue.id] || null,\n        };\n      });\n      \n      console.log(`Returning ${result.length} queues with details`);\n      return result;\n    } catch (error) {\n      console.error(`Error finding queues with status ${status} and details:`, error);\n      // Return empty array rather than failing\n      return [];\n    }\n  }\n\n  async callNext(counterId: number) {\n    const counter = await this.counterRepository.findOne({\n      where: { id: counterId },\n      relations: ['currentQueue'],\n    });\n\n    if (!counter) {\n      throw new NotFoundException(`Counter #${counterId} not found`);\n    }\n\n    // Mark current queue as completed if exists\n    if (counter.currentQueue) {\n      counter.currentQueue.status = QueueStatus.COMPLETED;\n      counter.currentQueue.completedAt = new Date();\n      await this.queueRepository.save(counter.currentQueue);\n    }\n\n    // Find the next pending queue\n    const nextQueue = await this.queueRepository.findOne({\n      where: { status: QueueStatus.PENDING },\n      order: { createdAt: 'ASC' },\n    });\n\n    if (!nextQueue) {\n      counter.currentQueueId = null;\n      counter.currentQueue = null;\n      await this.counterRepository.save(counter);\n      return { counter, message: 'No more queues waiting' };\n    }\n\n    // Update the next queue\n    nextQueue.status = QueueStatus.SERVING;\n    nextQueue.counterNumber = counter.name;\n    await this.queueRepository.save(nextQueue);\n\n    // Update counter\n    counter.currentQueueId = nextQueue.id;\n    counter.currentQueue = nextQueue;\n    await this.counterRepository.save(counter);\n\n    // Get associated details\n    const details = await this.queueDetailsRepository.findOne({\n      where: { queueId: nextQueue.id },\n    });\n\n    const result = {\n      counter,\n      queue: nextQueue,\n      details,\n      message: 'Next queue called successfully',\n    };\n\n    if (nextQueue) {\n      // Notify the specific queue room that it's their turn\n      this.queueGateway.notifyQueueUpdate(nextQueue.id, {\n        action: 'called',\n        counterName: counter.name,\n        counterId: counter.id,\n      });\n    }\n\n    // Notify counter clients\n    this.queueGateway.notifyCounterUpdate(counterId, {\n      action: 'nextCalled',\n      ...result,\n    });\n\n    return result;\n  }\n\n  async getStats() {\n    const [\n      pendingCount,\n      servingCount,\n      completedCount,\n      cancelledCount,\n      totalCount,\n    ] = await Promise.all([\n      this.queueRepository.count({ where: { status: QueueStatus.PENDING } }),\n      this.queueRepository.count({ where: { status: QueueStatus.SERVING } }),\n      this.queueRepository.count({ where: { status: QueueStatus.COMPLETED } }),\n      this.queueRepository.count({ where: { status: QueueStatus.CANCELLED } }),\n      this.queueRepository.count(),\n    ]);\n\n    // Calculate average wait time\n    const completedQueues = await this.queueRepository.find({\n      where: {\n        status: QueueStatus.COMPLETED,\n        completedAt: LessThanOrEqual(new Date()),\n      },\n      select: ['createdAt', 'completedAt'],\n    });\n\n    let averageWaitTime = 0;\n    if (completedQueues.length > 0) {\n      const totalWaitTimeMs = completedQueues.reduce((total, queue) => {\n        return (\n          total + (queue.completedAt.getTime() - queue.createdAt.getTime())\n        );\n      }, 0);\n      averageWaitTime = Math.floor(\n        totalWaitTimeMs / completedQueues.length / 60000,\n      ); // Convert to minutes\n    }\n\n    return {\n      pending: pendingCount,\n      serving: servingCount,\n      completed: completedCount,\n      cancelled: cancelledCount,\n      total: totalCount,\n      averageWaitTime,\n    };\n  }\n\n  // Add a counter\n  async addCounter(name: string) {\n    const counter = this.counterRepository.create({ name });\n    return await this.counterRepository.save(counter);\n  }\n\n  // Get all counters\n  async getCounters() {\n    return await this.counterRepository.find({\n      relations: ['currentQueue'],\n    });\n  }\n\n  // Check if queue exists\n  async checkExists(id: number): Promise {\n    const queue = await this.queueRepository.findOne({\n      where: { id },\n    });\n    return !!queue;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/QueuesController.html":{"url":"controllers/QueuesController.html","title":"controller - QueuesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  QueuesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/queues.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                queues\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                getWalkInQueues\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getWalkInQueues\n                        \n                    \n                \n            \n            \n                \n                        \n                    getWalkInQueues()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('walk-in')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queues.controller.ts:10\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Param, UseGuards } from '@nestjs/common';\nimport { QueueService } from './queue.service';\nimport { QueueStatus } from './entities/queue.entity';\n\n@Controller('queues')\nexport class QueuesController {\n  constructor(private readonly queueService: QueueService) {}\n  // This endpoint is for supporting the legacy API path that the frontend is using\n  @Get('walk-in') \n  async getWalkInQueues() {\n    console.log('GET /queues/walk-in endpoint called');\n    try {\n      // Get both pending and serving queues with details using the service methods\n      const [pendingQueuesWithDetails, servingQueuesWithDetails] = await Promise.all([\n        this.queueService.findByStatusWithDetails(QueueStatus.PENDING),\n        this.queueService.findByStatusWithDetails(QueueStatus.SERVING)\n      ]);\n\n      console.log('Found pending queues:', pendingQueuesWithDetails.length);\n      console.log('Found serving queues:', servingQueuesWithDetails.length);\n\n      // Combine all queues\n      const allQueues = [...pendingQueuesWithDetails, ...servingQueuesWithDetails];\n\n      // Extract details from the nested structure and flatten them for the frontend\n      const result = allQueues.map(queue => {\n        // For debugging\n        console.log('Processing queue:', queue.id, 'status:', queue.status);\n        \n        // Handle potential null/undefined details\n        const details = Array.isArray(queue.details) ? queue.details[0] : queue.details;\n        \n        return {\n          id: queue.id,\n          queueNumber: queue.queueNumber,\n          status: queue.status,\n          counterNumber: queue.counterNumber,\n          createdAt: queue.createdAt,\n          completedAt: queue.completedAt,\n          estimatedWaitTime: queue.estimatedWaitTime,\n          firstName: details?.firstName || null,\n          lastName: details?.lastName || null,\n          middleInitial: details?.middleInitial || null,\n          reasonOfVisit: details?.reasonOfVisit || null,\n          address: details?.address || null,\n          phoneNumber: details?.phoneNumber || null\n        };\n      });\n\n      console.log(`Returning ${result.length} walk-in queues`);\n      return result;\n    } catch (error) {\n      console.error('Error fetching walk-in queues:', error);\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/register.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for user registration\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                contactNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                middleName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                nameExtension\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        contactNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Contact number', example: '09123456789'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:87\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User email address', example: 'test@example.com'})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User first name', example: 'John'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User last name', example: 'Doe'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User middle name (optional)', example: 'Robert'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Full name (auto-generated)', example: 'John Robert Doe'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        nameExtension\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Name extension (e.g., Jr., III)', example: 'Jr.'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User password (min 8 characters)', example: 'password123', minLength: 8})@IsString()@IsNotEmpty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Username for login', example: 'john_doe'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  MinLength,\n} from 'class-validator';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\n/**\n * DTO for user registration\n * @class RegisterDto\n */\n\nexport class RegisterDto {\n  @ApiProperty({\n    description: 'User email address',\n    example: 'test@example.com',\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @ApiProperty({\n    description: 'Username for login',\n    example: 'john_doe',\n  })\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n\n  @ApiProperty({\n    description: 'User password (min 8 characters)',\n    example: 'password123',\n    minLength: 8,\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  password: string;\n\n  @ApiProperty({\n    description: 'User first name',\n    example: 'John',\n  })\n  @IsString()\n  @IsNotEmpty()\n  firstName: string;\n\n  @ApiPropertyOptional({\n    description: 'User middle name (optional)',\n    example: 'Robert',\n  })\n  @IsString()\n  @IsOptional()\n  middleName?: string;\n\n  @ApiProperty({\n    description: 'User last name',\n    example: 'Doe',\n  })\n  @IsString()\n  @IsNotEmpty()\n  lastName: string;\n\n  @ApiPropertyOptional({\n    description: 'Full name (auto-generated)',\n    example: 'John Robert Doe',\n  })\n  @IsString()\n  @IsOptional()\n  name?: string;\n\n  @ApiPropertyOptional({\n    description: 'Name extension (e.g., Jr., III)',\n    example: 'Jr.',\n  })\n  @IsString()\n  @IsOptional()\n  nameExtension?: string;\n\n  @ApiPropertyOptional({\n    description: 'Contact number',\n    example: '09123456789',\n  })\n  @IsString()\n  contactNumber?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser.html":{"url":"interfaces/RequestWithUser.html","title":"interface - RequestWithUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  Get,\n  UseGuards,\n  Request,\n  UnauthorizedException,\n  Param,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\nimport { UpdateUserDto, AdminUpdateUserDto } from './dto/update-user.dto';\nimport { Roles } from './decorators/roles.decorator';\nimport { RolesGuard } from './guards/roles.guard';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n  ApiParam,\n  ApiBody,\n} from '@nestjs/swagger';\n\ninterface RequestWithUser extends Request {\n  user: { sub: number; email: string; roles: string[] };\n}\n\n@ApiTags('Authentication')\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @ApiOperation({ summary: 'User login' })\n  @ApiResponse({\n    status: 200,\n    description: 'Login successful',\n    schema: {\n      properties: {\n        access_token: { type: 'string' },\n        user: {\n          type: 'object',\n          properties: {\n            id: { type: 'number' },\n            email: { type: 'string' },\n            username: { type: 'string' },\n            roles: { type: 'array', items: { type: 'string' } },\n            defaultRole: { type: 'string' },\n          },\n        },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Unauthorized - invalid credentials',\n  })\n  @ApiBody({ type: LoginDto })\n  @Post('login')\n  async login(@Body() loginDto: LoginDto) {\n    console.log('Login request received:', loginDto);\n    try {\n      const result = await this.authService.login(loginDto);\n      return result;\n    } catch (error) {\n      throw new UnauthorizedException(\n        error instanceof Error ? error.message : 'Invalid credentials',\n      );\n    }\n  }\n\n  @ApiOperation({ summary: 'User registration' })\n  @ApiResponse({\n    status: 201,\n    description: 'Registration successful',\n    schema: {\n      properties: {\n        access_token: { type: 'string' },\n        user: {\n          type: 'object',\n          properties: {\n            id: { type: 'number' },\n            email: { type: 'string' },\n            username: { type: 'string' },\n            roles: { type: 'array', items: { type: 'string' } },\n            defaultRole: { type: 'string' },\n          },\n        },\n      },\n    },\n  })\n  @ApiResponse({ status: 400, description: 'Bad request - invalid data' })\n  @ApiResponse({\n    status: 409,\n    description: 'Conflict - email or username already exists',\n  })\n  @ApiBody({ type: RegisterDto })\n  @Post('register')\n  async register(@Body() registerDto: RegisterDto) {\n    console.log('Register endpoint hit with data:', registerDto); //Debugging Statement\n    return this.authService.register(registerDto);\n  }\n  @ApiOperation({ summary: 'Get user profile' })\n  @ApiResponse({ status: 200, description: 'Profile retrieved successfully' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @ApiBearerAuth('JWT-auth')\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  getProfile(@Request() req: RequestWithUser) {\n    // Add null check before converting to number\n    if (!req.user || req.user.sub === undefined || req.user.sub === null) {\n      throw new UnauthorizedException('Invalid user ID');\n    }\n    return this.authService.getProfile(Number(req.user.sub));\n  }\n  @ApiOperation({\n    summary: 'Update user profile',\n    description: 'Allows a user to update their own profile information',\n  })\n  @ApiResponse({ status: 200, description: 'Profile updated successfully' })\n  @ApiResponse({ status: 400, description: 'Bad request - invalid data' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @ApiResponse({\n    status: 409,\n    description: 'Conflict - email or username already exists',\n  })\n  @ApiBearerAuth('JWT-auth')\n  @ApiBody({ type: UpdateUserDto })\n  @UseGuards(JwtAuthGuard)\n  @Post('update-profile')\n  async updateProfile(\n    @Request() req: RequestWithUser,\n    @Body() updateUserDto: UpdateUserDto,\n  ) {\n    // Add null check before converting to number\n    if (!req.user || req.user.sub === undefined || req.user.sub === null) {\n      throw new UnauthorizedException('Invalid user ID');\n    }\n\n    try {\n      return await this.authService.updateUserInfo(\n        Number(req.user.sub),\n        updateUserDto,\n      );\n    } catch (error) {\n      throw new UnauthorizedException(\n        error instanceof Error ? error.message : 'Failed to update profile',\n      );\n    }\n  }\n  @ApiOperation({\n    summary: 'Admin update user',\n    description:\n      \"Allows administrators to update any user's information including role assignments\",\n  })\n  @ApiParam({ name: 'userId', description: 'ID of the user to update' })\n  @ApiBody({ type: AdminUpdateUserDto })\n  @ApiResponse({ status: 200, description: 'User successfully updated' })\n  @ApiResponse({ status: 400, description: 'Bad request - invalid input data' })\n  @ApiResponse({\n    status: 401,\n    description: 'Unauthorized - invalid credentials',\n  })\n  @ApiResponse({\n    status: 403,\n    description: 'Forbidden - insufficient permissions',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Not found - user or role not found',\n  })\n  @ApiResponse({\n    status: 409,\n    description: 'Conflict - email or username already exists',\n  })\n  @ApiBearerAuth('JWT-auth')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles('admin', 'super_admin')\n  @Post('admin/update-user/:userId')\n  async adminUpdateUser(\n    @Request() req: RequestWithUser,\n    @Param('userId') targetUserId: string,\n    @Body() updateUserDto: AdminUpdateUserDto,\n  ) {\n    // Add null check before converting to number\n    if (!req.user || req.user.sub === undefined || req.user.sub === null) {\n      throw new UnauthorizedException('Invalid admin ID');\n    }\n\n    try {\n      return await this.authService.adminUpdateUser(\n        Number(req.user.sub),\n        Number(targetUserId),\n        updateUserDto,\n      );\n    } catch (error) {\n      throw new UnauthorizedException(\n        error instanceof Error ? error.message : 'Failed to update user',\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser-1.html":{"url":"interfaces/RequestWithUser-1.html","title":"interface - RequestWithUser-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/roles.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ROLES_KEY } from '../decorators/roles.decorator';\n\n// Define interface for request with user\ninterface RequestWithUser extends Request {\n  user?: { roles?: string[] };\n}\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(\n      ROLES_KEY,\n      [context.getHandler(), context.getClass()],\n    );\n\n    if (!requiredRoles) {\n      return true;\n    }\n\n    const request = context.switchToHttp().getRequest();\n    const userRoles = request.user?.roles || [];\n    return requiredRoles.some((role) => userRoles.includes(role));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Role.html":{"url":"entities/Role.html","title":"entity - Role","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Role\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/entities/role.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, user => user.roles)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:16\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, PrimaryGeneratedColumn, ManyToMany } from 'typeorm';\nimport { User } from '../../users/entities/user.entity';\n\n@Entity('roles')\nexport class Role {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true, nullable: false })\n  name: string;\n\n  @Column({ nullable: true })\n  description: string;\n\n  @ManyToMany(() => User, (user) => user.roles)\n  users: User[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RolesController.html":{"url":"controllers/RolesController.html","title":"controller - RolesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RolesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/roles.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                roles\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                getUserRoles\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@Roles('admin', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/roles/roles.controller.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@Roles('admin', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/roles/roles.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getUserRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserRoles(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('user/:userId')@Roles('admin', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/roles/roles.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, UseGuards } from '@nestjs/common';\nimport { RolesService } from './roles.service';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../auth/guards/roles.guard';\nimport { Roles } from '../auth/decorators/roles.decorator';\n\n@Controller('roles')\n@UseGuards(JwtAuthGuard, RolesGuard)\nexport class RolesController {\n  constructor(private readonly rolesService: RolesService) {}\n\n  @Get()\n  @Roles('admin', 'super_admin')\n  findAll() {\n    return this.rolesService.findAll();\n  }\n\n  @Get(':id')\n  @Roles('admin', 'super_admin')\n  findOne(@Param('id') id: string) {\n    return this.rolesService.findOne(+id);\n  }\n\n  @Get('user/:userId')\n  @Roles('admin', 'super_admin')\n  getUserRoles(@Param('userId') userId: string) {\n    return this.rolesService.getUserRoles(+userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/roles.guard.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/roles.guard.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ROLES_KEY } from '../decorators/roles.decorator';\n\n// Define interface for request with user\ninterface RequestWithUser extends Request {\n  user?: { roles?: string[] };\n}\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(\n      ROLES_KEY,\n      [context.getHandler(), context.getClass()],\n    );\n\n    if (!requiredRoles) {\n      return true;\n    }\n\n    const request = context.switchToHttp().getRequest();\n    const userRoles = request.user?.roles || [];\n    return requiredRoles.some((role) => userRoles.includes(role));\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RolesModule.html":{"url":"modules/RolesModule.html","title":"module - RolesModule","body":"\n                   \n\n\n\n\n    Modules\n    RolesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_exports\n\n\n\ncluster_RolesModule_providers\n\n\n\n\nRolesService \n\nRolesService \n\n\n\nRolesModule\n\nRolesModule\n\nRolesService  -->\n\nRolesModule->RolesService \n\n\n\n\n\nRolesService\n\nRolesService\n\nRolesModule -->\n\nRolesService->RolesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/roles/roles.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RolesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RolesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RolesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Role } from './entities/role.entity';\nimport { User } from '../users/entities/user.entity';\nimport { RolesService } from './roles.service';\nimport { RolesController } from './roles.controller';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Role, User])],\n  providers: [RolesService],\n  controllers: [RolesController],\n  exports: [RolesService],\n})\nexport class RolesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RolesService.html":{"url":"injectables/RolesService.html","title":"injectable - RolesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RolesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/roles.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                assignRolesToUser\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByName\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getUserRoles\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(rolesRepository: Repository, usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/roles/roles.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        rolesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        assignRolesToUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    assignRolesToUser(userId: number, roleIds: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roleIds\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByName\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByName(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserRoles(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, In } from 'typeorm';\nimport { Role } from './entities/role.entity';\nimport { User } from '../users/entities/user.entity';\n\n@Injectable()\nexport class RolesService {\n  constructor(\n    @InjectRepository(Role)\n    private rolesRepository: Repository,\n\n    @InjectRepository(User)\n    private usersRepository: Repository,\n  ) {}\n\n  async findAll(): Promise {\n    return this.rolesRepository.find();\n  }\n\n  async findOne(id: number): Promise {\n    const role = await this.rolesRepository.findOne({ where: { id } });\n    if (!role) {\n      throw new NotFoundException(`Role with ID ${id} not found`);\n    }\n    return role;\n  }\n\n  async findByName(name: string): Promise {\n    const role = await this.rolesRepository.findOne({ where: { name } });\n    if (!role) {\n      throw new NotFoundException(`Role with name ${name} not found`);\n    }\n    return role;\n  }\n\n  async getUserRoles(userId: number): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id: userId },\n      relations: ['roles'],\n    });\n    return user ? user.roles : [];\n  }\n\n  async assignRolesToUser(userId: number, roleIds: number[]): Promise {\n    // Find the user\n    const user = await this.usersRepository.findOne({\n      where: { id: userId },\n      relations: ['roles'],\n    });\n\n    if (!user) {\n      throw new Error('User not found');\n    }\n\n    // Find the roles using In operator (replaces deprecated findByIds)\n    const roles = await this.rolesRepository.findBy({\n      id: In(roleIds)\n    });\n\n    // Assign roles to user\n    user.roles = roles;\n    await this.usersRepository.save(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateQueueDto.html":{"url":"classes/UpdateQueueDto.html","title":"class - UpdateQueueDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateQueueDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/dto/update-queue.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                counterNumber\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        counterNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/update-queue.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueueStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(QueueStatus)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/update-queue.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsEnum, IsOptional } from 'class-validator';\nimport { QueueStatus } from '../entities/queue.entity';\n\nexport class UpdateQueueDto {\n  @IsEnum(QueueStatus)\n  @IsOptional()\n  status?: QueueStatus;\n\n  @IsString()\n  @IsOptional()\n  counterNumber?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/update-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for updating user information (citizen)\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                contactNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                middleName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                nameExtension\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Complete address', example: '123 Main St, San Ildefonso, Bulacan'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        contactNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Contact number', example: '09123456789'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User email address', example: 'test@example.com'})@IsEmail()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'First name', example: 'John'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Last name', example: 'Doe'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Middle name', example: 'Robert'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        nameExtension\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Name extension (e.g., Jr., III)', example: 'Jr.'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User password (min 8 characters)', example: 'password123', minLength: 8})@IsString()@IsOptional()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Username', example: 'john_doe'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsOptional,\n  IsString,\n  MinLength,\n  IsNumber,\n  IsArray,\n} from 'class-validator';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\n/**\n * DTO for updating user information (citizen)\n * @class UpdateUserDto\n */\nexport class UpdateUserDto {\n  @ApiPropertyOptional({\n    description: 'User email address',\n    example: 'test@example.com',\n  })\n  @IsEmail()\n  @IsOptional()\n  email?: string;\n\n  @ApiPropertyOptional({ description: 'Username', example: 'john_doe' })\n  @IsString()\n  @IsOptional()\n  username?: string;\n\n  @ApiPropertyOptional({\n    description: 'User password (min 8 characters)',\n    example: 'password123',\n    minLength: 8,\n  })\n  @IsString()\n  @IsOptional()\n  @MinLength(8)\n  password?: string;\n\n  @ApiPropertyOptional({ description: 'First name', example: 'John' })\n  @IsString()\n  @IsOptional()\n  firstName?: string;\n\n  @ApiPropertyOptional({ description: 'Middle name', example: 'Robert' })\n  @IsString()\n  @IsOptional()\n  middleName?: string;\n\n  @ApiPropertyOptional({ description: 'Last name', example: 'Doe' })\n  @IsString()\n  @IsOptional()\n  lastName?: string;\n\n  @ApiPropertyOptional({\n    description: 'Name extension (e.g., Jr., III)',\n    example: 'Jr.',\n  })\n  @IsString()\n  @IsOptional()\n  nameExtension?: string;\n\n  @ApiPropertyOptional({\n    description: 'Contact number',\n    example: '09123456789',\n  })\n  @IsString()\n  @IsOptional()\n  contactNumber?: string;\n\n  @ApiPropertyOptional({\n    description: 'Complete address',\n    example: '123 Main St, San Ildefonso, Bulacan',\n  })\n  @IsString()\n  @IsOptional()\n  address?: string;\n}\n\n/**\n * DTO for admin to update any user\n * @class AdminUpdateUserDto\n */\nexport class AdminUpdateUserDto extends UpdateUserDto {\n  @ApiPropertyOptional({\n    description: 'Default role ID for the user',\n    example: 2,\n  })\n  @IsNumber()\n  @IsOptional()\n  defaultRoleId?: number;\n\n  @ApiPropertyOptional({\n    description: 'Array of role IDs to assign to the user',\n    example: [1, 2],\n    type: [Number],\n  })\n  @IsArray()\n  @IsOptional()\n  roleIds?: number[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                contactNumber\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                defaultRole\n                            \n                            \n                                    \n                                defaultRoleId\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                middleName\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                nameExtension\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                roles\n                            \n                            \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        contactNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'contact_number', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        defaultRole\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {nullable: true})@JoinColumn({name: 'default_role_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        defaultRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'default_role_id', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'first_name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'last_name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'middle_name', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        nameExtension\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'name_extension', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined)@JoinTable({name: 'user_roles', joinColumn: undefined, inverseJoinColumn: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:22\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  ManyToOne,\n  JoinColumn,\n  ManyToMany,\n  JoinTable,\n} from 'typeorm';\nimport { Role } from '../../roles/entities/role.entity';\n\n@Entity('users')\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true })\n  email: string;\n\n  @Column({ unique: true })\n  username: string;\n\n  @Column()\n  password: string;\n\n  @Column({ name: 'first_name' })\n  firstName: string;\n\n  @Column({ name: 'middle_name', nullable: true })\n  middleName: string;\n\n  @Column({ name: 'last_name' })\n  lastName: string;\n\n  @Column()\n  name: string; // Keep for backward compatibility\n\n  @Column({ name: 'name_extension', nullable: true })\n  nameExtension: string;\n\n  @Column({ name: 'contact_number', nullable: true })\n  contactNumber: string;\n\n  @CreateDateColumn({ name: 'created_at' })\n  createdAt: Date;\n\n  @ManyToOne(() => Role, { nullable: true })\n  @JoinColumn({ name: 'default_role_id' })\n  defaultRole: Role;\n\n  @Column({ name: 'default_role_id', nullable: true })\n  defaultRoleId: number;\n\n  @ManyToMany(() => Role)\n  @JoinTable({\n    name: 'user_roles',\n    joinColumn: {\n      name: 'user_id',\n      referencedColumnName: 'id',\n    },\n    inverseJoinColumn: {\n      name: 'role_id',\n      referencedColumnName: 'id',\n    },\n  })\n  roles: Role[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './entities/user.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  exports: [TypeOrmModule],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                        src/auth/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/decorators/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/auth/dto/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                10 %\n                (1/10)\n            \n        \n        \n            \n                \n                src/auth/dto/update-user.dto.ts\n            \n            class\n            AdminUpdateUserDto\n            \n                8 %\n                (1/12)\n            \n        \n        \n            \n                \n                src/auth/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                10 %\n                (1/10)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/roles.guard.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            interface\n            JwtPayload\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/config/database.config.ts\n            \n            variable\n            databaseConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            seedDatabaseIfNeeded\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/counter/entities/counter.entity.ts\n            \n            entity\n            Counter\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/queue/dto/create-queue.dto.ts\n            \n            class\n            CreateQueueDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/queue/dto/update-queue.dto.ts\n            \n            class\n            UpdateQueueDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/queue/entities/queue-details.entity.ts\n            \n            entity\n            QueueDetails\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/queue/entities/queue.entity.ts\n            \n            entity\n            Queue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/queue/queue.controller.ts\n            \n            controller\n            QueueController\n            \n                0 %\n                (0/21)\n            \n        \n        \n            \n                \n                src/modules/queue/queue.gateway.ts\n            \n            class\n            QueueGateway\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/modules/queue/queue.service.ts\n            \n            injectable\n            QueueService\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/modules/queue/queues.controller.ts\n            \n            controller\n            QueuesController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/roles/entities/role.entity.ts\n            \n            entity\n            Role\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/roles/roles.controller.ts\n            \n            controller\n            RolesController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/roles/roles.service.ts\n            \n            injectable\n            RolesService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^11.1.0\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.1.0\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/passport : ^11.0.5\n        \n            @nestjs/platform-express : ^11.1.0\n        \n            @nestjs/platform-socket.io : ^11.1.0\n        \n            @nestjs/swagger : ^11.2.0\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            @nestjs/websockets : ^11.1.0\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            dotenv : ^16.5.0\n        \n            mysql2 : ^3.14.1\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.2\n        \n            socket.io : ^4.8.1\n        \n            swagger-ui-express : ^5.0.1\n        \n            typeorm : ^0.3.22\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CounterStatus   (src/.../counter.entity.ts)\n                        \n                        \n                            QueueStatus   (src/.../queue.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/counter/entities/counter.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        CounterStatus\n                    \n                \n                        \n                            \n                                 ACTIVE\n                            \n                        \n                        \n                            \n                                Value : active\n                            \n                        \n                        \n                            \n                                 INACTIVE\n                            \n                        \n                        \n                            \n                                Value : inactive\n                            \n                        \n            \n        \n\n    src/modules/queue/entities/queue.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        QueueStatus\n                    \n                \n                        \n                            \n                                 PENDING\n                            \n                        \n                        \n                            \n                                Value : pending\n                            \n                        \n                        \n                            \n                                 SERVING\n                            \n                        \n                        \n                            \n                                Value : serving\n                            \n                        \n                        \n                            \n                                 COMPLETED\n                            \n                        \n                        \n                            \n                                Value : completed\n                            \n                        \n                        \n                            \n                                 CANCELLED\n                            \n                        \n                        \n                            \n                                Value : cancelled\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            seedDatabaseIfNeeded   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seedDatabaseIfNeeded\n                        \n                    \n                \n            \n            \n                \nseedDatabaseIfNeeded(dataSource: DataSource)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dataSource\n                                            \n                                                        DataSource\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        QueueModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RolesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_QueueModule\n\n\n\ncluster_QueueModule_exports\n\n\n\ncluster_QueueModule_providers\n\n\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_exports\n\n\n\ncluster_RolesModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nQueueModule\n\nQueueModule\n\nAppModule -->\n\nQueueModule->AppModule\n\n\n\n\n\nQueueGateway \n\nQueueGateway \n\nQueueGateway  -->\n\nQueueModule->QueueGateway \n\n\n\n\n\nQueueService \n\nQueueService \n\nQueueService  -->\n\nQueueModule->QueueService \n\n\n\n\n\nRolesModule\n\nRolesModule\n\nAuthModule -->\n\nRolesModule->AuthModule\n\n\n\nAppModule -->\n\nRolesModule->AppModule\n\n\n\n\n\nRolesService \n\nRolesService \n\nRolesService  -->\n\nRolesModule->RolesService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nQueueService\n\nQueueService\n\nQueueModule -->\n\nQueueService->QueueModule\n\n\n\n\n\nRolesService\n\nRolesService\n\nRolesModule -->\n\nRolesService->RolesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            databaseConfig   (src/.../database.config.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/database.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        databaseConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TypeOrmModuleOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'mysql',\n  host: process.env.DB_HOST || 'localhost',\n  port: parseInt(process.env.DB_PORT || '3306'),\n  username: process.env.DB_USERNAME || 'root',\n  password: process.env.DB_PASSWORD || '',\n  database: process.env.DB_NAME || 'bulak_smart_connect',\n  entities: [__dirname + '/../**/*.entity{.ts,.js}'],\n  synchronize: process.env.NODE_ENV !== 'production',\n  logging: process.env.NODE_ENV !== 'production',\n}\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: string[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
