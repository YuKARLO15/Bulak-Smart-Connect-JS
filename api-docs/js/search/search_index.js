var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.377,1,2.149]],["body/controllers/AppController.html",[0,2.182,1,3.405,2,1.737,3,0.4,4,0.351,5,0.351,6,3.478,7,0.502,8,1.869,9,5.008,10,5.967,11,1.732,12,0.03,13,0.922,14,4.144,15,1.869,16,1.291,17,5.204,18,4.144,19,2.803,20,0.63,21,0.868,22,3.064,23,3.478,24,0.4,25,0.094,26,2.232,27,2.712,28,1.732,29,4.144,30,4.144,31,0.023,32,0.023]],["title/modules/AppModule.html",[33,1.179,34,2.149]],["body/modules/AppModule.html",[1,3.084,2,1.699,3,0.275,4,0.242,5,0.242,12,0.03,20,0.739,21,0.598,22,3.033,23,2.394,24,0.275,25,0.065,31,0.018,32,0.018,33,1.692,34,4.145,35,1.296,36,1.408,37,1.687,38,1.687,39,1.408,40,2.786,41,1.537,42,2.394,43,2.394,44,2.394,45,3.328,46,3.328,47,3.033,48,3.328,49,2.396,50,1.687,51,1.537,52,2.853,53,2.786,54,4.052,55,3.763,56,1.867,57,1.687,58,1.196,59,2.092,60,2.853,61,2.853,62,2.853,63,2.853,64,2.394,65,2.853,66,2.853,67,2.853,68,2.14,69,2.853,70,1.867,71,2.394,72,0.422,73,2.394,74,2.394,75,2.853,76,2.394,77,2.853,78,1.687,79,2.853,80,1.537,81,2.853,82,2.394,83,2.853,84,1.296,85,2.394,86,2.394,87,3.401,88,4.052,89,3.357,90,1.867,91,2.853,92,4.306,93,2.394,94,2.853,95,1.867,96,2.853,97,2.853,98,2.853,99,2.853,100,2.972,101,2.853,102,2.853,103,2.853,104,2,105,4.052,106,3.401,107,4.052,108,2.853,109,2.853,110,2.853]],["title/injectables/AppService.html",[22,1.769,111,0.94]],["body/injectables/AppService.html",[3,0.446,4,0.392,5,0.392,7,0.56,8,1.999,9,5.203,12,0.029,13,0.82,15,1.661,16,1.264,20,0.56,21,0.969,22,2.999,24,0.446,25,0.105,28,1.54,31,0.025,32,0.025,111,1.593,112,2.283,113,3.882,114,4.625,115,4.625,116,4.625]],["title/controllers/AuthController.html",[0,1.377,117,2.149]],["body/controllers/AuthController.html",[0,1.346,2,1.346,3,0.31,4,0.272,5,0.272,7,0.389,8,1.58,11,1.671,12,0.03,13,0.89,15,1.803,20,0.685,21,0.673,24,0.31,25,0.073,26,1.73,28,1.671,31,0.019,32,0.019,72,0.651,95,2.101,104,2.885,117,2.88,118,2.695,119,2.355,120,3.211,121,3.694,122,3.694,123,3.694,124,3.211,125,3.211,126,3.211,127,1.947,128,1.233,129,1.55,130,4.401,131,2.695,132,3.538,133,4.401,134,3.211,135,2.602,136,2.695,137,3.538,138,4.401,139,3.211,140,2.695,141,2.695,142,2.695,143,4.401,144,2.355,145,2.704,146,2.695,147,2.695,148,2.695,149,1.898,150,3.211,151,2.695,152,3.211,153,3.211,154,2.695,155,3.211,156,2.695,157,1.585,158,3.228,159,1.898,160,3.211,161,2.695,162,2.695,163,1.898,164,1.585,165,3.211,166,3.211,167,3.211,168,3.211,169,3.211,170,3.211,171,3.211,172,3.211,173,3.211,174,3.211,175,2.695,176,3.211,177,3.211,178,3.211]],["title/modules/AuthModule.html",[33,1.179,45,1.941]],["body/modules/AuthModule.html",[2,1.866,3,0.315,4,0.277,5,0.277,12,0.03,20,0.76,21,0.684,24,0.315,25,0.074,28,1.087,31,0.02,32,0.02,33,1.819,35,1.483,36,1.612,37,1.93,38,1.93,39,1.612,40,2.994,41,2.728,45,3.774,47,3.164,49,2.632,50,1.93,51,1.759,53,2.632,55,3.715,56,2.137,57,1.93,58,1.369,64,2.741,70,2.137,71,2.741,117,3.314,145,3.439,146,2.741,179,2.741,180,3.265,181,2.741,182,2.741,183,3.774,184,3.265,185,3.265,186,2.395,187,4.452,188,2.137,189,1.008,190,1.759,191,3.265,192,3.265,193,3.265,194,3.265,195,2.395,196,3.265,197,3.265,198,3.265,199,3.265,200,3.265,201,3.265,202,3.265,203,2.741]],["title/injectables/AuthService.html",[111,0.94,145,1.769]],["body/injectables/AuthService.html",[3,0.177,4,0.155,5,0.155,7,0.222,8,1.042,12,0.03,13,0.843,15,1.606,16,0.659,20,0.645,21,0.384,24,0.177,25,0.041,28,1.365,31,0.013,32,0.013,58,0.768,72,0.704,78,2.812,80,2.938,104,2.747,111,0.83,112,0.904,121,2.436,122,2.436,123,2.436,127,1.844,128,1.269,129,1.468,131,2.436,132,3.225,135,2.131,136,2.436,137,2.812,144,1.343,145,1.563,147,1.537,148,1.537,154,1.537,156,1.537,157,2.873,158,3.008,159,2.947,161,1.537,162,3.442,163,2.812,164,2.207,186,1.343,189,1.747,190,0.986,204,1.537,205,2.926,206,2.902,207,2.902,208,1.563,209,1.831,210,2.684,211,4.985,212,2.46,213,1.831,214,2.436,215,1.831,216,1.125,217,1.831,218,0.904,219,1.831,220,1.831,221,3.642,222,1.343,223,1.831,224,1.831,225,2.902,226,1.831,227,2.436,228,1.831,229,1.831,230,1.343,231,0.768,232,2.436,233,1.831,234,1.537,235,3.442,236,4.102,237,1.831,238,3.605,239,1.198,240,1.831,241,1.343,242,3.026,243,1.831,244,1.343,245,1.831,246,2.902,247,1.831,248,3.026,249,1.831,250,1.831,251,1.831,252,2.902,253,3.605,254,1.831,255,1.831,256,1.831,257,2.207,258,1.831,259,4.102,260,1.831,261,2.902,262,1.537,263,1.831,264,1.831,265,1.831,266,4.102,267,1.831,268,1.831,269,1.537,270,1.831,271,1.831,272,1.831,273,1.831,274,2.902,275,1.831,276,2.902,277,2.902,278,1.831,279,1.563,280,2.644,281,1.563,282,1.537,283,1.537,284,2.436,285,2.436,286,1.831,287,1.831,288,3.026,289,2.902,290,1.831,291,2.902,292,1.831,293,2.902,294,1.831,295,1.831,296,1.831]],["title/entities/Counter.html",[297,1.093,298,1.621]],["body/entities/Counter.html",[3,0.316,4,0.277,5,0.277,7,0.396,11,1.896,12,0.03,13,1.009,16,1.012,19,2.731,20,0.54,24,0.43,25,0.074,31,0.02,32,0.02,68,2.303,72,0.869,84,1.487,128,1.399,216,2.111,231,1.372,239,3.563,297,1.089,298,2.201,299,2.401,300,1.484,301,4.256,302,5.071,303,2.126,304,2.464,305,2.747,306,4.459,307,3.219,308,2.401,309,5.445,310,3.742,311,4.459,312,3.273,313,2.142,314,3.273,315,2.998,316,3.273,317,3.368,318,3.273,319,4.178,320,2.747,321,4.782,322,2.918,323,2.401,324,3.273,325,3.742,326,3.27,327,3.273,328,3.742,329,3.742,330,3.273,331,3.273]],["title/classes/CreateQueueDto.html",[25,0.074,332,1.941]],["body/classes/CreateQueueDto.html",[3,0.32,4,0.281,5,0.281,7,0.402,11,2.045,12,0.029,13,1.088,16,1.471,20,0.402,24,0.32,25,0.102,31,0.02,32,0.02,72,0.909,129,1.896,216,1.746,218,2.522,279,2.752,281,2.752,300,1.499,332,2.662,333,1.789,334,5.226,335,2.436,336,3.747,337,3.747,338,3.747,339,3.747,340,3.747,341,4.288,342,3.321,343,5.478,344,3.321,345,3.321,346,3.321,347,3.321,348,3.321,349,3.321,350,4.955,351,3.321,352,5.156,353,5.726,354,2.436]],["title/injectables/JwtAuthGuard.html",[111,0.94,149,1.941]],["body/injectables/JwtAuthGuard.html",[3,0.46,4,0.404,5,0.404,12,0.029,20,0.687,21,1,24,0.46,25,0.108,31,0.025,32,0.025,111,1.623,112,2.355,149,3.353,188,3.122,355,4.005,356,4.005,357,4.761,358,5.672,359,4.772]],["title/injectables/JwtStrategy.html",[111,0.94,183,1.941]],["body/injectables/JwtStrategy.html",[3,0.354,4,0.311,5,0.311,7,0.445,8,1.729,12,0.03,13,0.952,15,1.319,20,0.691,21,0.769,24,0.354,25,0.083,26,1.978,28,1.222,31,0.021,32,0.021,55,4.456,56,2.403,72,0.712,100,2.693,104,2.652,111,1.378,112,1.813,127,1.867,128,1.182,129,1.486,135,2.171,144,2.693,157,1.813,163,2.171,164,1.813,183,2.847,188,2.403,195,2.693,208,1.978,218,1.813,221,2.403,257,1.813,262,3.082,284,4.042,357,4.042,360,3.082,361,4.816,362,3.673,363,3.673,364,4.816,365,3.673,366,3.673,367,3.673,368,3.673,369,3.082,370,5.373,371,3.673,372,3.673,373,3.673,374,2.693,375,3.673,376,3.673,377,3.673,378,3.673,379,3.673,380,3.673,381,3.673,382,3.673]],["title/classes/LoginDto.html",[25,0.074,132,1.941]],["body/classes/LoginDto.html",[3,0.451,4,0.396,5,0.396,7,0.566,12,0.028,13,0.993,16,1.412,24,0.451,25,0.106,31,0.025,32,0.025,72,0.828,80,3.231,132,3.312,300,1.865,333,2.517,383,3.922,384,6,385,4.673,386,4.673]],["title/entities/Queue.html",[297,1.093,304,1.377]],["body/entities/Queue.html",[3,0.262,4,0.231,5,0.231,7,0.33,11,1.982,12,0.03,13,1.055,16,1.14,19,2.472,20,0.556,24,0.378,25,0.062,31,0.017,32,0.017,68,2.745,72,0.894,84,1.236,128,1.306,216,1.947,231,1.141,297,0.906,298,2.939,300,1.304,303,1.924,304,1.924,305,2.284,307,3.455,313,3.286,315,2.714,317,3.276,320,2.284,321,4.466,322,2.563,323,1.996,325,3.288,387,1.996,388,3.852,389,3.852,390,3.366,391,4.466,392,3.852,393,3.366,394,3.683,395,3.917,396,2.721,397,3.288,398,2.721,399,3.917,400,2.721,401,2.284,402,3.288,403,2.721,404,2.705,405,2.721,406,3.917,407,2.721,408,3.917,409,2.721,410,2.721,411,3.917,412,2.873,413,2.721,414,3.146,415,2.721,416,3.917,417,3.288,418,1.996,419,1.996,420,2.873,421,2.873,422,2.873,423,2.873,424,2.721,425,2.284]],["title/controllers/QueueController.html",[0,1.377,426,2.149]],["body/controllers/QueueController.html",[0,0.867,2,0.867,3,0.199,4,0.175,5,0.175,7,0.251,8,1.146,11,2.008,12,0.03,13,1.069,15,2.167,16,1.41,19,1.72,20,0.574,21,0.433,24,0.199,25,0.047,26,1.114,27,1.354,28,2.008,31,0.014,32,0.014,72,0.85,95,2.089,119,1.517,127,2.144,128,1.386,129,1.707,140,3.272,141,2.68,303,2.259,304,0.867,332,2.96,393,2.342,414,2.592,426,2.089,427,1.736,428,2.68,429,2.68,430,2.68,431,2.868,432,2.68,433,2.68,434,4.384,435,2.089,436,4.384,437,4.384,438,3.679,439,2.68,440,2.68,441,3.679,442,2.342,443,2.069,444,3.193,445,3.193,446,2.069,447,1.736,448,3.193,449,2.68,450,2.069,451,2.342,452,1.736,453,2.069,454,2.069,455,1.736,456,3.193,457,2.069,458,1.736,459,3.193,460,2.069,461,3.193,462,2.069,463,1.354,464,2.68,465,2.069,466,3.193,467,2.069,468,3.193,469,2.069,470,3.193,471,2.069,472,2.069,473,3.193,474,2.069,475,2.069,476,3.193,477,2.069,478,3.193,479,2.069,480,1.736,481,3.186,482,3.193,483,2.069,484,2.069,485,1.736,486,2.069,487,1.924,488,1.517,489,1.736,490,2.68,491,1.736,492,1.354,493,2.069,494,2.069,495,2.069,496,2.069,497,2.069,498,2.069,499,2.069,500,2.069,501,2.069,502,2.069,503,1.736,504,2.069,505,2.069,506,2.069,507,2.069,508,2.069,509,2.069,510,2.069,511,2.069,512,2.069,513,2.069,514,2.069,515,2.069,516,2.069,517,2.069]],["title/entities/QueueDetails.html",[297,1.093,404,1.769]],["body/entities/QueueDetails.html",[3,0.235,4,0.207,5,0.207,7,0.296,11,2.014,12,0.03,13,1.072,16,1.4,20,0.522,24,0.235,25,0.055,31,0.016,32,0.016,68,2.631,72,0.895,84,1.109,90,2.368,128,1.447,189,1.704,190,1.315,216,2.068,218,2.129,231,1.023,239,2.368,279,2.323,281,2.323,297,0.813,300,1.205,303,1.808,304,2.428,307,3.424,308,1.791,310,4.003,313,3.71,315,2.55,317,3.484,326,3.163,336,3.163,337,3.163,338,3.163,339,3.163,340,3.163,404,1.949,518,5.132,519,2.049,520,3.163,521,2.049,522,2.442,523,3.619,524,2.442,525,3.037,526,2.442,527,2.442,528,3.037,529,2.442,530,3.619,531,2.442,532,3.619,533,2.442,534,3.037,535,3.619,536,4.77,537,2.442,538,4.77,539,3.619,540,2.442,541,2.442,542,3.619,543,2.442,544,4.003,545,3.619,546,2.442,547,2.442,548,3.619,549,2.442,550,2.442,551,2.442]],["title/classes/QueueGateway.html",[25,0.074,552,1.769]],["body/classes/QueueGateway.html",[3,0.215,4,0.189,5,0.189,7,0.27,8,1.215,11,1.518,12,0.03,13,1.021,15,1.924,20,0.552,21,0.468,24,0.215,25,0.051,27,2.984,28,1.36,31,0.015,32,0.015,68,1.014,70,1.461,72,0.836,89,1.461,90,1.461,95,3.612,104,2.546,127,2.14,128,1.355,129,1.704,135,2.001,157,1.67,159,2.001,164,1.67,205,2.984,208,1.823,216,2.373,222,1.637,269,2.84,298,1.102,300,1.126,304,0.936,322,1.461,333,1.202,442,2.482,451,3.345,487,2.645,488,1.637,520,3.931,552,1.823,553,1.874,554,2.84,555,4.087,556,4.087,557,4.561,558,4.329,559,3.384,560,3.384,561,3.384,562,3.384,563,3.384,564,3.384,565,3.384,566,2.232,567,3.384,568,1.637,569,3.384,570,2.232,571,4.087,572,3.384,573,6.17,574,2.232,575,4.902,576,4.561,577,3.384,578,2.232,579,3.384,580,3.384,581,2.232,582,3.384,583,3.384,584,2.232,585,3.384,586,3.384,587,2.232,588,3.384,589,2.232,590,3.384,591,2.232,592,3.384,593,2.232,594,1.874,595,1.874,596,1.637,597,2.232,598,2.232,599,2.232,600,2.232,601,1.874,602,3.384,603,2.232,604,3.384,605,2.232,606,2.232,607,3.384,608,2.232,609,2.84,610,2.232,611,2.232,612,2.232,613,1.874,614,1.874,615,1.874,616,2.232,617,2.232,618,2.232,619,3.384,620,2.232,621,2.232]],["title/modules/QueueModule.html",[33,1.179,46,1.941]],["body/modules/QueueModule.html",[2,2.033,3,0.358,4,0.315,5,0.315,12,0.03,20,0.762,21,0.778,24,0.358,25,0.084,31,0.021,32,0.021,33,1.94,35,1.686,36,1.833,37,2.195,38,2.195,39,1.833,40,3.193,41,2.909,46,3.722,49,2.867,50,2.195,51,2,53,2.195,57,2.195,58,1.556,298,2.394,304,1.556,404,2.612,418,2.723,419,2.723,426,3.534,487,3.214,488,2.723,492,2.429,552,3.391,596,2.723,622,3.116,623,3.116,624,3.116,625,3.713,626,3.713,627,3.116,628,3.116,629,3.713]],["title/injectables/QueueService.html",[111,0.94,487,1.621]],["body/injectables/QueueService.html",[3,0.104,4,0.091,5,0.091,7,0.13,8,0.669,12,0.03,13,0.87,15,1.721,16,0.827,19,2.428,20,0.525,21,0.225,24,0.104,25,0.024,28,1.702,31,0.008,32,0.008,58,0.45,70,0.703,72,0.667,90,0.703,104,2.993,111,0.533,112,0.53,127,1.748,128,1.176,129,1.392,135,2.833,157,2.866,158,2.44,159,3.411,163,1.739,164,2.141,189,0.332,205,1.925,208,1.003,210,2.95,216,2.102,218,0.53,230,0.788,231,0.45,239,1.219,241,1.808,244,2.157,279,0.579,281,0.579,282,0.902,285,0.902,288,0.902,298,2.141,301,1.563,303,1.64,304,2.489,319,0.788,332,1.967,336,0.788,337,0.788,338,0.788,339,0.788,340,0.788,388,1.563,390,2.674,391,3.475,392,0.902,393,2.44,394,2.44,397,2.069,404,1.328,414,1.739,418,0.788,419,0.788,420,2.157,421,0.788,422,1.808,423,0.788,425,2.792,428,1.563,429,1.563,430,2.469,431,1.925,432,1.563,433,1.563,435,1.219,438,2.469,439,1.563,440,1.563,441,2.469,442,2.44,447,1.563,449,2.069,451,2.157,452,1.563,455,1.563,458,1.563,463,1.219,480,1.563,481,2.313,487,0.919,489,0.902,490,1.563,491,0.902,492,0.703,520,2.87,552,2.23,596,0.788,601,0.902,609,3.284,614,2.069,615,0.902,627,0.902,628,0.902,630,0.902,631,1.074,632,2.466,633,2.466,634,1.074,635,1.863,636,1.863,637,1.074,638,1.074,639,1.074,640,1.074,641,1.074,642,1.074,643,1.074,644,1.074,645,1.863,646,1.074,647,1.863,648,1.074,649,1.074,650,1.074,651,0.902,652,1.074,653,1.074,654,1.074,655,1.074,656,0.902,657,2.466,658,1.863,659,1.863,660,1.074,661,1.074,662,1.074,663,3.64,664,1.863,665,2.466,666,2.466,667,1.074,668,1.074,669,1.074,670,1.074,671,1.863,672,3.913,673,1.074,674,1.074,675,1.863,676,1.074,677,1.074,678,1.074,679,1.074,680,1.863,681,0.902,682,0.902,683,1.074,684,1.863,685,1.074,686,1.074,687,2.466,688,1.863,689,1.074,690,1.863,691,1.074,692,1.074,693,1.074,694,1.074,695,1.074,696,1.074,697,1.074,698,1.074,699,1.074,700,1.074,701,2.942,702,1.074,703,2.942,704,2.466,705,2.466,706,2.466,707,2.466,708,1.863,709,1.863,710,1.863,711,1.074,712,1.074,713,1.074,714,2.466,715,1.863,716,1.074,717,1.563,718,2.942,719,1.074,720,1.863,721,1.074,722,2.466,723,1.074,724,1.074,725,1.863,726,1.074,727,1.074,728,1.074,729,1.074,730,1.074,731,1.074,732,1.074,733,1.074,734,0.902,735,1.074,736,1.074,737,1.074,738,1.074,739,1.074,740,1.074,741,1.074,742,0.902,743,3.327,744,1.863,745,2.466,746,1.863,747,0.902,748,1.074,749,1.074,750,1.863,751,1.074,752,1.863,753,1.074,754,1.863,755,1.074,756,1.863,757,1.074,758,1.074,759,1.074,760,1.074,761,1.074,762,1.074,763,1.074,764,1.074,765,1.863,766,1.863,767,1.863,768,1.863,769,1.863,770,1.074,771,1.074,772,1.074,773,1.074,774,1.074,775,1.074,776,1.074,777,1.074,778,2.466,779,1.863,780,1.863,781,1.074,782,1.863,783,1.074,784,1.074,785,1.074,786,1.074,787,1.074,788,1.074,789,1.074,790,1.074,791,1.074]],["title/classes/RegisterDto.html",[25,0.074,137,1.941]],["body/classes/RegisterDto.html",[3,0.373,4,0.328,5,0.328,7,0.469,12,0.029,13,1.111,16,1.501,24,0.373,25,0.088,31,0.022,32,0.022,72,0.927,78,3.258,80,2.969,128,1.429,129,1.935,137,2.946,189,1.195,221,3.606,279,2.969,280,4.042,281,2.969,297,1.289,300,1.659,333,2.085,792,3.25,793,3.872,794,3.872,795,3.872,796,3.872,797,3.872,798,3.872,799,3.872,800,3.872,801,3.872,802,3.872]],["title/entities/Role.html",[297,1.093,803,1.769]],["body/entities/Role.html",[3,0.365,4,0.321,5,0.321,7,0.458,11,1.92,12,0.03,13,1.022,16,1.31,20,0.595,24,0.365,25,0.086,31,0.022,32,0.022,68,2.621,72,0.853,84,1.719,100,3.602,128,1.338,189,1.891,190,2.039,216,1.904,231,1.587,297,1.26,300,1.635,303,2.286,307,3.223,315,3.223,317,3.223,412,2.776,521,3.177,803,2.645,804,3.177,805,3.999,806,5.452,807,3.785,808,3.785,809,3.177,810,3.785,811,3.785,812,4.122,813,3.785,814,4.122,815,3.785]],["title/controllers/RolesController.html",[0,1.377,816,2.149]],["body/controllers/RolesController.html",[0,1.472,2,1.472,3,0.338,4,0.298,5,0.298,7,0.425,8,1.678,11,1.749,12,0.03,13,0.931,15,1.887,16,1.362,20,0.707,21,0.735,24,0.338,25,0.08,26,1.891,27,2.297,28,1.749,31,0.021,32,0.021,72,0.691,119,2.575,127,1.812,128,1.147,129,1.443,142,2.946,149,2.075,151,2.946,175,2.946,212,2.594,218,2.307,257,2.307,303,1.959,431,3.666,435,3.058,463,2.297,464,2.946,485,2.946,503,2.946,816,3.058,817,2.946,818,3.923,819,3.511,820,6,821,3.511,822,3.511,823,3.511,824,2.946,825,3.511,826,3.511,827,2.946,828,3.511,829,3.058,830,3.511,831,3.511,832,3.511,833,5.255,834,3.511,835,3.511,836,3.511,837,3.511,838,3.511]],["title/guards/RolesGuard.html",[829,2.149,839,2.409]],["body/guards/RolesGuard.html",[3,0.371,4,0.326,5,0.326,7,0.466,8,1.783,12,0.03,13,0.88,15,1.382,20,0.666,21,0.806,24,0.371,25,0.087,26,2.074,28,1.653,31,0.022,32,0.022,68,1.749,72,0.734,111,1.421,127,1.925,128,1.219,129,1.533,157,2.451,189,1.188,208,2.074,222,3.642,554,3.231,829,3.249,840,3.85,841,3.231,842,5.807,843,3.85,844,6.155,845,3.85,846,4.966,847,5.807,848,3.85,849,3.85,850,3.231,851,3.642,852,3.85,853,4.966,854,3.85,855,3.85,856,3.85,857,3.85,858,3.85,859,3.85]],["title/modules/RolesModule.html",[33,1.179,47,1.769]],["body/modules/RolesModule.html",[2,2.116,3,0.381,4,0.335,5,0.335,12,0.03,20,0.75,21,0.828,24,0.381,25,0.089,31,0.022,32,0.022,33,1.998,35,1.795,36,1.95,37,2.336,38,2.336,39,1.95,40,3.289,41,2.997,47,3.393,49,2.985,50,2.336,51,2.128,53,2.336,57,2.336,58,1.656,189,1.558,190,2.128,212,3.243,803,2.128,816,3.641,827,3.316,860,3.316,861,3.316,862,3.316,863,3.951,864,3.316,865,3.951,866,3.951]],["title/injectables/RolesService.html",[111,0.94,212,1.621]],["body/injectables/RolesService.html",[3,0.241,4,0.212,5,0.212,7,0.303,8,1.323,12,0.03,13,0.953,15,1.847,16,0.993,20,0.623,21,0.524,24,0.241,25,0.057,28,1.606,31,0.016,32,0.016,58,1.048,72,0.761,104,3.082,111,1.054,112,1.234,127,1.994,128,1.431,129,1.587,157,2.539,159,3.181,163,2.585,164,2.158,189,1.717,190,1.347,205,2.41,208,1.984,210,3.64,212,1.818,214,3.67,216,2.358,218,2.381,227,4.974,230,1.834,231,1.048,234,2.098,235,3.091,241,2.701,244,3.207,257,2.656,303,2.256,431,3.157,435,2.41,463,2.41,651,2.098,742,3.091,803,2.997,812,3.091,818,3.091,824,3.091,864,2.098,867,2.098,868,3.683,869,3.683,870,2.5,871,2.5,872,3.683,873,3.683,874,4.373,875,2.5,876,2.5,877,3.683,878,2.5,879,2.5,880,2.5,881,2.5,882,2.5,883,3.683,884,3.683,885,2.5,886,2.5,887,2.5,888,2.5]],["title/classes/UpdateQueueDto.html",[25,0.074,481,1.941]],["body/classes/UpdateQueueDto.html",[3,0.408,4,0.359,5,0.359,7,0.513,11,1.756,12,0.029,13,0.935,16,1.197,19,3.094,20,0.639,24,0.408,25,0.119,31,0.023,32,0.023,72,0.78,129,1.856,300,1.756,333,2.281,335,3.106,341,3.554,350,4.822,352,4.427,354,3.106,389,4.822,414,3.396,481,3.118,492,2.771,889,4.822,890,4.235,891,4.235,892,4.235,893,4.235,894,4.235]],["title/entities/User.html",[189,1.014,297,1.093]],["body/entities/User.html",[3,0.249,4,0.219,5,0.219,7,0.313,11,2.038,12,0.03,13,1.085,16,1.415,20,0.457,24,0.249,25,0.059,31,0.017,32,0.017,68,2.67,72,0.905,78,2.636,80,2.402,84,1.175,128,1.503,189,1.165,216,1.901,221,2.918,231,1.084,242,3.743,257,2.201,279,2.402,280,3.27,281,2.402,297,0.861,300,1.257,303,2.186,307,3.219,308,1.897,313,3.208,315,2.636,317,3.579,323,2.769,326,3.596,390,3.27,394,2.769,401,2.17,402,3.169,412,2.769,417,3.169,525,3.169,528,3.169,534,2.17,544,2.17,548,3.169,803,3.029,809,3.169,814,3.169,895,2.17,896,4.459,897,2.586,898,4.903,899,2.586,900,2.586,901,2.586,902,2.586,903,2.586,904,2.586,905,3.776,906,2.586,907,2.586,908,2.586,909,2.586,910,3.776,911,3.776,912,2.586,913,2.586,914,3.776,915,2.586,916,2.586,917,2.586,918,2.586,919,2.586,920,3.776,921,2.586]],["title/modules/UsersModule.html",[33,1.179,48,1.941]],["body/modules/UsersModule.html",[3,0.452,4,0.397,5,0.397,12,0.029,20,0.728,21,0.982,24,0.452,25,0.106,31,0.025,32,0.025,33,2.016,35,2.13,41,2.526,48,3.319,53,2.772,57,3.319,58,1.966,189,1.447,203,3.936,922,4.689,923,4.689]],["title/coverage.html",[924,3.278]],["body/coverage.html",[0,2.253,1,2.077,5,0.269,6,2.663,12,0.03,22,1.709,25,0.128,31,0.019,32,0.019,39,1.566,59,2.327,72,0.469,111,1.666,113,2.663,117,2.077,118,2.663,132,1.876,137,1.876,145,1.709,149,1.876,164,1.566,183,1.876,189,0.979,204,2.663,212,1.566,257,1.566,297,1.876,298,1.566,299,2.327,304,1.33,332,1.876,334,2.663,335,3.202,355,2.663,356,2.663,360,2.663,383,2.663,387,2.327,404,1.709,426,2.077,427,2.663,481,1.876,487,1.566,518,2.663,519,2.663,552,1.709,553,2.663,630,2.663,663,5.608,792,2.663,803,1.709,804,2.663,816,2.077,817,2.663,829,2.077,839,2.327,841,2.663,851,2.327,867,2.663,889,2.663,895,2.663,924,2.327,925,2.663,926,3.174,927,3.174,928,5.636,929,3.174,930,4.366,931,4.366,932,3.664,933,4.99,934,6.302,935,3.174,936,2.663,937,3.664,938,4.366,939,2.663,940,3.174,941,3.174,942,3.174,943,3.174,944,3.174,945,3.174]],["title/dependencies.html",[36,1.948,946,2.307]],["body/dependencies.html",[12,0.03,21,0.884,25,0.096,31,0.023,32,0.023,36,2.084,56,2.762,58,1.77,186,3.096,188,2.762,195,3.096,231,1.77,232,3.543,354,3.096,369,4.418,594,3.543,595,4.418,850,3.543,947,6.181,948,4.222,949,5.265,950,4.222,951,5.265,952,4.222,953,4.222,954,4.222,955,4.222,956,4.222,957,4.222,958,4.222,959,4.222,960,4.222,961,4.222,962,4.222,963,4.222,964,4.222,965,4.222,966,4.222,967,4.222]],["title/miscellaneous/enumerations.html",[968,1.481,969,3.312]],["body/miscellaneous/enumerations.html",[7,0.56,12,0.029,31,0.025,32,0.025,299,3.392,319,4.083,328,4.673,329,4.673,387,3.392,414,3.291,420,4.083,421,4.083,422,4.083,423,4.083,568,4.725,968,2.491,969,3.882,970,4.625,971,4.625]],["title/miscellaneous/functions.html",[968,1.481,972,3.312]],["body/miscellaneous/functions.html",[7,0.59,12,0.027,31,0.025,32,0.025,39,3.015,72,0.721,127,1.89,128,1.197,129,1.505,937,4.091,939,4.821,968,2.626,972,4.091,973,5.745,974,4.875,975,6.108]],["title/index.html",[7,0.333,976,2.749,977,2.749]],["body/index.html",[4,0.231,12,0.028,31,0.017,32,0.017,51,2.985,89,2.563,92,2.284,210,1.78,248,4.651,283,2.284,558,2.284,613,2.284,656,2.284,682,2.284,717,3.852,734,2.284,747,4.214,805,1.996,924,1.996,925,3.288,978,2.721,979,2.721,980,4.59,981,3.917,982,2.721,983,2.721,984,2.721,985,3.917,986,4.59,987,2.721,988,2.721,989,5.021,990,2.721,991,5.021,992,5.845,993,2.721,994,5.711,995,2.721,996,2.721,997,3.917,998,2.721,999,2.721,1000,4.59,1001,2.721,1002,3.917,1003,2.721,1004,2.721,1005,2.721,1006,2.721,1007,2.721,1008,5.021,1009,5.845,1010,5.542,1011,2.721,1012,3.917,1013,2.721,1014,2.721,1015,2.721,1016,2.721,1017,2.721,1018,3.917,1019,2.721,1020,3.917,1021,2.721,1022,3.917,1023,5.542,1024,5.021,1025,2.721,1026,3.917,1027,2.721,1028,2.721,1029,2.721,1030,2.721,1031,5.021,1032,2.721,1033,2.721,1034,2.721,1035,3.917,1036,2.721,1037,2.721,1038,2.721,1039,2.721,1040,2.721,1041,3.917,1042,2.721,1043,2.721,1044,2.721,1045,3.917,1046,2.721,1047,2.721,1048,4.214,1049,3.917,1050,2.721,1051,2.721,1052,2.721,1053,2.721,1054,2.721,1055,2.721,1056,2.721,1057,2.721,1058,3.917,1059,2.721,1060,2.284,1061,2.721,1062,2.721,1063,2.721,1064,2.721,1065,2.721,1066,2.721,1067,3.917,1068,2.721,1069,2.721,1070,2.721,1071,2.721,1072,3.917,1073,2.721,1074,2.721,1075,2.721,1076,3.917,1077,3.917,1078,2.721,1079,2.721,1080,2.721,1081,2.721,1082,2.721,1083,2.721,1084,2.721,1085,2.721,1086,2.721,1087,2.721,1088,2.721,1089,2.284,1090,2.721,1091,2.721,1092,2.721,1093,2.721,1094,2.721,1095,2.721,1096,2.284]],["title/modules.html",[35,2.03]],["body/modules.html",[12,0.025,31,0.025,32,0.025,34,3.133,35,2.175,45,2.831,46,2.831,47,2.579,48,2.831,1048,5.263,1060,4.019,1097,6.271,1098,6.271,1099,6.403,1100,4.789]],["title/overview.html",[1101,3.751]],["body/overview.html",[2,1.479,12,0.029,22,2.838,31,0.021,32,0.021,33,1.267,34,4.229,35,1.603,36,1.742,37,2.086,38,2.086,39,1.742,40,2.086,41,1.901,42,2.962,43,2.962,44,2.962,45,3.795,46,3.625,47,3.303,48,3.115,49,2.773,50,2.086,51,1.901,84,1.603,112,1.742,145,3.303,179,2.962,181,2.962,182,2.962,183,3.625,212,3.027,333,1.901,487,3.027,552,3.024,622,2.962,623,2.962,624,2.962,681,2.962,839,2.588,860,2.962,861,2.962,862,2.962,1101,2.962,1102,5.269,1103,3.529,1104,3.529]],["title/properties.html",[300,1.313,946,2.307]],["body/properties.html",[12,0.029,31,0.026,32,0.026,300,1.677,805,3.695,1089,4.228,1096,4.228,1105,5.038,1106,5.038,1107,5.038]],["title/miscellaneous/variables.html",[374,2.894,968,1.481]],["body/miscellaneous/variables.html",[7,0.499,12,0.03,16,1.177,31,0.023,32,0.023,59,3.802,72,0.839,73,3.457,74,3.457,76,3.457,78,2.435,80,2.219,82,3.457,84,1.871,85,3.457,86,3.457,87,3.457,89,3.392,93,3.457,106,4.351,257,3.029,322,3.712,374,3.021,568,4.161,851,3.802,932,3.457,936,3.457,968,2.219,1108,4.119,1109,5.184,1110,4.119,1111,4.119,1112,4.119,1113,4.119,1114,4.119,1115,4.119,1116,4.119,1117,4.119,1118,4.119,1119,4.119,1120,4.119]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":663,"title":{},"body":{"injectables/QueueService.html":{},"coverage.html":{}}}],["0')}${string(today.getdate()).padstart(2",{"_index":662,"title":{},"body":{"injectables/QueueService.html":{}}}],["0.0.1",{"_index":1106,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":954,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":963,"title":{},"body":{"dependencies.html":{}}}],["0.3.22",{"_index":967,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":959,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":934,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":942,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":943,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":941,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":929,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":928,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":930,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":931,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":935,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":940,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":681,"title":{},"body":{"injectables/QueueService.html":{},"overview.html":{}}}],["1).padstart(2",{"_index":661,"title":{},"body":{"injectables/QueueService.html":{}}}],["1).padstart(4",{"_index":677,"title":{},"body":{"injectables/QueueService.html":{}}}],["11.0.0",{"_index":949,"title":{},"body":{"dependencies.html":{}}}],["11.0.5",{"_index":950,"title":{},"body":{"dependencies.html":{}}}],["11.1.0",{"_index":947,"title":{},"body":{"dependencies.html":{}}}],["15",{"_index":680,"title":{},"body":{"injectables/QueueService.html":{}}}],["16.5.0",{"_index":956,"title":{},"body":{"dependencies.html":{}}}],["1d",{"_index":202,"title":{},"body":{"modules/AuthModule.html":{}}}],["3.14.1",{"_index":958,"title":{},"body":{"dependencies.html":{}}}],["3306",{"_index":1114,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4",{"_index":1103,"title":{},"body":{"overview.html":{}}}],["4.0.1",{"_index":960,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":948,"title":{},"body":{"dependencies.html":{}}}],["4.8.1",{"_index":966,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":1102,"title":{},"body":{"overview.html":{}}}],["5.1.1",{"_index":953,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":1104,"title":{},"body":{"overview.html":{}}}],["60000",{"_index":786,"title":{},"body":{"injectables/QueueService.html":{}}}],["7.8.2",{"_index":965,"title":{},"body":{"dependencies.html":{}}}],["_",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["__dirname",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["access_token",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{}}}],["action",{"_index":703,"title":{},"body":{"injectables/QueueService.html":{}}}],["active",{"_index":328,"title":{},"body":{"entities/Counter.html":{},"miscellaneous/enumerations.html":{}}}],["add",{"_index":788,"title":{},"body":{"injectables/QueueService.html":{}}}],["addcounter",{"_index":428,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["addcounter(@body",{"_index":515,"title":{},"body":{"controllers/QueueController.html":{}}}],["addcounter(data",{"_index":443,"title":{},"body":{"controllers/QueueController.html":{}}}],["addcounter(name",{"_index":636,"title":{},"body":{"injectables/QueueService.html":{}}}],["address",{"_index":336,"title":{},"body":{"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{}}}],["afterconnect",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["ahead",{"_index":728,"title":{},"body":{"injectables/QueueService.html":{}}}],["allowing",{"_index":1036,"title":{},"body":{"index.html":{}}}],["already",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{}}}],["amazing",{"_index":1082,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":1010,"title":{},"body":{"index.html":{}}}],["applications",{"_index":985,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":34,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appointment_type",{"_index":523,"title":{},"body":{"entities/QueueDetails.html":{}}}],["appointmenttype",{"_index":337,"title":{},"body":{"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{}}}],["appservice",{"_index":22,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["asc",{"_index":706,"title":{},"body":{"injectables/QueueService.html":{}}}],["assign",{"_index":887,"title":{},"body":{"injectables/RolesService.html":{}}}],["assignrolestouser",{"_index":868,"title":{},"body":{"injectables/RolesService.html":{}}}],["assignrolestouser(userid",{"_index":873,"title":{},"body":{"injectables/RolesService.html":{}}}],["associated",{"_index":755,"title":{},"body":{"injectables/QueueService.html":{}}}],["async",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{}}}],["attempt",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":191,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{},"controllers/RolesController.html":{}}}],["auth.guard.ts",{"_index":356,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/decorators/roles.decorator",{"_index":831,"title":{},"body":{"controllers/RolesController.html":{}}}],["auth/guards/jwt",{"_index":828,"title":{},"body":{"controllers/RolesController.html":{}}}],["auth/guards/roles.guard",{"_index":830,"title":{},"body":{"controllers/RolesController.html":{}}}],["authcontroller",{"_index":117,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":359,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":358,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":45,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1089,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":145,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":1100,"title":{},"body":{"modules.html":{}}}],["average",{"_index":773,"title":{},"body":{"injectables/QueueService.html":{}}}],["averagewaittime",{"_index":778,"title":{},"body":{"injectables/QueueService.html":{}}}],["await",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{}}}],["aws",{"_index":1026,"title":{},"body":{"index.html":{}}}],["backers",{"_index":1083,"title":{},"body":{"index.html":{}}}],["backward",{"_index":918,"title":{},"body":{"entities/User.html":{}}}],["badrequestexception",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('invalid",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{}}}],["based",{"_index":656,"title":{},"body":{"injectables/QueueService.html":{},"index.html":{}}}],["bcrypt",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["bcrypt.compare",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.compare(logindto.password",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{}}}],["beforeconnect",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["being",{"_index":802,"title":{},"body":{"classes/RegisterDto.html":{}}}],["below",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["board",{"_index":1075,"title":{},"body":{"index.html":{}}}],["body",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QueueController.html":{}}}],["boolean",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{},"classes/QueueGateway.html":{},"guards/RolesGuard.html":{}}}],["bootstrap",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["break",{"_index":732,"title":{},"body":{"injectables/QueueService.html":{}}}],["browse",{"_index":1099,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1097,"title":{},"body":{"modules.html":{}}}],["building",{"_index":981,"title":{},"body":{"index.html":{}}}],["bulak_smart_connect",{"_index":1119,"title":{},"body":{"miscellaneous/variables.html":{}}}],["calculate",{"_index":772,"title":{},"body":{"injectables/QueueService.html":{}}}],["called",{"_index":756,"title":{},"body":{"injectables/QueueService.html":{}}}],["callnext",{"_index":429,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["callnext(@param('counterid",{"_index":513,"title":{},"body":{"controllers/QueueController.html":{}}}],["callnext(counterid",{"_index":447,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["canactivate",{"_index":842,"title":{},"body":{"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":846,"title":{},"body":{"guards/RolesGuard.html":{}}}],["cancelled",{"_index":423,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{},"miscellaneous/enumerations.html":{}}}],["cancelledcount",{"_index":768,"title":{},"body":{"injectables/QueueService.html":{}}}],["cascade",{"_index":551,"title":{},"body":{"entities/QueueDetails.html":{}}}],["cascade'})@joincolumn({name",{"_index":537,"title":{},"body":{"entities/QueueDetails.html":{}}}],["catch",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["channel",{"_index":1051,"title":{},"body":{"index.html":{}}}],["check",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["citizen",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["class",{"_index":25,"title":{"classes/CreateQueueDto.html":{},"classes/LoginDto.html":{},"classes/QueueGateway.html":{},"classes/RegisterDto.html":{},"classes/UpdateQueueDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":333,"title":{},"body":{"classes/CreateQueueDto.html":{},"classes/LoginDto.html":{},"classes/QueueGateway.html":{},"classes/RegisterDto.html":{},"classes/UpdateQueueDto.html":{},"overview.html":{}}}],["clicks",{"_index":1035,"title":{},"body":{"index.html":{}}}],["client",{"_index":575,"title":{},"body":{"classes/QueueGateway.html":{}}}],["client.id",{"_index":604,"title":{},"body":{"classes/QueueGateway.html":{}}}],["client.join(`counter_${counterid",{"_index":611,"title":{},"body":{"classes/QueueGateway.html":{}}}],["client.join(`queue_${queueid",{"_index":606,"title":{},"body":{"classes/QueueGateway.html":{}}}],["clients",{"_index":614,"title":{},"body":{"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["cloud",{"_index":1021,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":179,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":181,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":180,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":182,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_queuemodule",{"_index":622,"title":{},"body":{"modules/QueueModule.html":{},"overview.html":{}}}],["cluster_queuemodule_exports",{"_index":623,"title":{},"body":{"modules/QueueModule.html":{},"overview.html":{}}}],["cluster_queuemodule_providers",{"_index":624,"title":{},"body":{"modules/QueueModule.html":{},"overview.html":{}}}],["cluster_rolesmodule",{"_index":860,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_rolesmodule_exports",{"_index":861,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_rolesmodule_providers",{"_index":862,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["code",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["column",{"_index":317,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["column({name",{"_index":313,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["column({nullable",{"_index":521,"title":{},"body":{"entities/QueueDetails.html":{},"entities/Role.html":{}}}],["column({type",{"_index":320,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{}}}],["column({unique",{"_index":809,"title":{},"body":{"entities/Role.html":{},"entities/User.html":{}}}],["come",{"_index":1042,"title":{},"body":{"index.html":{}}}],["compatibility",{"_index":919,"title":{},"body":{"entities/User.html":{}}}],["completed",{"_index":422,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{},"miscellaneous/enumerations.html":{}}}],["completed_at",{"_index":395,"title":{},"body":{"entities/Queue.html":{}}}],["completedat",{"_index":388,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{}}}],["completedcount",{"_index":767,"title":{},"body":{"injectables/QueueService.html":{}}}],["completedqueues",{"_index":775,"title":{},"body":{"injectables/QueueService.html":{}}}],["completedqueues.length",{"_index":779,"title":{},"body":{"injectables/QueueService.html":{}}}],["completedqueues.reduce((total",{"_index":781,"title":{},"body":{"injectables/QueueService.html":{}}}],["completion",{"_index":716,"title":{},"body":{"injectables/QueueService.html":{}}}],["config",{"_index":197,"title":{},"body":{"modules/AuthModule.html":{}}}],["config.get('jwt_secret",{"_index":199,"title":{},"body":{"modules/AuthModule.html":{}}}],["config/database.config",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('db_host",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_name",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_password",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_port",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_username",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('jwt_secret",{"_index":371,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get('node_env",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["conflictexception",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{}}}],["conflictexception('email",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{}}}],["conflictexception('username",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["connected",{"_index":603,"title":{},"body":{"classes/QueueGateway.html":{}}}],["connection",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["connection.query('set",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["console.error('login",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('comparing",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('generated",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('login",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["console.log('password",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('register",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log('stored",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('user",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["const",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{}}}],["constructor",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{}}}],["constructor(configservice",{"_index":362,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(private",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{}}}],["constructor(queuerepository",{"_index":631,"title":{},"body":{"injectables/QueueService.html":{}}}],["constructor(queueservice",{"_index":566,"title":{},"body":{"classes/QueueGateway.html":{}}}],["constructor(reflector",{"_index":843,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(rolesrepository",{"_index":870,"title":{},"body":{"injectables/RolesService.html":{}}}],["constructor(usersrepository",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{}}}],["context",{"_index":849,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":856,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":855,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":857,"title":{},"body":{"guards/RolesGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/QueueController.html":{},"controllers/RolesController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/QueueController.html":{},"controllers/RolesController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('queue",{"_index":493,"title":{},"body":{"controllers/QueueController.html":{}}}],["controller('roles",{"_index":832,"title":{},"body":{"controllers/RolesController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/QueueController.html":{},"modules/QueueModule.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"overview.html":{}}}],["convert",{"_index":787,"title":{},"body":{"injectables/QueueService.html":{}}}],["cors",{"_index":597,"title":{},"body":{"classes/QueueGateway.html":{}}}],["count",{"_index":664,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter",{"_index":298,"title":{"entities/Counter.html":{}},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"coverage.html":{}}}],["counter.currentqueue",{"_index":397,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{}}}],["counter.currentqueue.completedat",{"_index":740,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter.currentqueue.status",{"_index":739,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter.currentqueueid",{"_index":744,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter.id",{"_index":762,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter.name",{"_index":752,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter/entities/counter.entity",{"_index":419,"title":{},"body":{"entities/Queue.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["counter_number",{"_index":399,"title":{},"body":{"entities/Queue.html":{}}}],["counterid",{"_index":451,"title":{},"body":{"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["countername",{"_index":761,"title":{},"body":{"injectables/QueueService.html":{}}}],["counternumber",{"_index":389,"title":{},"body":{"entities/Queue.html":{},"classes/UpdateQueueDto.html":{}}}],["counterrepository",{"_index":633,"title":{},"body":{"injectables/QueueService.html":{}}}],["counters",{"_index":790,"title":{},"body":{"injectables/QueueService.html":{}}}],["counterstatus",{"_index":319,"title":{},"body":{"entities/Counter.html":{},"injectables/QueueService.html":{},"miscellaneous/enumerations.html":{}}}],["counterstatus.active",{"_index":331,"title":{},"body":{"entities/Counter.html":{}}}],["courses",{"_index":1057,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":924,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":430,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["create(@body",{"_index":494,"title":{},"body":{"controllers/QueueController.html":{}}}],["create(createqueuedto",{"_index":452,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["created",{"_index":666,"title":{},"body":{"injectables/QueueService.html":{}}}],["created_at",{"_index":402,"title":{},"body":{"entities/Queue.html":{},"entities/User.html":{}}}],["createdat",{"_index":390,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{},"entities/User.html":{}}}],["createdatecolumn",{"_index":417,"title":{},"body":{"entities/Queue.html":{},"entities/User.html":{}}}],["createdatecolumn({name",{"_index":401,"title":{},"body":{"entities/Queue.html":{},"entities/User.html":{}}}],["createqueuedto",{"_index":332,"title":{"classes/CreateQueueDto.html":{}},"body":{"classes/CreateQueueDto.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"coverage.html":{}}}],["createqueuedto.address",{"_index":695,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.appointmenttype",{"_index":698,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.firstname",{"_index":692,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.lastname",{"_index":693,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.middleinitial",{"_index":694,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.phonenumber",{"_index":696,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.reasonofvisit",{"_index":697,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.userid",{"_index":691,"title":{},"body":{"injectables/QueueService.html":{}}}],["credentials",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{}}}],["current",{"_index":738,"title":{},"body":{"injectables/QueueService.html":{}}}],["current_queue_id",{"_index":309,"title":{},"body":{"entities/Counter.html":{}}}],["currentqueue",{"_index":301,"title":{},"body":{"entities/Counter.html":{},"injectables/QueueService.html":{}}}],["currentqueueid",{"_index":302,"title":{},"body":{"entities/Counter.html":{}}}],["data",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{}}}],["database",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["databaseconfig",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["datasource",{"_index":975,"title":{},"body":{"miscellaneous/functions.html":{}}}],["date",{"_index":394,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{},"entities/User.html":{}}}],["date(today",{"_index":669,"title":{},"body":{"injectables/QueueService.html":{}}}],["datestr",{"_index":659,"title":{},"body":{"injectables/QueueService.html":{}}}],["debug",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["debugging",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{}}}],["declarations",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"overview.html":{}}}],["decorators",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{}}}],["decorators/roles.decorator",{"_index":852,"title":{},"body":{"guards/RolesGuard.html":{}}}],["deeper",{"_index":1053,"title":{},"body":{"index.html":{}}}],["default",{"_index":322,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"classes/QueueGateway.html":{},"miscellaneous/variables.html":{}}}],["default_role_id",{"_index":898,"title":{},"body":{"entities/User.html":{}}}],["defaultrole",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{}}}],["defaultroleid",{"_index":896,"title":{},"body":{"entities/User.html":{}}}],["defaultstrategy",{"_index":194,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{}}}],["delete",{"_index":486,"title":{},"body":{"controllers/QueueController.html":{}}}],["dependencies",{"_index":36,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":1008,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":1025,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":1018,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":1034,"title":{},"body":{"index.html":{}}}],["description",{"_index":805,"title":{},"body":{"entities/Role.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":391,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{}}}],["details.entity",{"_index":418,"title":{},"body":{"entities/Queue.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["details.entity.ts",{"_index":519,"title":{},"body":{"entities/QueueDetails.html":{},"coverage.html":{}}}],["details.entity.ts:14",{"_index":527,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:17",{"_index":541,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:21",{"_index":540,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:24",{"_index":547,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:28",{"_index":546,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:31",{"_index":526,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:34",{"_index":529,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:37",{"_index":531,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:40",{"_index":522,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:43",{"_index":533,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:46",{"_index":543,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:49",{"_index":524,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.queue",{"_index":406,"title":{},"body":{"entities/Queue.html":{}}}],["determine",{"_index":667,"title":{},"body":{"injectables/QueueService.html":{}}}],["development",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["devtools",{"_index":1063,"title":{},"body":{"index.html":{}}}],["disconnected",{"_index":605,"title":{},"body":{"classes/QueueGateway.html":{}}}],["discord",{"_index":1050,"title":{},"body":{"index.html":{}}}],["dive",{"_index":1052,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":925,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dotenv",{"_index":955,"title":{},"body":{"dependencies.html":{}}}],["dropschema",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["dto/create",{"_index":489,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["dto/login.dto",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/register.dto",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/update",{"_index":491,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["due",{"_index":800,"title":{},"body":{"classes/RegisterDto.html":{}}}],["e2e",{"_index":1003,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":982,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":1016,"title":{},"body":{"index.html":{}}}],["email",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/RegisterDto.html":{},"entities/User.html":{}}}],["emailorusername",{"_index":384,"title":{},"body":{"classes/LoginDto.html":{}}}],["endpoint",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{}}}],["ensure",{"_index":1014,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":1066,"title":{},"body":{"index.html":{}}}],["entities",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["entities/queue",{"_index":628,"title":{},"body":{"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["entities/queue.entity",{"_index":492,"title":{},"body":{"controllers/QueueController.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/UpdateQueueDto.html":{}}}],["entities/role.entity",{"_index":864,"title":{},"body":{"modules/RolesModule.html":{},"injectables/RolesService.html":{}}}],["entities/user.entity",{"_index":923,"title":{},"body":{"modules/UsersModule.html":{}}}],["entity",{"_index":297,"title":{"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{}},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"entities/User.html":{},"coverage.html":{}}}],["entity('counters",{"_index":330,"title":{},"body":{"entities/Counter.html":{}}}],["entity('queue_details",{"_index":550,"title":{},"body":{"entities/QueueDetails.html":{}}}],["entity('queues",{"_index":424,"title":{},"body":{"entities/Queue.html":{}}}],["entity('roles",{"_index":815,"title":{},"body":{"entities/Role.html":{}}}],["entity('users",{"_index":916,"title":{},"body":{"entities/User.html":{}}}],["entity{.ts,.js",{"_index":86,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["enum",{"_index":321,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{}}}],["enumerations",{"_index":969,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":373,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["environments",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["error",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["error('jwt_secret",{"_index":372,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["error('user",{"_index":885,"title":{},"body":{"injectables/RolesService.html":{}}}],["estimated_wait_time",{"_index":408,"title":{},"body":{"entities/Queue.html":{}}}],["estimatedwaittime",{"_index":392,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{}}}],["estimation",{"_index":683,"title":{},"body":{"injectables/QueueService.html":{}}}],["example",{"_index":991,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":847,"title":{},"body":{"guards/RolesGuard.html":{}}}],["existinguserbyemail",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{}}}],["existinguserbyusername",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{}}}],["exists",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{}}}],["experience",{"_index":1055,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":201,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{}}}],["exports",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":952,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":357,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["extractjwt",{"_index":367,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":377,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["failed",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["false",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtStrategy.html":{},"entities/Role.html":{}}}],["fast",{"_index":1029,"title":{},"body":{"index.html":{}}}],["features",{"_index":1038,"title":{},"body":{"index.html":{}}}],["few",{"_index":1031,"title":{},"body":{"index.html":{}}}],["field",{"_index":801,"title":{},"body":{"classes/RegisterDto.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["find",{"_index":742,"title":{},"body":{"injectables/QueueService.html":{},"injectables/RolesService.html":{}}}],["findall",{"_index":431,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["findbyname",{"_index":869,"title":{},"body":{"injectables/RolesService.html":{}}}],["findbyname(name",{"_index":877,"title":{},"body":{"injectables/RolesService.html":{}}}],["findbyqueuenumber",{"_index":432,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["findbyqueuenumber(@param('queuenumber",{"_index":505,"title":{},"body":{"controllers/QueueController.html":{}}}],["findbyqueuenumber(queuenumber",{"_index":455,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["findbystatus",{"_index":433,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["findbystatus(@param('status",{"_index":497,"title":{},"body":{"controllers/QueueController.html":{}}}],["findbystatus(status",{"_index":458,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["findcompleted",{"_index":434,"title":{},"body":{"controllers/QueueController.html":{}}}],["findone",{"_index":435,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["findone(@param('id",{"_index":503,"title":{},"body":{"controllers/QueueController.html":{},"controllers/RolesController.html":{}}}],["findone(id",{"_index":463,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["findpending",{"_index":436,"title":{},"body":{"controllers/QueueController.html":{}}}],["findserving",{"_index":437,"title":{},"body":{"controllers/QueueController.html":{}}}],["first_name",{"_index":525,"title":{},"body":{"entities/QueueDetails.html":{},"entities/User.html":{}}}],["firstname",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"entities/User.html":{}}}],["fk_current_queue",{"_index":311,"title":{},"body":{"entities/Counter.html":{}}}],["fk_queue_id",{"_index":539,"title":{},"body":{"entities/QueueDetails.html":{}}}],["fk_user_id",{"_index":545,"title":{},"body":{"entities/QueueDetails.html":{}}}],["focus",{"_index":1037,"title":{},"body":{"index.html":{}}}],["follow",{"_index":1069,"title":{},"body":{"index.html":{}}}],["foreign_key_checks=0",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["foreign_key_checks=1",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["foreignkeyconstraintname",{"_index":310,"title":{},"body":{"entities/Counter.html":{},"entities/QueueDetails.html":{}}}],["format",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{}}}],["forwardref",{"_index":596,"title":{},"body":{"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["found",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{}}}],["framework",{"_index":980,"title":{},"body":{"index.html":{}}}],["frontend",{"_index":599,"title":{},"body":{"classes/QueueGateway.html":{}}}],["full",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["function",{"_index":938,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":972,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":1033,"title":{},"body":{"index.html":{}}}],["generate",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{}}}],["get(':id",{"_index":464,"title":{},"body":{"controllers/QueueController.html":{},"controllers/RolesController.html":{}}}],["get(':id')@roles('admin",{"_index":822,"title":{},"body":{"controllers/RolesController.html":{}}}],["get(':id/details",{"_index":473,"title":{},"body":{"controllers/QueueController.html":{}}}],["get(':id/position",{"_index":476,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('completed",{"_index":461,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('counters",{"_index":470,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('health",{"_index":17,"title":{},"body":{"controllers/AppController.html":{}}}],["get('number/:queuenumber",{"_index":456,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('pending",{"_index":466,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('profile",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('serving",{"_index":468,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('stats",{"_index":478,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('status/:status",{"_index":459,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('user/:userid",{"_index":836,"title":{},"body":{"controllers/RolesController.html":{}}}],["get('user/:userid')@roles('admin",{"_index":825,"title":{},"body":{"controllers/RolesController.html":{}}}],["get()@roles('admin",{"_index":819,"title":{},"body":{"controllers/RolesController.html":{}}}],["getcounters",{"_index":438,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getprofile",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["getprofile(@request",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(req",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(userid",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{}}}],["getqueuedetails",{"_index":439,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["getqueuedetails(@param('id",{"_index":507,"title":{},"body":{"controllers/QueueController.html":{}}}],["getqueuedetails(id",{"_index":472,"title":{},"body":{"controllers/QueueController.html":{}}}],["getqueuedetails(queueid",{"_index":645,"title":{},"body":{"injectables/QueueService.html":{}}}],["getqueueposition",{"_index":440,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["getqueueposition(@param('id",{"_index":509,"title":{},"body":{"controllers/QueueController.html":{}}}],["getqueueposition(id",{"_index":475,"title":{},"body":{"controllers/QueueController.html":{}}}],["getqueueposition(queueid",{"_index":647,"title":{},"body":{"injectables/QueueService.html":{}}}],["getstats",{"_index":441,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["getting",{"_index":976,"title":{"index.html":{}},"body":{}}],["getuserroles",{"_index":818,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["getuserroles(@param('userid",{"_index":837,"title":{},"body":{"controllers/RolesController.html":{}}}],["getuserroles(userid",{"_index":824,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["global",{"_index":619,"title":{},"body":{"classes/QueueGateway.html":{}}}],["graph",{"_index":1060,"title":{},"body":{"index.html":{},"modules.html":{}}}],["grow",{"_index":1079,"title":{},"body":{"index.html":{}}}],["guard",{"_index":839,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":840,"title":{},"body":{"guards/RolesGuard.html":{}}}],["guards/jwt",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{}}}],["handleconnection",{"_index":559,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handleconnection(client",{"_index":572,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handledisconnect",{"_index":560,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handledisconnect(client",{"_index":577,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlegetqueueposition",{"_index":561,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlegetqueueposition(client",{"_index":579,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoincounter",{"_index":562,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoincounter(client",{"_index":582,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoinqueue",{"_index":563,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoinqueue(client",{"_index":585,"title":{},"body":{"classes/QueueGateway.html":{}}}],["hands",{"_index":1054,"title":{},"body":{"index.html":{}}}],["handy",{"_index":1043,"title":{},"body":{"index.html":{}}}],["hash",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["healthcheck",{"_index":10,"title":{},"body":{"controllers/AppController.html":{}}}],["hello",{"_index":115,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":1058,"title":{},"body":{"index.html":{}}}],["here",{"_index":1087,"title":{},"body":{"index.html":{}}}],["hit",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{}}}],["host",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["https://nestjs.com",{"_index":1093,"title":{},"body":{"index.html":{}}}],["id",{"_index":303,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"entities/User.html":{}}}],["identifier",{"_index":926,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":378,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":554,"title":{},"body":{"classes/QueueGateway.html":{},"guards/RolesGuard.html":{}}}],["import",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{}}}],["imports",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}}}],["inactive",{"_index":329,"title":{},"body":{"entities/Counter.html":{},"miscellaneous/enumerations.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{}}}],["information",{"_index":1019,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":1040,"title":{},"body":{"index.html":{}}}],["inject",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["inject(forwardref",{"_index":601,"title":{},"body":{"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["injectable",{"_index":111,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/QueueService.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"coverage.html":{}}}],["injectables",{"_index":112,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{},"overview.html":{}}}],["injectrepository",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{}}}],["injectrepository(counter",{"_index":655,"title":{},"body":{"injectables/QueueService.html":{}}}],["injectrepository(queue",{"_index":653,"title":{},"body":{"injectables/QueueService.html":{}}}],["injectrepository(queuedetails",{"_index":654,"title":{},"body":{"injectables/QueueService.html":{}}}],["injectrepository(role",{"_index":881,"title":{},"body":{"injectables/RolesService.html":{}}}],["injectrepository(user",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RolesService.html":{}}}],["install",{"_index":1032,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":993,"title":{},"body":{"index.html":{}}}],["interact",{"_index":1061,"title":{},"body":{"index.html":{}}}],["invalid",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{}}}],["inversejoincolumn",{"_index":911,"title":{},"body":{"entities/User.html":{}}}],["isenum",{"_index":893,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["isenum(queuestatus",{"_index":894,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["isenum(queuestatus)@isoptional",{"_index":891,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["isglobal",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["isnotempty",{"_index":353,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["isoptional",{"_index":350,"title":{},"body":{"classes/CreateQueueDto.html":{},"classes/UpdateQueueDto.html":{}}}],["ispasswordvalid",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{}}}],["isstring",{"_index":352,"title":{},"body":{"classes/CreateQueueDto.html":{},"classes/UpdateQueueDto.html":{}}}],["isstring()@isnotempty",{"_index":343,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["isstring()@isoptional",{"_index":341,"title":{},"body":{"classes/CreateQueueDto.html":{},"classes/UpdateQueueDto.html":{}}}],["isvalidemail",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{}}}],["isvalidemail(email",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{}}}],["it's",{"_index":725,"title":{},"body":{"injectables/QueueService.html":{}}}],["job",{"_index":1072,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":1074,"title":{},"body":{"index.html":{}}}],["join",{"_index":1085,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":326,"title":{},"body":{"entities/Counter.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["jointable",{"_index":914,"title":{},"body":{"entities/User.html":{}}}],["jwt",{"_index":195,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":192,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":149,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/RolesController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":376,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":185,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":196,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":183,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":1090,"title":{},"body":{"index.html":{}}}],["keep",{"_index":917,"title":{},"body":{"entities/User.html":{}}}],["key",{"_index":1011,"title":{},"body":{"index.html":{}}}],["last_name",{"_index":528,"title":{},"body":{"entities/QueueDetails.html":{},"entities/User.html":{}}}],["lastname",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"entities/User.html":{}}}],["learn",{"_index":1046,"title":{},"body":{"index.html":{}}}],["legend",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"overview.html":{}}}],["lessthanorequal",{"_index":652,"title":{},"body":{"injectables/QueueService.html":{}}}],["lessthanorequal(new",{"_index":776,"title":{},"body":{"injectables/QueueService.html":{}}}],["lessthanorequal(queue.createdat",{"_index":730,"title":{},"body":{"injectables/QueueService.html":{}}}],["lessthanorequal(queueid",{"_index":731,"title":{},"body":{"injectables/QueueService.html":{}}}],["lessthanorequal(today",{"_index":673,"title":{},"body":{"injectables/QueueService.html":{}}}],["license",{"_index":1096,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1077,"title":{},"body":{"index.html":{}}}],["line",{"_index":726,"title":{},"body":{"injectables/QueueService.html":{}}}],["linkedin",{"_index":1071,"title":{},"body":{"index.html":{}}}],["literal",{"_index":444,"title":{},"body":{"controllers/QueueController.html":{}}}],["localhost",{"_index":1112,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logger",{"_index":557,"title":{},"body":{"classes/QueueGateway.html":{}}}],["logger(queuegateway.name",{"_index":569,"title":{},"body":{"classes/QueueGateway.html":{}}}],["logging",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["login",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@body",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(logindto",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logindto",{"_index":132,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["logindto.emailorusername",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto.password",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["looking",{"_index":1020,"title":{},"body":{"index.html":{}}}],["loop",{"_index":1068,"title":{},"body":{"index.html":{}}}],["loss",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["makes",{"_index":1027,"title":{},"body":{"index.html":{}}}],["managing",{"_index":1039,"title":{},"body":{"index.html":{}}}],["many",{"_index":727,"title":{},"body":{"injectables/QueueService.html":{}}}],["manytomany",{"_index":814,"title":{},"body":{"entities/Role.html":{},"entities/User.html":{}}}],["manytomany(undefined",{"_index":811,"title":{},"body":{"entities/Role.html":{}}}],["manytomany(undefined)@jointable({name",{"_index":909,"title":{},"body":{"entities/User.html":{}}}],["manytoone",{"_index":548,"title":{},"body":{"entities/QueueDetails.html":{},"entities/User.html":{}}}],["manytoone(undefined",{"_index":534,"title":{},"body":{"entities/QueueDetails.html":{},"entities/User.html":{}}}],["mark",{"_index":737,"title":{},"body":{"injectables/QueueService.html":{}}}],["matching",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.floor",{"_index":785,"title":{},"body":{"injectables/QueueService.html":{}}}],["mau",{"_index":1023,"title":{},"body":{"index.html":{}}}],["message",{"_index":746,"title":{},"body":{"injectables/QueueService.html":{}}}],["metadata",{"_index":962,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{}}}],["middle_initial",{"_index":530,"title":{},"body":{"entities/QueueDetails.html":{}}}],["middle_name",{"_index":905,"title":{},"body":{"entities/User.html":{}}}],["middleinitial",{"_index":338,"title":{},"body":{"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{}}}],["middlename",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{},"classes/RegisterDto.html":{},"entities/User.html":{}}}],["migrationsrun",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["minutes",{"_index":684,"title":{},"body":{"injectables/QueueService.html":{}}}],["miscellaneous",{"_index":968,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1076,"title":{},"body":{"index.html":{}}}],["mode",{"_index":997,"title":{},"body":{"index.html":{}}}],["module",{"_index":33,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":35,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/queue/queue.module",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":747,"title":{},"body":{"injectables/QueueService.html":{},"index.html":{}}}],["mysql",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["mysql2",{"_index":957,"title":{},"body":{"dependencies.html":{}}}],["myśliwiec",{"_index":1091,"title":{},"body":{"index.html":{}}}],["name",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"injectables/JwtStrategy.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"miscellaneous/functions.html":{}}}],["need",{"_index":1064,"title":{},"body":{"index.html":{}}}],["nest",{"_index":986,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1095,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":1009,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":850,"title":{},"body":{"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":186,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":188,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":951,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":594,"title":{},"body":{"classes/QueueGateway.html":{},"dependencies.html":{}}}],["new",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{},"coverage.html":{}}}],["next",{"_index":449,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["nextcalled",{"_index":764,"title":{},"body":{"injectables/QueueService.html":{}}}],["nextqueue",{"_index":743,"title":{},"body":{"injectables/QueueService.html":{}}}],["nextqueue.counternumber",{"_index":751,"title":{},"body":{"injectables/QueueService.html":{}}}],["nextqueue.id",{"_index":754,"title":{},"body":{"injectables/QueueService.html":{}}}],["nextqueue.status",{"_index":749,"title":{},"body":{"injectables/QueueService.html":{}}}],["node.js",{"_index":979,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":651,"title":{},"body":{"injectables/QueueService.html":{},"injectables/RolesService.html":{}}}],["notfoundexception(`counter",{"_index":736,"title":{},"body":{"injectables/QueueService.html":{}}}],["notfoundexception(`details",{"_index":711,"title":{},"body":{"injectables/QueueService.html":{}}}],["notfoundexception(`queue",{"_index":708,"title":{},"body":{"injectables/QueueService.html":{}}}],["notfoundexception(`role",{"_index":884,"title":{},"body":{"injectables/RolesService.html":{}}}],["notify",{"_index":701,"title":{},"body":{"injectables/QueueService.html":{}}}],["notifycounterupdate",{"_index":564,"title":{},"body":{"classes/QueueGateway.html":{}}}],["notifycounterupdate(counterid",{"_index":588,"title":{},"body":{"classes/QueueGateway.html":{}}}],["notifyqueueupdate",{"_index":565,"title":{},"body":{"classes/QueueGateway.html":{}}}],["notifyqueueupdate(queueid",{"_index":590,"title":{},"body":{"classes/QueueGateway.html":{}}}],["npm",{"_index":992,"title":{},"body":{"index.html":{}}}],["null",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{},"entities/Counter.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{}}}],["nullable",{"_index":307,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["number",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"entities/Role.html":{},"injectables/RolesService.html":{},"entities/User.html":{}}}],["offer",{"_index":1073,"title":{},"body":{"index.html":{}}}],["official",{"_index":1024,"title":{},"body":{"index.html":{}}}],["ok",{"_index":30,"title":{},"body":{"controllers/AppController.html":{}}}],["ondelete",{"_index":536,"title":{},"body":{"entities/QueueDetails.html":{}}}],["one",{"_index":729,"title":{},"body":{"injectables/QueueService.html":{}}}],["onetomany",{"_index":416,"title":{},"body":{"entities/Queue.html":{}}}],["onetomany(undefined",{"_index":405,"title":{},"body":{"entities/Queue.html":{}}}],["onetoone",{"_index":325,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{}}}],["onetoone(undefined",{"_index":305,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{}}}],["ongatewayconnection",{"_index":555,"title":{},"body":{"classes/QueueGateway.html":{}}}],["ongatewaydisconnect",{"_index":556,"title":{},"body":{"classes/QueueGateway.html":{}}}],["open",{"_index":1078,"title":{},"body":{"index.html":{}}}],["optional",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"miscellaneous/functions.html":{}}}],["order",{"_index":705,"title":{},"body":{"injectables/QueueService.html":{}}}],["origin",{"_index":598,"title":{},"body":{"classes/QueueGateway.html":{}}}],["out",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":1101,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":946,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":485,"title":{},"body":{"controllers/QueueController.html":{},"controllers/RolesController.html":{}}}],["parameters",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"miscellaneous/functions.html":{}}}],["parseint(process.env.db_port",{"_index":1113,"title":{},"body":{"miscellaneous/variables.html":{}}}],["part",{"_index":1065,"title":{},"body":{"index.html":{}}}],["passport",{"_index":369,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":187,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":193,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":366,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":361,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["password.length",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{}}}],["patch",{"_index":484,"title":{},"body":{"controllers/QueueController.html":{}}}],["patch(':id",{"_index":482,"title":{},"body":{"controllers/QueueController.html":{}}}],["payload",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.email",{"_index":381,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.roles",{"_index":382,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":380,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["pending",{"_index":420,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{},"miscellaneous/enumerations.html":{}}}],["pendingcount",{"_index":765,"title":{},"body":{"injectables/QueueService.html":{}}}],["per",{"_index":685,"title":{},"body":{"injectables/QueueService.html":{}}}],["person",{"_index":686,"title":{},"body":{"injectables/QueueService.html":{}}}],["phone_number",{"_index":532,"title":{},"body":{"entities/QueueDetails.html":{}}}],["phonenumber",{"_index":339,"title":{},"body":{"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{}}}],["platform",{"_index":1022,"title":{},"body":{"index.html":{}}}],["please",{"_index":1049,"title":{},"body":{"index.html":{}}}],["port",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["position",{"_index":609,"title":{},"body":{"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["possible",{"_index":1017,"title":{},"body":{"index.html":{}}}],["post",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QueueController.html":{}}}],["post('counter",{"_index":445,"title":{},"body":{"controllers/QueueController.html":{}}}],["post('counter/:counterid/call",{"_index":448,"title":{},"body":{"controllers/QueueController.html":{}}}],["post('login",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QueueController.html":{},"controllers/RolesController.html":{}}}],["prevent",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["primarygeneratedcolumn",{"_index":315,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["private",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{}}}],["process.env.db_host",{"_index":1111,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_name",{"_index":1118,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_password",{"_index":1117,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_username",{"_index":1115,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["production",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"classes/QueueGateway.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["progressive",{"_index":978,"title":{},"body":{"index.html":{}}}],["project",{"_index":989,"title":{},"body":{"index.html":{}}}],["promise",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RolesService.html":{}}}],["promise.all",{"_index":770,"title":{},"body":{"injectables/QueueService.html":{}}}],["properties",{"_index":300,"title":{"properties.html":{}},"body":{"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"properties.html":{}}}],["providers",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"overview.html":{}}}],["questions",{"_index":1047,"title":{},"body":{"index.html":{}}}],["queue",{"_index":304,"title":{"entities/Queue.html":{}},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"coverage.html":{}}}],["queue.completedat",{"_index":719,"title":{},"body":{"injectables/QueueService.html":{}}}],["queue.completedat.gettime",{"_index":783,"title":{},"body":{"injectables/QueueService.html":{}}}],["queue.controller",{"_index":626,"title":{},"body":{"modules/QueueModule.html":{}}}],["queue.counter",{"_index":306,"title":{},"body":{"entities/Counter.html":{}}}],["queue.counternumber",{"_index":721,"title":{},"body":{"injectables/QueueService.html":{}}}],["queue.createdat.gettime",{"_index":784,"title":{},"body":{"injectables/QueueService.html":{}}}],["queue.details",{"_index":535,"title":{},"body":{"entities/QueueDetails.html":{}}}],["queue.dto",{"_index":490,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["queue.dto.ts",{"_index":335,"title":{},"body":{"classes/CreateQueueDto.html":{},"classes/UpdateQueueDto.html":{},"coverage.html":{}}}],["queue.dto.ts:10",{"_index":346,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:11",{"_index":890,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["queue.dto.ts:14",{"_index":347,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:18",{"_index":342,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:22",{"_index":348,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:26",{"_index":349,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:30",{"_index":344,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:33",{"_index":351,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:6",{"_index":345,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:7",{"_index":892,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["queue.entity",{"_index":549,"title":{},"body":{"entities/QueueDetails.html":{}}}],["queue.gateway",{"_index":627,"title":{},"body":{"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["queue.service",{"_index":488,"title":{},"body":{"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{}}}],["queue.status",{"_index":715,"title":{},"body":{"injectables/QueueService.html":{}}}],["queue/entities/queue.entity",{"_index":327,"title":{},"body":{"entities/Counter.html":{}}}],["queue_id",{"_index":538,"title":{},"body":{"entities/QueueDetails.html":{}}}],["queue_number",{"_index":411,"title":{},"body":{"entities/Queue.html":{}}}],["queuecontroller",{"_index":426,"title":{"controllers/QueueController.html":{}},"body":{"controllers/QueueController.html":{},"modules/QueueModule.html":{},"coverage.html":{}}}],["queuedata",{"_index":607,"title":{},"body":{"classes/QueueGateway.html":{}}}],["queuedetails",{"_index":404,"title":{"entities/QueueDetails.html":{}},"body":{"entities/Queue.html":{},"entities/QueueDetails.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"coverage.html":{}}}],["queuedetailsrepository",{"_index":632,"title":{},"body":{"injectables/QueueService.html":{}}}],["queuegateway",{"_index":552,"title":{"classes/QueueGateway.html":{}},"body":{"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"coverage.html":{},"overview.html":{}}}],["queueid",{"_index":520,"title":{},"body":{"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["queuemodule",{"_index":46,"title":{"modules/QueueModule.html":{}},"body":{"modules/AppModule.html":{},"modules/QueueModule.html":{},"modules.html":{},"overview.html":{}}}],["queuenumber",{"_index":393,"title":{},"body":{"entities/Queue.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["queuerepository",{"_index":635,"title":{},"body":{"injectables/QueueService.html":{}}}],["queues",{"_index":665,"title":{},"body":{"injectables/QueueService.html":{}}}],["queueservice",{"_index":487,"title":{"injectables/QueueService.html":{}},"body":{"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"coverage.html":{},"overview.html":{}}}],["queuestatus",{"_index":414,"title":{},"body":{"entities/Queue.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"classes/UpdateQueueDto.html":{},"miscellaneous/enumerations.html":{}}}],["queuestatus.cancelled",{"_index":771,"title":{},"body":{"injectables/QueueService.html":{}}}],["queuestatus.completed",{"_index":718,"title":{},"body":{"injectables/QueueService.html":{}}}],["queuestatus.pending",{"_index":425,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{}}}],["queuestatus.serving",{"_index":750,"title":{},"body":{"injectables/QueueService.html":{}}}],["read",{"_index":1086,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"controllers/RolesController.html":{}}}],["ready",{"_index":1007,"title":{},"body":{"index.html":{}}}],["real",{"_index":1062,"title":{},"body":{"index.html":{}}}],["reason_of_visit",{"_index":542,"title":{},"body":{"entities/QueueDetails.html":{}}}],["reasonofvisit",{"_index":340,"title":{},"body":{"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{}}}],["received",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["referencedcolumnname",{"_index":920,"title":{},"body":{"entities/User.html":{}}}],["reflect",{"_index":961,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":844,"title":{},"body":{"guards/RolesGuard.html":{}}}],["register",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["register(@body",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(registerdto",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["registerdto",{"_index":137,"title":{"classes/RegisterDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RegisterDto.html":{},"coverage.html":{}}}],["relations",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{}}}],["remove",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{}}}],["repository",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{},"index.html":{}}}],["req",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{}}}],["request",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{}}}],["requiredroles",{"_index":853,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.some((role",{"_index":858,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiring",{"_index":1030,"title":{},"body":{"index.html":{}}}],["reset",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"overview.html":{}}}],["resources",{"_index":1041,"title":{},"body":{"index.html":{}}}],["response",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{}}}],["result",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/QueueService.html":{}}}],["results",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{}}}],["returns",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{}}}],["role",{"_index":803,"title":{"entities/Role.html":{}},"body":{"entities/Role.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"coverage.html":{}}}],["role.name",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{}}}],["role_id",{"_index":921,"title":{},"body":{"entities/User.html":{}}}],["roleids",{"_index":874,"title":{},"body":{"injectables/RolesService.html":{}}}],["rolenames",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{}}}],["roles",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles('admin",{"_index":833,"title":{},"body":{"controllers/RolesController.html":{}}}],["roles.controller",{"_index":865,"title":{},"body":{"modules/RolesModule.html":{}}}],["roles.map((role",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["roles.service",{"_index":827,"title":{},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{}}}],["roles/entities/role.entity",{"_index":915,"title":{},"body":{"entities/User.html":{}}}],["roles/roles.module",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["roles/roles.service",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{}}}],["roles_key",{"_index":851,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolescontroller",{"_index":816,"title":{"controllers/RolesController.html":{}},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{},"coverage.html":{}}}],["rolesguard",{"_index":829,"title":{"guards/RolesGuard.html":{}},"body":{"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["rolesmodule",{"_index":47,"title":{"modules/RolesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RolesModule.html":{},"modules.html":{},"overview.html":{}}}],["rolesrepository",{"_index":872,"title":{},"body":{"injectables/RolesService.html":{}}}],["rolesservice",{"_index":212,"title":{"injectables/RolesService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"coverage.html":{},"overview.html":{}}}],["room",{"_index":758,"title":{},"body":{"injectables/QueueService.html":{}}}],["rooms",{"_index":616,"title":{},"body":{"classes/QueueGateway.html":{}}}],["root",{"_index":1116,"title":{},"body":{"miscellaneous/variables.html":{}}}],["run",{"_index":994,"title":{},"body":{"index.html":{}}}],["runs",{"_index":1015,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":964,"title":{},"body":{"dependencies.html":{}}}],["save",{"_index":678,"title":{},"body":{"injectables/QueueService.html":{}}}],["savedqueue",{"_index":687,"title":{},"body":{"injectables/QueueService.html":{}}}],["savedqueue.id",{"_index":690,"title":{},"body":{"injectables/QueueService.html":{}}}],["scalable",{"_index":983,"title":{},"body":{"index.html":{}}}],["secret",{"_index":198,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretkey",{"_index":370,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secretorkey",{"_index":379,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["seeddatabaseifneeded",{"_index":939,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["seeddatabaseifneeded(datasource",{"_index":974,"title":{},"body":{"miscellaneous/functions.html":{}}}],["select",{"_index":777,"title":{},"body":{"injectables/QueueService.html":{}}}],["send",{"_index":612,"title":{},"body":{"classes/QueueGateway.html":{}}}],["sequence",{"_index":657,"title":{},"body":{"injectables/QueueService.html":{}}}],["server",{"_index":558,"title":{},"body":{"classes/QueueGateway.html":{},"index.html":{}}}],["serving",{"_index":421,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{},"miscellaneous/enumerations.html":{}}}],["servingcount",{"_index":766,"title":{},"body":{"injectables/QueueService.html":{}}}],["set",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["setmetadata(roles_key",{"_index":1120,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":990,"title":{},"body":{"index.html":{}}}],["sheesh",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["side",{"_index":984,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":200,"title":{},"body":{"modules/AuthModule.html":{}}}],["simple",{"_index":682,"title":{},"body":{"injectables/QueueService.html":{},"index.html":{}}}],["socket",{"_index":573,"title":{},"body":{"classes/QueueGateway.html":{}}}],["socket.io",{"_index":595,"title":{},"body":{"classes/QueueGateway.html":{},"dependencies.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["specific",{"_index":615,"title":{},"body":{"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["sponsors",{"_index":1081,"title":{},"body":{"index.html":{}}}],["src/.../counter.entity.ts",{"_index":970,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../database.config.ts",{"_index":1108,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":973,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../queue.entity.ts",{"_index":971,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../roles.decorator.ts",{"_index":1109,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:14",{"_index":18,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:9",{"_index":14,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":113,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":114,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:20",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:31",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:38",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":184,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:101",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:17",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:190",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:195",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:25",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:39",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorators/roles.decorator.ts",{"_index":932,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dto/login.dto.ts",{"_index":383,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto.ts:2",{"_index":385,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/login.dto.ts:3",{"_index":386,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/register.dto.ts",{"_index":792,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["src/auth/dto/register.dto.ts:2",{"_index":793,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:3",{"_index":799,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:4",{"_index":798,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:5",{"_index":794,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:6",{"_index":796,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:7",{"_index":795,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:8",{"_index":797,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/guards/jwt",{"_index":355,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard.ts",{"_index":841,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard.ts:6",{"_index":845,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/guards/roles.guard.ts:9",{"_index":848,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":360,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:22",{"_index":365,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:7",{"_index":363,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/config/database.config.ts",{"_index":936,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":937,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/counter/entities/counter.entity.ts",{"_index":299,"title":{},"body":{"entities/Counter.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/modules/counter/entities/counter.entity.ts:18",{"_index":316,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/counter/entities/counter.entity.ts:21",{"_index":318,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/counter/entities/counter.entity.ts:28",{"_index":324,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/counter/entities/counter.entity.ts:31",{"_index":314,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/counter/entities/counter.entity.ts:38",{"_index":312,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/queue/dto/create",{"_index":334,"title":{},"body":{"classes/CreateQueueDto.html":{},"coverage.html":{}}}],["src/modules/queue/dto/update",{"_index":889,"title":{},"body":{"classes/UpdateQueueDto.html":{},"coverage.html":{}}}],["src/modules/queue/entities/queue",{"_index":518,"title":{},"body":{"entities/QueueDetails.html":{},"coverage.html":{}}}],["src/modules/queue/entities/queue.entity.ts",{"_index":387,"title":{},"body":{"entities/Queue.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/modules/queue/entities/queue.entity.ts:22",{"_index":410,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:25",{"_index":413,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:32",{"_index":415,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:35",{"_index":400,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:38",{"_index":403,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:41",{"_index":396,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:44",{"_index":409,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:47",{"_index":407,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:52",{"_index":398,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/queue.controller.ts",{"_index":427,"title":{},"body":{"controllers/QueueController.html":{},"coverage.html":{}}}],["src/modules/queue/queue.controller.ts:20",{"_index":453,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:25",{"_index":454,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:30",{"_index":460,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:35",{"_index":467,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:40",{"_index":469,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:45",{"_index":462,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:50",{"_index":479,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:55",{"_index":465,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:60",{"_index":457,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:65",{"_index":474,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:70",{"_index":477,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:75",{"_index":483,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:80",{"_index":450,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:85",{"_index":446,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:90",{"_index":471,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.gateway.ts",{"_index":553,"title":{},"body":{"classes/QueueGateway.html":{},"coverage.html":{}}}],["src/modules/queue/queue.gateway.ts:18",{"_index":570,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:21",{"_index":567,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:28",{"_index":574,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:32",{"_index":578,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:37",{"_index":587,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:44",{"_index":581,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:50",{"_index":584,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:56",{"_index":591,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:61",{"_index":589,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.module.ts",{"_index":625,"title":{},"body":{"modules/QueueModule.html":{}}}],["src/modules/queue/queue.service.ts",{"_index":630,"title":{},"body":{"injectables/QueueService.html":{},"coverage.html":{}}}],["src/modules/queue/queue.service.ts:111",{"_index":641,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:123",{"_index":646,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:140",{"_index":650,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:167",{"_index":648,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:17",{"_index":634,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:187",{"_index":638,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:257",{"_index":649,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:29",{"_index":639,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:304",{"_index":637,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:310",{"_index":644,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:86",{"_index":640,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:92",{"_index":642,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:99",{"_index":643,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/roles/entities/role.entity.ts",{"_index":804,"title":{},"body":{"entities/Role.html":{},"coverage.html":{}}}],["src/roles/entities/role.entity.ts:10",{"_index":810,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/entities/role.entity.ts:13",{"_index":807,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/entities/role.entity.ts:16",{"_index":813,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/entities/role.entity.ts:7",{"_index":808,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/roles.controller.ts",{"_index":817,"title":{},"body":{"controllers/RolesController.html":{},"coverage.html":{}}}],["src/roles/roles.controller.ts:14",{"_index":821,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.controller.ts:20",{"_index":823,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.controller.ts:26",{"_index":826,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.module.ts",{"_index":863,"title":{},"body":{"modules/RolesModule.html":{}}}],["src/roles/roles.service.ts",{"_index":867,"title":{},"body":{"injectables/RolesService.html":{},"coverage.html":{}}}],["src/roles/roles.service.ts:17",{"_index":876,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:21",{"_index":879,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:29",{"_index":878,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:37",{"_index":880,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:45",{"_index":875,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:8",{"_index":871,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/users/entities/user.entity.ts",{"_index":895,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:16",{"_index":903,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:19",{"_index":901,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:22",{"_index":913,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:25",{"_index":908,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:28",{"_index":902,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:31",{"_index":906,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:34",{"_index":904,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:37",{"_index":907,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:40",{"_index":897,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:44",{"_index":899,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:47",{"_index":900,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:61",{"_index":912,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.module.ts",{"_index":922,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":995,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":998,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":999,"title":{},"body":{"index.html":{}}}],["started",{"_index":977,"title":{"index.html":{}},"body":{}}],["starter",{"_index":988,"title":{},"body":{"index.html":{}}}],["statement",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{}}}],["statements",{"_index":927,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"entities/Counter.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"classes/UpdateQueueDto.html":{}}}],["stay",{"_index":1067,"title":{},"body":{"index.html":{}}}],["steps",{"_index":1012,"title":{},"body":{"index.html":{}}}],["straightforward",{"_index":1028,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":368,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["strength",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{}}}],["string",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["string(todaycount",{"_index":676,"title":{},"body":{"injectables/QueueService.html":{}}}],["sub",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{}}}],["subscribemessage",{"_index":593,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subscribemessage('getqueueposition",{"_index":580,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subscribemessage('joincounter",{"_index":583,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subscribemessage('joinqueue",{"_index":586,"title":{},"body":{"classes/QueueGateway.html":{}}}],["success",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{},"classes/QueueGateway.html":{}}}],["successfully",{"_index":757,"title":{},"body":{"injectables/QueueService.html":{}}}],["super",{"_index":375,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["super_admin",{"_index":820,"title":{},"body":{"controllers/RolesController.html":{}}}],["support",{"_index":1048,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1098,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["table",{"_index":945,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":944,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":1013,"title":{},"body":{"index.html":{}}}],["taken",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["test",{"_index":1002,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":1005,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1004,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1000,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":1080,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":29,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.getprofile(req.user.userid",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.login(logindto",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.register(registerdto",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.counterrepository.create",{"_index":789,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.counterrepository.find",{"_index":791,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.counterrepository.findone",{"_index":735,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.counterrepository.save(counter",{"_index":745,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.findone(id",{"_index":713,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.findone(queueid",{"_index":709,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.getqueueposition(queueid",{"_index":712,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.getqueueposition(savedqueue.id",{"_index":700,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.isvalidemail(email",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(payload",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.log(`client",{"_index":602,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.queuedetailsrepository.create",{"_index":689,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuedetailsrepository.findone",{"_index":710,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuedetailsrepository.save(queuedetails",{"_index":699,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuegateway.notifycounterupdate(counterid",{"_index":763,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuegateway.notifyqueueupdate(id",{"_index":723,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuegateway.notifyqueueupdate(nextqueue.id",{"_index":760,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuegateway.server.emit('queuelistupdate",{"_index":702,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.count",{"_index":672,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.create",{"_index":679,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.find",{"_index":704,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.findone",{"_index":707,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.save(counter.currentqueue",{"_index":741,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.save(nextqueue",{"_index":753,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.save(queue",{"_index":688,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queueservice.addcounter(data.name",{"_index":516,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.callnext(+counterid",{"_index":514,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.create(createqueuedto",{"_index":495,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findall",{"_index":496,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findbyqueuenumber(queuenumber",{"_index":506,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findbystatus(queuestatus.completed",{"_index":501,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findbystatus(queuestatus.pending",{"_index":499,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findbystatus(queuestatus.serving",{"_index":500,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findbystatus(status",{"_index":498,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findone(+id",{"_index":504,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.getcounters",{"_index":517,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.getqueuedetails(+id",{"_index":508,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.getqueuedetails(queueid",{"_index":608,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.queueservice.getqueueposition(+id",{"_index":510,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.getqueueposition(queueid",{"_index":610,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.queueservice.getstats",{"_index":502,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.update(+id",{"_index":512,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.reflector.getallandoverride",{"_index":854,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.rolesrepository.find",{"_index":882,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesrepository.findbyids(roleids",{"_index":886,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesrepository.findone",{"_index":883,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesservice.findall",{"_index":834,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.findone(+id",{"_index":835,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.getuserroles(+userid",{"_index":838,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.getuserroles(user.id",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.server.emit('counterlistupdate",{"_index":621,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.server.emit('queuelistupdate",{"_index":618,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.server.to(`counter_${counterid}`).emit('counterupdate",{"_index":620,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.server.to(`queue_${queueid}`).emit('queueupdate",{"_index":617,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.usersrepository.findone",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RolesService.html":{}}}],["this.usersrepository.save(user",{"_index":888,"title":{},"body":{"injectables/RolesService.html":{}}}],["throw",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{}}}],["ties",{"_index":733,"title":{},"body":{"injectables/QueueService.html":{}}}],["time",{"_index":717,"title":{},"body":{"injectables/QueueService.html":{},"index.html":{}}}],["today",{"_index":658,"title":{},"body":{"injectables/QueueService.html":{}}}],["today.getfullyear()}${string(today.getmonth",{"_index":660,"title":{},"body":{"injectables/QueueService.html":{}}}],["todaycount",{"_index":671,"title":{},"body":{"injectables/QueueService.html":{}}}],["todaystart",{"_index":668,"title":{},"body":{"injectables/QueueService.html":{}}}],["todaystart.sethours(0",{"_index":670,"title":{},"body":{"injectables/QueueService.html":{}}}],["token",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{}}}],["total",{"_index":782,"title":{},"body":{"injectables/QueueService.html":{}}}],["totalcount",{"_index":769,"title":{},"body":{"injectables/QueueService.html":{}}}],["totalwaittimems",{"_index":780,"title":{},"body":{"injectables/QueueService.html":{}}}],["touch",{"_index":1088,"title":{},"body":{"index.html":{}}}],["true",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"entities/User.html":{}}}],["true})@joincolumn({name",{"_index":308,"title":{},"body":{"entities/Counter.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["try",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["turn",{"_index":759,"title":{},"body":{"injectables/QueueService.html":{}}}],["twitter",{"_index":1094,"title":{},"body":{"index.html":{}}}],["type",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{},"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"entities/Role.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([queue",{"_index":629,"title":{},"body":{"modules/QueueModule.html":{}}}],["typeormmodule.forfeature([role",{"_index":866,"title":{},"body":{"modules/RolesModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":203,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":1110,"title":{},"body":{"miscellaneous/variables.html":{}}}],["typescript",{"_index":987,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["unauthorizedexception('invalid",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception(error.message",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined",{"_index":323,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"entities/User.html":{}}}],["unique",{"_index":412,"title":{},"body":{"entities/Queue.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["unit",{"_index":1001,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["unlicensed",{"_index":1107,"title":{},"body":{"properties.html":{}}}],["update",{"_index":442,"title":{},"body":{"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["update(@param('id",{"_index":511,"title":{},"body":{"controllers/QueueController.html":{}}}],["update(id",{"_index":480,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["updated",{"_index":724,"title":{},"body":{"injectables/QueueService.html":{}}}],["updatedqueue",{"_index":722,"title":{},"body":{"injectables/QueueService.html":{}}}],["updatequeuedto",{"_index":481,"title":{"classes/UpdateQueueDto.html":{}},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{},"classes/UpdateQueueDto.html":{},"coverage.html":{}}}],["updatequeuedto.counternumber",{"_index":720,"title":{},"body":{"injectables/QueueService.html":{}}}],["updatequeuedto.status",{"_index":714,"title":{},"body":{"injectables/QueueService.html":{}}}],["updates",{"_index":613,"title":{},"body":{"classes/QueueGateway.html":{},"index.html":{}}}],["url",{"_index":600,"title":{},"body":{"classes/QueueGateway.html":{}}}],["usefactory",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["useguards",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{},"controllers/RolesController.html":{}}}],["useguards(jwtauthguard",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{},"controllers/RolesController.html":{}}}],["useguards(jwtauthguard)@get('profile",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":189,"title":{"entities/User.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["user.defaultrole?.name",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.email",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.id",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.roles",{"_index":812,"title":{},"body":{"entities/Role.html":{},"injectables/RolesService.html":{}}}],["user.roles?.includes(role",{"_index":859,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user_id",{"_index":544,"title":{},"body":{"entities/QueueDetails.html":{},"entities/User.html":{}}}],["user_roles",{"_index":910,"title":{},"body":{"entities/User.html":{}}}],["userid",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtStrategy.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["username",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["users",{"_index":806,"title":{},"body":{"entities/Role.html":{}}}],["users/entities/user.entity",{"_index":190,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{}}}],["users/users.module",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["usersmodule",{"_index":48,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RolesService.html":{}}}],["userwithoutpassword",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{}}}],["using",{"_index":734,"title":{},"body":{"injectables/QueueService.html":{},"index.html":{}}}],["valid",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["validate",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":364,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(logindto",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":354,"title":{},"body":{"classes/CreateQueueDto.html":{},"classes/UpdateQueueDto.html":{},"dependencies.html":{}}}],["value",{"_index":568,"title":{},"body":{"classes/QueueGateway.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":933,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":374,"title":{"miscellaneous/variables.html":{}},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["version",{"_index":1105,"title":{},"body":{"properties.html":{}}}],["video",{"_index":1056,"title":{},"body":{"index.html":{}}}],["visit",{"_index":1045,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":1059,"title":{},"body":{"index.html":{}}}],["void",{"_index":576,"title":{},"body":{"classes/QueueGateway.html":{}}}],["wait",{"_index":774,"title":{},"body":{"injectables/QueueService.html":{}}}],["waiting",{"_index":748,"title":{},"body":{"injectables/QueueService.html":{}}}],["watch",{"_index":996,"title":{},"body":{"index.html":{}}}],["website",{"_index":1092,"title":{},"body":{"index.html":{}}}],["websocketgateway",{"_index":592,"title":{},"body":{"classes/QueueGateway.html":{}}}],["websocketserver",{"_index":571,"title":{},"body":{"classes/QueueGateway.html":{}}}],["working",{"_index":1044,"title":{},"body":{"index.html":{}}}],["world",{"_index":116,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":1070,"title":{},"body":{"index.html":{}}}],["xxxx",{"_index":675,"title":{},"body":{"injectables/QueueService.html":{}}}],["yes",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["you'd",{"_index":1084,"title":{},"body":{"index.html":{}}}],["you're",{"_index":1006,"title":{},"body":{"index.html":{}}}],["yyyymmdd",{"_index":674,"title":{},"body":{"injectables/QueueService.html":{}}}],["zoom",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                            \n                                    \n                                healthCheck\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        healthCheck\n                        \n                    \n                \n            \n            \n                \n                        \n                    healthCheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('health')\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     { status: string; }\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n\n  @Get('health')\n  healthCheck() {\n    return { status: 'ok' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nQueueModule\n\nQueueModule\n\nAppModule -->\n\nQueueModule->AppModule\n\n\n\n\n\nRolesModule\n\nRolesModule\n\nAppModule -->\n\nRolesModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            QueueModule\n                        \n                        \n                            RolesModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { databaseConfig } from './config/database.config';\nimport { UsersModule } from './users/users.module';\nimport { AuthModule } from './auth/auth.module';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { RolesModule } from './roles/roles.module';\nimport { QueueModule } from './modules/queue/queue.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'mysql',\n        host: configService.get('DB_HOST'),\n        port: configService.get('DB_PORT'),\n        username: configService.get('DB_USERNAME'),\n        password: configService.get('DB_PASSWORD'),\n        database: configService.get('DB_NAME'),\n        entities: [__dirname + '/**/*.entity{.ts,.js}'],\n        synchronize: configService.get('NODE_ENV') !== 'production', //set this sheesh to true in development only\n        logging: configService.get('NODE_ENV') !== 'production',\n        // Prevent data loss in development (below code is for development only)\n        // synchronize: true,\n        migrationsRun: false,\n        dropSchema: false,\n\n        // Only for development environments!\n        beforeConnect: async (connection) => {\n          if (process.env.NODE_ENV !== 'production') {\n            connection.query('SET FOREIGN_KEY_CHECKS=0;');\n          }\n        },\n        afterConnect: async (connection) => {\n          if (process.env.NODE_ENV !== 'production') {\n            connection.query('SET FOREIGN_KEY_CHECKS=1;');\n          }\n        },\n      }),\n    }),\n    UsersModule,\n    AuthModule,\n    RolesModule,\n    QueueModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                getProfile\n                            \n                            \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('profile')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(registerDto: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                registerDto\n                                            \n                                                            RegisterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  Get,\n  UseGuards,\n  Request,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @Post('login')\n  async login(@Body() loginDto: LoginDto) {\n    console.log('Login request received:', loginDto);\n    try {\n      const result = await this.authService.login(loginDto);\n      return result;\n    } catch (error) {\n      throw new UnauthorizedException(error.message || 'Invalid credentials');\n    }\n  }\n\n  @Post('register')\n  async register(@Body() registerDto: RegisterDto) {\n    console.log('Register endpoint hit with data:', registerDto); //Debugging Statement\n    return this.authService.register(registerDto);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  getProfile(@Request() req) {\n    return this.authService.getProfile(req.user.userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nRolesModule\n\nRolesModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nRolesModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RolesModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from '../users/entities/user.entity';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { JwtStrategy } from './jwt.strategy';\nimport { ConfigService } from '@nestjs/config';\nimport { RolesModule } from '../roles/roles.module';\n\n@Module({\n  imports: [\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.registerAsync({\n      inject: [ConfigService],\n      useFactory: (config: ConfigService) => {\n        return {\n          secret: config.get('JWT_SECRET'),\n          signOptions: { expiresIn: '1d' },\n        };\n      },\n    }),\n    TypeOrmModule.forFeature([User]),\n    RolesModule,\n  ],\n  providers: [AuthService, JwtStrategy],\n  controllers: [AuthController],\n  exports: [AuthService, JwtStrategy, PassportModule],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Private\n                                isValidEmail\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, jwtService: JwtService, rolesService: RolesService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        rolesService\n                                                  \n                                                        \n                                                                        RolesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:195\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isValidEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    isValidEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:190\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(registerDto: RegisterDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:101\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                registerDto\n                                            \n                                                            RegisterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(loginDto: LoginDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  UnauthorizedException,\n  ConflictException,\n  BadRequestException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from '../users/entities/user.entity';\nimport * as bcrypt from 'bcrypt';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { RolesService } from '../roles/roles.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n    private jwtService: JwtService,\n    private rolesService: RolesService,\n  ) {}\n\n  async validateUser(loginDto: LoginDto): Promise {\n    const user = await this.usersRepository.findOne({\n      where: [\n        { email: loginDto.emailOrUsername },\n        { username: loginDto.emailOrUsername }\n      ],\n    });\n    if (user && (await bcrypt.compare(loginDto.password, user.password))) {\n      const { password, ...result } = user;\n      return result;\n    }\n    return null;\n  }\n\n  async login(loginDto: LoginDto) {\n    console.log('Login attempt with:', loginDto);\n\n    try {\n      const user = await this.usersRepository.findOne({\n        where: [\n          { email: loginDto.emailOrUsername },\n          { username: loginDto.emailOrUsername }\n        ],\n        relations: ['defaultRole'],\n      });\n\n      console.log('User found:', user ? 'Yes' : 'No');\n\n      if (!user) {\n        throw new UnauthorizedException('Invalid email or password');\n      }\n\n      // Debug password check\n      console.log('Stored password hash:', user.password);\n      console.log('Comparing with:', loginDto.password);\n\n      const isPasswordValid = await bcrypt.compare(\n        loginDto.password,\n        user.password,\n      );\n      console.log('Password valid:', isPasswordValid);\n\n      if (!isPasswordValid) {\n        throw new UnauthorizedException('Invalid email or password');\n      }\n\n      // Get user roles\n      const roles = await this.rolesService.getUserRoles(user.id);\n      const roleNames = roles.map((role) => role.name);\n\n      const payload = {\n        sub: user.id,\n        email: user.email,\n        roles: roleNames,\n      };\n\n      const token = this.jwtService.sign(payload);\n      console.log('Generated token:', token ? 'Success' : 'Failed');\n\n      // Remove password from response\n      const { password: _, ...userWithoutPassword } = user;\n\n      return {\n        access_token: token,\n        user: {\n          ...userWithoutPassword,\n          roles: roleNames,\n          defaultRole: user.defaultRole?.name || 'citizen',\n        },\n      };\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  }\n\n  async register(registerDto: RegisterDto) {\n    const { email, username, password, firstName, middleName, lastName } = registerDto;\n    \n    // Generate full name\n    const name = `${firstName} ${middleName ? middleName + ' ' : ''}${lastName}`;\n    \n    // Validate email format\n    if (!this.isValidEmail(email)) {\n      throw new BadRequestException('Invalid email format');\n    }\n\n    // Check if user exists by email\n    const existingUserByEmail = await this.usersRepository.findOne({\n      where: { email },\n    });\n    if (existingUserByEmail) {\n      throw new ConflictException('Email already exists');\n    }\n    \n    // Check if username is taken\n    if (username) {\n      const existingUserByUsername = await this.usersRepository.findOne({\n        where: { username },\n      });\n      if (existingUserByUsername) {\n        throw new ConflictException('Username already exists');\n      }\n    }\n\n    // Validate password strength\n    if (password.length  role.name);\n\n    const { password, ...result } = user;\n    return {\n      ...result,\n      roles: roleNames,\n      defaultRole: user.defaultRole?.name || 'citizen',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Counter.html":{"url":"entities/Counter.html","title":"entity - Counter","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Counter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/counter/entities/counter.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                currentQueue\n                            \n                            \n                                    \n                                currentQueueId\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        currentQueue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Queue | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, queue => queue.counter, {nullable: true})@JoinColumn({name: 'current_queue_id', foreignKeyConstraintName: 'fk_current_queue'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        currentQueueId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'current_queue_id', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CounterStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: CounterStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:28\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  OneToOne,\n  JoinColumn,\n} from 'typeorm';\nimport { Queue } from '../../queue/entities/queue.entity';\n\nexport enum CounterStatus {\n  ACTIVE = 'active',\n  INACTIVE = 'inactive',\n}\n\n@Entity('counters')\nexport class Counter {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  name: string;\n\n  @Column({\n    type: 'enum',\n    enum: CounterStatus,\n    default: CounterStatus.ACTIVE,\n  })\n  status: CounterStatus;\n\n  @Column({ name: 'current_queue_id', nullable: true })\n  currentQueueId: number | null;\n\n  @OneToOne(() => Queue, (queue) => queue.counter, { nullable: true })\n  @JoinColumn({\n    name: 'current_queue_id',\n    foreignKeyConstraintName: 'fk_current_queue',\n  })\n  currentQueue: Queue | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateQueueDto.html":{"url":"classes/CreateQueueDto.html","title":"class - CreateQueueDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateQueueDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/dto/create-queue.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                    \n                                    \n                                appointmentType\n                            \n                            \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                middleInitial\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                phoneNumber\n                            \n                            \n                                    \n                                    \n                                reasonOfVisit\n                            \n                            \n                                    \n                                    Optional\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        appointmentType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        middleInitial\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        reasonOfVisit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsOptional, IsNotEmpty } from 'class-validator';\n\nexport class CreateQueueDto {\n  @IsString()\n  @IsNotEmpty()\n  firstName: string;\n\n  @IsString()\n  @IsNotEmpty()\n  lastName: string;\n\n  @IsString()\n  @IsOptional()\n  middleInitial?: string;\n\n  @IsString()\n  @IsOptional()\n  address?: string;\n\n  @IsString()\n  @IsOptional()\n  phoneNumber?: string;\n\n  @IsString()\n  @IsNotEmpty()\n  reasonOfVisit: string;\n\n  @IsString()\n  @IsNotEmpty()\n  appointmentType: string;\n\n  @IsOptional()\n  userId?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private configService: ConfigService) {\n    const secretKey = configService.get('JWT_SECRET');\n\n    if (!secretKey) {\n      throw new Error('JWT_SECRET is not defined in environment variables');\n    }\n\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: secretKey,\n    });\n  }\n\n  async validate(payload: any) {\n    return {\n      userId: payload.sub,\n      email: payload.email,\n      roles: payload.roles || [],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                emailOrUsername\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        emailOrUsername\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class LoginDto {\n  emailOrUsername: string;\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Queue.html":{"url":"entities/Queue.html","title":"entity - Queue","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Queue\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/entities/queue.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                completedAt\n                            \n                            \n                                    \n                                counter\n                            \n                            \n                                    \n                                counterNumber\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                details\n                            \n                            \n                                    \n                                estimatedWaitTime\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                queueNumber\n                            \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        completedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'completed_at', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        counter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Counter\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, counter => counter.currentQueue, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        counterNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'counter_number', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        details\n                        \n                    \n                \n            \n                \n                    \n                        Type :     QueueDetails[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, details => details.queue)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        estimatedWaitTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'estimated_wait_time', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        queueNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'queue_number', unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueueStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: QueueStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:32\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  OneToMany,\n  CreateDateColumn,\n  OneToOne,\n} from 'typeorm';\nimport { QueueDetails } from './queue-details.entity';\nimport { Counter } from '../../counter/entities/counter.entity';\n\nexport enum QueueStatus {\n  PENDING = 'pending',\n  SERVING = 'serving',\n  COMPLETED = 'completed',\n  CANCELLED = 'cancelled',\n}\n\n@Entity('queues')\nexport class Queue {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ name: 'queue_number', unique: true })\n  queueNumber: string;\n\n  @Column({\n    type: 'enum',\n    enum: QueueStatus,\n    default: QueueStatus.PENDING,\n  })\n  status: QueueStatus;\n\n  @Column({ name: 'counter_number', nullable: true })\n  counterNumber: string;\n\n  @CreateDateColumn({ name: 'created_at' })\n  createdAt: Date;\n\n  @Column({ name: 'completed_at', nullable: true })\n  completedAt: Date;\n\n  @Column({ name: 'estimated_wait_time', nullable: true })\n  estimatedWaitTime: number;\n\n  @OneToMany(() => QueueDetails, (details) => details.queue)\n  details: QueueDetails[];\n\n  @OneToOne(() => Counter, (counter) => counter.currentQueue, {\n    nullable: true,\n  })\n  counter: Counter;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/QueueController.html":{"url":"controllers/QueueController.html","title":"controller - QueueController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  QueueController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/queue.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                queue\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                addCounter\n                            \n                            \n                                    \n                                callNext\n                            \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findByQueueNumber\n                            \n                            \n                                    \n                                findByStatus\n                            \n                            \n                                    \n                                findCompleted\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                findPending\n                            \n                            \n                                    \n                                findServing\n                            \n                            \n                                    \n                                getCounters\n                            \n                            \n                                    \n                                getQueueDetails\n                            \n                            \n                                    \n                                getQueuePosition\n                            \n                            \n                                    \n                                getStats\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        addCounter\n                        \n                    \n                \n            \n            \n                \n                        \n                    addCounter(data: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('counter')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        callNext\n                        \n                    \n                \n            \n            \n                \n                        \n                    callNext(counterId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('counter/:counterId/call-next')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:80\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                counterId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createQueueDto: CreateQueueDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createQueueDto\n                                            \n                                                            CreateQueueDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findByQueueNumber\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByQueueNumber(queueNumber: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('number/:queueNumber')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueNumber\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findByStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByStatus(status: QueueStatus)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('status/:status')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            QueueStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findCompleted\n                        \n                    \n                \n            \n            \n                \n                        \n                    findCompleted()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('completed')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:45\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findPending\n                        \n                    \n                \n            \n            \n                \n                        \n                    findPending()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('pending')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findServing\n                        \n                    \n                \n            \n            \n                \n                        \n                    findServing()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('serving')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getCounters\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCounters()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('counters')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:90\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getQueueDetails\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQueueDetails(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/details')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getQueuePosition\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQueuePosition(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/position')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:70\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('stats')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:50\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateQueueDto: UpdateQueueDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateQueueDto\n                                            \n                                                            UpdateQueueDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport { QueueService } from './queue.service';\nimport { CreateQueueDto } from './dto/create-queue.dto';\nimport { UpdateQueueDto } from './dto/update-queue.dto';\nimport { QueueStatus } from './entities/queue.entity';\n\n@Controller('queue')\nexport class QueueController {\n  constructor(private readonly queueService: QueueService) {}\n\n  @Post()\n  create(@Body() createQueueDto: CreateQueueDto) {\n    return this.queueService.create(createQueueDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.queueService.findAll();\n  }\n\n  @Get('status/:status')\n  findByStatus(@Param('status') status: QueueStatus) {\n    return this.queueService.findByStatus(status);\n  }\n\n  @Get('pending')\n  findPending() {\n    return this.queueService.findByStatus(QueueStatus.PENDING);\n  }\n\n  @Get('serving')\n  findServing() {\n    return this.queueService.findByStatus(QueueStatus.SERVING);\n  }\n\n  @Get('completed')\n  findCompleted() {\n    return this.queueService.findByStatus(QueueStatus.COMPLETED);\n  }\n\n  @Get('stats')\n  getStats() {\n    return this.queueService.getStats();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.queueService.findOne(+id);\n  }\n\n  @Get('number/:queueNumber')\n  findByQueueNumber(@Param('queueNumber') queueNumber: string) {\n    return this.queueService.findByQueueNumber(queueNumber);\n  }\n\n  @Get(':id/details')\n  getQueueDetails(@Param('id') id: string) {\n    return this.queueService.getQueueDetails(+id);\n  }\n\n  @Get(':id/position')\n  getQueuePosition(@Param('id') id: string) {\n    return this.queueService.getQueuePosition(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateQueueDto: UpdateQueueDto) {\n    return this.queueService.update(+id, updateQueueDto);\n  }\n\n  @Post('counter/:counterId/call-next')\n  callNext(@Param('counterId') counterId: string) {\n    return this.queueService.callNext(+counterId);\n  }\n\n  @Post('counter')\n  addCounter(@Body() data: { name: string }) {\n    return this.queueService.addCounter(data.name);\n  }\n\n  @Get('counters')\n  getCounters() {\n    return this.queueService.getCounters();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/QueueDetails.html":{"url":"entities/QueueDetails.html","title":"entity - QueueDetails","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  QueueDetails\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/entities/queue-details.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                address\n                            \n                            \n                                    \n                                appointmentType\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                middleInitial\n                            \n                            \n                                    \n                                phoneNumber\n                            \n                            \n                                    \n                                    \n                                queue\n                            \n                            \n                                    \n                                queueId\n                            \n                            \n                                    \n                                reasonOfVisit\n                            \n                            \n                                    \n                                    \n                                user\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        appointmentType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'appointment_type'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'first_name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'last_name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        middleInitial\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'middle_initial', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'phone_number', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        queue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Queue\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, queue => queue.details, {onDelete: 'CASCADE'})@JoinColumn({name: 'queue_id', foreignKeyConstraintName: 'fk_queue_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        queueId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'queue_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reasonOfVisit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'reason_of_visit'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {onDelete: 'SET NULL', nullable: true})@JoinColumn({name: 'user_id', foreignKeyConstraintName: 'fk_user_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'user_id', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:24\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  JoinColumn,\n} from 'typeorm';\nimport { Queue } from './queue.entity';\nimport { User } from '../../../users/entities/user.entity';\n\n@Entity('queue_details')\nexport class QueueDetails {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ name: 'queue_id' })\n  queueId: number;\n\n  @ManyToOne(() => Queue, (queue) => queue.details, { onDelete: 'CASCADE' })\n  @JoinColumn({ name: 'queue_id', foreignKeyConstraintName: 'fk_queue_id' })\n  queue: Queue;\n\n  @Column({ name: 'user_id', nullable: true })\n  userId: number;\n\n  @ManyToOne(() => User, { onDelete: 'SET NULL', nullable: true })\n  @JoinColumn({ name: 'user_id', foreignKeyConstraintName: 'fk_user_id' })\n  user: User;\n\n  @Column({ name: 'first_name' })\n  firstName: string;\n\n  @Column({ name: 'last_name' })\n  lastName: string;\n\n  @Column({ name: 'middle_initial', nullable: true })\n  middleInitial: string;\n\n  @Column({ nullable: true })\n  address: string;\n\n  @Column({ name: 'phone_number', nullable: true })\n  phoneNumber: string;\n\n  @Column({ name: 'reason_of_visit' })\n  reasonOfVisit: string;\n\n  @Column({ name: 'appointment_type' })\n  appointmentType: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QueueGateway.html":{"url":"classes/QueueGateway.html","title":"class - QueueGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QueueGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/queue.gateway.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        OnGatewayConnection\n                        OnGatewayDisconnect\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleConnection\n                            \n                            \n                                handleDisconnect\n                            \n                            \n                                    \n                                    Async\n                                handleGetQueuePosition\n                            \n                            \n                                    \n                                handleJoinCounter\n                            \n                            \n                                    \n                                    Async\n                                handleJoinQueue\n                            \n                            \n                                notifyCounterUpdate\n                            \n                            \n                                notifyQueueUpdate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(queueService: QueueService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/queue/queue.gateway.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        queueService\n                                                  \n                                                        \n                                                                        QueueService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(QueueGateway.name)\n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/queue.gateway.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/queue.gateway.ts:21\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handleConnection\n                        \n                    \n                \n            \n            \n                \nhandleConnection(client: Socket)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleDisconnect\n                        \n                    \n                \n            \n            \n                \nhandleDisconnect(client: Socket)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleGetQueuePosition\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleGetQueuePosition(client: Socket, queueId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('getQueuePosition')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleJoinCounter\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleJoinCounter(client: Socket, counterId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('joinCounter')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                counterId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { success: boolean; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleJoinQueue\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleJoinQueue(client: Socket, queueId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('joinQueue')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notifyCounterUpdate\n                        \n                    \n                \n            \n            \n                \nnotifyCounterUpdate(counterId: number, data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                counterId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notifyQueueUpdate\n                        \n                    \n                \n            \n            \n                \nnotifyQueueUpdate(queueId: number, data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  WebSocketGateway,\n  WebSocketServer,\n  SubscribeMessage,\n  OnGatewayConnection,\n  OnGatewayDisconnect,\n} from '@nestjs/websockets';\nimport { Server, Socket } from 'socket.io';\nimport { QueueService } from './queue.service';\nimport { Logger, Inject, forwardRef } from '@nestjs/common';\n\n@WebSocketGateway({\n  cors: {\n    origin: '*', // In production, set to your frontend URL\n  },\n})\nexport class QueueGateway implements OnGatewayConnection, OnGatewayDisconnect {\n  private readonly logger = new Logger(QueueGateway.name);\n\n  @WebSocketServer()\n  server: Server;\n\n  constructor(\n    @Inject(forwardRef(() => QueueService))\n    private readonly queueService: QueueService,\n  ) {}\n\n  handleConnection(client: Socket) {\n    this.logger.log(`Client connected: ${client.id}`);\n  }\n\n  handleDisconnect(client: Socket) {\n    this.logger.log(`Client disconnected: ${client.id}`);\n  }\n\n  @SubscribeMessage('joinQueue')\n  async handleJoinQueue(client: Socket, queueId: number) {\n    client.join(`queue_${queueId}`);\n    const queueData = await this.queueService.getQueueDetails(queueId);\n    return queueData;\n  }\n\n  @SubscribeMessage('getQueuePosition')\n  async handleGetQueuePosition(client: Socket, queueId: number) {\n    const position = await this.queueService.getQueuePosition(queueId);\n    return { position };\n  }\n\n  @SubscribeMessage('joinCounter')\n  handleJoinCounter(client: Socket, counterId: number) {\n    client.join(`counter_${counterId}`);\n    return { success: true };\n  }\n\n  // Send updates to all clients or specific rooms\n  notifyQueueUpdate(queueId: number, data: any) {\n    this.server.to(`queue_${queueId}`).emit('queueUpdate', data);\n    this.server.emit('queueListUpdate'); // Global queue update\n  }\n\n  notifyCounterUpdate(counterId: number, data: any) {\n    this.server.to(`counter_${counterId}`).emit('counterUpdate', data);\n    this.server.emit('counterListUpdate'); // Global counter update\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/QueueModule.html":{"url":"modules/QueueModule.html","title":"module - QueueModule","body":"\n                   \n\n\n\n\n    Modules\n    QueueModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_QueueModule\n\n\n\ncluster_QueueModule_exports\n\n\n\ncluster_QueueModule_providers\n\n\n\n\nQueueGateway \n\nQueueGateway \n\n\n\nQueueService \n\nQueueService \n\n\n\nQueueModule\n\nQueueModule\n\nQueueGateway  -->\n\nQueueModule->QueueGateway \n\n\n\nQueueService  -->\n\nQueueModule->QueueService \n\n\n\n\n\nQueueService\n\nQueueService\n\nQueueModule -->\n\nQueueService->QueueModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/queue/queue.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            QueueService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            QueueController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            QueueGateway\n                        \n                        \n                            QueueService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { QueueService } from './queue.service';\nimport { QueueController } from './queue.controller';\nimport { QueueGateway } from './queue.gateway';\nimport { Queue } from './entities/queue.entity';\nimport { QueueDetails } from './entities/queue-details.entity';\nimport { Counter } from '../counter/entities/counter.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Queue, QueueDetails, Counter])],\n  controllers: [QueueController],\n  providers: [QueueService, QueueGateway],\n  exports: [QueueService, QueueGateway],\n})\nexport class QueueModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QueueService.html":{"url":"injectables/QueueService.html","title":"injectable - QueueService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  QueueService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/queue.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addCounter\n                            \n                            \n                                    Async\n                                callNext\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByQueueNumber\n                            \n                            \n                                    Async\n                                findByStatus\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getCounters\n                            \n                            \n                                    Async\n                                getQueueDetails\n                            \n                            \n                                    Async\n                                getQueuePosition\n                            \n                            \n                                    Async\n                                getStats\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(queueRepository: Repository, queueDetailsRepository: Repository, counterRepository: Repository, queueGateway: QueueGateway)\n                    \n                \n                        \n                            \n                                Defined in src/modules/queue/queue.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        queueRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queueDetailsRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        counterRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queueGateway\n                                                  \n                                                        \n                                                                        QueueGateway\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addCounter\n                        \n                    \n                \n            \n            \n                \n                        \n                    addCounter(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:304\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        callNext\n                        \n                    \n                \n            \n            \n                \n                        \n                    callNext(counterId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:187\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                counterId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createQueueDto: CreateQueueDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createQueueDto\n                                            \n                                                            CreateQueueDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:86\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByQueueNumber\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByQueueNumber(queueNumber: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:111\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueNumber\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByStatus(status: QueueStatus)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:92\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            QueueStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:99\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCounters\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCounters()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:310\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getQueueDetails\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQueueDetails(queueId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:123\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getQueuePosition\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQueuePosition(queueId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:167\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:257\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateQueueDto: UpdateQueueDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:140\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateQueueDto\n                                            \n                                                            UpdateQueueDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  Inject,\n  forwardRef,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, LessThanOrEqual } from 'typeorm';\nimport { Queue, QueueStatus } from './entities/queue.entity';\nimport { QueueDetails } from './entities/queue-details.entity';\nimport { Counter, CounterStatus } from '../counter/entities/counter.entity';\nimport { CreateQueueDto } from './dto/create-queue.dto';\nimport { UpdateQueueDto } from './dto/update-queue.dto';\nimport { QueueGateway } from './queue.gateway';\n\n@Injectable()\nexport class QueueService {\n  constructor(\n    @InjectRepository(Queue)\n    private queueRepository: Repository,\n    @InjectRepository(QueueDetails)\n    private queueDetailsRepository: Repository,\n    @InjectRepository(Counter)\n    private counterRepository: Repository,\n    @Inject(forwardRef(() => QueueGateway))\n    private queueGateway: QueueGateway,\n  ) {}\n\n  async create(createQueueDto: CreateQueueDto) {\n    // Generate a queue number based on date and sequence\n    const today = new Date();\n    const dateStr = `${today.getFullYear()}${String(today.getMonth() + 1).padStart(2, '0')}${String(today.getDate()).padStart(2, '0')}`;\n\n    // Get the count of queues created today to determine the sequence number\n    const todayStart = new Date(today);\n    todayStart.setHours(0, 0, 0, 0);\n\n    const todayCount = await this.queueRepository.count({\n      where: {\n        createdAt: LessThanOrEqual(today),\n      },\n    });\n\n    // Format the queue number: YYYYMMDD-XXXX where XXXX is the sequence number\n    const queueNumber = `${dateStr}-${String(todayCount + 1).padStart(4, '0')}`;\n\n    // Create and save the queue\n    const queue = this.queueRepository.create({\n      queueNumber,\n      status: QueueStatus.PENDING,\n      estimatedWaitTime: 15 * (todayCount + 1), // Simple estimation: 15 minutes per person\n    });\n\n    const savedQueue = await this.queueRepository.save(queue);\n\n    // Create queue details\n    const queueDetails = this.queueDetailsRepository.create({\n      queue: savedQueue,\n      queueId: savedQueue.id,\n      userId: createQueueDto.userId,\n      firstName: createQueueDto.firstName,\n      lastName: createQueueDto.lastName,\n      middleInitial: createQueueDto.middleInitial,\n      address: createQueueDto.address,\n      phoneNumber: createQueueDto.phoneNumber,\n      reasonOfVisit: createQueueDto.reasonOfVisit,\n      appointmentType: createQueueDto.appointmentType,\n    });\n\n    await this.queueDetailsRepository.save(queueDetails);\n\n    // Get queue position\n    const position = await this.getQueuePosition(savedQueue.id);\n\n    const result = { queue: savedQueue, details: queueDetails, position };\n\n    // Notify all clients that a new queue has been created\n    this.queueGateway.server.emit('queueListUpdate', {\n      action: 'created',\n      queueId: savedQueue.id,\n    });\n\n    return result;\n  }\n\n  async findAll() {\n    return await this.queueRepository.find({\n      order: { createdAt: 'ASC' },\n    });\n  }\n\n  async findByStatus(status: QueueStatus) {\n    return await this.queueRepository.find({\n      where: { status },\n      order: { createdAt: 'ASC' },\n    });\n  }\n\n  async findOne(id: number) {\n    const queue = await this.queueRepository.findOne({\n      where: { id },\n    });\n\n    if (!queue) {\n      throw new NotFoundException(`Queue #${id} not found`);\n    }\n\n    return queue;\n  }\n\n  async findByQueueNumber(queueNumber: string) {\n    const queue = await this.queueRepository.findOne({\n      where: { queueNumber },\n    });\n\n    if (!queue) {\n      throw new NotFoundException(`Queue #${queueNumber} not found`);\n    }\n\n    return queue;\n  }\n\n  async getQueueDetails(queueId: number) {\n    const queue = await this.findOne(queueId);\n\n    const details = await this.queueDetailsRepository.findOne({\n      where: { queueId },\n      relations: ['user'],\n    });\n\n    if (!details) {\n      throw new NotFoundException(`Details for queue #${queueId} not found`);\n    }\n\n    const position = await this.getQueuePosition(queueId);\n\n    return { queue, details, position };\n  }\n\n  async update(id: number, updateQueueDto: UpdateQueueDto) {\n    const queue = await this.findOne(id);\n\n    if (updateQueueDto.status) {\n      queue.status = updateQueueDto.status;\n\n      // If completed, set completion time\n      if (updateQueueDto.status === QueueStatus.COMPLETED) {\n        queue.completedAt = new Date();\n      }\n    }\n\n    if (updateQueueDto.counterNumber) {\n      queue.counterNumber = updateQueueDto.counterNumber;\n    }\n\n    const updatedQueue = await this.queueRepository.save(queue);\n\n    // Notify clients about the queue update\n    this.queueGateway.notifyQueueUpdate(id, {\n      action: 'updated',\n      queue: updatedQueue,\n    });\n\n    return updatedQueue;\n  }\n\n  async getQueuePosition(queueId: number) {\n    const queue = await this.findOne(queueId);\n\n    // If the queue is not pending, it's not in line\n    if (queue.status !== QueueStatus.PENDING) {\n      return 0;\n    }\n\n    // Count how many pending queues are ahead of this one\n    const position = await this.queueRepository.count({\n      where: {\n        status: QueueStatus.PENDING,\n        createdAt: LessThanOrEqual(queue.createdAt),\n        id: LessThanOrEqual(queueId), // Break ties using ID\n      },\n    });\n\n    return position;\n  }\n\n  async callNext(counterId: number) {\n    const counter = await this.counterRepository.findOne({\n      where: { id: counterId },\n      relations: ['currentQueue'],\n    });\n\n    if (!counter) {\n      throw new NotFoundException(`Counter #${counterId} not found`);\n    }\n\n    // Mark current queue as completed if exists\n    if (counter.currentQueue) {\n      counter.currentQueue.status = QueueStatus.COMPLETED;\n      counter.currentQueue.completedAt = new Date();\n      await this.queueRepository.save(counter.currentQueue);\n    }\n\n    // Find the next pending queue\n    const nextQueue = await this.queueRepository.findOne({\n      where: { status: QueueStatus.PENDING },\n      order: { createdAt: 'ASC' },\n    });\n\n    if (!nextQueue) {\n      counter.currentQueueId = null;\n      counter.currentQueue = null;\n      await this.counterRepository.save(counter);\n      return { counter, message: 'No more queues waiting' };\n    }\n\n    // Update the next queue\n    nextQueue.status = QueueStatus.SERVING;\n    nextQueue.counterNumber = counter.name;\n    await this.queueRepository.save(nextQueue);\n\n    // Update counter\n    counter.currentQueueId = nextQueue.id;\n    counter.currentQueue = nextQueue;\n    await this.counterRepository.save(counter);\n\n    // Get associated details\n    const details = await this.queueDetailsRepository.findOne({\n      where: { queueId: nextQueue.id },\n    });\n\n    const result = {\n      counter,\n      queue: nextQueue,\n      details,\n      message: 'Next queue called successfully',\n    };\n\n    if (nextQueue) {\n      // Notify the specific queue room that it's their turn\n      this.queueGateway.notifyQueueUpdate(nextQueue.id, {\n        action: 'called',\n        counterName: counter.name,\n        counterId: counter.id,\n      });\n    }\n\n    // Notify counter clients\n    this.queueGateway.notifyCounterUpdate(counterId, {\n      action: 'nextCalled',\n      ...result,\n    });\n\n    return result;\n  }\n\n  async getStats() {\n    const [\n      pendingCount,\n      servingCount,\n      completedCount,\n      cancelledCount,\n      totalCount,\n    ] = await Promise.all([\n      this.queueRepository.count({ where: { status: QueueStatus.PENDING } }),\n      this.queueRepository.count({ where: { status: QueueStatus.SERVING } }),\n      this.queueRepository.count({ where: { status: QueueStatus.COMPLETED } }),\n      this.queueRepository.count({ where: { status: QueueStatus.CANCELLED } }),\n      this.queueRepository.count(),\n    ]);\n\n    // Calculate average wait time\n    const completedQueues = await this.queueRepository.find({\n      where: {\n        status: QueueStatus.COMPLETED,\n        completedAt: LessThanOrEqual(new Date()),\n      },\n      select: ['createdAt', 'completedAt'],\n    });\n\n    let averageWaitTime = 0;\n    if (completedQueues.length > 0) {\n      const totalWaitTimeMs = completedQueues.reduce((total, queue) => {\n        return (\n          total + (queue.completedAt.getTime() - queue.createdAt.getTime())\n        );\n      }, 0);\n      averageWaitTime = Math.floor(\n        totalWaitTimeMs / completedQueues.length / 60000,\n      ); // Convert to minutes\n    }\n\n    return {\n      pending: pendingCount,\n      serving: servingCount,\n      completed: completedCount,\n      cancelled: cancelledCount,\n      total: totalCount,\n      averageWaitTime,\n    };\n  }\n\n  // Add a counter\n  async addCounter(name: string) {\n    const counter = this.counterRepository.create({ name });\n    return await this.counterRepository.save(counter);\n  }\n\n  // Get all counters\n  async getCounters() {\n    return await this.counterRepository.find({\n      relations: ['currentQueue'],\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/register.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                firstName\n                            \n                            \n                                lastName\n                            \n                            \n                                    Optional\n                                middleName\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class RegisterDto {\n  email: string;\n  username: string;\n  password: string;\n  firstName: string;\n  middleName?: string; // Optional\n  lastName: string;\n  name?: string; // Optional, due to the name field being optional in the User entity\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Role.html":{"url":"entities/Role.html","title":"entity - Role","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Role\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/entities/role.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, user => user.roles)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:16\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, PrimaryGeneratedColumn, ManyToMany } from 'typeorm';\nimport { User } from '../../users/entities/user.entity';\n\n@Entity('roles')\nexport class Role {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true, nullable: false })\n  name: string;\n\n  @Column({ nullable: true })\n  description: string;\n\n  @ManyToMany(() => User, (user) => user.roles)\n  users: User[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RolesController.html":{"url":"controllers/RolesController.html","title":"controller - RolesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RolesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/roles.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                roles\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                getUserRoles\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@Roles('admin', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/roles/roles.controller.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@Roles('admin', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/roles/roles.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getUserRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserRoles(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('user/:userId')@Roles('admin', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/roles/roles.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, UseGuards } from '@nestjs/common';\nimport { RolesService } from './roles.service';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../auth/guards/roles.guard';\nimport { Roles } from '../auth/decorators/roles.decorator';\n\n@Controller('roles')\n@UseGuards(JwtAuthGuard, RolesGuard)\nexport class RolesController {\n  constructor(private readonly rolesService: RolesService) {}\n\n  @Get()\n  @Roles('admin', 'super_admin')\n  findAll() {\n    return this.rolesService.findAll();\n  }\n\n  @Get(':id')\n  @Roles('admin', 'super_admin')\n  findOne(@Param('id') id: string) {\n    return this.rolesService.findOne(+id);\n  }\n\n  @Get('user/:userId')\n  @Roles('admin', 'super_admin')\n  getUserRoles(@Param('userId') userId: string) {\n    return this.rolesService.getUserRoles(+userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/roles.guard.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/roles.guard.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ROLES_KEY } from '../decorators/roles.decorator';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(\n      ROLES_KEY,\n      [context.getHandler(), context.getClass()],\n    );\n\n    if (!requiredRoles) {\n      return true;\n    }\n\n    const { user } = context.switchToHttp().getRequest();\n    return requiredRoles.some((role) => user.roles?.includes(role));\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RolesModule.html":{"url":"modules/RolesModule.html","title":"module - RolesModule","body":"\n                   \n\n\n\n\n    Modules\n    RolesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_exports\n\n\n\ncluster_RolesModule_providers\n\n\n\n\nRolesService \n\nRolesService \n\n\n\nRolesModule\n\nRolesModule\n\nRolesService  -->\n\nRolesModule->RolesService \n\n\n\n\n\nRolesService\n\nRolesService\n\nRolesModule -->\n\nRolesService->RolesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/roles/roles.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RolesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RolesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RolesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Role } from './entities/role.entity';\nimport { User } from '../users/entities/user.entity';\nimport { RolesService } from './roles.service';\nimport { RolesController } from './roles.controller';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Role, User])],\n  providers: [RolesService],\n  controllers: [RolesController],\n  exports: [RolesService],\n})\nexport class RolesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RolesService.html":{"url":"injectables/RolesService.html","title":"injectable - RolesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RolesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/roles.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                assignRolesToUser\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByName\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getUserRoles\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(rolesRepository: Repository, usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/roles/roles.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        rolesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        assignRolesToUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    assignRolesToUser(userId: number, roleIds: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roleIds\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByName\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByName(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserRoles(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Role } from './entities/role.entity';\nimport { User } from '../users/entities/user.entity';\n\n@Injectable()\nexport class RolesService {\n  constructor(\n    @InjectRepository(Role)\n    private rolesRepository: Repository,\n\n    @InjectRepository(User)\n    private usersRepository: Repository,\n  ) {}\n\n  async findAll(): Promise {\n    return this.rolesRepository.find();\n  }\n\n  async findOne(id: number): Promise {\n    const role = await this.rolesRepository.findOne({ where: { id } });\n    if (!role) {\n      throw new NotFoundException(`Role with ID ${id} not found`);\n    }\n    return role;\n  }\n\n  async findByName(name: string): Promise {\n    const role = await this.rolesRepository.findOne({ where: { name } });\n    if (!role) {\n      throw new NotFoundException(`Role with name ${name} not found`);\n    }\n    return role;\n  }\n\n  async getUserRoles(userId: number): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id: userId },\n      relations: ['roles'],\n    });\n    return user ? user.roles : [];\n  }\n\n  async assignRolesToUser(userId: number, roleIds: number[]): Promise {\n    // Find the user\n    const user = await this.usersRepository.findOne({\n      where: { id: userId },\n      relations: ['roles'],\n    });\n\n    if (!user) {\n      throw new Error('User not found');\n    }\n\n    // Find the roles\n    const roles = await this.rolesRepository.findByIds(roleIds);\n\n    // Assign roles to user\n    user.roles = roles;\n    await this.usersRepository.save(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateQueueDto.html":{"url":"classes/UpdateQueueDto.html","title":"class - UpdateQueueDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateQueueDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/dto/update-queue.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                counterNumber\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        counterNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/update-queue.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueueStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(QueueStatus)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/update-queue.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsEnum, IsOptional } from 'class-validator';\nimport { QueueStatus } from '../entities/queue.entity';\n\nexport class UpdateQueueDto {\n  @IsEnum(QueueStatus)\n  @IsOptional()\n  status?: QueueStatus;\n\n  @IsString()\n  @IsOptional()\n  counterNumber?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                defaultRole\n                            \n                            \n                                    \n                                defaultRoleId\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                middleName\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                roles\n                            \n                            \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        defaultRole\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {nullable: true})@JoinColumn({name: 'default_role_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        defaultRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'default_role_id', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'first_name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'last_name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'middle_name', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined)@JoinTable({name: 'user_roles', joinColumn: undefined, inverseJoinColumn: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:22\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  ManyToOne,\n  JoinColumn,\n  ManyToMany,\n  JoinTable,\n} from 'typeorm';\nimport { Role } from '../../roles/entities/role.entity';\n\n@Entity('users')\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true })\n  email: string;\n  \n  @Column({ unique: true })\n  username: string;\n\n  @Column()\n  password: string;\n  \n  @Column({ name: 'first_name' })\n  firstName: string;\n  \n  @Column({ name: 'middle_name', nullable: true })\n  middleName: string;\n  \n  @Column({ name: 'last_name' })\n  lastName: string;\n\n  @Column()\n  name: string; // Keep for backward compatibility\n\n  @CreateDateColumn({ name: 'created_at' })\n  createdAt: Date;\n\n  @ManyToOne(() => Role, { nullable: true })\n  @JoinColumn({ name: 'default_role_id' })\n  defaultRole: Role;\n\n  @Column({ name: 'default_role_id', nullable: true })\n  defaultRoleId: number;\n\n  @ManyToMany(() => Role)\n  @JoinTable({\n    name: 'user_roles',\n    joinColumn: {\n      name: 'user_id',\n      referencedColumnName: 'id',\n    },\n    inverseJoinColumn: {\n      name: 'role_id',\n      referencedColumnName: 'id',\n    },\n  })\n  roles: Role[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './entities/user.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  exports: [TypeOrmModule],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/auth/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/decorators/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/config/database.config.ts\n            \n            variable\n            databaseConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            seedDatabaseIfNeeded\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/counter/entities/counter.entity.ts\n            \n            entity\n            Counter\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/queue/dto/create-queue.dto.ts\n            \n            class\n            CreateQueueDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/modules/queue/dto/update-queue.dto.ts\n            \n            class\n            UpdateQueueDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/queue/entities/queue-details.entity.ts\n            \n            entity\n            QueueDetails\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/queue/entities/queue.entity.ts\n            \n            entity\n            Queue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/queue/queue.controller.ts\n            \n            controller\n            QueueController\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/modules/queue/queue.gateway.ts\n            \n            class\n            QueueGateway\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/modules/queue/queue.service.ts\n            \n            injectable\n            QueueService\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/roles/entities/role.entity.ts\n            \n            entity\n            Role\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/roles/roles.controller.ts\n            \n            controller\n            RolesController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/roles/roles.service.ts\n            \n            injectable\n            RolesService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^11.1.0\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.1.0\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/passport : ^11.0.5\n        \n            @nestjs/platform-express : ^11.1.0\n        \n            @nestjs/platform-socket.io : ^11.1.0\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            @nestjs/websockets : ^11.1.0\n        \n            bcrypt : ^5.1.1\n        \n            class-validator : ^0.14.1\n        \n            dotenv : ^16.5.0\n        \n            mysql2 : ^3.14.1\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.2\n        \n            socket.io : ^4.8.1\n        \n            typeorm : ^0.3.22\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CounterStatus   (src/.../counter.entity.ts)\n                        \n                        \n                            QueueStatus   (src/.../queue.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/counter/entities/counter.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        CounterStatus\n                    \n                \n                        \n                            \n                                 ACTIVE\n                            \n                        \n                        \n                            \n                                Value : active\n                            \n                        \n                        \n                            \n                                 INACTIVE\n                            \n                        \n                        \n                            \n                                Value : inactive\n                            \n                        \n            \n        \n\n    src/modules/queue/entities/queue.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        QueueStatus\n                    \n                \n                        \n                            \n                                 PENDING\n                            \n                        \n                        \n                            \n                                Value : pending\n                            \n                        \n                        \n                            \n                                 SERVING\n                            \n                        \n                        \n                            \n                                Value : serving\n                            \n                        \n                        \n                            \n                                 COMPLETED\n                            \n                        \n                        \n                            \n                                Value : completed\n                            \n                        \n                        \n                            \n                                 CANCELLED\n                            \n                        \n                        \n                            \n                                Value : cancelled\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            seedDatabaseIfNeeded   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seedDatabaseIfNeeded\n                        \n                    \n                \n            \n            \n                \nseedDatabaseIfNeeded(dataSource: DataSource)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dataSource\n                                            \n                                                        DataSource\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        QueueModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RolesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_QueueModule\n\n\n\ncluster_QueueModule_exports\n\n\n\ncluster_QueueModule_providers\n\n\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_exports\n\n\n\ncluster_RolesModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nQueueModule\n\nQueueModule\n\nAppModule -->\n\nQueueModule->AppModule\n\n\n\n\n\nQueueGateway \n\nQueueGateway \n\nQueueGateway  -->\n\nQueueModule->QueueGateway \n\n\n\n\n\nQueueService \n\nQueueService \n\nQueueService  -->\n\nQueueModule->QueueService \n\n\n\n\n\nRolesModule\n\nRolesModule\n\nAuthModule -->\n\nRolesModule->AuthModule\n\n\n\nAppModule -->\n\nRolesModule->AppModule\n\n\n\n\n\nRolesService \n\nRolesService \n\nRolesService  -->\n\nRolesModule->RolesService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nQueueService\n\nQueueService\n\nQueueModule -->\n\nQueueService->QueueModule\n\n\n\n\n\nRolesService\n\nRolesService\n\nRolesModule -->\n\nRolesService->RolesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            databaseConfig   (src/.../database.config.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/database.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        databaseConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TypeOrmModuleOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'mysql',\n  host: process.env.DB_HOST || 'localhost',\n  port: parseInt(process.env.DB_PORT || '3306'),\n  username: process.env.DB_USERNAME || 'root',\n  password: process.env.DB_PASSWORD || '',\n  database: process.env.DB_NAME || 'bulak_smart_connect',\n  entities: [__dirname + '/../**/*.entity{.ts,.js}'],\n  synchronize: process.env.NODE_ENV !== 'production',\n  logging: process.env.NODE_ENV !== 'production',\n}\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: string[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
