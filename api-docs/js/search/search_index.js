var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AdminUpdateUserDto.html",[0,0.176,1,2.124]],["body/classes/AdminUpdateUserDto.html",[0,0.297,1,3.128,2,0.964,3,0.098,4,0.098,5,0.098,6,4.781,7,2.697,8,1.998,9,3.85,10,2.475,11,2.195,12,1.683,13,2.475,14,4.134,15,0.188,16,0.586,17,1.51,18,3.279,19,3.446,20,2.682,21,3.128,22,1.987,23,2.276,24,2.276,25,3.128,26,3.128,27,2.429,28,2.91,29,0.464,30,0.013,31,1.385,32,1.155,33,4.999,34,1.194,35,2.013,36,1.013,37,2.636,38,3.71,39,0.674,40,3.71,41,2.701,42,4.128,43,2.976,44,1.174,45,3.71,46,3.71,47,0.739,48,4.565,49,4.565,50,4.565,51,4.565,52,4.565,53,4.565,54,3.239,55,7.673,56,3.71,57,3.541,58,3.239,59,3.71,60,3.239,61,3.71,62,3.138,63,1.277,64,3.239,65,3.71,66,2.976,67,2.929,68,3.71,69,3.541,70,2.929,71,3.71,72,3.541,73,3.802,74,4.101,75,3.802,76,2.929,77,3.71,78,3.802,79,2.75,80,2.583,81,3.541,82,2.991,83,3.239,84,3.71,85,3.239,86,3.71,87,0.156,88,2.475,89,2.781,90,2.688,91,3.541,92,4.128,93,1.174,94,3.464,95,1.063,96,2.512,97,2.512,98,1.916,99,0.156,100,1.833,101,2.929,102,2.929,103,2.227,104,2.929,105,2.358,106,2.697,107,3.239,108,3.541,109,1.557,110,0.008,111,0.008]],["title/entities/Announcement.html",[112,1.259,113,2.785]],["body/entities/Announcement.html",[0,0.217,3,0.134,4,0.134,5,0.134,8,1.784,10,3.049,15,0.257,16,0.722,29,0.486,30,0.013,31,1.208,32,1.19,34,1.703,36,1.373,39,0.694,47,0.728,87,0.151,99,0.151,110,0.01,111,0.01,112,1.55,113,4.363,114,2.21,115,4.421,116,3.218,117,6.187,118,6.187,119,3.837,120,6.187,121,4.799,122,2.804,123,4.033,124,5.063,125,4.896,126,7.873,127,4.067,128,3.049,129,5.063,130,5.087,131,5.063,132,3.661,133,5.063,134,5.625,135,3.328,136,1.939,137,5.063,138,2.706,139,5.063,140,5.625,141,5.063,142,5.152,143,5.063,144,3.889,145,1.714,146,5.063]],["title/controllers/AnnouncementController.html",[147,1.662,148,2.99]],["body/controllers/AnnouncementController.html",[0,0.205,3,0.127,4,0.127,5,0.127,11,2.893,15,0.242,17,1.371,29,0.439,30,0.013,31,1.55,32,1.139,34,1.09,36,1.502,39,0.664,63,1.28,87,0.218,99,0.142,110,0.009,111,0.009,147,1.93,148,4.511,149,1.93,150,4.168,151,2.865,152,4.774,153,2.251,154,2.818,155,3.951,156,3.359,157,5.417,158,3.065,159,4.168,160,4.928,161,4.381,162,4.774,163,2.843,164,2.716,165,4.774,166,2.358,167,3.944,168,4.774,169,4.168,170,6.204,171,4.774,172,2.083,173,3.359,174,4.201,175,2.585,176,4.511,177,4.774,178,3.035,179,5.418,180,4.511,181,4.774,182,4.201,183,3.471,184,2.865,185,3.035,186,7.563,187,3.233,188,0.957,189,4.381,190,4.168,191,2.585,192,4.898,193,2.717,194,4.774,195,2.259,196,1.86,197,4.774,198,2.081,199,4.774,200,4.774,201,4.774,202,4.774,203,4.168,204,4.774,205,3.471,206,4.774,207,3.769,208,4.774]],["title/modules/AnnouncementModule.html",[209,1.392,210,2.785]],["body/modules/AnnouncementModule.html",[0,0.251,3,0.155,4,0.155,5,0.155,30,0.013,87,0.239,99,0.174,110,0.01,111,0.01,113,3.96,148,5.496,149,2.848,188,1.172,189,5.398,190,5.106,209,2.559,210,5.587,211,2.889,212,2.889,213,3.166,214,3.166,215,2.889,216,4.093,217,4.093,218,5.106,219,5.106,220,5.106,221,3.814,222,2.889,223,3.021,224,5.848,225,3.328,226,2.198,227,5.848,228,5.106,229,3.328,230,5.848]],["title/injectables/AnnouncementService.html",[189,2.614,231,1.035]],["body/injectables/AnnouncementService.html",[0,0.184,3,0.113,4,0.113,5,0.113,11,2.741,15,0.217,17,1.362,29,0.436,30,0.013,31,1.524,34,0.977,36,1.489,39,0.658,63,1.272,87,0.224,99,0.128,110,0.009,111,0.009,113,5.203,116,2.621,119,3.535,136,1.697,145,1.449,153,2.094,154,2.965,155,3.784,156,3.124,157,5.038,158,2.851,159,3.736,160,4.884,163,2.825,164,2.634,166,2.851,169,5.038,172,1.868,173,3.124,174,3.908,175,3.124,178,2.721,179,5.29,185,2.721,188,0.857,189,3.668,191,2.317,192,4.556,193,2.435,198,1.959,226,1.609,228,3.736,231,1.452,232,2.025,233,3.736,234,3.142,235,2.333,236,4.28,237,3.61,238,4.28,239,5.771,240,4.28,241,3.548,242,4.28,243,4.28,244,4.28,245,4.28,246,4.28,247,2.721,248,2.317,249,4.28,250,1.668,251,2.069,252,4.28,253,2.936,254,6.529,255,5.771,256,3.908,257,3.908,258,4.28,259,1.609,260,1.149,261,4.28,262,2.025,263,3.908,264,4.28,265,4.28,266,1.4,267,4.28,268,2.898]],["title/controllers/AppController.html",[147,1.662,269,2.99]],["body/controllers/AppController.html",[0,0.255,3,0.158,4,0.158,5,0.158,15,0.301,30,0.013,32,1.045,39,0.61,47,0.684,87,0.212,99,0.177,110,0.011,111,0.011,147,2.877,149,2.404,153,2.581,164,2.493,188,1.191,195,2.814,196,2.317,198,1.911,269,5.173,270,5.192,271,6.889,272,7.891,273,5.947,274,7.115,275,5.947,276,1.791,277,4.841,278,5.192,279,5.947,280,5.947]],["title/modules/AppModule.html",[209,1.392,281,2.99]],["body/modules/AppModule.html",[0,0.167,3,0.103,4,0.103,5,0.103,27,1.362,28,1.632,29,0.226,30,0.013,47,0.486,87,0.246,99,0.116,110,0.008,111,0.008,114,1.696,136,1.833,149,2.184,187,3.658,188,0.779,209,2.102,210,4.944,211,1.92,212,1.92,213,2.104,214,2.104,215,1.92,216,3.362,217,2.104,221,2.925,222,1.92,223,2.008,225,2.212,226,1.461,229,3.534,234,2.031,241,2.929,251,1.151,253,2.334,266,2.032,269,4.515,277,4.641,278,3.393,281,6.113,282,3.393,283,3.393,284,3.393,285,4.944,286,4.944,287,4.944,288,4.944,289,4.381,290,4.944,291,4.641,292,4.381,293,3.886,294,4.717,295,3.819,296,2.104,297,3.393,298,2.826,299,3.068,300,3.886,301,3.886,302,3.886,303,3.886,304,3.068,305,3.886,306,3.886,307,3.886,308,3.886,309,2.826,310,3.886,311,1.696,312,3.068,313,3.068,314,3.068,315,3.886,316,3.886,317,3.886,318,3.068,319,3.393,320,4.717,321,3.393,322,3.886,323,2.826,324,3.886,325,3.886,326,3.886,327,2.826,328,3.886,329,3.393,330,3.393,331,4.717,332,3.886,333,3.074,334,4.205,335,5.421,336,2.826,337,3.886,338,1.632,339,3.886,340,3.886,341,3.886,342,5.402,343,3.886,344,6.209,345,4.879,346,3.886,347,3.886,348,7.052,349,3.886,350,3.886,351,3.886,352,3.886,353,1.839,354,3.886,355,5.402,356,3.886,357,3.068,358,2.332,359,3.886,360,5.298,361,3.886,362,2.008,363,3.886,364,3.886,365,3.886,366,3.886,367,3.886,368,5.402,369,3.068,370,3.886,371,2.826,372,3.393,373,3.886,374,3.886,375,3.928,376,2.332,377,3.886,378,2.632,379,3.886,380,3.886,381,3.886,382,3.886,383,3.886,384,3.886,385,3.886,386,3.393,387,3.886]],["title/injectables/AppService.html",[231,1.035,277,2.614]],["body/injectables/AppService.html",[0,0.271,3,0.167,4,0.167,5,0.167,15,0.32,30,0.013,39,0.541,47,0.662,87,0.188,99,0.188,110,0.011,111,0.011,153,2.674,164,2.211,188,1.264,198,1.694,231,1.855,232,2.986,271,7.024,277,4.685,388,5.509,389,6.31,390,6.31,391,6.31]],["title/classes/ApplicationNotificationDto.html",[0,0.176,392,2.226]],["body/classes/ApplicationNotificationDto.html",[0,0.315,2,0.944,3,0.096,4,0.096,5,0.096,8,2.021,15,0.184,16,0.577,20,2.914,22,2.418,27,2.098,29,0.415,30,0.013,32,0.957,34,1.177,36,0.999,37,2.595,39,0.558,47,0.737,79,2.34,80,2.545,82,2.957,87,0.154,88,3.477,89,2.098,90,2.675,93,1.15,94,2.613,95,1.041,99,0.213,100,1.795,110,0.008,111,0.008,127,1.877,128,1.719,260,0.976,276,1.731,311,3.451,362,2.662,392,2.79,393,2.18,394,3.242,395,3.093,396,3.083,397,3.118,398,2.662,399,3.633,400,3.633,401,2.662,402,3.633,403,3.633,404,2.932,405,3.868,406,3.477,407,2.31,408,3.224,409,3.978,410,4.409,411,4.181,412,3.633,413,3.093,414,2.735,415,3.172,416,3.633,417,2.893,418,2.18,419,1.967,420,1.795,421,3.527,422,3.945,423,2.932,424,1.967,425,4,426,3.092,427,2.932,428,3.275,429,3.593,430,2.248,431,3.91,432,3.275,433,3.275,434,3.092,435,3.275,436,3.593,437,3.806,438,1.967,439,2.18,440,1.967,441,2.18,442,2.18,443,2.18,444,2.18,445,2.18,446,2.18,447,3.092,448,2.18,449,3.092,450,2.18,451,2.31,452,2.31,453,2.31,454,2.31,455,2.31,456,2.067,457,2.067,458,2.067,459,2.067,460,1.967,461,1.967,462,2.18,463,2.067,464,1.585,465,1.967,466,1.795,467,1.877,468,1.877]],["title/entities/ApplicationStatusHistory.html",[112,1.259,469,2.785]],["body/entities/ApplicationStatusHistory.html",[0,0.197,3,0.122,4,0.122,5,0.122,15,0.307,16,0.679,29,0.47,30,0.013,31,1.348,32,1.166,36,1.312,39,0.68,47,0.713,63,1.324,87,0.181,99,0.137,110,0.009,111,0.009,112,1.408,114,2.007,122,2.276,123,3.445,127,3.963,130,4.78,132,3.496,135,4.1,136,1.994,144,3.79,145,1.557,266,1.505,276,2.021,394,3.664,397,2.953,398,3.127,469,4.1,470,4.148,471,7.011,472,4.015,473,6.768,474,6.768,475,5.909,476,6.768,477,4.583,478,4.572,479,2.924,480,6.054,481,4.78,482,4.402,483,4.599,484,6.279,485,4.599,486,4.485,487,5.578,488,4.599,489,3.115,490,6.054,491,4.599,492,6.054,493,4.599,494,4.599,495,6.054,496,4.599,497,6.054,498,4.599,499,5.286,500,4.599,501,3.849,502,3.634,503,2.617,504,2.924,505,4.599,506,4.015,507,4.599,508,2.272]],["title/entities/Appointment.html",[112,1.259,509,2.34]],["body/entities/Appointment.html",[0,0.182,3,0.113,4,0.113,5,0.113,12,1.641,15,0.215,16,0.644,20,2.36,23,2.445,24,2.445,29,0.485,30,0.013,31,1.306,32,1.218,34,1.485,36,1.261,39,0.71,44,1.344,47,0.751,63,0.719,87,0.171,99,0.171,110,0.009,111,0.009,112,1.3,114,1.854,116,2.954,121,4.405,122,2.819,123,3.702,125,3.65,132,3.36,135,3.599,136,1.993,138,2.083,142,4.729,144,4.138,145,1.438,266,1.879,276,1.637,414,3.055,464,2.506,479,2.701,501,3.65,502,3.446,509,3.268,510,3.354,511,5.135,512,4.405,513,5.135,514,4.729,515,4.405,516,3.904,517,4.405,518,2.836,519,4.248,520,4.248,521,3.354,522,4.248,523,4.248,524,4.248,525,4.248,526,4.248,527,3.709,528,4.248,529,4.248,530,4.534,531,4.248,532,4.248,533,4.248,534,4.626,535,4.248,536,4.248,537,2.877,538,4.534,539,5.742,540,4.248,541,4.248,542,2.418,543,3.889,544,3.65,545,3.446,546,4.248,547,3.089,548,3.709]],["title/controllers/AppointmentController.html",[147,1.662,549,2.99]],["body/controllers/AppointmentController.html",[0,0.112,3,0.069,4,0.069,5,0.069,8,1.016,10,2.624,11,2.772,12,1.723,15,0.132,17,1.319,29,0.422,30,0.013,31,0.49,32,1.085,36,1.505,39,0.633,47,0.742,63,1.231,87,0.217,95,0.749,96,1.77,99,0.078,110,0.006,111,0.006,122,2.776,147,1.057,149,1.057,151,1.569,153,1.464,154,2.722,155,2.185,156,2.67,158,1.994,161,2.566,163,2.776,164,2.588,166,1.291,167,1.661,175,1.415,176,1.9,178,1.661,180,1.9,182,3.339,183,1.9,184,1.569,185,3.525,187,1.77,188,0.524,191,1.415,193,1.487,195,1.237,196,1.573,198,1.954,205,3.585,207,2.063,234,3.122,250,1.018,251,1.642,253,1.853,259,2.381,260,1.879,266,1.321,276,1.716,338,1.694,375,1.9,508,2.739,509,4.583,512,3.339,518,1.018,534,3.525,549,2.934,550,2.282,551,6.11,552,3.524,553,4.036,554,3.524,555,4.036,556,4.93,557,3.525,558,3.339,559,2.282,560,4.027,561,3.696,562,2.282,563,2.613,564,2.934,565,2.297,566,2.297,567,2.613,568,3.594,569,2.613,570,2.282,571,5.37,572,2.282,573,4.036,574,2.613,575,5.765,576,2.733,577,2.282,578,5.545,579,4.036,580,2.613,581,2.282,582,2.613,583,2.613,584,2.613,585,2.613,586,2.282,587,4.036,588,4.305,589,2.613,590,2.613,591,2.613,592,4.841,593,4.449,594,2.613,595,2.613,596,5.53,597,4.036,598,2.613,599,2.613,600,5.232,601,2.613,602,2.613,603,2.613,604,2.613,605,4.618,606,2.282,607,2.613,608,1.569,609,2.613,610,2.613,611,1.77,612,3.41,613,2.613,614,2.613,615,3.134,616,2.282,617,3.186,618,1.487,619,1.9,620,1.77,621,3.245,622,1.9,623,0.948,624,1.9,625,1.77,626,2.282,627,2.063,628,1.9,629,4.801,630,2.934,631,1.9,632,2.613,633,2.613,634,4.059,635,2.063,636,1.569,637,2.613,638,4.605,639,2.613,640,2.613,641,4.731,642,2.613,643,2.613,644,2.063,645,4.059,646,2.613,647,4.036,648,2.613,649,2.613,650,2.613,651,6.334,652,2.613,653,2.282,654,1.9,655,2.613,656,2.613,657,4.036,658,4.036,659,2.67,660,2.613,661,2.282,662,2.613,663,2.613,664,2.282,665,2.282,666,2.613,667,2.613,668,2.063,669,2.613,670,2.282,671,4.93,672,2.613,673,2.613,674,2.185,675,4.036,676,4.036,677,3.524,678,3.524,679,3.524,680,3.524,681,4.036,682,4.036,683,2.613,684,2.613,685,2.063,686,2.613,687,2.613,688,2.282,689,2.063,690,2.613,691,1.569,692,2.613,693,2.613,694,2.613,695,2.613,696,2.613]],["title/modules/AppointmentModule.html",[209,1.392,285,2.785]],["body/modules/AppointmentModule.html",[0,0.251,3,0.155,4,0.155,5,0.155,30,0.013,87,0.239,99,0.174,110,0.01,111,0.01,149,2.848,188,1.172,209,2.559,211,2.889,212,2.889,213,3.166,214,3.166,215,2.889,216,4.093,217,4.093,221,3.814,222,2.889,223,3.021,225,3.328,226,2.198,229,3.328,285,5.587,509,3.328,549,5.496,615,5.398,616,5.106,625,3.96,697,5.106,698,5.106,699,5.106,700,5.848,701,5.848,702,5.848]],["title/classes/AppointmentNotificationDto.html",[0,0.176,703,2.99]],["body/classes/AppointmentNotificationDto.html",[0,0.258,2,1.186,3,0.121,4,0.121,5,0.121,8,1.927,15,0.231,16,0.675,17,1.299,20,2.185,22,2.136,23,1.715,24,1.715,29,0.484,30,0.013,32,1.125,33,3.829,37,2.561,39,0.656,44,1.444,47,0.746,87,0.18,88,2.85,89,2.362,90,2.612,93,1.444,94,2.942,95,1.308,99,0.136,110,0.009,111,0.009,122,1.715,136,1.566,260,1.617,276,1.965,376,2.739,396,3.393,405,2.471,414,2.529,417,2.704,420,2.975,463,2.597,509,4.509,512,4.566,516,2.739,543,3.09,545,3.615,703,4.379,704,6.816,705,3.603,706,5.886,707,5.885,708,2.901,709,4.079,710,4.558,711,6.023,712,4.563,713,5.259,714,5.259,715,4.755,716,4.563,717,3.984,718,5.259,719,4.563,720,3.984,721,5.885,722,5.259,723,4.563,724,4.563,725,3.829,726,4.563,727,4.563,728,6.26,729,5.323,730,5.886,731,4.379,732,4.563,733,3.984,734,4.303,735,3.984,736,3.984]],["title/injectables/AppointmentService.html",[231,1.035,615,2.614]],["body/injectables/AppointmentService.html",[0,0.096,3,0.059,4,0.059,5,0.059,11,2.137,12,0.764,15,0.113,16,0.4,17,1.307,29,0.438,30,0.013,31,1.386,34,0.511,36,1.474,39,0.64,47,0.712,63,1.221,79,1.016,87,0.186,96,2.419,99,0.067,109,0.939,110,0.005,111,0.005,122,2.989,145,0.757,153,1.296,154,2.025,155,1.934,156,2.414,158,1.764,163,2.712,164,2.562,166,1.105,172,0.976,175,1.934,178,1.422,188,0.448,191,1.211,193,1.273,196,1.737,198,1.874,226,0.841,231,0.899,232,1.059,234,3.088,235,1.444,237,2.63,241,3.424,247,1.422,248,1.211,250,2.663,251,2.312,253,2.569,256,3.447,257,1.515,259,2.809,260,1.908,262,2.11,263,2.419,276,1.816,338,2.137,376,4.102,398,1.156,406,2.11,425,1.156,430,3.1,464,0.976,508,2.203,509,4.328,511,5.104,512,3.447,513,4.683,518,1.392,534,3.236,543,1.515,544,1.422,545,1.343,548,3.893,551,4.858,552,3.893,554,3.119,558,3.02,559,1.953,560,3.771,568,1.105,576,2.419,577,1.953,586,3.119,588,4.445,596,4.858,600,3.893,605,4.378,608,1.343,612,1.273,615,2.271,617,2.82,625,1.515,661,1.953,668,2.82,674,3.012,708,3.236,737,1.953,738,4.459,739,3.572,740,5.091,741,3.572,742,4.459,743,5.091,744,2.237,745,3.572,746,3.572,747,2.237,748,2.237,749,2.237,750,1.627,751,2.237,752,3.701,753,3.572,754,2.237,755,2.237,756,2.237,757,2.237,758,3.572,759,2.237,760,2.237,761,2.237,762,2.237,763,2.237,764,2.237,765,2.237,766,2.237,767,3.572,768,1.953,769,2.237,770,2.237,771,1.766,772,1.953,773,2.237,774,3.292,775,2.237,776,2.237,777,2.237,778,3.52,779,2.237,780,4.459,781,2.237,782,2.237,783,2.237,784,2.237,785,2.237,786,3.893,787,3.572,788,5.564,789,3.572,790,5.931,791,4.459,792,4.459,793,2.237,794,3.572,795,3.572,796,3.572,797,3.572,798,3.572,799,4.459,800,3.572,801,2.237,802,2.144,803,2.237,804,3.572,805,2.237,806,3.194,807,4.123,808,5.091,809,1.515,810,2.237,811,2.237,812,2.237,813,1.953,814,2.237,815,2.237,816,2.237,817,3.572,818,3.572,819,3.572,820,1.953,821,2.237,822,4.459,823,2.237,824,2.237,825,2.237,826,2.237,827,1.343,828,2.237,829,2.237,830,1.953,831,2.237,832,2.237,833,2.237,834,2.237,835,2.237,836,2.237,837,3.52,838,3.701,839,2.237,840,2.237,841,2.237,842,2.237,843,2.237,844,2.237,845,1.953,846,3.572,847,3.572,848,3.572,849,3.119,850,3.572,851,1.766,852,5.931,853,2.237,854,2.237,855,2.237,856,3.572,857,2.237,858,2.237,859,2.237,860,2.237,861,1.273,862,1.156,863,1.627,864,4.459,865,2.033,866,3.572,867,3.572,868,2.237,869,1.953,870,3.572,871,2.237]],["title/modules/AuthModule.html",[209,1.392,286,2.785]],["body/modules/AuthModule.html",[0,0.207,3,0.128,4,0.128,5,0.128,12,1.034,30,0.013,87,0.248,99,0.144,110,0.009,111,0.009,149,2.528,188,0.968,209,2.347,211,2.388,212,2.388,213,2.617,214,2.617,215,2.388,216,3.754,217,3.754,221,3.386,222,2.388,223,2.497,225,2.751,226,1.817,229,3.945,286,5.732,289,4.668,291,5.265,292,4.97,294,5.46,295,4.172,296,2.617,304,3.816,311,2.729,312,3.816,313,3.816,314,3.816,318,3.816,319,4.22,542,2.751,872,4.22,873,4.833,874,4.22,875,4.22,876,5.608,877,4.97,878,4.833,879,5.473,880,4.833,881,3.816,882,6.254,883,3.073,884,4.22,885,4.833,886,3.816,887,4.22,888,4.833,889,4.833,890,3.073,891,4.833,892,4.22,893,3.514,894,4.833,895,4.833,896,4.833]],["title/interfaces/AuthenticatedUser.html",[561,2.031,897,1.392]],["body/interfaces/AuthenticatedUser.html",[0,0.219,3,0.135,4,0.135,5,0.135,13,2.417,15,0.259,16,0.726,22,2.297,29,0.413,30,0.013,31,1.403,35,1.563,36,1.497,39,0.438,41,3.676,44,1.616,47,0.694,63,0.864,87,0.223,99,0.193,110,0.01,111,0.01,188,1.023,195,2.417,198,1.372,231,1.631,251,2.216,259,2.435,260,1.74,266,1.671,295,4.049,296,2.765,334,3.459,518,2.525,561,3.515,623,2.908,877,3.065,883,3.247,890,4.119,893,3.714,897,2.193,898,2.765,899,3.714,900,3.459,901,4.032,902,4.032,903,5.115,904,3.714,905,4.387,906,3.714,907,4.032,908,4.032,909,3.714,910,4.032,911,4.819,912,4.032,913,3.459,914,4.032,915,4.032,916,4.032,917,4.032,918,4.032,919,4.032,920,3.459,921,5.173,922,4.032,923,4.032,924,3.459,925,3.714,926,4.032,927,4.032,928,4.032,929,4.032]],["title/entities/Counter.html",[112,1.259,930,2.34]],["body/entities/Counter.html",[0,0.222,3,0.137,4,0.137,5,0.137,15,0.263,16,0.733,29,0.46,30,0.013,31,1.41,32,1.14,34,1.493,36,1.388,39,0.664,44,1.64,47,0.588,63,1.313,87,0.195,99,0.195,110,0.01,111,0.01,112,1.586,114,2.262,125,3.295,132,3.701,135,3.886,136,1.862,144,3.832,145,1.755,276,1.803,414,3.256,486,3.111,502,3.925,537,3.51,538,5.163,930,3.721,931,4.092,932,7.164,933,7.164,934,3.913,935,5.095,936,4.525,937,6.539,938,7.523,939,6.539,940,5.183,941,5.183,942,5.183,943,5.183,944,6.772,945,5.183,946,5.709,947,5.183,948,4.157,949,4.754,950,5.183,951,5.183]],["title/classes/CreateAnnouncementDto.html",[0,0.176,160,2.614]],["body/classes/CreateAnnouncementDto.html",[0,0.294,2,1.457,3,0.149,4,0.149,5,0.149,8,1.868,15,0.284,16,0.769,17,1.463,29,0.461,30,0.013,32,1.166,39,0.68,47,0.742,87,0.167,89,2.71,90,2.78,93,1.774,99,0.167,110,0.01,111,0.01,117,6.479,118,6.479,119,4.018,120,6.479,138,2.491,160,4.364,734,4.454,952,7.05,953,4.425,954,5.994,955,5.605,956,5.994,957,5.605,958,5.605,959,5.605,960,5.605,961,5.605,962,5.42]],["title/classes/CreateAppointmentDto.html",[0,0.176,560,2.614]],["body/classes/CreateAppointmentDto.html",[0,0.27,2,1.267,3,0.129,4,0.129,5,0.129,15,0.247,16,0.705,17,1.413,20,2.525,23,2.616,24,2.616,29,0.478,30,0.013,31,1.178,32,1.211,39,0.706,47,0.757,87,0.187,89,2.779,90,2.815,93,1.542,99,0.145,110,0.009,111,0.009,138,2.281,276,1.752,511,5.495,513,5.495,514,5.061,515,4.714,516,4.177,517,4.714,518,2.712,534,4.425,560,3.997,625,3.301,734,4.822,735,5.489,954,4.255,963,7.239,964,3.848,965,7.794,966,4.874,967,4.874,968,4.874,969,4.874,970,4.874,971,4.874,972,4.874,973,4.874,974,4.874,975,4.874,976,4.255,977,4.874,978,4.874,979,3.301,980,4.255]],["title/classes/CreateDocumentApplicationDto.html",[0,0.176,981,2.785]],["body/classes/CreateDocumentApplicationDto.html",[0,0.271,2,1.274,3,0.13,4,0.13,5,0.13,8,1.919,15,0.248,16,0.707,17,1.458,23,1.842,24,1.842,29,0.453,30,0.013,32,1.083,37,2.546,39,0.631,47,0.662,87,0.208,89,2.445,90,2.445,93,1.551,95,1.405,99,0.146,110,0.009,111,0.009,266,2.065,276,1.588,358,3.787,395,4.156,396,3.303,397,3.511,401,3.26,408,2.551,414,2.058,417,2.766,468,3.26,470,3.939,477,4.726,503,4.519,504,3.116,659,3.99,709,4.273,979,3.319,981,4.273,982,6.657,983,3.869,984,5.51,985,6.093,986,6.31,987,6.31,988,4.982,989,4.901,990,4.279,991,4.901,992,4.901,993,4.982,994,6.31,995,6.31,996,4.901,997,4.901,998,6.31,999,6.31,1000,4.901,1001,6.31,1002,3.563,1003,4.901,1004,4.901,1005,4.901,1006,4.901,1007,4.901,1008,4.901,1009,4.901,1010,4.982,1011,4.901,1012,4.901]],["title/classes/CreateQueueDto.html",[0,0.176,1013,3.246]],["body/classes/CreateQueueDto.html",[0,0.276,2,1.316,3,0.134,4,0.134,5,0.134,15,0.257,16,0.722,17,1.493,20,2.571,23,2.664,24,2.664,29,0.474,30,0.013,31,1.208,32,1.201,39,0.7,47,0.76,87,0.151,89,2.803,90,2.837,93,1.602,99,0.151,110,0.01,111,0.01,138,2.338,514,5.152,515,4.799,516,4.253,517,4.799,518,2.762,734,4.623,956,6.513,962,5.087,1013,5.087,1014,7.193,1015,3.998,1016,6.187,1017,6.187,1018,5.063,1019,5.063,1020,5.063,1021,5.063,1022,5.063,1023,5.063,1024,5.063,1025,5.063,1026,5.063,1027,5.063]],["title/classes/CreateUserDto.html",[0,0.176,1028,2.34]],["body/classes/CreateUserDto.html",[0,0.228,2,0.989,3,0.101,4,0.101,5,0.101,7,2.767,8,2.102,12,1.719,15,0.193,16,0.597,17,1.489,18,3.325,19,3.494,20,1.381,21,3.172,22,2.134,23,2.308,24,2.308,25,3.172,26,3.172,27,2.452,28,2.938,29,0.466,30,0.013,31,1.359,32,1.161,34,1.216,35,2.036,36,1.032,37,2.501,39,0.677,41,2.75,42,4.204,43,3.03,44,1.205,47,0.741,57,3.606,62,3.195,63,1.338,66,3.03,69,3.606,72,3.606,73,3.871,74,4.911,75,2.767,80,2.63,81,3.606,82,3.033,87,0.159,88,2.52,89,2.662,90,2.704,91,4.158,92,4.204,93,1.205,94,3.315,95,1.091,99,0.113,103,3.991,105,4.228,108,2.578,110,0.008,111,0.008,136,1.384,333,3.03,417,2.539,425,3.172,734,3.991,1028,3.03,1029,6.962,1030,5.878,1031,4.649,1032,3.806,1033,3.806,1034,3.385,1035,3.806,1036,3.806,1037,4.228,1038,4.649,1039,3.806,1040,3.806,1041,5.324,1042,3.806,1043,3.323,1044,5.806,1045,3.806,1046,3.323,1047,3.03,1048,3.606,1049,4.204,1050,3.806,1051,3.323,1052,5.324,1053,3.806,1054,3.323,1055,4.204,1056,3.806,1057,3.806,1058,3.806,1059,5.324,1060,3.806,1061,4.649,1062,3.806,1063,3.323,1064,3.606,1065,3.806,1066,2.767]],["title/entities/DocumentApplication.html",[112,1.259,478,2.614]],["body/entities/DocumentApplication.html",[0,0.158,3,0.138,4,0.098,5,0.16,12,1.578,15,0.264,16,0.583,29,0.479,30,0.013,31,1.228,32,1.174,34,1.188,36,1.169,39,0.685,44,1.165,47,0.645,63,1.314,87,0.195,99,0.18,110,0.008,111,0.008,112,1.127,114,1.607,116,2.739,121,4.085,122,2.464,123,2.96,125,3.307,127,3.116,128,2.462,130,4.107,135,4.011,136,2.041,142,3.782,144,3.721,145,1.247,266,2.145,276,1.649,395,3.891,397,1.607,401,1.902,413,2.687,414,3.26,464,2.27,465,2.817,466,1.819,467,1.902,468,3.116,469,4.439,470,4.158,477,4.085,478,3.307,479,2.341,482,4.765,486,4.149,487,3.782,489,2.494,499,4.542,501,3.307,502,3.122,503,2.096,508,1.819,518,2.35,537,2.494,542,2.096,984,4.762,985,5.266,993,4.107,1067,5.852,1068,2.907,1069,4.762,1070,6.031,1071,6.031,1072,5.202,1073,3.683,1074,5.202,1075,3.683,1076,4.107,1077,3.683,1078,4.439,1079,4.542,1080,5.202,1081,3.683,1082,5.202,1083,5.202,1084,3.683,1085,3.683,1086,3.683,1087,5.202,1088,3.683,1089,5.027,1090,3.683,1091,5.202,1092,5.202,1093,5.202,1094,3.683,1095,3.683,1096,3.215,1097,4.542,1098,3.683,1099,5.174,1100,3.683,1101,3.683,1102,5.202,1103,5.266,1104,3.215,1105,3.215,1106,3.215,1107,3.215,1108,4.542,1109,3.215,1110,2.677,1111,3.215,1112,3.215,1113,3.215,1114,3.215,1115,3.215,1116,4.542,1117,4.542,1118,3.215,1119,3.215,1120,3.215,1121,2.907,1122,3.683,1123,3.683,1124,3.683,1125,3.683,1126,3.683,1127,3.683]],["title/controllers/DocumentApplicationsController.html",[147,1.662,1128,2.99]],["body/controllers/DocumentApplicationsController.html",[0,0.094,3,0.058,4,0.058,5,0.18,8,1.707,10,3.393,11,2.588,12,1.781,15,0.111,17,1.229,29,0.41,30,0.013,32,1.037,36,1.489,39,0.605,44,2.028,47,0.737,63,1.148,87,0.21,95,0.626,99,0.065,110,0.005,111,0.005,136,1.14,147,0.883,149,0.883,151,1.31,153,1.271,154,2.496,155,2.375,156,2.375,158,1.73,161,2.227,163,2.549,164,2.473,166,1.078,167,1.388,173,1.182,175,1.182,176,1.587,178,1.388,180,1.587,182,3.399,183,1.587,184,1.31,185,2.788,187,1.478,188,0.437,191,1.182,193,1.242,196,1.365,198,1.925,205,4.266,207,1.723,234,3.068,235,0.883,241,1.528,250,1.365,251,2.052,253,1.887,259,0.82,260,1.476,262,2.376,266,0.714,276,1.707,309,5.213,333,1.242,338,1.47,353,1.033,358,1.31,397,3.411,408,0.883,470,3.704,477,1.478,503,3.762,504,1.388,508,2.48,518,2.832,557,3.191,558,2.97,561,3.982,562,1.906,564,2.547,565,1.993,566,3.128,568,3.423,571,3.65,575,5.594,576,3.399,581,1.906,593,4.406,606,1.906,608,1.31,611,1.478,612,1.993,618,1.242,619,1.587,620,1.478,621,1.182,622,1.587,623,0.792,624,1.587,626,1.906,627,1.723,628,1.587,629,5.213,630,4.266,631,1.587,634,1.478,635,1.723,636,1.31,638,5.132,641,5.355,644,3.463,645,2.97,654,2.547,659,1.182,670,3.058,679,5.382,685,1.723,691,1.31,708,2.227,710,1.388,838,1.587,981,3.399,1002,1.587,1069,5.355,1089,2.547,1128,2.547,1129,1.906,1130,5.382,1131,4.386,1132,5.02,1133,4.386,1134,4.386,1135,4.386,1136,2.183,1137,2.183,1138,2.183,1139,3.502,1140,2.183,1141,2.183,1142,2.183,1143,2.372,1144,2.183,1145,2.183,1146,2.183,1147,5.867,1148,3.031,1149,1.906,1150,3.963,1151,3.65,1152,3.058,1153,3.963,1154,2.183,1155,2.183,1156,4.386,1157,2.183,1158,2.183,1159,2.183,1160,3.502,1161,2.765,1162,2.183,1163,2.183,1164,2.183,1165,2.183,1166,3.502,1167,3.963,1168,2.183,1169,4.386,1170,2.183,1171,3.502,1172,2.183,1173,2.183,1174,2.183,1175,5.02,1176,3.65,1177,2.183,1178,4.386,1179,2.183,1180,2.183,1181,2.183,1182,3.463,1183,5.122,1184,2.183,1185,2.183,1186,3.058,1187,2.183,1188,3.502,1189,3.502,1190,2.102,1191,1.906,1192,1.723,1193,2.183,1194,1.906,1195,1.906,1196,3.189,1197,1.906,1198,3.058,1199,2.183,1200,2.183,1201,2.183,1202,2.183,1203,2.183,1204,2.183,1205,2.183,1206,2.183,1207,1.906,1208,3.502,1209,2.183,1210,2.183,1211,1.723,1212,3.502,1213,2.183,1214,2.183,1215,2.183,1216,2.183,1217,2.183,1218,2.183,1219,2.183,1220,2.183,1221,2.183,1222,4.386,1223,1.906,1224,1.723,1225,2.183,1226,2.183,1227,2.183,1228,2.183,1229,6.407,1230,2.183,1231,2.765,1232,3.502,1233,3.502,1234,3.502,1235,2.183,1236,2.183,1237,1.478,1238,2.183,1239,2.183,1240,2.183,1241,2.183,1242,2.183,1243,2.183,1244,2.183,1245,2.183,1246,3.058,1247,2.183,1248,2.183,1249,2.183,1250,2.183,1251,2.183,1252,1.31,1253,1.906,1254,2.183,1255,2.183,1256,2.183,1257,2.183]],["title/modules/DocumentApplicationsModule.html",[209,1.392,287,2.785]],["body/modules/DocumentApplicationsModule.html",[0,0.233,3,0.144,4,0.144,5,0.144,30,0.013,87,0.245,99,0.162,110,0.01,111,0.01,149,2.725,188,1.09,209,2.479,211,2.687,212,2.687,213,2.945,214,2.945,215,2.687,216,3.965,217,3.965,221,3.649,222,2.687,223,2.81,225,3.096,226,2.045,229,3.096,276,1.369,287,5.643,309,3.955,469,4.564,470,2.81,478,4.285,503,3.835,504,3.458,1002,4.9,1078,4.564,1104,4.75,1105,4.75,1128,5.324,1196,6.119,1197,4.75,1258,4.75,1259,4.75,1260,4.75,1261,5.051,1262,5.44,1263,5.44,1264,5.44,1265,5.44,1266,5.44]],["title/entities/DocumentFile.html",[112,1.259,1078,2.785]],["body/entities/DocumentFile.html",[0,0.196,3,0.121,4,0.121,5,0.121,15,0.305,16,0.675,29,0.473,30,0.013,31,1.344,32,1.178,36,1.307,39,0.687,47,0.728,63,1.341,87,0.18,99,0.136,110,0.009,111,0.009,112,1.397,114,1.991,122,2.264,123,3.428,127,4.181,128,2.85,132,3.483,134,5.259,135,3.111,136,1.566,140,5.259,144,3.856,145,1.545,394,3.65,397,2.942,398,3.111,470,4.181,478,4.558,479,2.901,481,4.755,482,3.318,484,6.26,486,4.595,487,4.379,489,3.09,501,3.829,502,3.615,503,2.597,504,2.901,506,3.984,508,2.254,1067,5.885,1078,4.079,1183,5.886,1207,5.886,1267,3.984,1268,6.742,1269,6.742,1270,6.742,1271,6.742,1272,6.023,1273,3.984,1274,4.563,1275,4.563,1276,6.023,1277,6.023,1278,4.563,1279,6.023,1280,4.563,1281,6.023,1282,6.023,1283,4.563,1284,6.023,1285,4.563,1286,4.563,1287,6.023,1288,4.563,1289,6.023,1290,4.563,1291,4.563,1292,4.563]],["title/interfaces/FindAllOptions.html",[897,1.392,1293,2.785]],["body/interfaces/FindAllOptions.html",[0,0.104,1,1.973,3,0.065,4,0.065,5,0.065,10,1.152,11,2.24,12,1.664,14,1.973,15,0.123,16,0.428,17,1.051,18,3.331,19,3.5,21,2.995,22,2.047,23,2.503,24,2.418,25,3.62,26,3.538,27,2.155,28,3.048,29,0.31,30,0.013,31,1.397,34,0.556,35,2.222,36,1.46,43,2.173,44,2.107,47,0.616,63,1.041,66,1.385,87,0.204,98,2.434,99,0.114,109,1.022,110,0.006,111,0.006,116,1.105,119,2.551,136,0.633,138,0.883,145,0.824,154,1.105,158,2.328,166,1.202,173,3.606,175,1.318,188,0.488,191,1.318,196,0.949,198,1.918,209,0.824,226,0.915,231,0.961,234,2.574,235,0.984,237,1.973,241,2.807,247,1.547,248,1.318,250,1.836,251,2.423,253,2.941,256,1.648,257,1.648,259,2.574,260,1.882,262,2.525,263,2.586,268,1.648,338,1.603,353,1.807,406,1.152,408,0.984,430,1.666,508,2.864,557,1.547,608,1.461,612,1.385,623,2.634,636,1.461,674,2.551,750,1.77,752,1.77,774,1.202,802,2.292,806,1.202,807,2.434,827,1.461,861,2.173,862,1.257,865,3.299,897,1.293,898,1.318,1028,2.682,1034,1.547,1047,1.385,1064,3.191,1148,2.434,1237,2.586,1252,1.461,1293,3.191,1294,1.77,1295,4.089,1296,4.986,1297,1.77,1298,1.77,1299,1.77,1300,2.428,1301,2.434,1302,1.77,1303,2.292,1304,1.648,1305,3.614,1306,3.614,1307,3.191,1308,3.191,1309,3.191,1310,3.392,1311,3.191,1312,3.015,1313,1.385,1314,1.922,1315,1.648,1316,1.648,1317,1.922,1318,1.922,1319,3.72,1320,3.015,1321,1.922,1322,3.86,1323,1.922,1324,3.015,1325,2.776,1326,1.922,1327,2.776,1328,2.776,1329,2.776,1330,1.922,1331,1.922,1332,1.922,1333,1.922,1334,1.922,1335,2.292,1336,3.015,1337,1.922,1338,4.166,1339,3.015,1340,2.776,1341,2.776,1342,1.77,1343,1.922,1344,4.745,1345,4.213,1346,1.77,1347,1.922,1348,3.015,1349,2.776,1350,4.213,1351,2.776,1352,3.685,1353,2.776,1354,2.586,1355,3.015,1356,1.922,1357,1.922,1358,1.922,1359,1.922,1360,1.922,1361,1.461,1362,1.922,1363,1.922,1364,1.922,1365,1.922,1366,1.77,1367,3.015,1368,3.72,1369,1.77,1370,1.922,1371,3.015,1372,1.77,1373,1.922,1374,1.922,1375,3.015,1376,1.547,1377,1.922,1378,1.922,1379,1.922,1380,1.922,1381,1.922,1382,3.015,1383,1.922,1384,1.922,1385,3.015,1386,1.922,1387,1.922,1388,1.922,1389,1.922,1390,1.922,1391,1.922,1392,1.922,1393,1.922,1394,1.922,1395,1.922,1396,1.922,1397,3.015,1398,1.922,1399,1.922,1400,1.922,1401,1.922,1402,2.776,1403,1.77,1404,2.776,1405,2.776,1406,1.77,1407,1.77,1408,1.922,1409,1.648,1410,1.77,1411,1.922]],["title/classes/ForgotPasswordDto.html",[0,0.176,438,2.226]],["body/classes/ForgotPasswordDto.html",[0,0.319,2,0.992,3,0.101,4,0.101,5,0.101,8,2.037,15,0.193,16,0.598,20,2.936,22,2.427,27,2.154,29,0.309,30,0.013,32,0.56,34,1.218,36,0.739,37,2.575,39,0.327,47,0.731,79,2.422,80,2.634,82,3.037,87,0.159,88,3.526,89,2.154,90,2.706,93,1.207,94,2.683,95,1.093,99,0.216,100,1.884,110,0.008,111,0.008,127,1.971,128,1.805,260,1.024,276,1.342,311,3.481,362,2.755,392,2.065,393,2.289,394,2.065,395,1.971,396,1.805,397,2.683,398,1.971,401,1.971,404,2.171,405,3.929,406,3.526,407,2.425,408,3.25,409,4.033,410,4.471,411,4.239,413,2.755,414,2.581,417,2.916,418,2.289,419,2.065,420,1.884,421,3.604,422,3.989,423,3.035,424,2.065,425,4.041,426,3.2,427,3.035,428,3.39,429,3.69,430,2.327,431,3.995,432,3.39,433,3.39,434,3.2,435,3.39,436,3.69,437,3.908,438,2.887,439,3.2,440,2.065,441,2.289,442,2.289,443,2.289,444,2.289,445,2.289,446,2.289,447,3.2,448,2.289,449,3.2,450,2.289,451,2.425,452,2.425,453,2.425,454,2.425,455,2.425,456,2.171,457,2.171,458,2.171,459,2.171,460,2.065,461,2.065,462,2.289,463,2.171,464,1.665,465,2.065,466,1.884,467,1.971,468,1.971,1412,3.815]],["title/injectables/JwtAuthGuard.html",[231,1.035,618,2.34]],["body/injectables/JwtAuthGuard.html",[0,0.275,3,0.17,4,0.17,5,0.17,13,3.521,30,0.012,87,0.222,99,0.191,110,0.011,111,0.011,188,1.285,231,1.872,232,3.036,618,4.234,883,4.077,1413,5.6,1414,5.6,1415,7.44,1416,6.414]],["title/interfaces/JwtPayload.html",[897,1.392,905,2.785]],["body/interfaces/JwtPayload.html",[0,0.218,3,0.135,4,0.135,5,0.135,13,2.41,15,0.258,16,0.725,17,1.172,22,2.296,29,0.412,30,0.013,31,1.401,35,1.559,36,1.253,39,0.436,41,2.631,44,1.612,47,0.72,63,0.862,87,0.223,99,0.193,110,0.01,111,0.01,188,1.02,195,2.41,198,1.368,231,1.628,251,2.214,259,2.431,260,1.736,266,1.667,295,4.044,296,2.757,334,3.449,518,2.52,561,3.194,623,2.906,877,3.057,883,3.238,890,4.111,893,3.703,897,2.189,898,2.757,899,3.703,900,3.449,901,4.021,902,4.021,903,5.106,904,3.703,905,4.812,906,5.435,907,4.021,908,4.021,909,3.703,910,4.021,911,4.812,912,4.021,913,3.449,914,4.021,915,4.021,916,4.021,917,4.021,918,4.021,919,4.021,920,3.449,921,5.166,922,4.021,923,4.021,924,3.449,925,3.703,926,4.021,927,4.021,928,4.021,929,4.021]],["title/injectables/JwtStrategy.html",[231,1.035,877,2.468]],["body/injectables/JwtStrategy.html",[0,0.216,3,0.134,4,0.134,5,0.134,13,3.041,15,0.255,17,1.164,22,2.134,29,0.373,30,0.013,31,1.204,35,1.543,36,1.245,39,0.606,41,2.604,44,1.595,47,0.636,63,1.197,87,0.222,99,0.192,110,0.01,111,0.01,153,2.331,163,2.415,164,1.766,188,1.01,195,2.386,198,1.354,231,1.617,232,2.386,235,2.038,251,2.206,259,2.415,260,1.725,266,1.65,295,4.475,296,2.73,334,3.414,518,2.504,561,3.494,623,2.702,877,3.856,883,3.205,890,4.085,893,3.666,897,2.175,899,3.666,900,3.414,901,3.98,902,3.98,903,5.073,904,3.666,905,5.043,906,3.666,907,3.98,908,3.98,909,3.666,910,5.073,911,4.79,912,3.98,913,3.414,914,3.98,915,3.98,916,3.98,917,3.98,918,3.98,919,5.073,920,3.414,921,5.415,922,3.98,923,3.98,924,3.414,925,3.666,926,3.98,927,3.98,928,3.98,929,3.98,1417,5.073,1418,4.402,1419,5.042,1420,5.042]],["title/interfaces/LockoutData.html",[897,1.392,1421,2.99]],["body/interfaces/LockoutData.html",[0,0.061,1,1.264,3,0.038,4,0.038,5,0.038,9,0.902,10,2.397,11,2.801,12,1.73,14,2.617,15,0.072,16,0.274,17,0.443,18,1.325,19,0.808,21,1.264,22,2.031,23,1.441,24,1.212,25,2.234,26,1.981,27,2.689,28,2.44,29,0.187,30,0.013,31,1.003,34,1.222,35,2.169,36,1.126,43,1.835,44,1.213,47,0.503,62,1.468,63,0.857,87,0.173,96,2.184,97,1.657,98,2.892,99,0.042,110,0.004,111,0.004,112,0.749,122,2.104,136,0.838,138,0.888,145,0.481,154,0.645,158,2.335,174,2.184,185,1.555,188,0.284,193,0.808,196,0.953,198,1.884,226,0.534,231,0.616,234,2.255,235,0.574,237,1.264,241,1.407,248,0.769,250,1.974,251,2.415,253,2.943,259,2.943,260,2.103,262,2.533,266,1.547,327,2.345,333,0.808,338,1.027,362,0.733,369,3.999,371,2.345,375,1.779,406,1.815,408,1.911,411,1.392,430,1.407,436,2.301,456,0.808,457,0.808,458,0.808,459,0.808,508,2.136,518,1.974,542,0.808,566,0.808,568,0.701,576,0.961,593,1.555,612,3.307,623,2.489,641,2.546,659,0.769,674,2.898,689,3.027,691,1.935,710,0.902,725,0.902,771,3.999,774,3.296,778,1.932,802,3.488,806,3.296,807,4.116,809,3.202,827,1.935,862,2.617,865,2.882,876,0.961,881,1.121,890,0.902,897,0.481,898,0.769,900,2.597,906,1.779,920,0.961,921,1.779,924,2.184,925,3.144,935,2.597,1047,1.392,1064,2.184,1066,2.345,1143,1.657,1151,1.032,1223,1.239,1237,2.184,1246,2.815,1297,2.788,1300,0.902,1301,1.666,1302,1.032,1303,1.468,1315,0.961,1316,0.961,1322,3.212,1327,1.032,1328,1.032,1329,1.032,1335,2.301,1338,2.597,1340,2.788,1341,1.779,1344,4.175,1346,1.779,1349,2.345,1351,2.345,1352,3.402,1353,1.779,1354,2.184,1361,1.935,1366,1.779,1369,1.032,1372,1.032,1376,0.902,1402,1.779,1403,1.032,1404,2.788,1405,2.788,1406,1.032,1409,1.657,1410,1.032,1417,3.414,1421,2.345,1422,1.239,1423,4.887,1424,4.325,1425,3.776,1426,3.225,1427,2.597,1428,1.239,1429,2.184,1430,1.239,1431,1.419,1432,1.419,1433,1.419,1434,1.419,1435,3.834,1436,1.419,1437,3.225,1438,4.422,1439,5.065,1440,5.065,1441,3.999,1442,4.422,1443,4.422,1444,4.422,1445,4.325,1446,1.419,1447,3.225,1448,2.447,1449,1.419,1450,1.932,1451,4.325,1452,1.419,1453,1.419,1454,3.348,1455,2.788,1456,0.961,1457,3.225,1458,1.419,1459,2.447,1460,2.815,1461,1.239,1462,2.815,1463,2.546,1464,4.225,1465,1.419,1466,1.239,1467,2.136,1468,1.419,1469,2.136,1470,1.419,1471,1.419,1472,1.419,1473,1.239,1474,1.419,1475,1.932,1476,1.419,1477,1.419,1478,1.419,1479,1.239,1480,1.239,1481,1.239,1482,1.239,1483,2.447,1484,1.419,1485,1.419,1486,1.419,1487,1.419,1488,1.419,1489,1.239,1490,1.239,1491,1.419,1492,1.419,1493,3.348,1494,1.419,1495,2.447,1496,3.225,1497,1.419,1498,1.419,1499,1.419,1500,3.999,1501,3.225,1502,2.447,1503,1.419,1504,2.136,1505,1.419,1506,1.419,1507,1.419,1508,3.225,1509,2.815,1510,3.225,1511,1.419,1512,3.225,1513,3.225,1514,4.128,1515,2.815,1516,4.128,1517,1.419,1518,2.546,1519,1.419,1520,1.419,1521,2.447,1522,1.419,1523,3.225,1524,1.419,1525,1.419,1526,1.419,1527,1.419,1528,1.419,1529,1.121,1530,1.419,1531,1.419,1532,1.239,1533,1.419,1534,1.419,1535,1.419,1536,1.419,1537,1.419,1538,1.419,1539,2.447,1540,2.447,1541,1.419,1542,3.225,1543,1.419,1544,1.419,1545,3.225,1546,1.419,1547,1.419,1548,3.834,1549,1.419,1550,1.419,1551,1.419,1552,3.225,1553,1.419,1554,2.447,1555,3.225,1556,2.447,1557,3.225,1558,1.419,1559,1.419,1560,2.447,1561,1.419,1562,2.447,1563,1.419,1564,1.419,1565,1.239,1566,1.419,1567,2.136,1568,2.447,1569,1.419,1570,4.325,1571,2.136,1572,1.419,1573,1.419,1574,2.447,1575,1.121,1576,1.419,1577,1.419,1578,3.225,1579,3.225,1580,4.672,1581,2.447,1582,1.239,1583,4.422,1584,1.419,1585,3.348,1586,1.239,1587,2.136,1588,1.419,1589,1.419,1590,1.419,1591,1.419,1592,1.419,1593,2.447,1594,1.419,1595,1.419,1596,1.419,1597,2.447,1598,1.419,1599,1.419,1600,2.447,1601,1.419,1602,1.239,1603,1.419,1604,1.419,1605,2.815,1606,1.121,1607,1.419,1608,1.419,1609,3.834,1610,1.419,1611,1.419,1612,2.447,1613,1.419,1614,2.447,1615,1.419,1616,1.419,1617,3.225,1618,1.419,1619,2.136,1620,4.325,1621,1.419,1622,1.121,1623,1.419,1624,2.447,1625,1.419,1626,1.419,1627,2.447,1628,1.419,1629,1.419,1630,1.419,1631,1.419,1632,1.419,1633,1.932,1634,1.419,1635,1.419,1636,1.419,1637,1.932,1638,1.419,1639,1.419,1640,1.419,1641,1.419,1642,1.419,1643,1.419,1644,1.419,1645,1.419,1646,1.419,1647,1.419,1648,1.419,1649,1.419,1650,1.419,1651,2.136,1652,1.419,1653,1.419,1654,1.419,1655,1.239]],["title/classes/LoginDto.html",[0,0.176,1427,2.785]],["body/classes/LoginDto.html",[0,0.321,2,1.488,3,0.152,4,0.152,5,0.152,8,1.885,9,4.42,12,1.667,15,0.29,16,0.779,22,1.993,27,2.797,28,2.919,29,0.404,30,0.013,32,1.022,37,2.465,39,0.596,47,0.7,81,3.876,87,0.207,90,2.436,93,1.811,95,1.64,99,0.171,100,2.827,110,0.01,111,0.01,396,3.291,417,2.717,734,4.495,1427,5.072,1656,4.997,1657,6.15,1658,7.49,1659,5.724,1660,5.724,1661,5.49,1662,5.724,1663,5.724]],["title/injectables/MinioService.html",[231,1.035,1261,2.468]],["body/injectables/MinioService.html",[0,0.18,3,0.112,4,0.112,5,0.172,15,0.213,16,0.639,17,1.173,29,0.434,30,0.013,31,0.789,34,1.303,39,0.655,47,0.741,63,1.175,87,0.17,99,0.125,110,0.008,111,0.008,136,1.683,138,2.07,153,2.07,163,2.433,164,2.268,172,1.836,188,0.843,196,2.522,198,1.532,231,1.436,232,1.991,234,2.965,235,2.617,241,3.264,250,3.074,251,1.69,253,2.433,259,2.433,260,1.738,266,1.377,323,4.148,338,2.913,659,2.278,774,3.197,806,3.197,807,4.075,911,3.863,1048,3.863,1167,3.322,1182,5.11,1231,3.322,1252,2.525,1261,3.424,1464,5.11,1664,3.674,1665,5.651,1666,5.651,1667,4.981,1668,5.705,1669,5.651,1670,5.705,1671,4.981,1672,4.208,1673,7.026,1674,5.705,1675,4.208,1676,3.674,1677,4.208,1678,4.981,1679,4.208,1680,4.981,1681,4.208,1682,4.504,1683,4.981,1684,4.208,1685,3.322,1686,5.11,1687,3.674,1688,4.504,1689,4.981,1690,4.981,1691,5.651,1692,4.981,1693,4.208,1694,3.322,1695,4.208,1696,4.208,1697,3.674,1698,4.208,1699,3.674,1700,5.651,1701,3.322,1702,3.674,1703,3.674,1704,4.208,1705,3.674,1706,3.674,1707,3.674,1708,5.651,1709,4.208,1710,3.059,1711,3.059,1712,3.059,1713,3.674,1714,3.674,1715,3.674,1716,3.322,1717,3.674,1718,3.674,1719,3.674,1720,4.981,1721,3.674,1722,4.208,1723,3.674,1724,3.674,1725,4.208,1726,3.674,1727,4.208]],["title/injectables/MinioService-1.html",[109,1.441,231,0.864,1261,2.06]],["body/injectables/MinioService-1.html",[0,0.127,3,0.117,4,0.078,5,0.183,15,0.15,16,0.497,17,1.249,29,0.428,30,0.013,31,1.292,34,1.349,39,0.651,47,0.735,63,1.2,87,0.159,99,0.088,109,1.241,110,0.007,111,0.007,122,1.111,136,1.646,138,1.608,151,2.661,153,1.608,163,2.59,164,2.484,172,2.321,188,0.592,195,1.399,196,2.073,198,1.7,231,1.116,232,1.399,234,3.073,235,1.195,241,3.383,250,2.825,251,2.296,253,2.664,259,2.498,260,1.7,266,1.451,295,3.782,296,1.601,323,4.602,333,1.683,338,2.481,470,3.966,565,1.683,566,3.027,576,3.002,659,1.601,691,1.775,774,3.283,806,3.283,807,4.118,813,2.582,838,2.15,862,3.433,865,1.683,911,4.002,1048,3.602,1069,2.334,1167,5.247,1182,4.199,1186,2.582,1224,2.334,1231,2.334,1252,1.775,1261,2.661,1335,1.775,1352,3.756,1418,2.582,1665,4.644,1666,4.644,1667,3.871,1669,4.644,1671,3.871,1673,6.96,1676,2.582,1678,3.871,1680,3.871,1682,4.199,1683,4.644,1685,2.334,1686,4.665,1687,2.582,1688,4.998,1689,5.159,1690,5.159,1691,4.644,1692,3.871,1694,2.334,1697,2.582,1699,2.582,1700,5.527,1701,2.334,1702,2.582,1703,2.582,1705,2.582,1706,2.582,1707,2.582,1708,6.017,1710,2.15,1711,2.15,1712,2.15,1713,2.582,1714,2.582,1715,2.582,1716,3.5,1717,2.582,1718,2.582,1719,2.582,1720,3.871,1721,2.582,1723,3.871,1724,5.159,1726,2.582,1728,2.582,1729,5.909,1730,4.433,1731,5.319,1732,5.319,1733,4.433,1734,6.646,1735,4.433,1736,2.957,1737,2.957,1738,4.433,1739,2.957,1740,2.957,1741,6.189,1742,2.957,1743,2.957,1744,2.957,1745,4.433,1746,2.957,1747,2.957,1748,2.957,1749,2.957,1750,2.957,1751,2.15,1752,5.909,1753,2.957,1754,2.957,1755,2.957,1756,2.957,1757,2.957,1758,2.957,1759,2.957,1760,2.957,1761,2.957,1762,2.957,1763,2.957,1764,2.957,1765,2.582,1766,2.957,1767,2.957,1768,2.957,1769,2.957,1770,4.433,1771,2.957,1772,2.957,1773,3.871,1774,2.957,1775,2.957,1776,2.957,1777,2.957,1778,4.433,1779,5.319,1780,2.957,1781,2.582,1782,2.957,1783,2.957,1784,2.582,1785,2.957,1786,2.957,1787,2.334,1788,2.957,1789,2.957,1790,2.957,1791,4.433,1792,2.957,1793,2.957,1794,2.957,1795,2.957,1796,2.957,1797,2.957,1798,2.957,1799,2.957]],["title/entities/OTP.html",[112,1.259,311,1.794]],["body/entities/OTP.html",[0,0.233,3,0.144,4,0.144,5,0.144,15,0.275,16,0.754,22,2.096,29,0.476,30,0.013,31,1.261,32,1.193,34,1.238,36,1.417,39,0.696,47,0.72,87,0.162,99,0.162,110,0.01,111,0.01,112,1.66,114,2.367,116,3.321,122,2.874,123,4.162,125,3.448,132,3.778,138,2.441,144,4.087,145,1.836,266,2.201,311,3.43,421,3.96,422,2.802,423,3.086,527,4.735,1800,4.735,1801,6.385,1802,5.774,1803,5.423,1804,5.423,1805,5.873,1806,5.423,1807,5.423,1808,5.423,1809,5.423,1810,5.423,1811,5.423,1812,5.423]],["title/injectables/OTPService.html",[231,1.035,292,2.468]],["body/injectables/OTPService.html",[0,0.177,3,0.11,4,0.11,5,0.11,15,0.21,17,1.163,22,2.253,29,0.372,30,0.013,34,1.466,39,0.59,47,0.74,63,1.086,87,0.231,99,0.123,110,0.008,111,0.008,122,2.412,136,1.668,145,1.91,153,2.046,163,2.412,164,2.248,172,2.462,174,3.82,188,0.829,198,1.937,226,1.556,231,1.42,232,1.959,234,2.954,235,2.281,237,3.56,241,3.248,248,2.241,250,2.501,251,2.204,253,2.797,260,1.723,266,2.36,291,4.841,292,3.385,295,4.334,296,2.241,311,3.502,312,3.267,327,3.009,371,3.009,376,2.484,420,2.044,421,4.345,422,3.56,425,2.138,434,2.484,461,2.241,674,2.241,827,2.484,892,4.925,1376,2.631,1455,3.009,1741,3.613,1801,5.603,1802,5.694,1813,3.613,1814,6.892,1815,6.417,1816,5.603,1817,4.138,1818,4.138,1819,5.641,1820,4.138,1821,4.138,1822,4.138,1823,4.138,1824,4.138,1825,4.138,1826,4.925,1827,4.138,1828,4.138,1829,4.138,1830,3.613,1831,4.138,1832,4.925,1833,3.613,1834,5.641,1835,4.138,1836,4.138,1837,4.138,1838,4.138,1839,4.138,1840,4.138,1841,4.138,1842,4.138,1843,5.641,1844,4.138,1845,4.138,1846,4.138,1847,4.138,1848,6.417,1849,4.138,1850,5.641,1851,4.138,1852,3.613,1853,4.138,1854,3.613,1855,4.138,1856,4.138,1857,4.138,1858,4.138]],["title/classes/PaginatedUsersResponseDto.html",[0,0.176,1859,3.246]],["body/classes/PaginatedUsersResponseDto.html",[0,0.22,2,1.336,3,0.136,4,0.136,5,0.136,8,2.078,12,1.099,15,0.26,16,0.729,29,0.459,30,0.013,31,1.588,32,1.136,37,2.373,39,0.663,41,3.359,44,1.626,87,0.194,95,1.472,99,0.153,109,2.73,110,0.01,111,0.01,128,3.078,173,3.863,353,3.549,417,2.867,861,4.567,1037,4.767,1148,4.334,1161,5.134,1295,5.102,1342,5.187,1450,5.134,1859,5.134,1860,6.9,1861,3.479,1862,5.134,1863,5.137,1864,5.137,1865,4.486,1866,6.503,1867,5.137,1868,4.501,1869,4.486,1870,4.486,1871,3.735]],["title/entities/Queue.html",[112,1.259,934,2.031]],["body/entities/Queue.html",[0,0.198,3,0.122,4,0.122,5,0.122,15,0.234,16,0.68,29,0.471,30,0.013,31,1.349,32,1.18,34,1.385,36,1.313,39,0.688,44,1.459,47,0.647,63,1.266,87,0.202,99,0.181,110,0.009,111,0.009,112,1.411,114,2.012,116,3.078,122,2.706,123,3.451,125,2.931,132,3.501,135,4.103,136,2.108,144,3.793,145,1.561,276,1.705,414,3.14,464,2.647,486,4.321,489,3.123,544,3.855,545,3.64,547,4.409,709,5.065,930,4.572,934,3.348,936,4.026,946,5.295,1076,4.788,1079,4.026,1103,5.295,1872,3.641,1873,5.35,1874,5.35,1875,5.917,1876,4.927,1877,6.065,1878,4.611,1879,6.065,1880,4.611,1881,6.065,1882,4.611,1883,4.611,1884,4.577,1885,6.065,1886,4.611,1887,6.065,1888,4.611,1889,4.611,1890,6.065,1891,4.611,1892,5.065,1893,4.611,1894,4.026,1895,4.026,1896,4.409,1897,4.611,1898,4.026]],["title/entities/QueueDetails.html",[112,1.259,1884,2.614]],["body/entities/QueueDetails.html",[0,0.179,3,0.111,4,0.111,5,0.111,12,1.634,15,0.212,16,0.636,20,2.34,23,2.424,24,2.424,29,0.473,30,0.013,31,1.399,32,1.198,34,1.297,36,1.25,39,0.698,47,0.737,63,1.36,87,0.192,99,0.125,110,0.008,111,0.008,112,1.279,114,1.823,132,3.331,135,4.069,136,2.047,138,2.06,144,3.97,145,1.414,266,1.858,375,4.128,479,3.609,481,5.463,482,3.038,486,4.727,501,4.1,502,3.87,514,4.689,515,4.367,516,3.87,517,4.367,518,2.513,530,3.298,537,2.829,538,5.463,542,2.377,934,3.891,935,3.845,1016,5.63,1099,5.463,1273,3.648,1884,3.609,1899,7.159,1900,3.648,1901,5.091,1902,4.178,1903,5.677,1904,4.178,1905,4.957,1906,4.178,1907,4.178,1908,5.677,1909,4.178,1910,4.957,1911,4.178,1912,5.677,1913,4.178,1914,5.677,1915,4.178,1916,4.957,1917,6.919,1918,5.677,1919,4.178,1920,4.178,1921,5.677,1922,4.178,1923,5.677,1924,4.178,1925,4.178,1926,4.178,1927,4.178]],["title/classes/QueueGateway.html",[0,0.176,1928,2.614]],["body/classes/QueueGateway.html",[0,0.158,2,0.959,3,0.098,4,0.098,5,0.098,11,2.187,15,0.187,16,0.584,17,1.389,29,0.456,30,0.013,31,1.518,32,1.016,34,0.843,39,0.673,63,1.297,87,0.206,99,0.11,110,0.008,111,0.008,136,1.354,153,2.191,161,2.346,163,2.881,164,2.641,172,1.61,188,0.739,196,2.696,198,1.762,234,2.981,235,2.106,250,2.696,251,1.543,253,2.601,260,1.399,295,4.2,296,1.998,318,2.914,338,2.754,358,4.6,420,1.823,566,2.1,568,3.241,691,2.215,725,3.839,930,2.1,934,2.983,1143,2.499,1475,2.914,1518,2.914,1716,2.914,1751,3.788,1765,3.222,1901,5.827,1928,3.312,1929,3.222,1930,6.038,1931,6.038,1932,6.269,1933,5.21,1934,5.21,1935,5.21,1936,5.21,1937,5.21,1938,5.21,1939,5.21,1940,5.21,1941,3.69,1942,4.998,1943,5.21,1944,5.21,1945,3.69,1946,6.038,1947,5.21,1948,8.248,1949,3.69,1950,7.38,1951,7.537,1952,5.21,1953,3.69,1954,5.21,1955,5.21,1956,3.69,1957,5.21,1958,6.56,1959,5.21,1960,3.69,1961,5.21,1962,5.21,1963,3.69,1964,5.21,1965,5.21,1966,3.69,1967,5.21,1968,3.69,1969,5.21,1970,3.69,1971,5.21,1972,3.69,1973,3.222,1974,4.549,1975,2.914,1976,3.222,1977,5.21,1978,5.21,1979,3.69,1980,3.69,1981,3.222,1982,3.69,1983,3.69,1984,3.69,1985,3.69,1986,3.69,1987,3.69,1988,5.21,1989,3.69,1990,6.038,1991,3.69,1992,3.69,1993,3.69,1994,5.21,1995,3.69,1996,4.113,1997,3.69,1998,3.69,1999,3.69,2000,6.038,2001,3.69,2002,3.69,2003,3.222,2004,3.69,2005,3.69,2006,3.69,2007,5.21,2008,3.69,2009,3.69]],["title/modules/QueueModule.html",[209,1.392,288,2.785]],["body/modules/QueueModule.html",[0,0.225,3,0.139,4,0.139,5,0.139,30,0.013,87,0.248,99,0.156,110,0.01,111,0.01,149,2.661,188,1.049,209,2.437,211,2.587,212,2.587,213,2.836,214,2.836,215,2.587,216,3.897,217,3.897,221,3.564,222,2.587,223,2.705,225,2.98,226,1.969,229,2.98,288,5.643,297,4.573,298,3.808,333,2.98,386,4.573,930,3.746,934,3.251,1191,4.573,1192,4.135,1884,4.184,1894,4.573,1895,4.573,1928,5.182,1942,5.671,1975,4.135,1976,5.747,2010,4.573,2011,4.573,2012,4.573,2013,5.671,2014,5.237,2015,6.284,2016,5.233,2017,5.237,2018,5.237,2019,4.573,2020,5.237,2021,3.808,2022,5.237,2023,5.237]],["title/classes/QueueNotificationDto.html",[0,0.176,2024,2.99]],["body/classes/QueueNotificationDto.html",[0,0.257,2,1.176,3,0.12,4,0.12,5,0.12,8,1.96,15,0.229,16,0.671,17,1.433,20,2.172,22,2.13,29,0.476,30,0.013,31,1.339,32,1.144,37,2.623,39,0.667,47,0.737,87,0.179,88,2.833,89,2.604,90,2.676,91,4.055,93,1.431,95,1.296,99,0.135,110,0.009,111,0.009,266,2.338,276,1.96,353,2.833,376,3.593,396,3.686,404,3.407,405,2.448,408,3.005,409,3.242,414,2.514,415,3.948,417,2.869,659,4.282,705,3.57,717,3.948,720,3.948,725,3.806,729,3.57,731,4.353,733,3.948,930,3.407,934,3.772,988,5.299,1066,4.353,1121,4.727,1455,4.353,1876,4.88,1996,6.15,2024,4.353,2025,6.905,2026,5.86,2027,4.522,2028,4.522,2029,5.987,2030,5.987,2031,4.522,2032,5.227,2033,4.522,2034,5.227,2035,4.522,2036,4.522,2037,5.227,2038,4.522,2039,5.86,2040,4.522]],["title/injectables/QueueSchedulerService.html",[231,1.035,2013,2.785]],["body/injectables/QueueSchedulerService.html",[0,0.131,3,0.081,4,0.081,5,0.081,10,1.446,15,0.155,16,0.509,17,0.983,29,0.264,30,0.013,32,0.449,34,1.037,39,0.597,63,1.016,87,0.201,99,0.091,110,0.007,111,0.007,116,3.055,122,2.955,136,0.794,145,1.034,153,1.648,163,1.707,164,2.104,172,1.982,188,0.612,196,2.113,198,1.612,222,3.612,226,1.148,231,1.143,232,1.446,234,2.874,235,1.836,237,3.102,241,1.982,248,1.654,250,2.943,251,2.264,253,2.69,259,1.148,260,2.028,262,1.446,266,1.775,276,1.753,298,2.221,333,1.738,336,2.221,338,2.521,357,2.412,408,1.235,420,1.509,430,3.337,461,1.654,464,2.935,544,4.276,545,4.295,565,1.738,566,1.738,568,1.509,654,3.943,665,2.667,691,4.589,707,2.412,721,2.412,722,2.667,731,2.221,768,3.966,774,2.244,786,5.243,806,2.244,807,3.598,809,2.069,830,2.667,837,2.412,849,2.667,851,2.412,861,3.652,862,1.578,865,1.738,934,3.817,1048,2.069,1224,2.412,1310,1.942,1461,2.667,1586,2.667,1606,2.412,1784,2.667,1805,2.667,1832,2.667,1873,3.586,1892,2.069,1896,3.303,1898,3.966,1928,4.428,2003,2.667,2013,3.076,2019,2.667,2021,2.221,2041,6.249,2042,2.667,2043,5.423,2044,6.005,2045,6.005,2046,4.542,2047,6.005,2048,3.055,2049,4.542,2050,4.542,2051,3.055,2052,4.542,2053,6.005,2054,7.552,2055,5.423,2056,4.542,2057,3.055,2058,4.542,2059,7.646,2060,3.055,2061,5.423,2062,3.055,2063,4.542,2064,3.055,2065,3.055,2066,3.055,2067,2.667,2068,4.542,2069,3.055,2070,3.055,2071,6.418,2072,3.055,2073,3.055,2074,5.423,2075,3.055,2076,3.055,2077,3.055,2078,2.667,2079,4.542,2080,6.005,2081,6.005,2082,6.005,2083,6.005,2084,4.542,2085,3.055,2086,6.498,2087,3.055,2088,3.055,2089,3.055,2090,4.542,2091,6.727,2092,4.542,2093,4.542,2094,4.542,2095,4.542,2096,3.055,2097,5.423,2098,4.542,2099,3.055,2100,3.055,2101,3.055,2102,3.055,2103,3.055,2104,3.055,2105,3.055,2106,3.055,2107,3.055,2108,3.055,2109,3.055,2110,3.055,2111,3.055,2112,3.055,2113,3.055,2114,3.055,2115,6.005,2116,3.055,2117,3.055,2118,3.055,2119,2.667,2120,3.055,2121,4.542,2122,3.055,2123,3.055,2124,3.055]],["title/controllers/QueuesController.html",[147,1.662,2016,2.99]],["body/controllers/QueuesController.html",[0,0.156,3,0.096,4,0.096,5,0.096,12,1.28,15,0.184,17,0.933,20,1.868,23,2.448,24,2.448,29,0.299,30,0.013,32,0.879,36,1.423,39,0.513,47,0.711,63,0.871,87,0.178,99,0.108,110,0.008,111,0.008,116,2.717,147,1.467,149,1.467,151,2.178,153,2.171,163,1.935,164,2.096,167,3.273,184,2.178,188,0.727,195,1.718,196,2.006,198,1.846,234,2.87,250,1.414,251,2.293,253,2.249,259,2.584,260,1.607,262,1.718,276,1.639,338,2.162,353,1.718,378,3.487,464,2.247,515,3.487,516,3.09,517,4.41,518,2.332,544,2.307,568,3.217,709,4.837,774,2.956,806,2.956,809,4.41,851,2.865,862,3.091,897,1.229,934,3.396,935,5.399,1143,2.458,1361,2.178,1605,6.665,1637,2.865,1688,5.141,1787,2.865,1873,4.724,1874,4.724,1875,3.169,1876,4.35,1884,4.139,1892,2.458,1896,3.743,1901,2.865,1916,5.224,1942,4.052,1975,2.865,2016,3.743,2021,2.639,2086,6.837,2125,3.169,2126,5.149,2127,5.149,2128,6.511,2129,3.629,2130,3.629,2131,3.629,2132,4.495,2133,3.629,2134,5.149,2135,3.629,2136,3.629,2137,3.629,2138,3.629,2139,3.629,2140,3.169,2141,3.629,2142,4.495,2143,5.983,2144,3.629,2145,5.983,2146,2.865,2147,3.169,2148,5.149,2149,5.149,2150,3.629,2151,3.629,2152,5.983,2153,3.629,2154,3.629,2155,3.629,2156,3.629,2157,3.629,2158,3.629,2159,3.629,2160,3.629,2161,3.629,2162,3.629,2163,6.511,2164,6.511,2165,3.629,2166,3.629,2167,5.983,2168,5.983,2169,5.983,2170,5.983,2171,5.983,2172,5.983,2173,3.629,2174,5.983,2175,5.983,2176,3.629,2177,5.983,2178,3.629,2179,3.629,2180,3.629,2181,3.629,2182,5.149,2183,5.983,2184,3.629,2185,3.629,2186,3.629,2187,3.629,2188,3.629,2189,3.629,2190,3.629,2191,3.629,2192,3.629,2193,3.629,2194,3.629,2195,3.629]],["title/classes/RegisterDto.html",[0,0.176,1429,2.785]],["body/classes/RegisterDto.html",[0,0.272,2,1.05,3,0.107,4,0.107,5,0.107,8,2.011,9,3.526,12,1.723,15,0.205,16,0.622,17,1.479,20,2.013,21,3.273,22,2.209,23,2.382,24,2.382,25,3.273,26,3.273,27,2.505,28,3.002,29,0.459,30,0.013,31,1.04,32,1.162,33,4.545,37,2.645,39,0.678,47,0.751,57,3.757,62,3.329,63,1.373,66,3.157,67,3.188,69,3.757,70,3.188,72,3.757,73,4.033,74,4.291,75,4.033,76,3.188,78,4.033,79,2.878,80,2.74,81,3.757,82,3.13,87,0.165,88,2.625,89,2.505,90,2.772,93,1.278,94,3.224,95,1.157,99,0.12,100,1.995,101,3.188,102,3.188,103,3.803,104,5.003,105,3.526,106,2.936,110,0.008,111,0.008,311,3.224,362,2.866,396,3.384,417,2.68,422,3.273,427,2.298,734,4.434,1047,3.157,1048,3.757,1049,4.38,1429,4.291,1529,4.38,1657,4.38,2196,3.526,2197,4.038,2198,4.038,2199,4.038,2200,4.038,2201,4.038,2202,4.038,2203,4.038,2204,4.038,2205,4.038,2206,4.038,2207,4.038,2208,4.038,2209,4.038,2210,4.038,2211,4.038,2212,4.038,2213,4.038,2214,4.038]],["title/interfaces/RequestWithUser.html",[897,1.392,2215,2.34]],["body/interfaces/RequestWithUser.html",[0,0.037,1,1.131,3,0.023,4,0.023,5,0.023,8,1.998,9,1.715,10,1.277,11,2.627,12,1.388,13,0.753,14,2.136,15,0.044,16,0.735,20,1.825,22,2.357,23,0.329,24,0.329,27,2.379,28,1.316,29,0.475,30,0.013,31,0.868,34,0.616,35,0.487,36,0.852,37,2.415,39,0.075,41,0.822,44,1.216,47,0.729,62,0.525,63,0.148,79,0.723,80,0.432,82,0.432,87,0.164,94,0.381,95,0.251,97,1.078,99,0.026,100,0.432,103,0.525,105,0.556,106,0.636,108,1.483,109,1.613,110,0.002,111,0.002,122,0.598,136,1.648,138,1.274,147,0.353,158,0.432,161,0.556,164,0.945,174,1.827,182,3.277,184,0.525,188,0.175,193,0.497,196,0.341,198,1.777,222,3.131,234,2.352,235,0.353,250,1.051,251,1.74,253,2.487,259,2.607,260,1.907,262,0.753,266,0.717,276,1.939,291,1.392,292,1.314,311,3.419,313,0.69,314,0.69,333,2.502,334,0.592,336,0.636,338,0.668,345,2.794,353,0.414,357,0.69,358,1.619,360,2.13,362,3.035,372,1.389,376,0.955,378,0.592,392,0.473,394,2.38,395,2.271,397,3.047,398,0.452,401,0.822,404,0.497,405,2.38,406,2.537,408,2.745,409,0.473,410,0.955,411,0.497,413,1.131,414,0.919,417,0.317,418,0.525,419,1.186,420,3.379,421,2.981,422,3.275,423,1.998,424,1.186,425,1.619,426,1.881,427,1.246,429,1.314,430,1.177,431,0.955,438,0.473,439,1.619,440,0.473,441,1.314,442,0.525,443,0.525,444,0.955,445,1.314,446,0.525,447,0.525,448,0.525,449,0.525,450,0.525,456,0.497,457,0.497,458,0.497,459,1.783,460,0.473,461,2.081,462,1.619,463,1.535,464,0.694,465,0.862,466,0.786,467,0.822,468,0.822,475,0.763,509,3.947,512,4.118,516,0.525,518,0.341,543,1.078,545,0.955,561,1.333,564,0.636,565,0.497,566,3.691,593,0.556,611,0.592,612,2.634,618,0.497,620,0.592,621,0.862,623,0.979,628,0.636,629,4.664,630,4.855,631,0.636,634,1.827,635,1.729,636,1.314,638,4.609,645,0.592,659,3.053,668,2.13,674,1.697,677,1.389,688,4.391,689,0.69,691,1.881,703,1.592,706,5.308,707,2.13,709,2.801,710,4.124,713,1.912,714,1.912,715,2.13,718,1.912,721,3.265,725,1.392,728,4.68,729,1.256,730,3.066,731,5.41,736,0.763,771,1.256,774,3.092,778,1.256,802,0.955,806,3.092,807,4.011,809,1.827,820,0.763,827,0.525,837,2.773,845,0.763,862,2.391,865,1.246,869,0.763,876,1.483,879,0.69,884,0.763,886,0.69,897,0.296,898,0.473,900,1.827,920,0.592,924,2.378,930,0.497,934,1.735,935,2.122,984,2.13,993,1.256,1010,0.69,1028,0.497,1034,1.392,1049,2.13,1055,0.69,1066,1.592,1143,0.592,1150,3.655,1151,0.636,1153,0.69,1190,3.217,1211,1.729,1253,1.912,1300,0.556,1303,0.525,1322,0.955,1335,0.525,1352,2.629,1354,2.603,1376,1.992,1417,2.13,1421,0.636,1423,1.389,1425,0.763,1427,2.122,1428,0.763,1429,1.483,1430,0.763,1454,3.066,1455,1.961,1456,0.592,1460,0.763,1462,0.763,1463,2.773,1464,3.655,1466,1.912,1467,1.389,1469,0.763,1473,3.066,1475,5.065,1479,0.763,1480,1.389,1481,0.763,1482,0.763,1489,0.763,1490,2.355,1504,1.389,1509,0.763,1518,2.474,1529,1.729,1532,0.763,1565,0.763,1567,1.912,1571,4.042,1580,1.912,1582,0.763,1583,1.389,1585,1.912,1587,0.763,1606,0.69,1619,1.912,1633,3.034,1651,1.389,1655,0.763,1657,2.474,1661,2.474,1701,0.69,1710,0.636,1711,0.636,1712,0.636,1787,0.69,1802,2.474,1816,0.763,1830,1.389,1833,0.763,1852,0.763,1854,4.042,1862,1.256,1876,1.592,1981,1.912,1996,3.265,2024,1.157,2026,1.389,2032,0.763,2034,1.389,2037,0.763,2039,0.763,2078,3.066,2119,0.763,2142,0.763,2147,2.736,2215,1.783,2216,0.763,2217,0.874,2218,0.69,2219,0.874,2220,1.591,2221,5.505,2222,0.874,2223,0.874,2224,0.874,2225,1.591,2226,0.874,2227,0.874,2228,0.874,2229,0.874,2230,2.19,2231,6.172,2232,4.136,2233,4.136,2234,0.874,2235,0.874,2236,0.874,2237,3.133,2238,3.133,2239,2.19,2240,2.19,2241,0.874,2242,0.874,2243,0.874,2244,2.698,2245,1.591,2246,2.698,2247,1.591,2248,0.874,2249,2.19,2250,1.591,2251,0.874,2252,0.763,2253,0.763,2254,1.591,2255,1.912,2256,3.512,2257,0.874,2258,1.591,2259,0.874,2260,0.874,2261,0.874,2262,1.591,2263,0.874,2264,0.874,2265,0.874,2266,0.874,2267,0.874,2268,2.19,2269,2.19,2270,0.874,2271,0.874,2272,0.874,2273,0.874,2274,0.874,2275,0.636,2276,0.763,2277,0.874,2278,0.874,2279,0.874,2280,0.874,2281,1.591,2282,0.874,2283,0.874,2284,0.874,2285,0.874,2286,0.874,2287,0.874,2288,2.698,2289,2.19,2290,0.874,2291,0.874,2292,0.874,2293,0.874,2294,4.136,2295,2.736,2296,1.591,2297,0.874,2298,0.874,2299,0.874,2300,0.874,2301,1.591,2302,1.591,2303,0.874,2304,1.591,2305,2.19,2306,1.591,2307,0.874,2308,0.874,2309,5.875,2310,2.698,2311,2.698,2312,2.19,2313,0.874,2314,0.874,2315,2.19,2316,5.505,2317,1.591,2318,0.874,2319,2.19,2320,1.591,2321,2.19,2322,0.874,2323,0.763,2324,0.874,2325,0.874,2326,0.874,2327,0.874,2328,0.874,2329,0.874,2330,0.874,2331,1.591,2332,0.874,2333,0.874,2334,1.591,2335,0.874,2336,0.874,2337,1.591,2338,0.874,2339,0.874,2340,0.874,2341,0.874,2342,1.591,2343,0.874,2344,0.874,2345,0.874,2346,0.874,2347,0.874,2348,0.874,2349,1.591,2350,0.874,2351,0.874,2352,0.874,2353,1.591,2354,0.874,2355,0.874,2356,1.591,2357,0.874,2358,0.874,2359,0.874,2360,0.874,2361,0.874,2362,0.763,2363,0.874,2364,0.874,2365,0.874,2366,1.389,2367,0.874,2368,0.874,2369,0.874,2370,2.698,2371,0.874,2372,0.874,2373,0.874,2374,0.874,2375,0.874,2376,0.874,2377,0.874,2378,0.874,2379,5.029,2380,0.874,2381,0.763,2382,0.874,2383,0.874,2384,0.874,2385,0.874,2386,0.874,2387,0.874,2388,0.874,2389,0.874,2390,0.874,2391,0.874,2392,0.874,2393,0.874,2394,2.698,2395,0.874,2396,0.874,2397,0.874,2398,0.874,2399,0.874,2400,0.874,2401,0.874,2402,0.874,2403,0.874,2404,0.874,2405,0.874,2406,2.698,2407,0.874,2408,2.698,2409,0.874,2410,4.136,2411,0.874,2412,2.698,2413,2.698,2414,2.698,2415,2.698,2416,0.874,2417,0.874,2418,0.874,2419,0.874,2420,0.874,2421,0.874,2422,0.874,2423,3.512,2424,0.874,2425,0.874,2426,3.512,2427,0.874,2428,0.874,2429,0.874,2430,0.874,2431,0.874,2432,0.874,2433,0.874,2434,0.874,2435,0.874,2436,0.874,2437,0.874,2438,0.874,2439,0.874,2440,0.874,2441,0.874,2442,1.591,2443,0.874,2444,0.874,2445,0.874]],["title/interfaces/RequestWithUser-1.html",[109,1.441,897,1.162,2215,1.953]],["body/interfaces/RequestWithUser-1.html",[3,0.162,4,0.162,5,0.162,12,1.739,15,0.31,16,0.811,29,0.355,30,0.013,87,0.216,99,0.182,110,0.011,111,0.011,188,1.225,198,1.641,251,2.142,358,3.669,561,4.014,568,3.019,886,4.826,897,2.069,898,3.31,1190,3.669,2215,4.116,2446,4.826,2447,6.315,2448,5.259,2449,5.337,2450,5.337,2451,5.337]],["title/interfaces/RequestWithUser-2.html",[108,2.324,897,1.162,2215,1.953]],["body/interfaces/RequestWithUser-2.html",[0,0.23,3,0.142,4,0.142,5,0.142,12,1.677,13,3.162,15,0.272,16,0.749,17,1.211,29,0.422,30,0.013,35,2.228,41,3.759,47,0.718,63,1.232,87,0.217,99,0.16,110,0.01,111,0.01,136,1.395,138,1.946,188,1.075,195,2.539,198,1.794,231,1.682,251,2.256,621,2.905,623,1.946,708,4.248,710,3.411,897,2.262,898,2.905,1190,4.571,1361,3.22,1500,4.236,1575,4.236,1622,4.236,1751,3.901,2146,4.236,2215,3.803,2218,4.236,2448,4.858,2452,4.236,2453,5.834,2454,6.354,2455,4.236,2456,4.858,2457,4.684,2458,4.684,2459,5.834,2460,4.684,2461,4.684,2462,4.684,2463,4.684,2464,4.684,2465,4.684,2466,4.684,2467,4.684,2468,4.684]],["title/classes/ResetPasswordDto.html",[0,0.176,440,2.226]],["body/classes/ResetPasswordDto.html",[0,0.312,2,0.914,3,0.093,4,0.093,5,0.093,8,2.011,15,0.178,16,0.564,20,2.899,22,2.416,27,2.476,29,0.373,30,0.013,32,0.864,34,1.15,36,0.682,37,2.573,39,0.504,47,0.731,79,2.915,80,3.171,82,3.356,87,0.15,88,3.444,89,2.06,90,2.655,93,1.113,94,2.566,95,1.008,99,0.211,100,1.737,110,0.007,111,0.007,127,1.817,128,2.383,260,1.352,276,1.267,311,3.548,362,3.037,392,1.904,393,2.111,394,1.904,395,1.817,396,2.783,397,2.566,398,1.817,401,1.817,404,2.001,405,3.827,406,3.444,407,2.236,408,3.287,409,3.94,410,4.368,411,4.141,413,2.601,414,2.469,417,2.877,418,2.111,419,1.904,420,1.737,421,3.476,422,3.914,423,2.865,424,1.904,425,4.154,426,3.529,427,3.346,428,3.738,429,4.077,430,2.566,431,4.077,432,3.2,433,3.738,434,3.021,435,3.2,436,4.077,437,4.318,438,1.904,439,2.111,440,2.726,441,3.021,442,3.021,443,3.021,444,3.021,445,3.021,446,3.021,447,3.853,448,2.111,449,3.853,450,2.111,451,2.236,452,2.236,453,2.236,454,3.738,455,3.2,456,2.865,457,2.865,458,2.865,459,3.346,460,1.904,461,1.904,462,2.111,463,2.001,464,1.535,465,1.904,466,1.737,467,1.817,468,1.817,2469,3.517,2470,3.517,2471,3.517,2472,3.517,2473,3.07,2474,3.07,2475,3.517]],["title/entities/Role.html",[35,1.259,112,1.259]],["body/entities/Role.html",[0,0.242,3,0.15,4,0.15,5,0.15,8,1.874,12,1.731,15,0.286,16,0.773,29,0.45,30,0.013,31,1.293,32,1.139,35,2.112,36,1.443,39,0.664,47,0.697,63,1.26,87,0.206,99,0.168,110,0.01,111,0.01,112,1.729,114,2.466,132,3.847,135,3.847,136,2.016,144,3.679,145,1.913,266,2.258,521,4.461,530,4.461,542,3.215,547,4.108,1148,3.847,2476,4.933,2477,5.65,2478,5.65,2479,5.65,2480,5.65,2481,6.023,2482,5.65,2483,6.023,2484,5.65]],["title/controllers/RolesController.html",[147,1.662,2485,2.99]],["body/controllers/RolesController.html",[0,0.232,3,0.143,4,0.143,5,0.143,15,0.274,17,1.217,29,0.39,30,0.013,32,1.073,36,1.301,39,0.626,47,0.719,63,1.136,87,0.234,99,0.161,110,0.01,111,0.01,147,2.186,149,2.186,151,3.245,153,2.436,155,4.135,156,3.635,163,2.524,164,2.559,166,2.671,167,3.437,184,3.245,188,1.083,195,2.559,196,2.107,198,1.961,203,4.72,518,2.616,593,5.089,611,3.661,618,3.077,619,3.931,620,3.661,621,3.635,622,3.931,623,2.436,624,3.931,634,3.661,645,4.946,1301,3.772,2132,4.72,2485,4.882,2486,4.72,2487,5.862,2488,5.406,2489,5.406,2490,5.406,2491,5.406,2492,4.72,2493,5.406,2494,5.406,2495,4.72,2496,5.406,2497,5.406,2498,5.406,2499,5.406,2500,5.406]],["title/guards/RolesGuard.html",[621,2.226,2275,2.99]],["body/guards/RolesGuard.html",[0,0.225,3,0.139,4,0.139,5,0.139,12,1.41,13,2.482,15,0.266,17,1.194,29,0.382,30,0.013,35,2.205,39,0.564,41,3.721,47,0.714,63,1.317,87,0.215,99,0.156,110,0.01,111,0.01,136,1.363,138,2.39,153,2.39,163,2.476,164,1.838,188,1.051,195,2.482,198,1.769,231,1.658,235,2.121,251,2.238,621,3.567,623,1.903,710,3.334,897,2.23,1190,4.323,1361,3.148,1500,4.141,1575,4.141,1622,4.141,1751,3.813,2146,4.141,2215,2.985,2218,4.141,2448,5.493,2452,4.141,2453,6.597,2454,6.936,2455,4.141,2456,4.79,2457,4.579,2458,5.752,2459,5.752,2460,4.579,2461,4.579,2462,4.579,2463,4.579,2464,4.579,2465,4.579,2466,4.579,2467,4.579,2468,4.579,2501,5.245,2502,5.245,2503,5.245,2504,5.245,2505,5.245]],["title/modules/RolesModule.html",[209,1.392,289,2.468]],["body/modules/RolesModule.html",[0,0.248,3,0.153,4,0.153,5,0.153,12,1.498,30,0.013,35,1.772,87,0.243,99,0.173,110,0.01,111,0.01,149,2.831,188,1.16,209,2.548,211,2.86,212,2.86,213,3.135,214,3.135,215,2.86,216,4.076,217,4.076,221,3.791,222,2.86,223,2.991,225,3.295,226,2.176,229,3.295,289,4.941,542,3.295,1301,4.381,2485,5.473,2495,5.055,2506,5.055,2507,5.055,2508,5.055,2509,5.79,2510,5.055,2511,5.79,2512,5.79]],["title/injectables/RolesService.html",[231,1.035,1301,2.124]],["body/injectables/RolesService.html",[0,0.185,3,0.114,4,0.114,5,0.114,12,1.647,15,0.219,17,1.326,19,3.732,29,0.425,30,0.013,31,1.526,35,2.357,36,1.492,39,0.646,43,2.456,47,0.589,63,1.342,87,0.218,99,0.129,110,0.009,111,0.009,145,1.461,153,2.106,155,3.797,156,3.143,163,2.75,164,2.564,166,2.867,188,0.865,198,1.883,226,1.622,231,1.461,232,2.043,234,3.111,235,2.347,237,3.977,241,3.497,247,2.744,248,2.337,250,2.262,251,2.167,253,2.832,259,2.465,260,1.761,262,3.103,378,2.923,508,2.867,518,2.733,542,2.456,623,2.734,1301,2.998,1315,2.923,1316,4.441,1344,3.931,1409,2.923,1637,4.582,2481,5.067,2487,5.067,2492,5.067,2510,3.769,2513,3.769,2514,5.804,2515,5.804,2516,4.316,2517,4.316,2518,5.804,2519,5.804,2520,4.316,2521,4.316,2522,5.804,2523,4.316,2524,4.316,2525,4.316,2526,4.316,2527,4.316,2528,5.804,2529,5.804,2530,4.316,2531,4.316,2532,4.316,2533,4.316,2534,4.316,2535,4.316,2536,4.316]],["title/classes/SendOtpDto.html",[0,0.176,419,2.226]],["body/classes/SendOtpDto.html",[0,0.317,2,0.965,3,0.098,4,0.098,5,0.098,8,2.028,15,0.188,16,0.586,17,0.948,20,2.924,22,2.422,27,2.123,29,0.352,30,0.013,32,0.769,33,2.361,34,1.502,36,0.72,37,2.579,39,0.448,44,1.175,47,0.733,79,2.377,80,2.585,82,2.993,87,0.156,88,3.499,89,2.123,90,2.689,93,1.175,94,2.644,95,1.064,99,0.215,100,1.835,110,0.008,111,0.008,127,1.918,128,1.758,172,1.621,260,0.997,276,1.317,311,3.517,362,2.703,392,2.011,393,2.229,394,2.011,395,1.918,396,1.758,397,2.644,398,1.918,401,1.918,404,2.113,405,3.896,406,3.499,407,2.361,408,3.236,409,4.003,410,4.437,411,4.207,413,2.703,414,2.762,417,2.904,418,2.229,419,2.833,420,2.585,421,4.003,422,4.063,423,2.978,424,2.011,425,4.018,426,3.141,427,2.978,428,3.327,429,3.637,430,2.284,431,3.948,432,3.327,433,3.327,434,3.141,435,3.327,436,3.637,437,3.852,438,2.011,439,2.229,440,2.011,441,2.229,442,2.229,443,2.229,444,2.229,445,2.229,446,2.229,447,3.141,448,2.229,449,3.141,450,2.229,451,2.361,452,2.361,453,2.361,454,2.361,455,2.361,456,2.113,457,2.113,458,2.113,459,2.113,460,2.011,461,2.011,462,2.229,463,2.113,464,1.621,465,2.011,466,1.835,467,1.918,468,1.918,2537,3.714,2538,3.242,2539,3.714]],["title/classes/TestOtpDto.html",[0,0.176,460,2.226]],["body/classes/TestOtpDto.html",[0,0.319,2,0.989,3,0.101,4,0.101,5,0.101,8,2.036,15,0.193,16,0.597,20,2.935,22,2.427,27,2.151,29,0.309,30,0.013,32,0.559,34,1.216,36,0.738,37,2.575,39,0.326,47,0.731,79,2.418,80,2.63,82,3.033,87,0.159,88,3.523,89,2.151,90,2.704,93,1.205,94,2.68,95,1.091,99,0.216,100,2.63,110,0.008,111,0.008,127,1.966,128,1.801,260,1.022,276,1.34,311,3.507,362,2.75,392,2.061,393,2.284,394,2.061,395,1.966,396,1.801,397,2.68,398,1.966,401,1.966,404,2.166,405,3.79,406,3.523,407,2.42,408,3.249,409,4.031,410,4.468,411,4.237,413,2.75,414,2.578,417,2.915,418,2.284,419,2.061,420,1.88,421,3.601,422,3.987,423,3.03,424,2.061,425,4.039,426,3.195,427,3.03,428,3.385,429,3.685,430,2.323,431,3.991,432,3.385,433,3.385,434,3.195,435,3.385,436,3.685,437,3.904,438,2.061,439,2.284,440,2.061,441,2.284,442,2.284,443,2.284,444,2.284,445,2.284,446,2.284,447,3.195,448,2.284,449,3.195,450,2.284,451,2.42,452,2.42,453,2.42,454,2.42,455,2.42,456,2.166,457,2.166,458,2.166,459,2.166,460,2.883,461,2.883,462,3.195,463,2.166,464,1.661,465,2.061,466,1.88,467,1.966,468,1.966,2540,3.806]],["title/classes/UpdateAnnouncementDto.html",[0,0.176,179,2.785]],["body/classes/UpdateAnnouncementDto.html",[0,0.275,2,1.664,3,0.17,4,0.17,5,0.17,13,3.517,30,0.012,87,0.222,99,0.191,110,0.011,111,0.011,154,2.908,160,4.07,179,5.033,192,5.055,953,5.055,2541,5.59,2542,7.432,2543,5.055,2544,5.055,2545,5.055]],["title/classes/UpdateAppointmentDto.html",[0,0.176,605,2.785]],["body/classes/UpdateAppointmentDto.html",[0,0.308,2,1.57,3,0.16,4,0.16,5,0.16,13,3.399,15,0.306,16,0.805,17,1.301,29,0.35,30,0.013,32,0.887,39,0.517,87,0.236,89,2.516,93,1.911,99,0.18,110,0.011,111,0.011,154,2.743,276,1.929,534,4.872,560,3.839,605,4.863,617,4.768,625,4.09,964,4.768,976,5.272,979,4.09,980,5.272,2543,4.768,2544,4.768,2545,4.768,2546,6.27,2547,7.181,2548,6.039]],["title/classes/UpdateDocumentApplicationDto.html",[0,0.176,1176,2.99]],["body/classes/UpdateDocumentApplicationDto.html",[0,0.286,2,1.39,3,0.142,4,0.142,5,0.142,8,1.829,13,3.156,15,0.271,16,0.747,17,1.379,29,0.387,30,0.013,32,0.98,37,2.408,39,0.571,44,1.693,47,0.599,87,0.233,89,2.546,90,2.337,93,1.693,95,1.533,99,0.159,110,0.01,111,0.01,154,2.429,266,2.183,276,2.038,396,2.531,397,3.32,408,2.696,413,3.445,414,2.246,417,2.637,466,3.295,467,3.445,470,3.754,477,4.922,503,4.33,504,3.4,659,4.12,979,3.622,981,4.922,983,4.223,988,4.223,990,4.67,1002,3.889,1089,5.692,1176,4.849,1198,4.67,2543,5.738,2544,4.223,2545,4.223,2549,6.345,2550,5.349,2551,5.349,2552,5.349,2553,5.349,2554,5.349]],["title/classes/UpdateQueueDto.html",[0,0.176,2555,3.246]],["body/classes/UpdateQueueDto.html",[0,0.307,2,1.564,3,0.159,4,0.159,5,0.159,15,0.305,16,0.803,17,1.436,29,0.416,30,0.013,32,1.053,39,0.614,47,0.644,87,0.214,89,2.681,90,2.511,93,1.904,99,0.179,110,0.011,111,0.011,276,1.926,979,4.076,1015,4.751,1017,5.254,1874,6.042,1892,5.183,2021,4.376,2555,5.658,2556,6.682,2557,6.018,2558,6.018,2559,6.018,2560,6.018]],["title/classes/UpdateUserDto.html",[0,0.176,14,2.124]],["body/classes/UpdateUserDto.html",[0,0.303,1,2.808,2,1.019,3,0.104,4,0.104,5,0.104,6,6.21,7,2.851,8,2.017,9,3.966,10,1.856,11,1.646,12,1.662,13,1.856,14,3.48,15,0.199,16,0.609,17,1.5,18,2.123,19,2.231,20,2.723,21,3.223,22,2.028,23,2.345,24,2.345,25,3.223,26,3.223,27,2.479,28,2.97,29,0.457,30,0.013,31,1.326,32,1.141,33,4.939,34,0.895,35,1.664,36,0.76,37,2.636,39,0.666,41,2.026,42,3.096,43,2.231,47,0.744,48,4.746,49,4.746,50,4.746,51,4.746,52,4.746,53,4.746,54,3.423,57,3.681,58,3.423,60,3.423,62,3.262,63,1.295,64,3.423,66,3.093,67,3.096,69,3.681,70,3.096,72,3.681,73,3.952,74,4.225,75,3.952,76,3.096,78,3.952,79,2.833,80,2.685,81,3.681,82,3.082,83,3.423,85,3.423,87,0.162,88,2.572,89,2.808,90,2.722,91,3.681,92,4.291,93,1.241,94,3.498,95,1.124,96,3.681,97,3.681,98,2.808,99,0.162,100,1.937,101,3.096,102,3.096,103,2.353,104,3.096,105,2.493,106,2.851,107,3.423,108,3.681,109,1.646,110,0.008,111,0.008,1043,3.423,1046,3.423,1051,3.423,1054,3.423,1063,3.423,2561,3.921,2562,3.921,2563,3.921,2564,3.921]],["title/classes/UpdateUserStatusDto.html",[0,0.176,2565,2.99]],["body/classes/UpdateUserStatusDto.html",[0,0.31,2,1.583,3,0.161,4,0.161,5,0.161,8,1.817,12,1.702,15,0.309,16,0.809,29,0.354,30,0.013,32,0.895,37,1.928,39,0.522,87,0.215,93,1.928,95,1.746,99,0.182,110,0.011,111,0.011,119,4.165,136,1.876,138,2.619,276,1.533,417,2.619,948,4.589,962,5.699,1037,3.872,2565,5.248,2566,6.302,2567,5.318,2568,6.091,2569,6.091]],["title/entities/User.html",[12,0.88,112,1.259]],["body/entities/User.html",[0,0.173,3,0.107,4,0.107,5,0.107,12,1.188,15,0.205,16,0.622,18,3.433,21,3.275,22,1.817,23,2.383,24,2.383,25,3.275,26,3.275,27,2.221,28,2.662,29,0.478,30,0.013,31,1.279,32,1.211,34,1.268,35,2.317,36,1.386,39,0.706,44,1.757,47,0.747,63,1.395,87,0.166,99,0.121,110,0.008,111,0.008,112,1.238,114,1.764,116,2.879,119,3.433,121,4.294,122,2.565,123,3.159,132,3.275,135,4.088,136,2.133,138,2.014,142,4.036,144,4.032,145,1.369,479,2.57,486,4.543,489,2.738,501,3.529,502,4.096,521,4.383,537,2.738,547,4.036,623,2.3,1076,4.383,1096,3.53,1097,4.847,1099,3.192,1322,3.805,1685,3.192,1686,3.192,1905,4.847,1910,4.847,2483,4.847,2570,3.53,2571,5.552,2572,4.043,2573,4.043,2574,6.825,2575,4.043,2576,4.043,2577,4.043,2578,4.043,2579,4.043,2580,5.552,2581,4.043,2582,4.043,2583,5.552,2584,4.043,2585,4.043,2586,5.552,2587,4.043,2588,4.043,2589,4.043,2590,5.552,2591,5.552,2592,4.043,2593,4.043,2594,4.043,2595,5.552,2596,4.043,2597,4.043,2598,4.043,2599,5.552,2600,4.043]],["title/classes/UserQueryDto.html",[0,0.176,2601,2.99]],["body/classes/UserQueryDto.html",[0,0.301,2,1.292,3,0.132,4,0.132,5,0.132,8,2.03,15,0.252,16,0.714,17,1.462,22,1.825,28,2.087,29,0.462,30,0.013,31,1.54,32,1.088,34,1.454,35,2.268,37,2.344,39,0.635,47,0.666,63,1.078,78,3.614,87,0.209,89,2.683,90,2.461,91,4.758,93,1.573,94,3.342,95,1.424,98,3.289,99,0.148,103,3.821,109,3.289,110,0.009,111,0.009,172,2.779,173,3.804,353,3.506,1030,5.849,1055,5.849,1161,5.027,1295,5.064,1296,5.186,1325,4.629,1862,5.027,2601,4.629,2602,5.186,2603,4.339,2604,6.367,2605,4.97,2606,4.97,2607,4.97,2608,4.97,2609,6.367,2610,4.97,2611,4.97,2612,4.339,2613,6.367]],["title/classes/UserResponseDto.html",[0,0.176,1868,2.468]],["body/classes/UserResponseDto.html",[0,0.159,2,0.965,3,0.098,4,0.098,5,0.098,8,2.13,11,2.197,12,1.759,15,0.188,16,0.586,17,1.368,18,3.281,20,1.899,21,3.13,22,1.988,23,2.278,24,2.278,25,3.13,26,3.13,28,2.912,29,0.475,30,0.013,31,1.349,32,1.191,34,1.502,35,2.014,36,1.433,37,2.566,39,0.695,44,1.656,47,0.747,57,3.544,62,3.141,63,1.372,66,3.744,69,3.544,72,3.544,74,3.544,87,0.111,94,3.027,95,1.064,98,3.13,99,0.111,103,3.948,105,4.182,109,2.197,110,0.008,111,0.008,116,2.752,119,3.281,121,4.103,122,2.838,136,1.36,138,1.899,276,1.317,417,2.881,571,2.7,623,2.516,715,5.194,948,3.327,1010,5.194,1030,5.194,1031,4.569,1034,3.327,1037,5,1038,4.569,1044,5.744,1047,2.978,1061,4.569,1322,3.637,1861,2.515,1868,3.141,2602,5.52,2614,3.714,2615,6.579,2616,5.233,2617,3.714,2618,3.714,2619,3.714,2620,3.714,2621,3.714,2622,3.714,2623,3.714,2624,3.714,2625,3.714,2626,3.714,2627,3.714,2628,3.714,2629,3.714,2630,3.714]],["title/interfaces/UserStats.html",[897,1.392,1304,2.785]],["body/interfaces/UserStats.html",[0,0.104,1,1.967,3,0.064,4,0.064,5,0.064,10,1.148,11,2.236,12,1.663,14,1.967,15,0.123,16,0.427,17,0.44,18,3.326,19,3.495,21,2.99,22,2.045,23,2.5,24,2.414,25,3.616,26,3.534,27,2.152,28,3.045,29,0.373,30,0.013,31,1.424,34,0.554,35,2.094,36,1.459,43,2.167,44,2.105,47,0.52,63,1.04,66,1.38,87,0.204,98,2.429,99,0.114,109,1.018,110,0.006,111,0.006,116,1.102,119,2.546,136,0.631,138,0.88,145,0.821,154,1.102,158,2.322,166,1.198,173,3.134,175,1.313,188,0.486,191,1.313,196,0.945,198,1.916,209,0.821,226,0.912,231,0.958,234,2.571,235,0.981,237,1.967,241,2.803,247,1.542,248,1.313,250,1.832,251,2.422,253,2.939,256,1.643,257,1.643,259,2.571,260,1.88,262,2.521,263,2.579,268,1.643,338,1.599,353,1.802,406,1.148,408,0.981,430,1.662,508,2.859,557,1.542,608,1.456,612,1.38,623,2.632,636,1.456,674,2.546,708,2.421,750,1.764,752,1.764,774,1.198,802,2.286,806,1.198,807,2.429,827,1.456,861,2.167,862,1.253,865,3.294,897,1.289,898,1.313,1028,2.676,1034,1.542,1047,1.38,1064,3.184,1148,2.429,1237,2.579,1252,1.456,1293,2.579,1294,1.764,1295,3.386,1296,4.741,1297,1.764,1298,1.764,1299,1.764,1300,2.421,1301,2.429,1302,1.764,1303,2.286,1304,2.579,1305,4.35,1306,4.35,1307,4.16,1308,4.16,1309,3.184,1310,3.386,1311,4.16,1312,4.205,1313,1.38,1314,1.915,1315,1.643,1316,1.643,1317,1.915,1318,1.915,1319,3.712,1320,3.007,1321,1.915,1322,3.855,1323,1.915,1324,3.007,1325,2.769,1326,1.915,1327,2.769,1328,2.769,1329,2.769,1330,1.915,1331,1.915,1332,1.915,1333,1.915,1334,1.915,1335,2.286,1336,3.007,1337,1.915,1338,4.16,1339,3.007,1340,2.769,1341,2.769,1342,1.764,1343,1.915,1344,4.741,1345,4.205,1346,1.764,1347,1.915,1348,3.007,1349,2.769,1350,4.205,1351,2.769,1352,3.679,1353,2.769,1354,2.579,1355,3.007,1356,1.915,1357,1.915,1358,1.915,1359,1.915,1360,1.915,1361,1.456,1362,1.915,1363,1.915,1364,1.915,1365,1.915,1366,1.764,1367,3.007,1368,3.712,1369,1.764,1370,1.915,1371,3.007,1372,1.764,1373,1.915,1374,1.915,1375,3.007,1376,1.542,1377,1.915,1378,1.915,1379,1.915,1380,1.915,1381,1.915,1382,3.007,1383,1.915,1384,1.915,1385,3.007,1386,1.915,1387,1.915,1388,1.915,1389,1.915,1390,1.915,1391,1.915,1392,1.915,1393,1.915,1394,1.915,1395,1.915,1396,1.915,1397,3.007,1398,1.915,1399,1.915,1400,1.915,1401,1.915,1402,2.769,1403,1.764,1404,2.769,1405,2.769,1406,1.764,1407,1.764,1408,1.915,1409,1.643,1410,1.764,1411,1.915]],["title/classes/UserStatsResponseDto.html",[0,0.176,2631,2.99]],["body/classes/UserStatsResponseDto.html",[0,0.273,2,1.292,3,0.132,4,0.132,5,0.132,8,2.092,12,1.503,15,0.252,16,0.714,29,0.462,30,0.013,31,1.572,32,1.125,35,2.268,37,2.423,39,0.656,44,2.015,47,0.447,63,0.841,87,0.19,95,1.424,98,2.568,99,0.148,110,0.009,111,0.009,128,3.013,417,2.927,565,3.623,861,3.623,863,5.697,948,4.048,949,4.629,1037,4.466,1148,4.209,1305,4.758,1306,4.758,1307,4.758,1308,4.758,1309,3.366,1310,4.466,1311,4.758,1456,4.312,1861,3.366,1868,4.446,1869,5.559,1871,3.614,2602,5.306,2631,4.629,2632,5.559,2633,4.97,2634,4.97,2635,5.559,2636,4.97,2637,4.97,2638,5.386,2639,4.97,2640,4.339]],["title/classes/UsersByRoleDto.html",[0,0.176,2638,2.99]],["body/classes/UsersByRoleDto.html",[0,0.287,2,1.395,3,0.142,4,0.142,5,0.142,8,2.079,12,1.43,15,0.272,16,0.749,29,0.442,30,0.013,31,1.559,32,0.982,35,2.399,37,2.48,39,0.572,47,0.601,63,1.131,87,0.199,95,1.538,98,3.452,99,0.16,110,0.01,111,0.01,128,2.539,417,2.971,565,3.053,861,3.053,863,5.291,948,3.411,949,3.901,1037,4.248,1148,4.127,1305,3.633,1306,3.633,1307,3.633,1308,3.633,1309,4.929,1310,4.842,1311,3.633,1456,3.633,1861,3.633,1865,4.684,1868,4.368,1870,4.684,1871,3.901,2602,4.929,2631,3.901,2632,4.684,2635,4.684,2638,5.538,2640,5.834]],["title/controllers/UsersController.html",[147,1.662,2641,2.99]],["body/controllers/UsersController.html",[0,0.11,1,2.831,3,0.068,4,0.068,5,0.068,8,2.021,10,3.632,11,2.75,12,1.796,14,2.831,15,0.13,17,1.187,27,2.078,29,0.46,30,0.013,32,0.995,35,1.677,36,1.402,39,0.58,47,0.66,63,1.109,87,0.225,95,0.733,99,0.076,109,1.073,110,0.006,111,0.006,147,1.034,149,1.034,151,1.534,153,1.439,154,2.208,155,2.633,156,2.633,158,2.402,161,1.625,163,2.462,164,2.372,166,1.263,167,1.625,173,2.148,175,1.384,176,1.859,178,1.625,180,1.859,182,3.711,183,1.859,184,1.534,185,3.091,187,4.017,188,0.512,191,1.384,193,1.455,195,1.21,196,1.546,198,1.908,205,3.984,209,0.865,234,3.019,241,1.731,250,0.996,251,2.059,253,2.06,259,1.491,260,1.065,262,3.29,276,1.931,338,1.666,353,1.21,369,3.839,518,1.546,557,3.484,558,3.293,561,3.236,564,2.885,565,2.258,566,4.117,568,3.236,570,2.232,571,4.762,572,5.719,592,2.232,593,4.164,608,1.534,611,1.731,618,1.455,619,1.859,620,1.731,621,2.148,622,1.859,623,1.439,624,1.859,627,2.018,628,1.859,629,5.055,630,5.413,631,2.885,634,2.687,636,1.534,638,4.923,644,4.956,645,4.436,653,2.232,654,3.984,678,2.232,680,2.232,685,2.018,708,4.671,774,1.263,802,3.289,806,1.263,807,2.512,862,1.321,1028,3.727,1148,3.243,1149,5.481,1150,5.945,1151,4.564,1152,4.245,1153,5.345,1190,3.768,1211,6.107,1252,2.381,1295,2.522,1296,2.687,1299,1.859,1300,2.522,1303,2.381,1313,2.767,1335,1.534,1338,1.731,1407,1.859,1438,4.245,1441,3.839,1442,4.245,1443,2.232,1444,2.232,1450,3.132,1493,2.232,1514,3.464,1515,2.232,1516,3.464,1633,4.326,1868,2.918,1871,1.859,2252,2.232,2253,2.232,2255,2.232,2565,3.984,2601,3.984,2641,2.885,2642,2.232,2643,4.862,2644,3.967,2645,2.556,2646,3.967,2647,2.556,2648,3.967,2649,2.556,2650,2.556,2651,2.556,2652,2.556,2653,2.556,2654,2.556,2655,2.556,2656,2.556,2657,2.556,2658,2.556,2659,2.556,2660,2.556,2661,2.556,2662,2.556,2663,2.556,2664,2.556,2665,2.556,2666,4.862,2667,2.556,2668,2.556,2669,3.967,2670,3.967,2671,2.232,2672,2.556,2673,3.967,2674,2.556,2675,2.556,2676,2.556,2677,2.556,2678,2.556,2679,2.556,2680,2.556,2681,2.556,2682,2.556,2683,2.556,2684,2.556,2685,2.556,2686,2.556,2687,2.556,2688,2.556,2689,2.556,2690,2.556,2691,2.556,2692,2.556,2693,2.556,2694,2.556,2695,3.967,2696,2.556]],["title/modules/UsersModule.html",[209,1.392,290,2.785]],["body/modules/UsersModule.html",[0,0.244,3,0.151,4,0.151,5,0.151,12,1.219,30,0.013,87,0.242,99,0.17,110,0.01,111,0.01,149,2.803,188,1.141,209,2.53,211,2.814,212,2.814,213,3.084,214,3.084,215,2.814,216,4.047,217,4.047,221,3.754,222,2.814,223,2.942,225,3.945,226,2.141,229,3.945,289,4.865,290,5.649,304,4.497,887,4.973,1298,4.141,1313,4.817,2641,5.434,2671,4.973,2697,4.973,2698,4.973,2699,5.696,2700,4.973,2701,5.696,2702,5.696]],["title/injectables/UsersService.html",[231,1.035,1313,2.34]],["body/injectables/UsersService.html",[0,0.094,1,2.598,3,0.058,4,0.058,5,0.058,10,1.036,11,2.111,12,1.633,14,2.598,15,0.111,16,0.394,17,1.23,18,3.181,19,3.343,21,2.843,22,2.024,23,2.411,24,2.32,25,3.507,26,3.418,27,2.058,28,3.012,29,0.384,30,0.013,31,1.42,34,0.802,35,2.026,36,1.479,39,0.594,43,1.998,44,2.03,47,0.595,63,1.246,66,1.246,87,0.197,98,2.271,99,0.105,109,0.919,110,0.005,111,0.005,116,0.994,119,2.98,136,0.569,138,1.595,145,0.741,153,1.274,154,1.996,155,1.901,156,1.901,158,2.719,163,2.487,164,2.319,166,1.734,172,0.956,173,2.98,175,1.901,188,0.439,191,1.186,196,1.713,198,1.863,209,0.741,226,0.823,231,0.884,232,1.036,234,2.991,235,1.42,237,2.598,241,3.174,247,1.392,248,1.186,250,2.145,251,2.395,253,2.889,256,1.483,257,1.483,259,2.487,260,1.863,262,2.38,263,2.378,268,1.483,338,2.111,353,1.662,406,1.036,408,0.885,430,1.532,508,2.719,557,3.197,558,2.378,568,1.734,608,2.107,612,1.246,623,2.563,636,1.314,674,2.38,750,2.553,752,2.553,774,1.082,802,2.107,806,1.082,807,2.271,827,1.314,861,1.998,862,1.131,865,3.132,897,1.189,1028,3.343,1034,1.392,1047,1.246,1064,2.977,1148,2.271,1237,2.378,1252,1.314,1293,3.405,1294,1.592,1295,3.197,1296,4.598,1297,1.592,1298,1.592,1299,1.592,1300,2.232,1301,3.188,1302,1.592,1303,2.107,1304,1.483,1305,3.405,1306,3.405,1307,2.977,1308,2.977,1309,2.977,1310,3.197,1311,2.977,1312,2.772,1313,1.998,1314,2.772,1315,1.483,1316,2.378,1317,1.729,1318,1.729,1319,3.47,1320,2.772,1321,1.729,1322,3.704,1323,1.729,1324,2.772,1325,2.553,1326,1.729,1327,2.553,1328,2.553,1329,2.553,1330,1.729,1331,1.729,1332,1.729,1333,1.729,1334,1.729,1335,2.107,1336,2.772,1337,1.729,1338,3.979,1339,2.772,1340,2.553,1341,2.553,1342,1.592,1343,1.729,1344,4.598,1345,3.97,1346,1.592,1347,3.47,1348,2.772,1349,2.553,1350,3.97,1351,2.553,1352,3.499,1353,2.553,1354,2.378,1355,2.772,1356,1.729,1357,1.729,1358,1.729,1359,1.729,1360,1.729,1361,1.314,1362,1.729,1363,1.729,1364,1.729,1365,1.729,1366,1.592,1367,2.772,1368,3.47,1369,1.592,1370,1.729,1371,2.772,1372,1.592,1373,1.729,1374,1.729,1375,2.772,1376,1.392,1377,1.729,1378,1.729,1379,1.729,1380,1.729,1381,1.729,1382,2.772,1383,1.729,1384,1.729,1385,2.772,1386,1.729,1387,1.729,1388,1.729,1389,1.729,1390,1.729,1391,1.729,1392,1.729,1393,1.729,1394,1.729,1395,1.729,1396,1.729,1397,2.772,1398,1.729,1399,2.772,1400,2.772,1401,2.772,1402,2.553,1403,1.592,1404,2.553,1405,2.553,1406,1.592,1407,1.592,1408,1.729,1409,1.483,1410,1.592,1411,1.729,2703,3.511,2704,3.511,2705,2.19,2706,3.511,2707,2.19,2708,2.19,2709,2.19,2710,2.19,2711,2.19,2712,2.19,2713,2.19,2714,2.19,2715,2.19,2716,2.19]],["title/classes/VerifyOtpDto.html",[0,0.176,424,2.226]],["body/classes/VerifyOtpDto.html",[0,0.314,2,0.933,3,0.095,4,0.095,5,0.095,8,2.017,15,0.182,16,0.572,17,0.926,20,2.908,22,2.416,27,2.083,29,0.376,30,0.013,32,0.874,33,2.281,34,1.479,36,0.695,37,2.58,39,0.509,44,1.136,47,0.733,79,2.32,80,2.523,82,3.2,87,0.152,88,3.465,89,2.083,90,2.668,93,1.136,94,2.595,95,1.028,99,0.212,100,1.773,110,0.008,111,0.008,127,1.854,128,1.698,172,1.566,260,0.964,276,1.285,311,3.573,362,3.072,392,1.943,393,2.154,394,1.943,395,1.854,396,2.417,397,2.595,398,1.854,401,1.854,404,2.042,405,3.852,406,3.465,407,2.281,408,3.261,409,3.964,410,4.394,411,4.166,413,2.638,414,2.72,417,2.887,418,2.154,419,1.943,420,1.773,421,3.964,422,4.076,423,2.906,424,2.765,425,4.167,426,3.569,427,3.384,428,3.78,429,3.888,430,2.595,431,4.109,432,3.247,433,3.78,434,3.065,435,3.247,436,3.888,437,4.118,438,1.943,439,2.154,440,1.943,441,2.154,442,2.154,443,2.154,444,2.154,445,2.154,446,2.154,447,3.065,448,2.154,449,3.065,450,2.154,451,2.281,452,2.281,453,2.281,454,2.281,455,2.281,456,2.042,457,2.042,458,2.042,459,2.042,460,1.943,461,1.943,462,2.154,463,2.042,464,1.566,465,1.943,466,1.773,467,1.854,468,1.854,2473,3.133,2474,3.133,2538,3.133,2717,3.588,2718,3.588,2719,3.588]],["title/coverage.html",[2720,4.434]],["body/coverage.html",[0,0.36,1,1.674,5,0.086,6,3.746,7,4.081,12,1.201,14,1.674,29,0.188,30,0.013,35,0.992,79,1.472,110,0.007,111,0.007,112,2.342,113,2.195,115,2.829,147,3.002,148,2.356,150,2.829,160,2.06,179,2.195,189,2.06,215,1.601,231,1.998,233,2.829,260,0.87,269,2.356,270,2.829,276,1.194,277,2.06,291,2.06,292,1.945,299,2.559,309,3.45,311,1.414,335,5.395,353,1.534,388,2.829,392,1.755,393,4.124,419,1.755,424,1.755,430,3.782,438,1.755,440,1.755,460,1.755,469,3.213,470,3.952,471,4.143,472,4.143,478,3.016,487,2.356,503,2.7,509,1.844,510,2.559,549,2.356,550,2.829,560,2.06,561,1.601,605,2.195,615,2.06,618,1.844,621,1.755,623,1.176,703,2.356,704,2.829,705,3.746,737,2.829,863,3.45,876,2.195,877,1.945,879,2.559,897,2.514,899,4.081,905,2.195,930,1.844,931,2.559,934,1.601,952,2.829,953,3.746,963,2.829,964,3.746,981,2.195,982,2.829,983,3.746,1013,2.559,1014,2.829,1015,3.746,1028,1.844,1029,2.829,1067,4.493,1068,3.746,1078,3.213,1128,2.356,1129,2.829,1148,1.674,1176,2.356,1196,2.356,1261,2.848,1267,4.143,1293,2.195,1294,4.081,1301,1.674,1304,2.195,1313,1.844,1413,2.829,1414,2.829,1421,2.356,1422,4.143,1427,2.195,1429,2.195,1463,2.559,1656,2.829,1664,2.829,1728,2.829,1800,2.829,1813,2.829,1859,2.559,1860,2.829,1861,4.185,1868,1.945,1872,2.559,1884,3.016,1899,2.829,1900,2.829,1928,2.06,1929,2.829,1942,2.195,2013,2.195,2015,2.829,2016,2.356,2024,2.356,2025,2.829,2041,2.829,2042,2.829,2125,4.143,2196,2.829,2215,3.195,2216,4.143,2275,2.356,2446,3.746,2452,3.746,2456,2.356,2476,2.829,2485,2.356,2486,2.829,2513,2.829,2541,2.829,2546,2.829,2549,2.829,2555,2.559,2556,2.829,2565,2.356,2566,2.829,2567,2.829,2570,2.829,2601,2.356,2602,4.185,2603,2.829,2631,2.356,2638,2.356,2641,2.356,2642,2.829,2720,2.559,2721,2.829,2722,3.241,2723,7.099,2724,7.279,2725,4.745,2726,4.745,2727,7.099,2728,4.143,2729,8.181,2730,6.179,2731,3.241,2732,3.241,2733,6.577,2734,6.179,2735,2.829,2736,3.241,2737,3.241,2738,3.241,2739,2.829,2740,5.395,2741,6.179,2742,2.829,2743,2.829,2744,2.829,2745,6.179,2746,5.614,2747,6.179,2748,3.241,2749,4.745,2750,4.745,2751,3.241,2752,4.745,2753,3.241,2754,3.241,2755,3.241,2756,3.241,2757,3.241,2758,3.241,2759,3.241]],["title/dependencies.html",[212,2.444,2760,2.996]],["body/dependencies.html",[0,0.292,30,0.013,93,1.754,95,1.589,110,0.01,111,0.01,122,2.084,145,1.877,188,1.111,212,2.738,226,2.084,296,3.001,298,4.03,772,4.84,881,4.376,883,3.524,890,3.524,904,4.957,1194,5.953,1195,5.953,1303,3.327,1682,4.376,1773,4.84,1826,4.84,1973,4.84,1974,5.953,2455,4.376,2612,4.84,2761,7.91,2762,5.543,2763,6.818,2764,5.543,2765,5.543,2766,5.543,2767,5.543,2768,5.543,2769,5.543,2770,5.543,2771,5.543,2772,5.543,2773,5.543,2774,5.543,2775,5.543,2776,5.543,2777,5.543,2778,5.543,2779,5.543,2780,5.543,2781,5.543,2782,5.543,2783,5.543,2784,5.543,2785,6.818,2786,5.543,2787,5.543,2788,5.543,2789,5.543,2790,5.543,2791,5.543,2792,5.543,2793,5.543,2794,5.543,2795,5.543,2796,5.543,2797,5.543,2798,5.543,2799,5.543,2800,5.543,2801,5.543,2802,5.543]],["title/miscellaneous/enumerations.html",[2803,2.182,2804,4.319]],["body/miscellaneous/enumerations.html",[3,0.145,15,0.277,30,0.013,110,0.01,111,0.01,172,3.758,395,3.488,401,2.819,413,3.488,464,3.501,465,3.656,466,2.696,467,2.819,468,3.788,470,2.819,510,4.308,534,4.293,543,4.573,544,4.871,545,4.599,931,4.308,944,5.896,948,4.293,949,4.91,1067,3.968,1068,5.79,1089,4.91,1106,4.764,1107,4.764,1108,5.896,1109,4.764,1110,3.968,1111,4.764,1112,4.764,1113,4.764,1114,4.764,1115,4.764,1116,5.896,1117,5.896,1118,4.764,1119,4.764,1120,4.764,1121,4.308,1872,4.308,1892,4.573,1896,4.91,2803,3.469,2804,4.764,2805,6.753,2806,5.457,2807,5.457,2808,5.457]],["title/miscellaneous/functions.html",[2803,2.182,2809,4.319]],["body/miscellaneous/functions.html",[15,0.324,17,1.158,29,0.371,30,0.012,63,1.082,110,0.011,111,0.011,163,2.402,215,3.876,2740,5.58,2742,6.851,2743,6.482,2744,6.851,2803,4.063,2809,5.58,2810,8.077,2811,6.391,2812,7.847]],["title/index.html",[15,0.174,838,2.495,2813,3.432]],["body/index.html",[4,0.121,8,1.145,30,0.012,37,2.267,97,3.082,110,0.009,111,0.009,223,3.952,237,2.351,268,3.082,345,4.372,360,3.593,371,3.309,376,4.041,378,3.082,397,3.338,409,3.256,466,2.248,664,3.974,674,4.142,725,2.893,909,5.758,1047,2.59,1110,3.309,1130,5.25,1192,3.593,1441,3.593,1602,3.974,1661,4.747,1710,3.309,1711,3.309,1712,3.309,1781,5.25,1932,3.974,2067,6.812,2140,3.974,2276,3.974,2295,3.974,2323,3.974,2362,5.25,2381,3.974,2720,3.593,2721,5.25,2814,6.013,2815,4.551,2816,4.551,2817,4.551,2818,6.733,2819,4.551,2820,4.551,2821,6.733,2822,6.013,2823,4.551,2824,4.551,2825,4.551,2826,6.733,2827,4.551,2828,7.162,2829,4.551,2830,7.92,2831,4.551,2832,4.551,2833,4.551,2834,4.551,2835,6.733,2836,4.551,2837,4.551,2838,4.551,2839,4.551,2840,4.551,2841,7.162,2842,6.013,2843,4.551,2844,4.551,2845,4.551,2846,6.013,2847,7.162,2848,6.013,2849,4.551,2850,7.65,2851,7.162,2852,4.551,2853,4.551,2854,4.551,2855,4.551,2856,4.551,2857,7.162,2858,4.551,2859,4.551,2860,4.551,2861,4.551,2862,6.013,2863,4.551,2864,4.551,2865,4.551,2866,4.551,2867,6.013,2868,4.551,2869,4.551,2870,6.013,2871,4.551,2872,4.551,2873,6.253,2874,4.551,2875,4.551,2876,4.551,2877,4.551,2878,4.551,2879,4.551,2880,4.551,2881,4.551,2882,6.013,2883,4.551,2884,4.551,2885,4.551,2886,4.551,2887,4.551,2888,4.551,2889,4.551,2890,6.013,2891,4.551,2892,4.551,2893,4.551,2894,4.551,2895,6.013,2896,4.551,2897,4.551,2898,4.551,2899,6.013,2900,6.013,2901,4.551,2902,4.551,2903,4.551,2904,4.551,2905,4.551,2906,4.551,2907,4.551,2908,4.551,2909,4.551,2910,4.551,2911,3.974,2912,4.551,2913,4.551,2914,4.551,2915,4.551,2916,4.551,2917,4.551]],["title/modules.html",[211,2.774]],["body/modules.html",[30,0.011,110,0.011,111,0.011,210,4.228,211,3.084,281,4.539,285,4.228,286,4.228,287,4.228,288,4.228,289,3.747,290,4.228,2873,7.348,2918,8.415,2919,8.415,2920,8.415]],["title/overview.html",[2921,4.903]],["body/overview.html",[2,1.159,30,0.013,79,2.025,109,1.872,110,0.009,111,0.009,114,1.946,149,1.803,189,4.935,209,1.51,210,5.151,211,2.203,212,2.203,213,2.414,214,2.414,215,2.203,216,2.414,217,2.414,218,3.893,219,3.893,220,3.893,221,3.212,222,2.203,223,2.303,232,2.11,277,4.237,281,6.163,282,3.893,283,3.893,284,3.893,285,5.151,286,5.669,287,5.405,288,5.459,289,4.732,290,5.339,291,5.012,292,4.732,615,4.935,697,3.893,698,3.893,699,3.893,872,3.893,874,3.893,875,3.893,876,5.257,877,4.659,898,2.414,1196,5.644,1258,3.893,1259,3.893,1260,3.893,1261,4.659,1301,4.01,1313,4.417,1456,3.02,1928,4.516,1942,5.257,2010,3.893,2011,3.893,2012,3.893,2013,5.257,2275,3.242,2506,3.893,2507,3.893,2508,3.893,2697,3.893,2698,3.893,2700,3.893,2735,5.179,2921,3.893,2922,4.459,2923,4.459]],["title/properties.html",[16,0.554,2760,2.996]],["body/properties.html",[8,1.66,16,0.739,30,0.012,110,0.011,111,0.011,1110,4.795,2911,5.758,2924,6.595,2925,6.595,2926,6.595]],["title/miscellaneous/variables.html",[913,3.35,2803,2.182]],["body/miscellaneous/variables.html",[12,1.485,15,0.289,27,1.999,28,2.395,29,0.434,30,0.013,34,1.777,47,0.624,110,0.01,111,0.01,114,2.49,172,3.396,198,1.532,251,1.69,299,5.479,320,4.981,321,4.981,323,4.148,327,4.148,329,4.981,330,4.981,331,4.981,336,4.148,345,5.046,358,3.424,561,2.818,568,2.818,623,2.893,913,3.864,1190,3.424,1694,4.504,2366,6.059,2446,4.504,2447,4.981,2448,4.148,2449,4.981,2450,4.981,2451,4.981,2456,5.046,2728,4.981,2739,4.981,2803,3.627,2927,5.705,2928,6.94,2929,5.705,2930,5.705,2931,5.705,2932,5.705,2933,5.705,2934,5.705,2935,5.705,2936,5.705,2937,5.705,2938,5.705,2939,5.705]]],"invertedIndex":[["",{"_index":30,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"classes/ResetPasswordDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":430,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/LockoutData.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{}}}],["0.0.1",{"_index":2925,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":2775,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":2795,"title":{},"body":{"dependencies.html":{}}}],["0.3.22",{"_index":2802,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":2774,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":2790,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":2729,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":2752,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":2747,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":2746,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":2751,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":2749,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":2726,"title":{},"body":{"coverage.html":{}}}],["0/19",{"_index":2755,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":2724,"title":{},"body":{"coverage.html":{}}}],["0/24",{"_index":2725,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":2723,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2727,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":2733,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":2745,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":2730,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":2734,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":2750,"title":{},"body":{"coverage.html":{}}}],["001",{"_index":463,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/AppointmentNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["001'})@isstring",{"_index":399,"title":{},"body":{"classes/ApplicationNotificationDto.html":{}}}],["001'})@isstring()@isnotempty",{"_index":716,"title":{},"body":{"classes/AppointmentNotificationDto.html":{}}}],["01",{"_index":1010,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UserResponseDto.html":{}}}],["01t00:00:00.000z",{"_index":2615,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["08:00",{"_index":382,"title":{},"body":{"modules/AppModule.html":{}}}],["09123456789",{"_index":106,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{}}}],["09123456789'})@isstring",{"_index":2197,"title":{},"body":{"classes/RegisterDto.html":{}}}],["09123456789'})@isstring()@isoptional",{"_index":58,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["1",{"_index":109,"title":{"injectables/MinioService-1.html":{},"interfaces/RequestWithUser-1.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService-1.html":{},"classes/PaginatedUsersResponseDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["1.5.4",{"_index":2793,"title":{},"body":{"dependencies.html":{}}}],["1.5.5",{"_index":2770,"title":{},"body":{"dependencies.html":{}}}],["1.8.0",{"_index":2777,"title":{},"body":{"dependencies.html":{}}}],["1/10",{"_index":2738,"title":{},"body":{"coverage.html":{}}}],["1/11",{"_index":2736,"title":{},"body":{"coverage.html":{}}}],["1/12",{"_index":2737,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":2732,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":353,"title":{},"body":{"modules/AppModule.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/QueueNotificationDto.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"classes/UserQueryDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["100",{"_index":128,"title":{},"body":{"entities/Announcement.html":{},"classes/ApplicationNotificationDto.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"classes/ForgotPasswordDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"classes/VerifyOtpDto.html":{}}}],["100).tofixed(1",{"_index":2120,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["1000",{"_index":1460,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["1024",{"_index":1208,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["10:00",{"_index":2392,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["10:30",{"_index":2393,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["10mb",{"_index":1209,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["11",{"_index":2922,"title":{},"body":{"overview.html":{}}}],["11.0.0",{"_index":2763,"title":{},"body":{"dependencies.html":{}}}],["11.0.5",{"_index":2764,"title":{},"body":{"dependencies.html":{}}}],["11.1.0",{"_index":2761,"title":{},"body":{"dependencies.html":{}}}],["11.2.0",{"_index":2766,"title":{},"body":{"dependencies.html":{}}}],["11:59",{"_index":2069,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["123",{"_index":49,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["123456",{"_index":427,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["123456'})@isstring()@isoptional",{"_index":2208,"title":{},"body":{"classes/RegisterDto.html":{}}}],["15",{"_index":1456,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"overview.html":{}}}],["16.5.0",{"_index":2780,"title":{},"body":{"dependencies.html":{}}}],["1990",{"_index":1009,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["1})@isoptional()@type(undefined)@isnumber()@min(1",{"_index":2604,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["2",{"_index":108,"title":{"interfaces/RequestWithUser-2.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{}}}],["2.0.0",{"_index":2785,"title":{},"body":{"dependencies.html":{}}}],["2.0.10",{"_index":2772,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":1150,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":564,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["2024",{"_index":715,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UserResponseDto.html":{}}}],["23",{"_index":2053,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["23:59",{"_index":2070,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["24",{"_index":2402,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["24h",{"_index":896,"title":{},"body":{"modules/AuthModule.html":{}}}],["25",{"_index":2640,"title":{},"body":{"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{}}}],["250",{"_index":1277,"title":{},"body":{"entities/DocumentFile.html":{}}}],["255",{"_index":140,"title":{},"body":{"entities/Announcement.html":{},"entities/DocumentFile.html":{}}}],["2})@isnumber()@isoptional",{"_index":38,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["3",{"_index":1066,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/LockoutData.html":{},"classes/QueueNotificationDto.html":{},"interfaces/RequestWithUser.html":{}}}],["3.14.1",{"_index":2787,"title":{},"body":{"dependencies.html":{}}}],["300",{"_index":1839,"title":{},"body":{"injectables/OTPService.html":{}}}],["30min",{"_index":831,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["31",{"_index":2923,"title":{},"body":{"overview.html":{}}}],["33",{"_index":2731,"title":{},"body":{"coverage.html":{}}}],["3306",{"_index":2933,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3600",{"_index":1724,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["4",{"_index":1034,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/RequestWithUser.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["4.0.1",{"_index":2791,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":2762,"title":{},"body":{"dependencies.html":{}}}],["4.1.0",{"_index":2778,"title":{},"body":{"dependencies.html":{}}}],["4.8.1",{"_index":2798,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":2237,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["401",{"_index":2232,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["403",{"_index":2268,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["404",{"_index":1153,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["409",{"_index":2239,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["5",{"_index":174,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"interfaces/LockoutData.html":{},"injectables/OTPService.html":{},"interfaces/RequestWithUser.html":{}}}],["5.0.1",{"_index":2801,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":2773,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":487,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"coverage.html":{}}}],["500",{"_index":134,"title":{},"body":{"entities/Announcement.html":{},"entities/DocumentFile.html":{}}}],["59",{"_index":2083,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["5:00",{"_index":829,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["6",{"_index":425,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"injectables/AppointmentService.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"injectables/OTPService.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["6.0.0",{"_index":2765,"title":{},"body":{"dependencies.html":{}}}],["6.4.17",{"_index":2768,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":1459,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["60000",{"_index":355,"title":{},"body":{"modules/AppModule.html":{}}}],["639123456789",{"_index":1031,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["6})@isstring()@minlength(6",{"_index":1056,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["7.0.4",{"_index":2789,"title":{},"body":{"dependencies.html":{}}}],["7.8.2",{"_index":2797,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":79,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/ApplicationNotificationDto.html":{},"injectables/AppointmentService.html":{},"classes/ForgotPasswordDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateUserDto.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{},"overview.html":{}}}],["8.0.5",{"_index":2783,"title":{},"body":{"dependencies.html":{}}}],["8.1.0",{"_index":2782,"title":{},"body":{"dependencies.html":{}}}],["8/16",{"_index":2757,"title":{},"body":{"coverage.html":{}}}],["85",{"_index":2632,"title":{},"body":{"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{}}}],["8:00",{"_index":828,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["8})@isstring()@isnotempty()@minlength(8",{"_index":2210,"title":{},"body":{"classes/RegisterDto.html":{}}}],["8})@isstring()@isoptional()@minlength(8",{"_index":83,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["9",{"_index":2735,"title":{},"body":{"coverage.html":{},"overview.html":{}}}],["9000",{"_index":1705,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["999",{"_index":2084,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["9]{6",{"_index":431,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["9]{6}$'})@isstring()@length(6",{"_index":2473,"title":{},"body":{"classes/ResetPasswordDto.html":{},"classes/VerifyOtpDto.html":{}}}],["_",{"_index":1614,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["__dirname",{"_index":329,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["__password",{"_index":1445,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["access_token",{"_index":1504,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["accesskey",{"_index":1690,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["account",{"_index":1454,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["acquiretimeout",{"_index":354,"title":{},"body":{"modules/AppModule.html":{}}}],["action",{"_index":2101,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["active",{"_index":948,"title":{},"body":{"entities/Counter.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"miscellaneous/enumerations.html":{}}}],["activeusers",{"_index":1306,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["add",{"_index":1518,"title":{},"body":{"interfaces/LockoutData.html":{},"classes/QueueGateway.html":{},"interfaces/RequestWithUser.html":{}}}],["adddays",{"_index":769,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["adddays(today",{"_index":841,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["additional",{"_index":1121,"title":{},"body":{"entities/DocumentApplication.html":{},"classes/QueueNotificationDto.html":{},"miscellaneous/enumerations.html":{}}}],["additionalproperties",{"_index":711,"title":{},"body":{"classes/AppointmentNotificationDto.html":{}}}],["address",{"_index":20,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/ApplicationNotificationDto.html":{},"entities/Appointment.html":{},"classes/AppointmentNotificationDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"entities/QueueDetails.html":{},"classes/QueueNotificationDto.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{},"classes/VerifyOtpDto.html":{}}}],["address'})@isemail()@isnotempty",{"_index":1039,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["addselect('count(user.id",{"_index":1389,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["admin",{"_index":10,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["admin/staff",{"_index":573,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["admin/super",{"_index":1171,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["admincreateuser",{"_index":2643,"title":{},"body":{"controllers/UsersController.html":{}}}],["admincreateuser(createuserdto",{"_index":2645,"title":{},"body":{"controllers/UsersController.html":{}}}],["adminid",{"_index":1246,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"interfaces/LockoutData.html":{}}}],["administrator",{"_index":736,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"interfaces/RequestWithUser.html":{}}}],["administrator'})@isstring()@isoptional",{"_index":723,"title":{},"body":{"classes/AppointmentNotificationDto.html":{}}}],["administrators",{"_index":2263,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["adminrolenames",{"_index":1591,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["adminrolenames.some",{"_index":1594,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["adminroles",{"_index":1589,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["adminroles.map((role",{"_index":1592,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["adminupdate",{"_index":1347,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["adminupdate(id",{"_index":2707,"title":{},"body":{"injectables/UsersService.html":{}}}],["adminupdateuser",{"_index":1582,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["adminupdateuserdto",{"_index":1,"title":{"classes/AdminUpdateUserDto.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["advanced",{"_index":339,"title":{},"body":{"modules/AppModule.html":{}}}],["afterconnect",{"_index":383,"title":{},"body":{"modules/AppModule.html":{}}}],["again",{"_index":1487,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["against",{"_index":2318,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["aiven",{"_index":341,"title":{},"body":{"modules/AppModule.html":{}}}],["alert",{"_index":2308,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["alerts",{"_index":2034,"title":{},"body":{"classes/QueueNotificationDto.html":{},"interfaces/RequestWithUser.html":{}}}],["allow",{"_index":678,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/UsersController.html":{}}}],["allowed",{"_index":1217,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["allowedheaders",{"_index":1982,"title":{},"body":{"classes/QueueGateway.html":{}}}],["allowing",{"_index":2863,"title":{},"body":{"index.html":{}}}],["allows",{"_index":2258,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["allqueues",{"_index":2156,"title":{},"body":{"controllers/QueuesController.html":{}}}],["allqueues.map((queue",{"_index":2161,"title":{},"body":{"controllers/QueuesController.html":{}}}],["alltimeslots",{"_index":833,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["alltimeslots.filter((slot",{"_index":835,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["already",{"_index":865,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService-1.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["always",{"_index":2113,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["amazing",{"_index":2905,"title":{},"body":{"index.html":{}}}],["announcement",{"_index":113,"title":{"entities/Announcement.html":{}},"body":{"entities/Announcement.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"coverage.html":{}}}],["announcement.controller",{"_index":227,"title":{},"body":{"modules/AnnouncementModule.html":{}}}],["announcement.dto",{"_index":192,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"classes/UpdateAnnouncementDto.html":{}}}],["announcement.dto.ts",{"_index":953,"title":{},"body":{"classes/CreateAnnouncementDto.html":{},"classes/UpdateAnnouncementDto.html":{},"coverage.html":{}}}],["announcement.dto.ts:10",{"_index":957,"title":{},"body":{"classes/CreateAnnouncementDto.html":{}}}],["announcement.dto.ts:14",{"_index":958,"title":{},"body":{"classes/CreateAnnouncementDto.html":{}}}],["announcement.dto.ts:18",{"_index":955,"title":{},"body":{"classes/CreateAnnouncementDto.html":{}}}],["announcement.dto.ts:22",{"_index":960,"title":{},"body":{"classes/CreateAnnouncementDto.html":{}}}],["announcement.dto.ts:6",{"_index":961,"title":{},"body":{"classes/CreateAnnouncementDto.html":{}}}],["announcement.isactive",{"_index":265,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["announcement.service",{"_index":190,"title":{},"body":{"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{}}}],["announcementcontroller",{"_index":148,"title":{"controllers/AnnouncementController.html":{}},"body":{"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"coverage.html":{}}}],["announcementmodule",{"_index":210,"title":{"modules/AnnouncementModule.html":{}},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["announcementrepository",{"_index":239,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["announcements",{"_index":152,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["announcementservice",{"_index":189,"title":{"injectables/AnnouncementService.html":{}},"body":{"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"coverage.html":{},"overview.html":{}}}],["api",{"_index":2140,"title":{},"body":{"controllers/QueuesController.html":{},"index.html":{}}}],["apibearerauth",{"_index":631,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["apibearerauth('jwt",{"_index":635,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{}}}],["apibody",{"_index":2221,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["apiconsumes",{"_index":1199,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["apiconsumes('multipart/form",{"_index":1219,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["apioperation",{"_index":629,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["apiparam",{"_index":2220,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["apiproperty",{"_index":417,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/AppointmentNotificationDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/QueueNotificationDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"classes/VerifyOtpDto.html":{}}}],["apiproperty({description",{"_index":396,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/AppointmentNotificationDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{},"classes/QueueNotificationDto.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/VerifyOtpDto.html":{}}}],["apiproperty({enum",{"_index":990,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["apiproperty({example",{"_index":1037,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{}}}],["apiproperty({type",{"_index":1869,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{},"classes/UserStatsResponseDto.html":{}}}],["apipropertyoptional",{"_index":94,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/ApplicationNotificationDto.html":{},"classes/AppointmentNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/VerifyOtpDto.html":{}}}],["apipropertyoptional({description",{"_index":33,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AppointmentNotificationDto.html":{},"classes/RegisterDto.html":{},"classes/SendOtpDto.html":{},"classes/UpdateUserDto.html":{},"classes/VerifyOtpDto.html":{}}}],["apipropertyoptional({example",{"_index":1030,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{}}}],["apiquery",{"_index":2222,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["apiresponse",{"_index":630,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":628,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["apitags('appointments",{"_index":632,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["apitags('authentication",{"_index":2227,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["apitags('document",{"_index":1200,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["apitags('users",{"_index":2675,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":398,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"injectables/AppointmentService.html":{},"entities/DocumentFile.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["app.appointmenttime",{"_index":826,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["app.controller",{"_index":303,"title":{},"body":{"modules/AppModule.html":{}}}],["app.files",{"_index":1272,"title":{},"body":{"entities/DocumentFile.html":{}}}],["app.service",{"_index":278,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app.statushistory",{"_index":480,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["appcontroller",{"_index":269,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applicantname",{"_index":2408,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["application",{"_index":397,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/VerifyOtpDto.html":{},"index.html":{}}}],["application'})@apiresponse({status",{"_index":1137,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["application.dto",{"_index":1198,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["application.dto.ts",{"_index":983,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"coverage.html":{}}}],["application.dto.ts:12",{"_index":992,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["application.dto.ts:18",{"_index":2551,"title":{},"body":{"classes/UpdateDocumentApplicationDto.html":{}}}],["application.dto.ts:21",{"_index":989,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["application.dto.ts:27",{"_index":2552,"title":{},"body":{"classes/UpdateDocumentApplicationDto.html":{}}}],["application.dto.ts:33",{"_index":997,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["application.dto.ts:42",{"_index":1000,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["application.entity",{"_index":504,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"classes/CreateDocumentApplicationDto.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["application.entity.ts",{"_index":1068,"title":{},"body":{"entities/DocumentApplication.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["application.entity.ts:41",{"_index":1086,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:44",{"_index":1101,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:51",{"_index":1075,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:54",{"_index":1073,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:61",{"_index":1090,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:64",{"_index":1095,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:67",{"_index":1084,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:70",{"_index":1077,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:73",{"_index":1098,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:76",{"_index":1088,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:81",{"_index":1100,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:84",{"_index":1081,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:90",{"_index":1094,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application_id",{"_index":484,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentFile.html":{}}}],["application_subtype",{"_index":1072,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application_type",{"_index":1074,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["applicationid",{"_index":394,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/DocumentFile.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["applicationnotificationdto",{"_index":392,"title":{"classes/ApplicationNotificationDto.html":{}},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{}}}],["applications",{"_index":1130,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"index.html":{}}}],["applications.controller",{"_index":1263,"title":{},"body":{"modules/DocumentApplicationsModule.html":{}}}],["applications.controller.ts",{"_index":1129,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"coverage.html":{}}}],["applications.controller.ts:120",{"_index":1163,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:146",{"_index":1154,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:164",{"_index":1144,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:183",{"_index":1168,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:201",{"_index":1177,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:231",{"_index":1180,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:246",{"_index":1174,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:261",{"_index":1157,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:271",{"_index":1172,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:49",{"_index":1138,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:77",{"_index":1187,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:99",{"_index":1142,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.module",{"_index":310,"title":{},"body":{"modules/AppModule.html":{}}}],["applications.module.ts",{"_index":1262,"title":{},"body":{"modules/DocumentApplicationsModule.html":{}}}],["applications.service",{"_index":1197,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{}}}],["applications.service.ts",{"_index":2748,"title":{},"body":{"coverage.html":{}}}],["applications/document",{"_index":309,"title":{},"body":{"modules/AppModule.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"coverage.html":{}}}],["applications/dto/create",{"_index":982,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"coverage.html":{}}}],["applications/dto/update",{"_index":2549,"title":{},"body":{"classes/UpdateDocumentApplicationDto.html":{},"coverage.html":{}}}],["applications/entities/application",{"_index":471,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"coverage.html":{}}}],["applications/entities/document",{"_index":1067,"title":{},"body":{"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["applications/services/minio.service.ts",{"_index":1728,"title":{},"body":{"injectables/MinioService-1.html":{},"coverage.html":{}}}],["applications/services/minio.service.ts:114",{"_index":1742,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:130",{"_index":1744,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:154",{"_index":1736,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:164",{"_index":1739,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:173",{"_index":1746,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:67",{"_index":1747,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:7",{"_index":1749,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:71",{"_index":1737,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:8",{"_index":1750,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:86",{"_index":1748,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:9",{"_index":1735,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applicationstatus",{"_index":1089,"title":{},"body":{"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"classes/UpdateDocumentApplicationDto.html":{},"miscellaneous/enumerations.html":{}}}],["applicationstatus.approved",{"_index":2553,"title":{},"body":{"classes/UpdateDocumentApplicationDto.html":{}}}],["applicationstatus.pending",{"_index":1127,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["applicationstatushistory",{"_index":469,"title":{"entities/ApplicationStatusHistory.html":{}},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentApplication.html":{},"modules/DocumentApplicationsModule.html":{},"coverage.html":{}}}],["applicationsubtype",{"_index":984,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"interfaces/RequestWithUser.html":{}}}],["applicationtype",{"_index":395,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{},"miscellaneous/enumerations.html":{}}}],["applicationtype.birth_certificate",{"_index":1003,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["apply",{"_index":1324,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["appmodule",{"_index":281,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appointment",{"_index":509,"title":{"entities/Appointment.html":{}},"body":{"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["appointment'})@apiresponse({status",{"_index":563,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["appointment.appointmentdate",{"_index":798,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointment.appointmenttime",{"_index":800,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointment.controller",{"_index":701,"title":{},"body":{"modules/AppointmentModule.html":{}}}],["appointment.dto",{"_index":617,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"classes/UpdateAppointmentDto.html":{}}}],["appointment.dto.ts",{"_index":964,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{},"coverage.html":{}}}],["appointment.dto.ts:13",{"_index":970,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:17",{"_index":972,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:21",{"_index":973,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:25",{"_index":966,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:29",{"_index":974,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:33",{"_index":975,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:37",{"_index":968,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:41",{"_index":969,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:45",{"_index":977,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:48",{"_index":978,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:51",{"_index":971,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:9",{"_index":2548,"title":{},"body":{"classes/UpdateAppointmentDto.html":{}}}],["appointment.service",{"_index":616,"title":{},"body":{"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{}}}],["appointment.status",{"_index":814,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointment.userid",{"_index":681,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["appointment_type",{"_index":1903,"title":{},"body":{"entities/QueueDetails.html":{}}}],["appointmentcontroller",{"_index":549,"title":{"controllers/AppointmentController.html":{}},"body":{"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"coverage.html":{}}}],["appointmentdate",{"_index":511,"title":{},"body":{"entities/Appointment.html":{},"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{}}}],["appointmentdetails",{"_index":706,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"interfaces/RequestWithUser.html":{}}}],["appointmentmodule",{"_index":285,"title":{"modules/AppointmentModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules.html":{},"overview.html":{}}}],["appointmentnotificationdto",{"_index":703,"title":{"classes/AppointmentNotificationDto.html":{}},"body":{"classes/AppointmentNotificationDto.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["appointmentnumber",{"_index":512,"title":{},"body":{"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"interfaces/RequestWithUser.html":{}}}],["appointmentrepository",{"_index":746,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointments",{"_index":551,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["appointmentservice",{"_index":615,"title":{"injectables/AppointmentService.html":{}},"body":{"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"coverage.html":{},"overview.html":{}}}],["appointmentstatus",{"_index":534,"title":{},"body":{"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{},"miscellaneous/enumerations.html":{}}}],["appointmentstatus.cancelled",{"_index":854,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointmentstatus.completed",{"_index":853,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointmentstatus.confirmed",{"_index":822,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointmentstatus.pending",{"_index":548,"title":{},"body":{"entities/Appointment.html":{},"injectables/AppointmentService.html":{}}}],["appointmenttime",{"_index":513,"title":{},"body":{"entities/Appointment.html":{},"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{}}}],["appointmenttype",{"_index":1016,"title":{},"body":{"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{}}}],["appropriately",{"_index":1603,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["approval",{"_index":2423,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["approved",{"_index":413,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"entities/DocumentApplication.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/VerifyOtpDto.html":{},"miscellaneous/enumerations.html":{}}}],["appservice",{"_index":277,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["appt",{"_index":714,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"interfaces/RequestWithUser.html":{}}}],["array",{"_index":41,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"interfaces/AuthenticatedUser.html":{},"classes/CreateUserDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/PaginatedUsersResponseDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{}}}],["array.isarray(payload.roles",{"_index":928,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["array.isarray(queue.details",{"_index":2167,"title":{},"body":{"controllers/QueuesController.html":{}}}],["asc",{"_index":790,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["asia/manila",{"_index":2056,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["assign",{"_index":43,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["assigned",{"_index":1617,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["assigning",{"_index":1523,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["assignment",{"_index":2670,"title":{},"body":{"controllers/UsersController.html":{}}}],["assignment'})@apiresponse({status",{"_index":2649,"title":{},"body":{"controllers/UsersController.html":{}}}],["assignments",{"_index":2266,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["assignrolestouser",{"_index":2514,"title":{},"body":{"injectables/RolesService.html":{}}}],["assignrolestouser(userid",{"_index":2519,"title":{},"body":{"injectables/RolesService.html":{}}}],["async",{"_index":234,"title":{},"body":{"injectables/AnnouncementService.html":{},"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["attempt",{"_index":1490,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["attempting",{"_index":1584,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["attempts",{"_index":1423,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["attemptsused",{"_index":2434,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["auth",{"_index":636,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth.controller",{"_index":885,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":620,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["auth.guard.ts",{"_index":1414,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":884,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/RequestWithUser.html":{}}}],["auth/auth.module",{"_index":302,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/decorators/roles.decorator",{"_index":624,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["auth/decorators/user.decorator",{"_index":626,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{}}}],["auth/dto/update",{"_index":1299,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth/guards/jwt",{"_index":619,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["auth/guards/roles.guard",{"_index":622,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["auth/jwt.strategy",{"_index":627,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["authcontroller",{"_index":879,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["authenticated",{"_index":639,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["authenticateduser",{"_index":561,"title":{"interfaces/AuthenticatedUser.html":{}},"body":{"controllers/AppointmentController.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authentication",{"_index":2293,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["authguard",{"_index":1416,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":1415,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":286,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":2911,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authorization",{"_index":1983,"title":{},"body":{"classes/QueueGateway.html":{}}}],["authservice",{"_index":876,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{},"overview.html":{}}}],["auto",{"_index":1048,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/QueueSchedulerService.html":{},"classes/RegisterDto.html":{}}}],["automatically",{"_index":2361,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["availability",{"_index":794,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["available",{"_index":668,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"interfaces/RequestWithUser.html":{}}}],["avoid",{"_index":2386,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["await",{"_index":253,"title":{},"body":{"injectables/AnnouncementService.html":{},"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["aws",{"_index":1781,"title":{},"body":{"injectables/MinioService-1.html":{},"index.html":{}}}],["back",{"_index":1531,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["backend",{"_index":2814,"title":{},"body":{"index.html":{}}}],["backers",{"_index":2906,"title":{},"body":{"index.html":{}}}],["backward",{"_index":1685,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/User.html":{}}}],["bad",{"_index":2238,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["badrequestexception",{"_index":612,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('cannot",{"_index":782,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["badrequestexception('date",{"_index":657,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["badrequestexception('document",{"_index":1225,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["badrequestexception('failed",{"_index":1571,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["badrequestexception('invalid",{"_index":778,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["badrequestexception('this",{"_index":868,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["badrequestexception('user",{"_index":1643,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["badrequestexception(`role",{"_index":1615,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["badrequestexception(`user",{"_index":1598,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["badrequestexception(passwordvalidation.message",{"_index":1513,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["base32",{"_index":1841,"title":{},"body":{"injectables/OTPService.html":{}}}],["based",{"_index":2323,"title":{},"body":{"interfaces/RequestWithUser.html":{},"index.html":{}}}],["basic",{"_index":1600,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["bcrypt",{"_index":1303,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare",{"_index":1497,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["bcrypt.compare(logindto.password",{"_index":1436,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["bcrypt.gensalt",{"_index":1515,"title":{},"body":{"interfaces/LockoutData.html":{},"controllers/UsersController.html":{}}}],["bcrypt.hash(createuserdto.password",{"_index":2691,"title":{},"body":{"controllers/UsersController.html":{}}}],["bcrypt.hash(newpassword",{"_index":1644,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["bcrypt.hash(password",{"_index":1517,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["bcrypt.hash(updateuserdto.password",{"_index":1550,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["before",{"_index":1567,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["beforeconnect",{"_index":366,"title":{},"body":{"modules/AppModule.html":{}}}],["being",{"_index":1349,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["belongs",{"_index":675,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["below",{"_index":361,"title":{},"body":{"modules/AppModule.html":{}}}],["best",{"_index":2332,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["better",{"_index":1784,"title":{},"body":{"injectables/MinioService-1.html":{},"injectables/QueueSchedulerService.html":{}}}],["between",{"_index":768,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueSchedulerService.html":{}}}],["between(startdate",{"_index":839,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["between(startofday",{"_index":2091,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["bigint",{"_index":1282,"title":{},"body":{"entities/DocumentFile.html":{}}}],["birth",{"_index":401,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{},"miscellaneous/enumerations.html":{}}}],["birth_certificate",{"_index":1106,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["birthdate",{"_index":1008,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["birthplace",{"_index":1011,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["blue",{"_index":2302,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["board",{"_index":2898,"title":{},"body":{"index.html":{}}}],["body",{"_index":182,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["body('documentcategory",{"_index":1220,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["body('status",{"_index":686,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["book",{"_index":783,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["booked",{"_index":866,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["bookedslots",{"_index":824,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["bookedslots.includes(slot",{"_index":836,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["boolean",{"_index":138,"title":{},"body":{"entities/Announcement.html":{},"entities/Appointment.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"entities/QueueDetails.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["bootstrap",{"_index":215,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["both",{"_index":2146,"title":{},"body":{"controllers/QueuesController.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["branded",{"_index":2372,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["breaking",{"_index":2387,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["browse",{"_index":2920,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2918,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":1772,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["bucketname",{"_index":1665,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["building",{"_index":2822,"title":{},"body":{"index.html":{}}}],["bulacan",{"_index":107,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["bulacan'})@isstring()@isoptional",{"_index":54,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["bulak",{"_index":1710,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"interfaces/RequestWithUser.html":{},"index.html":{}}}],["bulak_smart_connect",{"_index":2938,"title":{},"body":{"miscellaneous/variables.html":{}}}],["business",{"_index":1114,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["business_permit",{"_index":1113,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["calculate",{"_index":1842,"title":{},"body":{"injectables/OTPService.html":{}}}],["callback",{"_index":1212,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["callback(null",{"_index":1218,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["called",{"_index":2145,"title":{},"body":{"controllers/QueuesController.html":{}}}],["caller",{"_index":1408,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["canactivate",{"_index":2453,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":2458,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["cancel",{"_index":2093,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cancellation",{"_index":721,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{}}}],["cancellations",{"_index":722,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"injectables/QueueSchedulerService.html":{}}}],["cancelled",{"_index":545,"title":{},"body":{"entities/Appointment.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"entities/Queue.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"miscellaneous/enumerations.html":{}}}],["cancelledcount",{"_index":849,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueSchedulerService.html":{}}}],["cancelledqueues",{"_index":2094,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cancelledqueues.length",{"_index":2098,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cancelledservingqueues",{"_index":2107,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cancelledservingqueues.length",{"_index":2109,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cascade",{"_index":482,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/QueueDetails.html":{}}}],["cascade'})@joincolumn({name",{"_index":1273,"title":{},"body":{"entities/DocumentFile.html":{},"entities/QueueDetails.html":{}}}],["cases",{"_index":2290,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["catch",{"_index":806,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["category",{"_index":1222,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["category)'})@apiresponse({status",{"_index":1162,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["caught",{"_index":1607,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["certificate",{"_index":468,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{},"miscellaneous/enumerations.html":{}}}],["certificate'})@isstring",{"_index":402,"title":{},"body":{"classes/ApplicationNotificationDto.html":{}}}],["change",{"_index":1547,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["changed",{"_index":1366,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["changed_at",{"_index":490,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["changed_by",{"_index":492,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["changedat",{"_index":473,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["changedby",{"_index":474,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["changes",{"_index":2397,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["changing",{"_index":793,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["channel",{"_index":2875,"title":{},"body":{"index.html":{}}}],["character",{"_index":1655,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["characters",{"_index":80,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/ApplicationNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateUserDto.html":{},"classes/VerifyOtpDto.html":{}}}],["check",{"_index":674,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/OTPService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["checkaccountlockout(@body",{"_index":2432,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["checking",{"_index":869,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/RequestWithUser.html":{}}}],["checks",{"_index":372,"title":{},"body":{"modules/AppModule.html":{},"interfaces/RequestWithUser.html":{}}}],["checktimeslotavailability",{"_index":738,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["checktimeslotavailability(date",{"_index":747,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["citizen",{"_index":98,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["citizenrole",{"_index":1519,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["citizenrole.id",{"_index":1521,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["class",{"_index":0,"title":{"classes/AdminUpdateUserDto.html":{},"classes/ApplicationNotificationDto.html":{},"classes/AppointmentNotificationDto.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/QueueGateway.html":{},"classes/QueueNotificationDto.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"classes/VerifyOtpDto.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"classes/ResetPasswordDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/ApplicationNotificationDto.html":{},"classes/AppointmentNotificationDto.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/QueueGateway.html":{},"classes/QueueNotificationDto.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"classes/VerifyOtpDto.html":{},"overview.html":{}}}],["cleanupexpiredotps",{"_index":1814,"title":{},"body":{"injectables/OTPService.html":{}}}],["clear",{"_index":2442,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["clearaccountlockout(@body",{"_index":2443,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["clearaccountlockout(identifier",{"_index":1470,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["cleared",{"_index":1474,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["clearing",{"_index":2445,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["clicks",{"_index":2862,"title":{},"body":{"index.html":{}}}],["client",{"_index":1950,"title":{},"body":{"classes/QueueGateway.html":{}}}],["client.id",{"_index":1990,"title":{},"body":{"classes/QueueGateway.html":{}}}],["client.join('queue_updates",{"_index":2001,"title":{},"body":{"classes/QueueGateway.html":{}}}],["client.join(`counter_${counterid",{"_index":1998,"title":{},"body":{"classes/QueueGateway.html":{}}}],["client.join(`queue_${queueid",{"_index":1993,"title":{},"body":{"classes/QueueGateway.html":{}}}],["clients",{"_index":2003,"title":{},"body":{"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{}}}],["cloud",{"_index":2849,"title":{},"body":{"index.html":{}}}],["cluster_announcementmodule",{"_index":218,"title":{},"body":{"modules/AnnouncementModule.html":{},"overview.html":{}}}],["cluster_announcementmodule_exports",{"_index":219,"title":{},"body":{"modules/AnnouncementModule.html":{},"overview.html":{}}}],["cluster_announcementmodule_providers",{"_index":220,"title":{},"body":{"modules/AnnouncementModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":282,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":284,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":283,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appointmentmodule",{"_index":697,"title":{},"body":{"modules/AppointmentModule.html":{},"overview.html":{}}}],["cluster_appointmentmodule_exports",{"_index":698,"title":{},"body":{"modules/AppointmentModule.html":{},"overview.html":{}}}],["cluster_appointmentmodule_providers",{"_index":699,"title":{},"body":{"modules/AppointmentModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":872,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":874,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":873,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":875,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_documentapplicationsmodule",{"_index":1258,"title":{},"body":{"modules/DocumentApplicationsModule.html":{},"overview.html":{}}}],["cluster_documentapplicationsmodule_exports",{"_index":1259,"title":{},"body":{"modules/DocumentApplicationsModule.html":{},"overview.html":{}}}],["cluster_documentapplicationsmodule_providers",{"_index":1260,"title":{},"body":{"modules/DocumentApplicationsModule.html":{},"overview.html":{}}}],["cluster_queuemodule",{"_index":2010,"title":{},"body":{"modules/QueueModule.html":{},"overview.html":{}}}],["cluster_queuemodule_exports",{"_index":2012,"title":{},"body":{"modules/QueueModule.html":{},"overview.html":{}}}],["cluster_queuemodule_providers",{"_index":2011,"title":{},"body":{"modules/QueueModule.html":{},"overview.html":{}}}],["cluster_rolesmodule",{"_index":2506,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_rolesmodule_exports",{"_index":2508,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_rolesmodule_providers",{"_index":2507,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":2697,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":2698,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":2699,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":2700,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":362,"title":{},"body":{"modules/AppModule.html":{},"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/LockoutData.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["coding",{"_index":2374,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["color",{"_index":2373,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["column",{"_index":144,"title":{},"body":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/OTP.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["column({default",{"_index":527,"title":{},"body":{"entities/Appointment.html":{},"entities/OTP.html":{}}}],["column({name",{"_index":486,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["column({nullable",{"_index":530,"title":{},"body":{"entities/Appointment.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{}}}],["column({type",{"_index":125,"title":{},"body":{"entities/Announcement.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/OTP.html":{},"entities/Queue.html":{}}}],["column({unique",{"_index":521,"title":{},"body":{"entities/Appointment.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["combine",{"_index":2155,"title":{},"body":{"controllers/QueuesController.html":{}}}],["come",{"_index":2868,"title":{},"body":{"index.html":{}}}],["compatibility",{"_index":1686,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/User.html":{}}}],["complete",{"_index":48,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["completed",{"_index":544,"title":{},"body":{"entities/Appointment.html":{},"injectables/AppointmentService.html":{},"entities/Queue.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"miscellaneous/enumerations.html":{}}}],["completed_at",{"_index":1877,"title":{},"body":{"entities/Queue.html":{}}}],["completedat",{"_index":1873,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{}}}],["completedcount",{"_index":848,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["completes",{"_index":2347,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["completion",{"_index":2118,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["complexity",{"_index":444,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["component",{"_index":1558,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["components",{"_index":1365,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["compression",{"_index":2776,"title":{},"body":{"dependencies.html":{}}}],["concurrent",{"_index":2072,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["conditionally",{"_index":1702,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["config/database.config",{"_index":300,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":294,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":315,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":295,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{}}}],["configservice.get('db_host",{"_index":322,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_logging",{"_index":337,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_name",{"_index":328,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_password",{"_index":326,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_port",{"_index":324,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_ssl_reject_unauthorized",{"_index":347,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_synchronize",{"_index":332,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_timezone",{"_index":381,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_username",{"_index":325,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('jwt_secret",{"_index":893,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('node_env",{"_index":344,"title":{},"body":{"modules/AppModule.html":{}}}],["configuration",{"_index":343,"title":{},"body":{"modules/AppModule.html":{}}}],["configured",{"_index":1765,"title":{},"body":{"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{}}}],["confirmation",{"_index":728,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"interfaces/RequestWithUser.html":{}}}],["confirmation'})@isstring()@isnotempty",{"_index":732,"title":{},"body":{"classes/AppointmentNotificationDto.html":{}}}],["confirmed",{"_index":543,"title":{},"body":{"entities/Appointment.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"interfaces/RequestWithUser.html":{},"miscellaneous/enumerations.html":{}}}],["confirmed'})@isstring()@isoptional",{"_index":726,"title":{},"body":{"classes/AppointmentNotificationDto.html":{}}}],["confirmedcount",{"_index":847,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["conflict",{"_index":2240,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["conflictexception",{"_index":1297,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["conflictexception('email",{"_index":1351,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["conflictexception('username",{"_index":1353,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["conn",{"_index":367,"title":{},"body":{"modules/AppModule.html":{}}}],["conn.query",{"_index":379,"title":{},"body":{"modules/AppModule.html":{}}}],["conn.query('set",{"_index":373,"title":{},"body":{"modules/AppModule.html":{}}}],["connect",{"_index":1712,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"interfaces/RequestWithUser.html":{},"index.html":{}}}],["connected",{"_index":1989,"title":{},"body":{"classes/QueueGateway.html":{}}}],["connection",{"_index":348,"title":{},"body":{"modules/AppModule.html":{}}}],["connectionlimit",{"_index":352,"title":{},"body":{"modules/AppModule.html":{}}}],["consistent",{"_index":1526,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["console",{"_index":340,"title":{},"body":{"modules/AppModule.html":{}}}],["const",{"_index":251,"title":{},"body":{"injectables/AnnouncementService.html":{},"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":235,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["constructor(announcementrepository",{"_index":236,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["constructor(appointmentrepository",{"_index":744,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["constructor(configservice",{"_index":1418,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/MinioService-1.html":{}}}],["constructor(otprepository",{"_index":1817,"title":{},"body":{"injectables/OTPService.html":{}}}],["constructor(private",{"_index":195,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppController.html":{},"controllers/AppointmentController.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService-1.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser-2.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{}}}],["constructor(queuerepository",{"_index":2048,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["constructor(queueservice",{"_index":1941,"title":{},"body":{"classes/QueueGateway.html":{}}}],["constructor(reflector",{"_index":2502,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(rolesrepository",{"_index":2516,"title":{},"body":{"injectables/RolesService.html":{}}}],["constructor(usersrepository",{"_index":2705,"title":{},"body":{"injectables/UsersService.html":{}}}],["contact",{"_index":57,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["contact_number",{"_index":2571,"title":{},"body":{"entities/User.html":{}}}],["contactnumber",{"_index":21,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["contain",{"_index":436,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/LockoutData.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["containing",{"_index":995,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["content",{"_index":1716,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{}}}],["context",{"_index":2505,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":2462,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":2461,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":2463,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["continues",{"_index":2391,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["controller",{"_index":147,"title":{"controllers/AnnouncementController.html":{},"controllers/AppController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AnnouncementController.html":{},"controllers/AppController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('announcements",{"_index":194,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["controller('appointments",{"_index":633,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["controller('auth",{"_index":2228,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["controller('document",{"_index":1201,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["controller('queues",{"_index":2136,"title":{},"body":{"controllers/QueuesController.html":{}}}],["controller('roles",{"_index":2496,"title":{},"body":{"controllers/RolesController.html":{}}}],["controller('users",{"_index":2676,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":149,"title":{},"body":{"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["converting",{"_index":2254,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["copy",{"_index":987,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["cors",{"_index":1977,"title":{},"body":{"classes/QueueGateway.html":{}}}],["count",{"_index":1310,"title":{},"body":{"interfaces/FindAllOptions.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["counter",{"_index":930,"title":{"entities/Counter.html":{}},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"classes/QueueNotificationDto.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["counter.currentqueue",{"_index":1879,"title":{},"body":{"entities/Queue.html":{}}}],["counter/entities/counter.entity",{"_index":1895,"title":{},"body":{"entities/Queue.html":{},"modules/QueueModule.html":{}}}],["counter_number",{"_index":1881,"title":{},"body":{"entities/Queue.html":{}}}],["counterid",{"_index":1958,"title":{},"body":{"classes/QueueGateway.html":{}}}],["counternumber",{"_index":1874,"title":{},"body":{"entities/Queue.html":{},"controllers/QueuesController.html":{},"classes/UpdateQueueDto.html":{}}}],["counterstatus",{"_index":944,"title":{},"body":{"entities/Counter.html":{},"miscellaneous/enumerations.html":{}}}],["counterstatus.active",{"_index":951,"title":{},"body":{"entities/Counter.html":{}}}],["counts",{"_index":843,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["courses",{"_index":2881,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":2720,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":154,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create')@useguards(jwtauthguard",{"_index":2647,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(@body",{"_index":197,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["create(createannouncementdto",{"_index":159,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{}}}],["create(createappointmentdto",{"_index":559,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["create(createdto",{"_index":1136,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["create(createuserdto",{"_index":1401,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["createannouncementdto",{"_index":160,"title":{"classes/CreateAnnouncementDto.html":{}},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"classes/CreateAnnouncementDto.html":{},"classes/UpdateAnnouncementDto.html":{},"coverage.html":{}}}],["createappointmentdto",{"_index":560,"title":{"classes/CreateAppointmentDto.html":{}},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{},"coverage.html":{}}}],["createappointmentdto.userid",{"_index":640,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["created",{"_index":565,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/MinioService-1.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{}}}],["created_at",{"_index":1076,"title":{},"body":{"entities/DocumentApplication.html":{},"entities/Queue.html":{},"entities/User.html":{}}}],["createdat",{"_index":116,"title":{},"body":{"entities/Announcement.html":{},"injectables/AnnouncementService.html":{},"entities/Appointment.html":{},"entities/DocumentApplication.html":{},"interfaces/FindAllOptions.html":{},"entities/OTP.html":{},"entities/Queue.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["createdatecolumn",{"_index":123,"title":{},"body":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/OTP.html":{},"entities/Queue.html":{},"entities/User.html":{}}}],["createdatecolumn({name",{"_index":489,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/Queue.html":{},"entities/User.html":{}}}],["createdby",{"_index":117,"title":{},"body":{"entities/Announcement.html":{},"classes/CreateAnnouncementDto.html":{}}}],["createdocumentapplicationdto",{"_index":981,"title":{"classes/CreateDocumentApplicationDto.html":{}},"body":{"classes/CreateDocumentApplicationDto.html":{},"controllers/DocumentApplicationsController.html":{},"classes/UpdateDocumentApplicationDto.html":{},"coverage.html":{}}}],["createdto",{"_index":1139,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["createparamdecorator",{"_index":2447,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"miscellaneous/variables.html":{}}}],["createquerybuilder",{"_index":1378,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["createquerybuilder('user",{"_index":1320,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["createqueuedto",{"_index":1013,"title":{"classes/CreateQueueDto.html":{}},"body":{"classes/CreateQueueDto.html":{},"coverage.html":{}}}],["creates",{"_index":2648,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuserdto",{"_index":1028,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":2244,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["createuserdto.otp",{"_index":2245,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["creating",{"_index":1411,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["creation",{"_index":2616,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["credentials",{"_index":1981,"title":{},"body":{"classes/QueueGateway.html":{},"interfaces/RequestWithUser.html":{}}}],["critical",{"_index":1564,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["cron",{"_index":2065,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cron('59",{"_index":2052,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cruz",{"_index":1007,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["ctx",{"_index":2449,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":2450,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"miscellaneous/variables.html":{}}}],["current",{"_index":1450,"title":{},"body":{"interfaces/LockoutData.html":{},"classes/PaginatedUsersResponseDto.html":{},"controllers/UsersController.html":{}}}],["current.attempts",{"_index":1451,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["current.lastattempt",{"_index":1452,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["current.lockeduntil",{"_index":1457,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["current_queue_id",{"_index":938,"title":{},"body":{"entities/Counter.html":{}}}],["currentqueue",{"_index":932,"title":{},"body":{"entities/Counter.html":{}}}],["currentqueueid",{"_index":933,"title":{},"body":{"entities/Counter.html":{}}}],["currentuser",{"_index":2682,"title":{},"body":{"controllers/UsersController.html":{}}}],["currentuser.id",{"_index":2683,"title":{},"body":{"controllers/UsersController.html":{}}}],["currentuser.roles.some((role",{"_index":2684,"title":{},"body":{"controllers/UsersController.html":{}}}],["daily",{"_index":2054,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["data",{"_index":358,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateDocumentApplicationDto.html":{},"controllers/DocumentApplicationsController.html":{},"classes/QueueGateway.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"miscellaneous/variables.html":{}}}],["data')@apioperation({summary",{"_index":1185,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["database",{"_index":327,"title":{},"body":{"modules/AppModule.html":{},"interfaces/LockoutData.html":{},"injectables/OTPService.html":{},"miscellaneous/variables.html":{}}}],["databaseconfig",{"_index":299,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["datasource",{"_index":2812,"title":{},"body":{"miscellaneous/functions.html":{}}}],["date",{"_index":122,"title":{},"body":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"entities/Queue.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"dependencies.html":{}}}],["date')@useguards(jwtauthguard",{"_index":591,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["date().toisostring",{"_index":1774,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["date(date.now",{"_index":1458,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["date.getday",{"_index":781,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["date.now",{"_index":1469,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["day",{"_index":2068,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["dayofweek",{"_index":780,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["dd",{"_index":860,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["death",{"_index":1112,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["death_certificate",{"_index":1111,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["debug",{"_index":1223,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"interfaces/LockoutData.html":{}}}],["debugging",{"_index":1787,"title":{},"body":{"injectables/MinioService-1.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["declarations",{"_index":214,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decline",{"_index":1117,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["decorators",{"_index":32,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"controllers/AppController.html":{},"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"classes/AppointmentNotificationDto.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{},"entities/OTP.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"classes/VerifyOtpDto.html":{}}}],["decorators/roles.decorator",{"_index":2218,"title":{},"body":{"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["dedicated",{"_index":2335,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["deeper",{"_index":2877,"title":{},"body":{"index.html":{}}}],["default",{"_index":34,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"classes/ApplicationNotificationDto.html":{},"entities/Appointment.html":{},"injectables/AppointmentService.html":{},"entities/Counter.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{},"miscellaneous/variables.html":{}}}],["default_role_id",{"_index":2574,"title":{},"body":{"entities/User.html":{}}}],["defaultrole",{"_index":1322,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["defaultroleid",{"_index":18,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["defaultstrategy",{"_index":889,"title":{},"body":{"modules/AuthModule.html":{}}}],["define",{"_index":2457,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["defined",{"_index":39,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{}}}],["dela",{"_index":1006,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["delete",{"_index":185,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/LockoutData.html":{},"controllers/UsersController.html":{}}}],["delete(':id",{"_index":176,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["delete(':id')@apioperation({summary",{"_index":1173,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["delete(':id')@httpcode(httpstatus.no_content)@apioperation({summary",{"_index":603,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["delete(':id')@useguards(rolesguard)@roles('admin",{"_index":2662,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleted",{"_index":1252,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deletefile",{"_index":1667,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["deletefile(objectname",{"_index":1671,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["deleting",{"_index":813,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/MinioService-1.html":{}}}],["deletion",{"_index":694,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["dependencies",{"_index":212,"title":{"dependencies.html":{}},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":2841,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":2852,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":2846,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":2861,"title":{},"body":{"index.html":{}}}],["deprecated",{"_index":2533,"title":{},"body":{"injectables/RolesService.html":{}}}],["desc",{"_index":257,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["desc').skip(skip).take(limit",{"_index":1332,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["description",{"_index":8,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"classes/ApplicationNotificationDto.html":{},"controllers/AppointmentController.html":{},"classes/AppointmentNotificationDto.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentApplicationsController.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/QueueNotificationDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"entities/Role.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"classes/VerifyOtpDto.html":{},"index.html":{},"properties.html":{}}}],["design",{"_index":2377,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["details",{"_index":709,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/Queue.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["details.entity",{"_index":1894,"title":{},"body":{"entities/Queue.html":{},"modules/QueueModule.html":{}}}],["details.entity.ts",{"_index":1900,"title":{},"body":{"entities/QueueDetails.html":{},"coverage.html":{}}}],["details.entity.ts:14",{"_index":1907,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:17",{"_index":1920,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:21",{"_index":1919,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:24",{"_index":1925,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:28",{"_index":1924,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:31",{"_index":1906,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:34",{"_index":1911,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:37",{"_index":1913,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:40",{"_index":1902,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:43",{"_index":1915,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:46",{"_index":1922,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:49",{"_index":1904,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:52",{"_index":1909,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.queue",{"_index":1885,"title":{},"body":{"entities/Queue.html":{}}}],["details?.address",{"_index":2178,"title":{},"body":{"controllers/QueuesController.html":{}}}],["details?.firstname",{"_index":2174,"title":{},"body":{"controllers/QueuesController.html":{}}}],["details?.lastname",{"_index":2175,"title":{},"body":{"controllers/QueuesController.html":{}}}],["details?.middleinitial",{"_index":2176,"title":{},"body":{"controllers/QueuesController.html":{}}}],["details?.phonenumber",{"_index":2179,"title":{},"body":{"controllers/QueuesController.html":{}}}],["details?.reasonofvisit",{"_index":2177,"title":{},"body":{"controllers/QueuesController.html":{}}}],["development",{"_index":360,"title":{},"body":{"modules/AppModule.html":{},"interfaces/RequestWithUser.html":{},"index.html":{}}}],["devtools",{"_index":2887,"title":{},"body":{"index.html":{}}}],["different",{"_index":844,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["digit",{"_index":426,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["digital",{"_index":2817,"title":{},"body":{"index.html":{}}}],["digits",{"_index":434,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"injectables/OTPService.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["digits'})@matches(/^[0",{"_index":2474,"title":{},"body":{"classes/ResetPasswordDto.html":{},"classes/VerifyOtpDto.html":{}}}],["direct",{"_index":1780,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["disable",{"_index":369,"title":{},"body":{"modules/AppModule.html":{},"interfaces/LockoutData.html":{},"controllers/UsersController.html":{}}}],["disabled",{"_index":2356,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["disconnected",{"_index":1992,"title":{},"body":{"classes/QueueGateway.html":{}}}],["discord",{"_index":2874,"title":{},"body":{"index.html":{}}}],["disposition",{"_index":1785,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["dive",{"_index":2876,"title":{},"body":{"index.html":{}}}],["document",{"_index":503,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"classes/UpdateDocumentApplicationDto.html":{},"coverage.html":{}}}],["document_category",{"_index":1276,"title":{},"body":{"entities/DocumentFile.html":{}}}],["documentapplication",{"_index":478,"title":{"entities/DocumentApplication.html":{}},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentApplication.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"coverage.html":{}}}],["documentapplicationscontroller",{"_index":1128,"title":{"controllers/DocumentApplicationsController.html":{}},"body":{"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"coverage.html":{}}}],["documentapplicationsmodule",{"_index":287,"title":{"modules/DocumentApplicationsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules.html":{},"overview.html":{}}}],["documentapplicationsservice",{"_index":1196,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"coverage.html":{},"overview.html":{}}}],["documentation",{"_index":2721,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["documentcategory",{"_index":1183,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{}}}],["documentfile",{"_index":1078,"title":{"entities/DocumentFile.html":{}},"body":{"entities/DocumentApplication.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"coverage.html":{}}}],["doe",{"_index":105,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["doe'})@isstring()@isnotempty",{"_index":2203,"title":{},"body":{"classes/RegisterDto.html":{}}}],["doe'})@isstring()@isoptional",{"_index":67,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["don't",{"_index":677,"title":{},"body":{"controllers/AppointmentController.html":{},"interfaces/RequestWithUser.html":{}}}],["dotenv",{"_index":2779,"title":{},"body":{"dependencies.html":{}}}],["download",{"_index":1166,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["dropschema",{"_index":364,"title":{},"body":{"modules/AppModule.html":{}}}],["dto",{"_index":9,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{}}}],["dto.applicantname",{"_index":2415,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["dto.applicationid",{"_index":2412,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["dto.applicationsubtype",{"_index":2414,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["dto.applicationtype",{"_index":2413,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["dto.email",{"_index":2410,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["dto.newstatus",{"_index":2421,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["dto.previousstatus",{"_index":2422,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["dto.rejectionreason",{"_index":2430,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["dto.status",{"_index":2417,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["dto.submissiondate",{"_index":2416,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["dto/appointment",{"_index":2226,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["dto/create",{"_index":191,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/login.dto",{"_index":1428,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["dto/otp.dto",{"_index":2223,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["dto/queue",{"_index":2224,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["dto/register.dto",{"_index":1430,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["dto/update",{"_index":193,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["dto/user",{"_index":2673,"title":{},"body":{"controllers/UsersController.html":{}}}],["due",{"_index":1485,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["during",{"_index":1606,"title":{},"body":{"interfaces/LockoutData.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{}}}],["e.g",{"_index":73,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["e2e",{"_index":2837,"title":{},"body":{"index.html":{}}}],["each",{"_index":1059,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["eager",{"_index":1093,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["efficient",{"_index":2823,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":2844,"title":{},"body":{"index.html":{}}}],["email",{"_index":22,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/ApplicationNotificationDto.html":{},"classes/AppointmentNotificationDto.html":{},"interfaces/AuthenticatedUser.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/QueueNotificationDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{}}}],["email'})@isemail",{"_index":407,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["email.service",{"_index":1827,"title":{},"body":{"injectables/OTPService.html":{}}}],["emailorusername",{"_index":1658,"title":{},"body":{"classes/LoginDto.html":{}}}],["emailregex",{"_index":1534,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["emailregex.test(email",{"_index":1536,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["emailservice",{"_index":291,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/OTPService.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{},"overview.html":{}}}],["enabled",{"_index":2243,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["enableport",{"_index":1683,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["encoding",{"_index":1840,"title":{},"body":{"injectables/OTPService.html":{}}}],["end",{"_index":665,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/QueueSchedulerService.html":{}}}],["enddate",{"_index":596,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["endofday",{"_index":2059,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["endofday.toisostring",{"_index":2088,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["endpoint",{"_index":1688,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"controllers/QueuesController.html":{}}}],["endpoints",{"_index":1253,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{}}}],["endpoint}${portdisplay",{"_index":1766,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["enforcement",{"_index":2350,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["ensure",{"_index":2381,"title":{},"body":{"interfaces/RequestWithUser.html":{},"index.html":{}}}],["ensurebucketexists",{"_index":1729,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["ensuring",{"_index":1771,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["enterprise",{"_index":2889,"title":{},"body":{"index.html":{}}}],["entities",{"_index":114,"title":{},"body":{"entities/Announcement.html":{},"modules/AppModule.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/OTP.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["entities/announcement.entity",{"_index":228,"title":{},"body":{"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{}}}],["entities/application",{"_index":1264,"title":{},"body":{"modules/DocumentApplicationsModule.html":{}}}],["entities/appointment.entity",{"_index":625,"title":{},"body":{"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["entities/document",{"_index":1002,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["entities/otp.entity",{"_index":312,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/OTPService.html":{}}}],["entities/queue",{"_index":2022,"title":{},"body":{"modules/QueueModule.html":{}}}],["entities/queue.entity",{"_index":2021,"title":{},"body":{"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"classes/UpdateQueueDto.html":{}}}],["entities/role.entity",{"_index":2510,"title":{},"body":{"modules/RolesModule.html":{},"injectables/RolesService.html":{}}}],["entities/user.entity",{"_index":1298,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entity",{"_index":112,"title":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/OTP.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{}},"body":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"interfaces/LockoutData.html":{},"entities/OTP.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{},"coverage.html":{}}}],["entity('announcements",{"_index":146,"title":{},"body":{"entities/Announcement.html":{}}}],["entity('application_status_history",{"_index":505,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["entity('appointments",{"_index":546,"title":{},"body":{"entities/Appointment.html":{}}}],["entity('counters",{"_index":950,"title":{},"body":{"entities/Counter.html":{}}}],["entity('document_applications",{"_index":1122,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["entity('document_files",{"_index":1291,"title":{},"body":{"entities/DocumentFile.html":{}}}],["entity('otps",{"_index":1811,"title":{},"body":{"entities/OTP.html":{}}}],["entity('queue_details",{"_index":1927,"title":{},"body":{"entities/QueueDetails.html":{}}}],["entity('queues",{"_index":1897,"title":{},"body":{"entities/Queue.html":{}}}],["entity('roles",{"_index":2484,"title":{},"body":{"entities/Role.html":{}}}],["entity('users",{"_index":2597,"title":{},"body":{"entities/User.html":{}}}],["entity{.ts,.js",{"_index":330,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["enum",{"_index":414,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"entities/Appointment.html":{},"classes/AppointmentNotificationDto.html":{},"entities/Counter.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"classes/ForgotPasswordDto.html":{},"entities/Queue.html":{},"classes/QueueNotificationDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/VerifyOtpDto.html":{}}}],["enumerations",{"_index":2804,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":334,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{}}}],["environments",{"_index":365,"title":{},"body":{"modules/AppModule.html":{}}}],["er_dup_entry",{"_index":1577,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["err",{"_index":1605,"title":{},"body":{"interfaces/LockoutData.html":{},"controllers/QueuesController.html":{}}}],["error",{"_index":807,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["error('invalid",{"_index":2193,"title":{},"body":{"controllers/QueuesController.html":{}}}],["error('jwt_secret",{"_index":912,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["error('queue",{"_index":2195,"title":{},"body":{"controllers/QueuesController.html":{}}}],["error('unauthorized",{"_index":2686,"title":{},"body":{"controllers/UsersController.html":{}}}],["error('user",{"_index":2530,"title":{},"body":{"injectables/RolesService.html":{}}}],["error.code",{"_index":1576,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["error.message",{"_index":1619,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["errors",{"_index":1579,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["eslint",{"_index":1438,"title":{},"body":{"interfaces/LockoutData.html":{},"controllers/UsersController.html":{}}}],["eslint/no",{"_index":1442,"title":{},"body":{"interfaces/LockoutData.html":{},"controllers/UsersController.html":{}}}],["estimated",{"_index":2029,"title":{},"body":{"classes/QueueNotificationDto.html":{}}}],["estimated_wait_time",{"_index":1887,"title":{},"body":{"entities/Queue.html":{}}}],["estimatedtime",{"_index":2026,"title":{},"body":{"classes/QueueNotificationDto.html":{},"interfaces/RequestWithUser.html":{}}}],["estimatedwaittime",{"_index":1875,"title":{},"body":{"entities/Queue.html":{},"controllers/QueuesController.html":{}}}],["etc",{"_index":1812,"title":{},"body":{"entities/OTP.html":{}}}],["event",{"_index":2002,"title":{},"body":{"classes/QueueGateway.html":{}}}],["exactly",{"_index":433,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["example",{"_index":37,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/ApplicationNotificationDto.html":{},"classes/AppointmentNotificationDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/QueueNotificationDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"classes/VerifyOtpDto.html":{},"index.html":{}}}],["exceptions",{"_index":1635,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["execution",{"_index":2073,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["executioncontext",{"_index":2448,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":1611,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["existence",{"_index":2340,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["existing",{"_index":1376,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/OTPService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["existingappointment",{"_index":867,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["existingappointments",{"_index":821,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["existingappointments.map",{"_index":825,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["existinguser",{"_index":1350,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["existinguserbyemail",{"_index":1404,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["existinguserbyemail.id",{"_index":1544,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["existinguserbyusername",{"_index":1405,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["existinguserbyusername.id",{"_index":1546,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["exists",{"_index":1352,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService-1.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["expectation",{"_index":1986,"title":{},"body":{"classes/QueueGateway.html":{}}}],["experience",{"_index":2879,"title":{},"body":{"index.html":{}}}],["expiration",{"_index":2324,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["expired",{"_index":1854,"title":{},"body":{"injectables/OTPService.html":{},"interfaces/RequestWithUser.html":{}}}],["expires",{"_index":2296,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["expiresat",{"_index":1801,"title":{},"body":{"entities/OTP.html":{},"injectables/OTPService.html":{}}}],["expiresat.setminutes(expiresat.getminutes",{"_index":1846,"title":{},"body":{"injectables/OTPService.html":{}}}],["expiresin",{"_index":895,"title":{},"body":{"modules/AuthModule.html":{}}}],["expiry",{"_index":1741,"title":{},"body":{"injectables/MinioService-1.html":{},"injectables/OTPService.html":{}}}],["expiryminutes",{"_index":1843,"title":{},"body":{"injectables/OTPService.html":{}}}],["export",{"_index":99,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"classes/ResetPasswordDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{}}}],["exports",{"_index":217,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":1195,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":1182,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["extends",{"_index":13,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"interfaces/AuthenticatedUser.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateUserDto.html":{}}}],["extension",{"_index":72,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["extra",{"_index":351,"title":{},"body":{"modules/AppModule.html":{}}}],["extract",{"_index":2157,"title":{},"body":{"controllers/QueuesController.html":{}}}],["extractjwt",{"_index":902,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":916,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["factor",{"_index":2292,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["failed",{"_index":1464,"title":{},"body":{"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"interfaces/RequestWithUser.html":{}}}],["failedattempts",{"_index":1432,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["false",{"_index":266,"title":{},"body":{"injectables/AnnouncementService.html":{},"modules/AppModule.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"interfaces/AuthenticatedUser.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"entities/QueueDetails.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["false})@isoptional()@isenum(applicationstatus",{"_index":2550,"title":{},"body":{"classes/UpdateDocumentApplicationDto.html":{}}}],["false})@isoptional()@isnumber",{"_index":2035,"title":{},"body":{"classes/QueueNotificationDto.html":{}}}],["false})@isoptional()@isstring",{"_index":988,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"classes/QueueNotificationDto.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["false})@joincolumn({name",{"_index":483,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["fast",{"_index":2855,"title":{},"body":{"index.html":{}}}],["features",{"_index":2295,"title":{},"body":{"interfaces/RequestWithUser.html":{},"index.html":{}}}],["fetching",{"_index":2183,"title":{},"body":{"controllers/QueuesController.html":{}}}],["few",{"_index":2857,"title":{},"body":{"index.html":{}}}],["field",{"_index":2214,"title":{},"body":{"classes/RegisterDto.html":{}}}],["fields",{"_index":1354,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"classes/ResetPasswordDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{}}}],["file.application",{"_index":1080,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["file.buffer",{"_index":1714,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["file.entity",{"_index":1104,"title":{},"body":{"entities/DocumentApplication.html":{},"modules/DocumentApplicationsModule.html":{}}}],["file.entity.ts",{"_index":1267,"title":{},"body":{"entities/DocumentFile.html":{},"coverage.html":{}}}],["file.entity.ts:17",{"_index":1286,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.entity.ts:20",{"_index":1275,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.entity.ts:23",{"_index":1280,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.entity.ts:26",{"_index":1285,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.entity.ts:29",{"_index":1283,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.entity.ts:32",{"_index":1288,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.entity.ts:35",{"_index":1278,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.entity.ts:38",{"_index":1290,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.entity.ts:45",{"_index":1274,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.mimetype",{"_index":1717,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["file.mimetype.match(/\\/(jpg|jpeg|png|pdf",{"_index":1213,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["file.originalname",{"_index":1719,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["file.size",{"_index":1715,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["file.size.tostring",{"_index":1776,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["file_name",{"_index":1279,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file_size",{"_index":1281,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file_type",{"_index":1284,"title":{},"body":{"entities/DocumentFile.html":{}}}],["filefilter",{"_index":1210,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["fileid",{"_index":1169,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["fileinterceptor",{"_index":1193,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["fileinterceptor('file",{"_index":1205,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["filename",{"_index":1268,"title":{},"body":{"entities/DocumentFile.html":{}}}],["files",{"_index":1069,"title":{},"body":{"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/MinioService-1.html":{}}}],["files.push(obj",{"_index":1796,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["filesize",{"_index":1207,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{}}}],["filetype",{"_index":1269,"title":{},"body":{"entities/DocumentFile.html":{}}}],["filter",{"_index":1325,"title":{},"body":{"interfaces/FindAllOptions.html":{},"classes/UserQueryDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["finally",{"_index":2112,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["find",{"_index":1637,"title":{},"body":{"interfaces/LockoutData.html":{},"controllers/QueuesController.html":{},"injectables/RolesService.html":{}}}],["findall",{"_index":155,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findall(@query('includeuser",{"_index":646,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["findall(includeuser",{"_index":569,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["findall(options",{"_index":750,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["findall(query",{"_index":2651,"title":{},"body":{"controllers/UsersController.html":{}}}],["findall(status",{"_index":1140,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["findallbyuser",{"_index":739,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["findallbyuser(userid",{"_index":753,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["findalloptions",{"_index":1293,"title":{"interfaces/FindAllOptions.html":{}},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["findbyappointmentnumber",{"_index":552,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["findbyappointmentnumber(@param('number",{"_index":672,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["findbyappointmentnumber(appointmentnumber",{"_index":577,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["findbyemail",{"_index":2703,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyemail(email",{"_index":1399,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["findbyids",{"_index":2534,"title":{},"body":{"injectables/RolesService.html":{}}}],["findbyname",{"_index":2515,"title":{},"body":{"injectables/RolesService.html":{}}}],["findbyname(name",{"_index":2522,"title":{},"body":{"injectables/RolesService.html":{}}}],["findbyusername",{"_index":2704,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyusername(username",{"_index":1400,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["finding",{"_index":1639,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["findone",{"_index":156,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone(@param('id",{"_index":203,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/RolesController.html":{}}}],["findone(id",{"_index":166,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["finduserappointments",{"_index":553,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["finduserappointments(@user",{"_index":650,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["finduserappointments(user",{"_index":583,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["finduserbyemail(email",{"_index":1638,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["first",{"_index":62,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"interfaces/LockoutData.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["first_name",{"_index":1905,"title":{},"body":{"entities/QueueDetails.html":{},"entities/User.html":{}}}],["firstname",{"_index":23,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Appointment.html":{},"classes/AppointmentNotificationDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"entities/QueueDetails.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["fix",{"_index":1565,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["fixed",{"_index":2071,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["fk_appointment_user",{"_index":539,"title":{},"body":{"entities/Appointment.html":{}}}],["fk_current_queue",{"_index":939,"title":{},"body":{"entities/Counter.html":{}}}],["fk_queue_id",{"_index":1918,"title":{},"body":{"entities/QueueDetails.html":{}}}],["fk_user_id",{"_index":1923,"title":{},"body":{"entities/QueueDetails.html":{}}}],["flag",{"_index":2114,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["flatten",{"_index":2160,"title":{},"body":{"controllers/QueuesController.html":{}}}],["fns",{"_index":772,"title":{},"body":{"injectables/AppointmentService.html":{},"dependencies.html":{}}}],["focus",{"_index":2864,"title":{},"body":{"index.html":{}}}],["follow",{"_index":2892,"title":{},"body":{"index.html":{}}}],["forbidden",{"_index":2269,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["foreign",{"_index":370,"title":{},"body":{"modules/AppModule.html":{}}}],["foreign_key_checks=0",{"_index":374,"title":{},"body":{"modules/AppModule.html":{}}}],["foreign_key_checks=1",{"_index":385,"title":{},"body":{"modules/AppModule.html":{}}}],["foreignkeyconstraintname",{"_index":538,"title":{},"body":{"entities/Appointment.html":{},"entities/Counter.html":{},"entities/QueueDetails.html":{}}}],["forgot",{"_index":1488,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["forgotpassword(@body",{"_index":2344,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["forgotpassworddto",{"_index":438,"title":{"classes/ForgotPasswordDto.html":{}},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{}}}],["form",{"_index":994,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["form_data",{"_index":1082,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["format",{"_index":406,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{}}}],["format(today",{"_index":857,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["formats",{"_index":2465,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["formatted",{"_index":2337,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["formdata",{"_index":985,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{}}}],["forwardref",{"_index":1976,"title":{},"body":{"classes/QueueGateway.html":{},"modules/QueueModule.html":{}}}],["found",{"_index":262,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["found'})@apiresponse({status",{"_index":2654,"title":{},"body":{"controllers/UsersController.html":{}}}],["framework",{"_index":2821,"title":{},"body":{"index.html":{}}}],["frontend",{"_index":2142,"title":{},"body":{"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["full",{"_index":1047,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"classes/RegisterDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["fullname",{"_index":1402,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["fully",{"_index":1630,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["function",{"_index":2741,"title":{},"body":{"coverage.html":{}}}],["functionality",{"_index":2388,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["functions",{"_index":2809,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":2860,"title":{},"body":{"index.html":{}}}],["general",{"_index":2102,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["generate",{"_index":827,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/OTPService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["generatealltimeslots",{"_index":740,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["generated",{"_index":1049,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{}}}],["generateotp",{"_index":1815,"title":{},"body":{"injectables/OTPService.html":{}}}],["generateotp(email",{"_index":1821,"title":{},"body":{"injectables/OTPService.html":{}}}],["generates",{"_index":2288,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["generating",{"_index":1778,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["generation",{"_index":462,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["get(':id",{"_index":167,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["get(':id')@apioperation({summary",{"_index":581,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{}}}],["get(':id')@roles('admin",{"_index":2490,"title":{},"body":{"controllers/RolesController.html":{}}}],["get(':id')@useguards(rolesguard)@roles('admin",{"_index":2653,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':id/files",{"_index":1236,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get(':id/files')@apioperation({summary",{"_index":1159,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get(':id/files/all",{"_index":1240,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get(':id/files/all')@apioperation({summary",{"_index":1146,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get('admin/all",{"_index":1254,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get('admin/all')@roles('admin",{"_index":1155,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get('admin/stats",{"_index":1256,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get('admin/stats')@roles('admin",{"_index":1170,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get('available",{"_index":587,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["get('by",{"_index":578,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["get('date",{"_index":597,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["get('files/:fileid/download",{"_index":1243,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get('files/:fileid/download')@apioperation({summary",{"_index":1165,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get('health",{"_index":274,"title":{},"body":{"controllers/AppController.html":{}}}],["get('mine",{"_index":649,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["get('mine')@apioperation({summary",{"_index":584,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["get('minio_use_ssl",{"_index":1758,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["get('profile",{"_index":2252,"title":{},"body":{"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["get('profile')@apioperation({summary",{"_index":2657,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('recent",{"_index":170,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["get('stats",{"_index":653,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/UsersController.html":{}}}],["get('stats')@useguards(jwtauthguard",{"_index":601,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["get('stats')@useguards(rolesguard)@roles('admin",{"_index":2660,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('user/:userid",{"_index":2132,"title":{},"body":{"controllers/QueuesController.html":{},"controllers/RolesController.html":{}}}],["get('user/:userid')@roles('admin",{"_index":2493,"title":{},"body":{"controllers/RolesController.html":{}}}],["get('walk",{"_index":2134,"title":{},"body":{"controllers/QueuesController.html":{}}}],["get()@apioperation({summary",{"_index":1141,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get()@roles('admin",{"_index":2488,"title":{},"body":{"controllers/RolesController.html":{}}}],["get()@useguards(rolesguard)@roles('admin",{"_index":570,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/UsersController.html":{}}}],["getaccountlockout(identifier",{"_index":1446,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["getallapplicationfiles",{"_index":1131,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["getallapplicationfiles(id",{"_index":1145,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["getallapplications",{"_index":1132,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["getapplicationfiles",{"_index":1133,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["getapplicationfiles(id",{"_index":1158,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["getappointmentsbydate",{"_index":741,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["getappointmentsbydate(date",{"_index":758,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["getappointmentsbydaterange",{"_index":742,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["getappointmentsbydaterange(startdate",{"_index":760,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["getappointmentsstats",{"_index":743,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["getavailableslots",{"_index":554,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["getavailableslots(@query('date",{"_index":667,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["getavailableslots(date",{"_index":586,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["getbydate",{"_index":555,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["getbydate(@query('date",{"_index":656,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["getbydate(date",{"_index":590,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["getbydaterange",{"_index":556,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["getbydaterange(startdate",{"_index":595,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["getdownloadurl",{"_index":1668,"title":{},"body":{"injectables/MinioService.html":{}}}],["getdownloadurl(objectname",{"_index":1674,"title":{},"body":{"injectables/MinioService.html":{}}}],["getfiledownloadurl",{"_index":1134,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["getfiledownloadurl(fileid",{"_index":1164,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["getfileinfo",{"_index":1730,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["getfileinfo(objectname",{"_index":1738,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["gethello",{"_index":271,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getpresignedurl",{"_index":1731,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["getpresignedurl(objectname",{"_index":1740,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["getprofile",{"_index":2644,"title":{},"body":{"controllers/UsersController.html":{}}}],["getprofile(@request",{"_index":2253,"title":{},"body":{"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["getprofile(req",{"_index":2656,"title":{},"body":{"controllers/UsersController.html":{}}}],["getprofile(userid",{"_index":1537,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["getqueuebyid",{"_index":2126,"title":{},"body":{"controllers/QueuesController.html":{}}}],["getqueuebyid(@param('id",{"_index":2190,"title":{},"body":{"controllers/QueuesController.html":{}}}],["getqueuebyid(id",{"_index":2129,"title":{},"body":{"controllers/QueuesController.html":{}}}],["getr2presignedurl",{"_index":1732,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["getr2presignedurl(objectname",{"_index":1743,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["getrawmany",{"_index":1391,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["getrecentannouncements",{"_index":157,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{}}}],["getrecentannouncements(@query('limit",{"_index":201,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["getrecentannouncements(limit",{"_index":169,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{}}}],["getstats",{"_index":557,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getting",{"_index":838,"title":{"index.html":{}},"body":{"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/MinioService-1.html":{}}}],["gettodaypendingcount",{"_index":2044,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["getuserqueues",{"_index":2127,"title":{},"body":{"controllers/QueuesController.html":{}}}],["getuserqueues(@param('userid",{"_index":2184,"title":{},"body":{"controllers/QueuesController.html":{}}}],["getuserqueues(userid",{"_index":2131,"title":{},"body":{"controllers/QueuesController.html":{}}}],["getuserroles",{"_index":2487,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["getuserroles(@param('userid",{"_index":2499,"title":{},"body":{"controllers/RolesController.html":{}}}],["getuserroles(userid",{"_index":2492,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["getwalkinqueues",{"_index":2128,"title":{},"body":{"controllers/QueuesController.html":{}}}],["global",{"_index":2007,"title":{},"body":{"classes/QueueGateway.html":{}}}],["gradient",{"_index":2303,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["graph",{"_index":2884,"title":{},"body":{"index.html":{}}}],["green",{"_index":2371,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["groupby('role.name",{"_index":1390,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["grow",{"_index":2902,"title":{},"body":{"index.html":{}}}],["guaranteed",{"_index":2384,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["guard",{"_index":2275,"title":{"guards/RolesGuard.html":{}},"body":{"interfaces/RequestWithUser.html":{},"coverage.html":{},"overview.html":{}}}],["guards",{"_index":2501,"title":{},"body":{"guards/RolesGuard.html":{}}}],["guards/jwt",{"_index":2217,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["guards/roles.guard",{"_index":2219,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["handle",{"_index":1361,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["handleconnection",{"_index":1933,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handleconnection(client",{"_index":1947,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handledailyqueuereset",{"_index":2045,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["handledisconnect",{"_index":1934,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handledisconnect(client",{"_index":1952,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlegetqueueposition",{"_index":1935,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlegetqueueposition(client",{"_index":1954,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoincounter",{"_index":1936,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoincounter(client",{"_index":1957,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoinqueue",{"_index":1937,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoinqueue(client",{"_index":1961,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoinqueueupdates",{"_index":1938,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoinqueueupdates(client",{"_index":1964,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handling",{"_index":2079,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["hands",{"_index":2878,"title":{},"body":{"index.html":{}}}],["handy",{"_index":2869,"title":{},"body":{"index.html":{}}}],["happening",{"_index":2280,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["hash",{"_index":1493,"title":{},"body":{"interfaces/LockoutData.html":{},"controllers/UsersController.html":{}}}],["hashed",{"_index":1407,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["hashedpassword",{"_index":1516,"title":{},"body":{"interfaces/LockoutData.html":{},"controllers/UsersController.html":{}}}],["hashing",{"_index":2349,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["haslowercase",{"_index":1652,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["hasnumbers",{"_index":1653,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["hasroleassigned",{"_index":1624,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["hasspecialchars",{"_index":1654,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["hasuppercase",{"_index":1650,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["healthcheck",{"_index":272,"title":{},"body":{"controllers/AppController.html":{}}}],["hello",{"_index":390,"title":{},"body":{"injectables/AppService.html":{}}}],["helmet",{"_index":2781,"title":{},"body":{"dependencies.html":{}}}],["help",{"_index":2882,"title":{},"body":{"index.html":{}}}],["here",{"_index":1602,"title":{},"body":{"interfaces/LockoutData.html":{},"index.html":{}}}],["history",{"_index":1091,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["history.application",{"_index":1092,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["history.entity",{"_index":1105,"title":{},"body":{"entities/DocumentApplication.html":{},"modules/DocumentApplicationsModule.html":{}}}],["history.entity.ts",{"_index":472,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"coverage.html":{}}}],["history.entity.ts:17",{"_index":494,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["history.entity.ts:20",{"_index":488,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["history.entity.ts:23",{"_index":498,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["history.entity.ts:26",{"_index":496,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["history.entity.ts:29",{"_index":500,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["history.entity.ts:32",{"_index":493,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["history.entity.ts:35",{"_index":491,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["history.entity.ts:43",{"_index":485,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["holder",{"_index":718,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"interfaces/RequestWithUser.html":{}}}],["host",{"_index":321,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["hour",{"_index":870,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["hours",{"_index":2403,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["http://localhost:5173",{"_index":1980,"title":{},"body":{"classes/QueueGateway.html":{}}}],["httpcode",{"_index":613,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["httpcode(httpstatus.no_content",{"_index":693,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["https://nestjs.com",{"_index":2915,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":614,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["id",{"_index":36,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"entities/OTP.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{}}}],["identifier",{"_index":1463,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["identifier.tolowercase",{"_index":1447,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["ids",{"_index":42,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["ignoreexpiration",{"_index":917,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["iii",{"_index":75,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["iii)'})@isoptional()@isstring",{"_index":1053,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ildefonso",{"_index":53,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["image",{"_index":118,"title":{},"body":{"entities/Announcement.html":{},"classes/CreateAnnouncementDto.html":{}}}],["implementation",{"_index":2365,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["implements",{"_index":1751,"title":{},"body":{"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["import",{"_index":87,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"classes/ResetPasswordDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{}}}],["imports",{"_index":229,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}}}],["in(roleids",{"_index":2536,"title":{},"body":{"injectables/RolesService.html":{}}}],["inactive",{"_index":949,"title":{},"body":{"entities/Counter.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"miscellaneous/enumerations.html":{}}}],["inactiveusers",{"_index":1307,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["include",{"_index":1231,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["included",{"_index":2375,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["includeuser",{"_index":575,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{}}}],["including",{"_index":2265,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["index",{"_index":15,"title":{"index.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"classes/ResetPasswordDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["index(['applicationid",{"_index":506,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentFile.html":{}}}],["index(['applicationtype",{"_index":1124,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["index(['changedat",{"_index":507,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["index(['createdat",{"_index":1126,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["index(['documentcategory",{"_index":1292,"title":{},"body":{"entities/DocumentFile.html":{}}}],["index(['status",{"_index":1125,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["index(['userid",{"_index":1123,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"classes/ResetPasswordDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{},"miscellaneous/enumerations.html":{}}}],["information",{"_index":97,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"index.html":{}}}],["infrastructure",{"_index":2866,"title":{},"body":{"index.html":{}}}],["inherited",{"_index":55,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["initial",{"_index":998,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["initiated",{"_index":2341,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["initiates",{"_index":2330,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["inject",{"_index":318,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/QueueGateway.html":{}}}],["inject(forwardref",{"_index":1987,"title":{},"body":{"classes/QueueGateway.html":{}}}],["injectable",{"_index":231,"title":{"injectables/AnnouncementService.html":{},"injectables/AppService.html":{},"injectables/AppointmentService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"injectables/QueueSchedulerService.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AnnouncementService.html":{},"injectables/AppService.html":{},"injectables/AppointmentService.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":232,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppService.html":{},"injectables/AppointmentService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"injectables/QueueSchedulerService.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":248,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/OTPService.html":{},"injectables/QueueSchedulerService.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["injectrepository(announcement",{"_index":249,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["injectrepository(appointment",{"_index":773,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["injectrepository(otp",{"_index":1828,"title":{},"body":{"injectables/OTPService.html":{}}}],["injectrepository(queue",{"_index":2066,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["injectrepository(role",{"_index":2526,"title":{},"body":{"injectables/RolesService.html":{}}}],["injectrepository(user",{"_index":1315,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["inline",{"_index":1786,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["input",{"_index":2267,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["install",{"_index":2859,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":2831,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":1580,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["instructions",{"_index":2338,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["insufficient",{"_index":2270,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["integration",{"_index":2359,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["interact",{"_index":2885,"title":{},"body":{"index.html":{}}}],["interface",{"_index":897,"title":{"interfaces/AuthenticatedUser.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"interfaces/UserStats.html":{}},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["interfaces",{"_index":898,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"interfaces/UserStats.html":{},"overview.html":{}}}],["internally",{"_index":2336,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["intervals",{"_index":832,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["invalid",{"_index":688,"title":{},"body":{"controllers/AppointmentController.html":{},"interfaces/RequestWithUser.html":{}}}],["invalidate",{"_index":1829,"title":{},"body":{"injectables/OTPService.html":{}}}],["invalidated",{"_index":2298,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["inversejoincolumn",{"_index":2591,"title":{},"body":{"entities/User.html":{}}}],["is_active",{"_index":2580,"title":{},"body":{"entities/User.html":{}}}],["is_guest",{"_index":1908,"title":{},"body":{"entities/QueueDetails.html":{}}}],["isactive",{"_index":119,"title":{},"body":{"entities/Announcement.html":{},"injectables/AnnouncementService.html":{},"classes/CreateAnnouncementDto.html":{},"interfaces/FindAllOptions.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["isarray",{"_index":92,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["isauthorized",{"_index":1593,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["isboolean",{"_index":962,"title":{},"body":{"classes/CreateAnnouncementDto.html":{},"classes/CreateQueueDto.html":{},"classes/UpdateUserStatusDto.html":{}}}],["isboolean()@isoptional",{"_index":1021,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["isdatestring",{"_index":735,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"classes/CreateAppointmentDto.html":{}}}],["isemail",{"_index":88,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/ApplicationNotificationDto.html":{},"classes/AppointmentNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/QueueNotificationDto.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateUserDto.html":{},"classes/VerifyOtpDto.html":{}}}],["isenum",{"_index":979,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{}}}],["isenum(applicationstatus",{"_index":2554,"title":{},"body":{"classes/UpdateDocumentApplicationDto.html":{}}}],["isenum(applicationtype",{"_index":1004,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["isenum(appointmentstatus",{"_index":980,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["isenum(queuestatus",{"_index":2560,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["isenum(queuestatus)@isoptional",{"_index":2558,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["isglobal",{"_index":316,"title":{},"body":{"modules/AppModule.html":{}}}],["isguest",{"_index":514,"title":{},"body":{"entities/Appointment.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{}}}],["islocked",{"_index":1466,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["isnan(number(payload.sub",{"_index":923,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["isnan(queueid",{"_index":2192,"title":{},"body":{"controllers/QueuesController.html":{}}}],["isnan(userid",{"_index":1538,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["isnotempty",{"_index":734,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["isnotempty()@isdatestring",{"_index":967,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["isnotempty()@isstring",{"_index":965,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["isnumber",{"_index":91,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/QueueNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{}}}],["isobject",{"_index":1001,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["isolation",{"_index":2325,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["isoptional",{"_index":89,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/ApplicationNotificationDto.html":{},"classes/AppointmentNotificationDto.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/QueueNotificationDto.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"classes/VerifyOtpDto.html":{}}}],["isoptional()@isboolean",{"_index":959,"title":{},"body":{"classes/CreateAnnouncementDto.html":{}}}],["isoptional()@isenum(appointmentstatus",{"_index":976,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["isoptional()@isstring",{"_index":954,"title":{},"body":{"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{}}}],["isotpvalid",{"_index":2246,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["ispasswordvalid",{"_index":1496,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["isprivileged",{"_index":1238,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["isresetinprogress",{"_index":2043,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["isstring",{"_index":90,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/ApplicationNotificationDto.html":{},"classes/AppointmentNotificationDto.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{},"classes/QueueNotificationDto.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"classes/VerifyOtpDto.html":{}}}],["isstring()@isnotempty",{"_index":956,"title":{},"body":{"classes/CreateAnnouncementDto.html":{},"classes/CreateQueueDto.html":{}}}],["isstring()@isoptional",{"_index":1017,"title":{},"body":{"classes/CreateQueueDto.html":{},"classes/UpdateQueueDto.html":{}}}],["isvalid",{"_index":771,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["isvalid(date",{"_index":777,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["isvalid(parseddate",{"_index":819,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["isvalidemail(email",{"_index":1533,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["items",{"_index":1862,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UserQueryDto.html":{}}}],["job",{"_index":2895,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":2897,"title":{},"body":{"index.html":{}}}],["john",{"_index":103,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{}}}],["john'})@isstring()@isnotempty",{"_index":2201,"title":{},"body":{"classes/RegisterDto.html":{}}}],["john'})@isstring()@isoptional",{"_index":64,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["john.doe@example.com",{"_index":1038,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["john_doe",{"_index":101,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["john_doe'})@isstring()@isnotempty",{"_index":2212,"title":{},"body":{"classes/RegisterDto.html":{}}}],["john_doe'})@isstring()@isoptional",{"_index":85,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["johndoe",{"_index":1061,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["join",{"_index":2908,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":502,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["joined",{"_index":2000,"title":{},"body":{"classes/QueueGateway.html":{}}}],["jointable",{"_index":2595,"title":{},"body":{"entities/User.html":{}}}],["jpeg",{"_index":1214,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["jr",{"_index":74,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["jr.'})@isstring()@isoptional",{"_index":76,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["json",{"_index":1083,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["juan",{"_index":1005,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["jwt",{"_index":890,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":886,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{}}}],["jwtauthguard",{"_index":618,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":915,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":880,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":891,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":905,"title":{"interfaces/JwtPayload.html":{}},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["jwtservice",{"_index":1426,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["jwtstrategy",{"_index":877,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":2912,"title":{},"body":{"index.html":{}}}],["keep",{"_index":2598,"title":{},"body":{"entities/User.html":{}}}],["key",{"_index":371,"title":{},"body":{"modules/AppModule.html":{},"interfaces/LockoutData.html":{},"injectables/OTPService.html":{},"index.html":{}}}],["last",{"_index":66,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["last_modified_by",{"_index":1087,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["last_name",{"_index":1910,"title":{},"body":{"entities/QueueDetails.html":{},"entities/User.html":{}}}],["lastattempt",{"_index":1424,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["lastmodifiedby",{"_index":1070,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["lastname",{"_index":24,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Appointment.html":{},"classes/AppointmentNotificationDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"entities/QueueDetails.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["lastname}${nameextension",{"_index":1403,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["latest",{"_index":1160,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["learn",{"_index":2871,"title":{},"body":{"index.html":{}}}],["leftjoin('user.roles",{"_index":1387,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["leftjoinandselect('user.defaultrole",{"_index":1321,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["leftjoinandselect('user.roles",{"_index":1323,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["legacy",{"_index":2139,"title":{},"body":{"controllers/QueuesController.html":{}}}],["legend",{"_index":213,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":127,"title":{},"body":{"entities/Announcement.html":{},"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"classes/ForgotPasswordDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["length(6",{"_index":432,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["length(8",{"_index":451,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["lessthan",{"_index":1825,"title":{},"body":{"injectables/OTPService.html":{}}}],["lessthan(new",{"_index":1858,"title":{},"body":{"injectables/OTPService.html":{}}}],["letter",{"_index":1651,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["lgu",{"_index":2251,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["license",{"_index":1110,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"properties.html":{}}}],["licensed",{"_index":2900,"title":{},"body":{"index.html":{}}}],["limit",{"_index":173,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/UserQueryDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["limiting",{"_index":2299,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["limits",{"_index":1206,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["line",{"_index":1440,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["linkedin",{"_index":2894,"title":{},"body":{"index.html":{}}}],["listfiles",{"_index":1733,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["listfiles(prefix",{"_index":1745,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["literal",{"_index":708,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser-2.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{}}}],["localhost",{"_index":1694,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"miscellaneous/variables.html":{}}}],["lock",{"_index":1453,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["locked",{"_index":1462,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["lockeduntil",{"_index":1425,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["lockout",{"_index":1473,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["lockoutdata",{"_index":1421,"title":{"interfaces/LockoutData.html":{}},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["lockoutdata.attempts",{"_index":2435,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["lockoutdata.lockeduntil",{"_index":1480,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["lockoutdata.lockeduntil.gettime",{"_index":1482,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["lockoutdata?.attempts",{"_index":2436,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["lockoutdata?.lockeduntil",{"_index":1479,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["log",{"_index":1224,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"injectables/MinioService-1.html":{},"injectables/QueueSchedulerService.html":{}}}],["logdailystatistics",{"_index":2046,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["logdailystatistics(startofday",{"_index":2058,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["logger",{"_index":338,"title":{},"body":{"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["logger(appointmentcontroller.name",{"_index":637,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["logger(appointmentservice.name",{"_index":767,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["logger(authcontroller.name",{"_index":2229,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["logger(authservice.name",{"_index":1431,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["logger(documentapplicationscontroller.name",{"_index":1202,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["logger(minioservice.name",{"_index":1678,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["logger(queuegateway.name",{"_index":1944,"title":{},"body":{"classes/QueueGateway.html":{}}}],["logger(queueschedulerservice.name",{"_index":2063,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["logger(queuescontroller.name",{"_index":2137,"title":{},"body":{"controllers/QueuesController.html":{}}}],["logger(userscontroller.name",{"_index":2677,"title":{},"body":{"controllers/UsersController.html":{}}}],["logger(usersservice.name",{"_index":1314,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["logging",{"_index":336,"title":{},"body":{"modules/AppModule.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"miscellaneous/variables.html":{}}}],["login",{"_index":1657,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{}}}],["login(@body",{"_index":2235,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["login(logindto",{"_index":1476,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["logindto",{"_index":1427,"title":{"classes/LoginDto.html":{}},"body":{"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["logindto.emailorusername",{"_index":1435,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["logindto.emailorusername.tolowercase",{"_index":1477,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["logindto.password",{"_index":1495,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["long",{"_index":452,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["long'})@matches(/^(?=.*[a",{"_index":2471,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["looking",{"_index":2848,"title":{},"body":{"index.html":{}}}],["loop",{"_index":2891,"title":{},"body":{"index.html":{}}}],["loss",{"_index":359,"title":{},"body":{"modules/AppModule.html":{}}}],["lowercase",{"_index":457,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["main",{"_index":50,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["maintain",{"_index":1525,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["make",{"_index":2273,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["makes",{"_index":2853,"title":{},"body":{"index.html":{}}}],["managing",{"_index":2865,"title":{},"body":{"index.html":{}}}],["manila",{"_index":1012,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["manual",{"_index":2121,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["manualdailyreset",{"_index":2047,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["manytomany",{"_index":2483,"title":{},"body":{"entities/Role.html":{},"entities/User.html":{}}}],["manytomany(undefined",{"_index":2480,"title":{},"body":{"entities/Role.html":{}}}],["manytomany(undefined)@jointable({name",{"_index":2589,"title":{},"body":{"entities/User.html":{}}}],["manytoone",{"_index":501,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["manytoone(undefined",{"_index":479,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["map",{"_index":1433,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["mark",{"_index":1832,"title":{},"body":{"injectables/OTPService.html":{},"injectables/QueueSchedulerService.html":{}}}],["marked",{"_index":2322,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["marks",{"_index":2320,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["marriage",{"_index":1108,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["marriage_certificate",{"_index":1107,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["marriage_license",{"_index":1109,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["match",{"_index":1985,"title":{},"body":{"classes/QueueGateway.html":{}}}],["matches",{"_index":418,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["matches(/^(?=.*[a",{"_index":453,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["matches(/^[0",{"_index":435,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["matching",{"_index":111,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"classes/ResetPasswordDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.ceil",{"_index":1481,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["math.ceil((current.lockeduntil.gettime",{"_index":1468,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["math.ceil(timeremaining",{"_index":1484,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["math.ceil(total",{"_index":1343,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["mau",{"_index":2850,"title":{},"body":{"index.html":{}}}],["maxlength",{"_index":428,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["meet",{"_index":443,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["meets",{"_index":2348,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["message",{"_index":408,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/LockoutData.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{}}}],["metadata",{"_index":1773,"title":{},"body":{"injectables/MinioService-1.html":{},"dependencies.html":{}}}],["method",{"_index":1346,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["methods",{"_index":153,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["middle",{"_index":69,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["middle_initial",{"_index":1912,"title":{},"body":{"entities/QueueDetails.html":{}}}],["middle_name",{"_index":2583,"title":{},"body":{"entities/User.html":{}}}],["middleinitial",{"_index":515,"title":{},"body":{"entities/Appointment.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"controllers/QueuesController.html":{}}}],["middlename",{"_index":25,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["migrationsrun",{"_index":363,"title":{},"body":{"modules/AppModule.html":{}}}],["miguel",{"_index":1044,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["min",{"_index":78,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{}}}],["min(1",{"_index":2613,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["minimum",{"_index":1055,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UserQueryDto.html":{}}}],["minio",{"_index":1682,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"dependencies.html":{}}}],["minio.client",{"_index":1680,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["minio.client(minioconfig",{"_index":1707,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["minio_access_key",{"_index":1761,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["minio_bucket_name",{"_index":1763,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["minio_endpoint",{"_index":1753,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["minio_object_name",{"_index":1287,"title":{},"body":{"entities/DocumentFile.html":{}}}],["minio_secret_key",{"_index":1762,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["minioadmin",{"_index":1697,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["minioadmin123",{"_index":1699,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["minioclient",{"_index":1666,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["minioconfig",{"_index":1687,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["minioconfig.port",{"_index":1703,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["minioobjectname",{"_index":1270,"title":{},"body":{"entities/DocumentFile.html":{}}}],["minioservice",{"_index":1261,"title":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}},"body":{"modules/DocumentApplicationsModule.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"coverage.html":{},"overview.html":{}}}],["minlength",{"_index":82,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/ApplicationNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateUserDto.html":{},"classes/VerifyOtpDto.html":{}}}],["minlength(6",{"_index":1065,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(8",{"_index":102,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["minute",{"_index":871,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["minutes",{"_index":1455,"title":{},"body":{"interfaces/LockoutData.html":{},"injectables/OTPService.html":{},"classes/QueueNotificationDto.html":{},"interfaces/RequestWithUser.html":{}}}],["minutesremaining",{"_index":1483,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["miscellaneous",{"_index":2803,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":2310,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["mit",{"_index":2899,"title":{},"body":{"index.html":{}}}],["mm",{"_index":859,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["mode",{"_index":2362,"title":{},"body":{"interfaces/RequestWithUser.html":{},"index.html":{}}}],["module",{"_index":209,"title":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"interfaces/FindAllOptions.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["modules",{"_index":211,"title":{"modules.html":{}},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/announcement/announcement.module",{"_index":307,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/appointment/appointment.module",{"_index":306,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/document",{"_index":308,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/queue/queue.module",{"_index":305,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":2847,"title":{},"body":{"index.html":{}}}],["multer",{"_index":2784,"title":{},"body":{"dependencies.html":{}}}],["multiple",{"_index":1486,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["municipal",{"_index":2815,"title":{},"body":{"index.html":{}}}],["mysql",{"_index":320,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["mysql2",{"_index":2786,"title":{},"body":{"dependencies.html":{}}}],["myśliwiec",{"_index":2913,"title":{},"body":{"index.html":{}}}],["name",{"_index":63,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["name'})@isstring()@isnotempty",{"_index":1041,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["name_extension",{"_index":2586,"title":{},"body":{"entities/User.html":{}}}],["namecomponents",{"_index":1553,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["namecomponents.firstname",{"_index":1559,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["namecomponents.lastname",{"_index":1561,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["namecomponents.middlename",{"_index":1560,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["namecomponents.nameextension",{"_index":1562,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["nameextension",{"_index":26,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["namespace",{"_index":1984,"title":{},"body":{"classes/QueueGateway.html":{}}}],["need",{"_index":1192,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"modules/QueueModule.html":{},"index.html":{}}}],["nest",{"_index":2826,"title":{},"body":{"index.html":{}}}],["nested",{"_index":2158,"title":{},"body":{"controllers/QueuesController.html":{}}}],["nestframework",{"_index":2917,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":909,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"index.html":{}}}],["nestjs/common",{"_index":188,"title":{},"body":{"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":296,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":2455,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":881,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/LockoutData.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":2544,"title":{},"body":{"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["nestjs/passport",{"_index":883,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1194,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"dependencies.html":{}}}],["nestjs/schedule",{"_index":298,"title":{},"body":{"modules/AppModule.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":95,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/ApplicationNotificationDto.html":{},"controllers/AppointmentController.html":{},"classes/AppointmentNotificationDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentApplicationsController.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/QueueNotificationDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"classes/VerifyOtpDto.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":226,"title":{},"body":{"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/OTPService.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":1973,"title":{},"body":{"classes/QueueGateway.html":{},"dependencies.html":{}}}],["new",{"_index":260,"title":{},"body":{"injectables/AnnouncementService.html":{},"classes/ApplicationNotificationDto.html":{},"controllers/AppointmentController.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"injectables/RolesService.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{}}}],["new_status",{"_index":495,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["newdate",{"_index":797,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["newfirstname",{"_index":1367,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["newlastname",{"_index":1370,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["newlastname}${newnameextension",{"_index":1374,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["newmiddlename",{"_index":1368,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["newnameextension",{"_index":1371,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["newpassword",{"_index":459,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["newsecure123",{"_index":446,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["newstatus",{"_index":475,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"interfaces/RequestWithUser.html":{}}}],["newtime",{"_index":799,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["next",{"_index":1439,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["node.js",{"_index":2820,"title":{},"body":{"index.html":{}}}],["node_env=development",{"_index":2360,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["nodemailer",{"_index":2788,"title":{},"body":{"dependencies.html":{}}}],["notfoundexception",{"_index":247,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["notfoundexception(`announcement",{"_index":261,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["notfoundexception(`appointment",{"_index":792,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["notfoundexception(`role",{"_index":2529,"title":{},"body":{"injectables/RolesService.html":{}}}],["notfoundexception(`user",{"_index":1345,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["notification",{"_index":731,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{}}}],["notification.dto",{"_index":2225,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["notification.dto.ts",{"_index":705,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"classes/QueueNotificationDto.html":{},"coverage.html":{}}}],["notification.dto.ts:10",{"_index":2028,"title":{},"body":{"classes/QueueNotificationDto.html":{}}}],["notification.dto.ts:17",{"_index":720,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"classes/QueueNotificationDto.html":{}}}],["notification.dto.ts:25",{"_index":717,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"classes/QueueNotificationDto.html":{}}}],["notification.dto.ts:34",{"_index":733,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"classes/QueueNotificationDto.html":{}}}],["notification.dto.ts:42",{"_index":727,"title":{},"body":{"classes/AppointmentNotificationDto.html":{}}}],["notification.dto.ts:43",{"_index":2031,"title":{},"body":{"classes/QueueNotificationDto.html":{}}}],["notification.dto.ts:50",{"_index":724,"title":{},"body":{"classes/AppointmentNotificationDto.html":{}}}],["notification.dto.ts:52",{"_index":2038,"title":{},"body":{"classes/QueueNotificationDto.html":{}}}],["notification.dto.ts:57",{"_index":712,"title":{},"body":{"classes/AppointmentNotificationDto.html":{}}}],["notification.dto.ts:61",{"_index":2033,"title":{},"body":{"classes/QueueNotificationDto.html":{}}}],["notificationdto",{"_index":2379,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["notifications",{"_index":1234,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["notify",{"_index":2099,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["notifycounterupdate",{"_index":1939,"title":{},"body":{"classes/QueueGateway.html":{}}}],["notifycounterupdate(counterid",{"_index":1967,"title":{},"body":{"classes/QueueGateway.html":{}}}],["notifyqueueupdate",{"_index":1940,"title":{},"body":{"classes/QueueGateway.html":{}}}],["notifyqueueupdate(queueid",{"_index":1969,"title":{},"body":{"classes/QueueGateway.html":{}}}],["now",{"_index":2383,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["now_serving",{"_index":2037,"title":{},"body":{"classes/QueueNotificationDto.html":{},"interfaces/RequestWithUser.html":{}}}],["npm",{"_index":2830,"title":{},"body":{"index.html":{}}}],["null",{"_index":935,"title":{},"body":{"entities/Counter.html":{},"interfaces/LockoutData.html":{},"entities/QueueDetails.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["null/undefined",{"_index":2166,"title":{},"body":{"controllers/QueuesController.html":{}}}],["nullable",{"_index":135,"title":{},"body":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["number",{"_index":31,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"classes/QueueNotificationDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["number'})@isoptional()@isstring",{"_index":1032,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["number(payload.sub",{"_index":926,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["number(req.user.id",{"_index":2262,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["number(targetuserid",{"_index":2287,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["number/:number",{"_index":579,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["number/id",{"_index":713,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"interfaces/RequestWithUser.html":{}}}],["numbers",{"_index":437,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["obj",{"_index":1795,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["object",{"_index":710,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["object.assign(announcement",{"_index":264,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["object.assign(appointment",{"_index":803,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["object.values(appointmentstatus).includes(status",{"_index":687,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["object.values(appointmentstatus).join",{"_index":690,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["objectname",{"_index":1673,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["occurred",{"_index":1636,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["of(id",{"_index":1380,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["offer",{"_index":2896,"title":{},"body":{"index.html":{}}}],["official",{"_index":2851,"title":{},"body":{"index.html":{}}}],["ok",{"_index":280,"title":{},"body":{"controllers/AppController.html":{}}}],["old_status",{"_index":497,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["oldstatus",{"_index":476,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["omit",{"_index":1312,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["on'].includes(usesslvalue",{"_index":1760,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["ondelete",{"_index":481,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentFile.html":{},"entities/QueueDetails.html":{}}}],["one",{"_index":689,"title":{},"body":{"controllers/AppointmentController.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["ones",{"_index":1377,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["onetomany",{"_index":1103,"title":{},"body":{"entities/DocumentApplication.html":{},"entities/Queue.html":{}}}],["onetomany(undefined",{"_index":1079,"title":{},"body":{"entities/DocumentApplication.html":{},"entities/Queue.html":{}}}],["onetoone",{"_index":946,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{}}}],["onetoone(undefined",{"_index":936,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{}}}],["ongatewayconnection",{"_index":1930,"title":{},"body":{"classes/QueueGateway.html":{}}}],["ongatewaydisconnect",{"_index":1931,"title":{},"body":{"classes/QueueGateway.html":{}}}],["only)'})@apiresponse({status",{"_index":1149,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["onmoduleinit",{"_index":1734,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["open",{"_index":2901,"title":{},"body":{"index.html":{}}}],["operation",{"_index":2390,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["operator",{"_index":2531,"title":{},"body":{"injectables/RolesService.html":{}}}],["optional",{"_index":17,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser-2.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/SendOtpDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{},"miscellaneous/functions.html":{}}}],["optional)'})@isoptional()@isstring",{"_index":1045,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["optionally",{"_index":2357,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["options",{"_index":752,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["options?.relations",{"_index":789,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["orange",{"_index":2369,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["order",{"_index":256,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["origin",{"_index":1978,"title":{},"body":{"classes/QueueGateway.html":{}}}],["original",{"_index":1718,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["otp",{"_index":311,"title":{"entities/OTP.html":{}},"body":{"modules/AppModule.html":{},"classes/ApplicationNotificationDto.html":{},"modules/AuthModule.html":{},"classes/ForgotPasswordDto.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{}}}],["otpentity",{"_index":1848,"title":{},"body":{"injectables/OTPService.html":{}}}],["otpentity.expiresat",{"_index":1855,"title":{},"body":{"injectables/OTPService.html":{}}}],["otpentity.verified",{"_index":1856,"title":{},"body":{"injectables/OTPService.html":{}}}],["otplength",{"_index":1834,"title":{},"body":{"injectables/OTPService.html":{}}}],["otprepository",{"_index":1819,"title":{},"body":{"injectables/OTPService.html":{}}}],["otps",{"_index":1830,"title":{},"body":{"injectables/OTPService.html":{},"interfaces/RequestWithUser.html":{}}}],["otpservice",{"_index":292,"title":{"injectables/OTPService.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/OTPService.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{},"overview.html":{}}}],["out",{"_index":223,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["outer",{"_index":1608,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["overrideconsoleinproduction",{"_index":2742,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["overview",{"_index":2921,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":676,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["package",{"_index":2760,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":1295,"title":{},"body":{"interfaces/FindAllOptions.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/UserQueryDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["pages",{"_index":1866,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{}}}],["paginatedusersresponsedto",{"_index":1859,"title":{"classes/PaginatedUsersResponseDto.html":{}},"body":{"classes/PaginatedUsersResponseDto.html":{},"coverage.html":{}}}],["param",{"_index":184,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["param('fileid",{"_index":1244,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["param('id",{"_index":205,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["param('userid",{"_index":2277,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["parameter",{"_index":658,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["parameters",{"_index":163,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["parse",{"_index":816,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["parseddate",{"_index":817,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["parseint",{"_index":1844,"title":{},"body":{"injectables/OTPService.html":{}}}],["parseint(id",{"_index":2191,"title":{},"body":{"controllers/QueuesController.html":{}}}],["parseint(process.env.db_port",{"_index":2932,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseint(process.env.minio_port",{"_index":1704,"title":{},"body":{"injectables/MinioService.html":{}}}],["parseint(stat.count",{"_index":1394,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["parseint(this.configservice.get('otp_length",{"_index":1835,"title":{},"body":{"injectables/OTPService.html":{}}}],["parseintpipe",{"_index":186,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["parseiso",{"_index":770,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["parseiso(createappointmentdto.appointmentdate",{"_index":776,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["parseiso(date",{"_index":818,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["part",{"_index":2888,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":2543,"title":{},"body":{"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["partialtype(createannouncementdto",{"_index":2542,"title":{},"body":{"classes/UpdateAnnouncementDto.html":{}}}],["partialtype(createappointmentdto",{"_index":2547,"title":{},"body":{"classes/UpdateAppointmentDto.html":{}}}],["parts",{"_index":1551,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["passport",{"_index":904,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":882,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":888,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":901,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":910,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["password",{"_index":27,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"modules/AppModule.html":{},"classes/ApplicationNotificationDto.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{},"miscellaneous/variables.html":{}}}],["password.length",{"_index":1648,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["password123",{"_index":81,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["password123'})@isstring()@isnotempty",{"_index":1662,"title":{},"body":{"classes/LoginDto.html":{}}}],["password_reset",{"_index":423,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"entities/OTP.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["passwords",{"_index":1334,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["passwordvalidation",{"_index":1510,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["passwordvalidation.isvalid",{"_index":1512,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["past",{"_index":785,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["patch",{"_index":183,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["patch(':id",{"_index":180,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["patch(':id')@apioperation({summary",{"_index":606,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{}}}],["patch(':id')@useguards(rolesguard)@roles('admin",{"_index":2664,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(':id/status",{"_index":685,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["patch(':id/status')@roles('admin",{"_index":1179,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["patch(':id/status')@useguards(jwtauthguard",{"_index":609,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["patch(':id/status')@useguards(rolesguard)@roles('admin",{"_index":2667,"title":{},"body":{"controllers/UsersController.html":{}}}],["path",{"_index":2141,"title":{},"body":{"controllers/QueuesController.html":{}}}],["pathstyle",{"_index":1692,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["pattern",{"_index":429,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["payload",{"_index":921,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{}}}],["payload.roles.map((role",{"_index":929,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":922,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["pdf",{"_index":1216,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["pending",{"_index":464,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"entities/Appointment.html":{},"injectables/AppointmentService.html":{},"entities/DocumentApplication.html":{},"classes/ForgotPasswordDto.html":{},"entities/Queue.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{},"miscellaneous/enumerations.html":{}}}],["pendingcount",{"_index":846,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["pendingqueues",{"_index":2089,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["pendingqueues.length",{"_index":2092,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["pendingqueues.map((queue",{"_index":2096,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["pendingqueueswithdetails",{"_index":2148,"title":{},"body":{"controllers/QueuesController.html":{}}}],["pendingqueueswithdetails.length",{"_index":2153,"title":{},"body":{"controllers/QueuesController.html":{}}}],["per",{"_index":1161,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/UserQueryDto.html":{}}}],["perform",{"_index":1599,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["permission",{"_index":682,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["permissions",{"_index":1587,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["permit",{"_index":1115,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["phone_number",{"_index":1914,"title":{},"body":{"entities/QueueDetails.html":{}}}],["phonenumber",{"_index":516,"title":{},"body":{"entities/Appointment.html":{},"classes/AppointmentNotificationDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["pickup",{"_index":467,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"entities/DocumentApplication.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/VerifyOtpDto.html":{},"miscellaneous/enumerations.html":{}}}],["platform",{"_index":2818,"title":{},"body":{"index.html":{}}}],["please",{"_index":409,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/QueueNotificationDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{},"index.html":{}}}],["pm",{"_index":830,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueSchedulerService.html":{}}}],["png",{"_index":1215,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["pool",{"_index":349,"title":{},"body":{"modules/AppModule.html":{}}}],["port",{"_index":323,"title":{},"body":{"modules/AppModule.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"miscellaneous/variables.html":{}}}],["portdisplay",{"_index":1764,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["position",{"_index":1996,"title":{},"body":{"classes/QueueGateway.html":{},"classes/QueueNotificationDto.html":{},"interfaces/RequestWithUser.html":{}}}],["position_alert",{"_index":2039,"title":{},"body":{"classes/QueueNotificationDto.html":{},"interfaces/RequestWithUser.html":{}}}],["possible",{"_index":2845,"title":{},"body":{"index.html":{}}}],["post",{"_index":161,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"classes/QueueGateway.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["post(':id/files",{"_index":1204,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["post(':id/files')@useinterceptors(undefined)@apiconsumes('multipart/form",{"_index":1184,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["post('admin",{"_index":2646,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('admin/update",{"_index":2271,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["post('check",{"_index":2431,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["post('clear",{"_index":2441,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["post('forgot",{"_index":2343,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["post('login",{"_index":2234,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["post('notifications/application",{"_index":2406,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["post('notifications/appointment",{"_index":2394,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["post('record",{"_index":2437,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["post('register",{"_index":2241,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["post('reset",{"_index":2351,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["post('send",{"_index":2312,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["post('test",{"_index":2363,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["post('update",{"_index":2259,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["post('verify",{"_index":2327,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["post()@apioperation({summary",{"_index":562,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{}}}],["potential",{"_index":2165,"title":{},"body":{"controllers/QueuesController.html":{}}}],["practice",{"_index":2333,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["prefix",{"_index":151,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/MinioService-1.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["presigned",{"_index":1779,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["prevent",{"_index":357,"title":{},"body":{"modules/AppModule.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{}}}],["previous",{"_index":2297,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["previousstatus",{"_index":2419,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["primarycolumn",{"_index":1102,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["primarycolumn({length",{"_index":1085,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["primarygeneratedcolumn",{"_index":132,"title":{},"body":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentFile.html":{},"entities/OTP.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["private",{"_index":250,"title":{},"body":{"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["privileged",{"_index":1147,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["proceed",{"_index":2032,"title":{},"body":{"classes/QueueNotificationDto.html":{},"interfaces/RequestWithUser.html":{}}}],["process",{"_index":2078,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{}}}],["process.env.db_host",{"_index":2931,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_name",{"_index":2937,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_password",{"_index":2936,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_username",{"_index":2934,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.minio_access_key",{"_index":1696,"title":{},"body":{"injectables/MinioService.html":{}}}],["process.env.minio_bucket_name",{"_index":1709,"title":{},"body":{"injectables/MinioService.html":{}}}],["process.env.minio_enable_port",{"_index":1684,"title":{},"body":{"injectables/MinioService.html":{}}}],["process.env.minio_endpoint",{"_index":1693,"title":{},"body":{"injectables/MinioService.html":{}}}],["process.env.minio_secret_key",{"_index":1698,"title":{},"body":{"injectables/MinioService.html":{}}}],["process.env.minio_use_ssl",{"_index":1695,"title":{},"body":{"injectables/MinioService.html":{}}}],["process.env.node_env",{"_index":2366,"title":{},"body":{"interfaces/RequestWithUser.html":{},"miscellaneous/variables.html":{}}}],["process.env.ws_cors_origin",{"_index":1979,"title":{},"body":{"classes/QueueGateway.html":{}}}],["processing",{"_index":1116,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["production",{"_index":345,"title":{},"body":{"modules/AppModule.html":{},"interfaces/RequestWithUser.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["professional",{"_index":2304,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["profile",{"_index":1633,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["profile'})@apiresponse({status",{"_index":2658,"title":{},"body":{"controllers/UsersController.html":{}}}],["progress",{"_index":2075,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["progressive",{"_index":2819,"title":{},"body":{"index.html":{}}}],["project",{"_index":2828,"title":{},"body":{"index.html":{}}}],["promise",{"_index":241,"title":{},"body":{"injectables/AnnouncementService.html":{},"modules/AppModule.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"injectables/QueueSchedulerService.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["promise((resolve",{"_index":1790,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["promise.all",{"_index":851,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{}}}],["propagate",{"_index":2111,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["proper",{"_index":1586,"title":{},"body":{"interfaces/LockoutData.html":{},"injectables/QueueSchedulerService.html":{}}}],["properties",{"_index":16,"title":{"properties.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/JwtPayload.html":{},"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"classes/ResetPasswordDto.html":{},"entities/Role.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{},"properties.html":{}}}],["provide",{"_index":410,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["provided",{"_index":1064,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["provided)'})@isoptional()@isstring",{"_index":1062,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["provided)'})@isstring()@isoptional",{"_index":1050,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["providers",{"_index":216,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["purpose",{"_index":421,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["purposes",{"_index":1852,"title":{},"body":{"injectables/OTPService.html":{},"interfaces/RequestWithUser.html":{}}}],["qrcode",{"_index":2792,"title":{},"body":{"dependencies.html":{}}}],["query",{"_index":187,"title":{},"body":{"controllers/AnnouncementController.html":{},"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["query('end",{"_index":663,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["query('includeuser",{"_index":670,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{}}}],["query('set",{"_index":384,"title":{},"body":{"modules/AppModule.html":{}}}],["query('start",{"_index":662,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["query('status",{"_index":1227,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["query.dto",{"_index":2674,"title":{},"body":{"controllers/UsersController.html":{}}}],["query.dto.ts",{"_index":2603,"title":{},"body":{"classes/UserQueryDto.html":{},"coverage.html":{}}}],["query.dto.ts:15",{"_index":2606,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["query.dto.ts:26",{"_index":2605,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["query.dto.ts:34",{"_index":2611,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["query.dto.ts:42",{"_index":2608,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["querybuilder",{"_index":1318,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["querybuilder.andwhere('roles.name",{"_index":1330,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["querybuilder.getmanyandcount",{"_index":1333,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["querybuilder.orderby('user.createdat",{"_index":1331,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["querybuilder.where",{"_index":1326,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["questions",{"_index":2872,"title":{},"body":{"index.html":{}}}],["queue",{"_index":934,"title":{"entities/Queue.html":{}},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["queue.completedat",{"_index":2172,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queue.controller",{"_index":2017,"title":{},"body":{"modules/QueueModule.html":{}}}],["queue.counter",{"_index":937,"title":{},"body":{"entities/Counter.html":{}}}],["queue.counternumber",{"_index":2170,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queue.createdat",{"_index":2171,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queue.details",{"_index":1916,"title":{},"body":{"entities/QueueDetails.html":{},"controllers/QueuesController.html":{}}}],["queue.details[0",{"_index":2168,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queue.dto.ts",{"_index":1015,"title":{},"body":{"classes/CreateQueueDto.html":{},"classes/UpdateQueueDto.html":{},"coverage.html":{}}}],["queue.dto.ts:11",{"_index":2557,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["queue.dto.ts:13",{"_index":1023,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:17",{"_index":1024,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:21",{"_index":1018,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:25",{"_index":1025,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:29",{"_index":1026,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:33",{"_index":1019,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:37",{"_index":1022,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:5",{"_index":1027,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:7",{"_index":2559,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["queue.dto.ts:9",{"_index":1020,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.entity",{"_index":1926,"title":{},"body":{"entities/QueueDetails.html":{}}}],["queue.estimatedwaittime",{"_index":2173,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queue.gateway",{"_index":2019,"title":{},"body":{"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{}}}],["queue.id",{"_index":2163,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queue.queuenumber",{"_index":2169,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queue.service",{"_index":1975,"title":{},"body":{"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"controllers/QueuesController.html":{}}}],["queue.status",{"_index":2164,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queue/entities/queue.entity",{"_index":947,"title":{},"body":{"entities/Counter.html":{}}}],["queue_id",{"_index":1917,"title":{},"body":{"entities/QueueDetails.html":{}}}],["queue_number",{"_index":1890,"title":{},"body":{"entities/Queue.html":{}}}],["queuecontroller",{"_index":2015,"title":{},"body":{"modules/QueueModule.html":{},"coverage.html":{}}}],["queuedata",{"_index":1994,"title":{},"body":{"classes/QueueGateway.html":{}}}],["queuedetails",{"_index":1884,"title":{"entities/QueueDetails.html":{}},"body":{"entities/Queue.html":{},"entities/QueueDetails.html":{},"modules/QueueModule.html":{},"controllers/QueuesController.html":{},"coverage.html":{}}}],["queuegateway",{"_index":1928,"title":{"classes/QueueGateway.html":{}},"body":{"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"coverage.html":{},"overview.html":{}}}],["queueid",{"_index":1901,"title":{},"body":{"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"controllers/QueuesController.html":{}}}],["queuemodule",{"_index":288,"title":{"modules/QueueModule.html":{}},"body":{"modules/AppModule.html":{},"modules/QueueModule.html":{},"modules.html":{},"overview.html":{}}}],["queuenotificationdto",{"_index":2024,"title":{"classes/QueueNotificationDto.html":{}},"body":{"classes/QueueNotificationDto.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["queuenumber",{"_index":1876,"title":{},"body":{"entities/Queue.html":{},"classes/QueueNotificationDto.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["queuerepository",{"_index":2050,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["queues",{"_index":2086,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{}}}],["queues.controller",{"_index":2018,"title":{},"body":{"modules/QueueModule.html":{}}}],["queues/user",{"_index":2185,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queues/walk",{"_index":2144,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queueschedulerservice",{"_index":2013,"title":{"injectables/QueueSchedulerService.html":{}},"body":{"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"coverage.html":{},"overview.html":{}}}],["queuescontroller",{"_index":2016,"title":{"controllers/QueuesController.html":{}},"body":{"modules/QueueModule.html":{},"controllers/QueuesController.html":{},"coverage.html":{}}}],["queueservice",{"_index":1942,"title":{},"body":{"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"controllers/QueuesController.html":{},"coverage.html":{},"overview.html":{}}}],["queuestatus",{"_index":1892,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"classes/UpdateQueueDto.html":{},"miscellaneous/enumerations.html":{}}}],["queuestatus.cancelled",{"_index":2097,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["queuestatus.completed",{"_index":2116,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["queuestatus.pending",{"_index":1898,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueSchedulerService.html":{}}}],["queuestatus.serving",{"_index":2105,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["r2",{"_index":1700,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["range",{"_index":661,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["range')@useguards(jwtauthguard",{"_index":598,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["rate",{"_index":2119,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{}}}],["re",{"_index":1578,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["read",{"_index":2909,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":196,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppController.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ready",{"_index":466,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"entities/DocumentApplication.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/VerifyOtpDto.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["ready_for_pickup",{"_index":1118,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["real",{"_index":2886,"title":{},"body":{"index.html":{}}}],["reason",{"_index":707,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{}}}],["reason_of_visit",{"_index":1921,"title":{},"body":{"entities/QueueDetails.html":{}}}],["reasonofvisit",{"_index":517,"title":{},"body":{"entities/Appointment.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"controllers/QueuesController.html":{}}}],["receive",{"_index":2342,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["received",{"_index":441,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["recent",{"_index":1395,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["recently",{"_index":2635,"title":{},"body":{"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{}}}],["recentusers",{"_index":1311,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["recentusers.map((user",{"_index":1398,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["recipient",{"_index":404,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/QueueNotificationDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["record",{"_index":993,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"interfaces/RequestWithUser.html":{}}}],["recordfailedattempt(@body",{"_index":2438,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["recordfailedloginattempt(identifier",{"_index":1449,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["recording",{"_index":2440,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["red",{"_index":2306,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["referencedcolumnname",{"_index":2599,"title":{},"body":{"entities/User.html":{}}}],["reflect",{"_index":2794,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":2454,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["regardless",{"_index":2339,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["region",{"_index":1691,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["register(@body",{"_index":2242,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["register(registerdto",{"_index":1506,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["registerdto",{"_index":1429,"title":{"classes/RegisterDto.html":{}},"body":{"interfaces/LockoutData.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["registered",{"_index":439,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["registration",{"_index":1529,"title":{},"body":{"interfaces/LockoutData.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{}}}],["reject",{"_index":1791,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["rejected",{"_index":465,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"entities/DocumentApplication.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{},"miscellaneous/enumerations.html":{}}}],["rejection",{"_index":2426,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["rejectionreason",{"_index":2428,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["rejectunauthorized",{"_index":346,"title":{},"body":{"modules/AppModule.html":{}}}],["related",{"_index":1566,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["relation(user",{"_index":1379,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["relations",{"_index":508,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["relationship",{"_index":1232,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["reminder",{"_index":730,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"interfaces/RequestWithUser.html":{}}}],["remove",{"_index":158,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["remove(@param('id",{"_index":207,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{}}}],["remove(id",{"_index":175,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["remove(user.roles",{"_index":1381,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["replaces",{"_index":2532,"title":{},"body":{"injectables/RolesService.html":{}}}],["repository",{"_index":237,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/OTPService.html":{},"injectables/QueueSchedulerService.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["req",{"_index":1211,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["req.user",{"_index":2255,"title":{},"body":{"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["req.user.id",{"_index":2256,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["req.user?.id",{"_index":2282,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["req.user?.roles",{"_index":2283,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["request",{"_index":1190,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["request.user",{"_index":2451,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"miscellaneous/variables.html":{}}}],["request.user?.roles",{"_index":2464,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["requested",{"_index":1233,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["requestwithuser",{"_index":2215,"title":{"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{}},"body":{"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["required",{"_index":659,"title":{},"body":{"controllers/AppointmentController.html":{},"classes/CreateDocumentApplicationDto.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/QueueNotificationDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["requiredroles",{"_index":2459,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["requiredroles.some((role",{"_index":2467,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["requirements",{"_index":445,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["requires",{"_index":1120,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["requires_additional_info",{"_index":1119,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["requiring",{"_index":2856,"title":{},"body":{"index.html":{}}}],["reset",{"_index":222,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resetdto",{"_index":2353,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["resetpassword",{"_index":2352,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["resetpassworddto",{"_index":440,"title":{"classes/ResetPasswordDto.html":{}},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{}}}],["resolve(files",{"_index":1799,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["resources",{"_index":2867,"title":{},"body":{"index.html":{}}}],["response",{"_index":1335,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService-1.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["response.dto",{"_index":1871,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{}}}],["response.dto.ts",{"_index":1861,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"coverage.html":{}}}],["response.dto.ts:14",{"_index":2620,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:15",{"_index":1865,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{},"classes/UsersByRoleDto.html":{}}}],["response.dto.ts:20",{"_index":2630,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:21",{"_index":1864,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{}}}],["response.dto.ts:23",{"_index":2637,"title":{},"body":{"classes/UserStatsResponseDto.html":{}}}],["response.dto.ts:26",{"_index":2621,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:27",{"_index":1863,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{}}}],["response.dto.ts:29",{"_index":2633,"title":{},"body":{"classes/UserStatsResponseDto.html":{}}}],["response.dto.ts:32",{"_index":2625,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:33",{"_index":1867,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{}}}],["response.dto.ts:35",{"_index":2634,"title":{},"body":{"classes/UserStatsResponseDto.html":{}}}],["response.dto.ts:38",{"_index":2624,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:41",{"_index":2639,"title":{},"body":{"classes/UserStatsResponseDto.html":{}}}],["response.dto.ts:44",{"_index":2626,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:47",{"_index":2636,"title":{},"body":{"classes/UserStatsResponseDto.html":{}}}],["response.dto.ts:50",{"_index":2627,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:56",{"_index":2614,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:62",{"_index":2623,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:68",{"_index":2617,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:74",{"_index":2629,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:8",{"_index":2622,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:81",{"_index":2628,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:87",{"_index":2618,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:9",{"_index":1870,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{},"classes/UsersByRoleDto.html":{}}}],["response.dto.ts:93",{"_index":2619,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["responsive",{"_index":2376,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["result",{"_index":809,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/LockoutData.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["result.affected",{"_index":811,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["result.length",{"_index":2181,"title":{},"body":{"controllers/QueuesController.html":{}}}],["results",{"_index":110,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"classes/ResetPasswordDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":1572,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["retrieved",{"_index":1151,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["retrieving",{"_index":1632,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["return",{"_index":198,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":164,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["reveal",{"_index":2331,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["robert",{"_index":104,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["robert'})@isstring()@isoptional",{"_index":70,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["role",{"_index":35,"title":{"entities/Role.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"interfaces/AuthenticatedUser.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["role'})@isoptional()@isstring",{"_index":2607,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["role.id",{"_index":1626,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["role.name",{"_index":1340,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["role_id",{"_index":2600,"title":{},"body":{"entities/User.html":{}}}],["roleid",{"_index":1612,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["roleids",{"_index":19,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["roleids.length",{"_index":1382,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["rolename",{"_index":1309,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["rolenames",{"_index":1500,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["rolenames.includes(role",{"_index":2468,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["roles",{"_index":623,"title":{},"body":{"controllers/AppointmentController.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles('admin",{"_index":645,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["roles.controller",{"_index":2511,"title":{},"body":{"modules/RolesModule.html":{}}}],["roles.map((role",{"_index":1501,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["roles.service",{"_index":2495,"title":{},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{}}}],["roles/entities/role.entity",{"_index":2596,"title":{},"body":{"entities/User.html":{}}}],["roles/roles.module",{"_index":304,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["roles/roles.service",{"_index":1302,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["roles_key",{"_index":2456,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolescontroller",{"_index":2485,"title":{"controllers/RolesController.html":{}},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{},"coverage.html":{}}}],["rolesguard",{"_index":621,"title":{"guards/RolesGuard.html":{}},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["rolesguard)@roles('admin",{"_index":592,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/UsersController.html":{}}}],["rolesmodule",{"_index":289,"title":{"modules/RolesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["rolesrepository",{"_index":2518,"title":{},"body":{"injectables/RolesService.html":{}}}],["rolesservice",{"_index":1301,"title":{"injectables/RolesService.html":{}},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["rolestats",{"_index":1386,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["rolestats.map((stat",{"_index":1392,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["rollback",{"_index":1524,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["rolled",{"_index":1530,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["rooms",{"_index":2004,"title":{},"body":{"classes/QueueGateway.html":{}}}],["root",{"_index":2935,"title":{},"body":{"miscellaneous/variables.html":{}}}],["run",{"_index":2067,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"index.html":{}}}],["runs",{"_index":2843,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":2796,"title":{},"body":{"dependencies.html":{}}}],["s+@\\s+\\.\\s+/.test(email",{"_index":2314,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["s@]+@[^\\s@]+\\.[^\\s",{"_index":1535,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["salt",{"_index":1514,"title":{},"body":{"interfaces/LockoutData.html":{},"controllers/UsersController.html":{}}}],["san",{"_index":52,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["sanitizedrecentusers",{"_index":1397,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["sanitizedusers",{"_index":1336,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["save",{"_index":1847,"title":{},"body":{"injectables/OTPService.html":{}}}],["scalable",{"_index":2824,"title":{},"body":{"index.html":{}}}],["schedulemodule",{"_index":297,"title":{},"body":{"modules/AppModule.html":{},"modules/QueueModule.html":{}}}],["schedulemodule.forroot",{"_index":386,"title":{},"body":{"modules/AppModule.html":{},"modules/QueueModule.html":{}}}],["scheduler.service",{"_index":2020,"title":{},"body":{"modules/QueueModule.html":{}}}],["scheduler.service.ts",{"_index":2042,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"coverage.html":{}}}],["scheduler.service.ts:10",{"_index":2064,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["scheduler.service.ts:11",{"_index":2049,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["scheduler.service.ts:137",{"_index":2060,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["scheduler.service.ts:172",{"_index":2062,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["scheduler.service.ts:178",{"_index":2051,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["scheduler.service.ts:24",{"_index":2057,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["schema",{"_index":2231,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["sdk",{"_index":1782,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["search",{"_index":1296,"title":{},"body":{"interfaces/FindAllOptions.html":{},"classes/UserQueryDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["searching",{"_index":2085,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["secret",{"_index":892,"title":{},"body":{"modules/AuthModule.html":{},"injectables/OTPService.html":{}}}],["secretkey",{"_index":911,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["secretorkey",{"_index":918,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["secure",{"_index":2334,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["security",{"_index":2294,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["see",{"_index":2278,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["seeddatabaseifneeded",{"_index":2743,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["seeddatabaseifneeded(datasource",{"_index":2811,"title":{},"body":{"miscellaneous/functions.html":{}}}],["select",{"_index":823,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["select('role.name",{"_index":1388,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["send",{"_index":420,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/AppointmentNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["sendapplicationapproval",{"_index":2424,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["sendapplicationconfirmation",{"_index":2407,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["sendapplicationnotification",{"_index":2378,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["sendapplicationrejection",{"_index":2427,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["sendapplicationstatusupdate",{"_index":2418,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["sendappointmentcancellation(@body",{"_index":2400,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["sendappointmentconfirmation(@body",{"_index":2395,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["sendappointmentreminder",{"_index":2404,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["sendappointmentstatusupdate(@body",{"_index":2398,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["sending",{"_index":2316,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["sendotp(@body",{"_index":2313,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["sendotpdto",{"_index":419,"title":{"classes/SendOtpDto.html":{}},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{}}}],["sendqueuenotification(@body",{"_index":2380,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["sends",{"_index":2289,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["sent",{"_index":2309,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["server",{"_index":1932,"title":{},"body":{"classes/QueueGateway.html":{},"index.html":{}}}],["service",{"_index":2147,"title":{},"body":{"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["services",{"_index":2816,"title":{},"body":{"index.html":{}}}],["services/email.service",{"_index":314,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"interfaces/RequestWithUser.html":{}}}],["services/minio.service",{"_index":1265,"title":{},"body":{"modules/DocumentApplicationsModule.html":{}}}],["services/otp.service",{"_index":313,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"interfaces/RequestWithUser.html":{}}}],["serving",{"_index":1896,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"miscellaneous/enumerations.html":{}}}],["servingqueues",{"_index":2104,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["servingqueues.length",{"_index":2106,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["servingqueues.map((queue",{"_index":2108,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["servingqueueswithdetails",{"_index":2149,"title":{},"body":{"controllers/QueuesController.html":{}}}],["servingqueueswithdetails.length",{"_index":2154,"title":{},"body":{"controllers/QueuesController.html":{}}}],["set",{"_index":375,"title":{},"body":{"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"interfaces/LockoutData.html":{},"entities/QueueDetails.html":{}}}],["setmetadata(roles_key",{"_index":2939,"title":{},"body":{"miscellaneous/variables.html":{}}}],["settings",{"_index":350,"title":{},"body":{"modules/AppModule.html":{}}}],["setup",{"_index":2829,"title":{},"body":{"index.html":{}}}],["shouldupdatename",{"_index":1552,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["side",{"_index":2825,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":894,"title":{},"body":{"modules/AuthModule.html":{}}}],["simple",{"_index":2858,"title":{},"body":{"index.html":{}}}],["single",{"_index":2321,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["size",{"_index":1775,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["skip",{"_index":1317,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["skipping",{"_index":2076,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["slot",{"_index":864,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["slots",{"_index":588,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["smart",{"_index":1711,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"interfaces/RequestWithUser.html":{},"index.html":{}}}],["socket",{"_index":1948,"title":{},"body":{"classes/QueueGateway.html":{}}}],["socket.io",{"_index":1974,"title":{},"body":{"classes/QueueGateway.html":{},"dependencies.html":{}}}],["soft",{"_index":267,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"classes/ResetPasswordDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{},"index.html":{}}}],["spam",{"_index":2300,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["speakeasy",{"_index":1826,"title":{},"body":{"injectables/OTPService.html":{},"dependencies.html":{}}}],["speakeasy.totp",{"_index":1836,"title":{},"body":{"injectables/OTPService.html":{}}}],["special",{"_index":458,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["specific",{"_index":1143,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"interfaces/LockoutData.html":{},"classes/QueueGateway.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["specified",{"_index":820,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/RequestWithUser.html":{}}}],["sponsors",{"_index":2904,"title":{},"body":{"index.html":{}}}],["sql",{"_index":368,"title":{},"body":{"modules/AppModule.html":{}}}],["sr",{"_index":1052,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/.../appointment.entity.ts",{"_index":2806,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../counter.entity.ts",{"_index":2807,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../database.config.ts",{"_index":2927,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../document",{"_index":2805,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":2810,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../queue.entity.ts",{"_index":2808,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../roles.decorator.ts",{"_index":2928,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.decorator.ts",{"_index":2929,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":270,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:14",{"_index":275,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:9",{"_index":273,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":293,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":388,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":389,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":2216,"title":{},"body":{"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["src/auth/auth.module.ts",{"_index":878,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":1422,"title":{},"body":{"interfaces/LockoutData.html":{},"coverage.html":{}}}],["src/auth/decorators/roles.decorator.ts",{"_index":2728,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/user.decorator.ts",{"_index":2446,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dto/appointment",{"_index":704,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto.ts",{"_index":1656,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto.ts:15",{"_index":1660,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/login.dto.ts:23",{"_index":1663,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/otp.dto.ts",{"_index":393,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{}}}],["src/auth/dto/otp.dto.ts:106",{"_index":2472,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["src/auth/dto/otp.dto.ts:116",{"_index":2540,"title":{},"body":{"classes/TestOtpDto.html":{}}}],["src/auth/dto/otp.dto.ts:126",{"_index":412,"title":{},"body":{"classes/ApplicationNotificationDto.html":{}}}],["src/auth/dto/otp.dto.ts:133",{"_index":400,"title":{},"body":{"classes/ApplicationNotificationDto.html":{}}}],["src/auth/dto/otp.dto.ts:141",{"_index":416,"title":{},"body":{"classes/ApplicationNotificationDto.html":{}}}],["src/auth/dto/otp.dto.ts:148",{"_index":403,"title":{},"body":{"classes/ApplicationNotificationDto.html":{}}}],["src/auth/dto/otp.dto.ts:17",{"_index":2537,"title":{},"body":{"classes/SendOtpDto.html":{}}}],["src/auth/dto/otp.dto.ts:27",{"_index":2539,"title":{},"body":{"classes/SendOtpDto.html":{}}}],["src/auth/dto/otp.dto.ts:37",{"_index":2717,"title":{},"body":{"classes/VerifyOtpDto.html":{}}}],["src/auth/dto/otp.dto.ts:49",{"_index":2718,"title":{},"body":{"classes/VerifyOtpDto.html":{}}}],["src/auth/dto/otp.dto.ts:59",{"_index":2719,"title":{},"body":{"classes/VerifyOtpDto.html":{}}}],["src/auth/dto/otp.dto.ts:69",{"_index":1412,"title":{},"body":{"classes/ForgotPasswordDto.html":{}}}],["src/auth/dto/otp.dto.ts:79",{"_index":2469,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["src/auth/dto/otp.dto.ts:91",{"_index":2475,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["src/auth/dto/queue",{"_index":2025,"title":{},"body":{"classes/QueueNotificationDto.html":{},"coverage.html":{}}}],["src/auth/dto/register.dto.ts",{"_index":2196,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["src/auth/dto/register.dto.ts:21",{"_index":2200,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:29",{"_index":2213,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:39",{"_index":2211,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:47",{"_index":2202,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:55",{"_index":2205,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:63",{"_index":2204,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:71",{"_index":2206,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:79",{"_index":2207,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:86",{"_index":2198,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:95",{"_index":2209,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/update",{"_index":6,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/auth/guards/jwt",{"_index":1413,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard.ts",{"_index":2452,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard.ts:13",{"_index":2503,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/guards/roles.guard.ts:16",{"_index":2504,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":899,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:20",{"_index":1419,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:35",{"_index":1420,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/config/database.config.ts",{"_index":2739,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/entities/otp.entity.ts",{"_index":1800,"title":{},"body":{"entities/OTP.html":{},"coverage.html":{}}}],["src/entities/otp.entity.ts:11",{"_index":1807,"title":{},"body":{"entities/OTP.html":{}}}],["src/entities/otp.entity.ts:14",{"_index":1804,"title":{},"body":{"entities/OTP.html":{}}}],["src/entities/otp.entity.ts:17",{"_index":1808,"title":{},"body":{"entities/OTP.html":{}}}],["src/entities/otp.entity.ts:20",{"_index":1809,"title":{},"body":{"entities/OTP.html":{}}}],["src/entities/otp.entity.ts:23",{"_index":1810,"title":{},"body":{"entities/OTP.html":{}}}],["src/entities/otp.entity.ts:26",{"_index":1806,"title":{},"body":{"entities/OTP.html":{}}}],["src/entities/otp.entity.ts:29",{"_index":1803,"title":{},"body":{"entities/OTP.html":{}}}],["src/main.ts",{"_index":2740,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/announcement/announcement.controller.ts",{"_index":150,"title":{},"body":{"controllers/AnnouncementController.html":{},"coverage.html":{}}}],["src/modules/announcement/announcement.controller.ts:21",{"_index":162,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["src/modules/announcement/announcement.controller.ts:26",{"_index":165,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["src/modules/announcement/announcement.controller.ts:31",{"_index":171,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["src/modules/announcement/announcement.controller.ts:36",{"_index":168,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["src/modules/announcement/announcement.controller.ts:41",{"_index":181,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["src/modules/announcement/announcement.controller.ts:49",{"_index":177,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["src/modules/announcement/announcement.module.ts",{"_index":224,"title":{},"body":{"modules/AnnouncementModule.html":{}}}],["src/modules/announcement/announcement.service.ts",{"_index":233,"title":{},"body":{"injectables/AnnouncementService.html":{},"coverage.html":{}}}],["src/modules/announcement/announcement.service.ts:15",{"_index":240,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["src/modules/announcement/announcement.service.ts:24",{"_index":242,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["src/modules/announcement/announcement.service.ts:31",{"_index":243,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["src/modules/announcement/announcement.service.ts:43",{"_index":246,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["src/modules/announcement/announcement.service.ts:53",{"_index":245,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["src/modules/announcement/announcement.service.ts:59",{"_index":244,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["src/modules/announcement/announcement.service.ts:9",{"_index":238,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["src/modules/announcement/dto/create",{"_index":952,"title":{},"body":{"classes/CreateAnnouncementDto.html":{},"coverage.html":{}}}],["src/modules/announcement/dto/update",{"_index":2541,"title":{},"body":{"classes/UpdateAnnouncementDto.html":{},"coverage.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts",{"_index":115,"title":{},"body":{"entities/Announcement.html":{},"coverage.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts:12",{"_index":133,"title":{},"body":{"entities/Announcement.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts:15",{"_index":141,"title":{},"body":{"entities/Announcement.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts:18",{"_index":131,"title":{},"body":{"entities/Announcement.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts:21",{"_index":137,"title":{},"body":{"entities/Announcement.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts:24",{"_index":139,"title":{},"body":{"entities/Announcement.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts:27",{"_index":129,"title":{},"body":{"entities/Announcement.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts:30",{"_index":124,"title":{},"body":{"entities/Announcement.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts:33",{"_index":143,"title":{},"body":{"entities/Announcement.html":{}}}],["src/modules/appointment/appointment.controller.ts",{"_index":550,"title":{},"body":{"controllers/AppointmentController.html":{},"coverage.html":{}}}],["src/modules/appointment/appointment.controller.ts:113",{"_index":589,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:123",{"_index":582,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:135",{"_index":580,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:142",{"_index":607,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:169",{"_index":610,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:188",{"_index":604,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:44",{"_index":567,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:59",{"_index":574,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:69",{"_index":585,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:77",{"_index":602,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:85",{"_index":594,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:96",{"_index":599,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.module.ts",{"_index":700,"title":{},"body":{"modules/AppointmentModule.html":{}}}],["src/modules/appointment/appointment.service.ts",{"_index":737,"title":{},"body":{"injectables/AppointmentService.html":{},"coverage.html":{}}}],["src/modules/appointment/appointment.service.ts:108",{"_index":755,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:122",{"_index":765,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:157",{"_index":764,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:16",{"_index":745,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:170",{"_index":766,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:185",{"_index":763,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:220",{"_index":759,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:23",{"_index":749,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:241",{"_index":761,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:264",{"_index":762,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:316",{"_index":748,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:341",{"_index":757,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:72",{"_index":751,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:82",{"_index":754,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:92",{"_index":756,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/dto/create",{"_index":963,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"coverage.html":{}}}],["src/modules/appointment/dto/update",{"_index":2546,"title":{},"body":{"classes/UpdateAppointmentDto.html":{},"coverage.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts",{"_index":510,"title":{},"body":{"entities/Appointment.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:22",{"_index":526,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:25",{"_index":522,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:28",{"_index":525,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:31",{"_index":529,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:34",{"_index":531,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:37",{"_index":519,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:40",{"_index":532,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:43",{"_index":533,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:46",{"_index":520,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:49",{"_index":523,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:56",{"_index":535,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:59",{"_index":541,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:66",{"_index":540,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:69",{"_index":528,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:72",{"_index":524,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:75",{"_index":536,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/counter/entities/counter.entity.ts",{"_index":931,"title":{},"body":{"entities/Counter.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/modules/counter/entities/counter.entity.ts:18",{"_index":942,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/counter/entities/counter.entity.ts:21",{"_index":943,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/counter/entities/counter.entity.ts:28",{"_index":945,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/counter/entities/counter.entity.ts:31",{"_index":941,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/counter/entities/counter.entity.ts:38",{"_index":940,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/document",{"_index":470,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"injectables/MinioService-1.html":{},"classes/UpdateDocumentApplicationDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/modules/queue/dto/create",{"_index":1014,"title":{},"body":{"classes/CreateQueueDto.html":{},"coverage.html":{}}}],["src/modules/queue/dto/update",{"_index":2556,"title":{},"body":{"classes/UpdateQueueDto.html":{},"coverage.html":{}}}],["src/modules/queue/entities/queue",{"_index":1899,"title":{},"body":{"entities/QueueDetails.html":{},"coverage.html":{}}}],["src/modules/queue/entities/queue.entity.ts",{"_index":1872,"title":{},"body":{"entities/Queue.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/modules/queue/entities/queue.entity.ts:22",{"_index":1889,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:25",{"_index":1891,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:32",{"_index":1893,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:35",{"_index":1882,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:38",{"_index":1883,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:41",{"_index":1878,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:44",{"_index":1888,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:47",{"_index":1886,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:52",{"_index":1880,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/queue",{"_index":2041,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"coverage.html":{}}}],["src/modules/queue/queue.controller.ts",{"_index":2753,"title":{},"body":{"coverage.html":{}}}],["src/modules/queue/queue.gateway.ts",{"_index":1929,"title":{},"body":{"classes/QueueGateway.html":{},"coverage.html":{}}}],["src/modules/queue/queue.gateway.ts:23",{"_index":1945,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:26",{"_index":1943,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:34",{"_index":1949,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:41",{"_index":1953,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:46",{"_index":1963,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:53",{"_index":1956,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:59",{"_index":1960,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:65",{"_index":1966,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:72",{"_index":1970,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:77",{"_index":1968,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.module.ts",{"_index":2014,"title":{},"body":{"modules/QueueModule.html":{}}}],["src/modules/queue/queue.service.ts",{"_index":2754,"title":{},"body":{"coverage.html":{}}}],["src/modules/queue/queues.controller.ts",{"_index":2125,"title":{},"body":{"controllers/QueuesController.html":{},"coverage.html":{}}}],["src/modules/queue/queues.controller.ts:111",{"_index":2130,"title":{},"body":{"controllers/QueuesController.html":{}}}],["src/modules/queue/queues.controller.ts:21",{"_index":2135,"title":{},"body":{"controllers/QueuesController.html":{}}}],["src/modules/queue/queues.controller.ts:76",{"_index":2133,"title":{},"body":{"controllers/QueuesController.html":{}}}],["src/roles/entities/role.entity.ts",{"_index":2476,"title":{},"body":{"entities/Role.html":{},"coverage.html":{}}}],["src/roles/entities/role.entity.ts:10",{"_index":2479,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/entities/role.entity.ts:13",{"_index":2477,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/entities/role.entity.ts:16",{"_index":2482,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/entities/role.entity.ts:7",{"_index":2478,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/roles.controller.ts",{"_index":2486,"title":{},"body":{"controllers/RolesController.html":{},"coverage.html":{}}}],["src/roles/roles.controller.ts:14",{"_index":2489,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.controller.ts:20",{"_index":2491,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.controller.ts:26",{"_index":2494,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.module.ts",{"_index":2509,"title":{},"body":{"modules/RolesModule.html":{}}}],["src/roles/roles.service.ts",{"_index":2513,"title":{},"body":{"injectables/RolesService.html":{},"coverage.html":{}}}],["src/roles/roles.service.ts:17",{"_index":2521,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:21",{"_index":2524,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:29",{"_index":2523,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:37",{"_index":2525,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:45",{"_index":2520,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:8",{"_index":2517,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/services/email.service.ts",{"_index":2756,"title":{},"body":{"coverage.html":{}}}],["src/services/minio.service.ts",{"_index":1664,"title":{},"body":{"injectables/MinioService.html":{},"coverage.html":{}}}],["src/services/minio.service.ts:40",{"_index":1677,"title":{},"body":{"injectables/MinioService.html":{}}}],["src/services/minio.service.ts:6",{"_index":1679,"title":{},"body":{"injectables/MinioService.html":{}}}],["src/services/minio.service.ts:64",{"_index":1675,"title":{},"body":{"injectables/MinioService.html":{}}}],["src/services/minio.service.ts:7",{"_index":1681,"title":{},"body":{"injectables/MinioService.html":{}}}],["src/services/minio.service.ts:77",{"_index":1672,"title":{},"body":{"injectables/MinioService.html":{}}}],["src/services/minio.service.ts:8",{"_index":1670,"title":{},"body":{"injectables/MinioService.html":{}}}],["src/services/otp.service.ts",{"_index":1813,"title":{},"body":{"injectables/OTPService.html":{},"coverage.html":{}}}],["src/services/otp.service.ts:11",{"_index":1818,"title":{},"body":{"injectables/OTPService.html":{}}}],["src/services/otp.service.ts:19",{"_index":1822,"title":{},"body":{"injectables/OTPService.html":{}}}],["src/services/otp.service.ts:62",{"_index":1824,"title":{},"body":{"injectables/OTPService.html":{}}}],["src/services/otp.service.ts:92",{"_index":1820,"title":{},"body":{"injectables/OTPService.html":{}}}],["src/users/dto/create",{"_index":1029,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/paginated",{"_index":1860,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":2566,"title":{},"body":{"classes/UpdateUserStatusDto.html":{},"coverage.html":{}}}],["src/users/dto/user",{"_index":2602,"title":{},"body":{"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts",{"_index":2570,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:17",{"_index":2579,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:20",{"_index":2577,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:23",{"_index":2594,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:26",{"_index":2588,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:29",{"_index":2578,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:32",{"_index":2584,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:35",{"_index":2582,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:38",{"_index":2585,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:41",{"_index":2587,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:44",{"_index":2572,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:47",{"_index":2581,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:50",{"_index":2573,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:53",{"_index":2593,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:57",{"_index":2575,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:60",{"_index":2576,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:74",{"_index":2592,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":2642,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:109",{"_index":2665,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:124",{"_index":2663,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:138",{"_index":2668,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:156",{"_index":2650,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:49",{"_index":2652,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:61",{"_index":2659,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:73",{"_index":2661,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:83",{"_index":2655,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":2701,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":1294,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:111",{"_index":2708,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:213",{"_index":2715,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:223",{"_index":2716,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:233",{"_index":2714,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:276",{"_index":2711,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:283",{"_index":2712,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:290",{"_index":2709,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:37",{"_index":2706,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:45",{"_index":2710,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:90",{"_index":2713,"title":{},"body":{"injectables/UsersService.html":{}}}],["ssl",{"_index":342,"title":{},"body":{"modules/AppModule.html":{}}}],["st",{"_index":51,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["staff",{"_index":571,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"classes/UserResponseDto.html":{},"controllers/UsersController.html":{}}}],["staff'].includes(role.name",{"_index":1229,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["start",{"_index":664,"title":{},"body":{"controllers/AppointmentController.html":{},"index.html":{}}}],["start:dev",{"_index":2833,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":2834,"title":{},"body":{"index.html":{}}}],["startdate",{"_index":600,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["started",{"_index":2813,"title":{"index.html":{}},"body":{}}],["starter",{"_index":2827,"title":{},"body":{"index.html":{}}}],["starting",{"_index":2077,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["startofday",{"_index":2061,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["startofday.todatestring",{"_index":2117,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["startofday.toisostring",{"_index":2087,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["stat.rolename",{"_index":1393,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["state",{"_index":1527,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["statements",{"_index":2722,"title":{},"body":{"coverage.html":{}}}],["statistics",{"_index":654,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/QueueSchedulerService.html":{},"controllers/UsersController.html":{}}}],["stats",{"_index":863,"title":{},"body":{"injectables/AppointmentService.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"coverage.html":{}}}],["status",{"_index":276,"title":{},"body":{"controllers/AppController.html":{},"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"entities/Counter.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"classes/ForgotPasswordDto.html":{},"entities/Queue.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserResponseDto.html":{},"controllers/UsersController.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{}}}],["status'})@isboolean",{"_index":2568,"title":{},"body":{"classes/UpdateUserStatusDto.html":{}}}],["status.dto",{"_index":2672,"title":{},"body":{"controllers/UsersController.html":{}}}],["status.dto.ts",{"_index":2567,"title":{},"body":{"classes/UpdateUserStatusDto.html":{},"coverage.html":{}}}],["status.dto.ts:10",{"_index":2569,"title":{},"body":{"classes/UpdateUserStatusDto.html":{}}}],["status_message",{"_index":499,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentApplication.html":{}}}],["status_update",{"_index":729,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"classes/QueueNotificationDto.html":{},"interfaces/RequestWithUser.html":{}}}],["statuscode",{"_index":2311,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["statusdto",{"_index":1178,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["statusdto.status",{"_index":1249,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["statusdto.statusmessage",{"_index":1250,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["statuses",{"_index":845,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/RequestWithUser.html":{}}}],["statushistory",{"_index":1071,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["statusmessage",{"_index":477,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["stay",{"_index":2890,"title":{},"body":{"index.html":{}}}],["step",{"_index":1838,"title":{},"body":{"injectables/OTPService.html":{}}}],["steps",{"_index":2842,"title":{},"body":{"index.html":{}}}],["straightforward",{"_index":2854,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":903,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["stream",{"_index":1792,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["stream.on('data",{"_index":1794,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["stream.on('end",{"_index":1798,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["stream.on('error",{"_index":1797,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["strength",{"_index":1509,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["string",{"_index":47,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueNotificationDto.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"classes/ResetPasswordDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{},"miscellaneous/variables.html":{}}}],["string(payload.email",{"_index":927,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["structure",{"_index":2159,"title":{},"body":{"controllers/QueuesController.html":{}}}],["sub",{"_index":906,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{}}}],["submission",{"_index":999,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["submissiondate",{"_index":2409,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["subscribemessage",{"_index":1972,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subscribemessage('getqueueposition",{"_index":1955,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subscribemessage('join_queue_updates",{"_index":1965,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subscribemessage('joincounter",{"_index":1959,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subscribemessage('joinqueue",{"_index":1962,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subtype",{"_index":986,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["success",{"_index":1475,"title":{},"body":{"interfaces/LockoutData.html":{},"classes/QueueGateway.html":{},"interfaces/RequestWithUser.html":{}}}],["successful",{"_index":2230,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["successfully",{"_index":566,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["successfully'})@apiresponse({status",{"_index":1152,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["summary",{"_index":638,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["super",{"_index":914,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["super_admin",{"_index":593,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["super_admin')@apioperation({summary",{"_index":572,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/UsersController.html":{}}}],["super_admin')@useguards(rolesguard)@apioperation({summary",{"_index":1156,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["super_admin'].includes(role.name",{"_index":680,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":2873,"title":{},"body":{"index.html":{},"modules.html":{}}}],["supported",{"_index":2368,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["supporting",{"_index":2138,"title":{},"body":{"controllers/QueuesController.html":{}}}],["sure",{"_index":2274,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["svg",{"_index":2919,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":2799,"title":{},"body":{"dependencies.html":{}}}],["synchronize",{"_index":331,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["table",{"_index":2759,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2758,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":268,"title":{},"body":{"injectables/AnnouncementService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["taken",{"_index":1508,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["target",{"_index":1596,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["targetuser",{"_index":1597,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["targetuserid",{"_index":1583,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["template",{"_index":2305,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["templates",{"_index":2301,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["term",{"_index":2609,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["test",{"_index":1661,"title":{},"body":{"classes/LoginDto.html":{},"interfaces/RequestWithUser.html":{},"index.html":{}}}],["test(password",{"_index":1649,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["test:covdeployment",{"_index":2839,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":2838,"title":{},"body":{"index.html":{}}}],["test@example.com",{"_index":100,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateUserDto.html":{},"classes/VerifyOtpDto.html":{}}}],["test@example.com'})@isemail()@isnotempty",{"_index":2199,"title":{},"body":{"classes/RegisterDto.html":{}}}],["test@example.com'})@isemail()@isoptional",{"_index":60,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["test@example.com'})@isnotempty",{"_index":1659,"title":{},"body":{"classes/LoginDto.html":{}}}],["testing",{"_index":461,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"injectables/OTPService.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["testminioconnection",{"_index":2744,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["testotp(@body",{"_index":2364,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["testotpdto",{"_index":460,"title":{"classes/TestOtpDto.html":{}},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{}}}],["tests",{"_index":2835,"title":{},"body":{"index.html":{}}}],["text",{"_index":130,"title":{},"body":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/DocumentApplication.html":{}}}],["thanks",{"_index":2903,"title":{},"body":{"index.html":{}}}],["theme",{"_index":2370,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["themed",{"_index":2307,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.announcementrepository.create",{"_index":252,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["this.announcementrepository.find",{"_index":255,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["this.announcementrepository.findone",{"_index":258,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["this.announcementrepository.save(announcement",{"_index":254,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["this.announcementservice.create(createannouncementdto",{"_index":199,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["this.announcementservice.findall",{"_index":200,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["this.announcementservice.findone(id",{"_index":204,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["this.announcementservice.getrecentannouncements(limit",{"_index":202,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["this.announcementservice.remove(id",{"_index":208,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["this.announcementservice.update(id",{"_index":206,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["this.appointmentrepository.count",{"_index":852,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.appointmentrepository.delete(id",{"_index":810,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.appointmentrepository.find",{"_index":788,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.appointmentrepository.findone",{"_index":791,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.appointmentrepository.save(appointment",{"_index":815,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.appointmentrepository.save(updated",{"_index":805,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.appointmentservice.create(createappointmentdto",{"_index":643,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.findall",{"_index":648,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.findallbyuser(user.id",{"_index":652,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.findbyappointmentnumber(appointmentnumber",{"_index":673,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.findone(+id",{"_index":671,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.getappointmentsbydate(date",{"_index":660,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.getappointmentsbydaterange",{"_index":666,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.getappointmentsstats",{"_index":655,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.getavailableslots(date",{"_index":669,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.remove(+id",{"_index":696,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.update(+id",{"_index":684,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.updatestatus(+id",{"_index":692,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appservice.gethello",{"_index":279,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.adminupdateuser",{"_index":2286,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.authservice.clearaccountlockout(identifier",{"_index":2444,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.authservice.finduserbyemail(email",{"_index":2345,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.authservice.getaccountlockout(identifier",{"_index":2433,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.authservice.getprofile(number(req.user.id",{"_index":2257,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.authservice.login(logindto",{"_index":2236,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.authservice.recordfailedloginattempt(identifier",{"_index":2439,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.authservice.register(createuserdto",{"_index":2248,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.authservice.updatepassword(email",{"_index":2354,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.authservice.updateuserinfo",{"_index":2261,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.bucketname",{"_index":1708,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["this.checktimeslotavailability(newdate",{"_index":801,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.configservice",{"_index":1757,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.configservice.get",{"_index":1752,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.configservice.get('minio_enable_port",{"_index":1755,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.configservice.get('minio_port",{"_index":1754,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.configservice.get('otp_expiry_minutes",{"_index":1845,"title":{},"body":{"injectables/OTPService.html":{}}}],["this.configservice.get('otp_secret",{"_index":1837,"title":{},"body":{"injectables/OTPService.html":{}}}],["this.configservice.get('ws_cors_origin",{"_index":1991,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.documentapplicationsservice.create(createdto",{"_index":1203,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.findall",{"_index":1255,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.findall(userid",{"_index":1235,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.findone(id",{"_index":1242,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.getallapplicationfiles",{"_index":1241,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.getapplicationfiles",{"_index":1239,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.getapplicationstats",{"_index":1257,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.getfiledownloadurl",{"_index":1245,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.remove(id",{"_index":1251,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.update",{"_index":1247,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.updatestatus",{"_index":1248,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.uploadfile",{"_index":1226,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.emailservice.sendapplicationnotification",{"_index":2250,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.emailservice.sendappointmentcancellation",{"_index":2401,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.emailservice.sendappointmentconfirmation",{"_index":2396,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.emailservice.sendappointmentreminder",{"_index":2405,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.emailservice.sendappointmentstatusupdate",{"_index":2399,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.emailservice.senddocumentapplicationapproval",{"_index":2425,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.emailservice.senddocumentapplicationconfirmation",{"_index":2411,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.emailservice.senddocumentapplicationrejection",{"_index":2429,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.emailservice.senddocumentapplicationstatusupdate",{"_index":2420,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.emailservice.sendotp(email",{"_index":1851,"title":{},"body":{"injectables/OTPService.html":{}}}],["this.emailservice.sendqueuepositionalert",{"_index":2382,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.emailservice.sendqueuestatusupdate",{"_index":2385,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.ensurebucketexists",{"_index":1767,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.failedattempts.delete(key",{"_index":1471,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.failedattempts.get(key",{"_index":1448,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.failedattempts.set(key",{"_index":1465,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.findone(id",{"_index":263,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.finduserbyemail(email",{"_index":1642,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.generatealltimeslots",{"_index":834,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.getaccountlockout(identifier",{"_index":1478,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.getprofile(targetuserid",{"_index":1631,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.handledailyqueuereset",{"_index":2124,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["this.isresetinprogress",{"_index":2074,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["this.isvalidemail(email",{"_index":1507,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.isvalidemail(updateuserdto.email",{"_index":1543,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.jwtservice.sign(payload",{"_index":1502,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.logdailystatistics(startofday",{"_index":2110,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["this.logger.debug(`generated",{"_index":1788,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.logger.error",{"_index":837,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{}}}],["this.logger.error('admin",{"_index":1634,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.logger.error('delete",{"_index":1727,"title":{},"body":{"injectables/MinioService.html":{}}}],["this.logger.error('error",{"_index":862,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService-1.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["this.logger.error('forgot",{"_index":2346,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.logger.error('get",{"_index":1725,"title":{},"body":{"injectables/MinioService.html":{}}}],["this.logger.error('login",{"_index":1505,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.logger.error('queue",{"_index":2389,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.logger.error('registration",{"_index":1532,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["this.logger.error('reset",{"_index":2355,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.logger.error('test",{"_index":2367,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.logger.error('upload",{"_index":1722,"title":{},"body":{"injectables/MinioService.html":{}}}],["this.logger.error('user",{"_index":1574,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.logger.error(`error",{"_index":808,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.logger.log",{"_index":691,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{}}}],["this.logger.log('admin",{"_index":2281,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.logger.log('comparing",{"_index":1494,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.logger.log('fetching",{"_index":647,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.logger.log('found",{"_index":2152,"title":{},"body":{"controllers/QueuesController.html":{}}}],["this.logger.log('generated",{"_index":1503,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.logger.log('get",{"_index":2143,"title":{},"body":{"controllers/QueuesController.html":{}}}],["this.logger.log('login",{"_index":1489,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["this.logger.log('password",{"_index":1498,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.logger.log('processing",{"_index":2162,"title":{},"body":{"controllers/QueuesController.html":{}}}],["this.logger.log('received",{"_index":1221,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.logger.log('stored",{"_index":1492,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.logger.log('target",{"_index":2284,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.logger.log('update",{"_index":2285,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.logger.log('user",{"_index":1491,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.logger.log(`account",{"_index":1472,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.logger.log(`bucket",{"_index":1770,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.logger.log(`client",{"_index":1988,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.logger.log(`creating",{"_index":642,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.logger.log(`deleted",{"_index":812,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.logger.log(`deleting",{"_index":695,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.logger.log(`fetching",{"_index":651,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.logger.log(`file",{"_index":1720,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["this.logger.log(`password",{"_index":1646,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.logger.log(`returning",{"_index":2180,"title":{},"body":{"controllers/QueuesController.html":{}}}],["this.logger.log(`socket",{"_index":1999,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.logger.log(`updated",{"_index":804,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.logger.log(`updating",{"_index":683,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.logger.warn",{"_index":1461,"title":{},"body":{"interfaces/LockoutData.html":{},"injectables/QueueSchedulerService.html":{}}}],["this.minioclient",{"_index":1706,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["this.minioclient.bucketexists(this.bucketname",{"_index":1768,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.minioclient.listobjects",{"_index":1793,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.minioclient.makebucket(this.bucketname",{"_index":1769,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.minioclient.presignedgetobject",{"_index":1723,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["this.minioclient.putobject",{"_index":1713,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["this.minioclient.removeobject(this.bucketname",{"_index":1726,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["this.minioclient.statobject(this.bucketname",{"_index":1789,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.otprepository.create",{"_index":1849,"title":{},"body":{"injectables/OTPService.html":{}}}],["this.otprepository.delete",{"_index":1857,"title":{},"body":{"injectables/OTPService.html":{}}}],["this.otprepository.findone",{"_index":1853,"title":{},"body":{"injectables/OTPService.html":{}}}],["this.otprepository.save(otpentity",{"_index":1850,"title":{},"body":{"injectables/OTPService.html":{}}}],["this.otprepository.update",{"_index":1831,"title":{},"body":{"injectables/OTPService.html":{}}}],["this.otpservice.generateotp(email",{"_index":2315,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.otpservice.verifyotp",{"_index":2247,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.otpservice.verifyotp(email",{"_index":2328,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.queuegateway.notifyqueueupdate(queue.id",{"_index":2100,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["this.queuegateway.server.emit('dailyqueuereset",{"_index":2103,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["this.queuerepository.count",{"_index":2115,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["this.queuerepository.find",{"_index":2090,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["this.queuerepository.save",{"_index":2095,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["this.queueservice.findbystatuswithdetails(queuestatus.pending",{"_index":2150,"title":{},"body":{"controllers/QueuesController.html":{}}}],["this.queueservice.findbystatuswithdetails(queuestatus.serving",{"_index":2151,"title":{},"body":{"controllers/QueuesController.html":{}}}],["this.queueservice.findbyuseridwithdetails(userid",{"_index":2187,"title":{},"body":{"controllers/QueuesController.html":{}}}],["this.queueservice.findone(queueid",{"_index":2194,"title":{},"body":{"controllers/QueuesController.html":{}}}],["this.queueservice.getqueuedetails(queueid",{"_index":1995,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.queueservice.getqueueposition(queueid",{"_index":1997,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.reflector.getallandoverride",{"_index":2460,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["this.rolesrepository.find",{"_index":2527,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesrepository.findby",{"_index":2535,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesrepository.findone",{"_index":2528,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesservice.assignrolestouser",{"_index":1616,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.rolesservice.assignrolestouser(id",{"_index":1383,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.rolesservice.assignrolestouser(user.id",{"_index":1410,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.rolesservice.findall",{"_index":2497,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.findbyname('citizen",{"_index":1520,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.rolesservice.findone(+id",{"_index":2498,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.findone(roleid",{"_index":1613,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.rolesservice.findone(updateuserdto.defaultroleid",{"_index":1621,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.rolesservice.getuserroles(+userid",{"_index":2500,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.getuserroles(adminid",{"_index":1590,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.rolesservice.getuserroles(targetuserid",{"_index":1623,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.rolesservice.getuserroles(user.id",{"_index":1499,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.rolesservice.getuserroles(userid",{"_index":1540,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.server.emit('counterlistupdate",{"_index":2009,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.server.emit('queuelistupdate",{"_index":2006,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.server.to(`counter_${counterid}`).emit('counterupdate",{"_index":2008,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.server.to(`queue_${queueid}`).emit('queueupdate",{"_index":2005,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.updateuserinfo(targetuserid",{"_index":1604,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.usersrepository",{"_index":1319,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.count",{"_index":1385,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.create",{"_index":1406,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.delete(id",{"_index":1384,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.delete(user.id",{"_index":1528,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.usersrepository.find",{"_index":1396,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.findone",{"_index":1344,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.save(user",{"_index":1409,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.update",{"_index":1645,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.usersrepository.update(id",{"_index":1375,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.update(targetuserid",{"_index":1629,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.usersrepository.update(userid",{"_index":1569,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.usersservice.adminupdate(+id",{"_index":2687,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.create(userwithhashedpassword",{"_index":2693,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall",{"_index":2678,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(req.user.id",{"_index":2679,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(user.id",{"_index":2696,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(userid",{"_index":2685,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getstats",{"_index":2680,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.remove(+id",{"_index":2688,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.updatestatus(+id",{"_index":2689,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.validatepasswordstrength",{"_index":1549,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.validatepasswordstrength(newpassword",{"_index":1641,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.validatepasswordstrength(password",{"_index":1511,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["throw",{"_index":259,"title":{},"body":{"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["time",{"_index":376,"title":{},"body":{"modules/AppModule.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"injectables/OTPService.html":{},"classes/QueueNotificationDto.html":{},"interfaces/RequestWithUser.html":{},"index.html":{}}}],["time_zone",{"_index":380,"title":{},"body":{"modules/AppModule.html":{}}}],["timeout",{"_index":356,"title":{},"body":{"modules/AppModule.html":{}}}],["timeremaining",{"_index":1467,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["timestamp",{"_index":1805,"title":{},"body":{"entities/OTP.html":{},"injectables/QueueSchedulerService.html":{}}}],["timezone",{"_index":2055,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["title",{"_index":120,"title":{},"body":{"entities/Announcement.html":{},"classes/CreateAnnouncementDto.html":{}}}],["today",{"_index":786,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueSchedulerService.html":{}}}],["today's",{"_index":855,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["today.getdate",{"_index":2082,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["today.getfullyear",{"_index":2080,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["today.getmonth",{"_index":2081,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["today.sethours(0",{"_index":787,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["todayappointments",{"_index":856,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["token",{"_index":925,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{}}}],["tokens",{"_index":908,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["tolowercase",{"_index":1759,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["tomorrow",{"_index":840,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["tomorrow.sethours(0",{"_index":842,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["total",{"_index":861,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"classes/PaginatedUsersResponseDto.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["totalcount",{"_index":850,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["totalpages",{"_index":1342,"title":{},"body":{"interfaces/FindAllOptions.html":{},"classes/PaginatedUsersResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["totalusers",{"_index":1305,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["touch",{"_index":2910,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":2612,"title":{},"body":{"classes/UserQueryDto.html":{},"dependencies.html":{}}}],["trigger",{"_index":2122,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["triggered",{"_index":2123,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["true",{"_index":136,"title":{},"body":{"entities/Announcement.html":{},"injectables/AnnouncementService.html":{},"modules/AppModule.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"classes/AppointmentNotificationDto.html":{},"entities/Counter.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["true})@joincolumn({name",{"_index":537,"title":{},"body":{"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["try",{"_index":774,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["twitter",{"_index":2916,"title":{},"body":{"index.html":{}}}],["two",{"_index":2291,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["type",{"_index":29,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"modules/AppModule.html":{},"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"classes/ResetPasswordDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["typeof",{"_index":1575,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["typeorm",{"_index":145,"title":{},"body":{"entities/Announcement.html":{},"injectables/AnnouncementService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"injectables/AppointmentService.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"injectables/QueueSchedulerService.html":{},"entities/Role.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":225,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature",{"_index":1266,"title":{},"body":{"modules/DocumentApplicationsModule.html":{}}}],["typeormmodule.forfeature([announcement",{"_index":230,"title":{},"body":{"modules/AnnouncementModule.html":{}}}],["typeormmodule.forfeature([appointment",{"_index":702,"title":{},"body":{"modules/AppointmentModule.html":{}}}],["typeormmodule.forfeature([otp",{"_index":387,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmodule.forfeature([queue",{"_index":2023,"title":{},"body":{"modules/QueueModule.html":{}}}],["typeormmodule.forfeature([role",{"_index":2512,"title":{},"body":{"modules/RolesModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":887,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":317,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":2930,"title":{},"body":{"miscellaneous/variables.html":{}}}],["types",{"_index":2545,"title":{},"body":{"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["types/nodemailer",{"_index":2767,"title":{},"body":{"dependencies.html":{}}}],["types/qrcode",{"_index":2769,"title":{},"body":{"dependencies.html":{}}}],["types/speakeasy",{"_index":2771,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":1441,"title":{},"body":{"interfaces/LockoutData.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["ui",{"_index":2800,"title":{},"body":{"dependencies.html":{}}}],["unauthorized",{"_index":2233,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["unauthorizedexception",{"_index":900,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["unauthorizedexception('admin",{"_index":1588,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["unauthorizedexception('insufficient",{"_index":1595,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["unauthorizedexception('invalid",{"_index":924,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["unauthorizedexception('user",{"_index":1539,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["uncomment",{"_index":1191,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"modules/QueueModule.html":{}}}],["undefined",{"_index":44,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Appointment.html":{},"classes/AppointmentNotificationDto.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"interfaces/RequestWithUser.html":{},"classes/SendOtpDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{}}}],["undefined})@isarray()@isoptional",{"_index":45,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["undefined})@isenum(applicationtype",{"_index":991,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["undefined})@isobject",{"_index":996,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["undefined})@isoptional()@isarray()@isnumber",{"_index":1058,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["undefined})@isstring",{"_index":415,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/QueueNotificationDto.html":{}}}],["unexpected",{"_index":1581,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["unique",{"_index":547,"title":{},"body":{"entities/Appointment.html":{},"entities/Queue.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["uniqueness",{"_index":1348,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["unit",{"_index":2836,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":568,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/LockoutData.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser-1.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["unlicensed",{"_index":2926,"title":{},"body":{"properties.html":{}}}],["unsafe",{"_index":2669,"title":{},"body":{"controllers/UsersController.html":{}}}],["unused",{"_index":1443,"title":{},"body":{"interfaces/LockoutData.html":{},"controllers/UsersController.html":{}}}],["update",{"_index":11,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"classes/QueueGateway.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update(id",{"_index":178,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["updateannouncementdto",{"_index":179,"title":{"classes/UpdateAnnouncementDto.html":{}},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"classes/UpdateAnnouncementDto.html":{},"coverage.html":{}}}],["updateappointmentdto",{"_index":605,"title":{"classes/UpdateAppointmentDto.html":{}},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"classes/UpdateAppointmentDto.html":{},"coverage.html":{}}}],["updateappointmentdto.appointmentdate",{"_index":795,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["updateappointmentdto.appointmenttime",{"_index":796,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["updated",{"_index":802,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updated_at",{"_index":1097,"title":{},"body":{"entities/DocumentApplication.html":{},"entities/User.html":{}}}],["updatedat",{"_index":121,"title":{},"body":{"entities/Announcement.html":{},"entities/Appointment.html":{},"entities/DocumentApplication.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{}}}],["updatedata",{"_index":1355,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.contactnumber",{"_index":1360,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.defaultroleid",{"_index":1364,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.email",{"_index":1356,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.firstname",{"_index":1358,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.lastname",{"_index":1359,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.middlename",{"_index":1362,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.name",{"_index":1373,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.nameextension",{"_index":1363,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.username",{"_index":1357,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedatecolumn",{"_index":142,"title":{},"body":{"entities/Announcement.html":{},"entities/Appointment.html":{},"entities/DocumentApplication.html":{},"entities/User.html":{}}}],["updatedatecolumn({name",{"_index":1096,"title":{},"body":{"entities/DocumentApplication.html":{},"entities/User.html":{}}}],["updatedocumentapplicationdto",{"_index":1176,"title":{"classes/UpdateDocumentApplicationDto.html":{}},"body":{"controllers/DocumentApplicationsController.html":{},"classes/UpdateDocumentApplicationDto.html":{},"coverage.html":{}}}],["updatedto",{"_index":1175,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["updateduser",{"_index":1570,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["updateduser.defaultrole?.name",{"_index":1573,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["updatepassword(email",{"_index":1640,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["updateprofile",{"_index":2260,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["updatequeuedto",{"_index":2555,"title":{"classes/UpdateQueueDto.html":{}},"body":{"classes/UpdateQueueDto.html":{},"coverage.html":{}}}],["updates",{"_index":725,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"interfaces/LockoutData.html":{},"classes/QueueGateway.html":{},"classes/QueueNotificationDto.html":{},"interfaces/RequestWithUser.html":{},"index.html":{}}}],["updatestatus",{"_index":558,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updatestatus(id",{"_index":608,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updatestatusdto",{"_index":2666,"title":{},"body":{"controllers/UsersController.html":{}}}],["updatestatusdto.isactive",{"_index":2690,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuserdto",{"_index":14,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateuserdto.defaultroleid",{"_index":1620,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["updateuserdto.email",{"_index":1542,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["updateuserdto.firstname",{"_index":1554,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["updateuserdto.lastname",{"_index":1556,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["updateuserdto.middlename",{"_index":1555,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["updateuserdto.nameextension",{"_index":1557,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["updateuserdto.password",{"_index":1548,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["updateuserdto.roleids",{"_index":1609,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["updateuserdto.roleids.includes(updateuserdto.defaultroleid",{"_index":1628,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["updateuserdto.roleids.join",{"_index":1618,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["updateuserdto.roleids.length",{"_index":1610,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["updateuserdto.username",{"_index":1545,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["updateuserdto:22",{"_index":61,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:27",{"_index":86,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:37",{"_index":84,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:42",{"_index":65,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:47",{"_index":71,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:52",{"_index":68,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:60",{"_index":77,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:68",{"_index":59,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:76",{"_index":56,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto['name",{"_index":1563,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["updateuserinfo(userid",{"_index":1541,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["updateuserstatusdto",{"_index":2565,"title":{"classes/UpdateUserStatusDto.html":{}},"body":{"classes/UpdateUserStatusDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["updating",{"_index":96,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"interfaces/LockoutData.html":{},"classes/UpdateUserDto.html":{}}}],["upload",{"_index":1186,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"injectables/MinioService-1.html":{}}}],["uploaddocument",{"_index":1135,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["uploaddocument(id",{"_index":1181,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["uploaded",{"_index":1721,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["uploaded_at",{"_index":1289,"title":{},"body":{"entities/DocumentFile.html":{}}}],["uploadedat",{"_index":1271,"title":{},"body":{"entities/DocumentFile.html":{}}}],["uploadedfile",{"_index":1189,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["uploadfile",{"_index":1669,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["uploadfile(file",{"_index":1676,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["uploading",{"_index":1777,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["uppercase",{"_index":456,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["url",{"_index":1167,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["usage",{"_index":2358,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["use",{"_index":333,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService-1.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{}}}],["used",{"_index":1833,"title":{},"body":{"injectables/OTPService.html":{},"interfaces/RequestWithUser.html":{}}}],["usefactory",{"_index":319,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["useguards",{"_index":611,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard",{"_index":634,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["useguards(rolesguard",{"_index":644,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["useinterceptors",{"_index":1188,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["user",{"_index":12,"title":{"entities/User.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"modules/AuthModule.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/QueueDetails.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":2264,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["user'})@isoptional()@isnumber",{"_index":1035,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.defaultrole?.name",{"_index":1341,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.defaultroleid",{"_index":1522,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["user.dto",{"_index":1300,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":7,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:102",{"_index":1036,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:19",{"_index":1040,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":2561,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:27",{"_index":1063,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:36",{"_index":1057,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:37",{"_index":2564,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:42",{"_index":2562,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:44",{"_index":1042,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:47",{"_index":2563,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:52",{"_index":1046,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:60",{"_index":1043,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:68",{"_index":1051,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:76",{"_index":1054,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:84",{"_index":1033,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:90",{"_index":40,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["user.dto.ts:94",{"_index":1060,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:99",{"_index":46,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["user.email",{"_index":1237,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.firstname",{"_index":1327,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.id",{"_index":641,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/LockoutData.html":{}}}],["user.lastname",{"_index":1328,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.middlename",{"_index":1369,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.nameextension",{"_index":1372,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.password",{"_index":1437,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["user.roles",{"_index":2481,"title":{},"body":{"entities/Role.html":{},"injectables/RolesService.html":{}}}],["user.roles.map((role",{"_index":1339,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.roles.some((role",{"_index":679,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{}}}],["user.username",{"_index":1329,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user/:userid",{"_index":2272,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["user?.id",{"_index":1230,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["user?.roles.some((role",{"_index":1228,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["user@example.com",{"_index":405,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/AppointmentNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/QueueNotificationDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["user@example.com'})@isemail",{"_index":2027,"title":{},"body":{"classes/QueueNotificationDto.html":{}}}],["user@example.com'})@isemail()@isnotempty",{"_index":719,"title":{},"body":{"classes/AppointmentNotificationDto.html":{}}}],["user_id",{"_index":1099,"title":{},"body":{"entities/DocumentApplication.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["user_roles",{"_index":2590,"title":{},"body":{"entities/User.html":{}}}],["userid",{"_index":518,"title":{},"body":{"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"interfaces/AuthenticatedUser.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"entities/QueueDetails.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{}}}],["username",{"_index":28,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["username'})@isoptional()@isstring",{"_index":2610,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["userquerydto",{"_index":2601,"title":{"classes/UserQueryDto.html":{}},"body":{"classes/UserQueryDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["userqueues",{"_index":2186,"title":{},"body":{"controllers/QueuesController.html":{}}}],["userqueues.length",{"_index":2188,"title":{},"body":{"controllers/QueuesController.html":{}}}],["userqueues.map((queue",{"_index":2189,"title":{},"body":{"controllers/QueuesController.html":{}}}],["userresponsedto",{"_index":1868,"title":{"classes/UserResponseDto.html":{}},"body":{"classes/PaginatedUsersResponseDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["userroles",{"_index":1622,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["userroles.map((role",{"_index":2466,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["userroles.some",{"_index":1625,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["users",{"_index":1148,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Role.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users.controller",{"_index":2702,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.map((user",{"_index":1337,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["users.service",{"_index":2671,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/entities/user.entity",{"_index":542,"title":{},"body":{"entities/Appointment.html":{},"modules/AuthModule.html":{},"entities/DocumentApplication.html":{},"interfaces/LockoutData.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{}}}],["users/users.module",{"_index":301,"title":{},"body":{"modules/AppModule.html":{}}}],["usersbyrole",{"_index":1308,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["usersbyroledto",{"_index":2638,"title":{"classes/UsersByRoleDto.html":{}},"body":{"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"coverage.html":{}}}],["userscontroller",{"_index":2641,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":290,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":1316,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["usersservice",{"_index":1313,"title":{"injectables/UsersService.html":{}},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["userstats",{"_index":1304,"title":{"interfaces/UserStats.html":{}},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userstatsresponsedto",{"_index":2631,"title":{"classes/UserStatsResponseDto.html":{}},"body":{"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"coverage.html":{}}}],["userupdatefields",{"_index":1568,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["userwithhashedpassword",{"_index":2692,"title":{},"body":{"controllers/UsersController.html":{}}}],["userwithoutpassword",{"_index":1338,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["userwithroles",{"_index":2695,"title":{},"body":{"controllers/UsersController.html":{}}}],["uses",{"_index":1701,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"interfaces/RequestWithUser.html":{}}}],["usessl",{"_index":1689,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["usesslvalue",{"_index":1756,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["using",{"_index":378,"title":{},"body":{"modules/AppModule.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{},"index.html":{}}}],["v3",{"_index":1783,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["valid",{"_index":411,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["validate",{"_index":1417,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["validate(payload",{"_index":919,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["validatepasswordstrength(password",{"_index":1647,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["validates",{"_index":2319,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["validateuser(logindto",{"_index":1434,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["validating",{"_index":907,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["validation",{"_index":920,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["validator",{"_index":93,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/ApplicationNotificationDto.html":{},"classes/AppointmentNotificationDto.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{},"classes/QueueNotificationDto.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserQueryDto.html":{},"classes/VerifyOtpDto.html":{},"dependencies.html":{}}}],["validity",{"_index":775,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["value",{"_index":172,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"classes/SendOtpDto.html":{},"classes/UserQueryDto.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["varchar",{"_index":126,"title":{},"body":{"entities/Announcement.html":{}}}],["variable",{"_index":335,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{}}}],["variables",{"_index":913,"title":{"miscellaneous/variables.html":{}},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["vars",{"_index":1444,"title":{},"body":{"interfaces/LockoutData.html":{},"controllers/UsersController.html":{}}}],["verification",{"_index":422,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["verification'})@isstring()@isoptional",{"_index":2538,"title":{},"body":{"classes/SendOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["verified",{"_index":1802,"title":{},"body":{"entities/OTP.html":{},"injectables/OTPService.html":{},"interfaces/RequestWithUser.html":{}}}],["verifies",{"_index":2317,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["verify",{"_index":1585,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["verifying",{"_index":2329,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["verifyotp",{"_index":1816,"title":{},"body":{"injectables/OTPService.html":{},"interfaces/RequestWithUser.html":{}}}],["verifyotp(email",{"_index":1823,"title":{},"body":{"injectables/OTPService.html":{}}}],["verifyotpdto",{"_index":424,"title":{"classes/VerifyOtpDto.html":{}},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{}}}],["version",{"_index":2924,"title":{},"body":{"properties.html":{}}}],["via",{"_index":442,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["video",{"_index":2880,"title":{},"body":{"index.html":{}}}],["view",{"_index":2681,"title":{},"body":{"controllers/UsersController.html":{}}}],["visit",{"_index":2870,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":2883,"title":{},"body":{"index.html":{}}}],["void",{"_index":1951,"title":{},"body":{"classes/QueueGateway.html":{}}}],["vs",{"_index":2326,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["waiting",{"_index":2030,"title":{},"body":{"classes/QueueNotificationDto.html":{}}}],["walk",{"_index":2182,"title":{},"body":{"controllers/QueuesController.html":{}}}],["watch",{"_index":2832,"title":{},"body":{"index.html":{}}}],["we'll",{"_index":1601,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["website",{"_index":2914,"title":{},"body":{"index.html":{}}}],["websocketgateway",{"_index":1971,"title":{},"body":{"classes/QueueGateway.html":{}}}],["websocketserver",{"_index":1946,"title":{},"body":{"classes/QueueGateway.html":{}}}],["weekend",{"_index":779,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["weekends",{"_index":784,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["welcome",{"_index":2249,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["what's",{"_index":2279,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["willbeassigned",{"_index":1627,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["without",{"_index":2694,"title":{},"body":{"controllers/UsersController.html":{}}}],["wk001",{"_index":2040,"title":{},"body":{"classes/QueueNotificationDto.html":{}}}],["wk001'})@isstring",{"_index":2036,"title":{},"body":{"classes/QueueNotificationDto.html":{}}}],["working",{"_index":2276,"title":{},"body":{"interfaces/RequestWithUser.html":{},"index.html":{}}}],["world",{"_index":391,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":2893,"title":{},"body":{"index.html":{}}}],["yes",{"_index":576,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService-1.html":{}}}],["you'd",{"_index":2907,"title":{},"body":{"index.html":{}}}],["you're",{"_index":2840,"title":{},"body":{"index.html":{}}}],["yyyy",{"_index":858,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["z\\\\d@$!%*?&]{8",{"_index":450,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["z\\d",{"_index":455,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["z\\d@$!%*?&]{8,}$'})@isstring()@length(8",{"_index":2470,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["z])(?=.*[a",{"_index":447,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["z])(?=.*\\\\d)(?=.*[@$!%*?&])[a",{"_index":448,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*?&])[a",{"_index":454,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["za",{"_index":449,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["zone",{"_index":377,"title":{},"body":{"modules/AppModule.html":{}}}],["zoom",{"_index":221,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AdminUpdateUserDto.html":{"url":"classes/AdminUpdateUserDto.html","title":"class - AdminUpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AdminUpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/update-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for admin to update any user\n\n            \n\n            \n                Extends\n            \n            \n                            UpdateUserDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                defaultRoleId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                roleIds\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                contactNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                middleName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                nameExtension\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        defaultRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Default role ID for the user', example: 2})@IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        roleIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Array of role IDs to assign to the user', example: undefined, type: undefined})@IsArray()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:99\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Complete address', example: '123 Main St, San Ildefonso, Bulacan'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:76\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        contactNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Contact number', example: '09123456789'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:68\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User email address', example: 'test@example.com'})@IsEmail()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:22\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'First name', example: 'John'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:42\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Last name', example: 'Doe'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:52\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Middle name', example: 'Robert'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:47\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        nameExtension\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Name extension (e.g., Jr., III)', example: 'Jr.'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:60\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User password (min 8 characters)', example: 'password123', minLength: 8})@IsString()@IsOptional()@MinLength(8)\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:37\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Username', example: 'john_doe'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:27\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsOptional,\n  IsString,\n  MinLength,\n  IsNumber,\n  IsArray,\n} from 'class-validator';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\n/**\n * DTO for updating user information (citizen)\n * @class UpdateUserDto\n */\nexport class UpdateUserDto {\n  @ApiPropertyOptional({\n    description: 'User email address',\n    example: 'test@example.com',\n  })\n  @IsEmail()\n  @IsOptional()\n  email?: string;\n\n  @ApiPropertyOptional({ description: 'Username', example: 'john_doe' })\n  @IsString()\n  @IsOptional()\n  username?: string;\n\n  @ApiPropertyOptional({\n    description: 'User password (min 8 characters)',\n    example: 'password123',\n    minLength: 8,\n  })\n  @IsString()\n  @IsOptional()\n  @MinLength(8)\n  password?: string;\n\n  @ApiPropertyOptional({ description: 'First name', example: 'John' })\n  @IsString()\n  @IsOptional()\n  firstName?: string;\n\n  @ApiPropertyOptional({ description: 'Middle name', example: 'Robert' })\n  @IsString()\n  @IsOptional()\n  middleName?: string;\n\n  @ApiPropertyOptional({ description: 'Last name', example: 'Doe' })\n  @IsString()\n  @IsOptional()\n  lastName?: string;\n\n  @ApiPropertyOptional({\n    description: 'Name extension (e.g., Jr., III)',\n    example: 'Jr.',\n  })\n  @IsString()\n  @IsOptional()\n  nameExtension?: string;\n\n  @ApiPropertyOptional({\n    description: 'Contact number',\n    example: '09123456789',\n  })\n  @IsString()\n  @IsOptional()\n  contactNumber?: string;\n\n  @ApiPropertyOptional({\n    description: 'Complete address',\n    example: '123 Main St, San Ildefonso, Bulacan',\n  })\n  @IsString()\n  @IsOptional()\n  address?: string;\n}\n\n/**\n * DTO for admin to update any user\n * @class AdminUpdateUserDto\n */\nexport class AdminUpdateUserDto extends UpdateUserDto {\n  @ApiPropertyOptional({\n    description: 'Default role ID for the user',\n    example: 2,\n  })\n  @IsNumber()\n  @IsOptional()\n  defaultRoleId?: number;\n\n  @ApiPropertyOptional({\n    description: 'Array of role IDs to assign to the user',\n    example: [1, 2],\n    type: [Number],\n  })\n  @IsArray()\n  @IsOptional()\n  roleIds?: number[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Announcement.html":{"url":"entities/Announcement.html","title":"entity - Announcement","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Announcement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/announcement/entities/announcement.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                createdBy\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                image\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                title\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/entities/announcement.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 100, default: 'admin'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/entities/announcement.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/entities/announcement.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/entities/announcement.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 500, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/entities/announcement.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'boolean', default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/entities/announcement.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/entities/announcement.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/entities/announcement.entity.ts:33\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  CreateDateColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity('announcements')\nexport class Announcement {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ type: 'varchar', length: 255 })\n  title: string;\n\n  @Column({ type: 'text' })\n  description: string;\n\n  @Column({ type: 'varchar', length: 500, nullable: true })\n  image: string;\n\n  @Column({ type: 'boolean', default: true })\n  isActive: boolean;\n\n  @Column({ type: 'varchar', length: 100, default: 'admin' })\n  createdBy: string;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AnnouncementController.html":{"url":"controllers/AnnouncementController.html","title":"controller - AnnouncementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AnnouncementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/announcement/announcement.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                announcements\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                getRecentAnnouncements\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createAnnouncementDto: CreateAnnouncementDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createAnnouncementDto\n                                            \n                                                            CreateAnnouncementDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getRecentAnnouncements\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRecentAnnouncements(limit: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('recent')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    5\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.controller.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateAnnouncementDto: UpdateAnnouncementDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.controller.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateAnnouncementDto\n                                            \n                                                            UpdateAnnouncementDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  ParseIntPipe,\n  Query,\n} from '@nestjs/common';\nimport { AnnouncementService } from './announcement.service';\nimport { CreateAnnouncementDto } from './dto/create-announcement.dto';\nimport { UpdateAnnouncementDto } from './dto/update-announcement.dto';\n\n@Controller('announcements')\nexport class AnnouncementController {\n  constructor(private readonly announcementService: AnnouncementService) {}\n\n  @Post()\n  create(@Body() createAnnouncementDto: CreateAnnouncementDto) {\n    return this.announcementService.create(createAnnouncementDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.announcementService.findAll();\n  }\n\n  @Get('recent')\n  getRecentAnnouncements(@Query('limit', ParseIntPipe) limit: number = 5) {\n    return this.announcementService.getRecentAnnouncements(limit);\n  }\n\n  @Get(':id')\n  findOne(@Param('id', ParseIntPipe) id: number) {\n    return this.announcementService.findOne(id);\n  }\n\n  @Patch(':id')\n  update(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() updateAnnouncementDto: UpdateAnnouncementDto,\n  ) {\n    return this.announcementService.update(id, updateAnnouncementDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id', ParseIntPipe) id: number) {\n    return this.announcementService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AnnouncementModule.html":{"url":"modules/AnnouncementModule.html","title":"module - AnnouncementModule","body":"\n                   \n\n\n\n\n    Modules\n    AnnouncementModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AnnouncementModule\n\n\n\ncluster_AnnouncementModule_exports\n\n\n\ncluster_AnnouncementModule_providers\n\n\n\n\nAnnouncementService \n\nAnnouncementService \n\n\n\nAnnouncementModule\n\nAnnouncementModule\n\nAnnouncementService  -->\n\nAnnouncementModule->AnnouncementService \n\n\n\n\n\nAnnouncementService\n\nAnnouncementService\n\nAnnouncementModule -->\n\nAnnouncementService->AnnouncementModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/announcement/announcement.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AnnouncementService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AnnouncementController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AnnouncementService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AnnouncementService } from './announcement.service';\nimport { AnnouncementController } from './announcement.controller';\nimport { Announcement } from './entities/announcement.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Announcement])],\n  controllers: [AnnouncementController],\n  providers: [AnnouncementService],\n  exports: [AnnouncementService],\n})\nexport class AnnouncementModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AnnouncementService.html":{"url":"injectables/AnnouncementService.html","title":"injectable - AnnouncementService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AnnouncementService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/announcement/announcement.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getRecentAnnouncements\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(announcementRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/announcement/announcement.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        announcementRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createAnnouncementDto: CreateAnnouncementDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createAnnouncementDto\n                                            \n                                                            CreateAnnouncementDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getRecentAnnouncements\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRecentAnnouncements(limit: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.service.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    5\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.service.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateAnnouncementDto: UpdateAnnouncementDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.service.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateAnnouncementDto\n                                            \n                                                            UpdateAnnouncementDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Announcement } from './entities/announcement.entity';\nimport { CreateAnnouncementDto } from './dto/create-announcement.dto';\nimport { UpdateAnnouncementDto } from './dto/update-announcement.dto';\n\n@Injectable()\nexport class AnnouncementService {\n  constructor(\n    @InjectRepository(Announcement)\n    private announcementRepository: Repository,\n  ) {}\n\n  async create(\n    createAnnouncementDto: CreateAnnouncementDto,\n  ): Promise {\n    const announcement = this.announcementRepository.create(\n      createAnnouncementDto,\n    );\n    return await this.announcementRepository.save(announcement);\n  }\n\n  async findAll(): Promise {\n    return await this.announcementRepository.find({\n      where: { isActive: true },\n      order: { createdAt: 'DESC' },\n    });\n  }\n\n  async findOne(id: number): Promise {\n    const announcement = await this.announcementRepository.findOne({\n      where: { id, isActive: true },\n    });\n\n    if (!announcement) {\n      throw new NotFoundException(`Announcement with ID ${id} not found`);\n    }\n\n    return announcement;\n  }\n\n  async update(\n    id: number,\n    updateAnnouncementDto: UpdateAnnouncementDto,\n  ): Promise {\n    const announcement = await this.findOne(id);\n\n    Object.assign(announcement, updateAnnouncementDto);\n    return await this.announcementRepository.save(announcement);\n  }\n\n  async remove(id: number): Promise {\n    const announcement = await this.findOne(id);\n    announcement.isActive = false; // Soft delete\n    await this.announcementRepository.save(announcement);\n  }\n\n  async getRecentAnnouncements(limit: number = 5): Promise {\n    return await this.announcementRepository.find({\n      where: { isActive: true },\n      order: { createdAt: 'DESC' },\n      take: limit,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                            \n                                    \n                                healthCheck\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        healthCheck\n                        \n                    \n                \n            \n            \n                \n                        \n                    healthCheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('health')\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     { status: string; }\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n\n  @Get('health')\n  healthCheck() {\n    return { status: 'ok' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAnnouncementModule\n\nAnnouncementModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAnnouncementModule->AppModule\n\n\n\n\n\nAppointmentModule\n\nAppointmentModule\n\nAppModule -->\n\nAppointmentModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nDocumentApplicationsModule\n\nDocumentApplicationsModule\n\nAppModule -->\n\nDocumentApplicationsModule->AppModule\n\n\n\n\n\nQueueModule\n\nQueueModule\n\nAppModule -->\n\nQueueModule->AppModule\n\n\n\n\n\nRolesModule\n\nRolesModule\n\nAppModule -->\n\nRolesModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nAppModule -->\n\nEmailService->AppModule\n\n\n\n\n\nOTPService\n\nOTPService\n\nAppModule -->\n\nOTPService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            EmailService\n                        \n                        \n                            OTPService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AnnouncementModule\n                        \n                        \n                            AppointmentModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            DocumentApplicationsModule\n                        \n                        \n                            QueueModule\n                        \n                        \n                            RolesModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ScheduleModule } from '@nestjs/schedule';\n// import { databaseConfig } from './config/database.config';\nimport { UsersModule } from './users/users.module';\nimport { AuthModule } from './auth/auth.module';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { RolesModule } from './roles/roles.module';\nimport { QueueModule } from './modules/queue/queue.module';\nimport { AppointmentModule } from './modules/appointment/appointment.module';\nimport { AnnouncementModule } from './modules/announcement/announcement.module';\nimport { DocumentApplicationsModule } from './modules/document-applications/document-applications.module';\nimport { OTP } from './entities/otp.entity';\nimport { OTPService } from './services/otp.service';\nimport { EmailService } from './services/email.service';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'mysql',\n        host: configService.get('DB_HOST'),\n        port: configService.get('DB_PORT'),\n        username: configService.get('DB_USERNAME'),\n        password: configService.get('DB_PASSWORD'),\n        database: configService.get('DB_NAME'),\n        entities: [__dirname + '/**/*.entity{.ts,.js}'],\n        synchronize: configService.get('DB_SYNCHRONIZE') === 'true', // Use environment variable\n        logging: configService.get('DB_LOGGING') === 'true', // Use environment variable\n        logger: 'advanced-console',\n        // Aiven MySQL SSL Configuration\n        ssl:\n          configService.get('NODE_ENV') === 'production'\n            ? {\n                rejectUnauthorized:\n                  configService.get('DB_SSL_REJECT_UNAUTHORIZED') === 'true',\n              }\n            : false,\n        // Connection pool settings for production\n        extra: {\n          connectionLimit: 10,\n          acquireTimeout: 60000,\n          timeout: 60000,\n        },\n        // Prevent data loss in development (below code is for development only)\n        // synchronize: true,\n        migrationsRun: false,\n        dropSchema: false,\n\n        // Only for development environments!\n        beforeConnect: async (connection): Promise => {\n          if (configService.get('NODE_ENV') !== 'production') {\n            const conn = connection as {\n              query: (sql: string) => Promise;\n            };\n            // Disable foreign key checks for development\n            await conn.query('SET FOREIGN_KEY_CHECKS=0;');\n            // Set time zone using environment variable\n            await conn.query(\n              `SET time_zone = '${configService.get('DB_TIMEZONE') || '+08:00'}';`,\n            );\n          }\n        },\n        afterConnect: async (connection): Promise => {\n          if (configService.get('NODE_ENV') !== 'production') {\n            await (\n              connection as { query: (sql: string) => Promise }\n            ).query('SET FOREIGN_KEY_CHECKS=1;');\n          }\n        },\n      }),\n    }),\n    UsersModule,\n    AuthModule,\n    RolesModule,\n    QueueModule,\n    AppointmentModule,\n    AnnouncementModule,\n    DocumentApplicationsModule,\n    ScheduleModule.forRoot(),\n    TypeOrmModule.forFeature([OTP]),\n  ],\n  controllers: [AppController],\n  providers: [AppService, OTPService, EmailService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ApplicationNotificationDto.html":{"url":"classes/ApplicationNotificationDto.html","title":"class - ApplicationNotificationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ApplicationNotificationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/otp.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                applicationId\n                            \n                            \n                                    \n                                    \n                                applicationType\n                            \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        applicationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Application ID', example: 'APP-001'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/otp.dto.ts:133\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        applicationType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Type of application', example: 'Birth Certificate'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/otp.dto.ts:148\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Recipient email address', example: 'user@example.com', format: 'email'})@IsEmail({}, {message: 'Please provide a valid email address'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/otp.dto.ts:126\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Application status', example: 'Approved', enum: undefined})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/otp.dto.ts:141\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsString,\n  IsOptional,\n  Length,\n  Matches,\n} from 'class-validator';\n\nexport class SendOtpDto {\n  @ApiProperty({\n    description: 'Email address to send OTP to',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiPropertyOptional({\n    description: 'Purpose of the OTP',\n    example: 'verification',\n    enum: ['verification', 'password_reset'],\n    default: 'verification',\n  })\n  @IsString()\n  @IsOptional()\n  purpose?: string = 'verification';\n}\n\nexport class VerifyOtpDto {\n  @ApiProperty({\n    description: 'Email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    description: '6-digit OTP code',\n    example: '123456',\n    minLength: 6,\n    maxLength: 6,\n    pattern: '^[0-9]{6}$',\n  })\n  @IsString()\n  @Length(6, 6, { message: 'OTP must be exactly 6 digits' })\n  @Matches(/^[0-9]{6}$/, { message: 'OTP must contain only numbers' })\n  otp: string;\n\n  @ApiPropertyOptional({\n    description: 'Purpose of the OTP verification',\n    example: 'verification',\n    enum: ['verification', 'password_reset'],\n    default: 'verification',\n  })\n  @IsString()\n  @IsOptional()\n  purpose?: string = 'verification';\n}\n\nexport class ForgotPasswordDto {\n  @ApiProperty({\n    description: 'Registered email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n}\n\nexport class ResetPasswordDto {\n  @ApiProperty({\n    description: 'Email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    description: '6-digit OTP code received via email',\n    example: '123456',\n    minLength: 6,\n    maxLength: 6,\n    pattern: '^[0-9]{6}$',\n  })\n  @IsString()\n  @Length(6, 6, { message: 'OTP must be exactly 6 digits' })\n  @Matches(/^[0-9]{6}$/, { message: 'OTP must contain only numbers' })\n  otp: string;\n\n  @ApiProperty({\n    description: 'New password (must meet complexity requirements)',\n    example: 'NewSecure123!',\n    minLength: 8,\n    pattern:\n      '^(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)(?=.*[@$!%*?&])[A-Za-z\\\\d@$!%*?&]{8,}$',\n  })\n  @IsString()\n  @Length(8, 100, { message: 'Password must be at least 8 characters long' })\n  @Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/, {\n    message:\n      'Password must contain uppercase, lowercase, numbers, and special characters',\n  })\n  newPassword: string;\n}\n\nexport class TestOtpDto {\n  @ApiProperty({\n    description: 'Email address for testing OTP generation',\n    example: 'test@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n}\n\nexport class ApplicationNotificationDto {\n  @ApiProperty({\n    description: 'Recipient email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    description: 'Application ID',\n    example: 'APP-001',\n  })\n  @IsString()\n  applicationId: string;\n\n  @ApiProperty({\n    description: 'Application status',\n    example: 'Approved',\n    enum: ['Pending', 'Approved', 'Rejected', 'Ready for Pickup'],\n  })\n  @IsString()\n  status: string;\n\n  @ApiProperty({\n    description: 'Type of application',\n    example: 'Birth Certificate',\n  })\n  @IsString()\n  applicationType: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/ApplicationStatusHistory.html":{"url":"entities/ApplicationStatusHistory.html","title":"entity - ApplicationStatusHistory","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  ApplicationStatusHistory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/document-applications/entities/application-status-history.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                application\n                            \n                            \n                                    \n                                applicationId\n                            \n                            \n                                    \n                                changedAt\n                            \n                            \n                                    \n                                changedBy\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                newStatus\n                            \n                            \n                                    \n                                oldStatus\n                            \n                            \n                                    \n                                statusMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        application\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DocumentApplication\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, app => app.statusHistory, {onDelete: 'CASCADE', nullable: false})@JoinColumn({name: 'application_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/application-status-history.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        applicationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'application_id', length: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/application-status-history.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        changedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'changed_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/application-status-history.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        changedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'changed_by', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/application-status-history.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/application-status-history.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        newStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'new_status', length: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/application-status-history.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        oldStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'old_status', length: 50, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/application-status-history.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        statusMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'status_message', type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/application-status-history.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  CreateDateColumn,\n  ManyToOne,\n  JoinColumn,\n  Index,\n} from 'typeorm';\nimport { DocumentApplication } from './document-application.entity';\n\n@Entity('application_status_history')\n@Index(['applicationId'])\n@Index(['changedAt'])\nexport class ApplicationStatusHistory {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ name: 'application_id', length: 50 })\n  applicationId: string;\n\n  @Column({ name: 'old_status', length: 50, nullable: true })\n  oldStatus: string;\n\n  @Column({ name: 'new_status', length: 50 })\n  newStatus: string;\n\n  @Column({ name: 'status_message', type: 'text', nullable: true })\n  statusMessage: string;\n\n  @Column({ name: 'changed_by', nullable: true })\n  changedBy: number;\n\n  @CreateDateColumn({ name: 'changed_at' })\n  changedAt: Date;\n\n  // Relations\n  @ManyToOne(() => DocumentApplication, (app) => app.statusHistory, {\n    onDelete: 'CASCADE',\n    nullable: false,\n  })\n  @JoinColumn({ name: 'application_id' })\n  application: DocumentApplication;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Appointment.html":{"url":"entities/Appointment.html","title":"entity - Appointment","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Appointment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/appointment/entities/appointment.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                address\n                            \n                            \n                                    \n                                appointmentDate\n                            \n                            \n                                    \n                                appointmentNumber\n                            \n                            \n                                    \n                                appointmentTime\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isGuest\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                middleInitial\n                            \n                            \n                                    \n                                phoneNumber\n                            \n                            \n                                    \n                                reasonOfVisit\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    \n                                user\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        appointmentDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'date'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        appointmentNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        appointmentTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isGuest\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        middleInitial\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reasonOfVisit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AppointmentStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: AppointmentStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {nullable: true})@JoinColumn({name: 'userId', foreignKeyConstraintName: 'FK_appointment_user'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:59\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  ManyToOne,\n  JoinColumn,\n} from 'typeorm';\nimport { User } from '../../../users/entities/user.entity';\n\nexport enum AppointmentStatus {\n  PENDING = 'pending',\n  CONFIRMED = 'confirmed',\n  COMPLETED = 'completed',\n  CANCELLED = 'cancelled',\n}\n\n@Entity('appointments')\nexport class Appointment {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true })\n  appointmentNumber: string;\n\n  @Column()\n  firstName: string;\n\n  @Column()\n  lastName: string;\n\n  @Column({ nullable: true })\n  middleInitial: string;\n\n  @Column()\n  address: string;\n\n  @Column()\n  phoneNumber: string;\n\n  @Column()\n  reasonOfVisit: string;\n\n  @Column({ type: 'date' })\n  appointmentDate: string;\n\n  @Column()\n  appointmentTime: string;\n\n  @Column({\n    type: 'enum',\n    enum: AppointmentStatus,\n    default: AppointmentStatus.PENDING,\n  })\n  status: AppointmentStatus;\n\n  @Column({ nullable: true })\n  userId: number;\n\n  @ManyToOne(() => User, { nullable: true })\n  @JoinColumn({\n    name: 'userId',\n    foreignKeyConstraintName: 'FK_appointment_user',\n  })\n  user: User;\n\n  @Column({ default: false })\n  isGuest: boolean;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppointmentController.html":{"url":"controllers/AppointmentController.html","title":"controller - AppointmentController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppointmentController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/appointment/appointment.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                appointments\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                findByAppointmentNumber\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findUserAppointments\n                            \n                            \n                                    \n                                    Async\n                                getAvailableSlots\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getByDate\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getByDateRange\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getStats\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createAppointmentDto: CreateAppointmentDto, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create new appointment'})@ApiResponse({status: 201, description: 'Appointment created successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createAppointmentDto\n                                            \n                                                            CreateAppointmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(includeUser?: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(RolesGuard)@Roles('admin', 'staff', 'super_admin')@ApiOperation({summary: 'Get all appointments (Admin/Staff only)'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                includeUser\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findByAppointmentNumber\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByAppointmentNumber(appointmentNumber: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('by-number/:number')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:135\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                appointmentNumber\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string, includeUser?: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'Get appointment by ID'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:123\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                includeUser\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findUserAppointments\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserAppointments(user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('mine')@ApiOperation({summary: 'Get user appointments'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getAvailableSlots\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAvailableSlots(date: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('available-slots')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:113\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getByDate\n                        \n                    \n                \n            \n            \n                \n                        \n                    getByDate(date: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('by-date')@UseGuards(JwtAuthGuard, RolesGuard)@Roles('admin', 'staff', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getByDateRange\n                        \n                    \n                \n            \n            \n                \n                        \n                    getByDateRange(startDate: string, endDate: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('date-range')@UseGuards(JwtAuthGuard, RolesGuard)@Roles('admin', 'staff', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:96\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                startDate\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                endDate\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('stats')@UseGuards(JwtAuthGuard, RolesGuard)@Roles('admin', 'staff', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:77\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.NO_CONTENT)@ApiOperation({summary: 'Delete appointment'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:188\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateAppointmentDto: UpdateAppointmentDto, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOperation({summary: 'Update appointment'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:142\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateAppointmentDto\n                                            \n                                                            UpdateAppointmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(id: string, status: AppointmentStatus)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/status')@UseGuards(JwtAuthGuard, RolesGuard)@Roles('admin', 'staff', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:169\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                status\n                                            \n                                                            AppointmentStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n  Query,\n  BadRequestException,\n  HttpCode,\n  HttpStatus,\n  Logger,\n} from '@nestjs/common';\nimport { AppointmentService } from './appointment.service';\nimport { CreateAppointmentDto } from './dto/create-appointment.dto';\nimport { UpdateAppointmentDto } from './dto/update-appointment.dto';\nimport { JwtAuthGuard } from '../../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../../auth/guards/roles.guard';\nimport { Roles } from '../../auth/decorators/roles.decorator';\nimport { AppointmentStatus } from './entities/appointment.entity';\nimport { User } from '../../auth/decorators/user.decorator';\nimport { AuthenticatedUser } from '../../auth/jwt.strategy';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n} from '@nestjs/swagger';\n\n@ApiTags('Appointments')\n@Controller('appointments')\n@UseGuards(JwtAuthGuard)\n@ApiBearerAuth('JWT-auth')\nexport class AppointmentController {\n  private readonly logger = new Logger(AppointmentController.name);\n\n  constructor(private readonly appointmentService: AppointmentService) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Create new appointment' })\n  @ApiResponse({ status: 201, description: 'Appointment created successfully' })\n  async create(\n    @Body() createAppointmentDto: CreateAppointmentDto,\n    @User() user: AuthenticatedUser,\n  ) {\n    // Set the userId from the authenticated user\n    createAppointmentDto.userId = user.id;\n\n    this.logger.log(`Creating appointment for user ${user.id}`);\n    return this.appointmentService.create(createAppointmentDto);\n  }\n\n  @Get()\n  @UseGuards(RolesGuard)\n  @Roles('admin', 'staff', 'super_admin')\n  @ApiOperation({ summary: 'Get all appointments (Admin/Staff only)' })\n  async findAll(@Query('includeUser') includeUser?: string) {\n    this.logger.log('Fetching all appointments');\n\n    const relations = includeUser === 'false' ? [] : ['user'];\n\n    return this.appointmentService.findAll({ relations });\n  }\n\n  @Get('mine')\n  @ApiOperation({ summary: 'Get user appointments' })\n  async findUserAppointments(@User() user: AuthenticatedUser) {\n    this.logger.log(`Fetching appointments for user ${user.id}`);\n    return this.appointmentService.findAllByUser(user.id);\n  }\n\n  @Get('stats')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles('admin', 'staff', 'super_admin')\n  async getStats() {\n    this.logger.log('Fetching appointment statistics');\n    return this.appointmentService.getAppointmentsStats();\n  }\n\n  @Get('by-date')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles('admin', 'staff', 'super_admin')\n  async getByDate(@Query('date') date: string) {\n    if (!date) {\n      throw new BadRequestException('Date parameter is required');\n    }\n    this.logger.log(`Fetching appointments for date: ${date}`);\n    return this.appointmentService.getAppointmentsByDate(date);\n  }\n\n  @Get('date-range')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles('admin', 'staff', 'super_admin')\n  async getByDateRange(\n    @Query('start') startDate: string,\n    @Query('end') endDate: string,\n  ) {\n    if (!startDate || !endDate) {\n      throw new BadRequestException(\n        'Start and end date parameters are required',\n      );\n    }\n    this.logger.log(`Fetching appointments from ${startDate} to ${endDate}`);\n    return this.appointmentService.getAppointmentsByDateRange(\n      startDate,\n      endDate,\n    );\n  }\n\n  @Get('available-slots')\n  async getAvailableSlots(@Query('date') date: string) {\n    if (!date) {\n      throw new BadRequestException('Date parameter is required');\n    }\n    this.logger.log(`Fetching available slots for date: ${date}`);\n    return this.appointmentService.getAvailableSlots(date);\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: 'Get appointment by ID' })\n  async findOne(\n    @Param('id') id: string,\n    @Query('includeUser') includeUser?: string,\n  ) {\n    this.logger.log(`Fetching appointment ${id}`);\n\n    const relations = includeUser === 'false' ? [] : ['user'];\n\n    return this.appointmentService.findOne(+id, { relations });\n  }\n\n  @Get('by-number/:number')\n  async findByAppointmentNumber(@Param('number') appointmentNumber: string) {\n    this.logger.log(`Fetching appointment with number: ${appointmentNumber}`);\n    return this.appointmentService.findByAppointmentNumber(appointmentNumber);\n  }\n\n  @Patch(':id')\n  @ApiOperation({ summary: 'Update appointment' })\n  async update(\n    @Param('id') id: string,\n    @Body() updateAppointmentDto: UpdateAppointmentDto,\n    @User() user: AuthenticatedUser,\n  ) {\n    // Get the appointment to check if it belongs to the user\n    const appointment = await this.appointmentService.findOne(+id);\n\n    // If not admin and not the appointment owner, don't allow update\n    if (\n      !user.roles.some((role) =>\n        ['admin', 'staff', 'super_admin'].includes(role.name),\n      ) &&\n      appointment.userId !== user.id\n    ) {\n      throw new BadRequestException(\n        'You do not have permission to update this appointment',\n      );\n    }\n\n    this.logger.log(`Updating appointment with ID: ${id}`);\n    return this.appointmentService.update(+id, updateAppointmentDto);\n  }\n\n  @Patch(':id/status')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles('admin', 'staff', 'super_admin')\n  async updateStatus(\n    @Param('id') id: string,\n    @Body('status') status: AppointmentStatus,\n  ) {\n    if (!Object.values(AppointmentStatus).includes(status)) {\n      throw new BadRequestException(\n        `Invalid status. Must be one of: ${Object.values(AppointmentStatus).join(', ')}`,\n      );\n    }\n\n    this.logger.log(\n      `Updating status for appointment with ID: ${id} to ${status}`,\n    );\n    return this.appointmentService.updateStatus(+id, status);\n  }\n\n  @Delete(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  @ApiOperation({ summary: 'Delete appointment' })\n  async remove(@Param('id') id: string, @User() user: AuthenticatedUser) {\n    // Get the appointment to check if it belongs to the user\n    const appointment = await this.appointmentService.findOne(+id);\n\n    // If not admin and not the appointment owner, don't allow deletion\n    if (\n      !user.roles.some((role) =>\n        ['admin', 'staff', 'super_admin'].includes(role.name),\n      ) &&\n      appointment.userId !== user.id\n    ) {\n      throw new BadRequestException(\n        'You do not have permission to delete this appointment',\n      );\n    }\n\n    this.logger.log(`Deleting appointment with ID: ${id}`);\n    await this.appointmentService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppointmentModule.html":{"url":"modules/AppointmentModule.html","title":"module - AppointmentModule","body":"\n                   \n\n\n\n\n    Modules\n    AppointmentModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppointmentModule\n\n\n\ncluster_AppointmentModule_exports\n\n\n\ncluster_AppointmentModule_providers\n\n\n\n\nAppointmentService \n\nAppointmentService \n\n\n\nAppointmentModule\n\nAppointmentModule\n\nAppointmentService  -->\n\nAppointmentModule->AppointmentService \n\n\n\n\n\nAppointmentService\n\nAppointmentService\n\nAppointmentModule -->\n\nAppointmentService->AppointmentModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/appointment/appointment.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppointmentService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppointmentController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AppointmentService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AppointmentService } from './appointment.service';\nimport { AppointmentController } from './appointment.controller';\nimport { Appointment } from './entities/appointment.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Appointment])],\n  controllers: [AppointmentController],\n  providers: [AppointmentService],\n  exports: [AppointmentService],\n})\nexport class AppointmentModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AppointmentNotificationDto.html":{"url":"classes/AppointmentNotificationDto.html","title":"class - AppointmentNotificationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AppointmentNotificationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/appointment-notification.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                appointmentDetails\n                            \n                            \n                                    \n                                    \n                                    \n                                appointmentNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                reason\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        appointmentDetails\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Appointment details object', type: 'object', additionalProperties: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/appointment-notification.dto.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        appointmentNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Appointment number/ID', example: 'APPT-2024-001'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/appointment-notification.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Email address of the appointment holder', example: 'user@example.com'})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/appointment-notification.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Cancellation reason (for cancellations)', example: 'Cancelled by administrator'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/appointment-notification.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'New appointment status (for status updates)', example: 'confirmed'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/appointment-notification.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"confirmation\" | \"status_update\" | \"cancellation\" | \"reminder\"\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Type of notification to send', enum: undefined, example: 'confirmation'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/appointment-notification.dto.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsString,\n  IsNotEmpty,\n  IsOptional,\n  IsDateString,\n} from 'class-validator';\n\nexport class AppointmentNotificationDto {\n  @ApiProperty({\n    description: 'Email address of the appointment holder',\n    example: 'user@example.com',\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @ApiProperty({\n    description: 'Appointment number/ID',\n    example: 'APPT-2024-001',\n  })\n  @IsString()\n  @IsNotEmpty()\n  appointmentNumber: string;\n\n  @ApiProperty({\n    description: 'Type of notification to send',\n    enum: ['confirmation', 'status_update', 'cancellation', 'reminder'],\n    example: 'confirmation',\n  })\n  @IsString()\n  @IsNotEmpty()\n  type: 'confirmation' | 'status_update' | 'cancellation' | 'reminder';\n\n  @ApiPropertyOptional({\n    description: 'New appointment status (for status updates)',\n    example: 'confirmed',\n  })\n  @IsString()\n  @IsOptional()\n  status?: string;\n\n  @ApiPropertyOptional({\n    description: 'Cancellation reason (for cancellations)',\n    example: 'Cancelled by administrator',\n  })\n  @IsString()\n  @IsOptional()\n  reason?: string;\n\n  @ApiProperty({\n    description: 'Appointment details object',\n    type: 'object',\n    additionalProperties: true,\n  })\n  appointmentDetails: {\n    type: string;\n    date: string;\n    time: string;\n    firstName: string;\n    lastName: string;\n    phoneNumber?: string;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppointmentService.html":{"url":"injectables/AppointmentService.html","title":"injectable - AppointmentService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppointmentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/appointment/appointment.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                checkTimeSlotAvailability\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllByUser\n                            \n                            \n                                    Async\n                                findByAppointmentNumber\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Private\n                                generateAllTimeSlots\n                            \n                            \n                                    Async\n                                getAppointmentsByDate\n                            \n                            \n                                    Async\n                                getAppointmentsByDateRange\n                            \n                            \n                                    Async\n                                getAppointmentsStats\n                            \n                            \n                                    Async\n                                getAvailableSlots\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(appointmentRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/appointment/appointment.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        appointmentRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        checkTimeSlotAvailability\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkTimeSlotAvailability(date: string, time: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:316\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                time\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createAppointmentDto: CreateAppointmentDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createAppointmentDto\n                                            \n                                                            CreateAppointmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(options?: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllByUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllByUser(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:82\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByAppointmentNumber\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByAppointmentNumber(appointmentNumber: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:108\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                appointmentNumber\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number, options?: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:92\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        generateAllTimeSlots\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateAllTimeSlots()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:341\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     string[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAppointmentsByDate\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAppointmentsByDate(date: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:220\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAppointmentsByDateRange\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAppointmentsByDateRange(startDate: string, endDate: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:241\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                startDate\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                endDate\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAppointmentsStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAppointmentsStats()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:264\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAvailableSlots\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAvailableSlots(date: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:185\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:157\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateAppointmentDto: UpdateAppointmentDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:122\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateAppointmentDto\n                                            \n                                                            UpdateAppointmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(id: number, status: AppointmentStatus)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:170\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                status\n                                            \n                                                            AppointmentStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(AppointmentService.name)\n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/appointment.service.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  BadRequestException,\n  Logger,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, Between } from 'typeorm';\nimport { Appointment, AppointmentStatus } from './entities/appointment.entity';\nimport { CreateAppointmentDto } from './dto/create-appointment.dto';\nimport { UpdateAppointmentDto } from './dto/update-appointment.dto';\nimport { format, addDays, parseISO, isValid } from 'date-fns';\n\n@Injectable()\nexport class AppointmentService {\n  private readonly logger = new Logger(AppointmentService.name);\n\n  constructor(\n    @InjectRepository(Appointment)\n    private appointmentRepository: Repository,\n  ) {}\n\n  async create(\n    createAppointmentDto: CreateAppointmentDto,\n  ): Promise {\n    try {\n      // Check date validity\n      const date = parseISO(createAppointmentDto.appointmentDate);\n      if (!isValid(date)) {\n        throw new BadRequestException('Invalid appointment date');\n      }\n\n      // Check if date is a weekend\n      const dayOfWeek = date.getDay();\n      if (dayOfWeek === 0 || dayOfWeek === 6) {\n        throw new BadRequestException('Cannot book appointments on weekends');\n      }\n\n      // Check if date is in the past\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      if (date  {\n    return this.appointmentRepository.find({\n      relations: options?.relations || ['user'],\n      order: {\n        appointmentDate: 'ASC',\n        appointmentTime: 'ASC',\n      },\n    });\n  }\n\n  async findAllByUser(userId: number): Promise {\n    return this.appointmentRepository.find({\n      where: { userId },\n      order: {\n        appointmentDate: 'DESC',\n        appointmentTime: 'ASC',\n      },\n    });\n  }\n\n  async findOne(\n    id: number,\n    options?: { relations?: string[] },\n  ): Promise {\n    const appointment = await this.appointmentRepository.findOne({\n      where: { id },\n      relations: options?.relations || ['user'],\n    });\n\n    if (!appointment) {\n      throw new NotFoundException(`Appointment with ID ${id} not found`);\n    }\n\n    return appointment;\n  }\n\n  async findByAppointmentNumber(\n    appointmentNumber: string,\n  ): Promise {\n    const appointment = await this.appointmentRepository.findOne({\n      where: { appointmentNumber },\n    });\n\n    if (!appointment) {\n      throw new NotFoundException(`Appointment ${appointmentNumber} not found`);\n    }\n\n    return appointment;\n  }\n\n  async update(\n    id: number,\n    updateAppointmentDto: UpdateAppointmentDto,\n  ): Promise {\n    try {\n      const appointment = await this.findOne(id);\n\n      // If changing date or time, check availability\n      if (\n        updateAppointmentDto.appointmentDate ||\n        updateAppointmentDto.appointmentTime\n      ) {\n        const newDate =\n          updateAppointmentDto.appointmentDate || appointment.appointmentDate;\n        const newTime =\n          updateAppointmentDto.appointmentTime || appointment.appointmentTime;\n\n        if (\n          newDate !== appointment.appointmentDate ||\n          newTime !== appointment.appointmentTime\n        ) {\n          await this.checkTimeSlotAvailability(newDate, newTime);\n        }\n      }\n\n      // Update the appointment\n      const updated = Object.assign(appointment, updateAppointmentDto);\n      this.logger.log(`Updated appointment ${id}:`, updated);\n      return this.appointmentRepository.save(updated);\n    } catch (error) {\n      this.logger.error(`Error updating appointment ${id}:`, error);\n      throw error;\n    }\n  }\n\n  async remove(id: number): Promise {\n    try {\n      const result = await this.appointmentRepository.delete(id);\n      if (result.affected === 0) {\n        throw new NotFoundException(`Appointment with ID ${id} not found`);\n      }\n      this.logger.log(`Deleted appointment ${id}`);\n    } catch (error) {\n      this.logger.error(`Error deleting appointment ${id}:`, error);\n      throw error;\n    }\n  }\n\n  async updateStatus(\n    id: number,\n    status: AppointmentStatus,\n  ): Promise {\n    try {\n      const appointment = await this.findOne(id);\n      appointment.status = status;\n      this.logger.log(`Updated status for appointment ${id} to ${status}`);\n      return this.appointmentRepository.save(appointment);\n    } catch (error) {\n      this.logger.error(`Error updating status for appointment ${id}:`, error);\n      throw error;\n    }\n  }\n\n  async getAvailableSlots(date: string): Promise {\n    try {\n      // Parse the date\n      const parsedDate = parseISO(date);\n      if (!isValid(parsedDate)) {\n        throw new BadRequestException('Invalid date format');\n      }\n\n      // Get all appointments for the specified date\n      const existingAppointments = await this.appointmentRepository.find({\n        where: {\n          appointmentDate: date,\n          status: AppointmentStatus.PENDING || AppointmentStatus.CONFIRMED,\n        },\n        select: ['appointmentTime'],\n      });\n\n      const bookedSlots = existingAppointments.map(\n        (app) => app.appointmentTime,\n      );\n\n      // Generate all time slots (8:00 AM - 5:00 PM with 30min intervals)\n      const allTimeSlots = this.generateAllTimeSlots();\n\n      // Return only available slots\n      return allTimeSlots.filter((slot) => !bookedSlots.includes(slot));\n    } catch (error) {\n      this.logger.error(\n        `Error getting available slots for date ${date}:`,\n        error,\n      );\n      throw error;\n    }\n  }\n\n  async getAppointmentsByDate(date: string): Promise {\n    try {\n      const parsedDate = parseISO(date);\n      if (!isValid(parsedDate)) {\n        throw new BadRequestException('Invalid date format');\n      }\n\n      return this.appointmentRepository.find({\n        where: {\n          appointmentDate: date,\n        },\n        order: {\n          appointmentTime: 'ASC',\n        },\n      });\n    } catch (error) {\n      this.logger.error(`Error getting appointments for date ${date}:`, error);\n      throw error;\n    }\n  }\n\n  async getAppointmentsByDateRange(\n    startDate: string,\n    endDate: string,\n  ): Promise {\n    try {\n      return this.appointmentRepository.find({\n        where: {\n          appointmentDate: Between(startDate, endDate),\n        },\n        order: {\n          appointmentDate: 'ASC',\n          appointmentTime: 'ASC',\n        },\n      });\n    } catch (error) {\n      this.logger.error(\n        `Error getting appointments in range ${startDate} to ${endDate}:`,\n        error,\n      );\n      throw error;\n    }\n  }\n\n  async getAppointmentsStats() {\n    try {\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n\n      const tomorrow = addDays(today, 1);\n      tomorrow.setHours(0, 0, 0, 0);\n\n      // Get counts for different statuses\n      const [\n        pendingCount,\n        confirmedCount,\n        completedCount,\n        cancelledCount,\n        totalCount,\n      ] = await Promise.all([\n        this.appointmentRepository.count({\n          where: { status: AppointmentStatus.PENDING },\n        }),\n        this.appointmentRepository.count({\n          where: { status: AppointmentStatus.CONFIRMED },\n        }),\n        this.appointmentRepository.count({\n          where: { status: AppointmentStatus.COMPLETED },\n        }),\n        this.appointmentRepository.count({\n          where: { status: AppointmentStatus.CANCELLED },\n        }),\n        this.appointmentRepository.count(),\n      ]);\n\n      // Get today's appointments\n      const todayAppointments = await this.appointmentRepository.count({\n        where: {\n          appointmentDate: format(today, 'yyyy-MM-dd'),\n        },\n      });\n\n      return {\n        pending: pendingCount,\n        confirmed: confirmedCount,\n        completed: completedCount,\n        cancelled: cancelledCount,\n        total: totalCount,\n        today: todayAppointments,\n      };\n    } catch (error) {\n      this.logger.error('Error getting appointment stats:', error);\n      throw error;\n    }\n  }\n\n  private async checkTimeSlotAvailability(\n    date: string,\n    time: string,\n  ): Promise {\n    try {\n      // Check if time slot is already booked\n      const existingAppointment = await this.appointmentRepository.findOne({\n        where: {\n          appointmentDate: date,\n          appointmentTime: time,\n          status: AppointmentStatus.PENDING || AppointmentStatus.CONFIRMED,\n        },\n      });\n\n      if (existingAppointment) {\n        throw new BadRequestException('This time slot is already booked');\n      }\n    } catch (error) {\n      this.logger.error(\n        `Error checking time slot availability for ${date} at ${time}:`,\n        error,\n      );\n      throw error;\n    }\n  }\n  private generateAllTimeSlots(): string[] {\n    const slots: string[] = [];\n    let hour = 8;\n    let minute = 0;\n\n    while (hour \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nRolesModule\n\nRolesModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nRolesModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nEmailService \n\nEmailService \n\nEmailService  -->\n\nAuthModule->EmailService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nOTPService \n\nOTPService \n\nOTPService  -->\n\nAuthModule->OTPService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nAuthModule -->\n\nEmailService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nOTPService\n\nOTPService\n\nAuthModule -->\n\nOTPService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            EmailService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            OTPService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RolesModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            EmailService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            OTPService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { User } from '../users/entities/user.entity';\nimport { JwtStrategy } from './jwt.strategy';\nimport { RolesModule } from '../roles/roles.module';\nimport { OTP } from '../entities/otp.entity';\nimport { OTPService } from '../services/otp.service';\nimport { EmailService } from '../services/email.service';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([User, OTP]),\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        secret: configService.get('JWT_SECRET'),\n        signOptions: { expiresIn: '24h' },\n      }),\n    }),\n    RolesModule,\n  ],\n  providers: [AuthService, JwtStrategy, OTPService, EmailService],\n  controllers: [AuthController],\n  exports: [AuthService, JwtStrategy, PassportModule, OTPService, EmailService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthenticatedUser.html":{"url":"interfaces/AuthenticatedUser.html","title":"interface - AuthenticatedUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AuthenticatedUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            roles\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        roles:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\n\ninterface JwtPayload {\n  sub: number;\n  email: string;\n  roles?: string[];\n}\n\n// Strategy for validating JWT tokens in NestJS\nexport interface AuthenticatedUser {\n  id: number;\n  email: string;\n  roles: Array;\n}\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private configService: ConfigService) {\n    const secretKey = configService.get('JWT_SECRET');\n\n    if (!secretKey) {\n      throw new Error('JWT_SECRET is not defined in environment variables');\n    }\n\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: secretKey,\n    });\n  }\n\n  validate(payload: JwtPayload): AuthenticatedUser {\n    // Validation for the payload\n    if (!payload || payload.sub === undefined || isNaN(Number(payload.sub))) {\n      throw new UnauthorizedException('Invalid token payload');\n    }\n\n    const userId = Number(payload.sub);\n    const email = String(payload.email || '');\n    const roles = Array.isArray(payload.roles)\n      ? payload.roles.map((role) => ({ name: role }))\n      : [];\n\n    return {\n      id: userId,\n      email,\n      roles,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Counter.html":{"url":"entities/Counter.html","title":"entity - Counter","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Counter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/counter/entities/counter.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                currentQueue\n                            \n                            \n                                    \n                                currentQueueId\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        currentQueue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Queue | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, queue => queue.counter, {nullable: true})@JoinColumn({name: 'current_queue_id', foreignKeyConstraintName: 'fk_current_queue'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        currentQueueId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'current_queue_id', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CounterStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: CounterStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:28\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  OneToOne,\n  JoinColumn,\n} from 'typeorm';\nimport { Queue } from '../../queue/entities/queue.entity';\n\nexport enum CounterStatus {\n  ACTIVE = 'active',\n  INACTIVE = 'inactive',\n}\n\n@Entity('counters')\nexport class Counter {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  name: string;\n\n  @Column({\n    type: 'enum',\n    enum: CounterStatus,\n    default: CounterStatus.ACTIVE,\n  })\n  status: CounterStatus;\n\n  @Column({ name: 'current_queue_id', nullable: true })\n  currentQueueId: number | null;\n\n  @OneToOne(() => Queue, (queue) => queue.counter, { nullable: true })\n  @JoinColumn({\n    name: 'current_queue_id',\n    foreignKeyConstraintName: 'fk_current_queue',\n  })\n  currentQueue: Queue | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAnnouncementDto.html":{"url":"classes/CreateAnnouncementDto.html","title":"class - CreateAnnouncementDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAnnouncementDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/announcement/dto/create-announcement.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                createdBy\n                            \n                            \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                image\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                isActive\n                            \n                            \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        createdBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/dto/create-announcement.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/dto/create-announcement.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/dto/create-announcement.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/dto/create-announcement.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/dto/create-announcement.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsOptional, IsBoolean } from 'class-validator';\n\nexport class CreateAnnouncementDto {\n  @IsString()\n  @IsNotEmpty()\n  title: string;\n\n  @IsString()\n  @IsNotEmpty()\n  description: string;\n\n  @IsOptional()\n  @IsString()\n  image?: string;\n\n  @IsOptional()\n  @IsString()\n  createdBy?: string;\n\n  @IsOptional()\n  @IsBoolean()\n  isActive?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAppointmentDto.html":{"url":"classes/CreateAppointmentDto.html","title":"class - CreateAppointmentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAppointmentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/appointment/dto/create-appointment.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                address\n                            \n                            \n                                    \n                                    \n                                appointmentDate\n                            \n                            \n                                    \n                                    \n                                appointmentTime\n                            \n                            \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    Optional\n                                isGuest\n                            \n                            \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                middleInitial\n                            \n                            \n                                    \n                                    \n                                phoneNumber\n                            \n                            \n                                    \n                                    \n                                reasonOfVisit\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                            \n                                    \n                                    Optional\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        appointmentDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        appointmentTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        isGuest\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        middleInitial\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        reasonOfVisit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AppointmentStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEnum(AppointmentStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:48\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsNotEmpty,\n  IsString,\n  IsOptional,\n  IsEnum,\n  IsDateString,\n} from 'class-validator';\nimport { AppointmentStatus } from '../entities/appointment.entity';\n\nexport class CreateAppointmentDto {\n  @IsNotEmpty()\n  @IsString()\n  firstName: string;\n\n  @IsNotEmpty()\n  @IsString()\n  lastName: string;\n\n  @IsOptional()\n  @IsString()\n  middleInitial: string;\n\n  @IsNotEmpty()\n  @IsString()\n  address: string;\n\n  @IsNotEmpty()\n  @IsString()\n  phoneNumber: string;\n\n  @IsNotEmpty()\n  @IsString()\n  reasonOfVisit: string;\n\n  @IsNotEmpty()\n  @IsDateString()\n  appointmentDate: string;\n\n  @IsNotEmpty()\n  @IsString()\n  appointmentTime: string;\n\n  @IsOptional()\n  @IsEnum(AppointmentStatus)\n  status?: AppointmentStatus;\n\n  @IsOptional()\n  userId?: number;\n\n  @IsOptional()\n  isGuest?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateDocumentApplicationDto.html":{"url":"classes/CreateDocumentApplicationDto.html","title":"class - CreateDocumentApplicationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateDocumentApplicationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/document-applications/dto/create-document-application.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                applicationSubtype\n                            \n                            \n                                    \n                                    \n                                applicationType\n                            \n                            \n                                    \n                                    \n                                formData\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                statusMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        applicationSubtype\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Application subtype (optional)', example: 'Copy of Birth Certificate', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/dto/create-document-application.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        applicationType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ApplicationType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: ApplicationType, description: 'Type of document application', example: undefined})@IsEnum(ApplicationType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/dto/create-document-application.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        formData\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Form data containing all application details', example: undefined})@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/dto/create-document-application.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        statusMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Optional status message', example: 'Initial application submission', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/dto/create-document-application.dto.ts:42\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsOptional, IsObject, IsString } from 'class-validator';\nimport { ApplicationType } from '../entities/document-application.entity';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateDocumentApplicationDto {\n  @ApiProperty({\n    enum: ApplicationType,\n    description: 'Type of document application',\n    example: ApplicationType.BIRTH_CERTIFICATE,\n  })\n  @IsEnum(ApplicationType)\n  applicationType: ApplicationType;\n\n  @ApiProperty({\n    description: 'Application subtype (optional)',\n    example: 'Copy of Birth Certificate',\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  applicationSubtype?: string;\n\n  @ApiProperty({\n    description: 'Form data containing all application details',\n    example: {\n      firstName: 'Juan',\n      lastName: 'Dela Cruz',\n      birthDate: '1990-01-01',\n      birthPlace: 'Manila',\n    },\n  })\n  @IsObject()\n  formData: Record;\n\n  @ApiProperty({\n    description: 'Optional status message',\n    example: 'Initial application submission',\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  statusMessage?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateQueueDto.html":{"url":"classes/CreateQueueDto.html","title":"class - CreateQueueDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateQueueDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/dto/create-queue.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                    \n                                    \n                                appointmentType\n                            \n                            \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                isGuest\n                            \n                            \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                middleInitial\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                phoneNumber\n                            \n                            \n                                    \n                                    \n                                reasonOfVisit\n                            \n                            \n                                    \n                                    Optional\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        appointmentType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        isGuest\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        middleInitial\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        reasonOfVisit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsOptional, IsNotEmpty, IsBoolean } from 'class-validator';\n\nexport class CreateQueueDto {\n  @IsOptional()\n  userId?: number | string;\n\n  @IsString()\n  @IsNotEmpty()\n  firstName: string;\n\n  @IsString()\n  @IsNotEmpty()\n  lastName: string;\n\n  @IsString()\n  @IsOptional()\n  middleInitial?: string;\n\n  @IsString()\n  @IsOptional()\n  address?: string;\n\n  @IsString()\n  @IsOptional()\n  phoneNumber?: string;\n\n  @IsString()\n  @IsNotEmpty()\n  reasonOfVisit: string;\n\n  @IsString()\n  @IsNotEmpty()\n  appointmentType: string;\n\n  @IsBoolean()\n  @IsOptional()\n  isGuest?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                contactNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                defaultRoleId\n                            \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                middleName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                nameExtension\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                roleIds\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        contactNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: '+639123456789', description: 'Contact number'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        defaultRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 4, description: 'Default role ID for the user'})@IsOptional()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:102\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'john.doe@example.com', description: 'User email address'})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'John', description: 'User first name'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Doe', description: 'User last name'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'Miguel', description: 'User middle name (optional)'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'John Miguel Doe Jr.', description: 'Full name (auto-generated if not provided)'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        nameExtension\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'Jr.', description: 'Name extension (e.g., Jr., Sr., III)'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'password123', description: 'User password (minimum 6 characters)', minLength: 6})@IsString()@MinLength(6)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        roleIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: undefined, description: 'Array of role IDs to assign to the user', type: undefined})@IsOptional()@IsArray()@IsNumber({}, {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'johndoe', description: 'Username (optional, will use email if not provided)'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsString,\n  IsOptional,\n  MinLength,\n  IsArray,\n  IsNumber,\n  IsNotEmpty,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @ApiProperty({\n    example: 'john.doe@example.com',\n    description: 'User email address',\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @ApiPropertyOptional({\n    example: 'johndoe',\n    description: 'Username (optional, will use email if not provided)',\n  })\n  @IsOptional()\n  @IsString()\n  username?: string;\n\n  @ApiProperty({\n    example: 'password123',\n    description: 'User password (minimum 6 characters)',\n    minLength: 6,\n  })\n  @IsString()\n  @MinLength(6)\n  password: string;\n\n  @ApiProperty({\n    example: 'John',\n    description: 'User first name',\n  })\n  @IsString()\n  @IsNotEmpty()\n  firstName: string;\n\n  @ApiPropertyOptional({\n    example: 'Miguel',\n    description: 'User middle name (optional)',\n  })\n  @IsOptional()\n  @IsString()\n  middleName?: string;\n\n  @ApiProperty({\n    example: 'Doe',\n    description: 'User last name',\n  })\n  @IsString()\n  @IsNotEmpty()\n  lastName: string;\n\n  @ApiPropertyOptional({\n    example: 'John Miguel Doe Jr.',\n    description: 'Full name (auto-generated if not provided)',\n  })\n  @IsString()\n  @IsOptional()\n  name?: string;\n\n  @ApiPropertyOptional({\n    example: 'Jr.',\n    description: 'Name extension (e.g., Jr., Sr., III)',\n  })\n  @IsOptional()\n  @IsString()\n  nameExtension?: string;\n\n  @ApiPropertyOptional({\n    example: '+639123456789',\n    description: 'Contact number',\n  })\n  @IsOptional()\n  @IsString()\n  contactNumber?: string;\n\n  @ApiPropertyOptional({\n    example: [2, 3],\n    description: 'Array of role IDs to assign to the user',\n    type: [Number],\n  })\n  @IsOptional()\n  @IsArray()\n  @IsNumber({}, { each: true })\n  roleIds?: number[];\n\n  @ApiPropertyOptional({\n    example: 4,\n    description: 'Default role ID for the user',\n  })\n  @IsOptional()\n  @IsNumber()\n  defaultRoleId?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DocumentApplication.html":{"url":"entities/DocumentApplication.html","title":"entity - DocumentApplication","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DocumentApplication\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/document-applications/entities/document-application.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                applicationSubtype\n                            \n                            \n                                    \n                                applicationType\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                files\n                            \n                            \n                                    \n                                formData\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastModifiedBy\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                statusHistory\n                            \n                            \n                                    \n                                statusMessage\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    \n                                user\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        applicationSubtype\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'application_subtype', length: 100, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        applicationType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ApplicationType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: ApplicationType, name: 'application_type'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        files\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DocumentFile[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, file => file.application, {cascade: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        formData\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'form_data', type: 'json'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn({length: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastModifiedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'last_modified_by', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ApplicationStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: ApplicationStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        statusHistory\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ApplicationStatusHistory[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, history => history.application, {cascade: false, eager: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        statusMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'status_message', type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({name: 'updated_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {nullable: true})@JoinColumn({name: 'user_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'user_id', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:44\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryColumn,\n  Column,\n  CreateDateColumn,\n  UpdateDateColumn,\n  OneToMany,\n  ManyToOne,\n  JoinColumn,\n  Index,\n} from 'typeorm';\nimport { User } from '../../../users/entities/user.entity';\nimport { DocumentFile } from './document-file.entity';\nimport { ApplicationStatusHistory } from './application-status-history.entity';\n\nexport enum ApplicationType {\n  BIRTH_CERTIFICATE = 'Birth Certificate',\n  MARRIAGE_CERTIFICATE = 'Marriage Certificate',\n  MARRIAGE_LICENSE = 'Marriage License',\n  DEATH_CERTIFICATE = 'Death Certificate',\n  BUSINESS_PERMIT = 'Business Permit',\n}\n\nexport enum ApplicationStatus {\n  PENDING = 'Pending',\n  PROCESSING = 'Processing',\n  APPROVED = 'Approved',\n  REJECTED = 'Rejected',\n  DECLINE = 'Decline',\n  READY_FOR_PICKUP = 'Ready for Pickup',\n  REQUIRES_ADDITIONAL_INFO = 'Requires Additional Info',\n}\n\n@Entity('document_applications')\n@Index(['userId'])\n@Index(['applicationType'])\n@Index(['status'])\n@Index(['createdAt'])\nexport class DocumentApplication {\n  @PrimaryColumn({ length: 50 })\n  id: string;\n\n  @Column({ name: 'user_id', nullable: true })\n  userId: number;\n\n  @Column({\n    type: 'enum',\n    enum: ApplicationType,\n    name: 'application_type',\n  })\n  applicationType: ApplicationType;\n\n  @Column({ name: 'application_subtype', length: 100, nullable: true })\n  applicationSubtype: string;\n\n  @Column({\n    type: 'enum',\n    enum: ApplicationStatus,\n    default: ApplicationStatus.PENDING,\n  })\n  status: ApplicationStatus;\n\n  @Column({ name: 'status_message', type: 'text', nullable: true })\n  statusMessage: string;\n\n  @Column({ name: 'form_data', type: 'json' })\n  formData: Record;\n\n  @CreateDateColumn({ name: 'created_at' })\n  createdAt: Date;\n\n  @UpdateDateColumn({ name: 'updated_at' })\n  updatedAt: Date;\n\n  @Column({ name: 'last_modified_by', nullable: true })\n  lastModifiedBy: number;\n\n  // Relations\n  @ManyToOne(() => User, { nullable: true })\n  @JoinColumn({ name: 'user_id' })\n  user: User;\n\n  @OneToMany(() => DocumentFile, (file) => file.application, { cascade: true })\n  files: DocumentFile[];\n\n  @OneToMany(() => ApplicationStatusHistory, (history) => history.application, {\n    cascade: false,\n    eager: false,\n  })\n  statusHistory: ApplicationStatusHistory[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/DocumentApplicationsController.html":{"url":"controllers/DocumentApplicationsController.html","title":"controller - DocumentApplicationsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  DocumentApplicationsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/document-applications/document-applications.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                document-applications\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getAllApplicationFiles\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getAllApplications\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getApplicationFiles\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getFileDownloadUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getStats\n                            \n                            \n                                    \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                updateStatus\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                uploadDocument\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createDto: CreateDocumentApplicationDto, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create new document application'})@ApiResponse({status: 201, description: 'Application created successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createDto\n                                            \n                                                            CreateDocumentApplicationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(status?: string, includeUser?: string, user?: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Get user applications'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:99\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                includeUser\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string, user: AuthenticatedUser, includeUser?: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'Get specific application'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:164\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                includeUser\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getAllApplicationFiles\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllApplicationFiles(id: string, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/files/all')@ApiOperation({summary: 'Get all application files (privileged users only)'})@ApiResponse({status: 200, description: 'All files retrieved successfully'})@ApiResponse({status: 404, description: 'Application not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:146\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getAllApplications\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllApplications()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('admin/all')@Roles('admin', 'staff', 'super_admin')@UseGuards(RolesGuard)@ApiOperation({summary: 'Get all applications (Privileged users only)'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:261\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getApplicationFiles\n                        \n                    \n                \n            \n            \n                \n                        \n                    getApplicationFiles(id: string, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/files')@ApiOperation({summary: 'Get application files (latest per category)'})@ApiResponse({status: 200, description: 'Files retrieved successfully'})@ApiResponse({status: 404, description: 'Application not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:120\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getFileDownloadUrl\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFileDownloadUrl(fileId: string, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('files/:fileId/download')@ApiOperation({summary: 'Get file download URL'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:183\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fileId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('admin/stats')@Roles('admin', 'super_admin')@UseGuards(RolesGuard)@ApiOperation({summary: 'Get application statistics (Admin/Super Admin only)'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:271\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise>\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({summary: 'Delete application'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:246\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateDto: UpdateDocumentApplicationDto, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOperation({summary: 'Update application'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:201\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateDto\n                                            \n                                                            UpdateDocumentApplicationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(id: string, statusDto: literal type, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/status')@Roles('admin', 'staff', 'super_admin')@UseGuards(RolesGuard)@ApiOperation({summary: 'Update application status (Privileged users only)'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:231\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                statusDto\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        uploadDocument\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadDocument(id: string, file: Express.Multer.File, documentCategory: string, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':id/files')@UseInterceptors(undefined)@ApiConsumes('multipart/form-data')@ApiOperation({summary: 'Upload document file'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                documentCategory\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseInterceptors,\n  UploadedFile,\n  Query,\n  UseGuards,\n  //Request, // Uncomment if you need to use Request object\n  BadRequestException,\n  Logger,\n} from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { DocumentApplicationsService } from './document-applications.service';\nimport { CreateDocumentApplicationDto } from './dto/create-document-application.dto';\nimport { UpdateDocumentApplicationDto } from './dto/update-document-application.dto';\nimport { JwtAuthGuard } from '../../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../../auth/guards/roles.guard';\nimport { Roles } from '../../auth/decorators/roles.decorator';\nimport { User } from '../../auth/decorators/user.decorator';\nimport { AuthenticatedUser } from '../../auth/jwt.strategy';\nimport { ApplicationStatus } from './entities/document-application.entity';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n  ApiConsumes,\n} from '@nestjs/swagger';\n\n@ApiTags('Document Applications')\n@Controller('document-applications')\n@UseGuards(JwtAuthGuard)\n@ApiBearerAuth('JWT-auth')\nexport class DocumentApplicationsController {\n  private readonly logger = new Logger(DocumentApplicationsController.name);\n\n  constructor(\n    private readonly documentApplicationsService: DocumentApplicationsService,\n  ) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Create new document application' })\n  @ApiResponse({ status: 201, description: 'Application created successfully' })\n  async create(\n    @Body() createDto: CreateDocumentApplicationDto,\n    @User() user: AuthenticatedUser,\n  ) {\n    return this.documentApplicationsService.create(createDto, user.id);\n  }\n\n  @Post(':id/files')\n  @UseInterceptors(\n    FileInterceptor('file', {\n      limits: {\n        fileSize: 10 * 1024 * 1024, // 10MB limit\n      },\n      fileFilter: (req, file, callback) => {\n        if (!file.mimetype.match(/\\/(jpg|jpeg|png|pdf)$/)) {\n          return callback(\n            new BadRequestException(\n              'Only JPEG, PNG, and PDF files are allowed',\n            ),\n            false,\n          );\n        }\n        callback(null, true);\n      },\n    }),\n  )\n  @ApiConsumes('multipart/form-data')\n  @ApiOperation({ summary: 'Upload document file' })\n  async uploadDocument(\n    @Param('id') id: string,\n    @UploadedFile() file: Express.Multer.File,\n    @Body('documentCategory') documentCategory: string,\n    @User() user: AuthenticatedUser,\n  ) {\n    this.logger.log('Received document category:', documentCategory); // Debug log\n\n    if (!documentCategory) {\n      throw new BadRequestException('Document category is required');\n    }\n\n    return this.documentApplicationsService.uploadFile(\n      id,\n      file,\n      documentCategory,\n      user.id,\n    );\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Get user applications' })\n  async findAll(\n    @Query('status') status?: string,\n    @Query('includeUser') includeUser?: string,\n    @User() user?: AuthenticatedUser,\n  ) {\n    const userId = user?.roles.some((role) =>\n      ['admin', 'super_admin', 'staff'].includes(role.name),\n    )\n      ? undefined\n      : user?.id;\n\n    // Include user relationship when requested (for admin notifications)\n    const relations = includeUser === 'true' ? ['user'] : [];\n\n    return this.documentApplicationsService.findAll(userId, { relations });\n  }\n\n  @Get(':id/files')\n  @ApiOperation({ summary: 'Get application files (latest per category)' })\n  @ApiResponse({ status: 200, description: 'Files retrieved successfully' })\n  @ApiResponse({ status: 404, description: 'Application not found' })\n  async getApplicationFiles(\n    @Param('id') id: string,\n    @User() user: AuthenticatedUser,\n  ) {\n    const userId = user.roles.some((role) =>\n      ['admin', 'super_admin', 'staff'].includes(role.name),\n    )\n      ? undefined\n      : user.id;\n\n    this.logger.log(\n      `Getting files for application ${id}, user: ${user.email}, isPrivileged: ${!userId}`,\n    );\n\n    return await this.documentApplicationsService.getApplicationFiles(\n      id,\n      userId,\n    );\n  }\n\n  @Get(':id/files/all')\n  @ApiOperation({\n    summary: 'Get all application files (privileged users only)',\n  })\n  @ApiResponse({ status: 200, description: 'All files retrieved successfully' })\n  @ApiResponse({ status: 404, description: 'Application not found' })\n  async getAllApplicationFiles(\n    @Param('id') id: string,\n    @User() user: AuthenticatedUser,\n  ) {\n    const userId = user.roles.some((role) =>\n      ['admin', 'super_admin', 'staff'].includes(role.name),\n    )\n      ? undefined\n      : user.id;\n\n    return await this.documentApplicationsService.getAllApplicationFiles(\n      id,\n      userId,\n    );\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: 'Get specific application' })\n  async findOne(\n    @Param('id') id: string,\n    @User() user: AuthenticatedUser,\n    @Query('includeUser') includeUser?: string,\n  ) {\n    const userId = user.roles.some((role) =>\n      ['admin', 'super_admin', 'staff'].includes(role.name),\n    )\n      ? undefined\n      : user.id;\n\n    // Include user relationship when requested (for admin notifications)\n    const relations = includeUser === 'true' ? ['user'] : [];\n\n    return this.documentApplicationsService.findOne(id, userId, { relations });\n  }\n\n  @Get('files/:fileId/download')\n  @ApiOperation({ summary: 'Get file download URL' })\n  async getFileDownloadUrl(\n    @Param('fileId') fileId: string,\n    @User() user: AuthenticatedUser,\n  ) {\n    const userId = user.roles.some((role) =>\n      ['admin', 'super_admin', 'staff'].includes(role.name),\n    )\n      ? undefined\n      : user.id;\n    const url = await this.documentApplicationsService.getFileDownloadUrl(\n      +fileId,\n      userId,\n    );\n    return { url };\n  }\n\n  @Patch(':id')\n  @ApiOperation({ summary: 'Update application' })\n  async update(\n    @Param('id') id: string,\n    @Body() updateDto: UpdateDocumentApplicationDto,\n    @User() user: AuthenticatedUser,\n  ) {\n    const userId = user.roles.some((role) =>\n      ['admin', 'super_admin', 'staff'].includes(role.name),\n    )\n      ? undefined\n      : user.id;\n    const adminId = user.roles.some((role) =>\n      ['admin', 'super_admin', 'staff'].includes(role.name),\n    )\n      ? user.id\n      : undefined;\n\n    return this.documentApplicationsService.update(\n      id,\n      updateDto,\n      userId,\n      adminId,\n    );\n  }\n\n  @Patch(':id/status')\n  @Roles('admin', 'staff', 'super_admin')\n  @UseGuards(RolesGuard)\n  @ApiOperation({\n    summary: 'Update application status (Privileged users only)',\n  })\n  async updateStatus(\n    @Param('id') id: string,\n    @Body() statusDto: { status: string; statusMessage?: string },\n    @User() user: AuthenticatedUser,\n  ) {\n    return this.documentApplicationsService.updateStatus(\n      id,\n      statusDto.status as ApplicationStatus,\n      statusDto.statusMessage,\n      user.id,\n    );\n  }\n\n  @Delete(':id')\n  @ApiOperation({ summary: 'Delete application' })\n  async remove(@Param('id') id: string, @User() user: AuthenticatedUser) {\n    const userId = user.roles.some((role) =>\n      ['admin', 'super_admin', 'staff'].includes(role.name),\n    )\n      ? undefined\n      : user.id;\n    await this.documentApplicationsService.remove(id, userId);\n    return { message: 'Application deleted successfully' };\n  }\n\n  // Admin endpoints\n  @Get('admin/all')\n  @Roles('admin', 'staff', 'super_admin')\n  @UseGuards(RolesGuard)\n  @ApiOperation({ summary: 'Get all applications (Privileged users only)' })\n  async getAllApplications() {\n    return this.documentApplicationsService.findAll();\n  }\n\n  @Get('admin/stats')\n  @Roles('admin', 'super_admin')\n  @UseGuards(RolesGuard)\n  @ApiOperation({\n    summary: 'Get application statistics (Admin/Super Admin only)',\n  })\n  async getStats(): Promise\n  > {\n    return this.documentApplicationsService.getApplicationStats();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DocumentApplicationsModule.html":{"url":"modules/DocumentApplicationsModule.html","title":"module - DocumentApplicationsModule","body":"\n                   \n\n\n\n\n    Modules\n    DocumentApplicationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DocumentApplicationsModule\n\n\n\ncluster_DocumentApplicationsModule_exports\n\n\n\ncluster_DocumentApplicationsModule_providers\n\n\n\n\nDocumentApplicationsService \n\nDocumentApplicationsService \n\n\n\nMinioService \n\nMinioService \n\n\n\nDocumentApplicationsModule\n\nDocumentApplicationsModule\n\nDocumentApplicationsService  -->\n\nDocumentApplicationsModule->DocumentApplicationsService \n\n\n\nMinioService  -->\n\nDocumentApplicationsModule->MinioService \n\n\n\n\n\nDocumentApplicationsService\n\nDocumentApplicationsService\n\nDocumentApplicationsModule -->\n\nDocumentApplicationsService->DocumentApplicationsModule\n\n\n\n\n\nMinioService\n\nMinioService\n\nDocumentApplicationsModule -->\n\nMinioService->DocumentApplicationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/document-applications/document-applications.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DocumentApplicationsService\n                        \n                        \n                            MinioService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            DocumentApplicationsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            DocumentApplicationsService\n                        \n                        \n                            MinioService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { DocumentApplicationsService } from './document-applications.service';\nimport { DocumentApplicationsController } from './document-applications.controller';\nimport { DocumentApplication } from './entities/document-application.entity';\nimport { DocumentFile } from './entities/document-file.entity';\nimport { ApplicationStatusHistory } from './entities/application-status-history.entity';\nimport { MinioService } from './services/minio.service';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      DocumentApplication,\n      DocumentFile,\n      ApplicationStatusHistory,\n    ]),\n  ],\n  controllers: [DocumentApplicationsController],\n  providers: [DocumentApplicationsService, MinioService],\n  exports: [DocumentApplicationsService, MinioService],\n})\nexport class DocumentApplicationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DocumentFile.html":{"url":"entities/DocumentFile.html","title":"entity - DocumentFile","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DocumentFile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/document-applications/entities/document-file.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                application\n                            \n                            \n                                    \n                                applicationId\n                            \n                            \n                                    \n                                documentCategory\n                            \n                            \n                                    \n                                fileName\n                            \n                            \n                                    \n                                fileSize\n                            \n                            \n                                    \n                                fileType\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                minioObjectName\n                            \n                            \n                                    \n                                uploadedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        application\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DocumentApplication\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, app => app.files, {onDelete: 'CASCADE'})@JoinColumn({name: 'application_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        applicationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'application_id', length: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        documentCategory\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'document_category', length: 250, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        fileName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'file_name', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        fileSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'file_size', type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        fileType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'file_type', length: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        minioObjectName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'minio_object_name', length: 500})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        uploadedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'uploaded_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:38\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  CreateDateColumn,\n  ManyToOne,\n  JoinColumn,\n  Index,\n} from 'typeorm';\nimport { DocumentApplication } from './document-application.entity';\n\n@Entity('document_files')\n@Index(['applicationId'])\n@Index(['documentCategory'])\nexport class DocumentFile {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ name: 'application_id', length: 50 })\n  applicationId: string;\n\n  @Column({ name: 'file_name', length: 255 })\n  fileName: string;\n\n  @Column({ name: 'file_type', length: 100 })\n  fileType: string;\n\n  @Column({ name: 'file_size', type: 'bigint' })\n  fileSize: number;\n\n  @Column({ name: 'minio_object_name', length: 500 })\n  minioObjectName: string;\n\n  @Column({ name: 'document_category', length: 250, nullable: true })\n  documentCategory: string;\n\n  @CreateDateColumn({ name: 'uploaded_at' })\n  uploadedAt: Date;\n\n  // Relations\n  @ManyToOne(() => DocumentApplication, (app) => app.files, {\n    onDelete: 'CASCADE',\n  })\n  @JoinColumn({ name: 'application_id' })\n  application: DocumentApplication;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FindAllOptions.html":{"url":"interfaces/FindAllOptions.html","title":"interface - FindAllOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FindAllOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            limit\n                                        \n                                \n                                \n                                        \n                                            page\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            role\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            search\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        limit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        limit:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        page\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        page:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        search\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        search:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  BadRequestException,\n  ConflictException,\n  Logger,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, Like, In } from 'typeorm';\nimport { User } from './entities/user.entity';\nimport { AdminUpdateUserDto } from '../auth/dto/update-user.dto'; // Import from auth module\nimport { RolesService } from '../roles/roles.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport * as bcrypt from 'bcrypt';\n\ninterface FindAllOptions {\n  page: number;\n  limit: number;\n  search?: string;\n  role?: string;\n}\n\nexport interface UserStats {\n  totalUsers: number;\n  activeUsers: number;\n  inactiveUsers: number;\n  usersByRole: { roleName: string; count: number }[];\n  recentUsers: Omit[];\n}\n\n@Injectable()\nexport class UsersService {\n  private readonly logger = new Logger(UsersService.name);\n\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n    private rolesService: RolesService,\n  ) {}\n\n  async findAll(options: FindAllOptions) {\n    const { page, limit, search, role } = options;\n    const skip = (page - 1) * limit;\n\n    const queryBuilder = this.usersRepository\n      .createQueryBuilder('user')\n      .leftJoinAndSelect('user.defaultRole', 'defaultRole')\n      .leftJoinAndSelect('user.roles', 'roles');\n\n    // Apply search filter\n    if (search) {\n      queryBuilder.where(\n        '(user.firstName LIKE :search OR user.lastName LIKE :search OR user.email LIKE :search OR user.username LIKE :search)',\n        { search: `%${search}%` },\n      );\n    }\n\n    // Apply role filter\n    if (role) {\n      queryBuilder.andWhere('roles.name = :role', { role });\n    }\n\n    queryBuilder.orderBy('user.createdAt', 'DESC').skip(skip).take(limit);\n\n    const [users, total] = await queryBuilder.getManyAndCount();\n\n    // Remove passwords from response\n    const sanitizedUsers = users.map((user) => {\n      const { password, ...userWithoutPassword } = user;\n      return {\n        ...userWithoutPassword,\n        roles: user.roles.map((role) => role.name),\n        defaultRole: user.defaultRole?.name || 'citizen',\n      };\n    });\n\n    return {\n      users: sanitizedUsers,\n      total,\n      page,\n      limit,\n      totalPages: Math.ceil(total / limit),\n    };\n  }\n\n  async findOne(id: number): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id },\n      relations: ['defaultRole', 'roles'],\n    });\n\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    // Remove password and format response\n\n    const { password, ...userWithoutPassword } = user;\n    return {\n      ...userWithoutPassword,\n      roles: user.roles.map((role) => role.name),\n      defaultRole: user.defaultRole?.name || 'citizen',\n    };\n  }\n\n  // Admin-only update method\n  async adminUpdate(\n    id: number,\n    updateUserDto: AdminUpdateUserDto,\n  ): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id },\n      relations: ['roles'],\n    });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    const {\n      email,\n\n      username,\n\n      firstName,\n\n      middleName,\n\n      lastName,\n\n      nameExtension,\n\n      contactNumber,\n\n      roleIds,\n\n      defaultRoleId,\n    } = updateUserDto;\n\n    // Check email uniqueness if being updated\n    if (email && email !== user.email) {\n      const existingUser = await this.usersRepository.findOne({\n        where: { email },\n      });\n      if (existingUser) {\n        throw new ConflictException('Email already exists');\n      }\n    }\n\n    // Check username uniqueness if being updated\n    if (username && username !== user.username) {\n      const existingUser = await this.usersRepository.findOne({\n        where: { username },\n      });\n      if (existingUser) {\n        throw new ConflictException('Username already exists');\n      }\n    }\n\n    // Update fields\n    const updateData: any = {};\n\n    if (email) updateData.email = email;\n    if (username) updateData.username = username;\n    if (firstName) updateData.firstName = firstName;\n    if (lastName) updateData.lastName = lastName;\n    if (contactNumber) updateData.contactNumber = contactNumber;\n\n    // Handle optional fields\n    if (middleName !== undefined) updateData.middleName = middleName;\n    if (nameExtension !== undefined) updateData.nameExtension = nameExtension;\n    if (defaultRoleId !== undefined) updateData.defaultRoleId = defaultRoleId;\n\n    // Update name if name components changed\n    if (\n      firstName ||\n      middleName !== undefined ||\n      lastName ||\n      nameExtension !== undefined\n    ) {\n      const newFirstName = firstName || user.firstName;\n      const newMiddleName =\n        middleName !== undefined ? middleName : user.middleName;\n      const newLastName = lastName || user.lastName;\n      const newNameExtension =\n        nameExtension !== undefined ? nameExtension : user.nameExtension;\n\n      updateData.name = `${newFirstName} ${newMiddleName ? newMiddleName + ' ' : ''}${newLastName}${newNameExtension ? ' ' + newNameExtension : ''}`;\n    }\n\n    await this.usersRepository.update(id, updateData);\n\n    // Update roles if provided\n    if (roleIds !== undefined) {\n      // Remove existing roles and assign new ones\n      await this.usersRepository\n        .createQueryBuilder()\n        .relation(User, 'roles')\n        .of(id)\n        .remove(user.roles);\n\n      if (roleIds.length > 0) {\n        await this.rolesService.assignRolesToUser(id, roleIds);\n      }\n    }\n\n    return this.findOne(id);\n  }\n\n  async remove(id: number): Promise {\n    const user = await this.usersRepository.findOne({ where: { id } });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    await this.usersRepository.delete(id);\n    return { message: `User with ID ${id} has been deleted` };\n  }\n\n  async updateStatus(id: number, isActive: boolean): Promise {\n    const user = await this.usersRepository.findOne({ where: { id } });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    await this.usersRepository.update(id, { isActive });\n    return this.findOne(id);\n  }\n\n  async getStats(): Promise {\n    const totalUsers = await this.usersRepository.count();\n    const activeUsers = await this.usersRepository.count({\n      where: { isActive: true },\n    });\n    const inactiveUsers = totalUsers - activeUsers;\n\n    // Get user count by role\n    const roleStats = await this.usersRepository\n      .createQueryBuilder('user')\n      .leftJoin('user.roles', 'role')\n      .select('role.name', 'roleName')\n      .addSelect('COUNT(user.id)', 'count')\n      .groupBy('role.name')\n      .getRawMany();\n\n    const usersByRole = roleStats.map((stat) => ({\n      roleName: stat.roleName || 'No Role',\n\n      count: parseInt(stat.count),\n    }));\n\n    // Get recent users (last 10)\n    const recentUsers = await this.usersRepository.find({\n      order: { createdAt: 'DESC' },\n      take: 10,\n      relations: ['defaultRole', 'roles'],\n    });\n\n    const sanitizedRecentUsers = recentUsers.map((user) => {\n      const { password, ...userWithoutPassword } = user;\n      return userWithoutPassword as Omit;\n    });\n\n    return {\n      totalUsers,\n      activeUsers,\n      inactiveUsers,\n      usersByRole,\n      recentUsers: sanitizedRecentUsers,\n    };\n  }\n\n  async findByEmail(email: string): Promise {\n    return this.usersRepository.findOne({\n      where: { email },\n      relations: ['defaultRole', 'roles'],\n    });\n  }\n\n  async findByUsername(username: string): Promise {\n    return this.usersRepository.findOne({\n      where: { username },\n      relations: ['defaultRole', 'roles'],\n    });\n  }\n\n  async create(createUserDto: CreateUserDto) {\n    const {\n      email,\n      username,\n      password,\n      firstName,\n      middleName,\n      lastName,\n      nameExtension,\n      contactNumber,\n      name,\n      roleIds,\n      defaultRoleId,\n    } = createUserDto;\n\n    // Generate full name if not provided\n    const fullName =\n      name ||\n      `${firstName} ${middleName ? middleName + ' ' : ''}${lastName}${nameExtension ? ' ' + nameExtension : ''}`;\n\n    // Check if user already exists\n    const existingUserByEmail = await this.usersRepository.findOne({\n      where: { email },\n    });\n    if (existingUserByEmail) {\n      throw new ConflictException('Email already exists');\n    }\n\n    if (username) {\n      const existingUserByUsername = await this.usersRepository.findOne({\n        where: { username },\n      });\n      if (existingUserByUsername) {\n        throw new ConflictException('Username already exists');\n      }\n    }\n\n    try {\n      // Create user\n      const user = this.usersRepository.create({\n        email,\n        username,\n        password, // Should be hashed by the caller\n        firstName,\n        middleName,\n        lastName,\n        nameExtension,\n        contactNumber,\n        name: fullName,\n        defaultRoleId: defaultRoleId || 4, // Default to citizen\n      });\n\n      await this.usersRepository.save(user);\n\n      // Assign roles if provided\n      if (roleIds && roleIds.length > 0) {\n        await this.rolesService.assignRolesToUser(user.id, roleIds);\n      }\n\n      return user;\n    } catch (error) {\n      this.logger.error('Error creating user:', error);\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ForgotPasswordDto.html":{"url":"classes/ForgotPasswordDto.html","title":"class - ForgotPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ForgotPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/otp.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Registered email address', example: 'user@example.com', format: 'email'})@IsEmail({}, {message: 'Please provide a valid email address'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/otp.dto.ts:69\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsString,\n  IsOptional,\n  Length,\n  Matches,\n} from 'class-validator';\n\nexport class SendOtpDto {\n  @ApiProperty({\n    description: 'Email address to send OTP to',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiPropertyOptional({\n    description: 'Purpose of the OTP',\n    example: 'verification',\n    enum: ['verification', 'password_reset'],\n    default: 'verification',\n  })\n  @IsString()\n  @IsOptional()\n  purpose?: string = 'verification';\n}\n\nexport class VerifyOtpDto {\n  @ApiProperty({\n    description: 'Email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    description: '6-digit OTP code',\n    example: '123456',\n    minLength: 6,\n    maxLength: 6,\n    pattern: '^[0-9]{6}$',\n  })\n  @IsString()\n  @Length(6, 6, { message: 'OTP must be exactly 6 digits' })\n  @Matches(/^[0-9]{6}$/, { message: 'OTP must contain only numbers' })\n  otp: string;\n\n  @ApiPropertyOptional({\n    description: 'Purpose of the OTP verification',\n    example: 'verification',\n    enum: ['verification', 'password_reset'],\n    default: 'verification',\n  })\n  @IsString()\n  @IsOptional()\n  purpose?: string = 'verification';\n}\n\nexport class ForgotPasswordDto {\n  @ApiProperty({\n    description: 'Registered email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n}\n\nexport class ResetPasswordDto {\n  @ApiProperty({\n    description: 'Email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    description: '6-digit OTP code received via email',\n    example: '123456',\n    minLength: 6,\n    maxLength: 6,\n    pattern: '^[0-9]{6}$',\n  })\n  @IsString()\n  @Length(6, 6, { message: 'OTP must be exactly 6 digits' })\n  @Matches(/^[0-9]{6}$/, { message: 'OTP must contain only numbers' })\n  otp: string;\n\n  @ApiProperty({\n    description: 'New password (must meet complexity requirements)',\n    example: 'NewSecure123!',\n    minLength: 8,\n    pattern:\n      '^(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)(?=.*[@$!%*?&])[A-Za-z\\\\d@$!%*?&]{8,}$',\n  })\n  @IsString()\n  @Length(8, 100, { message: 'Password must be at least 8 characters long' })\n  @Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/, {\n    message:\n      'Password must contain uppercase, lowercase, numbers, and special characters',\n  })\n  newPassword: string;\n}\n\nexport class TestOtpDto {\n  @ApiProperty({\n    description: 'Email address for testing OTP generation',\n    example: 'test@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n}\n\nexport class ApplicationNotificationDto {\n  @ApiProperty({\n    description: 'Recipient email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    description: 'Application ID',\n    example: 'APP-001',\n  })\n  @IsString()\n  applicationId: string;\n\n  @ApiProperty({\n    description: 'Application status',\n    example: 'Approved',\n    enum: ['Pending', 'Approved', 'Rejected', 'Ready for Pickup'],\n  })\n  @IsString()\n  status: string;\n\n  @ApiProperty({\n    description: 'Type of application',\n    example: 'Birth Certificate',\n  })\n  @IsString()\n  applicationType: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            roles\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        roles:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\n\ninterface JwtPayload {\n  sub: number;\n  email: string;\n  roles?: string[];\n}\n\n// Strategy for validating JWT tokens in NestJS\nexport interface AuthenticatedUser {\n  id: number;\n  email: string;\n  roles: Array;\n}\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private configService: ConfigService) {\n    const secretKey = configService.get('JWT_SECRET');\n\n    if (!secretKey) {\n      throw new Error('JWT_SECRET is not defined in environment variables');\n    }\n\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: secretKey,\n    });\n  }\n\n  validate(payload: JwtPayload): AuthenticatedUser {\n    // Validation for the payload\n    if (!payload || payload.sub === undefined || isNaN(Number(payload.sub))) {\n      throw new UnauthorizedException('Invalid token payload');\n    }\n\n    const userId = Number(payload.sub);\n    const email = String(payload.email || '');\n    const roles = Array.isArray(payload.roles)\n      ? payload.roles.map((role) => ({ name: role }))\n      : [];\n\n    return {\n      id: userId,\n      email,\n      roles,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(payload: JwtPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            JwtPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         AuthenticatedUser\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\n\ninterface JwtPayload {\n  sub: number;\n  email: string;\n  roles?: string[];\n}\n\n// Strategy for validating JWT tokens in NestJS\nexport interface AuthenticatedUser {\n  id: number;\n  email: string;\n  roles: Array;\n}\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private configService: ConfigService) {\n    const secretKey = configService.get('JWT_SECRET');\n\n    if (!secretKey) {\n      throw new Error('JWT_SECRET is not defined in environment variables');\n    }\n\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: secretKey,\n    });\n  }\n\n  validate(payload: JwtPayload): AuthenticatedUser {\n    // Validation for the payload\n    if (!payload || payload.sub === undefined || isNaN(Number(payload.sub))) {\n      throw new UnauthorizedException('Invalid token payload');\n    }\n\n    const userId = Number(payload.sub);\n    const email = String(payload.email || '');\n    const roles = Array.isArray(payload.roles)\n      ? payload.roles.map((role) => ({ name: role }))\n      : [];\n\n    return {\n      id: userId,\n      email,\n      roles,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LockoutData.html":{"url":"interfaces/LockoutData.html","title":"interface - LockoutData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LockoutData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            attempts\n                                        \n                                \n                                \n                                        \n                                            lastAttempt\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            lockedUntil\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        attempts\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        attempts:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastAttempt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastAttempt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lockedUntil\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lockedUntil:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Injectable,\n  UnauthorizedException,\n  ConflictException,\n  BadRequestException,\n  Logger,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from '../users/entities/user.entity';\nimport * as bcrypt from 'bcrypt';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { RolesService } from '../roles/roles.service';\nimport { UpdateUserDto, AdminUpdateUserDto } from './dto/update-user.dto';\n\ninterface LockoutData {\n  attempts: number;\n  lastAttempt: Date;\n  lockedUntil?: Date;\n}\n\n@Injectable()\nexport class AuthService {\n  private readonly logger = new Logger(AuthService.name);\n\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n    private jwtService: JwtService,\n    private rolesService: RolesService,\n  ) {}\n\n  private readonly failedAttempts = new Map();\n\n  async validateUser(loginDto: LoginDto): Promise {\n    const user = await this.usersRepository.findOne({\n      where: [\n        { email: loginDto.emailOrUsername },\n        { username: loginDto.emailOrUsername },\n      ],\n    });\n    if (user && (await bcrypt.compare(loginDto.password, user.password))) {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { password: __password, ...result } = user;\n      return result;\n    }\n    return null;\n  }\n\n  async getAccountLockout(identifier: string) {\n    const key = identifier.toLowerCase();\n    return this.failedAttempts.get(key) || null;\n  }\n\n  async recordFailedLoginAttempt(identifier: string) {\n    const key = identifier.toLowerCase();\n    const current = this.failedAttempts.get(key) || {\n      attempts: 0,\n      lastAttempt: new Date(),\n    };\n\n    current.attempts++;\n    current.lastAttempt = new Date();\n\n    // Lock account after 5 attempts for 3 minutes (was 15 minutes)\n    if (current.attempts >= 5) {\n      current.lockedUntil = new Date(Date.now() + 3 * 60 * 1000); // 3 minutes\n      this.logger.warn(\n        `Account locked for ${identifier} after ${current.attempts} failed attempts`,\n      );\n    }\n\n    this.failedAttempts.set(key, current);\n\n    return {\n      attempts: current.attempts,\n      isLocked: current.attempts >= 5,\n      lockedUntil: current.lockedUntil,\n      timeRemaining: current.lockedUntil\n        ? Math.ceil((current.lockedUntil.getTime() - Date.now()) / 1000)\n        : 0,\n    };\n  }\n\n  async clearAccountLockout(identifier: string) {\n    const key = identifier.toLowerCase();\n    this.failedAttempts.delete(key);\n    this.logger.log(`Account lockout cleared for ${identifier}`);\n    return { success: true };\n  }\n\n  async login(loginDto: LoginDto) {\n    const identifier = loginDto.emailOrUsername.toLowerCase();\n\n    // Check if account is locked\n    const lockoutData = await this.getAccountLockout(identifier);\n    if (lockoutData?.lockedUntil && lockoutData.lockedUntil > new Date()) {\n      const timeRemaining = Math.ceil(\n        (lockoutData.lockedUntil.getTime() - Date.now()) / 1000,\n      );\n      const minutesRemaining = Math.ceil(timeRemaining / 60);\n      throw new UnauthorizedException(\n        `Account locked due to multiple failed attempts. Try again in ${minutesRemaining} minutes or use \"Forgot Password\".`,\n      );\n    }\n\n    this.logger.log('Login attempt with:', loginDto);\n\n    try {\n      const user = await this.usersRepository.findOne({\n        where: [\n          { email: loginDto.emailOrUsername },\n          { username: loginDto.emailOrUsername },\n        ],\n        relations: ['defaultRole'],\n      });\n\n      this.logger.log('User found:', user ? 'Yes' : 'No');\n\n      if (!user) {\n        throw new UnauthorizedException('Invalid email or password');\n      }\n\n      // Debug password check\n      this.logger.log('Stored password hash:', user.password);\n      this.logger.log('Comparing with:', loginDto.password);\n\n      const isPasswordValid = await bcrypt.compare(\n        loginDto.password,\n        user.password,\n      );\n      this.logger.log('Password valid:', isPasswordValid);\n\n      if (!isPasswordValid) {\n        throw new UnauthorizedException('Invalid email or password');\n      }\n\n      // Get user roles\n      const roles = await this.rolesService.getUserRoles(user.id);\n      const roleNames = roles.map((role) => role.name);\n\n      const payload = {\n        sub: user.id,\n        email: user.email,\n        roles: roleNames,\n      };\n\n      const token = this.jwtService.sign(payload);\n      this.logger.log('Generated token:', token ? 'Success' : 'Failed');\n\n      // Remove password from response\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { password: __password, ...userWithoutPassword } = user;\n\n      return {\n        access_token: token,\n        user: {\n          ...userWithoutPassword,\n          roles: roleNames,\n          defaultRole: user.defaultRole?.name || 'citizen',\n        },\n      };\n    } catch (error) {\n      this.logger.error('Login error:', error);\n      throw error;\n    }\n  }\n\n  async register(registerDto: RegisterDto) {\n    const {\n      email,\n      username,\n      password,\n      firstName,\n      middleName,\n      lastName,\n      nameExtension,\n      contactNumber,\n    } = registerDto;\n\n    // Generate full name\n    const name = `${firstName} ${middleName ? middleName + ' ' : ''}${lastName}${nameExtension ? ' ' + nameExtension : ''}`;\n\n    // Validate email format\n    if (!this.isValidEmail(email)) {\n      throw new BadRequestException('Invalid email format');\n    }\n\n    // Check if user exists by email\n    const existingUserByEmail = await this.usersRepository.findOne({\n      where: { email },\n    });\n    if (existingUserByEmail) {\n      throw new ConflictException('Email already exists');\n    }\n\n    // Check if username is taken\n    if (username) {\n      const existingUserByUsername = await this.usersRepository.findOne({\n        where: { username },\n      });\n      if (existingUserByUsername) {\n        throw new ConflictException('Username already exists');\n      }\n    }\n\n    // Validate password strength\n    const passwordValidation = this.validatePasswordStrength(password);\n    if (!passwordValidation.isValid) {\n      throw new BadRequestException(passwordValidation.message);\n    }\n\n    // Hash password\n    const salt = await bcrypt.genSalt();\n    const hashedPassword = await bcrypt.hash(password, salt);\n\n    try {\n      // Create new user with all fields\n      const user = this.usersRepository.create({\n        email,\n        username,\n        password: hashedPassword,\n        firstName,\n        middleName,\n        lastName,\n        nameExtension,\n        contactNumber,\n        name,\n      });\n\n      await this.usersRepository.save(user);\n\n      // Add citizen role to the user\n      try {\n        const citizenRole = await this.rolesService.findByName('citizen');\n        await this.rolesService.assignRolesToUser(user.id, [citizenRole.id]);\n\n        // Set default role\n        user.defaultRoleId = citizenRole.id;\n        await this.usersRepository.save(user);\n      } catch (error) {\n        this.logger.error('Error assigning citizen role:', error);\n        // Rollback: Delete the user to maintain a consistent state\n        await this.usersRepository.delete(user.id);\n        throw new ConflictException(\n          'Failed to assign citizen role. Registration rolled back.',\n        );\n      }\n\n      // Generate JWT token\n      const payload = { sub: user.id, email: user.email, roles: ['citizen'] };\n\n      // Remove password from response\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { password: __password, ...userWithoutPassword } = user;\n\n      return {\n        access_token: this.jwtService.sign(payload),\n        user: {\n          ...userWithoutPassword,\n          roles: ['citizen'],\n          defaultRole: 'citizen',\n        },\n      };\n    } catch (error) {\n      this.logger.error('Registration error:', error);\n      throw error;\n    }\n  }\n\n  private isValidEmail(email: string): boolean {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  }\n\n  async getProfile(userId: number) {\n    // Validation for userId\n    if (!userId || isNaN(userId)) {\n      throw new UnauthorizedException('Invalid user ID');\n    }\n\n    const user = await this.usersRepository.findOne({\n      where: { id: userId },\n      relations: ['defaultRole'],\n    });\n    if (!user) {\n      throw new UnauthorizedException('User not found');\n    }\n\n    // Get user roles\n    const roles = await this.rolesService.getUserRoles(userId);\n    const roleNames = roles.map((role) => role.name);\n\n    // Remove password from response\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { password: __password, ...result } = user;\n    return {\n      ...result,\n      roles: roleNames,\n      defaultRole: user.defaultRole?.name || 'citizen',\n    };\n  }\n\n  async updateUserInfo(userId: number, updateUserDto: UpdateUserDto) {\n    try {\n      // First get the existing user\n      const user = await this.usersRepository.findOne({\n        where: { id: userId },\n      });\n\n      if (!user) {\n        throw new UnauthorizedException('User not found');\n      }\n\n      // Check if email is being updated and not already taken\n      if (updateUserDto.email && updateUserDto.email !== user.email) {\n        // Validate email format\n        if (!this.isValidEmail(updateUserDto.email)) {\n          throw new BadRequestException('Invalid email format');\n        }\n\n        const existingUserByEmail = await this.usersRepository.findOne({\n          where: { email: updateUserDto.email },\n        });\n\n        if (existingUserByEmail && existingUserByEmail.id !== userId) {\n          throw new ConflictException('Email already exists');\n        }\n      }\n\n      // Check if username is being updated and not already taken\n      if (updateUserDto.username && updateUserDto.username !== user.username) {\n        const existingUserByUsername = await this.usersRepository.findOne({\n          where: { username: updateUserDto.username },\n        });\n\n        if (existingUserByUsername && existingUserByUsername.id !== userId) {\n          throw new ConflictException('Username already exists');\n        }\n      }\n\n      // Handle password change if provided\n      if (updateUserDto.password) {\n        // Validate password strength\n        const passwordValidation = this.validatePasswordStrength(\n          updateUserDto.password,\n        );\n        if (!passwordValidation.isValid) {\n          throw new BadRequestException(passwordValidation.message);\n        }\n\n        // Hash new password\n        const salt = await bcrypt.genSalt();\n        const hashedPassword = await bcrypt.hash(updateUserDto.password, salt);\n        updateUserDto.password = hashedPassword;\n      } else {\n        // Remove password from DTO if not being updated\n        delete updateUserDto.password;\n      }\n\n      // Update name if name parts are changed\n      let shouldUpdateName = false;\n      const nameComponents = {\n        firstName: updateUserDto.firstName || user.firstName,\n        middleName:\n          updateUserDto.middleName !== undefined\n            ? updateUserDto.middleName\n            : user.middleName,\n        lastName: updateUserDto.lastName || user.lastName,\n        nameExtension:\n          updateUserDto.nameExtension !== undefined\n            ? updateUserDto.nameExtension\n            : user.nameExtension,\n      };\n\n      if (\n        updateUserDto.firstName ||\n        updateUserDto.middleName !== undefined ||\n        updateUserDto.lastName ||\n        updateUserDto.nameExtension !== undefined\n      ) {\n        shouldUpdateName = true;\n      }\n\n      // Generate full name if any name component changed\n      if (shouldUpdateName) {\n        const fullName = `${nameComponents.firstName} ${\n          nameComponents.middleName ? nameComponents.middleName + ' ' : ''\n        }${nameComponents.lastName}${\n          nameComponents.nameExtension ? ' ' + nameComponents.nameExtension : ''\n        }`;\n        updateUserDto['name'] = fullName;\n      }\n\n      try {\n        // 🔥 CRITICAL FIX: Remove role-related fields before updating User entity\n        const { roleIds, defaultRoleId, ...userUpdateFields } =\n          updateUserDto as any;\n\n        // Update user with only valid User entity fields\n        await this.usersRepository.update(userId, userUpdateFields);\n\n        // Get updated user with relations\n        const updatedUser = await this.usersRepository.findOne({\n          where: { id: userId },\n          relations: ['defaultRole'],\n        });\n\n        if (!updatedUser) {\n          throw new BadRequestException('Failed to retrieve updated user');\n        }\n\n        // Get user roles\n        const roles = await this.rolesService.getUserRoles(userId);\n        const roleNames = roles.map((role) => role.name);\n\n        // Remove password from response\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { password: __password, ...result } = updatedUser;\n\n        return {\n          ...result,\n          roles: roleNames,\n          defaultRole: updatedUser.defaultRole?.name || 'citizen',\n        };\n      } catch (error: unknown) {\n        this.logger.error('User update database error:', error);\n        if (\n          typeof error === 'object' &&\n          error !== null &&\n          'code' in error &&\n          error.code === 'ER_DUP_ENTRY'\n        ) {\n          throw new ConflictException('Email or username already exists');\n        }\n        throw new BadRequestException(\n          'Failed to update user information in database',\n        );\n      }\n    } catch (error) {\n      this.logger.error('User update error:', error);\n      // Re-throw specific errors\n      if (\n        error instanceof UnauthorizedException ||\n        error instanceof BadRequestException ||\n        error instanceof ConflictException\n      ) {\n        throw error;\n      }\n      // For any other unexpected error\n      throw new BadRequestException('Failed to update user information');\n    }\n  }\n  async adminUpdateUser(\n    adminId: number,\n    targetUserId: number,\n    updateUserDto: AdminUpdateUserDto,\n  ) {\n    this.logger.log(\n      `Admin ${adminId} attempting to update user ${targetUserId}`,\n      updateUserDto,\n    );\n\n    try {\n      // Verify the admin has proper permissions\n      const admin = await this.usersRepository.findOne({\n        where: { id: adminId },\n      });\n\n      if (!admin) {\n        throw new UnauthorizedException('Admin not found');\n      }\n\n      // Get admin roles\n      const adminRoles = await this.rolesService.getUserRoles(adminId);\n      const adminRoleNames = adminRoles.map((role) => role.name);\n\n      // Check if the user has admin or super_admin role\n      const isAuthorized = adminRoleNames.some(\n        (role) => role === 'admin' || role === 'super_admin',\n      );\n\n      if (!isAuthorized) {\n        throw new UnauthorizedException('Insufficient permissions');\n      }\n\n      // Check if target user exists\n      const targetUser = await this.usersRepository.findOne({\n        where: { id: targetUserId },\n      });\n\n      if (!targetUser) {\n        throw new BadRequestException(`User with ID ${targetUserId} not found`);\n      }\n\n      // First perform the basic user update\n      // We'll catch any errors here to handle them appropriately\n      try {\n        await this.updateUserInfo(targetUserId, updateUserDto);\n      } catch (err) {\n        this.logger.error('Error during basic user update:', err);\n        throw err; // Re-throw to be caught by outer try-catch\n      }\n\n      // Handle role updates if provided\n      if (updateUserDto.roleIds && updateUserDto.roleIds.length > 0) {\n        try {\n          // Verify all roles exist before assigning\n          for (const roleId of updateUserDto.roleIds) {\n            try {\n              await this.rolesService.findOne(roleId);\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            } catch (_) {\n              throw new BadRequestException(`Role with ID ${roleId} not found`);\n            }\n          }\n\n          // Assign roles\n          await this.rolesService.assignRolesToUser(\n            targetUserId,\n            updateUserDto.roleIds,\n          );\n          this.logger.log(\n            `Assigned roles ${updateUserDto.roleIds.join(', ')} to user ${targetUserId}`,\n          );\n        } catch (error) {\n          this.logger.error('Error assigning roles:', error);\n          throw new BadRequestException(\n            error instanceof Error ? error.message : 'Failed to assign roles',\n          );\n        }\n      }\n\n      // Update default role if provided\n      if (updateUserDto.defaultRoleId) {\n        try {\n          // Verify the role exists\n          try {\n            await this.rolesService.findOne(updateUserDto.defaultRoleId);\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          } catch (_) {\n            throw new BadRequestException(\n              `Default role with ID ${updateUserDto.defaultRoleId} not found`,\n            );\n          }\n\n          // Verify user has this role assigned or will have it assigned\n          const userRoles = await this.rolesService.getUserRoles(targetUserId);\n          const hasRoleAssigned = userRoles.some(\n            (role) => role.id === updateUserDto.defaultRoleId,\n          );\n\n          const willBeAssigned =\n            updateUserDto.roleIds &&\n            updateUserDto.roleIds.includes(updateUserDto.defaultRoleId);\n\n          if (!hasRoleAssigned && !willBeAssigned) {\n            throw new BadRequestException(\n              'Cannot set default role to a role the user does not have',\n            );\n          }\n\n          // Update the default role\n          await this.usersRepository.update(targetUserId, {\n            defaultRoleId: updateUserDto.defaultRoleId,\n          });\n          this.logger.log(\n            `Updated default role to ${updateUserDto.defaultRoleId} for user ${targetUserId}`,\n          );\n        } catch (error) {\n          this.logger.error('Error updating default role:', error);\n          throw new BadRequestException(\n            error instanceof Error\n              ? error.message\n              : 'Failed to update default role',\n          );\n        }\n      }\n\n      // Return the fully updated user\n      try {\n        const updatedUser = await this.getProfile(targetUserId);\n        return updatedUser;\n      } catch (error) {\n        this.logger.error('Error retrieving updated user profile:', error);\n        throw new BadRequestException(\n          'User was updated but profile could not be retrieved',\n        );\n      }\n    } catch (error) {\n      this.logger.error('Admin update user error:', error);\n\n      // Re-throw specific exceptions\n      if (\n        error instanceof UnauthorizedException ||\n        error instanceof BadRequestException ||\n        error instanceof ConflictException\n      ) {\n        throw error;\n      }\n\n      // For any other errors\n      throw new BadRequestException(\n        'Failed to update user: Unexpected error occurred',\n      );\n    }\n  }\n\n  // Add this method to find user by email\n  async findUserByEmail(email: string): Promise {\n    try {\n      const user = await this.usersRepository.findOne({\n        where: { email },\n        relations: ['defaultRole'],\n      });\n      return user;\n    } catch (error) {\n      this.logger.error('Error finding user by email:', error);\n      return null;\n    }\n  }\n\n  // Add this method to update password\n  async updatePassword(email: string, newPassword: string): Promise {\n    try {\n      // Validate password strength\n      const passwordValidation = this.validatePasswordStrength(newPassword);\n      if (!passwordValidation.isValid) {\n        throw new BadRequestException(passwordValidation.message);\n      }\n\n      // Find user by email\n      const user = await this.findUserByEmail(email);\n      if (!user) {\n        throw new BadRequestException('User not found');\n      }\n\n      // Hash new password\n      const salt = await bcrypt.genSalt();\n      const hashedPassword = await bcrypt.hash(newPassword, salt);\n\n      // Update password in database\n      await this.usersRepository.update(\n        { id: user.id },\n        { password: hashedPassword },\n      );\n\n      this.logger.log(`Password updated successfully for user: ${email}`);\n    } catch (error) {\n      this.logger.error('Error updating password:', error);\n      throw error;\n    }\n  }\n\n  private validatePasswordStrength(password: string): {\n    isValid: boolean;\n    message?: string;\n  } {\n    if (!password) {\n      return { isValid: false, message: 'Password is required' };\n    }\n\n    if (password.length ]/.test(password);\n\n    if (!hasUpperCase) {\n      return {\n        isValid: false,\n        message: 'Password must contain at least one uppercase letter',\n      };\n    }\n\n    if (!hasLowerCase) {\n      return {\n        isValid: false,\n        message: 'Password must contain at least one lowercase letter',\n      };\n    }\n\n    if (!hasNumbers) {\n      return {\n        isValid: false,\n        message: 'Password must contain at least one number',\n      };\n    }\n\n    if (!hasSpecialChars) {\n      return {\n        isValid: false,\n        message:\n          'Password must contain at least one special character (!@#$%^&*(),.?\":{}|<>)',\n      };\n    }\n\n    return { isValid: true };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for user login\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                emailOrUsername\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        emailOrUsername\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Email or username for login', example: 'test@example.com'})@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Test User password', example: 'password123'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\n/**\n * DTO for user login\n * @class LoginDto\n */\n\nexport class LoginDto {\n  @ApiProperty({\n    description: 'Email or username for login',\n    example: 'test@example.com',\n  })\n  @IsNotEmpty()\n  emailOrUsername: string;\n\n  @ApiProperty({\n    description: 'Test User password',\n    example: 'password123',\n  })\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MinioService.html":{"url":"injectables/MinioService.html","title":"injectable - MinioService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MinioService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/minio.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                bucketName\n                            \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                minioClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteFile\n                            \n                            \n                                    Async\n                                getDownloadUrl\n                            \n                            \n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/services/minio.service.ts:8\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteFile(objectName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/minio.service.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                objectName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getDownloadUrl\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDownloadUrl(objectName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/minio.service.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                objectName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(file: Express.Multer.File, objectName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/minio.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                objectName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        bucketName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/services/minio.service.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(MinioService.name)\n                    \n                \n                    \n                        \n                                Defined in src/services/minio.service.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        minioClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Minio.Client\n\n                    \n                \n                    \n                        \n                                Defined in src/services/minio.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport * as Minio from 'minio';\n\n@Injectable()\nexport class MinioService {\n  private readonly logger = new Logger(MinioService.name);\n  private minioClient: Minio.Client;\n  private bucketName: string;\n\n  constructor() {\n    const enablePort = process.env.MINIO_ENABLE_PORT !== 'false'; // Default to true for backward compatibility\n\n    const minioConfig: {\n      endPoint: string;\n      useSSL: boolean;\n      accessKey: string;\n      secretKey: string;\n      region: string;\n      pathStyle: boolean;\n      port?: number;\n    } = {\n      endPoint: process.env.MINIO_ENDPOINT || 'localhost',\n      useSSL: process.env.MINIO_USE_SSL === 'true',\n      accessKey: process.env.MINIO_ACCESS_KEY || 'minioadmin',\n      secretKey: process.env.MINIO_SECRET_KEY || 'minioadmin123',\n      region: 'auto', // R2 uses 'auto' region\n      pathStyle: true, // Required for R2 compatibility\n    };\n\n    // Conditionally include port for R2 compatibility\n    if (enablePort) {\n      minioConfig.port = parseInt(process.env.MINIO_PORT || '9000');\n    }\n\n    this.minioClient = new Minio.Client(minioConfig);\n\n    this.bucketName = process.env.MINIO_BUCKET_NAME || 'bulak-smart-connect';\n  }\n\n  async uploadFile(\n    file: Express.Multer.File,\n    objectName: string,\n  ): Promise {\n    try {\n      await this.minioClient.putObject(\n        this.bucketName,\n        objectName,\n        file.buffer,\n        file.size,\n        {\n          'Content-Type': file.mimetype,\n          'Original-Name': file.originalname,\n        },\n      );\n\n      this.logger.log(`File uploaded: ${objectName}`);\n      return objectName;\n    } catch (error) {\n      this.logger.error('Upload failed:', error);\n      throw error;\n    }\n  }\n\n  async getDownloadUrl(objectName: string): Promise {\n    try {\n      return await this.minioClient.presignedGetObject(\n        this.bucketName,\n        objectName,\n        3600,\n      );\n    } catch (error) {\n      this.logger.error('Get URL failed:', error);\n      throw error;\n    }\n  }\n\n  async deleteFile(objectName: string): Promise {\n    try {\n      await this.minioClient.removeObject(this.bucketName, objectName);\n      this.logger.log(`File deleted: ${objectName}`);\n    } catch (error) {\n      this.logger.error('Delete failed:', error);\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MinioService-1.html":{"url":"injectables/MinioService-1.html","title":"injectable - MinioService-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MinioService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/document-applications/services/minio.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                bucketName\n                            \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                minioClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteFile\n                            \n                            \n                                    Async\n                                ensureBucketExists\n                            \n                            \n                                    Async\n                                getFileInfo\n                            \n                            \n                                    Async\n                                getPresignedUrl\n                            \n                            \n                                    Async\n                                getR2PresignedUrl\n                            \n                            \n                                    Async\n                                listFiles\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                            \n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/document-applications/services/minio.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteFile(objectName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/document-applications/services/minio.service.ts:154\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                objectName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        ensureBucketExists\n                        \n                    \n                \n            \n            \n                \n                        \n                    ensureBucketExists()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/document-applications/services/minio.service.ts:71\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getFileInfo\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFileInfo(objectName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/document-applications/services/minio.service.ts:164\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                objectName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPresignedUrl\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPresignedUrl(objectName: string, expiry: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/document-applications/services/minio.service.ts:114\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                objectName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                expiry\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    3600\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getR2PresignedUrl\n                        \n                    \n                \n            \n            \n                \n                        \n                    getR2PresignedUrl(objectName: string, expiry: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/document-applications/services/minio.service.ts:130\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                objectName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                expiry\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    3600\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        listFiles\n                        \n                    \n                \n            \n            \n                \n                        \n                    listFiles(prefix?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/document-applications/services/minio.service.ts:173\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                prefix\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/document-applications/services/minio.service.ts:67\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(file: Express.Multer.File, objectName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/document-applications/services/minio.service.ts:86\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                objectName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        bucketName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/services/minio.service.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(MinioService.name)\n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/services/minio.service.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        minioClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Minio.Client\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/services/minio.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, OnModuleInit } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport * as Minio from 'minio';\n\n@Injectable()\nexport class MinioService implements OnModuleInit {\n  private readonly logger = new Logger(MinioService.name);\n  private minioClient: Minio.Client;\n  private bucketName: string;\n\n  constructor(private configService: ConfigService) {\n    const endpoint = this.configService.get(\n      'MINIO_ENDPOINT',\n      'localhost',\n    );\n    const port = this.configService.get('MINIO_PORT', 9000);\n    const enablePort =\n      this.configService.get('MINIO_ENABLE_PORT', 'true') !== 'false'; // Default to true for backward compatibility\n    const useSSLValue = this.configService\n      .get('MINIO_USE_SSL', 'false')\n      .toLowerCase();\n    const useSSL = ['true', '1', 'yes', 'on'].includes(useSSLValue);\n    const accessKey = this.configService.get(\n      'MINIO_ACCESS_KEY',\n      'minioadmin',\n    );\n    const secretKey = this.configService.get(\n      'MINIO_SECRET_KEY',\n      'minioadmin123',\n    );\n\n    const minioConfig: {\n      endPoint: string;\n      useSSL: boolean;\n      accessKey: string;\n      secretKey: string;\n      region: string;\n      pathStyle: boolean;\n      port?: number;\n    } = {\n      endPoint: endpoint,\n      useSSL: useSSL,\n      accessKey: accessKey,\n      secretKey: secretKey,\n      region: 'auto', // R2 uses 'auto' region\n      pathStyle: true, // Required for R2 compatibility\n    };\n\n    // Conditionally include port for R2 compatibility\n    if (enablePort) {\n      minioConfig.port = port;\n    }\n\n    this.minioClient = new Minio.Client(minioConfig);\n\n    this.bucketName = this.configService.get(\n      'MINIO_BUCKET_NAME',\n      'bulak-smart-connect',\n    );\n\n    const portDisplay = enablePort ? `:${port}` : '';\n    this.logger.log(\n      `MinIO configured with endpoint: ${endpoint}${portDisplay}`,\n    );\n  }\n\n  async onModuleInit() {\n    await this.ensureBucketExists();\n  }\n\n  async ensureBucketExists(): Promise {\n    try {\n      const exists = await this.minioClient.bucketExists(this.bucketName);\n      if (!exists) {\n        await this.minioClient.makeBucket(this.bucketName, 'auto');\n        this.logger.log(`Bucket ${this.bucketName} created successfully`);\n      } else {\n        this.logger.log(`Bucket ${this.bucketName} already exists`);\n      }\n    } catch (error) {\n      this.logger.error('Error ensuring bucket exists:', error);\n      throw error;\n    }\n  }\n\n  async uploadFile(\n    file: Express.Multer.File,\n    objectName: string,\n  ): Promise {\n    try {\n      const metaData = {\n        'Content-Type': file.mimetype,\n        'Original-Name': file.originalname,\n        'Upload-Date': new Date().toISOString(),\n        'File-Size': file.size.toString(),\n      };\n\n      await this.minioClient.putObject(\n        this.bucketName,\n        objectName,\n        file.buffer,\n        file.size,\n        metaData,\n      );\n\n      this.logger.log(`File uploaded successfully: ${objectName}`);\n      return objectName;\n    } catch (error) {\n      this.logger.error('Error uploading file:', error);\n      throw error;\n    }\n  }\n\n  async getPresignedUrl(\n    objectName: string,\n    expiry: number = 3600,\n  ): Promise {\n    try {\n      return await this.minioClient.presignedGetObject(\n        this.bucketName,\n        objectName,\n        expiry,\n      );\n    } catch (error) {\n      this.logger.error('Error generating presigned URL:', error);\n      throw error;\n    }\n  }\n\n  async getR2PresignedUrl(\n    objectName: string,\n    expiry: number = 3600,\n  ): Promise {\n    try {\n      // Use direct AWS SDK v3 for better R2 compatibility\n      const url = await this.minioClient.presignedGetObject(\n        this.bucketName,\n        objectName,\n        expiry,\n        {\n          'response-content-disposition': 'inline',\n        },\n      );\n\n      // Log for debugging\n      this.logger.debug(`Generated presigned URL for ${objectName}: ${url}`);\n      return url;\n    } catch (error) {\n      this.logger.error('Error generating R2 presigned URL:', error);\n      throw error;\n    }\n  }\n\n  async deleteFile(objectName: string): Promise {\n    try {\n      await this.minioClient.removeObject(this.bucketName, objectName);\n      this.logger.log(`File deleted successfully: ${objectName}`);\n    } catch (error) {\n      this.logger.error('Error deleting file:', error);\n      throw error;\n    }\n  }\n\n  async getFileInfo(objectName: string): Promise {\n    try {\n      return await this.minioClient.statObject(this.bucketName, objectName);\n    } catch (error) {\n      this.logger.error('Error getting file info:', error);\n      throw error;\n    }\n  }\n\n  async listFiles(prefix?: string): Promise {\n    return new Promise((resolve, reject) => {\n      const files: any[] = [];\n      const stream = this.minioClient.listObjects(\n        this.bucketName,\n        prefix,\n        true,\n      );\n\n      stream.on('data', (obj) => files.push(obj));\n      stream.on('error', reject);\n      stream.on('end', () => resolve(files));\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/OTP.html":{"url":"entities/OTP.html","title":"entity - OTP","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  OTP\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/otp.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                expiresAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                otp\n                            \n                            \n                                    \n                                purpose\n                            \n                            \n                                    \n                                verified\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/otp.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/otp.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        expiresAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/otp.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/otp.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        otp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/otp.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        purpose\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/otp.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        verified\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/otp.entity.ts:23\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  CreateDateColumn,\n} from 'typeorm';\n\n@Entity('otps')\nexport class OTP {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  email: string;\n\n  @Column()\n  otp: string;\n\n  @Column()\n  purpose: string; // 'verification', 'password_reset', etc.\n\n  @Column({ default: false })\n  verified: boolean;\n\n  @Column({ type: 'timestamp' })\n  expiresAt: Date;\n\n  @CreateDateColumn()\n  createdAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OTPService.html":{"url":"injectables/OTPService.html","title":"injectable - OTPService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OTPService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/otp.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                cleanupExpiredOTPs\n                            \n                            \n                                    Async\n                                generateOTP\n                            \n                            \n                                    Async\n                                verifyOTP\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(otpRepository: Repository, emailService: EmailService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/services/otp.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        otpRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        emailService\n                                                  \n                                                        \n                                                                        EmailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        cleanupExpiredOTPs\n                        \n                    \n                \n            \n            \n                \n                        \n                    cleanupExpiredOTPs()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/otp.service.ts:92\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateOTP\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateOTP(email: string, purpose: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/otp.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                purpose\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'verification'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyOTP\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyOTP(email: string, otp: string, purpose: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/otp.service.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                otp\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                purpose\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'verification'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { LessThan } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport * as speakeasy from 'speakeasy';\nimport { ConfigService } from '@nestjs/config';\nimport { EmailService } from './email.service';\nimport { OTP } from '../entities/otp.entity';\n\n@Injectable()\nexport class OTPService {\n  constructor(\n    @InjectRepository(OTP)\n    private otpRepository: Repository,\n    private emailService: EmailService,\n    private configService: ConfigService,\n  ) {}\n\n  async generateOTP(\n    email: string,\n    purpose: string = 'verification',\n  ): Promise {\n    // Invalidate any existing OTPs for this email and purpose\n    await this.otpRepository.update(\n      { email, purpose, verified: false },\n      { verified: true }, // Mark as used\n    );\n\n    // Generate new OTP\n    const otpLength = parseInt(this.configService.get('OTP_LENGTH', '6'));\n    const otp = speakeasy.totp({\n      secret: this.configService.get('OTP_SECRET') || 'default-secret-key',\n      digits: otpLength,\n      step: 300, // 5 minutes\n      encoding: 'base32',\n    });\n\n    // Calculate expiry time\n    const expiryMinutes = parseInt(\n      this.configService.get('OTP_EXPIRY_MINUTES', '5'),\n    );\n    const expiresAt = new Date();\n    expiresAt.setMinutes(expiresAt.getMinutes() + expiryMinutes);\n\n    // Save OTP to database\n    const otpEntity = this.otpRepository.create({\n      email,\n      otp,\n      purpose,\n      expiresAt,\n      verified: false,\n    });\n\n    await this.otpRepository.save(otpEntity);\n\n    // Send email\n    await this.emailService.sendOTP(email, otp, purpose);\n\n    return otp; // Only return for testing purposes\n  }\n\n  async verifyOTP(\n    email: string,\n    otp: string,\n    purpose: string = 'verification',\n  ): Promise {\n    const otpEntity = await this.otpRepository.findOne({\n      where: {\n        email,\n        otp,\n        purpose,\n        verified: false,\n      },\n    });\n\n    if (!otpEntity) {\n      return false;\n    }\n\n    // Check if expired\n    if (new Date() > otpEntity.expiresAt) {\n      return false;\n    }\n\n    // Mark as verified\n    otpEntity.verified = true;\n    await this.otpRepository.save(otpEntity);\n\n    return true;\n  }\n\n  async cleanupExpiredOTPs(): Promise {\n    await this.otpRepository.delete({\n      expiresAt: LessThan(new Date()),\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginatedUsersResponseDto.html":{"url":"classes/PaginatedUsersResponseDto.html","title":"class - PaginatedUsersResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginatedUsersResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/paginated-users-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                limit\n                            \n                            \n                                    \n                                page\n                            \n                            \n                                    \n                                total\n                            \n                            \n                                    \n                                totalPages\n                            \n                            \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 10, description: 'Number of items per page'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/paginated-users-response.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 1, description: 'Current page number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/paginated-users-response.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        total\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 100, description: 'Total number of users'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/paginated-users-response.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        totalPages\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 10, description: 'Total number of pages'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/paginated-users-response.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserResponseDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined, description: 'Array of users'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/paginated-users-response.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { UserResponseDto } from './user-response.dto';\n\nexport class PaginatedUsersResponseDto {\n  @ApiProperty({\n    type: [UserResponseDto],\n    description: 'Array of users',\n  })\n  users: UserResponseDto[];\n\n  @ApiProperty({\n    example: 100,\n    description: 'Total number of users',\n  })\n  total: number;\n\n  @ApiProperty({\n    example: 1,\n    description: 'Current page number',\n  })\n  page: number;\n\n  @ApiProperty({\n    example: 10,\n    description: 'Number of items per page',\n  })\n  limit: number;\n\n  @ApiProperty({\n    example: 10,\n    description: 'Total number of pages',\n  })\n  totalPages: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Queue.html":{"url":"entities/Queue.html","title":"entity - Queue","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Queue\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/entities/queue.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                completedAt\n                            \n                            \n                                    \n                                counter\n                            \n                            \n                                    \n                                counterNumber\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                details\n                            \n                            \n                                    \n                                estimatedWaitTime\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                queueNumber\n                            \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        completedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'completed_at', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        counter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Counter\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, counter => counter.currentQueue, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        counterNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'counter_number', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        details\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueueDetails[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, details => details.queue)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        estimatedWaitTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'estimated_wait_time', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        queueNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'queue_number', unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueueStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: QueueStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:32\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  OneToMany,\n  CreateDateColumn,\n  OneToOne,\n} from 'typeorm';\nimport { QueueDetails } from './queue-details.entity';\nimport { Counter } from '../../counter/entities/counter.entity';\n\nexport enum QueueStatus {\n  PENDING = 'pending',\n  SERVING = 'serving',\n  COMPLETED = 'completed',\n  CANCELLED = 'cancelled',\n}\n\n@Entity('queues')\nexport class Queue {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ name: 'queue_number', unique: true })\n  queueNumber: string;\n\n  @Column({\n    type: 'enum',\n    enum: QueueStatus,\n    default: QueueStatus.PENDING,\n  })\n  status: QueueStatus;\n\n  @Column({ name: 'counter_number', nullable: true })\n  counterNumber: string;\n\n  @CreateDateColumn({ name: 'created_at' })\n  createdAt: Date;\n\n  @Column({ name: 'completed_at', nullable: true })\n  completedAt: Date;\n\n  @Column({ name: 'estimated_wait_time', nullable: true })\n  estimatedWaitTime: number;\n\n  @OneToMany(() => QueueDetails, (details) => details.queue)\n  details: QueueDetails[];\n\n  @OneToOne(() => Counter, (counter) => counter.currentQueue, {\n    nullable: true,\n  })\n  counter: Counter;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/QueueDetails.html":{"url":"entities/QueueDetails.html","title":"entity - QueueDetails","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  QueueDetails\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/entities/queue-details.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                address\n                            \n                            \n                                    \n                                appointmentType\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isGuest\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                middleInitial\n                            \n                            \n                                    \n                                phoneNumber\n                            \n                            \n                                    \n                                    \n                                queue\n                            \n                            \n                                    \n                                queueId\n                            \n                            \n                                    \n                                reasonOfVisit\n                            \n                            \n                                    \n                                    \n                                user\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        appointmentType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'appointment_type'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'first_name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isGuest\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'is_guest', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'last_name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        middleInitial\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'middle_initial', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'phone_number', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        queue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Queue\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, queue => queue.details, {onDelete: 'CASCADE'})@JoinColumn({name: 'queue_id', foreignKeyConstraintName: 'fk_queue_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        queueId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'queue_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reasonOfVisit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'reason_of_visit'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {onDelete: 'SET NULL', nullable: true})@JoinColumn({name: 'user_id', foreignKeyConstraintName: 'fk_user_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'user_id', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:24\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  JoinColumn,\n} from 'typeorm';\nimport { Queue } from './queue.entity';\nimport { User } from '../../../users/entities/user.entity';\n\n@Entity('queue_details')\nexport class QueueDetails {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ name: 'queue_id' })\n  queueId: number;\n\n  @ManyToOne(() => Queue, (queue) => queue.details, { onDelete: 'CASCADE' })\n  @JoinColumn({ name: 'queue_id', foreignKeyConstraintName: 'fk_queue_id' })\n  queue: Queue;\n\n  @Column({ name: 'user_id', nullable: true })\n  userId: number;\n\n  @ManyToOne(() => User, { onDelete: 'SET NULL', nullable: true })\n  @JoinColumn({ name: 'user_id', foreignKeyConstraintName: 'fk_user_id' })\n  user: User;\n\n  @Column({ name: 'first_name' })\n  firstName: string;\n\n  @Column({ name: 'last_name' })\n  lastName: string;\n\n  @Column({ name: 'middle_initial', nullable: true })\n  middleInitial: string;\n\n  @Column({ nullable: true })\n  address: string;\n\n  @Column({ name: 'phone_number', nullable: true })\n  phoneNumber: string;\n\n  @Column({ name: 'reason_of_visit' })\n  reasonOfVisit: string;\n\n  @Column({ name: 'appointment_type' })\n  appointmentType: string;\n\n  @Column({ name: 'is_guest', default: false })\n  isGuest: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QueueGateway.html":{"url":"classes/QueueGateway.html","title":"class - QueueGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QueueGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/queue.gateway.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        OnGatewayConnection\n                        OnGatewayDisconnect\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleConnection\n                            \n                            \n                                handleDisconnect\n                            \n                            \n                                    \n                                    Async\n                                handleGetQueuePosition\n                            \n                            \n                                    \n                                    Async\n                                handleJoinCounter\n                            \n                            \n                                    \n                                    Async\n                                handleJoinQueue\n                            \n                            \n                                    \n                                    Async\n                                handleJoinQueueUpdates\n                            \n                            \n                                notifyCounterUpdate\n                            \n                            \n                                notifyQueueUpdate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(queueService: QueueService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/queue/queue.gateway.ts:26\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        queueService\n                                                  \n                                                        \n                                                                        QueueService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(QueueGateway.name)\n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/queue.gateway.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/queue.gateway.ts:26\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handleConnection\n                        \n                    \n                \n            \n            \n                \nhandleConnection(client: Socket)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleDisconnect\n                        \n                    \n                \n            \n            \n                \nhandleDisconnect(client: Socket)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleGetQueuePosition\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleGetQueuePosition(client: Socket, queueId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('getQueuePosition')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleJoinCounter\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleJoinCounter(client: Socket, counterId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('joinCounter')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                counterId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleJoinQueue\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleJoinQueue(client: Socket, queueId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('joinQueue')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleJoinQueueUpdates\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleJoinQueueUpdates(client: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('join_queue_updates')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notifyCounterUpdate\n                        \n                    \n                \n            \n            \n                \nnotifyCounterUpdate(counterId: number, data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                counterId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notifyQueueUpdate\n                        \n                    \n                \n            \n            \n                \nnotifyQueueUpdate(queueId: number, data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  WebSocketGateway,\n  WebSocketServer,\n  SubscribeMessage,\n  OnGatewayConnection,\n  OnGatewayDisconnect,\n} from '@nestjs/websockets';\nimport { Server, Socket } from 'socket.io';\nimport { QueueService } from './queue.service';\nimport { Logger, Inject, forwardRef } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\n@WebSocketGateway({\n  cors: {\n    origin: process.env.WS_CORS_ORIGIN || 'http://localhost:5173',\n    methods: ['GET', 'POST'],\n    credentials: true,\n    allowedHeaders: ['Content-Type', 'Authorization'],\n  },\n  namespace: 'socket.io', // Add this to match client expectation\n})\nexport class QueueGateway implements OnGatewayConnection, OnGatewayDisconnect {\n  private readonly logger = new Logger(QueueGateway.name);\n\n  @WebSocketServer()\n  server: Server;\n\n  constructor(\n    @Inject(forwardRef(() => QueueService))\n    private readonly queueService: QueueService,\n    private readonly configService: ConfigService,\n  ) {}\n\n  handleConnection(client: Socket) {\n    this.logger.log(`Client connected: ${client.id}`);\n    this.logger.log(\n      `CORS origin configured: ${this.configService.get('WS_CORS_ORIGIN')}`,\n    );\n  }\n\n  handleDisconnect(client: Socket) {\n    this.logger.log(`Client disconnected: ${client.id}`);\n  }\n\n  @SubscribeMessage('joinQueue')\n  async handleJoinQueue(client: Socket, queueId: number) {\n    await client.join(`queue_${queueId}`);\n    const queueData = await this.queueService.getQueueDetails(queueId);\n    return queueData;\n  }\n\n  @SubscribeMessage('getQueuePosition')\n  async handleGetQueuePosition(client: Socket, queueId: number) {\n    const position = await this.queueService.getQueuePosition(queueId);\n    return { position };\n  }\n\n  @SubscribeMessage('joinCounter')\n  async handleJoinCounter(client: Socket, counterId: number) {\n    await client.join(`counter_${counterId}`);\n    return { success: true };\n  }\n\n  @SubscribeMessage('join_queue_updates')\n  async handleJoinQueueUpdates(client: Socket) {\n    this.logger.log(`Socket ${client.id} joined queue updates`);\n    await client.join('queue_updates');\n    return { event: 'joined', data: 'Successfully joined queue updates' };\n  }\n\n  // Send updates to all clients or specific rooms\n  notifyQueueUpdate(queueId: number, data: any) {\n    void this.server.to(`queue_${queueId}`).emit('queueUpdate', data);\n    void this.server.emit('queueListUpdate'); // Global queue update\n  }\n\n  notifyCounterUpdate(counterId: number, data: any) {\n    void this.server.to(`counter_${counterId}`).emit('counterUpdate', data);\n    void this.server.emit('counterListUpdate'); // Global counter update\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/QueueModule.html":{"url":"modules/QueueModule.html","title":"module - QueueModule","body":"\n                   \n\n\n\n\n    Modules\n    QueueModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_QueueModule\n\n\n\ncluster_QueueModule_providers\n\n\n\ncluster_QueueModule_exports\n\n\n\n\nQueueGateway \n\nQueueGateway \n\n\n\nQueueSchedulerService \n\nQueueSchedulerService \n\n\n\nQueueService \n\nQueueService \n\n\n\nQueueModule\n\nQueueModule\n\nQueueGateway  -->\n\nQueueModule->QueueGateway \n\n\n\nQueueSchedulerService  -->\n\nQueueModule->QueueSchedulerService \n\n\n\nQueueService  -->\n\nQueueModule->QueueService \n\n\n\n\n\nQueueSchedulerService\n\nQueueSchedulerService\n\nQueueModule -->\n\nQueueSchedulerService->QueueModule\n\n\n\n\n\nQueueService\n\nQueueService\n\nQueueModule -->\n\nQueueService->QueueModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/queue/queue.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            QueueSchedulerService\n                        \n                        \n                            QueueService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            QueueController\n                        \n                        \n                            QueuesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            QueueGateway\n                        \n                        \n                            QueueSchedulerService\n                        \n                        \n                            QueueService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {\n  Module,\n  //forwardRef, // Uncomment if you need to use forwardRef\n} from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ScheduleModule } from '@nestjs/schedule';\nimport { QueueService } from './queue.service';\nimport { QueueController } from './queue.controller';\nimport { QueuesController } from './queues.controller';\nimport { QueueGateway } from './queue.gateway';\nimport { QueueSchedulerService } from './queue-scheduler.service';\nimport { Queue } from './entities/queue.entity';\nimport { QueueDetails } from './entities/queue-details.entity';\nimport { Counter } from '../counter/entities/counter.entity';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Queue, QueueDetails, Counter]),\n    ScheduleModule.forRoot(),\n  ],\n  controllers: [QueueController, QueuesController],\n  providers: [QueueService, QueueGateway, QueueSchedulerService],\n  exports: [QueueService, QueueGateway, QueueSchedulerService],\n})\nexport class QueueModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QueueNotificationDto.html":{"url":"classes/QueueNotificationDto.html","title":"class - QueueNotificationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QueueNotificationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/queue-notification.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                estimatedTime\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                message\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                position\n                            \n                            \n                                    \n                                    \n                                queueNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                            \n                                    \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Recipient email address', example: 'user@example.com'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/queue-notification.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        estimatedTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Estimated waiting time', example: '10 minutes', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/queue-notification.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Additional message', example: 'Please proceed to the counter', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/queue-notification.dto.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        position\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Queue position (for position alerts)', example: 3, required: false})@IsOptional()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/queue-notification.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        queueNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Queue number', example: 'WK001'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/queue-notification.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Queue status (for status updates)', example: 'now_serving', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/queue-notification.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Notification type', example: 'position_alert', enum: undefined})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/queue-notification.dto.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsString, IsOptional, IsNumber } from 'class-validator';\n\nexport class QueueNotificationDto {\n  @ApiProperty({\n    description: 'Recipient email address',\n    example: 'user@example.com',\n  })\n  @IsEmail()\n  email: string;\n\n  @ApiProperty({\n    description: 'Queue number',\n    example: 'WK001',\n  })\n  @IsString()\n  queueNumber: string;\n\n  @ApiProperty({\n    description: 'Notification type',\n    example: 'position_alert',\n    enum: ['position_alert', 'status_update'],\n  })\n  @IsString()\n  type: string;\n\n  @ApiProperty({\n    description: 'Queue position (for position alerts)',\n    example: 3,\n    required: false,\n  })\n  @IsOptional()\n  @IsNumber()\n  position?: number;\n\n  @ApiProperty({\n    description: 'Estimated waiting time',\n    example: '10 minutes',\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  estimatedTime?: string;\n\n  @ApiProperty({\n    description: 'Queue status (for status updates)',\n    example: 'now_serving',\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  status?: string;\n\n  @ApiProperty({\n    description: 'Additional message',\n    example: 'Please proceed to the counter',\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  message?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QueueSchedulerService.html":{"url":"injectables/QueueSchedulerService.html","title":"injectable - QueueSchedulerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  QueueSchedulerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/queue-scheduler.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                isResetInProgress\n                            \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getTodayPendingCount\n                            \n                            \n                                    \n                                    Async\n                                handleDailyQueueReset\n                            \n                            \n                                    Private\n                                    Async\n                                logDailyStatistics\n                            \n                            \n                                    Async\n                                manualDailyReset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(queueRepository: Repository, queueGateway: QueueGateway)\n                    \n                \n                        \n                            \n                                Defined in src/modules/queue/queue-scheduler.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        queueRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queueGateway\n                                                  \n                                                        \n                                                                        QueueGateway\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getTodayPendingCount\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTodayPendingCount()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue-scheduler.service.ts:178\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleDailyQueueReset\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleDailyQueueReset()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron('59 23 * * *', {name: 'daily-queue-reset', timeZone: 'Asia/Manila'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue-scheduler.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        logDailyStatistics\n                        \n                    \n                \n            \n            \n                \n                        \n                    logDailyStatistics(startOfDay: Date, endOfDay: Date)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue-scheduler.service.ts:137\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                startOfDay\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                endOfDay\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        manualDailyReset\n                        \n                    \n                \n            \n            \n                \n                        \n                    manualDailyReset()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue-scheduler.service.ts:172\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isResetInProgress\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/queue-scheduler.service.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(QueueSchedulerService.name)\n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/queue-scheduler.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { Cron } from '@nestjs/schedule';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, Between } from 'typeorm';\nimport { Queue, QueueStatus } from './entities/queue.entity';\nimport { QueueGateway } from './queue.gateway';\n\n@Injectable()\nexport class QueueSchedulerService {\n  private readonly logger = new Logger(QueueSchedulerService.name);\n  private isResetInProgress = false;\n\n  constructor(\n    @InjectRepository(Queue)\n    private queueRepository: Repository,\n    private queueGateway: QueueGateway,\n  ) {}\n\n  // Run every day at 11:59 PM (23:59)\n  @Cron('59 23 * * *', {\n    name: 'daily-queue-reset',\n    timeZone: 'Asia/Manila',\n  })\n  async handleDailyQueueReset() {\n    // ✅ FIXED: Prevent concurrent execution\n    if (this.isResetInProgress) {\n      this.logger.warn('🚫 Daily reset already in progress, skipping...');\n      return;\n    }\n\n    this.isResetInProgress = true;\n    this.logger.log('🔄 Starting daily queue reset process...');\n\n    try {\n      // ✅ FIXED: Better timezone handling\n      const today = new Date();\n      const startOfDay = new Date(\n        today.getFullYear(),\n        today.getMonth(),\n        today.getDate(),\n        0,\n        0,\n        0,\n        0,\n      );\n      const endOfDay = new Date(\n        today.getFullYear(),\n        today.getMonth(),\n        today.getDate(),\n        23,\n        59,\n        59,\n        999,\n      );\n\n      this.logger.log(\n        `🗓️ Searching for queues between: ${startOfDay.toISOString()} and ${endOfDay.toISOString()}`,\n      );\n\n      // Get all pending queues created today\n      const pendingQueues = await this.queueRepository.find({\n        where: {\n          status: QueueStatus.PENDING,\n          createdAt: Between(startOfDay, endOfDay),\n        },\n      });\n\n      this.logger.log(\n        `📋 Found ${pendingQueues.length} pending queues to cancel`,\n      );\n\n      if (pendingQueues.length > 0) {\n        // Mark all pending queues as cancelled\n        const cancelledQueues = await this.queueRepository.save(\n          pendingQueues.map((queue) => ({\n            ...queue,\n            status: QueueStatus.CANCELLED,\n            completedAt: new Date(),\n          })),\n        );\n\n        this.logger.log(\n          `❌ Cancelled ${cancelledQueues.length} pending queues`,\n        );\n\n        // Notify clients about cancellations\n        for (const queue of cancelledQueues) {\n          this.queueGateway.notifyQueueUpdate(queue.id, {\n            action: 'cancelled',\n            reason: 'End of day auto-cancellation',\n            queue: queue,\n          });\n        }\n\n        // Send general notification\n        this.queueGateway.server.emit('dailyQueueReset', {\n          cancelledCount: cancelledQueues.length,\n          timestamp: new Date(),\n          message:\n            'Daily queue reset completed. All pending queues have been cancelled.',\n        });\n      }\n\n      // Also cancel any serving queues\n      const servingQueues = await this.queueRepository.find({\n        where: {\n          status: QueueStatus.SERVING,\n          createdAt: Between(startOfDay, endOfDay),\n        },\n      });\n\n      if (servingQueues.length > 0) {\n        const cancelledServingQueues = await this.queueRepository.save(\n          servingQueues.map((queue) => ({\n            ...queue,\n            status: QueueStatus.CANCELLED,\n            completedAt: new Date(),\n          })),\n        );\n\n        this.logger.log(\n          `❌ Cancelled ${cancelledServingQueues.length} serving queues`,\n        );\n      }\n\n      this.logger.log('✅ Daily queue reset completed successfully');\n      await this.logDailyStatistics(startOfDay, endOfDay);\n    } catch (error) {\n      this.logger.error('❌ Error during daily queue reset:', error);\n      throw error; // ✅ FIXED: Propagate error for proper handling\n    } finally {\n      this.isResetInProgress = false; // ✅ FIXED: Always reset flag\n    }\n  }\n\n  // Optional: Log daily statistics\n  private async logDailyStatistics(startOfDay: Date, endOfDay: Date) {\n    try {\n      const [completed, cancelled, total] = await Promise.all([\n        this.queueRepository.count({\n          where: {\n            status: QueueStatus.COMPLETED,\n            createdAt: Between(startOfDay, endOfDay),\n          },\n        }),\n        this.queueRepository.count({\n          where: {\n            status: QueueStatus.CANCELLED,\n            createdAt: Between(startOfDay, endOfDay),\n          },\n        }),\n        this.queueRepository.count({\n          where: {\n            createdAt: Between(startOfDay, endOfDay),\n          },\n        }),\n      ]);\n\n      this.logger.log(`📊 Daily Statistics for ${startOfDay.toDateString()}:`);\n      this.logger.log(`   Total Queues: ${total}`);\n      this.logger.log(`   Completed: ${completed}`);\n      this.logger.log(`   Cancelled: ${cancelled}`);\n      this.logger.log(\n        `   Completion Rate: ${total > 0 ? ((completed / total) * 100).toFixed(1) : 0}%`,\n      );\n    } catch (error) {\n      this.logger.error('Error logging daily statistics:', error);\n    }\n  }\n\n  // Manual trigger for testing or admin use\n  async manualDailyReset() {\n    this.logger.log('🔄 Manual daily queue reset triggered');\n    return await this.handleDailyQueueReset(); // ✅ FIXED: Return result\n  }\n\n  // Get pending queues count for today\n  async getTodayPendingCount(): Promise {\n    const today = new Date();\n    const startOfDay = new Date(\n      today.getFullYear(),\n      today.getMonth(),\n      today.getDate(),\n      0,\n      0,\n      0,\n      0,\n    );\n    const endOfDay = new Date(\n      today.getFullYear(),\n      today.getMonth(),\n      today.getDate(),\n      23,\n      59,\n      59,\n      999,\n    );\n\n    return await this.queueRepository.count({\n      where: {\n        status: QueueStatus.PENDING,\n        createdAt: Between(startOfDay, endOfDay),\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/QueuesController.html":{"url":"controllers/QueuesController.html","title":"controller - QueuesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  QueuesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/queues.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                queues\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                getQueueById\n                            \n                            \n                                    \n                                    Async\n                                getUserQueues\n                            \n                            \n                                    \n                                    Async\n                                getWalkInQueues\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getQueueById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQueueById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queues.controller.ts:111\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getUserQueues\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserQueues(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('user/:userId')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queues.controller.ts:76\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getWalkInQueues\n                        \n                    \n                \n            \n            \n                \n                        \n                    getWalkInQueues()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('walk-in')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queues.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Logger } from '@nestjs/common';\nimport { QueueService } from './queue.service';\nimport { QueueStatus } from './entities/queue.entity';\n\ninterface QueueDetails {\n  firstName?: string;\n  lastName?: string;\n  middleInitial?: string;\n  reasonOfVisit?: string;\n  address?: string;\n  phoneNumber?: string;\n}\n\n@Controller('queues')\nexport class QueuesController {\n  private readonly logger = new Logger(QueuesController.name);\n\n  constructor(private readonly queueService: QueueService) {}\n  // This endpoint is for supporting the legacy API path that the frontend is using\n  @Get('walk-in')\n  async getWalkInQueues() {\n    this.logger.log('GET /queues/walk-in endpoint called');\n    try {\n      // Get both pending and serving queues with details using the service methods\n      const [pendingQueuesWithDetails, servingQueuesWithDetails] =\n        await Promise.all([\n          this.queueService.findByStatusWithDetails(QueueStatus.PENDING),\n          this.queueService.findByStatusWithDetails(QueueStatus.SERVING),\n        ]);\n\n      this.logger.log('Found pending queues:', pendingQueuesWithDetails.length);\n      this.logger.log('Found serving queues:', servingQueuesWithDetails.length);\n\n      // Combine all queues\n      const allQueues = [\n        ...pendingQueuesWithDetails,\n        ...servingQueuesWithDetails,\n      ];\n\n      // Extract details from the nested structure and flatten them for the frontend\n      const result = allQueues.map((queue) => {\n        // For debugging\n        this.logger.log('Processing queue:', queue.id, 'status:', queue.status);\n\n        // Handle potential null/undefined details\n        const details: QueueDetails | null = Array.isArray(queue.details)\n          ? (queue.details[0] as QueueDetails)\n          : (queue.details as QueueDetails);\n\n        return {\n          id: queue.id,\n          queueNumber: queue.queueNumber,\n          status: queue.status,\n          counterNumber: queue.counterNumber,\n          createdAt: queue.createdAt,\n          completedAt: queue.completedAt,\n          estimatedWaitTime: queue.estimatedWaitTime,\n          firstName: details?.firstName || null,\n          lastName: details?.lastName || null,\n          middleInitial: details?.middleInitial || null,\n          reasonOfVisit: details?.reasonOfVisit || null,\n          address: details?.address || null,\n          phoneNumber: details?.phoneNumber || null,\n        };\n      });\n\n      this.logger.log(`Returning ${result.length} walk-in queues`);\n      return result;\n    } catch (err: unknown) {\n      this.logger.error('Error fetching walk-in queues:', err);\n      throw err;\n    }\n  }\n\n  @Get('user/:userId')\n  async getUserQueues(@Param('userId') userId: string) {\n    this.logger.log('GET /queues/user/' + userId + ' endpoint called');\n    try {\n      // Find queues for the specific user that are not completed\n      const userQueues =\n        await this.queueService.findByUserIdWithDetails(userId);\n\n      this.logger.log('Found user queues:', userQueues.length);\n\n      const result = userQueues.map((queue) => {\n        const details = Array.isArray(queue.details)\n          ? queue.details[0]\n          : queue.details;\n\n        return {\n          id: queue.id,\n          queueNumber: queue.queueNumber,\n          status: queue.status,\n          counterNumber: queue.counterNumber,\n          createdAt: queue.createdAt,\n          completedAt: queue.completedAt,\n          firstName: details?.firstName || null,\n          lastName: details?.lastName || null,\n          reasonOfVisit: details?.reasonOfVisit || null,\n        };\n      });\n\n      return result;\n    } catch (err) {\n      this.logger.error('Error fetching user queues:', err);\n      throw err;\n    }\n  }\n\n  @Get(':id')\n  async getQueueById(@Param('id') id: string) {\n    this.logger.log('GET /queues/' + id + ' endpoint called');\n    try {\n      const queueId = parseInt(id, 10);\n      if (isNaN(queueId)) {\n        throw new Error('Invalid queue ID');\n      }\n\n      const queue = await this.queueService.findOne(queueId);\n\n      if (!queue) {\n        throw new Error('Queue not found');\n      }\n\n      const details = Array.isArray(queue.details)\n        ? queue.details[0]\n        : queue.details;\n\n      return {\n        id: queue.id,\n        queueNumber: queue.queueNumber,\n        status: queue.status,\n        counterNumber: queue.counterNumber,\n        createdAt: queue.createdAt,\n        completedAt: queue.completedAt,\n        firstName: details?.firstName || null,\n        lastName: details?.lastName || null,\n        reasonOfVisit: details?.reasonOfVisit || null,\n      };\n    } catch (err) {\n      this.logger.error('Error fetching queue:', err);\n      throw err;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/register.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for user registration\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                contactNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                middleName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                nameExtension\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                otp\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        contactNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Contact number', example: '09123456789'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User email address', example: 'test@example.com'})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User first name', example: 'John'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User last name', example: 'Doe'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User middle name (optional)', example: 'Robert'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Full name (auto-generated)', example: 'John Robert Doe'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        nameExtension\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Name extension (e.g., Jr., III)', example: 'Jr.'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        otp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'OTP code for email verification (optional)', example: '123456'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:95\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User password (min 8 characters)', example: 'password123', minLength: 8})@IsString()@IsNotEmpty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Username for login', example: 'john_doe'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:29\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  MinLength,\n} from 'class-validator';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\n/**\n * DTO for user registration\n * @class RegisterDto\n */\nexport class RegisterDto {\n  @ApiProperty({\n    description: 'User email address',\n    example: 'test@example.com',\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @ApiProperty({\n    description: 'Username for login',\n    example: 'john_doe',\n  })\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n\n  @ApiProperty({\n    description: 'User password (min 8 characters)',\n    example: 'password123',\n    minLength: 8,\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  password: string;\n\n  @ApiProperty({\n    description: 'User first name',\n    example: 'John',\n  })\n  @IsString()\n  @IsNotEmpty()\n  firstName: string;\n\n  @ApiPropertyOptional({\n    description: 'User middle name (optional)',\n    example: 'Robert',\n  })\n  @IsString()\n  @IsOptional()\n  middleName?: string;\n\n  @ApiProperty({\n    description: 'User last name',\n    example: 'Doe',\n  })\n  @IsString()\n  @IsNotEmpty()\n  lastName: string;\n\n  @ApiPropertyOptional({\n    description: 'Full name (auto-generated)',\n    example: 'John Robert Doe',\n  })\n  @IsString()\n  @IsOptional()\n  name?: string;\n\n  @ApiPropertyOptional({\n    description: 'Name extension (e.g., Jr., III)',\n    example: 'Jr.',\n  })\n  @IsString()\n  @IsOptional()\n  nameExtension?: string;\n\n  @ApiPropertyOptional({\n    description: 'Contact number',\n    example: '09123456789',\n  })\n  @IsString()\n  contactNumber?: string;\n\n  // OTP field for email verification\n  @ApiPropertyOptional({\n    description: 'OTP code for email verification (optional)',\n    example: '123456',\n  })\n  @IsString()\n  @IsOptional()\n  otp?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser.html":{"url":"interfaces/RequestWithUser.html","title":"interface - RequestWithUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         AuthenticatedUser\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AuthenticatedUser\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  Get,\n  UseGuards,\n  Request,\n  UnauthorizedException,\n  Param,\n  BadRequestException,\n  Logger,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\nimport { UpdateUserDto, AdminUpdateUserDto } from './dto/update-user.dto';\nimport { Roles } from './decorators/roles.decorator';\nimport { RolesGuard } from './guards/roles.guard';\nimport { AuthenticatedUser } from './jwt.strategy';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n  ApiParam,\n  ApiBody,\n  ApiQuery,\n  ApiProperty,\n  ApiPropertyOptional,\n} from '@nestjs/swagger';\nimport { OTPService } from '../services/otp.service';\nimport { EmailService } from '../services/email.service';\nimport {\n  SendOtpDto,\n  VerifyOtpDto,\n  ForgotPasswordDto,\n  ResetPasswordDto,\n  TestOtpDto,\n  ApplicationNotificationDto,\n} from './dto/otp.dto';\nimport { QueueNotificationDto } from './dto/queue-notification.dto';\nimport { AppointmentNotificationDto } from './dto/appointment-notification.dto';\n\ninterface RequestWithUser extends Request {\n  user: AuthenticatedUser;\n}\n\n@ApiTags('Authentication & OTP')\n@Controller('auth')\nexport class AuthController {\n  private readonly logger = new Logger(AuthController.name);\n\n  constructor(\n    private authService: AuthService,\n    private otpService: OTPService,\n    private emailService: EmailService,\n  ) {}\n\n  @ApiOperation({ summary: 'User login' })\n  @ApiResponse({\n    status: 200,\n    description: 'Login successful',\n    schema: {\n      properties: {\n        access_token: { type: 'string' },\n        user: {\n          type: 'object',\n          properties: {\n            id: { type: 'number' },\n            email: { type: 'string' },\n            username: { type: 'string' },\n            roles: { type: 'array', items: { type: 'string' } },\n            defaultRole: { type: 'string' },\n          },\n        },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Unauthorized - invalid credentials',\n  })\n  @ApiBody({ type: LoginDto })\n  @Post('login')\n  async login(@Body() loginDto: LoginDto) {\n    this.logger.log('Login request received:', loginDto);\n    try {\n      const result = await this.authService.login(loginDto);\n      return result;\n    } catch (error) {\n      throw new UnauthorizedException(\n        error instanceof Error ? error.message : 'Invalid credentials',\n      );\n    }\n  }\n\n  @ApiOperation({ summary: 'User registration' })\n  @ApiResponse({\n    status: 201,\n    description: 'Registration successful',\n    schema: {\n      properties: {\n        access_token: { type: 'string' },\n        user: {\n          type: 'object',\n          properties: {\n            id: { type: 'number' },\n            email: { type: 'string' },\n            username: { type: 'string' },\n            roles: { type: 'array', items: { type: 'string' } },\n            defaultRole: { type: 'string' },\n          },\n        },\n      },\n    },\n  })\n  @ApiResponse({ status: 400, description: 'Bad request - invalid data' })\n  @ApiResponse({\n    status: 409,\n    description: 'Conflict - email or username already exists',\n  })\n  @ApiBody({ type: RegisterDto })\n  @Post('register')\n  async register(@Body() createUserDto: RegisterDto) {\n    try {\n      // First verify OTP if email verification is enabled\n      if (createUserDto.email && createUserDto.otp) {\n        const isOtpValid = await this.otpService.verifyOTP(\n          createUserDto.email,\n          createUserDto.otp,\n          'verification',\n        );\n\n        if (!isOtpValid) {\n          throw new BadRequestException('Invalid or expired OTP');\n        }\n      }\n\n      const result = await this.authService.register(createUserDto);\n\n      // Send welcome email\n      if (createUserDto.email) {\n        await this.emailService.sendApplicationNotification(\n          createUserDto.email,\n          'Welcome!',\n          'Account Created',\n          'Welcome to Bulak LGU Smart Connect',\n        );\n      }\n\n      return result;\n    } catch (error) {\n      this.logger.error('Registration error:', error);\n      throw error;\n    }\n  }\n  @ApiOperation({ summary: 'Get user profile' })\n  @ApiResponse({ status: 200, description: 'Profile retrieved successfully' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @ApiBearerAuth('JWT-auth')\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  getProfile(@Request() req: RequestWithUser) {\n    // Add null check before converting to number\n    if (!req.user || req.user.id === undefined || req.user.id === null) {\n      throw new UnauthorizedException('Invalid user ID');\n    }\n    return this.authService.getProfile(Number(req.user.id));\n  }\n  @ApiOperation({\n    summary: 'Update user profile',\n    description: 'Allows a user to update their own profile information',\n  })\n  @ApiResponse({ status: 200, description: 'Profile updated successfully' })\n  @ApiResponse({ status: 400, description: 'Bad request - invalid data' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @ApiResponse({\n    status: 409,\n    description: 'Conflict - email or username already exists',\n  })\n  @ApiBearerAuth('JWT-auth')\n  @ApiBody({ type: UpdateUserDto })\n  @UseGuards(JwtAuthGuard)\n  @Post('update-profile')\n  async updateProfile(\n    @Request() req: RequestWithUser,\n    @Body() updateUserDto: UpdateUserDto,\n  ) {\n    // Add null check before converting to number\n    if (!req.user || req.user.id === undefined || req.user.id === null) {\n      throw new UnauthorizedException('Invalid user ID');\n    }\n\n    try {\n      return await this.authService.updateUserInfo(\n        Number(req.user.id),\n        updateUserDto,\n      );\n    } catch (error) {\n      throw new UnauthorizedException(\n        error instanceof Error ? error.message : 'Failed to update profile',\n      );\n    }\n  }\n  @ApiOperation({\n    summary: 'Admin update user',\n    description:\n      \"Allows administrators to update any user's information including role assignments\",\n  })\n  @ApiParam({ name: 'userId', description: 'ID of the user to update' })\n  @ApiBody({ type: AdminUpdateUserDto })\n  @ApiResponse({ status: 200, description: 'User successfully updated' })\n  @ApiResponse({ status: 400, description: 'Bad request - invalid input data' })\n  @ApiResponse({\n    status: 401,\n    description: 'Unauthorized - invalid credentials',\n  })\n  @ApiResponse({\n    status: 403,\n    description: 'Forbidden - insufficient permissions',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Not found - user or role not found',\n  })\n  @ApiResponse({\n    status: 409,\n    description: 'Conflict - email or username already exists',\n  })\n  @ApiBearerAuth('JWT-auth')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles('admin', 'super_admin')\n  @Post('admin/update-user/:userId')\n  @UseGuards(JwtAuthGuard) // Make sure this guard is working\n  async adminUpdateUser(\n    @Request() req: RequestWithUser,\n    @Param('userId') targetUserId: string,\n    @Body() updateUserDto: AdminUpdateUserDto,\n  ) {\n    // Add logging to see what's happening\n    this.logger.log('🔍 Admin update request received:');\n    this.logger.log('Admin ID:', req.user?.id);\n    this.logger.log('Admin roles:', req.user?.roles);\n    this.logger.log('Target User ID:', targetUserId);\n    this.logger.log('Update data:', updateUserDto);\n\n    if (!req.user || req.user.id === undefined || req.user.id === null) {\n      this.logger.error('❌ No user in request object');\n      throw new UnauthorizedException('Invalid admin ID');\n    }\n\n    try {\n      return await this.authService.adminUpdateUser(\n        Number(req.user.id),\n        Number(targetUserId),\n        updateUserDto,\n      );\n    } catch (error) {\n      this.logger.error('❌ Admin update error:', error);\n      throw new UnauthorizedException(\n        error instanceof Error ? error.message : 'Failed to update user',\n      );\n    }\n  }\n\n  @ApiOperation({\n    summary: 'Send OTP for email verification or password reset',\n    description: `\n    Generates and sends a 6-digit OTP code to the specified email address.\n    \n    **Use Cases:**\n    - Email verification during registration\n    - Password reset verification\n    - Two-factor authentication\n    \n    **Security Features:**\n    - OTP expires after 5 minutes\n    - Previous OTPs are invalidated when new one is generated\n    - Rate limiting to prevent spam\n    \n    **Email Templates:**\n    - Verification: Blue gradient professional template\n    - Password Reset: Red themed security alert template\n    `,\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'OTP sent successfully',\n    schema: {\n      type: 'object',\n      properties: {\n        success: { type: 'boolean', example: true },\n        message: { type: 'string', example: 'OTP sent successfully' },\n        email: { type: 'string', example: 'user@example.com' },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Bad Request - Invalid email format or missing fields',\n    schema: {\n      type: 'object',\n      properties: {\n        statusCode: { type: 'number', example: 400 },\n        message: { type: 'string', example: 'Invalid email format' },\n        error: { type: 'string', example: 'Bad Request' },\n      },\n    },\n  })\n  @ApiBody({\n    description: 'Email and purpose for OTP generation',\n    schema: {\n      type: 'object',\n      properties: {\n        email: {\n          type: 'string',\n          format: 'email',\n          example: 'user@example.com',\n          description: 'Email address to send OTP to',\n        },\n        purpose: {\n          type: 'string',\n          enum: ['verification', 'password_reset'],\n          example: 'verification',\n          description: 'Purpose of the OTP',\n          default: 'verification',\n        },\n      },\n      required: ['email'],\n    },\n  })\n  @Post('send-otp')\n  async sendOTP(@Body() sendOtpDto: { email: string; purpose?: string }) {\n    try {\n      const { email, purpose = 'verification' } = sendOtpDto;\n\n      // Validate email format\n      if (!email || !/\\S+@\\S+\\.\\S+/.test(email)) {\n        throw new BadRequestException('Invalid email format');\n      }\n\n      await this.otpService.generateOTP(email, purpose);\n\n      return {\n        success: true,\n        message: 'OTP sent successfully',\n        email: email,\n      };\n    } catch (error) {\n      this.logger.error('Error sending OTP:', error);\n      throw new BadRequestException('Failed to send OTP');\n    }\n  }\n\n  @ApiOperation({\n    summary: 'Verify OTP code',\n    description: `\n    Verifies a 6-digit OTP code against the email and purpose.\n    \n    **Verification Process:**\n    1. Checks if OTP exists and is not expired\n    2. Validates the code matches\n    3. Marks OTP as verified (single-use)\n    4. Returns verification status\n    \n    **Security Features:**\n    - Single-use OTPs (marked as verified after use)\n    - Time-based expiration (5 minutes)\n    - Purpose isolation (verification vs password_reset)\n    `,\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'OTP verified successfully',\n    schema: {\n      type: 'object',\n      properties: {\n        success: { type: 'boolean', example: true },\n        message: { type: 'string', example: 'OTP verified successfully' },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Unauthorized - Invalid or expired OTP',\n    schema: {\n      type: 'object',\n      properties: {\n        statusCode: { type: 'number', example: 401 },\n        message: { type: 'string', example: 'Invalid or expired OTP' },\n        error: { type: 'string', example: 'Unauthorized' },\n      },\n    },\n  })\n  @ApiBody({\n    description: 'Email, OTP code, and purpose for verification',\n    schema: {\n      type: 'object',\n      properties: {\n        email: {\n          type: 'string',\n          format: 'email',\n          example: 'user@example.com',\n          description: 'Email address',\n        },\n        otp: {\n          type: 'string',\n          example: '123456',\n          pattern: '^[0-9]{6}$',\n          description: '6-digit OTP code',\n        },\n        purpose: {\n          type: 'string',\n          enum: ['verification', 'password_reset'],\n          example: 'verification',\n          description: 'Purpose of the OTP verification',\n          default: 'verification',\n        },\n      },\n      required: ['email', 'otp'],\n    },\n  })\n  @Post('verify-otp')\n  async verifyOTP(\n    @Body() verifyOtpDto: { email: string; otp: string; purpose?: string },\n  ) {\n    try {\n      const { email, otp, purpose = 'verification' } = verifyOtpDto;\n\n      const isValid = await this.otpService.verifyOTP(email, otp, purpose);\n\n      if (!isValid) {\n        throw new UnauthorizedException('Invalid or expired OTP');\n      }\n\n      return {\n        success: true,\n        message: 'OTP verified successfully',\n      };\n    } catch (error) {\n      this.logger.error('Error verifying OTP:', error);\n      throw new UnauthorizedException('Invalid or expired OTP');\n    }\n  }\n\n  // Add password reset endpoints\n  @ApiOperation({\n    summary: 'Request password reset OTP',\n    description: `\n    Initiates password reset process by sending OTP to registered email.\n    \n    **Security Features:**\n    - Does not reveal if email exists (security best practice)\n    - Generates secure 6-digit OTP\n    - Uses dedicated password reset email template\n    - OTP expires after 5 minutes\n    \n    **Process:**\n    1. Validates email format\n    2. Checks if user exists (internally)\n    3. Generates OTP for password_reset purpose\n    4. Sends formatted email with reset instructions\n    5. Returns success message regardless of email existence\n    `,\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Password reset process initiated',\n    schema: {\n      type: 'object',\n      properties: {\n        success: { type: 'boolean', example: true },\n        message: {\n          type: 'string',\n          example:\n            'If this email is registered, you will receive a password reset code',\n        },\n      },\n    },\n  })\n  @ApiBody({\n    description: 'Email address for password reset',\n    schema: {\n      type: 'object',\n      properties: {\n        email: {\n          type: 'string',\n          format: 'email',\n          example: 'user@example.com',\n          description: 'Registered email address',\n        },\n      },\n      required: ['email'],\n    },\n  })\n  @Post('forgot-password')\n  async forgotPassword(@Body() { email }: { email: string }) {\n    try {\n      // Check if user exists\n      const user = await this.authService.findUserByEmail(email);\n      if (!user) {\n        // Don't reveal if email exists for security\n        return {\n          success: true,\n          message:\n            'If this email is registered, you will receive a password reset code',\n        };\n      }\n\n      await this.otpService.generateOTP(email, 'password_reset');\n\n      return {\n        success: true,\n        message: 'Password reset code sent to your email',\n      };\n    } catch (error) {\n      this.logger.error('Forgot password error:', error);\n      throw new BadRequestException('Failed to send password reset code');\n    }\n  }\n\n  @ApiOperation({\n    summary: 'Reset password with OTP verification',\n    description: `\n    Completes password reset process using OTP verification.\n    \n    **Process:**\n    1. Verifies OTP code is valid and not expired\n    2. Validates new password meets complexity requirements\n    3. Updates user password with secure hashing\n    4. Marks OTP as used\n    \n    **Password Requirements:**\n    - Minimum 8 characters\n    - At least 1 uppercase letter\n    - At least 1 lowercase letter  \n    - At least 1 number\n    - At least 1 special character (@$!%*?&)\n    \n    **Security Features:**\n    - bcrypt password hashing\n    - OTP single-use enforcement\n    - Password strength validation\n    `,\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Password reset successfully',\n    schema: {\n      type: 'object',\n      properties: {\n        success: { type: 'boolean', example: true },\n        message: { type: 'string', example: 'Password reset successfully' },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Unauthorized - Invalid or expired reset code',\n    schema: {\n      type: 'object',\n      properties: {\n        statusCode: { type: 'number', example: 401 },\n        message: { type: 'string', example: 'Invalid or expired reset code' },\n        error: { type: 'string', example: 'Unauthorized' },\n      },\n    },\n  })\n  @ApiBody({\n    description: 'Email, OTP, and new password for reset',\n    schema: {\n      type: 'object',\n      properties: {\n        email: {\n          type: 'string',\n          format: 'email',\n          example: 'user@example.com',\n          description: 'Email address',\n        },\n        otp: {\n          type: 'string',\n          example: '123456',\n          pattern: '^[0-9]{6}$',\n          description: '6-digit OTP code received via email',\n        },\n        newPassword: {\n          type: 'string',\n          example: 'NewSecure123!',\n          minLength: 8,\n          pattern:\n            '^(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)(?=.*[@$!%*?&])[A-Za-z\\\\d@$!%*?&]{8,}$',\n          description: 'New password (must meet complexity requirements)',\n        },\n      },\n      required: ['email', 'otp', 'newPassword'],\n    },\n  })\n  @Post('reset-password')\n  async resetPassword(\n    @Body() resetDto: { email: string; otp: string; newPassword: string },\n  ) {\n    try {\n      const { email, otp, newPassword } = resetDto;\n\n      // Verify OTP\n      const isOtpValid = await this.otpService.verifyOTP(\n        email,\n        otp,\n        'password_reset',\n      );\n      if (!isOtpValid) {\n        throw new UnauthorizedException('Invalid or expired reset code');\n      }\n\n      // Update password\n      await this.authService.updatePassword(email, newPassword);\n\n      return {\n        success: true,\n        message: 'Password reset successfully',\n      };\n    } catch (error) {\n      this.logger.error('Reset password error:', error);\n      throw error;\n    }\n  }\n\n  @ApiOperation({\n    summary: 'Test OTP generation (Development Only)',\n    description: `\n    **⚠️ DEVELOPMENT ONLY - Disabled in Production**\n    \n    Generates test OTP and optionally returns the code for testing purposes.\n    \n    **Usage:**\n    - Frontend testing and debugging\n    - Integration testing\n    - Email service verification\n    \n    **Security:**\n    - Only available when NODE_ENV=development\n    - Returns OTP code in response for testing\n    - Disabled automatically in production\n    `,\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Test OTP generated successfully',\n    schema: {\n      type: 'object',\n      properties: {\n        success: { type: 'boolean', example: true },\n        message: { type: 'string', example: 'OTP generated and sent' },\n        otp: {\n          type: 'string',\n          example: '123456',\n          description: 'OTP code (only in development mode)',\n        },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 403,\n    description: 'Forbidden - Not available in production',\n    schema: {\n      type: 'object',\n      properties: {\n        statusCode: { type: 'number', example: 403 },\n        message: {\n          type: 'string',\n          example: 'Test endpoints not available in production',\n        },\n        error: { type: 'string', example: 'Forbidden' },\n      },\n    },\n  })\n  @ApiBody({\n    description: 'Email address for testing OTP generation',\n    schema: {\n      type: 'object',\n      properties: {\n        email: {\n          type: 'string',\n          format: 'email',\n          example: 'test@example.com',\n          description: 'Email address for testing OTP generation',\n        },\n      },\n      required: ['email'],\n    },\n  })\n  @Post('test-otp')\n  async testOTP(@Body() { email }: { email: string }) {\n    // Add environment check to your existing implementation\n    if (process.env.NODE_ENV === 'production') {\n      throw new BadRequestException(\n        'Test endpoints not available in production',\n      );\n    }\n\n    try {\n      const otp = await this.otpService.generateOTP(email, 'verification');\n      return {\n        success: true,\n        message: 'OTP generated and sent',\n        // Remove this in production - only for testing\n        otp: process.env.NODE_ENV === 'development' ? otp : undefined,\n      };\n    } catch (error) {\n      this.logger.error('Test OTP error:', error);\n      throw new BadRequestException('Failed to generate OTP');\n    }\n  }\n\n  @ApiOperation({\n    summary: 'Send application status notification',\n    description: `\n    Sends formatted email notification for application status updates.\n    \n    **Supported Statuses:**\n    - Pending (Orange theme)\n    - Approved (Green theme)\n    - Rejected (Red theme)\n    - Ready for Pickup (Blue theme)\n    \n    **Email Features:**\n    - Professional branded templates\n    - Status-specific color coding\n    - Application details included\n    - Responsive design\n    `,\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Application notification sent successfully',\n    schema: {\n      type: 'object',\n      properties: {\n        success: { type: 'boolean', example: true },\n        message: {\n          type: 'string',\n          example: 'Application notification sent successfully',\n        },\n      },\n    },\n  })\n  @ApiBody({\n    description: 'Application notification details',\n    schema: {\n      type: 'object',\n      properties: {\n        email: {\n          type: 'string',\n          format: 'email',\n          example: 'user@example.com',\n          description: 'Recipient email address',\n        },\n        applicationId: {\n          type: 'string',\n          example: 'APP-001',\n          description: 'Application ID',\n        },\n        status: {\n          type: 'string',\n          enum: ['Pending', 'Approved', 'Rejected', 'Ready for Pickup'],\n          example: 'Approved',\n          description: 'Application status',\n        },\n        applicationType: {\n          type: 'string',\n          example: 'Birth Certificate',\n          description: 'Type of application',\n        },\n      },\n      required: ['email', 'applicationId', 'status', 'applicationType'],\n    },\n  })\n  @Post('send-application-notification')\n  async sendApplicationNotification(\n    @Body()\n    notificationDto: {\n      email: string;\n      applicationId: string;\n      status: string;\n      applicationType: string;\n    },\n  ) {\n    try {\n      const { email, applicationId, status, applicationType } = notificationDto;\n\n      await this.emailService.sendApplicationNotification(\n        email,\n        applicationId,\n        status,\n        applicationType,\n      );\n\n      return {\n        success: true,\n        message: 'Application notification sent successfully',\n      };\n    } catch (error) {\n      this.logger.error('Error sending application notification:', error);\n      throw new BadRequestException('Failed to send application notification');\n    }\n  }\n\n  @ApiOperation({\n    summary: 'Send queue notification',\n    description: 'Send email notification for queue position or status updates',\n  })\n  @Post('send-queue-notification')\n  async sendQueueNotification(@Body() notificationDto: QueueNotificationDto) {\n    try {\n      const {\n        email,\n        queueNumber,\n        type,\n        position,\n        estimatedTime,\n        status,\n        message,\n      } = notificationDto;\n\n      if (type === 'position_alert') {\n        // Fix: Ensure position is defined for position alerts\n        if (position === undefined) {\n          throw new BadRequestException(\n            'Position is required for position alerts',\n          );\n        }\n\n        await this.emailService.sendQueuePositionAlert(\n          email,\n          queueNumber,\n          position, // Now guaranteed to be a number\n          estimatedTime || '10 minutes', // Provide default if undefined\n        );\n      } else if (type === 'status_update') {\n        await this.emailService.sendQueueStatusUpdate(\n          email,\n          queueNumber,\n          status || 'now_serving', // Provide default if undefined\n          message || 'Please proceed to the counter',\n        );\n      }\n\n      return {\n        success: true,\n        message: 'Queue notification sent successfully',\n      };\n    } catch (error) {\n      // Don't throw error to avoid breaking queue functionality\n      this.logger.error('Queue notification error:', error);\n      return {\n        success: false,\n        message: 'Failed to send notification, but queue operation continues',\n      };\n    }\n  }\n\n  @ApiOperation({\n    summary: 'Send appointment confirmation notification',\n    description: 'Send email notification when appointment is confirmed',\n  })\n  @ApiBody({\n    description: 'Appointment confirmation notification details',\n    schema: {\n      type: 'object',\n      properties: {\n        email: {\n          type: 'string',\n          format: 'email',\n          example: 'user@example.com',\n          description: 'Email address of appointment holder',\n        },\n        appointmentNumber: {\n          type: 'string',\n          example: 'APPT-2024-001',\n          description: 'Appointment number/ID',\n        },\n        type: {\n          type: 'string',\n          example: 'confirmation',\n          description: 'Type of notification',\n        },\n        appointmentDetails: {\n          type: 'object',\n          description: 'Appointment details',\n          properties: {\n            type: { type: 'string', example: 'Birth Certificate' },\n            date: { type: 'string', example: '2024-01-15' },\n            time: { type: 'string', example: '10:00 AM - 10:30 AM' },\n            firstName: { type: 'string', example: 'John' },\n            lastName: { type: 'string', example: 'Doe' },\n            phoneNumber: { type: 'string', example: '09123456789' },\n          },\n        },\n      },\n      required: ['email', 'appointmentNumber', 'appointmentDetails'],\n    },\n  })\n  @Post('notifications/appointment-confirmation')\n  async sendAppointmentConfirmation(@Body() notificationDto: any) {\n    try {\n      const { email, appointmentNumber, appointmentDetails } = notificationDto;\n\n      // Validate required fields\n      if (!email || !appointmentNumber || !appointmentDetails) {\n        throw new BadRequestException(\n          'Missing required fields: email, appointmentNumber, or appointmentDetails',\n        );\n      }\n\n      await this.emailService.sendAppointmentConfirmation(\n        email,\n        appointmentNumber,\n        appointmentDetails,\n      );\n\n      return {\n        success: true,\n        message: 'Appointment confirmation sent successfully',\n      };\n    } catch (error) {\n      this.logger.error('Error sending appointment confirmation:', error);\n      throw new BadRequestException('Failed to send appointment confirmation');\n    }\n  }\n\n  @ApiOperation({\n    summary: 'Send appointment status update notification',\n    description: 'Send email notification when appointment status changes',\n  })\n  @ApiBody({\n    description: 'Appointment status update notification details',\n    schema: {\n      type: 'object',\n      properties: {\n        email: {\n          type: 'string',\n          format: 'email',\n          example: 'user@example.com',\n          description: 'Email address of appointment holder',\n        },\n        appointmentNumber: {\n          type: 'string',\n          example: 'APPT-2024-001',\n          description: 'Appointment number/ID',\n        },\n        type: {\n          type: 'string',\n          example: 'status_update',\n          description: 'Type of notification',\n        },\n        status: {\n          type: 'string',\n          example: 'confirmed',\n          description: 'New appointment status',\n        },\n        appointmentDetails: {\n          type: 'object',\n          description: 'Appointment details',\n        },\n      },\n      required: ['email', 'appointmentNumber', 'status', 'appointmentDetails'],\n    },\n  })\n  @Post('notifications/appointment-status-update')\n  async sendAppointmentStatusUpdate(@Body() notificationDto: any) {\n    try {\n      const { email, appointmentNumber, status, appointmentDetails } =\n        notificationDto;\n\n      // Validate required fields\n      if (!email || !appointmentNumber || !status || !appointmentDetails) {\n        throw new BadRequestException(\n          'Missing required fields: email, appointmentNumber, status, or appointmentDetails',\n        );\n      }\n\n      await this.emailService.sendAppointmentStatusUpdate(\n        email,\n        appointmentNumber,\n        status,\n        appointmentDetails,\n      );\n\n      return {\n        success: true,\n        message: 'Appointment status update sent successfully',\n      };\n    } catch (error) {\n      this.logger.error('Error sending appointment status update:', error);\n      throw new BadRequestException('Failed to send appointment status update');\n    }\n  }\n\n  @ApiOperation({\n    summary: 'Send appointment cancellation notification',\n    description: 'Send email notification when appointment is cancelled',\n  })\n  @ApiBody({\n    description: 'Appointment cancellation notification details',\n    schema: {\n      type: 'object',\n      properties: {\n        email: {\n          type: 'string',\n          format: 'email',\n          example: 'user@example.com',\n          description: 'Email address of appointment holder',\n        },\n        appointmentNumber: {\n          type: 'string',\n          example: 'APPT-2024-001',\n          description: 'Appointment number/ID',\n        },\n        type: {\n          type: 'string',\n          example: 'cancellation',\n          description: 'Type of notification',\n        },\n        reason: {\n          type: 'string',\n          example: 'Cancelled by administrator',\n          description: 'Cancellation reason',\n        },\n        appointmentDetails: {\n          type: 'object',\n          description: 'Appointment details',\n        },\n      },\n      required: ['email', 'appointmentNumber', 'appointmentDetails'],\n    },\n  })\n  @Post('notifications/appointment-cancellation')\n  async sendAppointmentCancellation(@Body() notificationDto: any) {\n    try {\n      const { email, appointmentNumber, appointmentDetails, reason } =\n        notificationDto;\n\n      // Validate required fields\n      if (!email || !appointmentNumber || !appointmentDetails) {\n        throw new BadRequestException(\n          'Missing required fields: email, appointmentNumber, or appointmentDetails',\n        );\n      }\n\n      await this.emailService.sendAppointmentCancellation(\n        email,\n        appointmentNumber,\n        appointmentDetails,\n        reason,\n      );\n\n      return {\n        success: true,\n        message: 'Appointment cancellation sent successfully',\n      };\n    } catch (error) {\n      this.logger.error('Error sending appointment cancellation:', error);\n      throw new BadRequestException('Failed to send appointment cancellation');\n    }\n  }\n\n  @ApiOperation({\n    summary: 'Send appointment reminder notification',\n    description: 'Send email reminder 24 hours before appointment',\n  })\n  @ApiBody({ type: AppointmentNotificationDto })\n  @Post('notifications/appointment-reminder')\n  async sendAppointmentReminder(\n    @Body() notificationDto: AppointmentNotificationDto,\n  ) {\n    try {\n      const { email, appointmentNumber, appointmentDetails } = notificationDto;\n\n      await this.emailService.sendAppointmentReminder(\n        email,\n        appointmentNumber,\n        appointmentDetails,\n      );\n\n      return {\n        success: true,\n        message: 'Appointment reminder sent successfully',\n      };\n    } catch (error) {\n      this.logger.error('Error sending appointment reminder:', error);\n      throw new BadRequestException('Failed to send appointment reminder');\n    }\n  }\n\n  @Post('notifications/application-confirmation')\n  @ApiOperation({ summary: 'Send application confirmation notification' })\n  async sendApplicationConfirmation(\n    @Body()\n    dto: {\n      email: string;\n      applicationId: string;\n      applicationType: string;\n      applicationSubtype?: string;\n      applicantName: string;\n      submissionDate: string;\n      status: string;\n    },\n  ) {\n    try {\n      this.logger.log(\n        `Sending application confirmation notification to: ${dto.email}`,\n      );\n\n      // Use your existing email service to send application confirmation\n      await this.emailService.sendDocumentApplicationConfirmation(\n        dto.email,\n        dto.applicationId,\n        dto.applicationType,\n        dto.applicationSubtype,\n        dto.applicantName,\n        dto.submissionDate,\n        dto.status,\n      );\n\n      return {\n        success: true,\n        message: 'Application confirmation notification sent successfully',\n      };\n    } catch (error) {\n      this.logger.error(\n        'Error sending application confirmation notification:',\n        error,\n      );\n      throw new BadRequestException(\n        'Failed to send application confirmation notification',\n      );\n    }\n  }\n\n  @Post('notifications/application-status-update')\n  @ApiOperation({ summary: 'Send application status update notification' })\n  async sendApplicationStatusUpdate(\n    @Body()\n    dto: {\n      email: string;\n      applicationId: string;\n      newStatus: string;\n      applicationType: string;\n      applicationSubtype?: string;\n      applicantName: string;\n      previousStatus?: string;\n    },\n  ) {\n    try {\n      this.logger.log(\n        `Sending application status update notification to: ${dto.email}`,\n      );\n\n      // Use your existing email service\n      await this.emailService.sendDocumentApplicationStatusUpdate(\n        dto.email,\n        dto.applicationId,\n        dto.newStatus,\n        dto.applicationType,\n        dto.applicationSubtype,\n        dto.applicantName,\n        dto.previousStatus,\n      );\n\n      return {\n        success: true,\n        message: 'Application status update notification sent successfully',\n      };\n    } catch (error) {\n      this.logger.error(\n        'Error sending application status update notification:',\n        error,\n      );\n      throw new BadRequestException(\n        'Failed to send application status update notification',\n      );\n    }\n  }\n\n  @Post('notifications/application-approval')\n  @ApiOperation({ summary: 'Send application approval notification' })\n  async sendApplicationApproval(\n    @Body()\n    dto: {\n      email: string;\n      applicationId: string;\n      applicationType: string;\n      applicationSubtype?: string;\n      applicantName: string;\n    },\n  ) {\n    try {\n      this.logger.log(\n        `Sending application approval notification to: ${dto.email}`,\n      );\n\n      // Use your existing email service\n      await this.emailService.sendDocumentApplicationApproval(\n        dto.email,\n        dto.applicationId,\n        dto.applicationType,\n        dto.applicationSubtype,\n        dto.applicantName,\n      );\n\n      return {\n        success: true,\n        message: 'Application approval notification sent successfully',\n      };\n    } catch (error) {\n      this.logger.error(\n        'Error sending application approval notification:',\n        error,\n      );\n      throw new BadRequestException(\n        'Failed to send application approval notification',\n      );\n    }\n  }\n\n  @Post('notifications/application-rejection')\n  @ApiOperation({ summary: 'Send application rejection notification' })\n  async sendApplicationRejection(\n    @Body()\n    dto: {\n      email: string;\n      applicationId: string;\n      applicationType: string;\n      applicationSubtype?: string;\n      applicantName: string;\n      rejectionReason: string;\n    },\n  ) {\n    try {\n      this.logger.log(\n        `Sending application rejection notification to: ${dto.email}`,\n      );\n\n      // Use your existing email service\n      await this.emailService.sendDocumentApplicationRejection(\n        dto.email,\n        dto.applicationId,\n        dto.applicationType,\n        dto.applicationSubtype,\n        dto.applicantName,\n        dto.rejectionReason,\n      );\n\n      return {\n        success: true,\n        message: 'Application rejection notification sent successfully',\n      };\n    } catch (error) {\n      this.logger.error(\n        'Error sending application rejection notification:',\n        error,\n      );\n      throw new BadRequestException(\n        'Failed to send application rejection notification',\n      );\n    }\n  }\n\n  @Post('check-lockout')\n  @ApiOperation({ summary: 'Check if account is locked' })\n  async checkAccountLockout(@Body() { identifier }: { identifier: string }) {\n    try {\n      const lockoutData = await this.authService.getAccountLockout(identifier);\n\n      if (lockoutData?.lockedUntil && lockoutData.lockedUntil > new Date()) {\n        const timeRemaining = Math.ceil(\n          (lockoutData.lockedUntil.getTime() - Date.now()) / 1000,\n        );\n        return {\n          isLocked: true,\n          timeRemaining,\n          attemptsUsed: lockoutData.attempts,\n          lockedUntil: lockoutData.lockedUntil,\n        };\n      }\n\n      return {\n        isLocked: false,\n        attempts: lockoutData?.attempts || 0,\n      };\n    } catch (error) {\n      this.logger.error('Error checking account lockout:', error);\n      return {\n        isLocked: false,\n        attempts: 0,\n      };\n    }\n  }\n\n  @Post('record-failed-attempt')\n  @ApiOperation({ summary: 'Record failed login attempt' })\n  async recordFailedAttempt(@Body() { identifier }: { identifier: string }) {\n    try {\n      return await this.authService.recordFailedLoginAttempt(identifier);\n    } catch (error) {\n      this.logger.error('Error recording failed attempt:', error);\n      throw new BadRequestException('Failed to record login attempt');\n    }\n  }\n\n  @Post('clear-lockout')\n  @ApiOperation({ summary: 'Clear account lockout on successful login' })\n  async clearAccountLockout(@Body() { identifier }: { identifier: string }) {\n    try {\n      return await this.authService.clearAccountLockout(identifier);\n    } catch (error) {\n      this.logger.error('Error clearing account lockout:', error);\n      throw new BadRequestException('Failed to clear account lockout');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser-1.html":{"url":"interfaces/RequestWithUser-1.html","title":"interface - RequestWithUser-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/decorators/user.decorator.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         AuthenticatedUser\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AuthenticatedUser\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { createParamDecorator, ExecutionContext } from '@nestjs/common';\nimport { AuthenticatedUser } from '../jwt.strategy';\n\ninterface RequestWithUser {\n  user: AuthenticatedUser;\n}\n\nexport const User = createParamDecorator(\n  (data: unknown, ctx: ExecutionContext): AuthenticatedUser => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.user;\n  },\n);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser-2.html":{"url":"interfaces/RequestWithUser-2.html","title":"interface - RequestWithUser-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/roles.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ROLES_KEY } from '../decorators/roles.decorator';\n\n// Define interface for request with user\ninterface RequestWithUser extends Request {\n  user?: {\n    roles?: Array | string[];\n  };\n}\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(\n      ROLES_KEY,\n      [context.getHandler(), context.getClass()],\n    );\n\n    if (!requiredRoles) {\n      return true;\n    }\n\n    const request = context.switchToHttp().getRequest();\n    const userRoles = request.user?.roles || [];\n\n    // Handle both string array and object array formats\n    const roleNames = userRoles.map((role: string | { name: string }) =>\n      typeof role === 'string' ? role : (role as { name: string }).name,\n    );\n\n    return requiredRoles.some((role) => roleNames.includes(role));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResetPasswordDto.html":{"url":"classes/ResetPasswordDto.html","title":"class - ResetPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResetPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/otp.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                newPassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                otp\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Email address', example: 'user@example.com', format: 'email'})@IsEmail({}, {message: 'Please provide a valid email address'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/otp.dto.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'New password (must meet complexity requirements)', example: 'NewSecure123!', minLength: 8, pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$'})@IsString()@Length(8, 100, {message: 'Password must be at least 8 characters long'})@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/, {message: 'Password must contain uppercase, lowercase, numbers, and special characters'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/otp.dto.ts:106\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        otp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: '6-digit OTP code received via email', example: '123456', minLength: 6, maxLength: 6, pattern: '^[0-9]{6}$'})@IsString()@Length(6, 6, {message: 'OTP must be exactly 6 digits'})@Matches(/^[0-9]{6}$/, {message: 'OTP must contain only numbers'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/otp.dto.ts:91\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsString,\n  IsOptional,\n  Length,\n  Matches,\n} from 'class-validator';\n\nexport class SendOtpDto {\n  @ApiProperty({\n    description: 'Email address to send OTP to',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiPropertyOptional({\n    description: 'Purpose of the OTP',\n    example: 'verification',\n    enum: ['verification', 'password_reset'],\n    default: 'verification',\n  })\n  @IsString()\n  @IsOptional()\n  purpose?: string = 'verification';\n}\n\nexport class VerifyOtpDto {\n  @ApiProperty({\n    description: 'Email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    description: '6-digit OTP code',\n    example: '123456',\n    minLength: 6,\n    maxLength: 6,\n    pattern: '^[0-9]{6}$',\n  })\n  @IsString()\n  @Length(6, 6, { message: 'OTP must be exactly 6 digits' })\n  @Matches(/^[0-9]{6}$/, { message: 'OTP must contain only numbers' })\n  otp: string;\n\n  @ApiPropertyOptional({\n    description: 'Purpose of the OTP verification',\n    example: 'verification',\n    enum: ['verification', 'password_reset'],\n    default: 'verification',\n  })\n  @IsString()\n  @IsOptional()\n  purpose?: string = 'verification';\n}\n\nexport class ForgotPasswordDto {\n  @ApiProperty({\n    description: 'Registered email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n}\n\nexport class ResetPasswordDto {\n  @ApiProperty({\n    description: 'Email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    description: '6-digit OTP code received via email',\n    example: '123456',\n    minLength: 6,\n    maxLength: 6,\n    pattern: '^[0-9]{6}$',\n  })\n  @IsString()\n  @Length(6, 6, { message: 'OTP must be exactly 6 digits' })\n  @Matches(/^[0-9]{6}$/, { message: 'OTP must contain only numbers' })\n  otp: string;\n\n  @ApiProperty({\n    description: 'New password (must meet complexity requirements)',\n    example: 'NewSecure123!',\n    minLength: 8,\n    pattern:\n      '^(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)(?=.*[@$!%*?&])[A-Za-z\\\\d@$!%*?&]{8,}$',\n  })\n  @IsString()\n  @Length(8, 100, { message: 'Password must be at least 8 characters long' })\n  @Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/, {\n    message:\n      'Password must contain uppercase, lowercase, numbers, and special characters',\n  })\n  newPassword: string;\n}\n\nexport class TestOtpDto {\n  @ApiProperty({\n    description: 'Email address for testing OTP generation',\n    example: 'test@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n}\n\nexport class ApplicationNotificationDto {\n  @ApiProperty({\n    description: 'Recipient email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    description: 'Application ID',\n    example: 'APP-001',\n  })\n  @IsString()\n  applicationId: string;\n\n  @ApiProperty({\n    description: 'Application status',\n    example: 'Approved',\n    enum: ['Pending', 'Approved', 'Rejected', 'Ready for Pickup'],\n  })\n  @IsString()\n  status: string;\n\n  @ApiProperty({\n    description: 'Type of application',\n    example: 'Birth Certificate',\n  })\n  @IsString()\n  applicationType: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Role.html":{"url":"entities/Role.html","title":"entity - Role","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Role\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/entities/role.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, user => user.roles)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:16\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, PrimaryGeneratedColumn, ManyToMany } from 'typeorm';\nimport { User } from '../../users/entities/user.entity';\n\n@Entity('roles')\nexport class Role {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true, nullable: false })\n  name: string;\n\n  @Column({ nullable: true })\n  description: string;\n\n  @ManyToMany(() => User, (user) => user.roles)\n  users: User[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RolesController.html":{"url":"controllers/RolesController.html","title":"controller - RolesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RolesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/roles.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                roles\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                getUserRoles\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@Roles('admin', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/roles/roles.controller.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@Roles('admin', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/roles/roles.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getUserRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserRoles(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('user/:userId')@Roles('admin', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/roles/roles.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, UseGuards } from '@nestjs/common';\nimport { RolesService } from './roles.service';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../auth/guards/roles.guard';\nimport { Roles } from '../auth/decorators/roles.decorator';\n\n@Controller('roles')\n@UseGuards(JwtAuthGuard, RolesGuard)\nexport class RolesController {\n  constructor(private readonly rolesService: RolesService) {}\n\n  @Get()\n  @Roles('admin', 'super_admin')\n  findAll() {\n    return this.rolesService.findAll();\n  }\n\n  @Get(':id')\n  @Roles('admin', 'super_admin')\n  findOne(@Param('id') id: string) {\n    return this.rolesService.findOne(+id);\n  }\n\n  @Get('user/:userId')\n  @Roles('admin', 'super_admin')\n  getUserRoles(@Param('userId') userId: string) {\n    return this.rolesService.getUserRoles(+userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/roles.guard.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/roles.guard.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ROLES_KEY } from '../decorators/roles.decorator';\n\n// Define interface for request with user\ninterface RequestWithUser extends Request {\n  user?: {\n    roles?: Array | string[];\n  };\n}\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(\n      ROLES_KEY,\n      [context.getHandler(), context.getClass()],\n    );\n\n    if (!requiredRoles) {\n      return true;\n    }\n\n    const request = context.switchToHttp().getRequest();\n    const userRoles = request.user?.roles || [];\n\n    // Handle both string array and object array formats\n    const roleNames = userRoles.map((role: string | { name: string }) =>\n      typeof role === 'string' ? role : (role as { name: string }).name,\n    );\n\n    return requiredRoles.some((role) => roleNames.includes(role));\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RolesModule.html":{"url":"modules/RolesModule.html","title":"module - RolesModule","body":"\n                   \n\n\n\n\n    Modules\n    RolesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_providers\n\n\n\ncluster_RolesModule_exports\n\n\n\n\nRolesService \n\nRolesService \n\n\n\nRolesModule\n\nRolesModule\n\nRolesService  -->\n\nRolesModule->RolesService \n\n\n\n\n\nRolesService\n\nRolesService\n\nRolesModule -->\n\nRolesService->RolesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/roles/roles.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RolesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RolesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RolesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Role } from './entities/role.entity';\nimport { User } from '../users/entities/user.entity';\nimport { RolesService } from './roles.service';\nimport { RolesController } from './roles.controller';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Role, User])],\n  providers: [RolesService],\n  controllers: [RolesController],\n  exports: [RolesService],\n})\nexport class RolesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RolesService.html":{"url":"injectables/RolesService.html","title":"injectable - RolesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RolesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/roles.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                assignRolesToUser\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByName\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getUserRoles\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(rolesRepository: Repository, usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/roles/roles.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        rolesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        assignRolesToUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    assignRolesToUser(userId: number, roleIds: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roleIds\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByName\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByName(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserRoles(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, In } from 'typeorm';\nimport { Role } from './entities/role.entity';\nimport { User } from '../users/entities/user.entity';\n\n@Injectable()\nexport class RolesService {\n  constructor(\n    @InjectRepository(Role)\n    private rolesRepository: Repository,\n\n    @InjectRepository(User)\n    private usersRepository: Repository,\n  ) {}\n\n  async findAll(): Promise {\n    return this.rolesRepository.find();\n  }\n\n  async findOne(id: number): Promise {\n    const role = await this.rolesRepository.findOne({ where: { id } });\n    if (!role) {\n      throw new NotFoundException(`Role with ID ${id} not found`);\n    }\n    return role;\n  }\n\n  async findByName(name: string): Promise {\n    const role = await this.rolesRepository.findOne({ where: { name } });\n    if (!role) {\n      throw new NotFoundException(`Role with name ${name} not found`);\n    }\n    return role;\n  }\n\n  async getUserRoles(userId: number): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id: userId },\n      relations: ['roles'],\n    });\n    return user ? user.roles : [];\n  }\n\n  async assignRolesToUser(userId: number, roleIds: number[]): Promise {\n    // Find the user\n    const user = await this.usersRepository.findOne({\n      where: { id: userId },\n      relations: ['roles'],\n    });\n\n    if (!user) {\n      throw new Error('User not found');\n    }\n\n    // Find the roles using In operator (replaces deprecated findByIds)\n    const roles = await this.rolesRepository.findBy({\n      id: In(roleIds),\n    });\n\n    // Assign roles to user\n    user.roles = roles;\n    await this.usersRepository.save(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SendOtpDto.html":{"url":"classes/SendOtpDto.html","title":"class - SendOtpDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SendOtpDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/otp.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                purpose\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Email address to send OTP to', example: 'user@example.com', format: 'email'})@IsEmail({}, {message: 'Please provide a valid email address'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/otp.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        purpose\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'verification'\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Purpose of the OTP', example: 'verification', enum: undefined, default: 'verification'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/otp.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsString,\n  IsOptional,\n  Length,\n  Matches,\n} from 'class-validator';\n\nexport class SendOtpDto {\n  @ApiProperty({\n    description: 'Email address to send OTP to',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiPropertyOptional({\n    description: 'Purpose of the OTP',\n    example: 'verification',\n    enum: ['verification', 'password_reset'],\n    default: 'verification',\n  })\n  @IsString()\n  @IsOptional()\n  purpose?: string = 'verification';\n}\n\nexport class VerifyOtpDto {\n  @ApiProperty({\n    description: 'Email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    description: '6-digit OTP code',\n    example: '123456',\n    minLength: 6,\n    maxLength: 6,\n    pattern: '^[0-9]{6}$',\n  })\n  @IsString()\n  @Length(6, 6, { message: 'OTP must be exactly 6 digits' })\n  @Matches(/^[0-9]{6}$/, { message: 'OTP must contain only numbers' })\n  otp: string;\n\n  @ApiPropertyOptional({\n    description: 'Purpose of the OTP verification',\n    example: 'verification',\n    enum: ['verification', 'password_reset'],\n    default: 'verification',\n  })\n  @IsString()\n  @IsOptional()\n  purpose?: string = 'verification';\n}\n\nexport class ForgotPasswordDto {\n  @ApiProperty({\n    description: 'Registered email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n}\n\nexport class ResetPasswordDto {\n  @ApiProperty({\n    description: 'Email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    description: '6-digit OTP code received via email',\n    example: '123456',\n    minLength: 6,\n    maxLength: 6,\n    pattern: '^[0-9]{6}$',\n  })\n  @IsString()\n  @Length(6, 6, { message: 'OTP must be exactly 6 digits' })\n  @Matches(/^[0-9]{6}$/, { message: 'OTP must contain only numbers' })\n  otp: string;\n\n  @ApiProperty({\n    description: 'New password (must meet complexity requirements)',\n    example: 'NewSecure123!',\n    minLength: 8,\n    pattern:\n      '^(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)(?=.*[@$!%*?&])[A-Za-z\\\\d@$!%*?&]{8,}$',\n  })\n  @IsString()\n  @Length(8, 100, { message: 'Password must be at least 8 characters long' })\n  @Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/, {\n    message:\n      'Password must contain uppercase, lowercase, numbers, and special characters',\n  })\n  newPassword: string;\n}\n\nexport class TestOtpDto {\n  @ApiProperty({\n    description: 'Email address for testing OTP generation',\n    example: 'test@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n}\n\nexport class ApplicationNotificationDto {\n  @ApiProperty({\n    description: 'Recipient email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    description: 'Application ID',\n    example: 'APP-001',\n  })\n  @IsString()\n  applicationId: string;\n\n  @ApiProperty({\n    description: 'Application status',\n    example: 'Approved',\n    enum: ['Pending', 'Approved', 'Rejected', 'Ready for Pickup'],\n  })\n  @IsString()\n  status: string;\n\n  @ApiProperty({\n    description: 'Type of application',\n    example: 'Birth Certificate',\n  })\n  @IsString()\n  applicationType: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TestOtpDto.html":{"url":"classes/TestOtpDto.html","title":"class - TestOtpDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TestOtpDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/otp.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Email address for testing OTP generation', example: 'test@example.com', format: 'email'})@IsEmail({}, {message: 'Please provide a valid email address'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/otp.dto.ts:116\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsString,\n  IsOptional,\n  Length,\n  Matches,\n} from 'class-validator';\n\nexport class SendOtpDto {\n  @ApiProperty({\n    description: 'Email address to send OTP to',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiPropertyOptional({\n    description: 'Purpose of the OTP',\n    example: 'verification',\n    enum: ['verification', 'password_reset'],\n    default: 'verification',\n  })\n  @IsString()\n  @IsOptional()\n  purpose?: string = 'verification';\n}\n\nexport class VerifyOtpDto {\n  @ApiProperty({\n    description: 'Email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    description: '6-digit OTP code',\n    example: '123456',\n    minLength: 6,\n    maxLength: 6,\n    pattern: '^[0-9]{6}$',\n  })\n  @IsString()\n  @Length(6, 6, { message: 'OTP must be exactly 6 digits' })\n  @Matches(/^[0-9]{6}$/, { message: 'OTP must contain only numbers' })\n  otp: string;\n\n  @ApiPropertyOptional({\n    description: 'Purpose of the OTP verification',\n    example: 'verification',\n    enum: ['verification', 'password_reset'],\n    default: 'verification',\n  })\n  @IsString()\n  @IsOptional()\n  purpose?: string = 'verification';\n}\n\nexport class ForgotPasswordDto {\n  @ApiProperty({\n    description: 'Registered email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n}\n\nexport class ResetPasswordDto {\n  @ApiProperty({\n    description: 'Email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    description: '6-digit OTP code received via email',\n    example: '123456',\n    minLength: 6,\n    maxLength: 6,\n    pattern: '^[0-9]{6}$',\n  })\n  @IsString()\n  @Length(6, 6, { message: 'OTP must be exactly 6 digits' })\n  @Matches(/^[0-9]{6}$/, { message: 'OTP must contain only numbers' })\n  otp: string;\n\n  @ApiProperty({\n    description: 'New password (must meet complexity requirements)',\n    example: 'NewSecure123!',\n    minLength: 8,\n    pattern:\n      '^(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)(?=.*[@$!%*?&])[A-Za-z\\\\d@$!%*?&]{8,}$',\n  })\n  @IsString()\n  @Length(8, 100, { message: 'Password must be at least 8 characters long' })\n  @Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/, {\n    message:\n      'Password must contain uppercase, lowercase, numbers, and special characters',\n  })\n  newPassword: string;\n}\n\nexport class TestOtpDto {\n  @ApiProperty({\n    description: 'Email address for testing OTP generation',\n    example: 'test@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n}\n\nexport class ApplicationNotificationDto {\n  @ApiProperty({\n    description: 'Recipient email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    description: 'Application ID',\n    example: 'APP-001',\n  })\n  @IsString()\n  applicationId: string;\n\n  @ApiProperty({\n    description: 'Application status',\n    example: 'Approved',\n    enum: ['Pending', 'Approved', 'Rejected', 'Ready for Pickup'],\n  })\n  @IsString()\n  status: string;\n\n  @ApiProperty({\n    description: 'Type of application',\n    example: 'Birth Certificate',\n  })\n  @IsString()\n  applicationType: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAnnouncementDto.html":{"url":"classes/UpdateAnnouncementDto.html","title":"class - UpdateAnnouncementDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAnnouncementDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/announcement/dto/update-announcement.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateAnnouncementDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateAnnouncementDto } from './create-announcement.dto';\n\nexport class UpdateAnnouncementDto extends PartialType(CreateAnnouncementDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAppointmentDto.html":{"url":"classes/UpdateAppointmentDto.html","title":"class - UpdateAppointmentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAppointmentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/appointment/dto/update-appointment.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateAppointmentDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AppointmentStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEnum(AppointmentStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/update-appointment.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { IsOptional, IsEnum } from 'class-validator';\nimport { CreateAppointmentDto } from './create-appointment.dto';\nimport { AppointmentStatus } from '../entities/appointment.entity';\n\nexport class UpdateAppointmentDto extends PartialType(CreateAppointmentDto) {\n  @IsOptional()\n  @IsEnum(AppointmentStatus)\n  status?: AppointmentStatus;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateDocumentApplicationDto.html":{"url":"classes/UpdateDocumentApplicationDto.html","title":"class - UpdateDocumentApplicationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateDocumentApplicationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/document-applications/dto/update-document-application.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(\n  CreateDocumentApplicationDto,\n)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                statusMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ApplicationStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: ApplicationStatus, description: 'Application status', example: undefined, required: false})@IsOptional()@IsEnum(ApplicationStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/dto/update-document-application.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        statusMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Status message', example: 'Application approved and ready for pickup', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/dto/update-document-application.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateDocumentApplicationDto } from './create-document-application.dto';\nimport { IsEnum, IsOptional, IsString } from 'class-validator';\nimport { ApplicationStatus } from '../entities/document-application.entity';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class UpdateDocumentApplicationDto extends PartialType(\n  CreateDocumentApplicationDto,\n) {\n  @ApiProperty({\n    enum: ApplicationStatus,\n    description: 'Application status',\n    example: ApplicationStatus.APPROVED,\n    required: false,\n  })\n  @IsOptional()\n  @IsEnum(ApplicationStatus)\n  status?: ApplicationStatus;\n\n  @ApiProperty({\n    description: 'Status message',\n    example: 'Application approved and ready for pickup',\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  statusMessage?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateQueueDto.html":{"url":"classes/UpdateQueueDto.html","title":"class - UpdateQueueDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateQueueDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/dto/update-queue.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                counterNumber\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        counterNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/update-queue.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueueStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(QueueStatus)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/update-queue.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsEnum, IsOptional } from 'class-validator';\nimport { QueueStatus } from '../entities/queue.entity';\n\nexport class UpdateQueueDto {\n  @IsEnum(QueueStatus)\n  @IsOptional()\n  status?: QueueStatus;\n\n  @IsString()\n  @IsOptional()\n  counterNumber?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/update-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for updating user information (citizen)\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                contactNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                middleName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                nameExtension\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Complete address', example: '123 Main St, San Ildefonso, Bulacan'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        contactNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Contact number', example: '09123456789'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User email address', example: 'test@example.com'})@IsEmail()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'First name', example: 'John'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Last name', example: 'Doe'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Middle name', example: 'Robert'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        nameExtension\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Name extension (e.g., Jr., III)', example: 'Jr.'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User password (min 8 characters)', example: 'password123', minLength: 8})@IsString()@IsOptional()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Username', example: 'john_doe'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsOptional,\n  IsString,\n  MinLength,\n  IsNumber,\n  IsArray,\n} from 'class-validator';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\n/**\n * DTO for updating user information (citizen)\n * @class UpdateUserDto\n */\nexport class UpdateUserDto {\n  @ApiPropertyOptional({\n    description: 'User email address',\n    example: 'test@example.com',\n  })\n  @IsEmail()\n  @IsOptional()\n  email?: string;\n\n  @ApiPropertyOptional({ description: 'Username', example: 'john_doe' })\n  @IsString()\n  @IsOptional()\n  username?: string;\n\n  @ApiPropertyOptional({\n    description: 'User password (min 8 characters)',\n    example: 'password123',\n    minLength: 8,\n  })\n  @IsString()\n  @IsOptional()\n  @MinLength(8)\n  password?: string;\n\n  @ApiPropertyOptional({ description: 'First name', example: 'John' })\n  @IsString()\n  @IsOptional()\n  firstName?: string;\n\n  @ApiPropertyOptional({ description: 'Middle name', example: 'Robert' })\n  @IsString()\n  @IsOptional()\n  middleName?: string;\n\n  @ApiPropertyOptional({ description: 'Last name', example: 'Doe' })\n  @IsString()\n  @IsOptional()\n  lastName?: string;\n\n  @ApiPropertyOptional({\n    description: 'Name extension (e.g., Jr., III)',\n    example: 'Jr.',\n  })\n  @IsString()\n  @IsOptional()\n  nameExtension?: string;\n\n  @ApiPropertyOptional({\n    description: 'Contact number',\n    example: '09123456789',\n  })\n  @IsString()\n  @IsOptional()\n  contactNumber?: string;\n\n  @ApiPropertyOptional({\n    description: 'Complete address',\n    example: '123 Main St, San Ildefonso, Bulacan',\n  })\n  @IsString()\n  @IsOptional()\n  address?: string;\n}\n\n/**\n * DTO for admin to update any user\n * @class AdminUpdateUserDto\n */\nexport class AdminUpdateUserDto extends UpdateUserDto {\n  @ApiPropertyOptional({\n    description: 'Default role ID for the user',\n    example: 2,\n  })\n  @IsNumber()\n  @IsOptional()\n  defaultRoleId?: number;\n\n  @ApiPropertyOptional({\n    description: 'Array of role IDs to assign to the user',\n    example: [1, 2],\n    type: [Number],\n  })\n  @IsArray()\n  @IsOptional()\n  roleIds?: number[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserStatusDto.html":{"url":"classes/UpdateUserStatusDto.html","title":"class - UpdateUserStatusDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserStatusDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user-status.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                isActive\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: true, description: 'User active status'})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user-status.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsBoolean } from 'class-validator';\n\nexport class UpdateUserStatusDto {\n  @ApiProperty({\n    example: true,\n    description: 'User active status',\n  })\n  @IsBoolean()\n  isActive: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                contactNumber\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                defaultRole\n                            \n                            \n                                    \n                                defaultRoleId\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                middleName\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                nameExtension\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                roles\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        contactNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'contact_number', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        defaultRole\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {nullable: true})@JoinColumn({name: 'default_role_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        defaultRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'default_role_id', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'first_name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'is_active', default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'last_name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'middle_name', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        nameExtension\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'name_extension', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined)@JoinTable({name: 'user_roles', joinColumn: undefined, inverseJoinColumn: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({name: 'updated_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:23\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  ManyToOne,\n  JoinColumn,\n  ManyToMany,\n  JoinTable,\n} from 'typeorm';\nimport { Role } from '../../roles/entities/role.entity';\n\n@Entity('users')\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true })\n  email: string;\n\n  @Column({ unique: true })\n  username: string;\n\n  @Column()\n  password: string;\n\n  @Column({ name: 'first_name' })\n  firstName: string;\n\n  @Column({ name: 'middle_name', nullable: true })\n  middleName: string;\n\n  @Column({ name: 'last_name' })\n  lastName: string;\n\n  @Column()\n  name: string; // Keep for backward compatibility\n\n  @Column({ name: 'name_extension', nullable: true })\n  nameExtension: string;\n\n  @Column({ name: 'contact_number', nullable: true })\n  contactNumber: string;\n\n  @Column({ name: 'is_active', default: true })\n  isActive: boolean;\n\n  @CreateDateColumn({ name: 'created_at' })\n  createdAt: Date;\n\n  @UpdateDateColumn({ name: 'updated_at' })\n  updatedAt: Date;\n\n  @ManyToOne(() => Role, { nullable: true })\n  @JoinColumn({ name: 'default_role_id' })\n  defaultRole: Role;\n\n  @Column({ name: 'default_role_id', nullable: true })\n  defaultRoleId: number;\n\n  @ManyToMany(() => Role)\n  @JoinTable({\n    name: 'user_roles',\n    joinColumn: {\n      name: 'user_id',\n      referencedColumnName: 'id',\n    },\n    inverseJoinColumn: {\n      name: 'role_id',\n      referencedColumnName: 'id',\n    },\n  })\n  roles: Role[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserQueryDto.html":{"url":"classes/UserQueryDto.html","title":"class - UserQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/user-query.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                role\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                search\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 10, description: 'Number of items per page', minimum: 1})@IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-query.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 1, description: 'Page number', minimum: 1})@IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-query.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'citizen', description: 'Filter by role'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-query.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        search\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'john', description: 'Search term for name, email, or username'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-query.dto.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { IsOptional, IsString, IsNumber, Min } from 'class-validator';\nimport { Type } from 'class-transformer';\n\nexport class UserQueryDto {\n  @ApiPropertyOptional({\n    example: 1,\n    description: 'Page number',\n    minimum: 1,\n  })\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  page?: number = 1;\n\n  @ApiPropertyOptional({\n    example: 10,\n    description: 'Number of items per page',\n    minimum: 1,\n  })\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  limit?: number = 10;\n\n  @ApiPropertyOptional({\n    example: 'john',\n    description: 'Search term for name, email, or username',\n  })\n  @IsOptional()\n  @IsString()\n  search?: string;\n\n  @ApiPropertyOptional({\n    example: 'citizen',\n    description: 'Filter by role',\n  })\n  @IsOptional()\n  @IsString()\n  role?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserResponseDto.html":{"url":"classes/UserResponseDto.html","title":"class - UserResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/user-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                contactNumber\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                defaultRole\n                            \n                            \n                                    \n                                    Optional\n                                defaultRoleId\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    Optional\n                                middleName\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    Optional\n                                nameExtension\n                            \n                            \n                                    \n                                roles\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    Optional\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        contactNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '+639123456789', description: 'Contact number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2024-01-01T00:00:00.000Z', description: 'User creation date'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        defaultRole\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'citizen', description: 'Default role name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:87\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        defaultRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 4, description: 'Default role ID'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'john.doe@example.com', description: 'User email address'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'John', description: 'User first name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 1, description: 'User ID'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: true, description: 'User active status'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Doe', description: 'User last name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'Miguel', description: 'User middle name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'John Miguel Doe', description: 'Full name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        nameExtension\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'Jr.', description: 'Name extension'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined, description: 'User roles', type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2024-01-01T00:00:00.000Z', description: 'User last update date'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'johndoe', description: 'Username'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class UserResponseDto {\n  @ApiProperty({\n    example: 1,\n    description: 'User ID',\n  })\n  id: number;\n\n  @ApiProperty({\n    example: 'john.doe@example.com',\n    description: 'User email address',\n  })\n  email: string;\n\n  @ApiPropertyOptional({\n    example: 'johndoe',\n    description: 'Username',\n  })\n  username?: string;\n\n  @ApiProperty({\n    example: 'John',\n    description: 'User first name',\n  })\n  firstName: string;\n\n  @ApiPropertyOptional({\n    example: 'Miguel',\n    description: 'User middle name',\n  })\n  middleName?: string;\n\n  @ApiProperty({\n    example: 'Doe',\n    description: 'User last name',\n  })\n  lastName: string;\n\n  @ApiProperty({\n    example: 'John Miguel Doe',\n    description: 'Full name',\n  })\n  name: string;\n\n  @ApiPropertyOptional({\n    example: 'Jr.',\n    description: 'Name extension',\n  })\n  nameExtension?: string;\n\n  @ApiProperty({\n    example: '+639123456789',\n    description: 'Contact number',\n  })\n  contactNumber: string;\n\n  @ApiProperty({\n    example: true,\n    description: 'User active status',\n  })\n  isActive: boolean;\n\n  @ApiProperty({\n    example: '2024-01-01T00:00:00.000Z',\n    description: 'User creation date',\n  })\n  createdAt: Date;\n\n  @ApiProperty({\n    example: '2024-01-01T00:00:00.000Z',\n    description: 'User last update date',\n  })\n  updatedAt: Date;\n\n  @ApiProperty({\n    example: ['citizen', 'staff'],\n    description: 'User roles',\n    type: [String],\n  })\n  roles: string[];\n\n  @ApiProperty({\n    example: 'citizen',\n    description: 'Default role name',\n  })\n  defaultRole: string;\n\n  @ApiPropertyOptional({\n    example: 4,\n    description: 'Default role ID',\n  })\n  defaultRoleId?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserStats.html":{"url":"interfaces/UserStats.html","title":"interface - UserStats","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserStats\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            activeUsers\n                                        \n                                \n                                \n                                        \n                                            inactiveUsers\n                                        \n                                \n                                \n                                        \n                                            recentUsers\n                                        \n                                \n                                \n                                        \n                                            totalUsers\n                                        \n                                \n                                \n                                        \n                                            usersByRole\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        activeUsers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        activeUsers:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        inactiveUsers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        inactiveUsers:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        recentUsers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        recentUsers:         Omit[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Omit[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        totalUsers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        totalUsers:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        usersByRole\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        usersByRole:     literal type[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  BadRequestException,\n  ConflictException,\n  Logger,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, Like, In } from 'typeorm';\nimport { User } from './entities/user.entity';\nimport { AdminUpdateUserDto } from '../auth/dto/update-user.dto'; // Import from auth module\nimport { RolesService } from '../roles/roles.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport * as bcrypt from 'bcrypt';\n\ninterface FindAllOptions {\n  page: number;\n  limit: number;\n  search?: string;\n  role?: string;\n}\n\nexport interface UserStats {\n  totalUsers: number;\n  activeUsers: number;\n  inactiveUsers: number;\n  usersByRole: { roleName: string; count: number }[];\n  recentUsers: Omit[];\n}\n\n@Injectable()\nexport class UsersService {\n  private readonly logger = new Logger(UsersService.name);\n\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n    private rolesService: RolesService,\n  ) {}\n\n  async findAll(options: FindAllOptions) {\n    const { page, limit, search, role } = options;\n    const skip = (page - 1) * limit;\n\n    const queryBuilder = this.usersRepository\n      .createQueryBuilder('user')\n      .leftJoinAndSelect('user.defaultRole', 'defaultRole')\n      .leftJoinAndSelect('user.roles', 'roles');\n\n    // Apply search filter\n    if (search) {\n      queryBuilder.where(\n        '(user.firstName LIKE :search OR user.lastName LIKE :search OR user.email LIKE :search OR user.username LIKE :search)',\n        { search: `%${search}%` },\n      );\n    }\n\n    // Apply role filter\n    if (role) {\n      queryBuilder.andWhere('roles.name = :role', { role });\n    }\n\n    queryBuilder.orderBy('user.createdAt', 'DESC').skip(skip).take(limit);\n\n    const [users, total] = await queryBuilder.getManyAndCount();\n\n    // Remove passwords from response\n    const sanitizedUsers = users.map((user) => {\n      const { password, ...userWithoutPassword } = user;\n      return {\n        ...userWithoutPassword,\n        roles: user.roles.map((role) => role.name),\n        defaultRole: user.defaultRole?.name || 'citizen',\n      };\n    });\n\n    return {\n      users: sanitizedUsers,\n      total,\n      page,\n      limit,\n      totalPages: Math.ceil(total / limit),\n    };\n  }\n\n  async findOne(id: number): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id },\n      relations: ['defaultRole', 'roles'],\n    });\n\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    // Remove password and format response\n\n    const { password, ...userWithoutPassword } = user;\n    return {\n      ...userWithoutPassword,\n      roles: user.roles.map((role) => role.name),\n      defaultRole: user.defaultRole?.name || 'citizen',\n    };\n  }\n\n  // Admin-only update method\n  async adminUpdate(\n    id: number,\n    updateUserDto: AdminUpdateUserDto,\n  ): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id },\n      relations: ['roles'],\n    });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    const {\n      email,\n\n      username,\n\n      firstName,\n\n      middleName,\n\n      lastName,\n\n      nameExtension,\n\n      contactNumber,\n\n      roleIds,\n\n      defaultRoleId,\n    } = updateUserDto;\n\n    // Check email uniqueness if being updated\n    if (email && email !== user.email) {\n      const existingUser = await this.usersRepository.findOne({\n        where: { email },\n      });\n      if (existingUser) {\n        throw new ConflictException('Email already exists');\n      }\n    }\n\n    // Check username uniqueness if being updated\n    if (username && username !== user.username) {\n      const existingUser = await this.usersRepository.findOne({\n        where: { username },\n      });\n      if (existingUser) {\n        throw new ConflictException('Username already exists');\n      }\n    }\n\n    // Update fields\n    const updateData: any = {};\n\n    if (email) updateData.email = email;\n    if (username) updateData.username = username;\n    if (firstName) updateData.firstName = firstName;\n    if (lastName) updateData.lastName = lastName;\n    if (contactNumber) updateData.contactNumber = contactNumber;\n\n    // Handle optional fields\n    if (middleName !== undefined) updateData.middleName = middleName;\n    if (nameExtension !== undefined) updateData.nameExtension = nameExtension;\n    if (defaultRoleId !== undefined) updateData.defaultRoleId = defaultRoleId;\n\n    // Update name if name components changed\n    if (\n      firstName ||\n      middleName !== undefined ||\n      lastName ||\n      nameExtension !== undefined\n    ) {\n      const newFirstName = firstName || user.firstName;\n      const newMiddleName =\n        middleName !== undefined ? middleName : user.middleName;\n      const newLastName = lastName || user.lastName;\n      const newNameExtension =\n        nameExtension !== undefined ? nameExtension : user.nameExtension;\n\n      updateData.name = `${newFirstName} ${newMiddleName ? newMiddleName + ' ' : ''}${newLastName}${newNameExtension ? ' ' + newNameExtension : ''}`;\n    }\n\n    await this.usersRepository.update(id, updateData);\n\n    // Update roles if provided\n    if (roleIds !== undefined) {\n      // Remove existing roles and assign new ones\n      await this.usersRepository\n        .createQueryBuilder()\n        .relation(User, 'roles')\n        .of(id)\n        .remove(user.roles);\n\n      if (roleIds.length > 0) {\n        await this.rolesService.assignRolesToUser(id, roleIds);\n      }\n    }\n\n    return this.findOne(id);\n  }\n\n  async remove(id: number): Promise {\n    const user = await this.usersRepository.findOne({ where: { id } });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    await this.usersRepository.delete(id);\n    return { message: `User with ID ${id} has been deleted` };\n  }\n\n  async updateStatus(id: number, isActive: boolean): Promise {\n    const user = await this.usersRepository.findOne({ where: { id } });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    await this.usersRepository.update(id, { isActive });\n    return this.findOne(id);\n  }\n\n  async getStats(): Promise {\n    const totalUsers = await this.usersRepository.count();\n    const activeUsers = await this.usersRepository.count({\n      where: { isActive: true },\n    });\n    const inactiveUsers = totalUsers - activeUsers;\n\n    // Get user count by role\n    const roleStats = await this.usersRepository\n      .createQueryBuilder('user')\n      .leftJoin('user.roles', 'role')\n      .select('role.name', 'roleName')\n      .addSelect('COUNT(user.id)', 'count')\n      .groupBy('role.name')\n      .getRawMany();\n\n    const usersByRole = roleStats.map((stat) => ({\n      roleName: stat.roleName || 'No Role',\n\n      count: parseInt(stat.count),\n    }));\n\n    // Get recent users (last 10)\n    const recentUsers = await this.usersRepository.find({\n      order: { createdAt: 'DESC' },\n      take: 10,\n      relations: ['defaultRole', 'roles'],\n    });\n\n    const sanitizedRecentUsers = recentUsers.map((user) => {\n      const { password, ...userWithoutPassword } = user;\n      return userWithoutPassword as Omit;\n    });\n\n    return {\n      totalUsers,\n      activeUsers,\n      inactiveUsers,\n      usersByRole,\n      recentUsers: sanitizedRecentUsers,\n    };\n  }\n\n  async findByEmail(email: string): Promise {\n    return this.usersRepository.findOne({\n      where: { email },\n      relations: ['defaultRole', 'roles'],\n    });\n  }\n\n  async findByUsername(username: string): Promise {\n    return this.usersRepository.findOne({\n      where: { username },\n      relations: ['defaultRole', 'roles'],\n    });\n  }\n\n  async create(createUserDto: CreateUserDto) {\n    const {\n      email,\n      username,\n      password,\n      firstName,\n      middleName,\n      lastName,\n      nameExtension,\n      contactNumber,\n      name,\n      roleIds,\n      defaultRoleId,\n    } = createUserDto;\n\n    // Generate full name if not provided\n    const fullName =\n      name ||\n      `${firstName} ${middleName ? middleName + ' ' : ''}${lastName}${nameExtension ? ' ' + nameExtension : ''}`;\n\n    // Check if user already exists\n    const existingUserByEmail = await this.usersRepository.findOne({\n      where: { email },\n    });\n    if (existingUserByEmail) {\n      throw new ConflictException('Email already exists');\n    }\n\n    if (username) {\n      const existingUserByUsername = await this.usersRepository.findOne({\n        where: { username },\n      });\n      if (existingUserByUsername) {\n        throw new ConflictException('Username already exists');\n      }\n    }\n\n    try {\n      // Create user\n      const user = this.usersRepository.create({\n        email,\n        username,\n        password, // Should be hashed by the caller\n        firstName,\n        middleName,\n        lastName,\n        nameExtension,\n        contactNumber,\n        name: fullName,\n        defaultRoleId: defaultRoleId || 4, // Default to citizen\n      });\n\n      await this.usersRepository.save(user);\n\n      // Assign roles if provided\n      if (roleIds && roleIds.length > 0) {\n        await this.rolesService.assignRolesToUser(user.id, roleIds);\n      }\n\n      return user;\n    } catch (error) {\n      this.logger.error('Error creating user:', error);\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserStatsResponseDto.html":{"url":"classes/UserStatsResponseDto.html","title":"class - UserStatsResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserStatsResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/user-stats-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                activeUsers\n                            \n                            \n                                    \n                                inactiveUsers\n                            \n                            \n                                    \n                                recentUsers\n                            \n                            \n                                    \n                                totalUsers\n                            \n                            \n                                    \n                                usersByRole\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        activeUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 85, description: 'Number of active users'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-stats-response.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        inactiveUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 15, description: 'Number of inactive users'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-stats-response.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        recentUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserResponseDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined, description: 'Recently created users'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-stats-response.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        totalUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 100, description: 'Total number of users'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-stats-response.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        usersByRole\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UsersByRoleDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined, description: 'User count by role'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-stats-response.dto.ts:41\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { UserResponseDto } from './user-response.dto';\n\nclass UsersByRoleDto {\n  @ApiProperty({\n    example: 'citizen',\n    description: 'Role name',\n  })\n  roleName: string;\n\n  @ApiProperty({\n    example: 25,\n    description: 'Number of users with this role',\n  })\n  count: number;\n}\n\nexport class UserStatsResponseDto {\n  @ApiProperty({\n    example: 100,\n    description: 'Total number of users',\n  })\n  totalUsers: number;\n\n  @ApiProperty({\n    example: 85,\n    description: 'Number of active users',\n  })\n  activeUsers: number;\n\n  @ApiProperty({\n    example: 15,\n    description: 'Number of inactive users',\n  })\n  inactiveUsers: number;\n\n  @ApiProperty({\n    type: [UsersByRoleDto],\n    description: 'User count by role',\n  })\n  usersByRole: UsersByRoleDto[];\n\n  @ApiProperty({\n    type: [UserResponseDto],\n    description: 'Recently created users',\n  })\n  recentUsers: UserResponseDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UsersByRoleDto.html":{"url":"classes/UsersByRoleDto.html","title":"class - UsersByRoleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UsersByRoleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/user-stats-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                count\n                            \n                            \n                                    \n                                roleName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 25, description: 'Number of users with this role'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-stats-response.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        roleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'citizen', description: 'Role name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-stats-response.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { UserResponseDto } from './user-response.dto';\n\nclass UsersByRoleDto {\n  @ApiProperty({\n    example: 'citizen',\n    description: 'Role name',\n  })\n  roleName: string;\n\n  @ApiProperty({\n    example: 25,\n    description: 'Number of users with this role',\n  })\n  count: number;\n}\n\nexport class UserStatsResponseDto {\n  @ApiProperty({\n    example: 100,\n    description: 'Total number of users',\n  })\n  totalUsers: number;\n\n  @ApiProperty({\n    example: 85,\n    description: 'Number of active users',\n  })\n  activeUsers: number;\n\n  @ApiProperty({\n    example: 15,\n    description: 'Number of inactive users',\n  })\n  inactiveUsers: number;\n\n  @ApiProperty({\n    type: [UsersByRoleDto],\n    description: 'User count by role',\n  })\n  usersByRole: UsersByRoleDto[];\n\n  @ApiProperty({\n    type: [UserResponseDto],\n    description: 'Recently created users',\n  })\n  recentUsers: UserResponseDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                adminCreateUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getProfile\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getStats\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        adminCreateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    adminCreateUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('admin-create')@UseGuards(JwtAuthGuard, RolesGuard)@Roles('admin', 'super_admin')@ApiOperation({summary: 'Admin creates user with role assignment'})@ApiResponse({status: 201, description: 'User created successfully', type: UserResponseDto})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:156\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(query: UserQueryDto, req: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(RolesGuard)@Roles('admin', 'staff', 'super_admin')@ApiOperation({summary: 'Get all users (Admin only)'})@ApiResponse({status: 200, description: 'Users retrieved successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            UserQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string, req: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@UseGuards(RolesGuard)@Roles('admin', 'staff', 'super_admin')@ApiOperation({summary: 'Get user by ID (Admin only)'})@ApiResponse({status: 200, description: 'User found'})@ApiResponse({status: 404, description: 'User not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:83\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(req: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('profile')@ApiOperation({summary: 'Get current user profile'})@ApiResponse({status: 200, description: 'Profile retrieved successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('stats')@UseGuards(RolesGuard)@Roles('admin', 'staff', 'super_admin')@ApiOperation({summary: 'Get user statistics (Admin only)'})@ApiResponse({status: 200, description: 'Statistics retrieved successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:73\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string, req: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@UseGuards(RolesGuard)@Roles('admin', 'super_admin')@ApiOperation({summary: 'Delete user (Admin only)'})@ApiResponse({status: 200, description: 'User deleted successfully'})@ApiResponse({status: 404, description: 'User not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:124\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateUserDto: AdminUpdateUserDto, req: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@UseGuards(RolesGuard)@Roles('admin', 'super_admin')@ApiOperation({summary: 'Update user (Admin only)'})@ApiResponse({status: 200, description: 'User updated successfully'})@ApiResponse({status: 404, description: 'User not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:109\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            AdminUpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(id: string, updateStatusDto: UpdateUserStatusDto, req: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/status')@UseGuards(RolesGuard)@Roles('admin', 'super_admin')@ApiOperation({summary: 'Update user status (Admin only)'})@ApiResponse({status: 200, description: 'User status updated successfully'})@ApiResponse({status: 404, description: 'User not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:138\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateStatusDto\n                                            \n                                                            UpdateUserStatusDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-unsafe-return */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nimport {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n  Request,\n  Query,\n  Logger,\n} from '@nestjs/common';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n} from '@nestjs/swagger';\nimport { UsersService } from './users.service';\nimport { AdminUpdateUserDto } from '../auth/dto/update-user.dto'; // Import from auth module\nimport { UpdateUserStatusDto } from './dto/update-user-status.dto';\nimport { UserQueryDto } from './dto/user-query.dto';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../auth/guards/roles.guard';\nimport { Roles } from '../auth/decorators/roles.decorator';\nimport { AuthenticatedUser } from '../auth/jwt.strategy';\nimport * as bcrypt from 'bcrypt';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UserResponseDto } from './dto/user-response.dto';\n\n@ApiTags('users')\n@Controller('users')\n@UseGuards(JwtAuthGuard)\n@ApiBearerAuth()\nexport class UsersController {\n  private readonly logger = new Logger(UsersController.name);\n\n  constructor(private readonly usersService: UsersService) {}\n\n  @Get()\n  @UseGuards(RolesGuard)\n  @Roles('admin', 'staff', 'super_admin')\n  @ApiOperation({ summary: 'Get all users (Admin only)' })\n  @ApiResponse({ status: 200, description: 'Users retrieved successfully' })\n  async findAll(\n    @Query() query: UserQueryDto,\n\n    @Request() req: { user: AuthenticatedUser },\n  ) {\n    const { page = 1, limit = 10, search, role } = query;\n    return this.usersService.findAll({ page, limit, search, role });\n  }\n\n  @Get('profile')\n  @ApiOperation({ summary: 'Get current user profile' })\n  @ApiResponse({ status: 200, description: 'Profile retrieved successfully' })\n  async getProfile(@Request() req: { user: AuthenticatedUser }) {\n    return this.usersService.findOne(req.user.id);\n  }\n\n  @Get('stats')\n  @UseGuards(RolesGuard)\n  @Roles('admin', 'staff', 'super_admin')\n  @ApiOperation({ summary: 'Get user statistics (Admin only)' })\n  @ApiResponse({\n    status: 200,\n    description: 'Statistics retrieved successfully',\n  })\n  async getStats() {\n    return this.usersService.getStats();\n  }\n\n  @Get(':id')\n  @UseGuards(RolesGuard)\n  @Roles('admin', 'staff', 'super_admin')\n  @ApiOperation({ summary: 'Get user by ID (Admin only)' })\n  @ApiResponse({ status: 200, description: 'User found' })\n  @ApiResponse({ status: 404, description: 'User not found' })\n  async findOne(\n    @Param('id') id: string,\n    @Request() req: { user: AuthenticatedUser },\n  ) {\n    // Allow users to view their own profile\n    const userId = +id;\n    const currentUser = req.user;\n\n    if (\n      userId === currentUser.id ||\n      currentUser.roles.some((role) =>\n        ['admin', 'staff', 'super_admin'].includes(role.name),\n      )\n    ) {\n      return this.usersService.findOne(userId);\n    }\n\n    throw new Error('Unauthorized');\n  }\n\n  @Patch(':id')\n  @UseGuards(RolesGuard)\n  @Roles('admin', 'super_admin')\n  @ApiOperation({ summary: 'Update user (Admin only)' })\n  @ApiResponse({ status: 200, description: 'User updated successfully' })\n  @ApiResponse({ status: 404, description: 'User not found' })\n  async update(\n    @Param('id') id: string,\n    @Body() updateUserDto: AdminUpdateUserDto,\n\n    @Request() req: { user: AuthenticatedUser },\n  ) {\n    return this.usersService.adminUpdate(+id, updateUserDto);\n  }\n\n  @Delete(':id')\n  @UseGuards(RolesGuard)\n  @Roles('admin', 'super_admin')\n  @ApiOperation({ summary: 'Delete user (Admin only)' })\n  @ApiResponse({ status: 200, description: 'User deleted successfully' })\n  @ApiResponse({ status: 404, description: 'User not found' })\n  async remove(\n    @Param('id') id: string,\n\n    @Request() req: { user: AuthenticatedUser },\n  ) {\n    return this.usersService.remove(+id);\n  }\n\n  @Patch(':id/status')\n  @UseGuards(RolesGuard)\n  @Roles('admin', 'super_admin')\n  @ApiOperation({ summary: 'Update user status (Admin only)' })\n  @ApiResponse({ status: 200, description: 'User status updated successfully' })\n  @ApiResponse({ status: 404, description: 'User not found' })\n  async updateStatus(\n    @Param('id') id: string,\n    @Body() updateStatusDto: UpdateUserStatusDto,\n\n    @Request() req: { user: AuthenticatedUser },\n  ) {\n    return this.usersService.updateStatus(+id, updateStatusDto.isActive);\n  }\n\n  @Post('admin-create')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles('admin', 'super_admin')\n  @ApiOperation({ summary: 'Admin creates user with role assignment' })\n  @ApiResponse({\n    status: 201,\n    description: 'User created successfully',\n    type: UserResponseDto,\n  })\n  async adminCreateUser(\n    @Body() createUserDto: CreateUserDto,\n  ): Promise {\n    try {\n      // Hash password\n      const salt = await bcrypt.genSalt();\n      const hashedPassword = await bcrypt.hash(createUserDto.password, salt);\n\n      // Create user with hashed password\n      const userWithHashedPassword = {\n        ...createUserDto,\n        password: hashedPassword,\n      };\n\n      const user = await this.usersService.create(userWithHashedPassword);\n\n      // Return user without password\n\n      const { password, ...userWithoutPassword } = user;\n\n      // Get user with roles for response\n\n      const userWithRoles = await this.usersService.findOne(user.id);\n\n      return userWithRoles;\n    } catch (error) {\n      this.logger.error('Error in admin create user:', error);\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nRolesModule\n\nRolesModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nRolesModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RolesModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { User } from './entities/user.entity';\nimport { RolesModule } from '../roles/roles.module';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User]), RolesModule],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService, TypeOrmModule],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                adminUpdate\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByEmail\n                            \n                            \n                                    Async\n                                findByUsername\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getStats\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, rolesService: RolesService)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:37\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        rolesService\n                                                  \n                                                        \n                                                                        RolesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        adminUpdate\n                        \n                    \n                \n            \n            \n                \n                        \n                    adminUpdate(id: number, updateUserDto: AdminUpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:111\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            AdminUpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:290\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(options: FindAllOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                            FindAllOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:276\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByUsername\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByUsername(username: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:283\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:90\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:233\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:213\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(id: number, isActive: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:223\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                isActive\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(UsersService.name)\n                    \n                \n                    \n                        \n                                Defined in src/users/users.service.ts:37\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  BadRequestException,\n  ConflictException,\n  Logger,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, Like, In } from 'typeorm';\nimport { User } from './entities/user.entity';\nimport { AdminUpdateUserDto } from '../auth/dto/update-user.dto'; // Import from auth module\nimport { RolesService } from '../roles/roles.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport * as bcrypt from 'bcrypt';\n\ninterface FindAllOptions {\n  page: number;\n  limit: number;\n  search?: string;\n  role?: string;\n}\n\nexport interface UserStats {\n  totalUsers: number;\n  activeUsers: number;\n  inactiveUsers: number;\n  usersByRole: { roleName: string; count: number }[];\n  recentUsers: Omit[];\n}\n\n@Injectable()\nexport class UsersService {\n  private readonly logger = new Logger(UsersService.name);\n\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n    private rolesService: RolesService,\n  ) {}\n\n  async findAll(options: FindAllOptions) {\n    const { page, limit, search, role } = options;\n    const skip = (page - 1) * limit;\n\n    const queryBuilder = this.usersRepository\n      .createQueryBuilder('user')\n      .leftJoinAndSelect('user.defaultRole', 'defaultRole')\n      .leftJoinAndSelect('user.roles', 'roles');\n\n    // Apply search filter\n    if (search) {\n      queryBuilder.where(\n        '(user.firstName LIKE :search OR user.lastName LIKE :search OR user.email LIKE :search OR user.username LIKE :search)',\n        { search: `%${search}%` },\n      );\n    }\n\n    // Apply role filter\n    if (role) {\n      queryBuilder.andWhere('roles.name = :role', { role });\n    }\n\n    queryBuilder.orderBy('user.createdAt', 'DESC').skip(skip).take(limit);\n\n    const [users, total] = await queryBuilder.getManyAndCount();\n\n    // Remove passwords from response\n    const sanitizedUsers = users.map((user) => {\n      const { password, ...userWithoutPassword } = user;\n      return {\n        ...userWithoutPassword,\n        roles: user.roles.map((role) => role.name),\n        defaultRole: user.defaultRole?.name || 'citizen',\n      };\n    });\n\n    return {\n      users: sanitizedUsers,\n      total,\n      page,\n      limit,\n      totalPages: Math.ceil(total / limit),\n    };\n  }\n\n  async findOne(id: number): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id },\n      relations: ['defaultRole', 'roles'],\n    });\n\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    // Remove password and format response\n\n    const { password, ...userWithoutPassword } = user;\n    return {\n      ...userWithoutPassword,\n      roles: user.roles.map((role) => role.name),\n      defaultRole: user.defaultRole?.name || 'citizen',\n    };\n  }\n\n  // Admin-only update method\n  async adminUpdate(\n    id: number,\n    updateUserDto: AdminUpdateUserDto,\n  ): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id },\n      relations: ['roles'],\n    });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    const {\n      email,\n\n      username,\n\n      firstName,\n\n      middleName,\n\n      lastName,\n\n      nameExtension,\n\n      contactNumber,\n\n      roleIds,\n\n      defaultRoleId,\n    } = updateUserDto;\n\n    // Check email uniqueness if being updated\n    if (email && email !== user.email) {\n      const existingUser = await this.usersRepository.findOne({\n        where: { email },\n      });\n      if (existingUser) {\n        throw new ConflictException('Email already exists');\n      }\n    }\n\n    // Check username uniqueness if being updated\n    if (username && username !== user.username) {\n      const existingUser = await this.usersRepository.findOne({\n        where: { username },\n      });\n      if (existingUser) {\n        throw new ConflictException('Username already exists');\n      }\n    }\n\n    // Update fields\n    const updateData: any = {};\n\n    if (email) updateData.email = email;\n    if (username) updateData.username = username;\n    if (firstName) updateData.firstName = firstName;\n    if (lastName) updateData.lastName = lastName;\n    if (contactNumber) updateData.contactNumber = contactNumber;\n\n    // Handle optional fields\n    if (middleName !== undefined) updateData.middleName = middleName;\n    if (nameExtension !== undefined) updateData.nameExtension = nameExtension;\n    if (defaultRoleId !== undefined) updateData.defaultRoleId = defaultRoleId;\n\n    // Update name if name components changed\n    if (\n      firstName ||\n      middleName !== undefined ||\n      lastName ||\n      nameExtension !== undefined\n    ) {\n      const newFirstName = firstName || user.firstName;\n      const newMiddleName =\n        middleName !== undefined ? middleName : user.middleName;\n      const newLastName = lastName || user.lastName;\n      const newNameExtension =\n        nameExtension !== undefined ? nameExtension : user.nameExtension;\n\n      updateData.name = `${newFirstName} ${newMiddleName ? newMiddleName + ' ' : ''}${newLastName}${newNameExtension ? ' ' + newNameExtension : ''}`;\n    }\n\n    await this.usersRepository.update(id, updateData);\n\n    // Update roles if provided\n    if (roleIds !== undefined) {\n      // Remove existing roles and assign new ones\n      await this.usersRepository\n        .createQueryBuilder()\n        .relation(User, 'roles')\n        .of(id)\n        .remove(user.roles);\n\n      if (roleIds.length > 0) {\n        await this.rolesService.assignRolesToUser(id, roleIds);\n      }\n    }\n\n    return this.findOne(id);\n  }\n\n  async remove(id: number): Promise {\n    const user = await this.usersRepository.findOne({ where: { id } });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    await this.usersRepository.delete(id);\n    return { message: `User with ID ${id} has been deleted` };\n  }\n\n  async updateStatus(id: number, isActive: boolean): Promise {\n    const user = await this.usersRepository.findOne({ where: { id } });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    await this.usersRepository.update(id, { isActive });\n    return this.findOne(id);\n  }\n\n  async getStats(): Promise {\n    const totalUsers = await this.usersRepository.count();\n    const activeUsers = await this.usersRepository.count({\n      where: { isActive: true },\n    });\n    const inactiveUsers = totalUsers - activeUsers;\n\n    // Get user count by role\n    const roleStats = await this.usersRepository\n      .createQueryBuilder('user')\n      .leftJoin('user.roles', 'role')\n      .select('role.name', 'roleName')\n      .addSelect('COUNT(user.id)', 'count')\n      .groupBy('role.name')\n      .getRawMany();\n\n    const usersByRole = roleStats.map((stat) => ({\n      roleName: stat.roleName || 'No Role',\n\n      count: parseInt(stat.count),\n    }));\n\n    // Get recent users (last 10)\n    const recentUsers = await this.usersRepository.find({\n      order: { createdAt: 'DESC' },\n      take: 10,\n      relations: ['defaultRole', 'roles'],\n    });\n\n    const sanitizedRecentUsers = recentUsers.map((user) => {\n      const { password, ...userWithoutPassword } = user;\n      return userWithoutPassword as Omit;\n    });\n\n    return {\n      totalUsers,\n      activeUsers,\n      inactiveUsers,\n      usersByRole,\n      recentUsers: sanitizedRecentUsers,\n    };\n  }\n\n  async findByEmail(email: string): Promise {\n    return this.usersRepository.findOne({\n      where: { email },\n      relations: ['defaultRole', 'roles'],\n    });\n  }\n\n  async findByUsername(username: string): Promise {\n    return this.usersRepository.findOne({\n      where: { username },\n      relations: ['defaultRole', 'roles'],\n    });\n  }\n\n  async create(createUserDto: CreateUserDto) {\n    const {\n      email,\n      username,\n      password,\n      firstName,\n      middleName,\n      lastName,\n      nameExtension,\n      contactNumber,\n      name,\n      roleIds,\n      defaultRoleId,\n    } = createUserDto;\n\n    // Generate full name if not provided\n    const fullName =\n      name ||\n      `${firstName} ${middleName ? middleName + ' ' : ''}${lastName}${nameExtension ? ' ' + nameExtension : ''}`;\n\n    // Check if user already exists\n    const existingUserByEmail = await this.usersRepository.findOne({\n      where: { email },\n    });\n    if (existingUserByEmail) {\n      throw new ConflictException('Email already exists');\n    }\n\n    if (username) {\n      const existingUserByUsername = await this.usersRepository.findOne({\n        where: { username },\n      });\n      if (existingUserByUsername) {\n        throw new ConflictException('Username already exists');\n      }\n    }\n\n    try {\n      // Create user\n      const user = this.usersRepository.create({\n        email,\n        username,\n        password, // Should be hashed by the caller\n        firstName,\n        middleName,\n        lastName,\n        nameExtension,\n        contactNumber,\n        name: fullName,\n        defaultRoleId: defaultRoleId || 4, // Default to citizen\n      });\n\n      await this.usersRepository.save(user);\n\n      // Assign roles if provided\n      if (roleIds && roleIds.length > 0) {\n        await this.rolesService.assignRolesToUser(user.id, roleIds);\n      }\n\n      return user;\n    } catch (error) {\n      this.logger.error('Error creating user:', error);\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VerifyOtpDto.html":{"url":"classes/VerifyOtpDto.html","title":"class - VerifyOtpDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VerifyOtpDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/otp.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                otp\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                purpose\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Email address', example: 'user@example.com', format: 'email'})@IsEmail({}, {message: 'Please provide a valid email address'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/otp.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        otp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: '6-digit OTP code', example: '123456', minLength: 6, maxLength: 6, pattern: '^[0-9]{6}$'})@IsString()@Length(6, 6, {message: 'OTP must be exactly 6 digits'})@Matches(/^[0-9]{6}$/, {message: 'OTP must contain only numbers'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/otp.dto.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        purpose\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'verification'\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Purpose of the OTP verification', example: 'verification', enum: undefined, default: 'verification'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/otp.dto.ts:59\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsString,\n  IsOptional,\n  Length,\n  Matches,\n} from 'class-validator';\n\nexport class SendOtpDto {\n  @ApiProperty({\n    description: 'Email address to send OTP to',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiPropertyOptional({\n    description: 'Purpose of the OTP',\n    example: 'verification',\n    enum: ['verification', 'password_reset'],\n    default: 'verification',\n  })\n  @IsString()\n  @IsOptional()\n  purpose?: string = 'verification';\n}\n\nexport class VerifyOtpDto {\n  @ApiProperty({\n    description: 'Email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    description: '6-digit OTP code',\n    example: '123456',\n    minLength: 6,\n    maxLength: 6,\n    pattern: '^[0-9]{6}$',\n  })\n  @IsString()\n  @Length(6, 6, { message: 'OTP must be exactly 6 digits' })\n  @Matches(/^[0-9]{6}$/, { message: 'OTP must contain only numbers' })\n  otp: string;\n\n  @ApiPropertyOptional({\n    description: 'Purpose of the OTP verification',\n    example: 'verification',\n    enum: ['verification', 'password_reset'],\n    default: 'verification',\n  })\n  @IsString()\n  @IsOptional()\n  purpose?: string = 'verification';\n}\n\nexport class ForgotPasswordDto {\n  @ApiProperty({\n    description: 'Registered email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n}\n\nexport class ResetPasswordDto {\n  @ApiProperty({\n    description: 'Email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    description: '6-digit OTP code received via email',\n    example: '123456',\n    minLength: 6,\n    maxLength: 6,\n    pattern: '^[0-9]{6}$',\n  })\n  @IsString()\n  @Length(6, 6, { message: 'OTP must be exactly 6 digits' })\n  @Matches(/^[0-9]{6}$/, { message: 'OTP must contain only numbers' })\n  otp: string;\n\n  @ApiProperty({\n    description: 'New password (must meet complexity requirements)',\n    example: 'NewSecure123!',\n    minLength: 8,\n    pattern:\n      '^(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)(?=.*[@$!%*?&])[A-Za-z\\\\d@$!%*?&]{8,}$',\n  })\n  @IsString()\n  @Length(8, 100, { message: 'Password must be at least 8 characters long' })\n  @Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/, {\n    message:\n      'Password must contain uppercase, lowercase, numbers, and special characters',\n  })\n  newPassword: string;\n}\n\nexport class TestOtpDto {\n  @ApiProperty({\n    description: 'Email address for testing OTP generation',\n    example: 'test@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n}\n\nexport class ApplicationNotificationDto {\n  @ApiProperty({\n    description: 'Recipient email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    description: 'Application ID',\n    example: 'APP-001',\n  })\n  @IsString()\n  applicationId: string;\n\n  @ApiProperty({\n    description: 'Application status',\n    example: 'Approved',\n    enum: ['Pending', 'Approved', 'Rejected', 'Ready for Pickup'],\n  })\n  @IsString()\n  status: string;\n\n  @ApiProperty({\n    description: 'Type of application',\n    example: 'Birth Certificate',\n  })\n  @IsString()\n  applicationType: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/24)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            interface\n            LockoutData\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/auth/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/decorators/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/user.decorator.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/auth/decorators/user.decorator.ts\n            \n            variable\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/appointment-notification.dto.ts\n            \n            class\n            AppointmentNotificationDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/auth/dto/otp.dto.ts\n            \n            class\n            ApplicationNotificationDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/dto/otp.dto.ts\n            \n            class\n            ForgotPasswordDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dto/otp.dto.ts\n            \n            class\n            ResetPasswordDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/dto/otp.dto.ts\n            \n            class\n            SendOtpDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/otp.dto.ts\n            \n            class\n            TestOtpDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dto/otp.dto.ts\n            \n            class\n            VerifyOtpDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/dto/queue-notification.dto.ts\n            \n            class\n            QueueNotificationDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/auth/dto/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                9 %\n                (1/11)\n            \n        \n        \n            \n                \n                src/auth/dto/update-user.dto.ts\n            \n            class\n            AdminUpdateUserDto\n            \n                8 %\n                (1/12)\n            \n        \n        \n            \n                \n                src/auth/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                10 %\n                (1/10)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/roles.guard.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            interface\n            AuthenticatedUser\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            interface\n            JwtPayload\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/config/database.config.ts\n            \n            variable\n            databaseConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/entities/otp.entity.ts\n            \n            entity\n            OTP\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            overrideConsoleInProduction\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            seedDatabaseIfNeeded\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            testMinIOConnection\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/announcement/announcement.controller.ts\n            \n            controller\n            AnnouncementController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/announcement/announcement.service.ts\n            \n            injectable\n            AnnouncementService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/announcement/dto/create-announcement.dto.ts\n            \n            class\n            CreateAnnouncementDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/announcement/dto/update-announcement.dto.ts\n            \n            class\n            UpdateAnnouncementDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/announcement/entities/announcement.entity.ts\n            \n            entity\n            Announcement\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/appointment/appointment.controller.ts\n            \n            controller\n            AppointmentController\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/modules/appointment/appointment.service.ts\n            \n            injectable\n            AppointmentService\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/modules/appointment/dto/create-appointment.dto.ts\n            \n            class\n            CreateAppointmentDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/modules/appointment/dto/update-appointment.dto.ts\n            \n            class\n            UpdateAppointmentDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/appointment/entities/appointment.entity.ts\n            \n            entity\n            Appointment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/counter/entities/counter.entity.ts\n            \n            entity\n            Counter\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/document-applications/document-applications.controller.ts\n            \n            controller\n            DocumentApplicationsController\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/modules/document-applications/document-applications.service.ts\n            \n            injectable\n            DocumentApplicationsService\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/modules/document-applications/dto/create-document-application.dto.ts\n            \n            class\n            CreateDocumentApplicationDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/document-applications/dto/update-document-application.dto.ts\n            \n            class\n            UpdateDocumentApplicationDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/document-applications/entities/application-status-history.entity.ts\n            \n            entity\n            ApplicationStatusHistory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/document-applications/entities/application-status-history.entity.ts\n            \n            class\n            ApplicationStatusHistory\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/modules/document-applications/entities/document-application.entity.ts\n            \n            entity\n            DocumentApplication\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/document-applications/entities/document-application.entity.ts\n            \n            class\n            DocumentApplication\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/modules/document-applications/entities/document-file.entity.ts\n            \n            entity\n            DocumentFile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/document-applications/entities/document-file.entity.ts\n            \n            class\n            DocumentFile\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/document-applications/services/minio.service.ts\n            \n            injectable\n            MinioService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/modules/queue/dto/create-queue.dto.ts\n            \n            class\n            CreateQueueDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/queue/dto/update-queue.dto.ts\n            \n            class\n            UpdateQueueDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/queue/entities/queue-details.entity.ts\n            \n            entity\n            QueueDetails\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/queue/entities/queue.entity.ts\n            \n            entity\n            Queue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/queue/queue-scheduler.service.ts\n            \n            injectable\n            QueueSchedulerService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/queue/queue.controller.ts\n            \n            controller\n            QueueController\n            \n                0 %\n                (0/24)\n            \n        \n        \n            \n                \n                src/modules/queue/queue.gateway.ts\n            \n            class\n            QueueGateway\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/modules/queue/queue.service.ts\n            \n            injectable\n            QueueService\n            \n                0 %\n                (0/19)\n            \n        \n        \n            \n                \n                src/modules/queue/queues.controller.ts\n            \n            controller\n            QueuesController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/queue/queues.controller.ts\n            \n            interface\n            QueueDetails\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/roles/entities/role.entity.ts\n            \n            entity\n            Role\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/roles/roles.controller.ts\n            \n            controller\n            RolesController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/roles/roles.service.ts\n            \n            injectable\n            RolesService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/services/email.service.ts\n            \n            injectable\n            EmailService\n            \n                50 %\n                (8/16)\n            \n        \n        \n            \n                \n                src/services/minio.service.ts\n            \n            injectable\n            MinioService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/services/otp.service.ts\n            \n            injectable\n            OTPService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/users/dto/paginated-users-response.dto.ts\n            \n            class\n            PaginatedUsersResponseDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/dto/update-user-status.dto.ts\n            \n            class\n            UpdateUserStatusDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dto/user-query.dto.ts\n            \n            class\n            UserQueryDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dto/user-response.dto.ts\n            \n            class\n            UserResponseDto\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/users/dto/user-stats-response.dto.ts\n            \n            class\n            UsersByRoleDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dto/user-stats-response.dto.ts\n            \n            class\n            UserStatsResponseDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            interface\n            FindAllOptions\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            interface\n            UserStats\n            \n                0 %\n                (0/6)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^11.1.0\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.1.0\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/passport : ^11.0.5\n        \n            @nestjs/platform-express : ^11.1.0\n        \n            @nestjs/platform-socket.io : ^11.1.0\n        \n            @nestjs/schedule : ^6.0.0\n        \n            @nestjs/swagger : ^11.2.0\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            @nestjs/websockets : ^11.1.0\n        \n            @types/nodemailer : ^6.4.17\n        \n            @types/qrcode : ^1.5.5\n        \n            @types/speakeasy : ^2.0.10\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            compression : ^1.8.0\n        \n            date-fns : ^4.1.0\n        \n            dotenv : ^16.5.0\n        \n            helmet : ^8.1.0\n        \n            minio : ^8.0.5\n        \n            multer : ^2.0.0\n        \n            mysql2 : ^3.14.1\n        \n            nodemailer : ^7.0.4\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            qrcode : ^1.5.4\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.2\n        \n            socket.io : ^4.8.1\n        \n            speakeasy : ^2.0.0\n        \n            swagger-ui-express : ^5.0.1\n        \n            typeorm : ^0.3.22\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ApplicationStatus   (src/.../document-application.entity.ts)\n                        \n                        \n                            ApplicationType   (src/.../document-application.entity.ts)\n                        \n                        \n                            AppointmentStatus   (src/.../appointment.entity.ts)\n                        \n                        \n                            CounterStatus   (src/.../counter.entity.ts)\n                        \n                        \n                            QueueStatus   (src/.../queue.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/document-applications/entities/document-application.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        ApplicationStatus\n                    \n                \n                        \n                            \n                                 PENDING\n                            \n                        \n                        \n                            \n                                Value : Pending\n                            \n                        \n                        \n                            \n                                 PROCESSING\n                            \n                        \n                        \n                            \n                                Value : Processing\n                            \n                        \n                        \n                            \n                                 APPROVED\n                            \n                        \n                        \n                            \n                                Value : Approved\n                            \n                        \n                        \n                            \n                                 REJECTED\n                            \n                        \n                        \n                            \n                                Value : Rejected\n                            \n                        \n                        \n                            \n                                 DECLINE\n                            \n                        \n                        \n                            \n                                Value : Decline\n                            \n                        \n                        \n                            \n                                 READY_FOR_PICKUP\n                            \n                        \n                        \n                            \n                                Value : Ready for Pickup\n                            \n                        \n                        \n                            \n                                 REQUIRES_ADDITIONAL_INFO\n                            \n                        \n                        \n                            \n                                Value : Requires Additional Info\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ApplicationType\n                    \n                \n                        \n                            \n                                 BIRTH_CERTIFICATE\n                            \n                        \n                        \n                            \n                                Value : Birth Certificate\n                            \n                        \n                        \n                            \n                                 MARRIAGE_CERTIFICATE\n                            \n                        \n                        \n                            \n                                Value : Marriage Certificate\n                            \n                        \n                        \n                            \n                                 MARRIAGE_LICENSE\n                            \n                        \n                        \n                            \n                                Value : Marriage License\n                            \n                        \n                        \n                            \n                                 DEATH_CERTIFICATE\n                            \n                        \n                        \n                            \n                                Value : Death Certificate\n                            \n                        \n                        \n                            \n                                 BUSINESS_PERMIT\n                            \n                        \n                        \n                            \n                                Value : Business Permit\n                            \n                        \n            \n        \n\n    src/modules/appointment/entities/appointment.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        AppointmentStatus\n                    \n                \n                        \n                            \n                                 PENDING\n                            \n                        \n                        \n                            \n                                Value : pending\n                            \n                        \n                        \n                            \n                                 CONFIRMED\n                            \n                        \n                        \n                            \n                                Value : confirmed\n                            \n                        \n                        \n                            \n                                 COMPLETED\n                            \n                        \n                        \n                            \n                                Value : completed\n                            \n                        \n                        \n                            \n                                 CANCELLED\n                            \n                        \n                        \n                            \n                                Value : cancelled\n                            \n                        \n            \n        \n\n    src/modules/counter/entities/counter.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        CounterStatus\n                    \n                \n                        \n                            \n                                 ACTIVE\n                            \n                        \n                        \n                            \n                                Value : active\n                            \n                        \n                        \n                            \n                                 INACTIVE\n                            \n                        \n                        \n                            \n                                Value : inactive\n                            \n                        \n            \n        \n\n    src/modules/queue/entities/queue.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        QueueStatus\n                    \n                \n                        \n                            \n                                 PENDING\n                            \n                        \n                        \n                            \n                                Value : pending\n                            \n                        \n                        \n                            \n                                 SERVING\n                            \n                        \n                        \n                            \n                                Value : serving\n                            \n                        \n                        \n                            \n                                 COMPLETED\n                            \n                        \n                        \n                            \n                                Value : completed\n                            \n                        \n                        \n                            \n                                 CANCELLED\n                            \n                        \n                        \n                            \n                                Value : cancelled\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            overrideConsoleInProduction   (src/.../main.ts)\n                        \n                        \n                            seedDatabaseIfNeeded   (src/.../main.ts)\n                        \n                        \n                            testMinIOConnection   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        overrideConsoleInProduction\n                        \n                    \n                \n            \n            \n                \noverrideConsoleInProduction()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seedDatabaseIfNeeded\n                        \n                    \n                \n            \n            \n                \nseedDatabaseIfNeeded(dataSource: DataSource)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dataSource\n                                            \n                                                        DataSource\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        testMinIOConnection\n                        \n                    \n                \n            \n            \n                \ntestMinIOConnection()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\nBulak Smart Connect - Backend API\nMunicipal Services Digital Platform Backend\n\n\n\n  \n    \n  \n  \n    \n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AnnouncementModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppointmentModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DocumentApplicationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        QueueModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RolesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AnnouncementModule\n\n\n\ncluster_AnnouncementModule_exports\n\n\n\ncluster_AnnouncementModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppointmentModule\n\n\n\ncluster_AppointmentModule_exports\n\n\n\ncluster_AppointmentModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_DocumentApplicationsModule\n\n\n\ncluster_DocumentApplicationsModule_exports\n\n\n\ncluster_DocumentApplicationsModule_providers\n\n\n\ncluster_QueueModule\n\n\n\ncluster_QueueModule_exports\n\n\n\ncluster_QueueModule_providers\n\n\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_exports\n\n\n\ncluster_RolesModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAnnouncementService \n\nAnnouncementService \n\n\n\nAnnouncementModule\n\nAnnouncementModule\n\nAnnouncementService  -->\n\nAnnouncementModule->AnnouncementService \n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAnnouncementModule->AppModule\n\n\n\n\n\nAnnouncementService\n\nAnnouncementService\n\nAnnouncementModule -->\n\nAnnouncementService->AnnouncementModule\n\n\n\n\n\nAppointmentModule\n\nAppointmentModule\n\nAppModule -->\n\nAppointmentModule->AppModule\n\n\n\n\n\nAppointmentService \n\nAppointmentService \n\nAppointmentService  -->\n\nAppointmentModule->AppointmentService \n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nEmailService \n\nEmailService \n\nEmailService  -->\n\nAuthModule->EmailService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nOTPService \n\nOTPService \n\nOTPService  -->\n\nAuthModule->OTPService \n\n\n\n\n\nDocumentApplicationsModule\n\nDocumentApplicationsModule\n\nAppModule -->\n\nDocumentApplicationsModule->AppModule\n\n\n\n\n\nDocumentApplicationsService \n\nDocumentApplicationsService \n\nDocumentApplicationsService  -->\n\nDocumentApplicationsModule->DocumentApplicationsService \n\n\n\n\n\nMinioService \n\nMinioService \n\nMinioService  -->\n\nDocumentApplicationsModule->MinioService \n\n\n\n\n\nQueueModule\n\nQueueModule\n\nAppModule -->\n\nQueueModule->AppModule\n\n\n\n\n\nQueueGateway \n\nQueueGateway \n\nQueueGateway  -->\n\nQueueModule->QueueGateway \n\n\n\n\n\nQueueSchedulerService \n\nQueueSchedulerService \n\nQueueSchedulerService  -->\n\nQueueModule->QueueSchedulerService \n\n\n\n\n\nQueueService \n\nQueueService \n\nQueueService  -->\n\nQueueModule->QueueService \n\n\n\n\n\nRolesModule\n\nRolesModule\n\nAuthModule -->\n\nRolesModule->AuthModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nRolesModule->UsersModule\n\n\n\nAppModule -->\n\nRolesModule->AppModule\n\n\n\n\n\nRolesService \n\nRolesService \n\nRolesService  -->\n\nRolesModule->RolesService \n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nAuthModule -->\n\nEmailService->AuthModule\n\n\n\nAppModule -->\n\nEmailService->AppModule\n\n\n\n\n\nOTPService\n\nOTPService\n\nAuthModule -->\n\nOTPService->AuthModule\n\n\n\nAppModule -->\n\nOTPService->AppModule\n\n\n\n\n\nAppointmentService\n\nAppointmentService\n\nAppointmentModule -->\n\nAppointmentService->AppointmentModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nDocumentApplicationsService\n\nDocumentApplicationsService\n\nDocumentApplicationsModule -->\n\nDocumentApplicationsService->DocumentApplicationsModule\n\n\n\n\n\nMinioService\n\nMinioService\n\nDocumentApplicationsModule -->\n\nMinioService->DocumentApplicationsModule\n\n\n\n\n\nQueueSchedulerService\n\nQueueSchedulerService\n\nQueueModule -->\n\nQueueSchedulerService->QueueModule\n\n\n\n\n\nQueueService\n\nQueueService\n\nQueueModule -->\n\nQueueService->QueueModule\n\n\n\n\n\nRolesService\n\nRolesService\n\nRolesModule -->\n\nRolesService->RolesModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        8 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    9 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    11 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    15 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    31 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    9 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            databaseConfig   (src/.../database.config.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                        \n                            User   (src/.../user.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/database.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        databaseConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TypeOrmModuleOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'mysql',\n  host: process.env.DB_HOST || 'localhost',\n  port: parseInt(process.env.DB_PORT || '3306'),\n  username: process.env.DB_USERNAME || 'root',\n  password: process.env.DB_PASSWORD || '',\n  database: process.env.DB_NAME || 'bulak_smart_connect',\n  entities: [__dirname + '/../**/*.entity{.ts,.js}'],\n  synchronize: process.env.NODE_ENV !== 'production',\n  logging: process.env.NODE_ENV !== 'production',\n}\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: string[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        User\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext): AuthenticatedUser => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.user;\n  },\n)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
