var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.359,1,2.237]],["body/controllers/AppController.html",[0,2.168,1,3.567,2,1.868,3,0.369,4,0.325,5,0.325,6,3.633,7,0.462,8,2.017,9,5.184,10,6.148,11,1.635,12,0.028,13,0.984,14,4.309,15,2.017,16,0.838,17,5.382,18,4.309,19,2.96,20,0.461,21,0.788,22,3.228,23,3.633,24,0.369,25,0.088,26,1.868,27,2.856,28,1.524,29,4.309,30,4.309,31,0.021,32,0.021]],["title/modules/AppModule.html",[33,1.265,34,2.237]],["body/modules/AppModule.html",[1,3.086,2,1.718,3,0.235,4,0.207,5,0.207,12,0.028,16,0.565,20,0.529,21,0.5,22,3.105,23,2.309,24,0.235,25,0.056,31,0.016,32,0.016,33,1.745,34,4.259,35,1.28,36,1.385,37,1.646,38,1.646,39,1.385,40,2.8,41,1.506,42,2.309,43,2.309,44,2.309,45,3.394,46,3.394,47,3.105,48,3.394,49,2.382,50,1.646,51,1.506,52,2.738,53,2.8,54,3.962,55,3.383,56,1.646,57,1.646,58,1.187,59,2.026,60,2.738,61,2.738,62,2.738,63,2.738,64,2.309,65,2.738,66,2.738,67,2.738,68,1.875,69,2.738,70,1.815,71,2.309,72,0.357,73,2.309,74,2.309,75,2.738,76,2.309,77,2.738,78,1.646,79,2.738,80,1.506,81,2.738,82,2.309,83,2.738,84,1.28,85,2.309,86,2.309,87,3.341,88,3.962,89,3.383,90,2.626,91,2.738,92,4.566,93,2.309,94,2.738,95,1.646,96,2.738,97,2.738,98,2.738,99,2.738,100,2.179,101,2.738,102,2.738,103,2.738,104,2.005,105,5.103,106,3.776,107,3.341,108,1.026,109,2.738,110,3.962,111,3.962,112,2.309,113,2.738,114,2.309,115,2.738,116,2.356,117,2.738,118,2.738,119,2.932,120,3.962,121,2.738,122,2.738,123,2.738,124,2.738,125,2.738,126,2.738,127,2.738,128,2.738,129,2.738,130,2.738,131,2.738,132,2.738]],["title/injectables/AppService.html",[22,1.856,133,0.891]],["body/injectables/AppService.html",[3,0.41,4,0.361,5,0.361,7,0.513,8,2.15,9,5.374,12,0.027,13,0.874,15,1.793,16,0.819,20,0.41,21,0.874,22,3.155,24,0.41,25,0.097,28,1.355,31,0.023,32,0.023,133,1.515,134,2.42,135,4.033,136,4.783,137,4.783,138,4.783]],["title/controllers/AuthController.html",[0,1.359,139,2.029]],["body/controllers/AuthController.html",[0,1.225,2,1.319,3,0.261,4,0.23,5,0.23,7,0.326,8,1.601,11,1.499,12,0.028,13,0.902,15,1.85,16,0.609,20,0.483,21,0.556,24,0.261,25,0.062,26,1.319,28,1.398,31,0.017,32,0.017,72,0.644,95,1.829,104,2.958,108,1.14,116,1.539,139,2.568,140,2.251,141,2.251,142,3.042,143,3.602,144,3.16,145,3.602,146,3.042,147,2.709,148,3.042,149,3.042,150,1.988,151,1.303,152,1.398,153,3.602,154,2.565,155,3.302,156,3.602,157,3.042,158,2.831,159,2.565,160,3.302,161,3.602,162,3.042,163,2.251,164,2.251,165,2.251,166,3.272,167,2.568,168,2.498,169,2.251,170,2.251,171,2.251,172,1.673,173,2.565,174,2.251,175,1.225,176,1.539,177,1.051,178,1.829,179,1.297,180,1.539,181,1.062,182,2.565,183,2.565,184,2.251,185,2.565,186,2.016,187,2.831,188,2.565,189,2.251,190,3.652,191,2.161,192,1.851,193,2.565,194,2.565,195,2.565,196,2.565,197,2.565,198,2.565,199,2.565,200,2.565,201,2.565,202,2.565,203,2.565,204,2.251,205,2.565,206,2.565,207,2.251,208,2.349,209,1.829,210,2.565,211,2.565,212,2.565,213,3.602,214,1.422,215,1.829,216,1.14,217,2.565]],["title/modules/AuthModule.html",[33,1.265,45,2.029]],["body/modules/AuthModule.html",[2,2.011,3,0.294,4,0.259,5,0.259,12,0.028,20,0.554,21,0.627,24,0.294,25,0.07,28,0.971,31,0.018,32,0.018,33,1.971,35,1.604,36,1.736,37,2.062,38,2.062,39,1.736,40,3.161,41,2.891,45,3.951,47,3.336,49,2.789,50,2.062,51,1.886,53,2.789,55,3.485,56,2.062,57,2.062,58,1.487,64,2.892,70,2.273,71,2.892,139,3.161,168,3.325,169,2.538,177,0.844,218,2.892,219,3.43,220,2.892,221,2.892,222,3.614,223,3.43,224,3.43,225,2.538,226,4.64,227,2.062,228,1.886,229,3.43,230,3.43,231,3.43,232,3.43,233,2.273,234,3.43,235,3.43,236,3.43,237,3.43,238,3.43,239,3.43,240,3.43,241,2.892]],["title/injectables/AuthService.html",[133,0.891,168,1.708]],["body/injectables/AuthService.html",[3,0.159,4,0.14,5,0.14,7,0.199,8,1.104,12,0.028,13,0.886,15,1.707,16,0.42,20,0.466,21,0.339,24,0.159,25,0.038,28,1.182,31,0.012,32,0.012,58,0.803,72,0.632,78,2.916,80,3.127,104,2.877,106,2.179,108,2.23,112,3.09,116,2.573,133,0.777,134,0.938,143,2.483,144,2.179,145,2.483,150,1.953,151,1.393,152,1.373,154,2.483,155,3.063,158,2.429,159,2.483,160,2.667,167,1.114,168,1.49,170,1.371,171,1.371,177,1.423,178,1.114,179,0.894,180,2.877,181,1.591,184,1.371,186,1.228,187,2.767,189,1.371,190,3.089,191,2.454,192,1.974,208,1.019,209,2.203,215,1.77,225,1.371,228,1.019,242,1.563,243,3.019,244,2.945,245,2.945,246,1.619,247,1.853,248,2.767,249,5.085,250,2.573,251,1.853,252,2.483,253,1.853,254,1.853,255,0.866,256,1.853,257,1.853,258,1.114,259,1.853,260,1.853,261,2.945,262,1.853,263,1.853,264,1.853,265,1.371,266,0.803,267,2.483,268,1.853,269,1.563,270,3.52,271,4.175,272,1.853,273,3.664,274,3.664,275,2.711,276,3.09,277,3.09,278,3.664,279,3.664,280,3.664,281,3.664,282,1.853,283,1.371,284,3.09,285,1.853,286,1.371,287,1.853,288,1.853,289,1.853,290,1.853,291,1.853,292,2.945,293,3.664,294,1.853,295,1.853,296,1.853,297,1.853,298,4.175,299,1.853,300,2.945,301,1.371,302,1.853,303,1.853,304,3.089,305,1.853,306,1.853,307,1.563,308,1.853,309,2.945,310,2.945,311,2.945,312,1.853,313,2.945,314,2.945,315,1.853,316,1.619,317,2.711,318,1.019,319,2.179,320,1.371,321,1.563,322,1.563,323,1.853,324,2.483,325,2.483,326,1.853,327,1.853,328,3.09,329,2.945,330,1.853,331,2.945,332,1.853,333,2.945,334,1.853,335,1.853,336,1.853]],["title/entities/Counter.html",[337,1.265,338,1.708]],["body/entities/Counter.html",[3,0.295,4,0.259,5,0.259,7,0.369,11,1.789,12,0.028,13,1.077,16,0.663,19,2.895,20,0.398,24,0.398,25,0.07,31,0.018,32,0.018,68,2.12,72,0.792,84,1.608,151,1.555,179,1.712,208,3.101,214,1.608,216,1.973,266,1.49,337,1.289,338,2.351,339,2.544,340,1.316,341,4.439,342,5.264,343,2.631,344,2.899,345,4.647,346,3.39,347,2.544,348,5.638,349,3.918,350,4.647,351,3.438,352,2.279,353,3.438,354,3.165,355,3.438,356,3.541,357,3.438,358,4.358,359,2.899,360,4.966,361,2.794,362,3.438,363,3.918,364,3.438,365,3.438,366,3.918,367,3.918,368,3.438,369,3.438]],["title/classes/CreateQueueDto.html",[25,0.069,370,2.029]],["body/classes/CreateQueueDto.html",[3,0.284,4,0.25,5,0.25,7,0.355,11,1.928,12,0.027,13,1.16,16,0.953,20,0.284,24,0.284,25,0.092,31,0.018,32,0.018,72,0.828,152,1.819,179,1.377,255,2.416,258,2.725,316,2.841,318,2.841,340,1.284,370,2.725,371,1.823,372,5.415,373,2.453,374,3.823,375,3.823,376,3.823,377,3.823,378,3.823,379,3.823,380,3.823,381,3.315,382,4.109,383,3.315,384,3.315,385,3.315,386,3.315,387,3.315,388,3.315,389,3.315,390,3.315,391,4.548,392,3.315,393,4.148,394,4.303,395,4.533,396,1.993]],["title/injectables/JwtAuthGuard.html",[133,0.891,172,1.856]],["body/injectables/JwtAuthGuard.html",[3,0.422,4,0.372,5,0.372,12,0.027,20,0.5,21,0.9,24,0.422,25,0.1,31,0.023,32,0.023,133,1.542,134,2.493,172,3.211,176,2.955,227,2.962,397,4.154,398,4.154,399,5.839,400,4.926]],["title/interfaces/JwtPayload.html",[175,1.359,401,2.237]],["body/interfaces/JwtPayload.html",[3,0.302,4,0.266,5,0.266,7,0.377,12,0.028,13,0.643,16,0.872,20,0.488,21,0.643,24,0.302,25,0.072,26,1.526,28,0.997,31,0.019,32,0.019,55,3.531,56,2.116,72,0.695,100,1.936,108,2.134,133,1.246,152,1.337,167,2.116,175,1.418,176,1.781,178,3.569,179,1.618,180,3.093,181,2.134,191,2.389,192,2.046,214,1.646,215,2.116,222,1.936,227,2.116,233,2.333,255,2.208,301,3.942,304,2.604,340,1.337,401,3.773,402,2.333,403,2.604,404,2.968,405,2.968,406,2.968,407,2.604,408,2.968,409,4.492,410,2.968,411,2.968,412,2.968,413,2.333,414,2.968,415,2.968,416,2.968,417,2.968,418,2.968,419,2.968,420,2.968,421,2.968,422,2.968,423,2.968,424,2.968,425,2.968,426,2.968]],["title/injectables/JwtStrategy.html",[133,0.891,222,1.856]],["body/injectables/JwtStrategy.html",[3,0.297,4,0.261,5,0.261,7,0.371,8,1.75,12,0.028,13,0.966,15,1.298,16,0.666,20,0.485,21,0.633,24,0.297,25,0.07,26,1.501,28,0.98,31,0.018,32,0.018,55,4.032,56,2.081,72,0.609,100,1.904,108,2.119,133,1.233,134,1.752,150,1.88,151,1.233,152,1.322,167,2.081,175,1.394,176,2.363,178,2.807,179,1.051,180,2.673,181,1.845,191,2.363,192,2.024,214,1.619,215,2.081,222,2.568,227,2.081,233,2.295,246,1.904,255,2.183,301,4.184,304,2.562,324,3.937,401,4.032,403,2.562,404,2.919,405,2.919,406,2.919,407,2.562,408,3.937,409,4.455,410,2.919,411,2.919,412,2.919,413,2.295,414,2.919,415,2.919,416,2.919,417,2.919,418,2.919,419,3.937,420,2.919,421,2.919,422,2.919,423,2.919,424,2.919,425,2.919,426,2.919,427,3.462,428,3.462,429,3.462]],["title/classes/LoginDto.html",[25,0.069,155,1.856]],["body/classes/LoginDto.html",[3,0.378,4,0.333,5,0.333,7,0.473,11,1.659,12,0.027,13,0.998,16,0.885,20,0.378,24,0.378,25,0.121,31,0.022,32,0.022,72,0.712,80,3.263,144,4.041,155,3.263,177,1.343,340,1.547,371,2.426,382,3.265,393,3.62,394,4.587,396,2.652,430,3.72,431,2.652,432,4.606,433,5.933,434,4.412,435,4.412]],["title/entities/Queue.html",[337,1.265,343,1.463]],["body/entities/Queue.html",[3,0.246,4,0.217,5,0.217,7,0.308,11,1.867,12,0.028,13,1.124,16,0.745,19,2.633,20,0.41,24,0.352,25,0.058,31,0.016,32,0.016,68,2.512,72,0.813,84,1.345,151,1.458,179,1.585,214,1.345,216,1.794,266,1.247,337,1.078,338,3.111,340,1.163,343,2.075,344,2.425,346,3.632,352,3.46,354,2.878,356,3.451,359,2.425,360,4.655,361,2.468,363,3.462,436,2.128,437,4.036,438,4.036,439,3.542,440,4.655,441,4.036,442,3.542,443,3.863,444,4.105,445,2.876,446,3.462,447,2.876,448,4.105,449,2.876,450,2.425,451,3.462,452,2.876,453,2.871,454,2.876,455,4.105,456,2.876,457,4.105,458,2.876,459,2.876,460,4.105,461,3.038,462,2.876,463,3.319,464,2.876,465,4.105,466,3.462,467,2.128,468,2.128,469,3.038,470,3.038,471,3.038,472,3.038,473,2.876,474,2.425]],["title/controllers/QueueController.html",[0,1.359,475,2.237]],["body/controllers/QueueController.html",[0,0.88,2,0.947,3,0.187,4,0.165,5,0.165,7,0.234,8,1.255,11,1.889,12,0.028,13,1.137,15,2.332,16,0.913,19,1.841,20,0.422,21,0.399,24,0.187,25,0.044,26,0.947,27,1.448,28,1.762,31,0.013,32,0.013,72,0.774,95,2.013,141,1.616,150,2.303,151,1.541,152,1.619,163,3.012,164,2.477,216,2.09,275,2.477,343,0.947,370,3.122,442,2.477,463,2.744,475,2.219,476,1.842,477,2.823,478,2.823,479,2.823,480,3.025,481,2.823,482,2.823,483,4.564,484,2.219,485,4.564,486,4.564,487,3.849,488,2.823,489,2.823,490,3.849,491,2.477,492,2.184,493,2.477,494,3.348,495,2.184,496,1.842,497,3.348,498,2.184,499,2.477,500,1.842,501,2.184,502,2.184,503,1.842,504,3.348,505,2.184,506,1.842,507,3.348,508,2.184,509,3.348,510,2.184,511,1.448,512,2.823,513,2.184,514,3.348,515,2.184,516,3.348,517,2.184,518,3.348,519,2.184,520,2.184,521,3.348,522,2.184,523,2.184,524,3.348,525,2.184,526,3.348,527,2.184,528,1.842,529,3.353,530,3.348,531,2.184,532,2.184,533,1.842,534,3.348,535,1.616,536,2.184,537,2.184,538,2.184,539,2.06,540,1.616,541,1.842,542,2.823,543,1.842,544,1.448,545,2.184,546,2.184,547,2.184,548,2.184,549,2.184,550,2.184,551,2.184,552,2.184,553,2.184,554,2.184,555,1.842,556,2.184,557,2.184,558,2.184,559,2.184,560,2.184,561,2.184,562,2.184,563,2.184,564,2.184,565,2.184,566,2.184,567,2.184,568,2.184,569,2.184]],["title/entities/QueueDetails.html",[337,1.265,453,1.856]],["body/entities/QueueDetails.html",[3,0.214,4,0.188,5,0.188,7,0.267,11,1.902,12,0.027,13,1.145,16,0.902,20,0.378,24,0.214,25,0.051,31,0.015,32,0.015,68,2.389,72,0.817,84,1.166,90,2.452,100,2.035,151,1.617,177,1.391,179,1.658,208,2.035,216,1.653,228,1.371,255,2.063,258,2.224,266,1.081,316,2.426,318,2.426,337,0.935,340,1.048,343,2.571,346,3.566,347,1.845,349,4.115,352,3.932,354,2.652,356,3.682,361,2.224,364,3.264,374,3.264,375,3.264,376,3.264,377,3.264,378,3.264,379,3.264,453,2.035,570,5.33,571,2.102,572,3.264,573,2.102,574,2.493,575,3.7,576,2.493,577,3.12,578,2.493,579,2.493,580,3.7,581,2.493,582,3.12,583,2.493,584,3.7,585,2.493,586,3.7,587,2.493,588,3.12,589,3.7,590,4.88,591,2.493,592,4.88,593,3.7,594,2.493,595,2.493,596,3.7,597,2.493,598,4.115,599,3.7,600,2.493,601,2.493,602,3.72,603,2.493,604,2.493,605,2.493]],["title/classes/QueueGateway.html",[25,0.069,606,1.856]],["body/classes/QueueGateway.html",[3,0.201,4,0.177,5,0.177,7,0.252,8,1.327,11,1.439,12,0.028,13,1.087,15,2.078,20,0.406,21,0.43,24,0.201,25,0.048,27,3.141,28,1.206,31,0.014,32,0.014,68,0.947,70,1.558,72,0.761,89,1.558,90,1.558,95,3.431,104,2.954,108,1.327,116,2.398,150,2.298,151,1.507,152,1.616,158,2.823,179,1.915,192,1.535,243,3.141,246,1.947,307,1.982,338,1.189,340,1.003,343,1.019,361,1.413,371,1.293,491,2.62,499,3.507,539,2.806,540,1.739,572,4.103,606,1.947,607,1.982,608,2.62,609,4.259,610,4.259,611,4.74,612,4.505,613,3.54,614,3.54,615,3.54,616,3.54,617,3.54,618,3.54,619,3.54,620,2.351,621,3.54,622,1.739,623,3.54,624,2.351,625,4.259,626,3.54,627,6.354,628,2.351,629,5.084,630,5.706,631,3.54,632,2.351,633,3.54,634,3.54,635,2.351,636,3.54,637,3.54,638,2.351,639,3.54,640,3.54,641,2.351,642,3.54,643,2.351,644,3.54,645,2.351,646,3.54,647,2.351,648,1.982,649,1.982,650,1.739,651,2.351,652,2.351,653,2.351,654,2.351,655,1.982,656,3.54,657,2.351,658,3.54,659,2.351,660,2.351,661,3.54,662,2.351,663,2.985,664,2.351,665,2.351,666,2.351,667,1.982,668,1.982,669,1.982,670,2.351,671,2.351,672,2.351,673,3.54,674,2.351,675,2.351]],["title/modules/QueueModule.html",[33,1.265,46,2.029]],["body/modules/QueueModule.html",[2,2.164,3,0.328,4,0.289,5,0.289,12,0.027,20,0.554,21,0.7,24,0.328,25,0.078,31,0.02,32,0.02,33,2.082,35,1.791,36,1.938,37,2.302,38,2.302,39,1.938,40,3.339,41,3.054,46,3.886,49,3.001,50,2.302,51,2.106,53,2.302,57,2.302,58,1.66,338,2.526,343,1.66,453,2.745,467,2.834,468,2.834,475,3.681,535,2.834,539,3.381,540,2.834,544,2.538,606,3.555,650,3.694,676,3.229,677,3.229,678,3.229,679,3.829,680,2.834,681,3.229,682,3.829,683,3.229,684,3.229,685,3.829]],["title/injectables/QueueService.html",[133,0.891,539,1.708]],["body/injectables/QueueService.html",[3,0.092,4,0.081,5,0.081,7,0.115,8,0.701,12,0.028,13,0.913,15,1.825,16,0.599,19,2.517,20,0.377,21,0.197,24,0.092,25,0.022,28,1.474,31,0.007,32,0.007,58,0.466,68,0.753,70,0.713,72,0.597,90,1.645,100,0.592,104,3.134,108,2.235,116,2.978,119,1.384,133,0.494,134,0.544,150,1.843,151,1.286,152,1.296,158,3.227,177,0.265,179,1.714,186,0.713,187,2.228,191,1.501,192,1.907,207,0.796,208,1.632,209,0.647,214,1.161,216,1.485,243,1.966,246,1.029,248,3.033,255,1.571,265,0.796,266,0.811,275,1.836,276,0.907,283,1.836,286,2.195,316,0.592,318,0.592,321,0.907,325,0.907,328,1.577,338,2.226,341,1.577,343,2.627,358,1.384,370,2.021,374,0.796,375,0.796,376,2.728,377,0.796,378,0.796,379,0.796,437,1.577,439,2.728,440,3.539,441,0.907,442,2.487,443,2.487,446,2.093,453,1.365,463,1.784,467,0.796,468,0.796,469,2.195,470,0.796,471,1.836,472,0.796,474,2.834,477,1.577,478,1.577,479,2.502,480,1.966,481,1.577,482,1.577,484,1.24,487,2.502,488,1.577,489,1.577,490,2.502,491,2.487,496,1.577,499,2.195,500,1.577,503,1.577,506,1.577,511,1.24,528,1.577,529,2.382,535,0.796,539,0.947,541,0.907,542,1.577,543,0.907,544,0.713,572,2.932,606,2.308,650,0.796,655,0.907,663,3.341,668,2.093,669,0.907,680,0.796,681,2.093,683,0.907,684,0.907,686,0.907,687,1.076,688,2.482,689,2.482,690,1.076,691,1.871,692,1.871,693,1.076,694,1.076,695,1.076,696,1.076,697,1.076,698,1.076,699,1.076,700,1.076,701,1.871,702,1.076,703,1.871,704,1.076,705,1.076,706,1.076,707,0.907,708,1.076,709,1.076,710,1.076,711,1.076,712,0.907,713,2.482,714,1.871,715,1.871,716,1.076,717,1.076,718,1.076,719,3.709,720,1.871,721,2.482,722,2.482,723,1.871,724,1.076,725,1.076,726,1.076,727,1.871,728,3.962,729,1.076,730,1.076,731,1.871,732,1.076,733,1.076,734,1.076,735,1.076,736,1.871,737,0.796,738,0.907,739,1.076,740,1.871,741,1.076,742,1.076,743,2.482,744,1.871,745,1.076,746,3.687,747,0.907,748,1.076,749,2.482,750,1.076,751,1.076,752,2.967,753,1.871,754,1.076,755,1.871,756,1.076,757,1.076,758,1.076,759,1.076,760,1.076,761,1.076,762,1.871,763,1.076,764,1.076,765,1.076,766,1.076,767,1.076,768,1.076,769,1.076,770,1.076,771,1.076,772,1.076,773,1.076,774,1.076,775,1.076,776,1.076,777,2.967,778,1.076,779,2.967,780,2.482,781,2.482,782,2.482,783,2.482,784,1.871,785,1.871,786,1.871,787,1.076,788,1.076,789,1.076,790,2.482,791,1.871,792,1.076,793,2.967,794,1.076,795,1.871,796,1.076,797,2.482,798,1.076,799,1.076,800,1.871,801,1.076,802,1.076,803,1.076,804,1.076,805,1.076,806,1.076,807,1.076,808,0.907,809,1.076,810,1.076,811,1.076,812,1.076,813,1.076,814,1.076,815,1.076,816,0.907,817,3.361,818,1.871,819,2.482,820,1.871,821,0.907,822,1.076,823,1.076,824,1.871,825,1.076,826,1.871,827,1.076,828,1.871,829,1.076,830,1.871,831,1.076,832,1.076,833,1.076,834,1.076,835,1.076,836,1.076,837,1.076,838,1.076,839,1.871,840,1.871,841,1.871,842,1.871,843,1.871,844,1.076,845,1.076,846,1.076,847,1.076,848,1.076,849,1.076,850,1.076,851,1.076,852,2.482,853,1.871,854,1.871,855,1.076,856,1.871,857,1.076,858,1.076,859,1.076,860,1.076,861,1.076,862,1.076,863,1.076,864,1.076]],["title/classes/RegisterDto.html",[25,0.069,160,1.856]],["body/classes/RegisterDto.html",[3,0.285,4,0.251,5,0.251,7,0.356,11,1.929,12,0.027,13,1.161,16,0.961,20,0.285,24,0.285,25,0.105,31,0.018,32,0.018,72,0.828,78,3.109,80,2.844,151,1.366,152,1.773,160,2.844,177,1.117,180,2.617,316,2.844,317,3.827,318,2.844,319,3.827,320,3.827,340,1.286,371,1.827,380,3.827,382,3.827,391,4.113,393,4.258,394,4.446,396,1.997,431,1.997,432,3.828,865,2.801,866,4.54,867,3.322,868,3.322,869,3.322,870,3.322,871,3.322,872,3.322,873,3.322,874,3.322,875,3.322,876,3.322,877,3.322,878,4.54,879,3.322,880,3.322]],["title/interfaces/RequestWithUser.html",[147,1.708,175,1.359]],["body/interfaces/RequestWithUser.html",[0,1.369,3,0.291,4,0.256,5,0.256,7,0.364,12,0.028,16,0.658,20,0.503,21,0.621,24,0.291,25,0.069,26,1.473,28,1.482,31,0.018,32,0.018,72,0.682,95,2.043,104,2.333,108,1.274,116,1.72,139,2.043,140,2.515,147,2.648,153,2.866,155,3.086,156,2.866,160,3.086,161,2.866,163,2.515,164,2.515,165,2.515,166,3.719,167,2.772,168,2.648,169,2.515,170,2.515,171,2.515,172,1.869,173,2.866,174,2.515,175,1.369,176,2.333,177,1.443,178,2.043,179,1.4,180,1.72,181,1.187,182,2.866,183,2.866,184,2.515,185,2.866,186,2.252,187,3.056,188,2.866,189,2.515,190,3.872,191,2.333,192,1.999,193,2.866,194,2.866,195,2.866,196,2.866,197,2.866,198,2.866,199,2.866,200,2.866,201,2.866,202,2.866,203,2.866,204,2.515,205,2.866,206,2.866,207,2.515,208,2.536,209,2.043,210,2.866,211,2.866,212,2.866,213,3.888,214,1.589,215,2.043,216,1.274,217,2.866,340,1.306,402,2.252,493,3.412]],["title/interfaces/RequestWithUser-1.html",[147,1.43,175,1.138,737,2.091]],["body/interfaces/RequestWithUser-1.html",[3,0.34,4,0.299,5,0.299,7,0.425,12,0.028,16,0.565,20,0.484,21,0.724,24,0.34,25,0.081,26,1.718,28,1.445,31,0.02,32,0.02,68,1.596,72,0.736,108,2.116,133,1.348,147,2.583,152,1.445,166,3.952,175,2.056,176,2.583,177,1.518,181,1.384,258,2.382,340,1.445,402,2.627,493,3.777,608,2.932,881,2.932,882,4.304,883,4.304,884,4.761,885,2.932,886,3.383,887,3.341,888,3.341,889,2.382,890,3.341,891,4.304,892,3.341,893,3.341,894,3.341,895,3.341,896,3.341,897,3.341,898,3.341,899,3.341]],["title/entities/Role.html",[337,1.265,900,1.856]],["body/entities/Role.html",[3,0.339,4,0.298,5,0.298,7,0.424,11,1.809,12,0.027,13,1.089,16,0.85,20,0.437,24,0.339,25,0.08,31,0.02,32,0.02,68,2.399,72,0.777,84,1.848,100,2.802,151,1.489,177,1.552,179,1.547,216,2.113,228,2.173,266,1.713,337,1.481,340,1.443,346,3.39,354,3.39,356,3.39,431,3.39,461,2.924,573,3.333,747,4.755,900,2.802,901,3.333,902,3.952,903,3.952,904,3.333,905,3.952,906,3.952,907,4.296,908,3.952,909,4.296,910,3.952]],["title/controllers/RolesController.html",[0,1.359,911,2.237]],["body/controllers/RolesController.html",[0,1.481,2,1.594,3,0.315,4,0.277,5,0.277,7,0.394,8,1.822,11,1.653,12,0.027,13,0.995,15,2.041,16,0.883,20,0.516,21,0.672,24,0.315,25,0.075,26,1.594,27,2.437,28,1.542,31,0.019,32,0.019,72,0.634,141,2.721,150,1.958,151,1.283,152,1.377,165,2.721,172,2.022,174,2.721,181,1.698,204,2.721,216,1.822,250,2.755,255,2.273,480,3.84,484,3.222,511,2.437,512,3.101,533,3.101,555,3.101,889,2.922,911,3.222,912,3.101,913,4.099,914,3.677,915,6.189,916,3.677,917,3.677,918,3.677,919,3.101,920,3.677,921,3.677,922,3.101,923,3.677,924,3.677,925,3.677,926,3.677,927,5.445,928,3.677,929,3.677,930,3.677,931,3.677,932,3.677]],["title/guards/RolesGuard.html",[889,2.029,933,2.497]],["body/guards/RolesGuard.html",[3,0.326,4,0.287,5,0.287,7,0.409,8,1.865,12,0.028,13,0.909,15,1.428,16,0.544,20,0.475,21,0.696,24,0.326,25,0.077,26,1.651,28,1.409,31,0.02,32,0.02,68,1.534,72,0.649,108,2.077,133,1.314,147,1.928,150,2.004,151,1.314,152,1.409,166,3.672,175,2.004,176,1.928,177,1.224,181,1.33,246,2.095,258,2.991,608,2.819,881,2.819,882,4.953,883,4.953,884,5.27,885,2.819,886,3.298,887,3.212,888,3.212,889,2.991,890,4.195,891,4.195,892,3.212,893,3.212,894,3.212,895,3.212,896,3.212,897,3.212,898,3.212,899,3.212,934,3.81,935,3.81,936,3.81,937,3.81,938,3.81]],["title/modules/RolesModule.html",[33,1.265,47,1.856]],["body/modules/RolesModule.html",[2,2.267,3,0.353,4,0.311,5,0.311,12,0.027,20,0.547,21,0.753,24,0.353,25,0.084,31,0.021,32,0.021,33,2.155,35,1.925,36,2.083,37,2.475,38,2.475,39,2.083,40,3.456,41,3.161,47,3.565,49,3.144,50,2.475,51,2.264,53,2.475,57,2.475,58,1.785,177,1.286,228,2.264,250,3.416,900,2.264,911,3.81,922,3.472,939,3.472,940,3.472,941,3.472,942,4.117,943,3.472,944,4.117,945,4.117]],["title/injectables/RolesService.html",[133,0.891,250,1.708]],["body/injectables/RolesService.html",[3,0.227,4,0.2,5,0.2,7,0.284,8,1.45,12,0.028,13,1.02,15,2.003,16,0.652,20,0.458,21,0.484,24,0.227,25,0.054,28,1.423,31,0.015,32,0.015,58,1.149,72,0.697,104,3.257,106,4.531,108,2.003,116,2.824,133,1.022,134,1.341,150,2.153,151,1.591,152,1.514,177,1.418,179,1.906,181,1.949,191,2.313,192,1.981,216,2.092,228,1.457,243,2.564,246,2.128,248,3.82,250,1.958,252,3.854,255,2.35,265,1.961,266,1.149,269,2.234,270,3.262,283,2.863,286,3.382,480,3.331,484,2.564,511,2.564,707,2.234,816,3.262,900,3.17,907,3.262,913,3.262,919,3.262,943,2.234,946,2.234,947,3.869,948,3.869,949,2.65,950,2.65,951,3.869,952,3.869,953,4.57,954,2.65,955,2.65,956,3.869,957,2.65,958,2.65,959,2.65,960,2.65,961,2.65,962,3.869,963,3.869,964,2.65,965,2.65,966,2.65,967,2.65]],["title/classes/UpdateQueueDto.html",[25,0.069,529,2.029]],["body/classes/UpdateQueueDto.html",[3,0.377,4,0.332,5,0.332,7,0.472,11,1.656,12,0.027,13,0.996,16,0.778,19,3.258,20,0.467,24,0.377,25,0.111,31,0.022,32,0.022,72,0.711,152,1.754,340,1.544,371,2.419,373,3.255,380,3.255,391,4.384,393,3.614,396,2.645,438,4.996,463,3.562,529,3.278,544,2.916,968,4.996,969,4.399,970,4.399,971,4.399,972,4.399,973,4.399]],["title/entities/User.html",[177,0.83,337,1.265]],["body/entities/User.html",[3,0.218,4,0.192,5,0.192,7,0.272,11,1.926,12,0.027,13,1.159,16,0.929,20,0.321,24,0.218,25,0.052,31,0.015,32,0.015,68,2.532,72,0.827,78,2.681,80,2.453,84,1.188,151,1.675,177,0.923,179,1.496,180,2.257,181,1.558,214,1.754,216,1.969,266,1.101,284,3.761,316,2.453,317,3.3,318,2.453,319,3.3,320,3.3,337,0.952,340,1.062,346,3.645,347,1.88,352,3.644,354,2.681,356,3.78,364,3.644,439,3.3,443,2.776,450,2.142,451,3.163,461,2.776,466,3.163,577,3.163,582,3.163,588,2.142,598,2.142,602,3.163,900,3.128,904,3.163,909,3.163,974,2.142,975,4.46,976,3.751,977,2.54,978,2.54,979,4.925,980,2.54,981,2.54,982,2.54,983,2.54,984,2.54,985,2.54,986,3.751,987,2.54,988,2.54,989,3.751,990,2.54,991,2.54,992,2.54,993,3.751,994,3.751,995,2.54,996,2.54,997,3.751,998,2.54,999,2.54,1000,2.54,1001,2.54,1002,2.54,1003,3.751,1004,2.54]],["title/modules/UsersModule.html",[33,1.265,48,2.029]],["body/modules/UsersModule.html",[3,0.415,4,0.366,5,0.366,12,0.027,20,0.53,21,0.886,24,0.415,25,0.099,31,0.023,32,0.023,33,2.167,35,2.266,41,2.665,48,3.476,53,2.913,57,3.476,58,2.1,177,1.192,241,4.086,1005,4.845,1006,4.845]],["title/coverage.html",[1007,3.395]],["body/coverage.html",[0,2.206,1,2.125,5,0.242,6,2.704,12,0.027,22,1.764,25,0.117,31,0.018,32,0.018,39,1.623,59,2.373,72,0.418,133,1.569,135,2.704,139,1.928,140,3.279,147,2.242,155,1.764,160,1.764,168,1.623,172,1.764,175,2.045,177,0.789,181,1.12,192,1.39,222,1.764,242,2.704,250,1.623,337,2.154,338,1.623,339,2.373,343,1.39,370,1.928,372,2.704,373,3.279,397,2.704,398,2.704,401,2.125,403,3.279,430,2.704,436,2.373,453,1.764,475,2.125,476,2.704,529,1.928,539,1.623,570,2.704,571,2.704,606,1.764,607,2.704,686,2.704,719,5.78,865,2.704,881,3.279,886,2.125,889,1.928,900,1.764,901,2.704,911,2.125,912,2.704,933,2.373,946,2.704,968,2.704,974,2.704,1007,2.373,1008,2.704,1009,3.207,1010,3.207,1011,5.477,1012,5.077,1013,5.077,1014,4.431,1015,3.736,1016,5.077,1017,6.444,1018,3.207,1019,3.207,1020,3.207,1021,3.207,1022,2.704,1023,3.736,1024,4.431,1025,2.704,1026,3.207,1027,3.207,1028,3.207,1029,3.207,1030,3.207,1031,3.207]],["title/dependencies.html",[36,2.051,1032,2.383]],["body/dependencies.html",[12,0.028,21,0.802,25,0.089,31,0.022,32,0.022,36,2.219,56,2.637,58,1.901,225,3.245,227,2.637,233,2.907,266,1.901,267,3.698,396,2.637,407,4.027,648,3.698,649,4.589,885,3.245,1033,6.361,1034,4.386,1035,5.442,1036,4.386,1037,5.442,1038,4.386,1039,4.386,1040,4.386,1041,4.386,1042,4.386,1043,4.386,1044,4.386,1045,4.386,1046,4.386,1047,4.386,1048,4.386,1049,4.386,1050,4.386,1051,4.386,1052,4.386,1053,4.386]],["title/miscellaneous/enumerations.html",[1054,1.554,1055,3.418]],["body/miscellaneous/enumerations.html",[7,0.513,12,0.027,31,0.023,32,0.023,339,3.539,358,4.245,366,4.838,367,4.838,436,3.539,463,3.449,469,4.245,470,4.245,471,4.245,472,4.245,622,4.897,1054,2.63,1055,4.033,1056,4.783,1057,4.783]],["title/miscellaneous/functions.html",[1054,1.554,1058,3.418]],["body/miscellaneous/functions.html",[7,0.539,12,0.025,31,0.023,32,0.023,39,3.176,72,0.656,150,2.024,151,1.327,152,1.424,1023,4.238,1025,4.983,1054,2.764,1058,4.238,1059,5.909,1060,5.027,1061,6.277]],["title/index.html",[7,0.303,1062,2.826,1063,2.826]],["body/index.html",[4,0.217,12,0.026,31,0.016,32,0.016,51,3.157,89,2.721,92,2.425,114,2.425,119,3.542,209,3.451,248,1.906,277,2.425,322,2.425,431,1.729,612,2.425,667,2.425,680,2.128,712,2.425,738,2.425,808,2.425,821,4.402,1007,2.128,1008,3.462,1064,2.876,1065,2.876,1066,4.787,1067,4.105,1068,2.876,1069,2.876,1070,2.876,1071,4.105,1072,4.787,1073,2.876,1074,5.221,1075,2.876,1076,5.221,1077,6.041,1078,2.876,1079,5.908,1080,2.876,1081,2.876,1082,4.105,1083,2.876,1084,2.876,1085,4.787,1086,2.876,1087,4.105,1088,2.876,1089,2.876,1090,2.876,1091,2.876,1092,2.876,1093,5.221,1094,6.041,1095,5.74,1096,4.105,1097,2.876,1098,2.876,1099,2.876,1100,2.876,1101,2.876,1102,4.105,1103,2.876,1104,4.105,1105,2.876,1106,4.105,1107,5.74,1108,5.221,1109,2.876,1110,4.105,1111,2.876,1112,2.876,1113,2.876,1114,2.876,1115,5.221,1116,2.876,1117,2.876,1118,2.876,1119,4.105,1120,2.876,1121,2.876,1122,2.876,1123,2.876,1124,2.876,1125,4.105,1126,2.876,1127,2.876,1128,2.876,1129,4.105,1130,2.876,1131,2.876,1132,4.402,1133,4.105,1134,2.876,1135,2.876,1136,2.876,1137,2.876,1138,2.876,1139,2.876,1140,2.876,1141,2.876,1142,4.105,1143,2.876,1144,2.425,1145,2.876,1146,2.876,1147,2.876,1148,2.876,1149,2.876,1150,4.105,1151,2.876,1152,2.876,1153,2.876,1154,2.876,1155,4.105,1156,2.876,1157,2.876,1158,2.876,1159,4.105,1160,4.105,1161,2.876,1162,2.876,1163,2.876,1164,2.876,1165,2.876,1166,2.876,1167,2.876,1168,2.876,1169,2.876,1170,2.876,1171,2.876,1172,2.425,1173,2.876,1174,2.876,1175,2.876,1176,2.876,1177,2.876,1178,2.876,1179,2.425]],["title/modules.html",[35,2.146]],["body/modules.html",[12,0.023,31,0.023,32,0.023,34,3.276,35,2.311,45,2.972,46,2.972,47,2.718,48,2.972,1132,5.433,1144,4.168,1180,6.443,1181,6.443,1182,6.576,1183,4.943]],["title/overview.html",[1184,3.869]],["body/overview.html",[2,1.594,12,0.027,22,2.994,31,0.019,32,0.019,33,1.378,34,4.403,35,1.719,36,1.861,37,2.211,38,2.211,39,1.861,40,2.211,41,2.022,42,3.101,43,3.101,44,3.101,45,3.967,46,3.795,47,3.471,48,3.274,49,2.922,50,2.211,51,2.022,84,1.719,134,1.861,168,3.194,218,3.101,220,3.101,221,3.101,222,3.471,250,3.194,371,2.022,402,2.437,539,3.194,606,3.186,676,3.101,677,3.101,678,3.101,737,2.721,933,2.721,939,3.101,940,3.101,941,3.101,1184,3.101,1185,5.445,1186,3.677,1187,3.677,1188,3.677]],["title/properties.html",[340,1.148,1032,2.383]],["body/properties.html",[12,0.027,31,0.024,32,0.024,340,1.468,431,3.117,1172,4.372,1179,4.372,1189,5.185,1190,5.185,1191,5.185]],["title/miscellaneous/variables.html",[413,2.687,1054,1.554]],["body/miscellaneous/variables.html",[7,0.459,12,0.027,16,0.765,31,0.021,32,0.021,59,3.968,72,0.763,73,3.612,74,3.612,76,3.612,78,2.576,80,2.356,82,3.612,84,2.003,85,3.612,86,3.612,87,3.612,89,3.555,93,3.612,107,4.522,181,2.206,361,3.52,413,2.84,622,4.332,886,3.555,1015,3.612,1022,3.612,1054,2.356,1192,4.284,1193,5.363,1194,4.284,1195,4.284,1196,4.284,1197,4.284,1198,4.284,1199,4.284,1200,4.284,1201,4.284,1202,4.284,1203,4.284,1204,4.284]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":719,"title":{},"body":{"injectables/QueueService.html":{},"coverage.html":{}}}],["0')}${string(today.getdate()).padstart(2",{"_index":718,"title":{},"body":{"injectables/QueueService.html":{}}}],["0.0.1",{"_index":1190,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1040,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":1049,"title":{},"body":{"dependencies.html":{}}}],["0.3.22",{"_index":1053,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":1045,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1017,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1026,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1028,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":1029,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":1027,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1012,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1011,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1013,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1014,"title":{},"body":{"coverage.html":{}}}],["08:00",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["1",{"_index":737,"title":{"interfaces/RequestWithUser-1.html":{}},"body":{"injectables/QueueService.html":{},"overview.html":{}}}],["1).padstart(2",{"_index":717,"title":{},"body":{"injectables/QueueService.html":{}}}],["1).padstart(4",{"_index":733,"title":{},"body":{"injectables/QueueService.html":{}}}],["1/10",{"_index":1021,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":1019,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":1020,"title":{},"body":{"coverage.html":{}}}],["11.0.0",{"_index":1035,"title":{},"body":{"dependencies.html":{}}}],["11.0.5",{"_index":1036,"title":{},"body":{"dependencies.html":{}}}],["11.1.0",{"_index":1033,"title":{},"body":{"dependencies.html":{}}}],["15",{"_index":736,"title":{},"body":{"injectables/QueueService.html":{}}}],["16.5.0",{"_index":1042,"title":{},"body":{"dependencies.html":{}}}],["1d",{"_index":240,"title":{},"body":{"modules/AuthModule.html":{}}}],["3",{"_index":1188,"title":{},"body":{"overview.html":{}}}],["3.14.1",{"_index":1044,"title":{},"body":{"dependencies.html":{}}}],["33",{"_index":1018,"title":{},"body":{"coverage.html":{}}}],["3306",{"_index":1198,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4",{"_index":1186,"title":{},"body":{"overview.html":{}}}],["4.0.1",{"_index":1046,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":1034,"title":{},"body":{"dependencies.html":{}}}],["4.8.1",{"_index":1052,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":1185,"title":{},"body":{"overview.html":{}}}],["5.1.1",{"_index":1039,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":1187,"title":{},"body":{"overview.html":{}}}],["60000",{"_index":860,"title":{},"body":{"injectables/QueueService.html":{}}}],["7.8.2",{"_index":1051,"title":{},"body":{"dependencies.html":{}}}],["__dirname",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["__password",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{}}}],["access_token",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{}}}],["action",{"_index":779,"title":{},"body":{"injectables/QueueService.html":{}}}],["active",{"_index":366,"title":{},"body":{"entities/Counter.html":{},"miscellaneous/enumerations.html":{}}}],["add",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{}}}],["addcounter",{"_index":477,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["addcounter(@body",{"_index":567,"title":{},"body":{"controllers/QueueController.html":{}}}],["addcounter(data",{"_index":492,"title":{},"body":{"controllers/QueueController.html":{}}}],["addcounter(name",{"_index":692,"title":{},"body":{"injectables/QueueService.html":{}}}],["address",{"_index":374,"title":{},"body":{"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{}}}],["afterconnect",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["ahead",{"_index":802,"title":{},"body":{"injectables/QueueService.html":{}}}],["allowing",{"_index":1120,"title":{},"body":{"index.html":{}}}],["already",{"_index":331,"title":{},"body":{"injectables/AuthService.html":{}}}],["amazing",{"_index":1165,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":1095,"title":{},"body":{"index.html":{}}}],["applications",{"_index":1071,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":34,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appointment_type",{"_index":575,"title":{},"body":{"entities/QueueDetails.html":{}}}],["appointmenttype",{"_index":375,"title":{},"body":{"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{}}}],["appservice",{"_index":22,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array.isarray(payload.roles",{"_index":425,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["asc",{"_index":782,"title":{},"body":{"injectables/QueueService.html":{}}}],["assign",{"_index":966,"title":{},"body":{"injectables/RolesService.html":{}}}],["assignrolestouser",{"_index":947,"title":{},"body":{"injectables/RolesService.html":{}}}],["assignrolestouser(userid",{"_index":952,"title":{},"body":{"injectables/RolesService.html":{}}}],["associated",{"_index":829,"title":{},"body":{"injectables/QueueService.html":{}}}],["async",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{}}}],["attempt",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":229,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{}}}],["auth.guard.ts",{"_index":398,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/RequestWithUser.html":{}}}],["auth/auth.module",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/decorators/roles.decorator",{"_index":925,"title":{},"body":{"controllers/RolesController.html":{}}}],["auth/guards/jwt",{"_index":923,"title":{},"body":{"controllers/RolesController.html":{}}}],["auth/guards/roles.guard",{"_index":924,"title":{},"body":{"controllers/RolesController.html":{}}}],["authcontroller",{"_index":139,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["authguard",{"_index":400,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":399,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":45,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1172,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":168,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":1183,"title":{},"body":{"modules.html":{}}}],["average",{"_index":847,"title":{},"body":{"injectables/QueueService.html":{}}}],["averagewaittime",{"_index":852,"title":{},"body":{"injectables/QueueService.html":{}}}],["avoid",{"_index":772,"title":{},"body":{"injectables/QueueService.html":{}}}],["await",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{}}}],["aws",{"_index":1110,"title":{},"body":{"index.html":{}}}],["backers",{"_index":1166,"title":{},"body":{"index.html":{}}}],["backward",{"_index":1001,"title":{},"body":{"entities/User.html":{}}}],["badrequestexception",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('invalid",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{}}}],["based",{"_index":712,"title":{},"body":{"injectables/QueueService.html":{},"index.html":{}}}],["bcrypt",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["bcrypt.compare",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.compare(logindto.password",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{}}}],["before",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["beforeconnect",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["below",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["board",{"_index":1158,"title":{},"body":{"index.html":{}}}],["body",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QueueController.html":{},"interfaces/RequestWithUser.html":{}}}],["boolean",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["bootstrap",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["break",{"_index":806,"title":{},"body":{"injectables/QueueService.html":{}}}],["browse",{"_index":1182,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1180,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1067,"title":{},"body":{"index.html":{}}}],["bulak_smart_connect",{"_index":1203,"title":{},"body":{"miscellaneous/variables.html":{}}}],["calculate",{"_index":846,"title":{},"body":{"injectables/QueueService.html":{}}}],["called",{"_index":830,"title":{},"body":{"injectables/QueueService.html":{}}}],["callnext",{"_index":478,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["callnext(@param('counterid",{"_index":565,"title":{},"body":{"controllers/QueueController.html":{}}}],["callnext(counterid",{"_index":496,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["canactivate",{"_index":882,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":890,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["cancelled",{"_index":472,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{},"miscellaneous/enumerations.html":{}}}],["cancelledcount",{"_index":842,"title":{},"body":{"injectables/QueueService.html":{}}}],["cascade",{"_index":605,"title":{},"body":{"entities/QueueDetails.html":{}}}],["cascade'})@joincolumn({name",{"_index":591,"title":{},"body":{"entities/QueueDetails.html":{}}}],["catch",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["channel",{"_index":1135,"title":{},"body":{"index.html":{}}}],["check",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"index.html":{}}}],["checks",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["citizen",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{}}}],["class",{"_index":25,"title":{"classes/CreateQueueDto.html":{},"classes/LoginDto.html":{},"classes/QueueGateway.html":{},"classes/RegisterDto.html":{},"classes/UpdateQueueDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":371,"title":{},"body":{"classes/CreateQueueDto.html":{},"classes/LoginDto.html":{},"classes/QueueGateway.html":{},"classes/RegisterDto.html":{},"classes/UpdateQueueDto.html":{},"overview.html":{}}}],["clicks",{"_index":1119,"title":{},"body":{"index.html":{}}}],["client",{"_index":629,"title":{},"body":{"classes/QueueGateway.html":{}}}],["client.id",{"_index":658,"title":{},"body":{"classes/QueueGateway.html":{}}}],["client.join(`counter_${counterid",{"_index":665,"title":{},"body":{"classes/QueueGateway.html":{}}}],["client.join(`queue_${queueid",{"_index":660,"title":{},"body":{"classes/QueueGateway.html":{}}}],["clients",{"_index":668,"title":{},"body":{"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["cloud",{"_index":1105,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":218,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":220,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":219,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":221,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_queuemodule",{"_index":676,"title":{},"body":{"modules/QueueModule.html":{},"overview.html":{}}}],["cluster_queuemodule_exports",{"_index":678,"title":{},"body":{"modules/QueueModule.html":{},"overview.html":{}}}],["cluster_queuemodule_providers",{"_index":677,"title":{},"body":{"modules/QueueModule.html":{},"overview.html":{}}}],["cluster_rolesmodule",{"_index":939,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_rolesmodule_exports",{"_index":940,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_rolesmodule_providers",{"_index":941,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["code",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["column",{"_index":356,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["column({name",{"_index":352,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["column({nullable",{"_index":573,"title":{},"body":{"entities/QueueDetails.html":{},"entities/Role.html":{}}}],["column({type",{"_index":359,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{}}}],["column({unique",{"_index":904,"title":{},"body":{"entities/Role.html":{},"entities/User.html":{}}}],["come",{"_index":1126,"title":{},"body":{"index.html":{}}}],["compatibility",{"_index":1002,"title":{},"body":{"entities/User.html":{}}}],["completed",{"_index":471,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{},"miscellaneous/enumerations.html":{}}}],["completed_at",{"_index":444,"title":{},"body":{"entities/Queue.html":{}}}],["completedat",{"_index":437,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{}}}],["completedcount",{"_index":841,"title":{},"body":{"injectables/QueueService.html":{}}}],["completedqueues",{"_index":849,"title":{},"body":{"injectables/QueueService.html":{}}}],["completedqueues.length",{"_index":853,"title":{},"body":{"injectables/QueueService.html":{}}}],["completedqueues.reduce((total",{"_index":855,"title":{},"body":{"injectables/QueueService.html":{}}}],["completion",{"_index":792,"title":{},"body":{"injectables/QueueService.html":{}}}],["config",{"_index":235,"title":{},"body":{"modules/AuthModule.html":{}}}],["config.get('jwt_secret",{"_index":237,"title":{},"body":{"modules/AuthModule.html":{}}}],["config/database.config",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('db_host",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_name",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_password",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_port",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_username",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('jwt_secret",{"_index":410,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('node_env",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["conflictexception",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{}}}],["conflictexception('email",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{}}}],["conflictexception('username",{"_index":334,"title":{},"body":{"injectables/AuthService.html":{}}}],["conn",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["conn.query(\"set",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["conn.query('set",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["connected",{"_index":657,"title":{},"body":{"classes/QueueGateway.html":{}}}],["connection",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["consistent",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["console.error('login",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('comparing",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('generated",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('login",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["console.log('password",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('register",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["console.log('stored",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('user",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{}}}],["const",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{}}}],["constructor",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{}}}],["constructor(configservice",{"_index":427,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(private",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{}}}],["constructor(queuerepository",{"_index":687,"title":{},"body":{"injectables/QueueService.html":{}}}],["constructor(queueservice",{"_index":620,"title":{},"body":{"classes/QueueGateway.html":{}}}],["constructor(reflector",{"_index":935,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(rolesrepository",{"_index":949,"title":{},"body":{"injectables/RolesService.html":{}}}],["constructor(usersrepository",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["contact_number",{"_index":976,"title":{},"body":{"entities/User.html":{}}}],["contactnumber",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{},"classes/RegisterDto.html":{},"entities/User.html":{}}}],["context",{"_index":938,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":894,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":893,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":895,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/QueueController.html":{},"controllers/RolesController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/QueueController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["controller('queue",{"_index":545,"title":{},"body":{"controllers/QueueController.html":{}}}],["controller('roles",{"_index":926,"title":{},"body":{"controllers/RolesController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/QueueController.html":{},"modules/QueueModule.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"overview.html":{}}}],["conversion",{"_index":755,"title":{},"body":{"injectables/QueueService.html":{}}}],["convert",{"_index":861,"title":{},"body":{"injectables/QueueService.html":{}}}],["converting",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["cors",{"_index":651,"title":{},"body":{"classes/QueueGateway.html":{}}}],["count",{"_index":720,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter",{"_index":338,"title":{"entities/Counter.html":{}},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"coverage.html":{}}}],["counter.currentqueue",{"_index":446,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{}}}],["counter.currentqueue.completedat",{"_index":814,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter.currentqueue.status",{"_index":813,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter.currentqueueid",{"_index":818,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter.id",{"_index":836,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter.name",{"_index":826,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter/entities/counter.entity",{"_index":468,"title":{},"body":{"entities/Queue.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["counter_number",{"_index":448,"title":{},"body":{"entities/Queue.html":{}}}],["counterid",{"_index":499,"title":{},"body":{"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["countername",{"_index":835,"title":{},"body":{"injectables/QueueService.html":{}}}],["counternumber",{"_index":438,"title":{},"body":{"entities/Queue.html":{},"classes/UpdateQueueDto.html":{}}}],["counterrepository",{"_index":689,"title":{},"body":{"injectables/QueueService.html":{}}}],["counters",{"_index":863,"title":{},"body":{"injectables/QueueService.html":{}}}],["counterstatus",{"_index":358,"title":{},"body":{"entities/Counter.html":{},"injectables/QueueService.html":{},"miscellaneous/enumerations.html":{}}}],["counterstatus.active",{"_index":369,"title":{},"body":{"entities/Counter.html":{}}}],["courses",{"_index":1141,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":1007,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":479,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["create(@body",{"_index":546,"title":{},"body":{"controllers/QueueController.html":{}}}],["create(createqueuedto",{"_index":500,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["created",{"_index":722,"title":{},"body":{"injectables/QueueService.html":{}}}],["created_at",{"_index":451,"title":{},"body":{"entities/Queue.html":{},"entities/User.html":{}}}],["createdat",{"_index":439,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{},"entities/User.html":{}}}],["createdatecolumn",{"_index":466,"title":{},"body":{"entities/Queue.html":{},"entities/User.html":{}}}],["createdatecolumn({name",{"_index":450,"title":{},"body":{"entities/Queue.html":{},"entities/User.html":{}}}],["createqueuedto",{"_index":370,"title":{"classes/CreateQueueDto.html":{}},"body":{"classes/CreateQueueDto.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"coverage.html":{}}}],["createqueuedto.address",{"_index":766,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.appointmenttype",{"_index":769,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.firstname",{"_index":763,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.isguest",{"_index":750,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.lastname",{"_index":764,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.middleinitial",{"_index":765,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.phonenumber",{"_index":767,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.reasonofvisit",{"_index":768,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.userid",{"_index":752,"title":{},"body":{"injectables/QueueService.html":{}}}],["credentials",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["current",{"_index":812,"title":{},"body":{"injectables/QueueService.html":{}}}],["current_queue_id",{"_index":348,"title":{},"body":{"entities/Counter.html":{}}}],["currentqueue",{"_index":341,"title":{},"body":{"entities/Counter.html":{},"injectables/QueueService.html":{}}}],["currentqueueid",{"_index":342,"title":{},"body":{"entities/Counter.html":{}}}],["data",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"interfaces/RequestWithUser.html":{}}}],["database",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["databaseconfig",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["datasource",{"_index":1061,"title":{},"body":{"miscellaneous/functions.html":{}}}],["date",{"_index":443,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{},"entities/User.html":{}}}],["date(today",{"_index":725,"title":{},"body":{"injectables/QueueService.html":{}}}],["datestr",{"_index":715,"title":{},"body":{"injectables/QueueService.html":{}}}],["datetime",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["debug",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{}}}],["debugging",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["declarations",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"overview.html":{}}}],["decorators",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{}}}],["decorators/roles.decorator",{"_index":887,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["deeper",{"_index":1137,"title":{},"body":{"index.html":{}}}],["default",{"_index":361,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"miscellaneous/variables.html":{}}}],["default_role_id",{"_index":979,"title":{},"body":{"entities/User.html":{}}}],["defaultrole",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{}}}],["defaultroleid",{"_index":975,"title":{},"body":{"entities/User.html":{}}}],["defaultstrategy",{"_index":232,"title":{},"body":{"modules/AuthModule.html":{}}}],["define",{"_index":888,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["defined",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{}}}],["delete",{"_index":534,"title":{},"body":{"controllers/QueueController.html":{}}}],["dependencies",{"_index":36,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":1093,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":1109,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":1102,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":1118,"title":{},"body":{"index.html":{}}}],["description",{"_index":431,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":440,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{}}}],["details.entity",{"_index":467,"title":{},"body":{"entities/Queue.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["details.entity.ts",{"_index":571,"title":{},"body":{"entities/QueueDetails.html":{},"coverage.html":{}}}],["details.entity.ts:14",{"_index":579,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:17",{"_index":595,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:21",{"_index":594,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:24",{"_index":601,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:28",{"_index":600,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:31",{"_index":578,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:34",{"_index":583,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:37",{"_index":585,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:40",{"_index":574,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:43",{"_index":587,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:46",{"_index":597,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:49",{"_index":576,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:52",{"_index":581,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.queue",{"_index":455,"title":{},"body":{"entities/Queue.html":{}}}],["determine",{"_index":723,"title":{},"body":{"injectables/QueueService.html":{}}}],["development",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["devtools",{"_index":1147,"title":{},"body":{"index.html":{}}}],["disable",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["disconnected",{"_index":659,"title":{},"body":{"classes/QueueGateway.html":{}}}],["discord",{"_index":1134,"title":{},"body":{"index.html":{}}}],["dive",{"_index":1136,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":1008,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dotenv",{"_index":1041,"title":{},"body":{"dependencies.html":{}}}],["dropschema",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["dto",{"_index":432,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["dto/create",{"_index":541,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["dto/login.dto",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["dto/register.dto",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["dto/update",{"_index":543,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["e2e",{"_index":1088,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":1068,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":1100,"title":{},"body":{"index.html":{}}}],["email",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"entities/User.html":{}}}],["emailorusername",{"_index":433,"title":{},"body":{"classes/LoginDto.html":{}}}],["endpoint",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["ensure",{"_index":1098,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":1149,"title":{},"body":{"index.html":{}}}],["entities",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["entities/queue",{"_index":684,"title":{},"body":{"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["entities/queue.entity",{"_index":544,"title":{},"body":{"controllers/QueueController.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/UpdateQueueDto.html":{}}}],["entities/role.entity",{"_index":943,"title":{},"body":{"modules/RolesModule.html":{},"injectables/RolesService.html":{}}}],["entities/user.entity",{"_index":1006,"title":{},"body":{"modules/UsersModule.html":{}}}],["entity",{"_index":337,"title":{"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{}},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{},"coverage.html":{}}}],["entity('counters",{"_index":368,"title":{},"body":{"entities/Counter.html":{}}}],["entity('queue_details",{"_index":604,"title":{},"body":{"entities/QueueDetails.html":{}}}],["entity('queues",{"_index":473,"title":{},"body":{"entities/Queue.html":{}}}],["entity('roles",{"_index":910,"title":{},"body":{"entities/Role.html":{}}}],["entity('users",{"_index":999,"title":{},"body":{"entities/User.html":{}}}],["entity{.ts,.js",{"_index":86,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["enum",{"_index":360,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{}}}],["enumerations",{"_index":1055,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":412,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["environments",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["error",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["error('jwt_secret",{"_index":411,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["error('user",{"_index":964,"title":{},"body":{"injectables/RolesService.html":{}}}],["error.message",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["errors",{"_index":773,"title":{},"body":{"injectables/QueueService.html":{}}}],["eslint",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{}}}],["eslint/no",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{}}}],["estimated_wait_time",{"_index":457,"title":{},"body":{"entities/Queue.html":{}}}],["estimatedwaittime",{"_index":441,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{}}}],["estimation",{"_index":739,"title":{},"body":{"injectables/QueueService.html":{}}}],["example",{"_index":1076,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":883,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["existinguserbyemail",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{}}}],["existinguserbyusername",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{}}}],["exists",{"_index":328,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{}}}],["experience",{"_index":1139,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":239,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{}}}],["exports",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":1038,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["extractjwt",{"_index":405,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":416,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["failed",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{}}}],["fails",{"_index":758,"title":{},"body":{"injectables/QueueService.html":{}}}],["false",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"entities/Role.html":{}}}],["fast",{"_index":1113,"title":{},"body":{"index.html":{}}}],["features",{"_index":1122,"title":{},"body":{"index.html":{}}}],["few",{"_index":1115,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["find",{"_index":816,"title":{},"body":{"injectables/QueueService.html":{},"injectables/RolesService.html":{}}}],["findall",{"_index":480,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["findbyname",{"_index":948,"title":{},"body":{"injectables/RolesService.html":{}}}],["findbyname(name",{"_index":956,"title":{},"body":{"injectables/RolesService.html":{}}}],["findbyqueuenumber",{"_index":481,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["findbyqueuenumber(@param('queuenumber",{"_index":557,"title":{},"body":{"controllers/QueueController.html":{}}}],["findbyqueuenumber(queuenumber",{"_index":503,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["findbystatus",{"_index":482,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["findbystatus(@param('status",{"_index":549,"title":{},"body":{"controllers/QueueController.html":{}}}],["findbystatus(status",{"_index":506,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["findcompleted",{"_index":483,"title":{},"body":{"controllers/QueueController.html":{}}}],["findone",{"_index":484,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["findone(@param('id",{"_index":555,"title":{},"body":{"controllers/QueueController.html":{},"controllers/RolesController.html":{}}}],["findone(id",{"_index":511,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["findpending",{"_index":485,"title":{},"body":{"controllers/QueueController.html":{}}}],["findserving",{"_index":486,"title":{},"body":{"controllers/QueueController.html":{}}}],["first_name",{"_index":577,"title":{},"body":{"entities/QueueDetails.html":{},"entities/User.html":{}}}],["firstname",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"entities/User.html":{}}}],["fk_current_queue",{"_index":350,"title":{},"body":{"entities/Counter.html":{}}}],["fk_queue_id",{"_index":593,"title":{},"body":{"entities/QueueDetails.html":{}}}],["fk_user_id",{"_index":599,"title":{},"body":{"entities/QueueDetails.html":{}}}],["focus",{"_index":1121,"title":{},"body":{"index.html":{}}}],["follow",{"_index":1152,"title":{},"body":{"index.html":{}}}],["foreign",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["foreign_key_checks=0",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["foreign_key_checks=1",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["foreignkeyconstraintname",{"_index":349,"title":{},"body":{"entities/Counter.html":{},"entities/QueueDetails.html":{}}}],["format",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{}}}],["forwardref",{"_index":650,"title":{},"body":{"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["found",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{}}}],["framework",{"_index":1066,"title":{},"body":{"index.html":{}}}],["frontend",{"_index":653,"title":{},"body":{"classes/QueueGateway.html":{}}}],["full",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["function",{"_index":1024,"title":{},"body":{"coverage.html":{}}}],["functionality",{"_index":538,"title":{},"body":{"controllers/QueueController.html":{}}}],["functions",{"_index":1058,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":1117,"title":{},"body":{"index.html":{}}}],["generate",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{}}}],["get(':id",{"_index":512,"title":{},"body":{"controllers/QueueController.html":{},"controllers/RolesController.html":{}}}],["get(':id')@roles('admin",{"_index":917,"title":{},"body":{"controllers/RolesController.html":{}}}],["get(':id/details",{"_index":521,"title":{},"body":{"controllers/QueueController.html":{}}}],["get(':id/position",{"_index":524,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('completed",{"_index":509,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('counters",{"_index":518,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('health",{"_index":17,"title":{},"body":{"controllers/AppController.html":{}}}],["get('number/:queuenumber",{"_index":504,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('pending",{"_index":514,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('profile",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["get('serving",{"_index":516,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('stats",{"_index":526,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('status/:status",{"_index":507,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('user/:userid",{"_index":930,"title":{},"body":{"controllers/RolesController.html":{}}}],["get('user/:userid')@roles('admin",{"_index":920,"title":{},"body":{"controllers/RolesController.html":{}}}],["get()@roles('admin",{"_index":914,"title":{},"body":{"controllers/RolesController.html":{}}}],["getcounters",{"_index":487,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getprofile",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["getprofile(@request",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["getprofile(req",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(userid",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{}}}],["getqueuedetails",{"_index":488,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["getqueuedetails(@param('id",{"_index":559,"title":{},"body":{"controllers/QueueController.html":{}}}],["getqueuedetails(id",{"_index":520,"title":{},"body":{"controllers/QueueController.html":{}}}],["getqueuedetails(queueid",{"_index":701,"title":{},"body":{"injectables/QueueService.html":{}}}],["getqueueposition",{"_index":489,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["getqueueposition(@param('id",{"_index":561,"title":{},"body":{"controllers/QueueController.html":{}}}],["getqueueposition(id",{"_index":523,"title":{},"body":{"controllers/QueueController.html":{}}}],["getqueueposition(queueid",{"_index":703,"title":{},"body":{"injectables/QueueService.html":{}}}],["getstats",{"_index":490,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["getting",{"_index":1062,"title":{"index.html":{}},"body":{}}],["getuserroles",{"_index":913,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["getuserroles(@param('userid",{"_index":931,"title":{},"body":{"controllers/RolesController.html":{}}}],["getuserroles(userid",{"_index":919,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["global",{"_index":673,"title":{},"body":{"classes/QueueGateway.html":{}}}],["graph",{"_index":1144,"title":{},"body":{"index.html":{},"modules.html":{}}}],["grow",{"_index":1162,"title":{},"body":{"index.html":{}}}],["guard",{"_index":933,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":934,"title":{},"body":{"guards/RolesGuard.html":{}}}],["guards/jwt",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["guest",{"_index":746,"title":{},"body":{"injectables/QueueService.html":{}}}],["handle",{"_index":745,"title":{},"body":{"injectables/QueueService.html":{}}}],["handleconnection",{"_index":613,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handleconnection(client",{"_index":626,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handledisconnect",{"_index":614,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handledisconnect(client",{"_index":631,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlegetqueueposition",{"_index":615,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlegetqueueposition(client",{"_index":633,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoincounter",{"_index":616,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoincounter(client",{"_index":636,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoinqueue",{"_index":617,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoinqueue(client",{"_index":639,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handling",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["hands",{"_index":1138,"title":{},"body":{"index.html":{}}}],["handy",{"_index":1127,"title":{},"body":{"index.html":{}}}],["hash",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{}}}],["healthcheck",{"_index":10,"title":{},"body":{"controllers/AppController.html":{}}}],["hello",{"_index":137,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":1142,"title":{},"body":{"index.html":{}}}],["here",{"_index":1170,"title":{},"body":{"index.html":{}}}],["hit",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["host",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["https://nestjs.com",{"_index":1176,"title":{},"body":{"index.html":{}}}],["id",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{},"entities/Counter.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"entities/User.html":{}}}],["identifier",{"_index":1009,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":417,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["implement",{"_index":537,"title":{},"body":{"controllers/QueueController.html":{}}}],["implements",{"_index":608,"title":{},"body":{"classes/QueueGateway.html":{},"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["import",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{}}}],["imports",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}}}],["inactive",{"_index":367,"title":{},"body":{"entities/Counter.html":{},"miscellaneous/enumerations.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{}}}],["information",{"_index":1103,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":1124,"title":{},"body":{"index.html":{}}}],["inject",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["inject(forwardref",{"_index":655,"title":{},"body":{"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["injectable",{"_index":133,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"coverage.html":{}}}],["injectables",{"_index":134,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{},"overview.html":{}}}],["injectrepository",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{}}}],["injectrepository(counter",{"_index":711,"title":{},"body":{"injectables/QueueService.html":{}}}],["injectrepository(queue",{"_index":709,"title":{},"body":{"injectables/QueueService.html":{}}}],["injectrepository(queuedetails",{"_index":710,"title":{},"body":{"injectables/QueueService.html":{}}}],["injectrepository(role",{"_index":960,"title":{},"body":{"injectables/RolesService.html":{}}}],["injectrepository(user",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RolesService.html":{}}}],["install",{"_index":1116,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":1078,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["interact",{"_index":1145,"title":{},"body":{"index.html":{}}}],["interface",{"_index":175,"title":{"interfaces/JwtPayload.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["interfaces",{"_index":402,"title":{},"body":{"interfaces/JwtPayload.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"overview.html":{}}}],["invalid",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["inversejoincolumn",{"_index":994,"title":{},"body":{"entities/User.html":{}}}],["is_guest",{"_index":580,"title":{},"body":{"entities/QueueDetails.html":{}}}],["isboolean",{"_index":395,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["isboolean()@isoptional",{"_index":385,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["isemail",{"_index":878,"title":{},"body":{"classes/RegisterDto.html":{}}}],["isemail()@isnotempty",{"_index":868,"title":{},"body":{"classes/RegisterDto.html":{}}}],["isenum",{"_index":972,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["isenum(queuestatus",{"_index":973,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["isenum(queuestatus)@isoptional",{"_index":970,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["isglobal",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["isguest",{"_index":376,"title":{},"body":{"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{}}}],["isnan(number(payload.sub",{"_index":422,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["isnan(numuserid",{"_index":757,"title":{},"body":{"injectables/QueueService.html":{}}}],["isnotempty",{"_index":394,"title":{},"body":{"classes/CreateQueueDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["isoptional",{"_index":391,"title":{},"body":{"classes/CreateQueueDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateQueueDto.html":{}}}],["ispasswordvalid",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{}}}],["isstring",{"_index":393,"title":{},"body":{"classes/CreateQueueDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateQueueDto.html":{}}}],["isstring()@isnotempty",{"_index":382,"title":{},"body":{"classes/CreateQueueDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["isstring()@isnotempty()@minlength(8",{"_index":875,"title":{},"body":{"classes/RegisterDto.html":{}}}],["isstring()@isoptional",{"_index":380,"title":{},"body":{"classes/CreateQueueDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateQueueDto.html":{}}}],["isvalidemail",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["isvalidemail(email",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["it's",{"_index":800,"title":{},"body":{"injectables/QueueService.html":{}}}],["job",{"_index":1155,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":1157,"title":{},"body":{"index.html":{}}}],["join",{"_index":1168,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":364,"title":{},"body":{"entities/Counter.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["jointable",{"_index":997,"title":{},"body":{"entities/User.html":{}}}],["jwt",{"_index":233,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":230,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":172,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":415,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":224,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":234,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":401,"title":{"interfaces/JwtPayload.html":{}},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["jwtservice",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":222,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":1173,"title":{},"body":{"index.html":{}}}],["keep",{"_index":1000,"title":{},"body":{"entities/User.html":{}}}],["key",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["last_name",{"_index":582,"title":{},"body":{"entities/QueueDetails.html":{},"entities/User.html":{}}}],["lastname",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"entities/User.html":{}}}],["lastname}${nameextension",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{}}}],["learn",{"_index":1130,"title":{},"body":{"index.html":{}}}],["legend",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"overview.html":{}}}],["lessthanorequal",{"_index":708,"title":{},"body":{"injectables/QueueService.html":{}}}],["lessthanorequal(new",{"_index":850,"title":{},"body":{"injectables/QueueService.html":{}}}],["lessthanorequal(queue.createdat",{"_index":804,"title":{},"body":{"injectables/QueueService.html":{}}}],["lessthanorequal(queueid",{"_index":805,"title":{},"body":{"injectables/QueueService.html":{}}}],["lessthanorequal(today",{"_index":729,"title":{},"body":{"injectables/QueueService.html":{}}}],["license",{"_index":1179,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1160,"title":{},"body":{"index.html":{}}}],["line",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{}}}],["linkedin",{"_index":1154,"title":{},"body":{"index.html":{}}}],["literal",{"_index":493,"title":{},"body":{"controllers/QueueController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{}}}],["localhost",{"_index":1196,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logger",{"_index":611,"title":{},"body":{"classes/QueueGateway.html":{}}}],["logger(queuegateway.name",{"_index":623,"title":{},"body":{"classes/QueueGateway.html":{}}}],["logging",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["login",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{}}}],["login(@body",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["login(logindto",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logindto",{"_index":155,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["logindto.emailorusername",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto.password",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["looking",{"_index":1104,"title":{},"body":{"index.html":{}}}],["loop",{"_index":1151,"title":{},"body":{"index.html":{}}}],["loss",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["makes",{"_index":1111,"title":{},"body":{"index.html":{}}}],["managing",{"_index":1123,"title":{},"body":{"index.html":{}}}],["many",{"_index":801,"title":{},"body":{"injectables/QueueService.html":{}}}],["manytomany",{"_index":909,"title":{},"body":{"entities/Role.html":{},"entities/User.html":{}}}],["manytomany(undefined",{"_index":906,"title":{},"body":{"entities/Role.html":{}}}],["manytomany(undefined)@jointable({name",{"_index":992,"title":{},"body":{"entities/User.html":{}}}],["manytoone",{"_index":602,"title":{},"body":{"entities/QueueDetails.html":{},"entities/User.html":{}}}],["manytoone(undefined",{"_index":588,"title":{},"body":{"entities/QueueDetails.html":{},"entities/User.html":{}}}],["mark",{"_index":811,"title":{},"body":{"injectables/QueueService.html":{}}}],["matching",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.floor",{"_index":859,"title":{},"body":{"injectables/QueueService.html":{}}}],["mau",{"_index":1107,"title":{},"body":{"index.html":{}}}],["message",{"_index":820,"title":{},"body":{"injectables/QueueService.html":{}}}],["metadata",{"_index":1048,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{}}}],["middle_initial",{"_index":584,"title":{},"body":{"entities/QueueDetails.html":{}}}],["middle_name",{"_index":986,"title":{},"body":{"entities/User.html":{}}}],["middleinitial",{"_index":377,"title":{},"body":{"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{}}}],["middlename",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{},"classes/RegisterDto.html":{},"entities/User.html":{}}}],["migrationsrun",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["minlength",{"_index":879,"title":{},"body":{"classes/RegisterDto.html":{}}}],["minlength(8",{"_index":880,"title":{},"body":{"classes/RegisterDto.html":{}}}],["minutes",{"_index":740,"title":{},"body":{"injectables/QueueService.html":{}}}],["miscellaneous",{"_index":1054,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1159,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1082,"title":{},"body":{"index.html":{}}}],["module",{"_index":33,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":35,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/queue/queue.module",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":821,"title":{},"body":{"injectables/QueueService.html":{},"index.html":{}}}],["mysql",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["mysql2",{"_index":1043,"title":{},"body":{"dependencies.html":{}}}],["myśliwiec",{"_index":1174,"title":{},"body":{"index.html":{}}}],["name",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"injectables/JwtStrategy.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"miscellaneous/functions.html":{}}}],["name_extension",{"_index":989,"title":{},"body":{"entities/User.html":{}}}],["nameextension",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{},"classes/RegisterDto.html":{},"entities/User.html":{}}}],["need",{"_index":680,"title":{},"body":{"modules/QueueModule.html":{},"injectables/QueueService.html":{},"index.html":{}}}],["nest",{"_index":1072,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1178,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":1094,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":885,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":225,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":227,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1037,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":648,"title":{},"body":{"classes/QueueGateway.html":{},"dependencies.html":{}}}],["new",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{},"coverage.html":{}}}],["next",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["nextcalled",{"_index":838,"title":{},"body":{"injectables/QueueService.html":{}}}],["nextqueue",{"_index":817,"title":{},"body":{"injectables/QueueService.html":{}}}],["nextqueue.counternumber",{"_index":825,"title":{},"body":{"injectables/QueueService.html":{}}}],["nextqueue.id",{"_index":828,"title":{},"body":{"injectables/QueueService.html":{}}}],["nextqueue.status",{"_index":823,"title":{},"body":{"injectables/QueueService.html":{}}}],["node.js",{"_index":1065,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":707,"title":{},"body":{"injectables/QueueService.html":{},"injectables/RolesService.html":{}}}],["notfoundexception(`counter",{"_index":810,"title":{},"body":{"injectables/QueueService.html":{}}}],["notfoundexception(`details",{"_index":787,"title":{},"body":{"injectables/QueueService.html":{}}}],["notfoundexception(`queue",{"_index":784,"title":{},"body":{"injectables/QueueService.html":{}}}],["notfoundexception(`role",{"_index":963,"title":{},"body":{"injectables/RolesService.html":{}}}],["notify",{"_index":777,"title":{},"body":{"injectables/QueueService.html":{}}}],["notifycounterupdate",{"_index":618,"title":{},"body":{"classes/QueueGateway.html":{}}}],["notifycounterupdate(counterid",{"_index":642,"title":{},"body":{"classes/QueueGateway.html":{}}}],["notifyqueueupdate",{"_index":619,"title":{},"body":{"classes/QueueGateway.html":{}}}],["notifyqueueupdate(queueid",{"_index":644,"title":{},"body":{"classes/QueueGateway.html":{}}}],["npm",{"_index":1077,"title":{},"body":{"index.html":{}}}],["null",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{}}}],["nullable",{"_index":346,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["number",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"injectables/RolesService.html":{},"entities/User.html":{}}}],["number(createqueuedto.userid",{"_index":754,"title":{},"body":{"injectables/QueueService.html":{}}}],["number(payload.sub",{"_index":423,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["numuserid",{"_index":753,"title":{},"body":{"injectables/QueueService.html":{}}}],["offer",{"_index":1156,"title":{},"body":{"index.html":{}}}],["official",{"_index":1108,"title":{},"body":{"index.html":{}}}],["ok",{"_index":30,"title":{},"body":{"controllers/AppController.html":{}}}],["ondelete",{"_index":590,"title":{},"body":{"entities/QueueDetails.html":{}}}],["one",{"_index":803,"title":{},"body":{"injectables/QueueService.html":{}}}],["onetomany",{"_index":465,"title":{},"body":{"entities/Queue.html":{}}}],["onetomany(undefined",{"_index":454,"title":{},"body":{"entities/Queue.html":{}}}],["onetoone",{"_index":363,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{}}}],["onetoone(undefined",{"_index":344,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{}}}],["ongatewayconnection",{"_index":609,"title":{},"body":{"classes/QueueGateway.html":{}}}],["ongatewaydisconnect",{"_index":610,"title":{},"body":{"classes/QueueGateway.html":{}}}],["open",{"_index":1161,"title":{},"body":{"index.html":{}}}],["optional",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateQueueDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser-1.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"miscellaneous/functions.html":{}}}],["order",{"_index":781,"title":{},"body":{"injectables/QueueService.html":{}}}],["origin",{"_index":652,"title":{},"body":{"classes/QueueGateway.html":{}}}],["out",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":1184,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1032,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":533,"title":{},"body":{"controllers/QueueController.html":{},"controllers/RolesController.html":{}}}],["parameters",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"miscellaneous/functions.html":{}}}],["parseduserid",{"_index":749,"title":{},"body":{"injectables/QueueService.html":{}}}],["parseint(process.env.db_port",{"_index":1197,"title":{},"body":{"miscellaneous/variables.html":{}}}],["part",{"_index":1148,"title":{},"body":{"index.html":{}}}],["passport",{"_index":407,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":226,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":231,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":404,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":408,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["password",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["password.length",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{}}}],["patch",{"_index":532,"title":{},"body":{"controllers/QueueController.html":{}}}],["patch(':id",{"_index":530,"title":{},"body":{"controllers/QueueController.html":{}}}],["payload",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["payload.roles",{"_index":426,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":421,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["pending",{"_index":469,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{},"miscellaneous/enumerations.html":{}}}],["pendingcount",{"_index":839,"title":{},"body":{"injectables/QueueService.html":{}}}],["per",{"_index":741,"title":{},"body":{"injectables/QueueService.html":{}}}],["person",{"_index":742,"title":{},"body":{"injectables/QueueService.html":{}}}],["philippines",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["phone_number",{"_index":586,"title":{},"body":{"entities/QueueDetails.html":{}}}],["phonenumber",{"_index":378,"title":{},"body":{"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{}}}],["platform",{"_index":1106,"title":{},"body":{"index.html":{}}}],["please",{"_index":1133,"title":{},"body":{"index.html":{}}}],["port",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["position",{"_index":663,"title":{},"body":{"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["possible",{"_index":1101,"title":{},"body":{"index.html":{}}}],["post",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QueueController.html":{},"interfaces/RequestWithUser.html":{}}}],["post('counter",{"_index":494,"title":{},"body":{"controllers/QueueController.html":{}}}],["post('counter/:counterid/call",{"_index":497,"title":{},"body":{"controllers/QueueController.html":{}}}],["post('login",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["post('register",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["prefix",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QueueController.html":{},"controllers/RolesController.html":{}}}],["prevent",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["primarygeneratedcolumn",{"_index":354,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["private",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{}}}],["process.env.db_host",{"_index":1195,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_name",{"_index":1202,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_password",{"_index":1201,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_username",{"_index":1199,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["production",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"classes/QueueGateway.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["progressive",{"_index":1064,"title":{},"body":{"index.html":{}}}],["project",{"_index":1074,"title":{},"body":{"index.html":{}}}],["promise",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/RolesService.html":{}}}],["promise.all",{"_index":844,"title":{},"body":{"injectables/QueueService.html":{}}}],["properties",{"_index":340,"title":{"properties.html":{}},"body":{"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"properties.html":{}}}],["provided",{"_index":760,"title":{},"body":{"injectables/QueueService.html":{}}}],["providers",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"overview.html":{}}}],["query",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["query('set",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["questions",{"_index":1131,"title":{},"body":{"index.html":{}}}],["queue",{"_index":343,"title":{"entities/Queue.html":{}},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"coverage.html":{}}}],["queue.completedat",{"_index":794,"title":{},"body":{"injectables/QueueService.html":{}}}],["queue.completedat.gettime",{"_index":857,"title":{},"body":{"injectables/QueueService.html":{}}}],["queue.controller",{"_index":682,"title":{},"body":{"modules/QueueModule.html":{}}}],["queue.counter",{"_index":345,"title":{},"body":{"entities/Counter.html":{}}}],["queue.counternumber",{"_index":796,"title":{},"body":{"injectables/QueueService.html":{}}}],["queue.createdat.gettime",{"_index":858,"title":{},"body":{"injectables/QueueService.html":{}}}],["queue.details",{"_index":589,"title":{},"body":{"entities/QueueDetails.html":{}}}],["queue.dto",{"_index":542,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["queue.dto.ts",{"_index":373,"title":{},"body":{"classes/CreateQueueDto.html":{},"classes/UpdateQueueDto.html":{},"coverage.html":{}}}],["queue.dto.ts:11",{"_index":969,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["queue.dto.ts:13",{"_index":387,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:17",{"_index":388,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:21",{"_index":381,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:25",{"_index":389,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:29",{"_index":390,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:33",{"_index":383,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:37",{"_index":386,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:5",{"_index":392,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:7",{"_index":971,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["queue.dto.ts:9",{"_index":384,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.entity",{"_index":603,"title":{},"body":{"entities/QueueDetails.html":{}}}],["queue.gateway",{"_index":683,"title":{},"body":{"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["queue.service",{"_index":540,"title":{},"body":{"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{}}}],["queue.status",{"_index":791,"title":{},"body":{"injectables/QueueService.html":{}}}],["queue/entities/queue.entity",{"_index":365,"title":{},"body":{"entities/Counter.html":{}}}],["queue_id",{"_index":592,"title":{},"body":{"entities/QueueDetails.html":{}}}],["queue_number",{"_index":460,"title":{},"body":{"entities/Queue.html":{}}}],["queuecontroller",{"_index":475,"title":{"controllers/QueueController.html":{}},"body":{"controllers/QueueController.html":{},"modules/QueueModule.html":{},"coverage.html":{}}}],["queuedata",{"_index":661,"title":{},"body":{"classes/QueueGateway.html":{}}}],["queuedetails",{"_index":453,"title":{"entities/QueueDetails.html":{}},"body":{"entities/Queue.html":{},"entities/QueueDetails.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"coverage.html":{}}}],["queuedetails.queue",{"_index":774,"title":{},"body":{"injectables/QueueService.html":{}}}],["queuedetailsrepository",{"_index":688,"title":{},"body":{"injectables/QueueService.html":{}}}],["queuegateway",{"_index":606,"title":{"classes/QueueGateway.html":{}},"body":{"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"coverage.html":{},"overview.html":{}}}],["queueid",{"_index":572,"title":{},"body":{"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["queuemodule",{"_index":46,"title":{"modules/QueueModule.html":{}},"body":{"modules/AppModule.html":{},"modules/QueueModule.html":{},"modules.html":{},"overview.html":{}}}],["queuenumber",{"_index":442,"title":{},"body":{"entities/Queue.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["queuerepository",{"_index":691,"title":{},"body":{"injectables/QueueService.html":{}}}],["queues",{"_index":721,"title":{},"body":{"injectables/QueueService.html":{}}}],["queueservice",{"_index":539,"title":{"injectables/QueueService.html":{}},"body":{"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"coverage.html":{},"overview.html":{}}}],["queuestatus",{"_index":463,"title":{},"body":{"entities/Queue.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"classes/UpdateQueueDto.html":{},"miscellaneous/enumerations.html":{}}}],["queuestatus.cancelled",{"_index":845,"title":{},"body":{"injectables/QueueService.html":{}}}],["queuestatus.completed",{"_index":793,"title":{},"body":{"injectables/QueueService.html":{}}}],["queuestatus.pending",{"_index":474,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{}}}],["queuestatus.serving",{"_index":824,"title":{},"body":{"injectables/QueueService.html":{}}}],["read",{"_index":1169,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"controllers/RolesController.html":{}}}],["ready",{"_index":1092,"title":{},"body":{"index.html":{}}}],["real",{"_index":1146,"title":{},"body":{"index.html":{}}}],["reason_of_visit",{"_index":596,"title":{},"body":{"entities/QueueDetails.html":{}}}],["reasonofvisit",{"_index":379,"title":{},"body":{"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{}}}],["received",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["referencedcolumnname",{"_index":1003,"title":{},"body":{"entities/User.html":{}}}],["reflect",{"_index":1047,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":884,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["register",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["register(@body",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["register(registerdto",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["registerdto",{"_index":160,"title":{"classes/RegisterDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["registration",{"_index":866,"title":{},"body":{"classes/RegisterDto.html":{}}}],["relation",{"_index":770,"title":{},"body":{"injectables/QueueService.html":{}}}],["relations",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{}}}],["remove",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{}}}],["repository",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{},"index.html":{}}}],["req",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["req.user",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["req.user.sub",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["request",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["request.user?.roles",{"_index":897,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["requestwithuser",{"_index":147,"title":{"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["requiredroles",{"_index":891,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["requiredroles.some((role",{"_index":898,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["requiring",{"_index":1114,"title":{},"body":{"index.html":{}}}],["reset",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"overview.html":{}}}],["resources",{"_index":1125,"title":{},"body":{"index.html":{}}}],["response",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{}}}],["result",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{}}}],["results",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{}}}],["returns",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{}}}],["role",{"_index":900,"title":{"entities/Role.html":{}},"body":{"entities/Role.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"coverage.html":{}}}],["role.name",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{}}}],["role_id",{"_index":1004,"title":{},"body":{"entities/User.html":{}}}],["roleids",{"_index":953,"title":{},"body":{"injectables/RolesService.html":{}}}],["rolenames",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{}}}],["roles",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles('admin",{"_index":927,"title":{},"body":{"controllers/RolesController.html":{}}}],["roles.controller",{"_index":944,"title":{},"body":{"modules/RolesModule.html":{}}}],["roles.map((role",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{}}}],["roles.service",{"_index":922,"title":{},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{}}}],["roles/entities/role.entity",{"_index":998,"title":{},"body":{"entities/User.html":{}}}],["roles/roles.module",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["roles/roles.service",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{}}}],["roles_key",{"_index":886,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolescontroller",{"_index":911,"title":{"controllers/RolesController.html":{}},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{},"coverage.html":{}}}],["rolesguard",{"_index":889,"title":{"guards/RolesGuard.html":{}},"body":{"interfaces/RequestWithUser-1.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["rolesmodule",{"_index":47,"title":{"modules/RolesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RolesModule.html":{},"modules.html":{},"overview.html":{}}}],["rolesrepository",{"_index":951,"title":{},"body":{"injectables/RolesService.html":{}}}],["rolesservice",{"_index":250,"title":{"injectables/RolesService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"coverage.html":{},"overview.html":{}}}],["room",{"_index":832,"title":{},"body":{"injectables/QueueService.html":{}}}],["rooms",{"_index":670,"title":{},"body":{"classes/QueueGateway.html":{}}}],["root",{"_index":1200,"title":{},"body":{"miscellaneous/variables.html":{}}}],["run",{"_index":1079,"title":{},"body":{"index.html":{}}}],["runs",{"_index":1099,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1050,"title":{},"body":{"dependencies.html":{}}}],["save",{"_index":734,"title":{},"body":{"injectables/QueueService.html":{}}}],["savedqueue",{"_index":743,"title":{},"body":{"injectables/QueueService.html":{}}}],["savedqueue.id",{"_index":762,"title":{},"body":{"injectables/QueueService.html":{}}}],["scalable",{"_index":1069,"title":{},"body":{"index.html":{}}}],["secret",{"_index":236,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretkey",{"_index":409,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["secretorkey",{"_index":418,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["seeddatabaseifneeded",{"_index":1025,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["seeddatabaseifneeded(datasource",{"_index":1060,"title":{},"body":{"miscellaneous/functions.html":{}}}],["select",{"_index":851,"title":{},"body":{"injectables/QueueService.html":{}}}],["send",{"_index":666,"title":{},"body":{"classes/QueueGateway.html":{}}}],["separately",{"_index":771,"title":{},"body":{"injectables/QueueService.html":{}}}],["sequence",{"_index":713,"title":{},"body":{"injectables/QueueService.html":{}}}],["server",{"_index":612,"title":{},"body":{"classes/QueueGateway.html":{},"index.html":{}}}],["serving",{"_index":470,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{},"miscellaneous/enumerations.html":{}}}],["servingcount",{"_index":840,"title":{},"body":{"injectables/QueueService.html":{}}}],["set",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["setmetadata(roles_key",{"_index":1204,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":1075,"title":{},"body":{"index.html":{}}}],["sheesh",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["side",{"_index":1070,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":238,"title":{},"body":{"modules/AuthModule.html":{}}}],["simple",{"_index":738,"title":{},"body":{"injectables/QueueService.html":{},"index.html":{}}}],["socket",{"_index":627,"title":{},"body":{"classes/QueueGateway.html":{}}}],["socket.io",{"_index":649,"title":{},"body":{"classes/QueueGateway.html":{},"dependencies.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["specific",{"_index":669,"title":{},"body":{"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["sponsors",{"_index":1164,"title":{},"body":{"index.html":{}}}],["sql",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["src/.../counter.entity.ts",{"_index":1056,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../database.config.ts",{"_index":1192,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1059,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../queue.entity.ts",{"_index":1057,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../roles.decorator.ts",{"_index":1193,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:14",{"_index":18,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:9",{"_index":14,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":135,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":136,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:24",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:37",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:44",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":223,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:103",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:17",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:204",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:209",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:25",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:40",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorators/roles.decorator.ts",{"_index":1015,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dto/login.dto.ts",{"_index":430,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto.ts:10",{"_index":434,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/login.dto.ts:14",{"_index":435,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/register.dto.ts",{"_index":865,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["src/auth/dto/register.dto.ts:17",{"_index":869,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:21",{"_index":877,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:26",{"_index":876,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:30",{"_index":870,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:34",{"_index":872,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:38",{"_index":871,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:42",{"_index":873,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:46",{"_index":874,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:49",{"_index":867,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/guards/jwt",{"_index":397,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard.ts",{"_index":881,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard.ts:11",{"_index":936,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/guards/roles.guard.ts:14",{"_index":937,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":403,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:13",{"_index":428,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:28",{"_index":429,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/config/database.config.ts",{"_index":1022,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":1023,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/counter/entities/counter.entity.ts",{"_index":339,"title":{},"body":{"entities/Counter.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/modules/counter/entities/counter.entity.ts:18",{"_index":355,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/counter/entities/counter.entity.ts:21",{"_index":357,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/counter/entities/counter.entity.ts:28",{"_index":362,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/counter/entities/counter.entity.ts:31",{"_index":353,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/counter/entities/counter.entity.ts:38",{"_index":351,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/queue/dto/create",{"_index":372,"title":{},"body":{"classes/CreateQueueDto.html":{},"coverage.html":{}}}],["src/modules/queue/dto/update",{"_index":968,"title":{},"body":{"classes/UpdateQueueDto.html":{},"coverage.html":{}}}],["src/modules/queue/entities/queue",{"_index":570,"title":{},"body":{"entities/QueueDetails.html":{},"coverage.html":{}}}],["src/modules/queue/entities/queue.entity.ts",{"_index":436,"title":{},"body":{"entities/Queue.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/modules/queue/entities/queue.entity.ts:22",{"_index":459,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:25",{"_index":462,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:32",{"_index":464,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:35",{"_index":449,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:38",{"_index":452,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:41",{"_index":445,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:44",{"_index":458,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:47",{"_index":456,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:52",{"_index":447,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/queue.controller.ts",{"_index":476,"title":{},"body":{"controllers/QueueController.html":{},"coverage.html":{}}}],["src/modules/queue/queue.controller.ts:20",{"_index":501,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:25",{"_index":502,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:30",{"_index":508,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:35",{"_index":515,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:40",{"_index":517,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:45",{"_index":510,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:50",{"_index":527,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:55",{"_index":513,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:60",{"_index":505,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:65",{"_index":522,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:70",{"_index":525,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:75",{"_index":531,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:80",{"_index":498,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:85",{"_index":495,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:90",{"_index":519,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.gateway.ts",{"_index":607,"title":{},"body":{"classes/QueueGateway.html":{},"coverage.html":{}}}],["src/modules/queue/queue.gateway.ts:18",{"_index":624,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:21",{"_index":621,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:28",{"_index":628,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:32",{"_index":632,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:37",{"_index":641,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:44",{"_index":635,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:50",{"_index":638,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:56",{"_index":645,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:61",{"_index":643,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.module.ts",{"_index":679,"title":{},"body":{"modules/QueueModule.html":{}}}],["src/modules/queue/queue.service.ts",{"_index":686,"title":{},"body":{"injectables/QueueService.html":{},"coverage.html":{}}}],["src/modules/queue/queue.service.ts:113",{"_index":696,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:119",{"_index":698,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:126",{"_index":699,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:138",{"_index":697,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:150",{"_index":702,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:167",{"_index":706,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:194",{"_index":704,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:20",{"_index":690,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:214",{"_index":694,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:284",{"_index":705,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:32",{"_index":695,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:331",{"_index":693,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:337",{"_index":700,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/roles/entities/role.entity.ts",{"_index":901,"title":{},"body":{"entities/Role.html":{},"coverage.html":{}}}],["src/roles/entities/role.entity.ts:10",{"_index":905,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/entities/role.entity.ts:13",{"_index":902,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/entities/role.entity.ts:16",{"_index":908,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/entities/role.entity.ts:7",{"_index":903,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/roles.controller.ts",{"_index":912,"title":{},"body":{"controllers/RolesController.html":{},"coverage.html":{}}}],["src/roles/roles.controller.ts:14",{"_index":916,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.controller.ts:20",{"_index":918,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.controller.ts:26",{"_index":921,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.module.ts",{"_index":942,"title":{},"body":{"modules/RolesModule.html":{}}}],["src/roles/roles.service.ts",{"_index":946,"title":{},"body":{"injectables/RolesService.html":{},"coverage.html":{}}}],["src/roles/roles.service.ts:17",{"_index":955,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:21",{"_index":958,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:29",{"_index":957,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:37",{"_index":959,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:45",{"_index":954,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:8",{"_index":950,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/users/entities/user.entity.ts",{"_index":974,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:16",{"_index":984,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:19",{"_index":982,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:22",{"_index":996,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:25",{"_index":991,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:28",{"_index":983,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:31",{"_index":987,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:34",{"_index":985,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:37",{"_index":988,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:40",{"_index":990,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:43",{"_index":977,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:46",{"_index":978,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:50",{"_index":980,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:53",{"_index":981,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:67",{"_index":995,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.module.ts",{"_index":1005,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":1080,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1083,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":1084,"title":{},"body":{"index.html":{}}}],["started",{"_index":1063,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1073,"title":{},"body":{"index.html":{}}}],["statement",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["statements",{"_index":1010,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"entities/Counter.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"classes/UpdateQueueDto.html":{}}}],["stay",{"_index":1150,"title":{},"body":{"index.html":{}}}],["steps",{"_index":1096,"title":{},"body":{"index.html":{}}}],["straightforward",{"_index":1112,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":406,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["strength",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{}}}],["string",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["string(payload.email",{"_index":424,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["string(todaycount",{"_index":732,"title":{},"body":{"injectables/QueueService.html":{}}}],["sub",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{}}}],["subscribemessage",{"_index":647,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subscribemessage('getqueueposition",{"_index":634,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subscribemessage('joincounter",{"_index":637,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subscribemessage('joinqueue",{"_index":640,"title":{},"body":{"classes/QueueGateway.html":{}}}],["succeeds",{"_index":756,"title":{},"body":{"injectables/QueueService.html":{}}}],["success",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{},"classes/QueueGateway.html":{}}}],["successfully",{"_index":831,"title":{},"body":{"injectables/QueueService.html":{}}}],["super",{"_index":414,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["super_admin",{"_index":915,"title":{},"body":{"controllers/RolesController.html":{}}}],["support",{"_index":1132,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1181,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["table",{"_index":1031,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1030,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":1097,"title":{},"body":{"index.html":{}}}],["taken",{"_index":332,"title":{},"body":{"injectables/AuthService.html":{}}}],["test",{"_index":1087,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":1090,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1089,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1085,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":1163,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":29,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.getprofile(number(req.user.sub",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.authservice.login(logindto",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.authservice.register(registerdto",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.counterrepository.create",{"_index":862,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.counterrepository.find",{"_index":864,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.counterrepository.findone",{"_index":809,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.counterrepository.save(counter",{"_index":819,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.findone(id",{"_index":789,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.findone(queueid",{"_index":785,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.getqueueposition(queueid",{"_index":788,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.getqueueposition(savedqueue.id",{"_index":776,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.isvalidemail(email",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(payload",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.log(`client",{"_index":656,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.queuedetailsrepository.create",{"_index":761,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuedetailsrepository.findone",{"_index":786,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuedetailsrepository.save(queuedetails",{"_index":775,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuegateway.notifycounterupdate(counterid",{"_index":837,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuegateway.notifyqueueupdate(id",{"_index":798,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuegateway.notifyqueueupdate(nextqueue.id",{"_index":834,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuegateway.server.emit('queuelistupdate",{"_index":778,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.count",{"_index":728,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.create",{"_index":735,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.find",{"_index":780,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.findone",{"_index":783,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.save(counter.currentqueue",{"_index":815,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.save(nextqueue",{"_index":827,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.save(queue",{"_index":744,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queueservice.addcounter(data.name",{"_index":568,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.callnext(+counterid",{"_index":566,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.create(createqueuedto",{"_index":547,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findall",{"_index":548,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findbyqueuenumber(queuenumber",{"_index":558,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findbystatus(queuestatus.completed",{"_index":553,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findbystatus(queuestatus.pending",{"_index":551,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findbystatus(queuestatus.serving",{"_index":552,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findbystatus(status",{"_index":550,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findone(+id",{"_index":556,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.getcounters",{"_index":569,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.getqueuedetails(+id",{"_index":560,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.getqueuedetails(queueid",{"_index":662,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.queueservice.getqueueposition(+id",{"_index":562,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.getqueueposition(queueid",{"_index":664,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.queueservice.getstats",{"_index":554,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.update(+id",{"_index":564,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.reflector.getallandoverride",{"_index":892,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["this.rolesrepository.find",{"_index":961,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesrepository.findbyids(roleids",{"_index":965,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesrepository.findone",{"_index":962,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesservice.findall",{"_index":928,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.findone(+id",{"_index":929,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.getuserroles(+userid",{"_index":932,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.getuserroles(user.id",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.server.emit('counterlistupdate",{"_index":675,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.server.emit('queuelistupdate",{"_index":672,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.server.to(`counter_${counterid}`).emit('counterupdate",{"_index":674,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.server.to(`queue_${queueid}`).emit('queueupdate",{"_index":671,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.usersrepository.findone",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RolesService.html":{}}}],["this.usersrepository.save(user",{"_index":967,"title":{},"body":{"injectables/RolesService.html":{}}}],["throw",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{}}}],["ties",{"_index":807,"title":{},"body":{"injectables/QueueService.html":{}}}],["time",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"injectables/QueueService.html":{},"index.html":{}}}],["time_zone",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["today",{"_index":714,"title":{},"body":{"injectables/QueueService.html":{}}}],["today.getfullyear()}${string(today.getmonth",{"_index":716,"title":{},"body":{"injectables/QueueService.html":{}}}],["todaycount",{"_index":727,"title":{},"body":{"injectables/QueueService.html":{}}}],["todaystart",{"_index":724,"title":{},"body":{"injectables/QueueService.html":{}}}],["todaystart.sethours(0",{"_index":726,"title":{},"body":{"injectables/QueueService.html":{}}}],["token",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["total",{"_index":856,"title":{},"body":{"injectables/QueueService.html":{}}}],["totalcount",{"_index":843,"title":{},"body":{"injectables/QueueService.html":{}}}],["totalwaittimems",{"_index":854,"title":{},"body":{"injectables/QueueService.html":{}}}],["touch",{"_index":1171,"title":{},"body":{"index.html":{}}}],["treat",{"_index":759,"title":{},"body":{"injectables/QueueService.html":{}}}],["true",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"entities/User.html":{}}}],["true})@joincolumn({name",{"_index":347,"title":{},"body":{"entities/Counter.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["try",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{}}}],["turn",{"_index":833,"title":{},"body":{"injectables/QueueService.html":{}}}],["twitter",{"_index":1177,"title":{},"body":{"index.html":{}}}],["type",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateQueueDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateQueueDto.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["typeof",{"_index":751,"title":{},"body":{"injectables/QueueService.html":{}}}],["typeorm",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{},"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"entities/Role.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([queue",{"_index":685,"title":{},"body":{"modules/QueueModule.html":{}}}],["typeormmodule.forfeature([role",{"_index":945,"title":{},"body":{"modules/RolesModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":241,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":1194,"title":{},"body":{"miscellaneous/variables.html":{}}}],["typescript",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["unauthorizedexception",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{}}}],["unauthorizedexception('invalid",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{}}}],["uncomment",{"_index":535,"title":{},"body":{"controllers/QueueController.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["undefined",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{},"entities/Counter.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"entities/Queue.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"entities/User.html":{}}}],["unique",{"_index":461,"title":{},"body":{"entities/Queue.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["unit",{"_index":1086,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["unlicensed",{"_index":1191,"title":{},"body":{"properties.html":{}}}],["unused",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{}}}],["update",{"_index":491,"title":{},"body":{"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["update(@param('id",{"_index":563,"title":{},"body":{"controllers/QueueController.html":{}}}],["update(id",{"_index":528,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["updated",{"_index":799,"title":{},"body":{"injectables/QueueService.html":{}}}],["updatedqueue",{"_index":797,"title":{},"body":{"injectables/QueueService.html":{}}}],["updatequeuedto",{"_index":529,"title":{"classes/UpdateQueueDto.html":{}},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{},"classes/UpdateQueueDto.html":{},"coverage.html":{}}}],["updatequeuedto.counternumber",{"_index":795,"title":{},"body":{"injectables/QueueService.html":{}}}],["updatequeuedto.status",{"_index":790,"title":{},"body":{"injectables/QueueService.html":{}}}],["updates",{"_index":667,"title":{},"body":{"classes/QueueGateway.html":{},"index.html":{}}}],["url",{"_index":654,"title":{},"body":{"classes/QueueGateway.html":{}}}],["use",{"_index":681,"title":{},"body":{"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["usefactory",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["useguards",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{}}}],["useguards(jwtauthguard",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{}}}],["useguards(jwtauthguard)@get('profile",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":177,"title":{"entities/User.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["user.defaultrole?.name",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.email",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.id",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.roles",{"_index":907,"title":{},"body":{"entities/Role.html":{},"injectables/RolesService.html":{}}}],["user_id",{"_index":598,"title":{},"body":{"entities/QueueDetails.html":{},"entities/User.html":{}}}],["user_roles",{"_index":993,"title":{},"body":{"entities/User.html":{}}}],["userid",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateQueueDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["username",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/RegisterDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["userroles",{"_index":896,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["userroles.includes(role",{"_index":899,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"guards/RolesGuard.html":{}}}],["users",{"_index":747,"title":{},"body":{"injectables/QueueService.html":{},"entities/Role.html":{}}}],["users/entities/user.entity",{"_index":228,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{}}}],["users/users.module",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["usersmodule",{"_index":48,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RolesService.html":{}}}],["userwithoutpassword",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{}}}],["using",{"_index":808,"title":{},"body":{"injectables/QueueService.html":{},"index.html":{}}}],["utc",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["utc+8",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["valid",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{}}}],["validate",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":419,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(logindto",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{}}}],["validation",{"_index":420,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["validator",{"_index":396,"title":{},"body":{"classes/CreateQueueDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateQueueDto.html":{},"dependencies.html":{}}}],["value",{"_index":622,"title":{},"body":{"classes/QueueGateway.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":748,"title":{},"body":{"injectables/QueueService.html":{}}}],["variable",{"_index":1016,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":413,"title":{"miscellaneous/variables.html":{}},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["vars",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["version",{"_index":1189,"title":{},"body":{"properties.html":{}}}],["video",{"_index":1140,"title":{},"body":{"index.html":{}}}],["visit",{"_index":1129,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":1143,"title":{},"body":{"index.html":{}}}],["void",{"_index":630,"title":{},"body":{"classes/QueueGateway.html":{}}}],["wait",{"_index":848,"title":{},"body":{"injectables/QueueService.html":{}}}],["waiting",{"_index":822,"title":{},"body":{"injectables/QueueService.html":{}}}],["want",{"_index":536,"title":{},"body":{"controllers/QueueController.html":{}}}],["watch",{"_index":1081,"title":{},"body":{"index.html":{}}}],["website",{"_index":1175,"title":{},"body":{"index.html":{}}}],["websocketgateway",{"_index":646,"title":{},"body":{"classes/QueueGateway.html":{}}}],["websocketserver",{"_index":625,"title":{},"body":{"classes/QueueGateway.html":{}}}],["working",{"_index":1128,"title":{},"body":{"index.html":{}}}],["world",{"_index":138,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":1153,"title":{},"body":{"index.html":{}}}],["xxxx",{"_index":731,"title":{},"body":{"injectables/QueueService.html":{}}}],["yes",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{}}}],["you'd",{"_index":1167,"title":{},"body":{"index.html":{}}}],["you're",{"_index":1091,"title":{},"body":{"index.html":{}}}],["yyyymmdd",{"_index":730,"title":{},"body":{"injectables/QueueService.html":{}}}],["zone",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["zoom",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                            \n                                    \n                                healthCheck\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        healthCheck\n                        \n                    \n                \n            \n            \n                \n                        \n                    healthCheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('health')\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     { status: string; }\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n\n  @Get('health')\n  healthCheck() {\n    return { status: 'ok' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nQueueModule\n\nQueueModule\n\nAppModule -->\n\nQueueModule->AppModule\n\n\n\n\n\nRolesModule\n\nRolesModule\n\nAppModule -->\n\nRolesModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            QueueModule\n                        \n                        \n                            RolesModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n// import { databaseConfig } from './config/database.config';\nimport { UsersModule } from './users/users.module';\nimport { AuthModule } from './auth/auth.module';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { RolesModule } from './roles/roles.module';\nimport { QueueModule } from './modules/queue/queue.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'mysql',\n        host: configService.get('DB_HOST'),\n        port: configService.get('DB_PORT'),\n        username: configService.get('DB_USERNAME'),\n        password: configService.get('DB_PASSWORD'),\n        database: configService.get('DB_NAME'),\n        entities: [__dirname + '/**/*.entity{.ts,.js}'],\n        synchronize: configService.get('NODE_ENV') !== 'production', //set this sheesh to true in development only\n        logging: configService.get('NODE_ENV') !== 'production',\n        // Prevent data loss in development (below code is for development only)\n        // synchronize: true,\n        migrationsRun: false,\n        dropSchema: false,\n\n        // Only for development environments!\n        beforeConnect: async (connection): Promise => {\n          if (process.env.NODE_ENV !== 'production') {\n            const conn = connection as {\n              query: (sql: string) => Promise;\n            };\n            // Disable foreign key checks for development\n            await conn.query('SET FOREIGN_KEY_CHECKS=0;');\n            // Set time zone to UTC for consistent datetime handling\n            await conn.query(\"SET time_zone = '+08:00';\"); // Philippines time zone (UTC+8)\n          }\n        },\n        afterConnect: async (connection): Promise => {\n          if (process.env.NODE_ENV !== 'production') {\n            await (\n              connection as { query: (sql: string) => Promise }\n            ).query('SET FOREIGN_KEY_CHECKS=1;');\n          }\n        },\n      }),\n    }),\n    UsersModule,\n    AuthModule,\n    RolesModule,\n    QueueModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                getProfile\n                            \n                            \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(req: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('profile')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestWithUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(registerDto: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                registerDto\n                                            \n                                                            RegisterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  Get,\n  UseGuards,\n  Request,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\n\ninterface RequestWithUser extends Request {\n  user: { sub: number; email: string; roles: string[] };\n}\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @Post('login')\n  async login(@Body() loginDto: LoginDto) {\n    console.log('Login request received:', loginDto);\n    try {\n      const result = await this.authService.login(loginDto);\n      return result;\n    } catch (error) {\n      throw new UnauthorizedException(\n        error instanceof Error ? error.message : 'Invalid credentials',\n      );\n    }\n  }\n\n  @Post('register')\n  async register(@Body() registerDto: RegisterDto) {\n    console.log('Register endpoint hit with data:', registerDto); //Debugging Statement\n    return this.authService.register(registerDto);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  getProfile(@Request() req: RequestWithUser) {\n    // Add null check before converting to number\n    if (!req.user || req.user.sub === undefined || req.user.sub === null) {\n      throw new UnauthorizedException('Invalid user ID');\n    }\n    return this.authService.getProfile(Number(req.user.sub));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nRolesModule\n\nRolesModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nRolesModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RolesModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from '../users/entities/user.entity';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { JwtStrategy } from './jwt.strategy';\nimport { ConfigService } from '@nestjs/config';\nimport { RolesModule } from '../roles/roles.module';\n\n@Module({\n  imports: [\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.registerAsync({\n      inject: [ConfigService],\n      useFactory: (config: ConfigService) => {\n        return {\n          secret: config.get('JWT_SECRET'),\n          signOptions: { expiresIn: '1d' },\n        };\n      },\n    }),\n    TypeOrmModule.forFeature([User]),\n    RolesModule,\n  ],\n  providers: [AuthService, JwtStrategy],\n  controllers: [AuthController],\n  exports: [AuthService, JwtStrategy, PassportModule],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Private\n                                isValidEmail\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, jwtService: JwtService, rolesService: RolesService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        rolesService\n                                                  \n                                                        \n                                                                        RolesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:209\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isValidEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    isValidEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:204\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(registerDto: RegisterDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:103\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                registerDto\n                                            \n                                                            RegisterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(loginDto: LoginDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  UnauthorizedException,\n  ConflictException,\n  BadRequestException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from '../users/entities/user.entity';\nimport * as bcrypt from 'bcrypt';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { RolesService } from '../roles/roles.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n    private jwtService: JwtService,\n    private rolesService: RolesService,\n  ) {}\n\n  async validateUser(loginDto: LoginDto): Promise {\n    const user = await this.usersRepository.findOne({\n      where: [\n        { email: loginDto.emailOrUsername },\n        { username: loginDto.emailOrUsername },\n      ],\n    });\n    if (user && (await bcrypt.compare(loginDto.password, user.password))) {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { password: __password, ...result } = user;\n      return result;\n    }\n    return null;\n  }\n\n  async login(loginDto: LoginDto) {\n    console.log('Login attempt with:', loginDto);\n\n    try {\n      const user = await this.usersRepository.findOne({\n        where: [\n          { email: loginDto.emailOrUsername },\n          { username: loginDto.emailOrUsername },\n        ],\n        relations: ['defaultRole'],\n      });\n\n      console.log('User found:', user ? 'Yes' : 'No');\n\n      if (!user) {\n        throw new UnauthorizedException('Invalid email or password');\n      }\n\n      // Debug password check\n      console.log('Stored password hash:', user.password);\n      console.log('Comparing with:', loginDto.password);\n\n      const isPasswordValid = await bcrypt.compare(\n        loginDto.password,\n        user.password,\n      );\n      console.log('Password valid:', isPasswordValid);\n\n      if (!isPasswordValid) {\n        throw new UnauthorizedException('Invalid email or password');\n      }\n\n      // Get user roles\n      const roles = await this.rolesService.getUserRoles(user.id);\n      const roleNames = roles.map((role) => role.name);\n\n      const payload = {\n        sub: user.id,\n        email: user.email,\n        roles: roleNames,\n      };\n\n      const token = this.jwtService.sign(payload);\n      console.log('Generated token:', token ? 'Success' : 'Failed');\n\n      // Remove password from response\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { password: __password, ...userWithoutPassword } = user;\n\n      return {\n        access_token: token,\n        user: {\n          ...userWithoutPassword,\n          roles: roleNames,\n          defaultRole: user.defaultRole?.name || 'citizen',\n        },\n      };\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  }\n\n  async register(registerDto: RegisterDto) {\n    const {\n      email,\n      username,\n      password,\n      firstName,\n      middleName,\n      lastName,\n      nameExtension,\n      contactNumber,\n    } = registerDto;\n\n    // Generate full name\n    const name = `${firstName} ${middleName ? middleName + ' ' : ''}${lastName}${nameExtension ? ' ' + nameExtension : ''}`;\n\n    // Validate email format\n    if (!this.isValidEmail(email)) {\n      throw new BadRequestException('Invalid email format');\n    }\n\n    // Check if user exists by email\n    const existingUserByEmail = await this.usersRepository.findOne({\n      where: { email },\n    });\n    if (existingUserByEmail) {\n      throw new ConflictException('Email already exists');\n    }\n\n    // Check if username is taken\n    if (username) {\n      const existingUserByUsername = await this.usersRepository.findOne({\n        where: { username },\n      });\n      if (existingUserByUsername) {\n        throw new ConflictException('Username already exists');\n      }\n    }\n\n    // Validate password strength\n    if (password.length  role.name);\n\n    // Remove password from response\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { password: __password, ...result } = user;\n    return {\n      ...result,\n      roles: roleNames,\n      defaultRole: user.defaultRole?.name || 'citizen',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Counter.html":{"url":"entities/Counter.html","title":"entity - Counter","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Counter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/counter/entities/counter.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                currentQueue\n                            \n                            \n                                    \n                                currentQueueId\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        currentQueue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Queue | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, queue => queue.counter, {nullable: true})@JoinColumn({name: 'current_queue_id', foreignKeyConstraintName: 'fk_current_queue'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        currentQueueId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'current_queue_id', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CounterStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: CounterStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:28\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  OneToOne,\n  JoinColumn,\n} from 'typeorm';\nimport { Queue } from '../../queue/entities/queue.entity';\n\nexport enum CounterStatus {\n  ACTIVE = 'active',\n  INACTIVE = 'inactive',\n}\n\n@Entity('counters')\nexport class Counter {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  name: string;\n\n  @Column({\n    type: 'enum',\n    enum: CounterStatus,\n    default: CounterStatus.ACTIVE,\n  })\n  status: CounterStatus;\n\n  @Column({ name: 'current_queue_id', nullable: true })\n  currentQueueId: number | null;\n\n  @OneToOne(() => Queue, (queue) => queue.counter, { nullable: true })\n  @JoinColumn({\n    name: 'current_queue_id',\n    foreignKeyConstraintName: 'fk_current_queue',\n  })\n  currentQueue: Queue | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateQueueDto.html":{"url":"classes/CreateQueueDto.html","title":"class - CreateQueueDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateQueueDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/dto/create-queue.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                    \n                                    \n                                appointmentType\n                            \n                            \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                isGuest\n                            \n                            \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                middleInitial\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                phoneNumber\n                            \n                            \n                                    \n                                    \n                                reasonOfVisit\n                            \n                            \n                                    \n                                    Optional\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        appointmentType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        isGuest\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        middleInitial\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        reasonOfVisit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsOptional, IsNotEmpty, IsBoolean } from 'class-validator';\n\nexport class CreateQueueDto {\n  @IsOptional()\n  userId?: number | string; \n\n  @IsString()\n  @IsNotEmpty()\n  firstName: string;\n\n  @IsString()\n  @IsNotEmpty()\n  lastName: string;\n\n  @IsString()\n  @IsOptional()\n  middleInitial?: string;\n\n  @IsString()\n  @IsOptional()\n  address?: string;\n\n  @IsString()\n  @IsOptional()\n  phoneNumber?: string;\n\n  @IsString()\n  @IsNotEmpty()\n  reasonOfVisit: string;\n\n  @IsString()\n  @IsNotEmpty()\n  appointmentType: string;\n\n  @IsBoolean()\n  @IsOptional()\n  isGuest?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            roles\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        roles:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\n\ninterface JwtPayload {\n  sub: number;\n  email: string;\n  roles?: string[];\n}\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private configService: ConfigService) {\n    const secretKey = configService.get('JWT_SECRET');\n\n    if (!secretKey) {\n      throw new Error('JWT_SECRET is not defined in environment variables');\n    }\n\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: secretKey,\n    });\n  }\n\n  validate(payload: JwtPayload): JwtPayload {\n    // Validation for the payload\n    if (!payload || payload.sub === undefined || isNaN(Number(payload.sub))) {\n      throw new UnauthorizedException('Invalid token payload');\n    }\n\n    const userId = Number(payload.sub);\n    const email = String(payload.email || '');\n    const roles = Array.isArray(payload.roles) ? payload.roles : [];\n\n    return { sub: userId, email, roles };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(payload: JwtPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            JwtPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         JwtPayload\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\n\ninterface JwtPayload {\n  sub: number;\n  email: string;\n  roles?: string[];\n}\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private configService: ConfigService) {\n    const secretKey = configService.get('JWT_SECRET');\n\n    if (!secretKey) {\n      throw new Error('JWT_SECRET is not defined in environment variables');\n    }\n\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: secretKey,\n    });\n  }\n\n  validate(payload: JwtPayload): JwtPayload {\n    // Validation for the payload\n    if (!payload || payload.sub === undefined || isNaN(Number(payload.sub))) {\n      throw new UnauthorizedException('Invalid token payload');\n    }\n\n    const userId = Number(payload.sub);\n    const email = String(payload.email || '');\n    const roles = Array.isArray(payload.roles) ? payload.roles : [];\n\n    return { sub: userId, email, roles };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for user login\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                emailOrUsername\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        emailOrUsername\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\n/**\n * DTO for user login\n * @class LoginDto\n */\n\nexport class LoginDto {\n  @IsNotEmpty()\n  emailOrUsername: string;\n\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Queue.html":{"url":"entities/Queue.html","title":"entity - Queue","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Queue\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/entities/queue.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                completedAt\n                            \n                            \n                                    \n                                counter\n                            \n                            \n                                    \n                                counterNumber\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                details\n                            \n                            \n                                    \n                                estimatedWaitTime\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                queueNumber\n                            \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        completedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'completed_at', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        counter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Counter\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, counter => counter.currentQueue, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        counterNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'counter_number', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        details\n                        \n                    \n                \n            \n                \n                    \n                        Type :     QueueDetails[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, details => details.queue)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        estimatedWaitTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'estimated_wait_time', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        queueNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'queue_number', unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueueStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: QueueStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:32\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  OneToMany,\n  CreateDateColumn,\n  OneToOne,\n} from 'typeorm';\nimport { QueueDetails } from './queue-details.entity';\nimport { Counter } from '../../counter/entities/counter.entity';\n\nexport enum QueueStatus {\n  PENDING = 'pending',\n  SERVING = 'serving',\n  COMPLETED = 'completed',\n  CANCELLED = 'cancelled',\n}\n\n@Entity('queues')\nexport class Queue {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ name: 'queue_number', unique: true })\n  queueNumber: string;\n\n  @Column({\n    type: 'enum',\n    enum: QueueStatus,\n    default: QueueStatus.PENDING,\n  })\n  status: QueueStatus;\n\n  @Column({ name: 'counter_number', nullable: true })\n  counterNumber: string;\n\n  @CreateDateColumn({ name: 'created_at' })\n  createdAt: Date;\n\n  @Column({ name: 'completed_at', nullable: true })\n  completedAt: Date;\n\n  @Column({ name: 'estimated_wait_time', nullable: true })\n  estimatedWaitTime: number;\n\n  @OneToMany(() => QueueDetails, (details) => details.queue)\n  details: QueueDetails[];\n\n  @OneToOne(() => Counter, (counter) => counter.currentQueue, {\n    nullable: true,\n  })\n  counter: Counter;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/QueueController.html":{"url":"controllers/QueueController.html","title":"controller - QueueController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  QueueController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/queue.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                queue\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                addCounter\n                            \n                            \n                                    \n                                callNext\n                            \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findByQueueNumber\n                            \n                            \n                                    \n                                findByStatus\n                            \n                            \n                                    \n                                findCompleted\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                findPending\n                            \n                            \n                                    \n                                findServing\n                            \n                            \n                                    \n                                getCounters\n                            \n                            \n                                    \n                                getQueueDetails\n                            \n                            \n                                    \n                                getQueuePosition\n                            \n                            \n                                    \n                                getStats\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        addCounter\n                        \n                    \n                \n            \n            \n                \n                        \n                    addCounter(data: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('counter')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        callNext\n                        \n                    \n                \n            \n            \n                \n                        \n                    callNext(counterId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('counter/:counterId/call-next')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:80\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                counterId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createQueueDto: CreateQueueDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createQueueDto\n                                            \n                                                            CreateQueueDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findByQueueNumber\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByQueueNumber(queueNumber: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('number/:queueNumber')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueNumber\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findByStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByStatus(status: QueueStatus)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('status/:status')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            QueueStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findCompleted\n                        \n                    \n                \n            \n            \n                \n                        \n                    findCompleted()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('completed')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:45\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findPending\n                        \n                    \n                \n            \n            \n                \n                        \n                    findPending()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('pending')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findServing\n                        \n                    \n                \n            \n            \n                \n                        \n                    findServing()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('serving')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getCounters\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCounters()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('counters')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:90\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getQueueDetails\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQueueDetails(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/details')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getQueuePosition\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQueuePosition(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/position')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:70\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('stats')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:50\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateQueueDto: UpdateQueueDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateQueueDto\n                                            \n                                                            UpdateQueueDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  //Delete, // Uncomment if you want to implement delete functionality\n} from '@nestjs/common';\nimport { QueueService } from './queue.service';\nimport { CreateQueueDto } from './dto/create-queue.dto';\nimport { UpdateQueueDto } from './dto/update-queue.dto';\nimport { QueueStatus } from './entities/queue.entity';\n\n@Controller('queue')\nexport class QueueController {\n  constructor(private readonly queueService: QueueService) {}\n\n  @Post()\n  create(@Body() createQueueDto: CreateQueueDto) {\n    return this.queueService.create(createQueueDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.queueService.findAll();\n  }\n\n  @Get('status/:status')\n  findByStatus(@Param('status') status: QueueStatus) {\n    return this.queueService.findByStatus(status);\n  }\n\n  @Get('pending')\n  findPending() {\n    return this.queueService.findByStatus(QueueStatus.PENDING);\n  }\n\n  @Get('serving')\n  findServing() {\n    return this.queueService.findByStatus(QueueStatus.SERVING);\n  }\n\n  @Get('completed')\n  findCompleted() {\n    return this.queueService.findByStatus(QueueStatus.COMPLETED);\n  }\n\n  @Get('stats')\n  getStats() {\n    return this.queueService.getStats();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.queueService.findOne(+id);\n  }\n\n  @Get('number/:queueNumber')\n  findByQueueNumber(@Param('queueNumber') queueNumber: string) {\n    return this.queueService.findByQueueNumber(queueNumber);\n  }\n\n  @Get(':id/details')\n  getQueueDetails(@Param('id') id: string) {\n    return this.queueService.getQueueDetails(+id);\n  }\n\n  @Get(':id/position')\n  getQueuePosition(@Param('id') id: string) {\n    return this.queueService.getQueuePosition(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateQueueDto: UpdateQueueDto) {\n    return this.queueService.update(+id, updateQueueDto);\n  }\n\n  @Post('counter/:counterId/call-next')\n  callNext(@Param('counterId') counterId: string) {\n    return this.queueService.callNext(+counterId);\n  }\n\n  @Post('counter')\n  addCounter(@Body() data: { name: string }) {\n    return this.queueService.addCounter(data.name);\n  }\n\n  @Get('counters')\n  getCounters() {\n    return this.queueService.getCounters();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/QueueDetails.html":{"url":"entities/QueueDetails.html","title":"entity - QueueDetails","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  QueueDetails\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/entities/queue-details.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                address\n                            \n                            \n                                    \n                                appointmentType\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isGuest\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                middleInitial\n                            \n                            \n                                    \n                                phoneNumber\n                            \n                            \n                                    \n                                    \n                                queue\n                            \n                            \n                                    \n                                queueId\n                            \n                            \n                                    \n                                reasonOfVisit\n                            \n                            \n                                    \n                                    \n                                user\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        appointmentType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'appointment_type'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'first_name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isGuest\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'is_guest', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'last_name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        middleInitial\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'middle_initial', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'phone_number', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        queue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Queue\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, queue => queue.details, {onDelete: 'CASCADE'})@JoinColumn({name: 'queue_id', foreignKeyConstraintName: 'fk_queue_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        queueId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'queue_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reasonOfVisit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'reason_of_visit'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {onDelete: 'SET NULL', nullable: true})@JoinColumn({name: 'user_id', foreignKeyConstraintName: 'fk_user_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'user_id', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:24\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  JoinColumn,\n} from 'typeorm';\nimport { Queue } from './queue.entity';\nimport { User } from '../../../users/entities/user.entity';\n\n@Entity('queue_details')\nexport class QueueDetails {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ name: 'queue_id' })\n  queueId: number;\n\n  @ManyToOne(() => Queue, (queue) => queue.details, { onDelete: 'CASCADE' })\n  @JoinColumn({ name: 'queue_id', foreignKeyConstraintName: 'fk_queue_id' })\n  queue: Queue;\n\n  @Column({ name: 'user_id', nullable: true })\n  userId: number;\n\n  @ManyToOne(() => User, { onDelete: 'SET NULL', nullable: true })\n  @JoinColumn({ name: 'user_id', foreignKeyConstraintName: 'fk_user_id' })\n  user: User;\n\n  @Column({ name: 'first_name' })\n  firstName: string;\n\n  @Column({ name: 'last_name' })\n  lastName: string;\n\n  @Column({ name: 'middle_initial', nullable: true })\n  middleInitial: string;\n\n  @Column({ nullable: true })\n  address: string;\n\n  @Column({ name: 'phone_number', nullable: true })\n  phoneNumber: string;\n\n  @Column({ name: 'reason_of_visit' })\n  reasonOfVisit: string;\n\n  @Column({ name: 'appointment_type' })\n  appointmentType: string;\n\n  @Column({ name: 'is_guest', default: false })\n  isGuest: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QueueGateway.html":{"url":"classes/QueueGateway.html","title":"class - QueueGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QueueGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/queue.gateway.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        OnGatewayConnection\n                        OnGatewayDisconnect\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleConnection\n                            \n                            \n                                handleDisconnect\n                            \n                            \n                                    \n                                    Async\n                                handleGetQueuePosition\n                            \n                            \n                                    \n                                    Async\n                                handleJoinCounter\n                            \n                            \n                                    \n                                    Async\n                                handleJoinQueue\n                            \n                            \n                                notifyCounterUpdate\n                            \n                            \n                                notifyQueueUpdate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(queueService: QueueService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/queue/queue.gateway.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        queueService\n                                                  \n                                                        \n                                                                        QueueService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(QueueGateway.name)\n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/queue.gateway.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/queue.gateway.ts:21\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handleConnection\n                        \n                    \n                \n            \n            \n                \nhandleConnection(client: Socket)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleDisconnect\n                        \n                    \n                \n            \n            \n                \nhandleDisconnect(client: Socket)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleGetQueuePosition\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleGetQueuePosition(client: Socket, queueId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('getQueuePosition')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleJoinCounter\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleJoinCounter(client: Socket, counterId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('joinCounter')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                counterId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleJoinQueue\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleJoinQueue(client: Socket, queueId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('joinQueue')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notifyCounterUpdate\n                        \n                    \n                \n            \n            \n                \nnotifyCounterUpdate(counterId: number, data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                counterId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notifyQueueUpdate\n                        \n                    \n                \n            \n            \n                \nnotifyQueueUpdate(queueId: number, data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  WebSocketGateway,\n  WebSocketServer,\n  SubscribeMessage,\n  OnGatewayConnection,\n  OnGatewayDisconnect,\n} from '@nestjs/websockets';\nimport { Server, Socket } from 'socket.io';\nimport { QueueService } from './queue.service';\nimport { Logger, Inject, forwardRef } from '@nestjs/common';\n\n@WebSocketGateway({\n  cors: {\n    origin: '*', // In production, set to your frontend URL\n  },\n})\nexport class QueueGateway implements OnGatewayConnection, OnGatewayDisconnect {\n  private readonly logger = new Logger(QueueGateway.name);\n\n  @WebSocketServer()\n  server: Server;\n\n  constructor(\n    @Inject(forwardRef(() => QueueService))\n    private readonly queueService: QueueService,\n  ) {}\n\n  handleConnection(client: Socket) {\n    this.logger.log(`Client connected: ${client.id}`);\n  }\n\n  handleDisconnect(client: Socket) {\n    this.logger.log(`Client disconnected: ${client.id}`);\n  }\n\n  @SubscribeMessage('joinQueue')\n  async handleJoinQueue(client: Socket, queueId: number) {\n    await client.join(`queue_${queueId}`);\n    const queueData = await this.queueService.getQueueDetails(queueId);\n    return queueData;\n  }\n\n  @SubscribeMessage('getQueuePosition')\n  async handleGetQueuePosition(client: Socket, queueId: number) {\n    const position = await this.queueService.getQueuePosition(queueId);\n    return { position };\n  }\n\n  @SubscribeMessage('joinCounter')\n  async handleJoinCounter(client: Socket, counterId: number) {\n    await client.join(`counter_${counterId}`);\n    return { success: true };\n  }\n\n  // Send updates to all clients or specific rooms\n  notifyQueueUpdate(queueId: number, data: any) {\n    void this.server.to(`queue_${queueId}`).emit('queueUpdate', data);\n    void this.server.emit('queueListUpdate'); // Global queue update\n  }\n\n  notifyCounterUpdate(counterId: number, data: any) {\n    void this.server.to(`counter_${counterId}`).emit('counterUpdate', data);\n    void this.server.emit('counterListUpdate'); // Global counter update\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/QueueModule.html":{"url":"modules/QueueModule.html","title":"module - QueueModule","body":"\n                   \n\n\n\n\n    Modules\n    QueueModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_QueueModule\n\n\n\ncluster_QueueModule_providers\n\n\n\ncluster_QueueModule_exports\n\n\n\n\nQueueGateway \n\nQueueGateway \n\n\n\nQueueService \n\nQueueService \n\n\n\nQueueModule\n\nQueueModule\n\nQueueGateway  -->\n\nQueueModule->QueueGateway \n\n\n\nQueueService  -->\n\nQueueModule->QueueService \n\n\n\n\n\nQueueService\n\nQueueService\n\nQueueModule -->\n\nQueueService->QueueModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/queue/queue.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            QueueService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            QueueController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            QueueGateway\n                        \n                        \n                            QueueService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {\n  Module,\n  //forwardRef, // Uncomment if you need to use forwardRef\n} from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { QueueService } from './queue.service';\nimport { QueueController } from './queue.controller';\nimport { QueueGateway } from './queue.gateway';\nimport { Queue } from './entities/queue.entity';\nimport { QueueDetails } from './entities/queue-details.entity';\nimport { Counter } from '../counter/entities/counter.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Queue, QueueDetails, Counter])],\n  controllers: [QueueController],\n  providers: [QueueService, QueueGateway],\n  exports: [QueueService, QueueGateway],\n})\nexport class QueueModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QueueService.html":{"url":"injectables/QueueService.html","title":"injectable - QueueService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  QueueService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/queue.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addCounter\n                            \n                            \n                                    Async\n                                callNext\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByQueueNumber\n                            \n                            \n                                    Async\n                                findByStatus\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getCounters\n                            \n                            \n                                    Async\n                                getQueueDetails\n                            \n                            \n                                    Async\n                                getQueuePosition\n                            \n                            \n                                    Async\n                                getStats\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(queueRepository: Repository, queueDetailsRepository: Repository, counterRepository: Repository, queueGateway: QueueGateway)\n                    \n                \n                        \n                            \n                                Defined in src/modules/queue/queue.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        queueRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queueDetailsRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        counterRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queueGateway\n                                                  \n                                                        \n                                                                        QueueGateway\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addCounter\n                        \n                    \n                \n            \n            \n                \n                        \n                    addCounter(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:331\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        callNext\n                        \n                    \n                \n            \n            \n                \n                        \n                    callNext(counterId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:214\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                counterId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createQueueDto: CreateQueueDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createQueueDto\n                                            \n                                                            CreateQueueDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:113\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByQueueNumber\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByQueueNumber(queueNumber: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:138\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueNumber\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByStatus(status: QueueStatus)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:119\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            QueueStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:126\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCounters\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCounters()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:337\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getQueueDetails\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQueueDetails(queueId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:150\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getQueuePosition\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQueuePosition(queueId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:194\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:284\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateQueueDto: UpdateQueueDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:167\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateQueueDto\n                                            \n                                                            UpdateQueueDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  Inject,\n  forwardRef,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, LessThanOrEqual } from 'typeorm';\nimport { Queue, QueueStatus } from './entities/queue.entity';\nimport { QueueDetails } from './entities/queue-details.entity';\nimport {\n  Counter,\n  //CounterStatus, //Uncomment if you need to use CounterStatus\n} from '../counter/entities/counter.entity';\nimport { CreateQueueDto } from './dto/create-queue.dto';\nimport { UpdateQueueDto } from './dto/update-queue.dto';\nimport { QueueGateway } from './queue.gateway';\n\n@Injectable()\nexport class QueueService {\n  constructor(\n    @InjectRepository(Queue)\n    private queueRepository: Repository,\n    @InjectRepository(QueueDetails)\n    private queueDetailsRepository: Repository,\n    @InjectRepository(Counter)\n    private counterRepository: Repository,\n    @Inject(forwardRef(() => QueueGateway))\n    private queueGateway: QueueGateway,\n  ) {}\n\n  async create(createQueueDto: CreateQueueDto) {\n    // Generate a queue number based on date and sequence\n    const today = new Date();\n    const dateStr = `${today.getFullYear()}${String(today.getMonth() + 1).padStart(2, '0')}${String(today.getDate()).padStart(2, '0')}`;\n\n    // Get the count of queues created today to determine the sequence number\n    const todayStart = new Date(today);\n    todayStart.setHours(0, 0, 0, 0);\n\n    const todayCount = await this.queueRepository.count({\n      where: {\n        createdAt: LessThanOrEqual(today),\n      },\n    });\n\n    // Format the queue number: YYYYMMDD-XXXX where XXXX is the sequence number\n    const queueNumber = `${dateStr}-${String(todayCount + 1).padStart(4, '0')}`;\n\n    // Create and save the queue\n    const queue = this.queueRepository.create({\n      queueNumber,\n      status: QueueStatus.PENDING,\n      estimatedWaitTime: 15 * (todayCount + 1), // Simple estimation: 15 minutes per person\n    });\n\n    const savedQueue = await this.queueRepository.save(queue);\n\n    // Handle guest users - determine userId and isGuest values\n    let parsedUserId: number | undefined = undefined;\n    let isGuest = createQueueDto.isGuest || false;\n    \n    // Check if userId is the string \"guest\"\n    if (typeof createQueueDto.userId === 'string' && createQueueDto.userId === 'guest') {\n      isGuest = true;\n    } \n    // If userId exists and is not \"guest\", try to use it\n    else if (createQueueDto.userId !== undefined && createQueueDto.userId !== null) {\n      const numUserId = Number(createQueueDto.userId);\n      // If conversion succeeds, use the number\n      if (!isNaN(numUserId)) {\n        parsedUserId = numUserId;\n      } else {\n        // If conversion fails, treat as guest\n        isGuest = true;\n      }\n    }\n\n    // Create queue details\n    // If userId is not provided or is \"guest\", set it to null\n    const queueDetails = this.queueDetailsRepository.create({\n      queueId: savedQueue.id,\n      userId: parsedUserId,\n      firstName: createQueueDto.firstName,\n      lastName: createQueueDto.lastName,\n      middleInitial: createQueueDto.middleInitial,\n      address: createQueueDto.address,\n      phoneNumber: createQueueDto.phoneNumber,\n      reasonOfVisit: createQueueDto.reasonOfVisit,\n      appointmentType: createQueueDto.appointmentType,\n      isGuest: isGuest\n    });\n    \n    // Set the queue relation separately to avoid TypeORM errors\n    queueDetails.queue = savedQueue;\n\n    await this.queueDetailsRepository.save(queueDetails);\n\n    // Get queue position\n    const position = await this.getQueuePosition(savedQueue.id);\n\n    const result = { queue: savedQueue, details: queueDetails, position };\n\n    // Notify all clients that a new queue has been created\n    this.queueGateway.server.emit('queueListUpdate', {\n      action: 'created',\n      queueId: savedQueue.id,\n    });\n\n    return result;\n  }\n\n  async findAll() {\n    return await this.queueRepository.find({\n      order: { createdAt: 'ASC' },\n    });\n  }\n\n  async findByStatus(status: QueueStatus) {\n    return await this.queueRepository.find({\n      where: { status },\n      order: { createdAt: 'ASC' },\n    });\n  }\n\n  async findOne(id: number) {\n    const queue = await this.queueRepository.findOne({\n      where: { id },\n    });\n\n    if (!queue) {\n      throw new NotFoundException(`Queue #${id} not found`);\n    }\n\n    return queue;\n  }\n\n  async findByQueueNumber(queueNumber: string) {\n    const queue = await this.queueRepository.findOne({\n      where: { queueNumber },\n    });\n\n    if (!queue) {\n      throw new NotFoundException(`Queue #${queueNumber} not found`);\n    }\n\n    return queue;\n  }\n\n  async getQueueDetails(queueId: number) {\n    const queue = await this.findOne(queueId);\n\n    const details = await this.queueDetailsRepository.findOne({\n      where: { queueId },\n      relations: ['user'],\n    });\n\n    if (!details) {\n      throw new NotFoundException(`Details for queue #${queueId} not found`);\n    }\n\n    const position = await this.getQueuePosition(queueId);\n\n    return { queue, details, position };\n  }\n\n  async update(id: number, updateQueueDto: UpdateQueueDto) {\n    const queue = await this.findOne(id);\n\n    if (updateQueueDto.status) {\n      queue.status = updateQueueDto.status;\n\n      // If completed, set completion time\n      if (updateQueueDto.status === QueueStatus.COMPLETED) {\n        queue.completedAt = new Date();\n      }\n    }\n\n    if (updateQueueDto.counterNumber) {\n      queue.counterNumber = updateQueueDto.counterNumber;\n    }\n\n    const updatedQueue = await this.queueRepository.save(queue);\n\n    // Notify clients about the queue update\n    this.queueGateway.notifyQueueUpdate(id, {\n      action: 'updated',\n      queue: updatedQueue,\n    });\n\n    return updatedQueue;\n  }\n\n  async getQueuePosition(queueId: number) {\n    const queue = await this.findOne(queueId);\n\n    // If the queue is not pending, it's not in line\n    if (queue.status !== QueueStatus.PENDING) {\n      return 0;\n    }\n\n    // Count how many pending queues are ahead of this one\n    const position = await this.queueRepository.count({\n      where: {\n        status: QueueStatus.PENDING,\n        createdAt: LessThanOrEqual(queue.createdAt),\n        id: LessThanOrEqual(queueId), // Break ties using ID\n      },\n    });\n\n    return position;\n  }\n\n  async callNext(counterId: number) {\n    const counter = await this.counterRepository.findOne({\n      where: { id: counterId },\n      relations: ['currentQueue'],\n    });\n\n    if (!counter) {\n      throw new NotFoundException(`Counter #${counterId} not found`);\n    }\n\n    // Mark current queue as completed if exists\n    if (counter.currentQueue) {\n      counter.currentQueue.status = QueueStatus.COMPLETED;\n      counter.currentQueue.completedAt = new Date();\n      await this.queueRepository.save(counter.currentQueue);\n    }\n\n    // Find the next pending queue\n    const nextQueue = await this.queueRepository.findOne({\n      where: { status: QueueStatus.PENDING },\n      order: { createdAt: 'ASC' },\n    });\n\n    if (!nextQueue) {\n      counter.currentQueueId = null;\n      counter.currentQueue = null;\n      await this.counterRepository.save(counter);\n      return { counter, message: 'No more queues waiting' };\n    }\n\n    // Update the next queue\n    nextQueue.status = QueueStatus.SERVING;\n    nextQueue.counterNumber = counter.name;\n    await this.queueRepository.save(nextQueue);\n\n    // Update counter\n    counter.currentQueueId = nextQueue.id;\n    counter.currentQueue = nextQueue;\n    await this.counterRepository.save(counter);\n\n    // Get associated details\n    const details = await this.queueDetailsRepository.findOne({\n      where: { queueId: nextQueue.id },\n    });\n\n    const result = {\n      counter,\n      queue: nextQueue,\n      details,\n      message: 'Next queue called successfully',\n    };\n\n    if (nextQueue) {\n      // Notify the specific queue room that it's their turn\n      this.queueGateway.notifyQueueUpdate(nextQueue.id, {\n        action: 'called',\n        counterName: counter.name,\n        counterId: counter.id,\n      });\n    }\n\n    // Notify counter clients\n    this.queueGateway.notifyCounterUpdate(counterId, {\n      action: 'nextCalled',\n      ...result,\n    });\n\n    return result;\n  }\n\n  async getStats() {\n    const [\n      pendingCount,\n      servingCount,\n      completedCount,\n      cancelledCount,\n      totalCount,\n    ] = await Promise.all([\n      this.queueRepository.count({ where: { status: QueueStatus.PENDING } }),\n      this.queueRepository.count({ where: { status: QueueStatus.SERVING } }),\n      this.queueRepository.count({ where: { status: QueueStatus.COMPLETED } }),\n      this.queueRepository.count({ where: { status: QueueStatus.CANCELLED } }),\n      this.queueRepository.count(),\n    ]);\n\n    // Calculate average wait time\n    const completedQueues = await this.queueRepository.find({\n      where: {\n        status: QueueStatus.COMPLETED,\n        completedAt: LessThanOrEqual(new Date()),\n      },\n      select: ['createdAt', 'completedAt'],\n    });\n\n    let averageWaitTime = 0;\n    if (completedQueues.length > 0) {\n      const totalWaitTimeMs = completedQueues.reduce((total, queue) => {\n        return (\n          total + (queue.completedAt.getTime() - queue.createdAt.getTime())\n        );\n      }, 0);\n      averageWaitTime = Math.floor(\n        totalWaitTimeMs / completedQueues.length / 60000,\n      ); // Convert to minutes\n    }\n\n    return {\n      pending: pendingCount,\n      serving: servingCount,\n      completed: completedCount,\n      cancelled: cancelledCount,\n      total: totalCount,\n      averageWaitTime,\n    };\n  }\n\n  // Add a counter\n  async addCounter(name: string) {\n    const counter = this.counterRepository.create({ name });\n    return await this.counterRepository.save(counter);\n  }\n\n  // Get all counters\n  async getCounters() {\n    return await this.counterRepository.find({\n      relations: ['currentQueue'],\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/register.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for user registration\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                contactNumber\n                            \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                middleName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                nameExtension\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        contactNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        nameExtension\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  MinLength,\n} from 'class-validator';\n\n/**\n * DTO for user registration\n * @class RegisterDto\n */\n\nexport class RegisterDto {\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  password: string;\n\n  @IsString()\n  @IsNotEmpty()\n  firstName: string;\n\n  @IsString()\n  @IsOptional()\n  middleName?: string;\n\n  @IsString()\n  @IsNotEmpty()\n  lastName: string;\n\n  @IsString()\n  @IsOptional()\n  name?: string;\n\n  @IsString()\n  @IsOptional()\n  nameExtension?: string;\n\n  @IsString()\n  contactNumber?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser.html":{"url":"interfaces/RequestWithUser.html","title":"interface - RequestWithUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  Get,\n  UseGuards,\n  Request,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\n\ninterface RequestWithUser extends Request {\n  user: { sub: number; email: string; roles: string[] };\n}\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @Post('login')\n  async login(@Body() loginDto: LoginDto) {\n    console.log('Login request received:', loginDto);\n    try {\n      const result = await this.authService.login(loginDto);\n      return result;\n    } catch (error) {\n      throw new UnauthorizedException(\n        error instanceof Error ? error.message : 'Invalid credentials',\n      );\n    }\n  }\n\n  @Post('register')\n  async register(@Body() registerDto: RegisterDto) {\n    console.log('Register endpoint hit with data:', registerDto); //Debugging Statement\n    return this.authService.register(registerDto);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  getProfile(@Request() req: RequestWithUser) {\n    // Add null check before converting to number\n    if (!req.user || req.user.sub === undefined || req.user.sub === null) {\n      throw new UnauthorizedException('Invalid user ID');\n    }\n    return this.authService.getProfile(Number(req.user.sub));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser-1.html":{"url":"interfaces/RequestWithUser-1.html","title":"interface - RequestWithUser-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/roles.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ROLES_KEY } from '../decorators/roles.decorator';\n\n// Define interface for request with user\ninterface RequestWithUser extends Request {\n  user?: { roles?: string[] };\n}\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(\n      ROLES_KEY,\n      [context.getHandler(), context.getClass()],\n    );\n\n    if (!requiredRoles) {\n      return true;\n    }\n\n    const request = context.switchToHttp().getRequest();\n    const userRoles = request.user?.roles || [];\n    return requiredRoles.some((role) => userRoles.includes(role));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Role.html":{"url":"entities/Role.html","title":"entity - Role","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Role\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/entities/role.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, user => user.roles)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:16\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, PrimaryGeneratedColumn, ManyToMany } from 'typeorm';\nimport { User } from '../../users/entities/user.entity';\n\n@Entity('roles')\nexport class Role {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true, nullable: false })\n  name: string;\n\n  @Column({ nullable: true })\n  description: string;\n\n  @ManyToMany(() => User, (user) => user.roles)\n  users: User[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RolesController.html":{"url":"controllers/RolesController.html","title":"controller - RolesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RolesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/roles.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                roles\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                getUserRoles\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@Roles('admin', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/roles/roles.controller.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@Roles('admin', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/roles/roles.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getUserRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserRoles(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('user/:userId')@Roles('admin', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/roles/roles.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, UseGuards } from '@nestjs/common';\nimport { RolesService } from './roles.service';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../auth/guards/roles.guard';\nimport { Roles } from '../auth/decorators/roles.decorator';\n\n@Controller('roles')\n@UseGuards(JwtAuthGuard, RolesGuard)\nexport class RolesController {\n  constructor(private readonly rolesService: RolesService) {}\n\n  @Get()\n  @Roles('admin', 'super_admin')\n  findAll() {\n    return this.rolesService.findAll();\n  }\n\n  @Get(':id')\n  @Roles('admin', 'super_admin')\n  findOne(@Param('id') id: string) {\n    return this.rolesService.findOne(+id);\n  }\n\n  @Get('user/:userId')\n  @Roles('admin', 'super_admin')\n  getUserRoles(@Param('userId') userId: string) {\n    return this.rolesService.getUserRoles(+userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/roles.guard.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/roles.guard.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ROLES_KEY } from '../decorators/roles.decorator';\n\n// Define interface for request with user\ninterface RequestWithUser extends Request {\n  user?: { roles?: string[] };\n}\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(\n      ROLES_KEY,\n      [context.getHandler(), context.getClass()],\n    );\n\n    if (!requiredRoles) {\n      return true;\n    }\n\n    const request = context.switchToHttp().getRequest();\n    const userRoles = request.user?.roles || [];\n    return requiredRoles.some((role) => userRoles.includes(role));\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RolesModule.html":{"url":"modules/RolesModule.html","title":"module - RolesModule","body":"\n                   \n\n\n\n\n    Modules\n    RolesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_exports\n\n\n\ncluster_RolesModule_providers\n\n\n\n\nRolesService \n\nRolesService \n\n\n\nRolesModule\n\nRolesModule\n\nRolesService  -->\n\nRolesModule->RolesService \n\n\n\n\n\nRolesService\n\nRolesService\n\nRolesModule -->\n\nRolesService->RolesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/roles/roles.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RolesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RolesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RolesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Role } from './entities/role.entity';\nimport { User } from '../users/entities/user.entity';\nimport { RolesService } from './roles.service';\nimport { RolesController } from './roles.controller';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Role, User])],\n  providers: [RolesService],\n  controllers: [RolesController],\n  exports: [RolesService],\n})\nexport class RolesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RolesService.html":{"url":"injectables/RolesService.html","title":"injectable - RolesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RolesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/roles.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                assignRolesToUser\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByName\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getUserRoles\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(rolesRepository: Repository, usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/roles/roles.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        rolesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        assignRolesToUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    assignRolesToUser(userId: number, roleIds: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roleIds\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByName\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByName(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserRoles(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Role } from './entities/role.entity';\nimport { User } from '../users/entities/user.entity';\n\n@Injectable()\nexport class RolesService {\n  constructor(\n    @InjectRepository(Role)\n    private rolesRepository: Repository,\n\n    @InjectRepository(User)\n    private usersRepository: Repository,\n  ) {}\n\n  async findAll(): Promise {\n    return this.rolesRepository.find();\n  }\n\n  async findOne(id: number): Promise {\n    const role = await this.rolesRepository.findOne({ where: { id } });\n    if (!role) {\n      throw new NotFoundException(`Role with ID ${id} not found`);\n    }\n    return role;\n  }\n\n  async findByName(name: string): Promise {\n    const role = await this.rolesRepository.findOne({ where: { name } });\n    if (!role) {\n      throw new NotFoundException(`Role with name ${name} not found`);\n    }\n    return role;\n  }\n\n  async getUserRoles(userId: number): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id: userId },\n      relations: ['roles'],\n    });\n    return user ? user.roles : [];\n  }\n\n  async assignRolesToUser(userId: number, roleIds: number[]): Promise {\n    // Find the user\n    const user = await this.usersRepository.findOne({\n      where: { id: userId },\n      relations: ['roles'],\n    });\n\n    if (!user) {\n      throw new Error('User not found');\n    }\n\n    // Find the roles\n    const roles = await this.rolesRepository.findByIds(roleIds);\n\n    // Assign roles to user\n    user.roles = roles;\n    await this.usersRepository.save(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateQueueDto.html":{"url":"classes/UpdateQueueDto.html","title":"class - UpdateQueueDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateQueueDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/dto/update-queue.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                counterNumber\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        counterNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/update-queue.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueueStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(QueueStatus)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/update-queue.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsEnum, IsOptional } from 'class-validator';\nimport { QueueStatus } from '../entities/queue.entity';\n\nexport class UpdateQueueDto {\n  @IsEnum(QueueStatus)\n  @IsOptional()\n  status?: QueueStatus;\n\n  @IsString()\n  @IsOptional()\n  counterNumber?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                contactNumber\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                defaultRole\n                            \n                            \n                                    \n                                defaultRoleId\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                middleName\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                nameExtension\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                roles\n                            \n                            \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        contactNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'contact_number', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        defaultRole\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {nullable: true})@JoinColumn({name: 'default_role_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        defaultRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'default_role_id', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'first_name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'last_name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'middle_name', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        nameExtension\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'name_extension', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined)@JoinTable({name: 'user_roles', joinColumn: undefined, inverseJoinColumn: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:22\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  ManyToOne,\n  JoinColumn,\n  ManyToMany,\n  JoinTable,\n} from 'typeorm';\nimport { Role } from '../../roles/entities/role.entity';\n\n@Entity('users')\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true })\n  email: string;\n\n  @Column({ unique: true })\n  username: string;\n\n  @Column()\n  password: string;\n\n  @Column({ name: 'first_name' })\n  firstName: string;\n\n  @Column({ name: 'middle_name', nullable: true })\n  middleName: string;\n\n  @Column({ name: 'last_name' })\n  lastName: string;\n\n  @Column()\n  name: string; // Keep for backward compatibility\n\n  @Column({ name: 'name_extension', nullable: true })\n  nameExtension: string;\n\n  @Column({ name: 'contact_number', nullable: true })\n  contactNumber: string;\n\n  @CreateDateColumn({ name: 'created_at' })\n  createdAt: Date;\n\n  @ManyToOne(() => Role, { nullable: true })\n  @JoinColumn({ name: 'default_role_id' })\n  defaultRole: Role;\n\n  @Column({ name: 'default_role_id', nullable: true })\n  defaultRoleId: number;\n\n  @ManyToMany(() => Role)\n  @JoinTable({\n    name: 'user_roles',\n    joinColumn: {\n      name: 'user_id',\n      referencedColumnName: 'id',\n    },\n    inverseJoinColumn: {\n      name: 'role_id',\n      referencedColumnName: 'id',\n    },\n  })\n  roles: Role[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './entities/user.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  exports: [TypeOrmModule],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                        src/auth/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/decorators/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/auth/dto/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                10 %\n                (1/10)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/roles.guard.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            interface\n            JwtPayload\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/config/database.config.ts\n            \n            variable\n            databaseConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            seedDatabaseIfNeeded\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/counter/entities/counter.entity.ts\n            \n            entity\n            Counter\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/queue/dto/create-queue.dto.ts\n            \n            class\n            CreateQueueDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/queue/dto/update-queue.dto.ts\n            \n            class\n            UpdateQueueDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/queue/entities/queue-details.entity.ts\n            \n            entity\n            QueueDetails\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/queue/entities/queue.entity.ts\n            \n            entity\n            Queue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/queue/queue.controller.ts\n            \n            controller\n            QueueController\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/modules/queue/queue.gateway.ts\n            \n            class\n            QueueGateway\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/modules/queue/queue.service.ts\n            \n            injectable\n            QueueService\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/roles/entities/role.entity.ts\n            \n            entity\n            Role\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/roles/roles.controller.ts\n            \n            controller\n            RolesController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/roles/roles.service.ts\n            \n            injectable\n            RolesService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^11.1.0\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.1.0\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/passport : ^11.0.5\n        \n            @nestjs/platform-express : ^11.1.0\n        \n            @nestjs/platform-socket.io : ^11.1.0\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            @nestjs/websockets : ^11.1.0\n        \n            bcrypt : ^5.1.1\n        \n            class-validator : ^0.14.1\n        \n            dotenv : ^16.5.0\n        \n            mysql2 : ^3.14.1\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.2\n        \n            socket.io : ^4.8.1\n        \n            typeorm : ^0.3.22\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CounterStatus   (src/.../counter.entity.ts)\n                        \n                        \n                            QueueStatus   (src/.../queue.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/counter/entities/counter.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        CounterStatus\n                    \n                \n                        \n                            \n                                 ACTIVE\n                            \n                        \n                        \n                            \n                                Value : active\n                            \n                        \n                        \n                            \n                                 INACTIVE\n                            \n                        \n                        \n                            \n                                Value : inactive\n                            \n                        \n            \n        \n\n    src/modules/queue/entities/queue.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        QueueStatus\n                    \n                \n                        \n                            \n                                 PENDING\n                            \n                        \n                        \n                            \n                                Value : pending\n                            \n                        \n                        \n                            \n                                 SERVING\n                            \n                        \n                        \n                            \n                                Value : serving\n                            \n                        \n                        \n                            \n                                 COMPLETED\n                            \n                        \n                        \n                            \n                                Value : completed\n                            \n                        \n                        \n                            \n                                 CANCELLED\n                            \n                        \n                        \n                            \n                                Value : cancelled\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            seedDatabaseIfNeeded   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seedDatabaseIfNeeded\n                        \n                    \n                \n            \n            \n                \nseedDatabaseIfNeeded(dataSource: DataSource)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dataSource\n                                            \n                                                        DataSource\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        QueueModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RolesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_QueueModule\n\n\n\ncluster_QueueModule_exports\n\n\n\ncluster_QueueModule_providers\n\n\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_exports\n\n\n\ncluster_RolesModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nQueueModule\n\nQueueModule\n\nAppModule -->\n\nQueueModule->AppModule\n\n\n\n\n\nQueueGateway \n\nQueueGateway \n\nQueueGateway  -->\n\nQueueModule->QueueGateway \n\n\n\n\n\nQueueService \n\nQueueService \n\nQueueService  -->\n\nQueueModule->QueueService \n\n\n\n\n\nRolesModule\n\nRolesModule\n\nAuthModule -->\n\nRolesModule->AuthModule\n\n\n\nAppModule -->\n\nRolesModule->AppModule\n\n\n\n\n\nRolesService \n\nRolesService \n\nRolesService  -->\n\nRolesModule->RolesService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nQueueService\n\nQueueService\n\nQueueModule -->\n\nQueueService->QueueModule\n\n\n\n\n\nRolesService\n\nRolesService\n\nRolesModule -->\n\nRolesService->RolesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            databaseConfig   (src/.../database.config.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/database.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        databaseConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TypeOrmModuleOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'mysql',\n  host: process.env.DB_HOST || 'localhost',\n  port: parseInt(process.env.DB_PORT || '3306'),\n  username: process.env.DB_USERNAME || 'root',\n  password: process.env.DB_PASSWORD || '',\n  database: process.env.DB_NAME || 'bulak_smart_connect',\n  entities: [__dirname + '/../**/*.entity{.ts,.js}'],\n  synchronize: process.env.NODE_ENV !== 'production',\n  logging: process.env.NODE_ENV !== 'production',\n}\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: string[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
