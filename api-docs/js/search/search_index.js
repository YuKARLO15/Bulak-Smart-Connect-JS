var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AdminUpdateUserDto.html",[0,0.125,1,1.946]],["body/classes/AdminUpdateUserDto.html",[0,0.208,1,2.823,2,1.148,3,0.105,4,0.105,5,0.105,6,4.589,7,2.555,8,2.33,9,3.458,10,2.132,11,1.821,12,1.399,13,2.223,14,3.765,15,0.202,16,0.759,17,1.431,18,3.107,19,3.458,20,3.467,21,2.958,22,2.528,23,2.2,24,2.2,25,2.958,26,2.958,27,2.971,28,2.629,29,0.51,30,0.014,31,1.217,32,1.298,33,6.01,34,1.462,35,1.786,36,1.025,37,3.447,38,3.543,39,0.745,40,3.543,41,2.428,42,3.37,43,2.814,44,1.068,45,3.543,46,3.543,47,0.819,48,4.377,49,4.377,50,4.377,51,4.377,52,4.377,53,4.377,54,3.083,55,7.465,56,3.543,57,3.37,58,3.083,59,3.543,60,3.083,61,3.543,62,2.974,63,1.022,64,3.083,65,3.543,66,2.814,67,2.781,68,3.543,69,3.37,70,2.781,71,3.543,72,3.37,73,3.626,74,3.918,75,3.626,76,2.781,77,3.543,78,3.626,79,3.67,80,3.626,81,3.37,82,4.216,83,3.083,84,3.543,85,3.083,86,3.543,87,0.168,88,3.626,89,3.57,90,3.446,91,3.626,92,3.947,93,1.442,94,4.854,95,1.235,96,2.095,97,2.224,98,1.792,99,0.168,100,2.555,101,2.781,102,2.781,103,2.224,104,2.781,105,2.374,106,2.781,107,3.083,108,3.626,109,1.442,110,0.008,111,0.008]],["title/entities/Announcement.html",[112,1.306,113,2.701]],["body/entities/Announcement.html",[0,0.152,3,0.145,4,0.145,5,0.145,8,2.076,10,2.649,15,0.279,16,0.943,29,0.535,30,0.014,31,1.059,32,1.339,34,2.111,36,1.404,39,0.768,47,0.807,87,0.163,99,0.163,110,0.01,111,0.01,112,1.583,113,4.187,114,2.16,115,4.253,116,3.046,117,5.995,118,5.995,119,3.66,120,5.995,121,4.616,122,2.955,123,4.074,124,4.886,125,5.028,126,7.675,127,5.534,128,3.922,129,4.886,130,4.904,131,4.886,132,3.66,133,4.886,134,5.438,135,3.161,136,1.967,137,4.886,138,2.732,139,4.886,140,5.438,141,4.886,142,4.967,143,4.886,144,3.883,145,1.642,146,4.886]],["title/controllers/AnnouncementController.html",[147,1.354,148,2.906]],["body/controllers/AnnouncementController.html",[0,0.143,3,0.137,4,0.137,5,0.137,11,2.423,15,0.262,17,1.296,29,0.482,30,0.014,31,1.368,32,1.28,34,1.337,36,1.539,39,0.734,63,1.025,87,0.237,99,0.154,110,0.01,111,0.01,147,1.545,148,4.331,149,1.665,150,4.001,151,2.442,152,4.597,153,1.876,154,2.445,155,3.426,156,2.9,157,5.228,158,2.9,159,4.001,160,4.74,161,3.744,162,4.597,163,2.385,164,2.359,165,4.597,166,2.032,167,3.552,168,4.597,169,4.001,170,6.007,171,4.597,172,2.326,173,3.192,174,5.228,175,2.442,176,4.331,177,4.597,178,2.572,179,5.228,180,4.025,181,4.597,182,3.552,183,3.08,184,2.442,185,2.718,186,7.362,187,2.885,188,0.779,189,4.2,190,4.001,191,2.219,192,4.715,193,2.219,194,4.597,195,1.949,196,2.122,197,4.001,198,1.714,199,4.597,200,4.597,201,4.597,202,4.597,203,3.08,204,4.597,205,3.08,206,4.597,207,3.608,208,4.597]],["title/modules/AnnouncementModule.html",[209,1.306,210,2.701]],["body/modules/AnnouncementModule.html",[0,0.176,3,0.169,4,0.169,5,0.169,30,0.014,87,0.262,99,0.19,110,0.011,111,0.011,113,3.805,148,5.316,149,2.484,188,0.962,189,5.21,190,4.942,209,2.388,210,5.4,211,2.741,212,2.741,213,3.017,214,3.017,215,2.741,216,3.917,217,3.917,218,4.942,219,4.942,220,4.942,221,3.645,222,2.621,223,2.873,224,5.678,225,3.177,226,2.056,227,5.678,228,4.942,229,3.177,230,5.678]],["title/injectables/AnnouncementService.html",[189,2.53,231,0.915]],["body/injectables/AnnouncementService.html",[0,0.127,3,0.122,4,0.122,5,0.122,11,2.29,15,0.234,17,1.287,29,0.479,30,0.014,31,1.344,34,1.194,36,1.524,39,0.727,63,1.018,87,0.244,99,0.137,110,0.009,111,0.009,113,5.011,116,2.463,119,3.36,136,1.713,145,1.379,153,1.74,154,2.574,155,3.274,156,2.69,157,4.848,158,2.69,159,3.573,160,4.694,163,2.368,164,2.284,166,2.463,169,4.848,172,2.077,173,2.96,174,4.848,175,2.96,178,2.297,179,5.098,185,2.427,188,0.696,189,3.497,191,1.982,192,4.372,193,1.982,198,1.609,226,1.486,228,3.573,231,1.264,232,1.815,233,3.573,234,2.742,235,2.179,236,4.105,237,3.431,238,4.105,239,5.571,240,4.105,241,3.362,242,4.105,243,4.105,244,4.105,245,4.105,246,4.105,247,2.427,248,2.181,249,4.105,250,1.671,251,1.837,252,4.105,253,2.556,254,6.323,255,5.571,256,3.497,257,3.733,258,4.105,259,1.379,260,1.237,261,4.105,262,1.74,263,3.497,264,4.105,265,4.105,266,1.606,267,4.105,268,2.751]],["title/controllers/AppController.html",[147,1.354,269,2.906]],["body/controllers/AppController.html",[0,0.179,3,0.172,4,0.172,5,0.172,15,0.33,30,0.014,32,1.175,39,0.674,47,0.759,87,0.232,99,0.193,110,0.011,111,0.011,147,2.33,149,2.092,153,2.166,164,2.166,188,0.979,195,2.45,196,2.668,198,1.574,269,4.999,270,5.029,271,6.704,272,7.703,273,5.779,274,6.933,275,5.779,276,1.946,277,4.662,278,5.029,279,5.779,280,5.779]],["title/modules/AppModule.html",[209,1.306,281,2.906]],["body/modules/AppModule.html",[0,0.125,3,0.119,4,0.119,5,0.119,27,1.777,28,1.572,29,0.263,30,0.014,47,0.561,87,0.268,99,0.134,110,0.009,111,0.009,114,1.777,136,1.821,149,1.988,187,3.447,188,0.681,209,2.026,210,4.868,211,1.94,212,1.94,213,2.135,214,2.135,215,1.94,216,3.323,217,2.135,221,2.917,222,1.855,223,2.033,225,2.249,226,1.455,229,3.5,234,1.845,241,2.85,251,1.088,253,2.102,266,2.148,269,4.51,277,4.56,278,3.498,281,5.906,282,3.498,283,3.498,284,3.498,285,4.868,286,4.868,287,4.868,288,4.868,289,4.296,290,4.868,291,4.019,292,5.491,293,3.975,294,2.249,295,3.498,296,2.898,297,3.154,298,4.019,299,4.019,300,4.019,301,4.019,302,3.154,303,4.019,304,4.019,305,4.019,306,4.019,307,2.898,308,4.019,309,4.019,310,4.019,311,4.019,312,2.898,313,3.498,314,3.498,315,3.498,316,4.019,317,2.898,318,4.019,319,4.019,320,4.019,321,2.898,322,4.019,323,3.498,324,3.498,325,4.779,326,4.019,327,3.247,328,4.51,329,5.443,330,3.154,331,4.019,332,2.523,333,4.019,334,4.019,335,4.019,336,2.033,337,4.019,338,5.85,339,4.019,340,3.498,341,4.019,342,4.019,343,4.019,344,4.019,345,6.722,346,5.491,347,4.31,348,4.019,349,5.491,350,3.154,351,4.019,352,3.498,353,4.019,354,4.019,355,4.019,356,2.523,357,2.898,358,4.019,359,2.693,360,4.019,361,4.019,362,4.019,363,4.019,364,4.019,365,4.019,366,4.019,367,3.498]],["title/injectables/AppService.html",[231,0.915,277,2.53]],["body/injectables/AppService.html",[0,0.191,3,0.183,4,0.183,5,0.183,15,0.351,30,0.014,39,0.598,47,0.735,87,0.206,99,0.206,110,0.012,111,0.012,153,2.247,164,1.921,188,1.042,198,1.396,231,1.633,232,2.719,271,6.841,277,4.515,368,5.352,369,6.149,370,6.149,371,6.149]],["title/entities/ApplicationStatusHistory.html",[112,1.306,372,2.701]],["body/entities/ApplicationStatusHistory.html",[0,0.137,3,0.131,4,0.131,5,0.131,15,0.334,16,0.884,29,0.518,30,0.014,31,1.184,32,1.311,36,1.338,39,0.752,47,0.79,63,1.061,87,0.196,99,0.148,110,0.01,111,0.01,112,1.433,114,1.955,122,2.383,123,3.463,127,5.386,130,4.596,132,3.488,135,3.914,136,2.023,144,3.779,145,1.486,266,1.73,276,2.197,372,3.924,373,3.961,374,6.814,375,3.849,376,3.882,377,5.714,378,6.565,379,6.565,380,6.565,381,6.565,382,4.399,383,4.387,384,2.776,385,4.596,386,5.856,387,4.596,388,4.222,389,4.422,390,6.082,391,4.422,392,4.299,393,5.863,394,4.422,395,2.963,396,5.856,397,4.422,398,5.856,399,4.422,400,4.422,401,5.856,402,4.422,403,5.856,404,4.422,405,5.096,406,4.422,407,3.676,408,3.463,409,2.475,410,2.776,411,4.422,412,3.849,413,4.422,414,2.35]],["title/entities/Appointment.html",[112,1.306,415,2.53]],["body/entities/Appointment.html",[0,0.126,3,0.121,4,0.121,5,0.121,12,1.363,15,0.233,16,0.836,20,3.041,23,2.37,24,2.37,29,0.534,30,0.014,31,1.146,32,1.372,34,1.831,36,1.284,39,0.787,44,1.228,47,0.833,63,0.567,87,0.185,99,0.185,110,0.009,111,0.009,112,1.32,114,1.801,116,2.785,121,4.221,122,2.969,123,3.725,125,3.714,132,3.347,135,3.42,136,2.021,138,2.085,142,4.542,144,4.138,145,1.369,266,2.168,276,1.767,384,2.557,407,3.479,408,3.277,415,3.479,416,3.198,417,4.944,418,4.944,419,4.944,420,3.954,421,3.954,422,3.954,423,3.954,424,2.376,425,4.074,426,4.074,427,3.198,428,4.074,429,4.074,430,4.074,431,4.074,432,4.074,433,4.074,434,4.074,435,4.074,436,4.35,437,4.074,438,4.074,439,4.074,440,4.438,441,4.181,442,4.074,443,4.074,444,2.73,445,4.35,446,5.542,447,4.074,448,4.074,449,2.165,450,2.945,451,4.35,452,3.101,453,3.479,454,4.074,455,2.938,456,3.546]],["title/controllers/AppointmentController.html",[147,1.354,457,2.906]],["body/controllers/AppointmentController.html",[0,0.08,3,0.077,4,0.077,5,0.077,8,1.198,10,2.311,11,2.347,12,1.43,15,0.147,17,1.234,29,0.459,30,0.014,31,0.437,32,1.227,36,1.539,39,0.704,47,0.814,63,0.976,87,0.239,95,0.9,96,1.526,99,0.086,110,0.007,111,0.007,122,2.948,147,0.867,149,0.934,151,1.371,153,1.242,154,2.397,155,2.632,156,1.92,158,1.92,161,2.225,163,2.311,164,2.262,166,1.141,167,2.352,175,1.371,176,1.861,178,1.444,180,1.729,182,2.869,183,1.729,184,1.371,185,3.224,187,1.62,188,0.437,191,1.246,193,1.246,195,1.094,196,1.836,198,1.619,203,1.729,205,2.665,207,2.025,234,2.733,250,1.05,251,1.077,253,1.63,259,2.09,260,2.069,276,1.878,332,2.496,356,1.62,415,4.912,418,3.808,424,0.867,440,3.422,457,2.868,458,2.246,459,5.975,460,3.461,461,3.977,462,3.461,463,3.977,464,4.852,465,3.05,466,3.045,467,2.246,468,3.904,469,3.386,470,2.246,471,2.581,472,2.665,473,2.113,474,2.012,475,2.581,476,3.154,477,2.246,478,5.222,479,2.246,480,3.977,481,2.581,482,2.246,483,5.452,484,3.977,485,2.581,486,2.581,487,2.581,488,2.581,489,2.581,490,2.246,491,3.977,492,4.223,493,2.581,494,2.581,495,2.581,496,4.279,497,4.06,498,2.581,499,2.581,500,5.414,501,3.977,502,2.581,503,2.581,504,5.124,505,2.581,506,2.581,507,2.581,508,2.581,509,4.484,510,2.246,511,2.581,512,1.444,513,2.581,514,2.581,515,1.526,516,3.482,517,2.581,518,2.581,519,3.045,520,2.246,521,3.121,522,1.306,523,1.729,524,1.526,525,2.979,526,1.861,527,0.867,528,1.861,529,1.729,530,2.025,531,2.025,532,1.729,533,4.168,534,2.665,535,1.729,536,2.581,537,2.581,538,3.482,539,1.861,540,1.444,541,2.581,542,3.946,543,2.246,544,2.581,545,4.621,546,2.581,547,2.581,548,2.025,549,3.696,550,3.977,551,2.581,552,2.581,553,2.581,554,6.22,555,2.581,556,2.025,557,1.861,558,2.581,559,2.581,560,3.977,561,3.977,562,3.045,563,2.581,564,2.246,565,2.581,566,2.581,567,2.025,568,2.025,569,2.581,570,2.581,571,2.246,572,2.581,573,4.852,574,2.581,575,2.581,576,2.012,577,3.977,578,3.977,579,3.461,580,3.121,581,3.461,582,3.461,583,3.977,584,3.977,585,2.581,586,2.581,587,1.861,588,2.581,589,2.581,590,1.861,591,2.025,592,2.581,593,2.246,594,2.581,595,2.581,596,2.581,597,2.581,598,2.581]],["title/modules/AppointmentModule.html",[209,1.306,285,2.701]],["body/modules/AppointmentModule.html",[0,0.176,3,0.169,4,0.169,5,0.169,30,0.014,87,0.262,99,0.19,110,0.011,111,0.011,149,2.484,188,0.962,209,2.388,211,2.741,212,2.741,213,3.017,214,3.017,215,2.741,216,3.917,217,3.917,221,3.645,222,2.621,223,2.873,225,3.177,226,2.056,229,3.177,285,5.4,415,3.564,457,5.316,519,5.21,520,4.942,529,3.805,599,4.942,600,4.942,601,4.942,602,5.678,603,5.678,604,5.678]],["title/injectables/AppointmentService.html",[231,0.915,519,2.53]],["body/injectables/AppointmentService.html",[0,0.068,3,0.065,4,0.065,5,0.065,11,1.806,15,0.125,17,1.224,29,0.455,30,0.014,31,1.227,36,1.505,39,0.704,47,0.788,63,0.968,79,1.377,87,0.204,96,2.07,99,0.073,109,0.893,110,0.006,111,0.006,122,3.167,145,0.737,153,1.094,154,1.778,155,2.109,156,1.69,158,1.69,163,2.253,164,2.236,166,1.548,175,1.86,178,1.227,188,0.372,191,1.059,193,1.059,198,1.551,226,0.794,231,0.794,232,0.97,234,2.702,235,1.369,237,2.523,241,3.256,247,1.297,248,1.165,250,2.481,251,2.069,253,2.248,256,3.13,257,1.47,259,2.458,260,2.016,262,1.852,263,2.197,276,1.982,357,4.824,385,1.722,415,4.673,417,4.968,418,3.914,419,4.559,424,1.176,440,3.13,450,1.165,451,1.722,452,1.227,453,1.377,456,3.802,459,4.742,460,3.802,462,3.047,466,2.742,467,1.909,468,3.646,476,0.97,482,1.909,490,3.047,492,4.34,500,4.742,504,3.802,509,4.242,512,1.227,516,1.297,519,2.197,521,2.748,529,1.47,564,1.909,571,3.047,576,2.757,605,1.909,606,4.369,607,3.501,608,4.987,609,3.501,610,4.369,611,4.987,612,2.193,613,2.193,614,3.501,615,2.193,616,2.193,617,2.193,618,2.193,619,3.501,620,2.193,621,2.193,622,2.193,623,2.193,624,3.501,625,2.193,626,2.193,627,2.193,628,2.193,629,2.193,630,2.193,631,2.193,632,2.193,633,1.722,634,2.742,635,2.193,636,2.193,637,1.909,638,1.909,639,2.193,640,2.766,641,2.193,642,2.193,643,2.193,644,3.802,645,2.193,646,4.369,647,2.193,648,3.892,649,1.909,650,2.193,651,2.193,652,2.193,653,2.193,654,3.429,655,3.501,656,5.449,657,5.055,658,4.369,659,4.369,660,1.909,661,3.501,662,3.501,663,3.501,664,3.501,665,3.501,666,4.369,667,3.501,668,2.193,669,1.771,670,2.193,671,3.501,672,2.193,673,2.684,674,3.44,675,4.277,676,1.297,677,2.193,678,2.193,679,2.193,680,1.909,681,2.193,682,2.193,683,2.193,684,3.501,685,3.501,686,3.501,687,2.193,688,2.193,689,4.369,690,1.909,691,2.193,692,2.193,693,2.193,694,1.377,695,2.193,696,2.193,697,1.909,698,2.193,699,2.193,700,2.193,701,2.193,702,2.193,703,2.193,704,3.596,705,2.193,706,3.501,707,2.193,708,2.193,709,2.193,710,2.193,711,2.193,712,2.193,713,2.748,714,3.501,715,3.047,716,2.748,717,3.047,718,1.582,719,5.808,720,2.193,721,2.193,722,2.193,723,3.501,724,2.193,725,2.193,726,2.193,727,2.193,728,1.165,729,1.165,730,1.582,731,4.369,732,1.86,733,3.501,734,3.501,735,2.193,736,1.909,737,3.501,738,2.193]],["title/controllers/AuthController.html",[147,1.354,739,2.701]],["body/controllers/AuthController.html",[0,0.074,1,2.738,3,0.071,4,0.071,5,0.071,8,2.449,10,1.954,11,2.53,12,1.426,13,1.053,14,3.477,15,0.136,16,0.788,17,0.998,22,2.451,28,2.548,29,0.513,30,0.014,31,0.961,32,0.961,35,1.465,36,1.283,39,0.551,41,1.803,44,1.389,47,0.736,63,0.838,87,0.229,95,0.83,97,2.893,99,0.08,110,0.006,111,0.006,147,0.8,149,0.862,151,1.265,153,1.167,161,1.332,163,1.837,164,1.772,182,2.726,184,1.265,188,0.404,193,1.15,195,1.009,198,1.287,234,2.387,251,0.645,253,1.549,259,2.022,260,1.813,262,1.954,276,2.105,336,2.641,424,1.255,469,1.724,472,2.503,474,2.641,476,2.308,496,1.869,497,1.408,515,1.408,522,1.205,524,1.408,525,1.89,527,1.549,532,1.595,533,4.032,534,5.064,535,1.595,538,2.726,539,3.324,540,2.921,542,3.8,549,1.494,576,2.332,590,5.039,640,1.954,669,2.332,673,1.954,674,2.962,676,2.209,732,3.197,739,2.503,740,1.869,741,3.618,742,2.932,743,3.8,744,3.251,745,4.012,746,2.381,747,3.642,748,3.618,749,5.671,750,4.543,751,3.251,752,2.932,753,2.932,754,2.381,755,2.381,756,2.381,757,4.698,758,2.381,759,5.237,760,5.237,761,3.713,762,3.251,763,4.609,764,5.67,765,5.237,766,2.381,767,3.251,768,3.251,769,3.251,770,2.381,771,2.693,772,2.072,773,5.237,774,5.237,775,3.735,776,2.381,777,2.381,778,3.251,779,2.381,780,4.339,781,2.072,782,2.072,783,5.121,784,2.503,785,2.932,786,2.381,787,2.381,788,2.381,789,2.072,790,4.089,791,2.381,792,4.543,793,4.543,794,3.735,795,2.381,796,2.381,797,2.381,798,2.072,799,4.089,800,2.381,801,3.324,802,2.381,803,2.381,804,2.381,805,2.381,806,2.381,807,2.381,808,2.381,809,2.381,810,2.381,811,3.277,812,2.726,813,1.869,814,1.869,815,1.869,816,2.072,817,1.408,818,1.717,819,2.072,820,1.717,821,3.251,822,4.935,823,0.8,824,2.072,825,2.072,826,2.932,827,2.209,828,2.693,829,2.09,830,3.618,831,2.072,832,2.072,833,1.869,834,1.869,835,2.072,836,3.324,837,3.324,838,2.449,839,2.072,840,2.072,841,2.072,842,1.494,843,2.072,844,1.717,845,2.072,846,2.072,847,1.869,848,1.869,849,3.089,850,3.367,851,3.324,852,4.012,853,3.618,854,5.237,855,2.893,856,2.072,857,2.072,858,2.072,859,3.251,860,2.693,861,2.072,862,1.869,863,2.072,864,2.072,865,2.072,866,2.072]],["title/modules/AuthModule.html",[209,1.306,286,2.701]],["body/modules/AuthModule.html",[0,0.155,3,0.148,4,0.148,5,0.148,12,0.913,30,0.014,87,0.27,99,0.167,110,0.01,111,0.01,149,2.296,188,0.847,198,1.135,209,2.255,211,2.413,212,2.413,213,2.656,214,2.656,215,2.413,216,3.699,217,3.699,221,3.369,222,2.308,223,2.529,225,2.797,226,1.81,229,3.548,286,5.472,289,4.566,293,4.117,294,2.797,302,3.923,312,3.604,313,4.35,449,2.656,739,4.666,812,4.829,813,3.923,820,3.604,867,4.35,868,4.35,869,4.35,870,4.999,871,4.829,872,4.999,873,4.999,874,3.923,875,6.34,876,3.138,877,4.999,878,4.999,879,4.999,880,2.956,881,4.999,882,4.999,883,4.999,884,4.999,885,4.999,886,4.999,887,4.999,888,4.35]],["title/injectables/AuthService.html",[231,0.915,812,2.383]],["body/injectables/AuthService.html",[0,0.045,1,1.86,3,0.043,4,0.043,5,0.043,9,0.854,10,2.143,11,2.312,12,1.425,14,3.022,15,0.082,17,0.981,18,0.768,21,1.253,22,2.519,23,1.449,24,1.223,25,2.192,26,1.949,27,3.25,28,2.26,29,0.378,30,0.014,31,1.061,34,1.551,35,1.945,36,1.136,39,0.542,43,1.819,44,1.161,47,0.516,62,1.465,63,0.919,87,0.193,96,0.854,97,1.555,98,2.819,99,0.048,110,0.004,111,0.004,136,0.671,138,1.223,145,0.485,153,0.774,154,0.588,158,2.092,163,1.805,164,1.666,185,1.465,188,0.245,193,0.698,198,1.475,226,0.523,231,0.562,232,0.639,234,2.279,235,0.969,237,1.949,241,1.05,248,0.768,250,2.268,251,2.121,253,2.538,259,2.557,260,2.238,262,2.143,266,1.849,321,1.786,340,1.257,350,3.968,356,1.555,414,2.047,424,1.872,449,0.768,476,2.09,497,1.465,516,3.416,527,2.279,545,1.944,562,0.907,576,2.558,591,3.023,634,2.418,637,4.4,640,2.653,644,2.155,648,0.808,669,2.819,673,2.707,674,3.423,676,2.795,694,2.04,729,2.303,732,2.686,741,2.551,742,1.944,743,1.66,744,2.155,748,4.373,783,1.786,784,0.968,789,2.155,790,3.626,798,2.155,799,2.967,801,1.042,811,2.04,812,1.465,814,1.134,815,1.134,817,0.854,826,1.944,827,0.854,829,2.829,833,1.134,836,3.846,837,1.786,838,2.834,849,0.968,850,1.386,851,1.042,855,2.04,860,3.409,862,1.944,874,1.134,880,0.854,889,1.257,890,2.477,891,2.477,892,2.477,893,2.477,894,1.257,895,5.056,896,2.558,897,1.445,898,1.66,899,1.445,900,1.445,901,3.353,902,2.477,903,1.445,904,2.477,905,1.445,906,1.445,907,1.445,908,2.477,909,1.445,910,2.477,911,1.445,912,0.907,913,2.477,914,1.445,915,2.778,916,1.555,917,1.042,918,0.968,919,3.992,920,3.852,921,1.445,922,3.25,923,3.968,924,3.968,925,5.056,926,3.968,927,4.4,928,4.4,929,4.4,930,4.334,931,1.445,932,1.445,933,1.042,934,1.042,935,1.445,936,2.829,937,1.445,938,2.477,939,3.25,940,1.445,941,1.445,942,1.445,943,1.445,944,3.968,945,3.25,946,2.778,947,1.786,948,1.786,949,2.178,950,3.125,951,2.477,952,1.445,953,1.134,954,2.581,955,2.581,956,1.786,957,1.445,958,1.386,959,1.042,960,3.023,961,1.445,962,2.778,963,2.344,964,3.25,965,2.778,966,1.786,967,2.477,968,2.477,969,1.445,970,2.477,971,2.477,972,3.353,973,2.155,974,3.353,975,1.445,976,1.786,977,1.042,978,1.66,979,1.445,980,1.445,981,1.042,982,2.477,983,1.445,984,3.25,985,1.445,986,1.445,987,1.445,988,1.445,989,1.445,990,1.445,991,1.445,992,1.445,993,1.445,994,1.445,995,1.445,996,0.968,997,1.445,998,2.477,999,2.477,1000,0.968,1001,2.178,1002,3.25,1003,1.445,1004,1.445,1005,3.25,1006,0.968,1007,1.445,1008,1.819,1009,1.257,1010,2.278,1011,3.25,1012,1.445,1013,1.445,1014,1.445,1015,1.786,1016,3.25,1017,1.445,1018,2.477,1019,1.042,1020,3.25,1021,1.042,1022,2.477,1023,1.042,1024,3.25,1025,1.042,1026,1.445,1027,1.786,1028,1.445,1029,2.477,1030,1.445,1031,2.477,1032,1.445,1033,1.445,1034,4.334,1035,2.477,1036,1.445,1037,1.445,1038,2.477,1039,0.968,1040,1.445,1041,1.445,1042,3.25,1043,1.66,1044,3.25,1045,2.477,1046,2.344,1047,1.445,1048,3.852,1049,1.445,1050,1.445,1051,1.445,1052,1.445,1053,1.445,1054,1.445,1055,2.477,1056,1.445,1057,1.445,1058,1.445,1059,2.477,1060,1.445,1061,1.445,1062,2.477,1063,1.445,1064,1.257,1065,1.445,1066,1.445,1067,2.829,1068,1.257,1069,1.445,1070,1.445,1071,1.134,1072,3.852,1073,1.445,1074,1.257,1075,2.477,1076,1.445,1077,2.477,1078,1.445,1079,1.445,1080,3.25,1081,1.445,1082,4.334,1083,1.445,1084,1.134,1085,1.445,1086,2.477,1087,1.445,1088,1.445,1089,2.477,1090,1.445,1091,1.445,1092,1.445,1093,1.445,1094,1.445,1095,1.445,1096,1.445,1097,1.257,1098,2.392,1099,1.445,1100,1.445,1101,1.445,1102,3.353,1103,1.445,1104,2.477,1105,1.445,1106,1.445,1107,1.445,1108,1.445,1109,1.257,1110,1.445]],["title/interfaces/AuthenticatedUser.html",[469,1.861,823,1.354]],["body/interfaces/AuthenticatedUser.html",[0,0.153,3,0.146,4,0.146,5,0.146,13,2.18,15,0.281,16,0.948,22,2.941,29,0.453,30,0.014,31,1.235,35,1.384,36,1.534,39,0.48,41,3.34,44,1.486,47,0.769,63,0.686,87,0.244,99,0.21,110,0.01,111,0.01,188,0.836,195,2.09,198,1.119,231,1.426,251,1.973,259,2.112,260,1.894,266,1.929,293,4.091,294,2.759,328,3.555,424,2.112,469,3.194,527,2.627,811,3.095,823,2.112,855,3.095,871,2.916,876,3.095,880,3.717,947,4.988,948,3.555,950,3.555,996,3.304,1111,2.759,1112,3.555,1113,3.87,1114,3.87,1115,4.933,1116,3.555,1117,4.211,1118,3.87,1119,3.87,1120,3.555,1121,3.87,1122,4.636,1123,3.87,1124,3.87,1125,3.304,1126,3.87,1127,3.87,1128,3.87,1129,3.87,1130,3.87,1131,3.87,1132,3.87,1133,3.87,1134,3.87,1135,3.87,1136,3.87,1137,3.87]],["title/entities/Counter.html",[112,1.306,1138,2.383]],["body/entities/Counter.html",[0,0.155,3,0.149,4,0.149,5,0.149,15,0.286,16,0.958,29,0.506,30,0.014,31,1.242,32,1.281,34,1.845,36,1.42,39,0.735,44,1.509,47,0.648,63,1.053,87,0.212,99,0.212,110,0.01,111,0.01,112,1.622,114,2.213,125,3.355,132,3.702,135,3.706,136,1.887,144,3.825,145,1.682,276,1.955,392,2.961,408,3.753,441,4.47,444,3.355,445,4.981,850,4.099,1138,3.753,1139,3.929,1140,6.064,1141,6.968,1142,3.729,1143,4.357,1144,6.346,1145,7.326,1146,6.346,1147,5.007,1148,5.007,1149,5.007,1150,5.007,1151,5.933,1152,5.007,1153,5.523,1154,5.007,1155,3.983,1156,4.576,1157,5.007,1158,5.007]],["title/classes/CreateAnnouncementDto.html",[0,0.125,160,2.53]],["body/classes/CreateAnnouncementDto.html",[0,0.207,2,1.76,3,0.161,4,0.161,5,0.161,8,2.179,15,0.31,16,1.008,17,1.387,29,0.507,30,0.014,32,1.312,39,0.753,47,0.824,87,0.182,89,3.482,90,3.574,93,2.211,99,0.182,110,0.011,111,0.011,117,6.292,118,6.292,119,3.842,120,6.292,138,2.512,160,4.191,1159,6.86,1160,4.263,1161,5.811,1162,5.432,1163,5.811,1164,5.432,1165,5.432,1166,5.432,1167,5.432,1168,5.432,1169,4.538,1170,5.241]],["title/classes/CreateAppointmentDto.html",[0,0.125,468,2.53]],["body/classes/CreateAppointmentDto.html",[0,0.189,2,1.521,3,0.139,4,0.139,5,0.139,15,0.268,16,0.919,17,1.337,20,3.264,23,2.543,24,2.543,29,0.527,30,0.014,31,1.032,32,1.364,39,0.782,47,0.841,87,0.204,89,3.569,90,3.618,93,1.911,99,0.157,110,0.01,111,0.01,138,2.291,276,1.897,417,5.306,419,5.306,420,4.243,421,4.243,422,4.243,423,4.243,424,2.272,440,4.243,468,3.823,529,3.147,1161,4.087,1169,4.919,1171,7.045,1172,3.686,1173,7.595,1174,4.696,1175,4.696,1176,4.696,1177,4.696,1178,4.696,1179,4.696,1180,4.696,1181,4.696,1182,4.696,1183,4.696,1184,4.087,1185,4.696,1186,4.696,1187,3.147,1188,6.091,1189,4.087]],["title/classes/CreateDocumentApplicationDto.html",[0,0.125,1190,2.701]],["body/classes/CreateDocumentApplicationDto.html",[0,0.19,2,1.53,3,0.14,4,0.14,5,0.14,8,2.238,15,0.27,16,0.923,17,1.381,23,1.777,24,1.777,29,0.498,30,0.014,32,1.215,37,3.326,39,0.697,47,0.732,87,0.227,89,3.129,90,3.129,93,1.923,95,1.647,99,0.158,110,0.01,111,0.01,266,2.391,276,1.716,336,3.093,373,3.757,376,4.64,382,4.543,409,4.332,410,2.965,441,2.793,562,4.5,1098,3.093,1187,3.165,1190,4.097,1191,6.462,1192,3.707,1193,5.9,1194,6.158,1195,5.9,1196,4.888,1197,6.114,1198,6.114,1199,4.799,1200,4.799,1201,5.321,1202,4.724,1203,4.111,1204,4.724,1205,4.724,1206,5.321,1207,6.114,1208,6.114,1209,4.097,1210,4.724,1211,4.724,1212,6.114,1213,6.114,1214,4.724,1215,6.114,1216,3.406,1217,3.757,1218,4.724,1219,4.724,1220,4.724,1221,4.724,1222,4.724,1223,4.724,1224,4.724,1225,5.321,1226,4.724,1227,4.724]],["title/classes/CreateQueueDto.html",[0,0.125,1228,2.701]],["body/classes/CreateQueueDto.html",[0,0.194,2,1.583,3,0.145,4,0.145,5,0.145,15,0.279,16,0.943,17,1.415,20,3.326,23,2.592,24,2.592,29,0.522,30,0.014,31,1.059,32,1.352,39,0.776,47,0.844,87,0.163,89,3.602,90,3.647,93,1.989,99,0.163,110,0.01,111,0.01,138,2.351,420,4.324,421,4.324,422,4.324,423,4.324,424,2.315,1163,6.319,1169,4.71,1170,4.904,1228,4.187,1229,6.999,1230,3.835,1231,4.967,1232,5.995,1233,4.886,1234,4.886,1235,4.886,1236,4.886,1237,4.886,1238,4.886,1239,4.886,1240,4.886,1241,4.886,1242,4.886]],["title/classes/CreateUserDto.html",[0,0.125,1243,2.383]],["body/classes/CreateUserDto.html",[0,0.159,2,1.178,3,0.108,4,0.108,5,0.108,7,2.623,8,2.457,12,1.431,15,0.208,16,0.773,17,1.41,18,3.152,19,3.508,20,1.756,21,3.001,22,2.722,23,2.232,24,2.232,25,3.001,26,3.001,27,3.001,28,2.655,29,0.513,30,0.014,31,1.194,32,1.305,34,1.49,35,1.807,36,1.045,37,3.263,39,0.749,41,2.474,42,3.434,43,2.867,44,1.096,47,0.822,57,3.434,62,3.03,63,1.072,66,2.867,69,3.434,72,3.434,73,3.695,74,4.719,75,2.623,80,3.695,81,3.434,82,4.277,87,0.171,88,3.695,89,3.411,90,3.467,91,4.277,92,4.022,93,1.481,94,4.637,95,1.269,99,0.122,103,4.042,105,4.315,108,2.623,110,0.008,111,0.008,136,1.388,327,3.03,649,5.163,958,2.867,1010,3.03,1169,4.042,1217,3.434,1243,3.03,1244,6.762,1245,5.679,1246,4.459,1247,3.638,1248,3.638,1249,3.434,1250,3.638,1251,3.638,1252,4.042,1253,4.459,1254,3.638,1255,3.638,1256,5.124,1257,3.638,1258,3.166,1259,5.604,1260,3.638,1261,3.166,1262,4.022,1263,4.459,1264,3.638,1265,3.166,1266,5.124,1267,3.638,1268,3.166,1269,4.459,1270,3.638,1271,3.638,1272,3.638,1273,4.459,1274,3.638,1275,4.459,1276,3.638,1277,3.166,1278,3.638,1279,3.166]],["title/entities/DocumentApplication.html",[112,1.306,383,2.53]],["body/entities/DocumentApplication.html",[0,0.109,3,0.149,4,0.104,5,0.173,12,1.309,15,0.285,16,0.755,29,0.527,30,0.014,31,1.075,32,1.32,34,1.454,36,1.187,39,0.757,44,1.06,47,0.711,63,1.052,87,0.212,99,0.195,110,0.008,111,0.008,112,1.139,114,1.554,116,2.574,121,3.902,122,2.582,123,2.958,125,3.352,127,4.198,128,3.14,130,3.926,135,3.823,136,2.071,142,3.607,144,3.705,145,1.181,266,2.481,276,1.78,372,4.25,373,3.968,376,2.079,382,3.902,383,3.14,384,2.207,388,4.573,392,3.963,393,3.926,395,2.356,405,4.353,407,3.14,408,2.958,409,1.967,414,1.868,424,1.957,441,4.469,444,2.356,449,1.868,450,2.658,1193,5.067,1194,5.748,1195,5.067,1199,2.76,1200,4.57,1206,4.353,1280,5.656,1281,2.76,1282,4.57,1283,5.823,1284,5.823,1285,5.002,1286,3.516,1287,5.002,1288,3.516,1289,3.926,1290,3.516,1291,4.25,1292,4.353,1293,5.002,1294,3.516,1295,5.002,1296,5.002,1297,3.516,1298,3.516,1299,3.516,1300,5.002,1301,3.516,1302,4.832,1303,3.516,1304,5.002,1305,5.002,1306,5.002,1307,3.516,1308,3.516,1309,3.06,1310,4.353,1311,3.516,1312,4.978,1313,3.516,1314,3.516,1315,5.002,1316,5.067,1317,3.06,1318,3.06,1319,3.06,1320,3.06,1321,4.353,1322,3.06,1323,2.535,1324,3.06,1325,3.06,1326,3.06,1327,3.06,1328,3.06,1329,4.353,1330,3.926,1331,4.353,1332,4.353,1333,3.06,1334,2.535,1335,2.76,1336,3.06,1337,3.06,1338,3.06,1339,3.516,1340,3.516,1341,3.516,1342,3.516,1343,3.516,1344,3.516]],["title/controllers/DocumentApplicationsController.html",[147,1.354,1345,2.906]],["body/controllers/DocumentApplicationsController.html",[0,0.067,3,0.064,4,0.064,5,0.197,8,2.003,10,2.879,11,2.189,12,1.481,15,0.123,17,1.17,29,0.453,30,0.014,32,1.172,36,1.534,39,0.673,44,1.893,47,0.808,63,0.926,87,0.231,95,0.749,99,0.072,110,0.006,111,0.006,136,0.582,147,0.722,149,0.778,151,1.142,153,1.076,154,2.195,155,2.08,156,1.662,158,1.662,161,1.927,163,2.154,164,2.161,166,0.95,167,1.271,173,1.142,175,1.142,176,1.549,178,1.202,180,1.44,182,2.914,183,1.44,184,1.142,185,2.548,187,1.349,188,0.364,191,1.037,193,1.037,196,0.992,198,1.594,203,1.44,205,3.614,207,1.686,234,2.685,235,0.84,241,1.46,250,0.875,251,1.755,253,1.656,259,0.722,260,1.485,262,2.089,266,0.84,276,1.866,307,5.066,327,1.271,336,1.087,373,3.554,376,4.527,382,1.44,409,3.626,410,1.349,424,2.393,465,2.758,466,2.705,469,3.643,470,1.87,472,2.307,473,1.83,474,2.729,476,3.003,478,3.553,497,4.016,510,1.87,512,1.202,515,1.271,516,2.036,522,1.087,523,1.44,524,1.271,525,1.087,526,1.549,527,0.722,528,1.549,530,1.686,531,1.686,532,1.44,533,4.708,534,3.857,535,1.44,538,1.271,539,1.549,540,1.202,542,4.635,545,5.218,548,3.382,549,2.705,557,2.483,562,1.349,581,5.261,587,1.549,704,1.549,757,3.553,761,1.83,771,3.553,780,1.549,784,3.302,785,2.703,827,1.271,901,2.997,912,2.161,933,2.483,934,1.549,949,1.44,1043,2.307,1046,1.549,1098,1.087,1190,3.302,1216,1.549,1282,5.218,1302,2.483,1345,2.483,1346,1.87,1347,5.261,1348,4.309,1349,4.928,1350,4.309,1351,4.309,1352,4.309,1353,2.149,1354,2.149,1355,2.149,1356,3.443,1357,2.149,1358,2.149,1359,2.149,1360,2.149,1361,2.149,1362,2.149,1363,2.149,1364,5.755,1365,2.779,1366,1.87,1367,2.149,1368,2.149,1369,4.309,1370,2.149,1371,2.149,1372,2.149,1373,3.443,1374,2.483,1375,2.149,1376,2.149,1377,2.149,1378,2.149,1379,3.443,1380,3.868,1381,2.149,1382,4.309,1383,2.149,1384,3.443,1385,2.149,1386,2.149,1387,2.149,1388,4.928,1389,3.553,1390,2.149,1391,4.309,1392,2.149,1393,2.149,1394,2.149,1395,3.382,1396,5.009,1397,2.149,1398,2.149,1399,2.997,1400,2.149,1401,3.443,1402,3.443,1403,1.549,1404,1.549,1405,2.149,1406,1.87,1407,1.87,1408,3.107,1409,1.87,1410,2.997,1411,2.149,1412,2.149,1413,2.149,1414,2.149,1415,2.149,1416,2.149,1417,2.149,1418,1.87,1419,1.037,1420,3.443,1421,2.149,1422,2.149,1423,3.443,1424,2.149,1425,2.149,1426,2.149,1427,2.149,1428,2.149,1429,2.149,1430,2.149,1431,2.149,1432,1.87,1433,4.309,1434,1.686,1435,2.149,1436,2.149,1437,2.149,1438,2.149,1439,6.283,1440,1.87,1441,2.149,1442,2.149,1443,2.149,1444,2.149,1445,2.149,1446,2.149,1447,2.149,1448,2.149,1449,2.149,1450,2.149,1451,2.149,1452,2.149,1453,2.149,1454,2.149,1455,2.149,1456,1.271,1457,2.149,1458,2.149,1459,2.149,1460,2.149,1461,2.149]],["title/modules/DocumentApplicationsModule.html",[209,1.306,287,2.701]],["body/modules/DocumentApplicationsModule.html",[0,0.163,3,0.156,4,0.156,5,0.156,30,0.014,87,0.268,99,0.176,110,0.011,111,0.011,149,2.372,188,0.892,209,2.31,211,2.542,212,2.542,213,2.798,214,2.798,215,2.542,216,3.788,217,3.788,221,3.48,222,2.431,223,2.664,225,2.946,226,1.907,229,2.946,276,1.477,287,5.454,307,3.797,372,4.389,373,2.664,383,4.111,409,3.665,410,3.305,1216,4.723,1291,4.389,1317,4.582,1318,4.582,1345,5.141,1408,5.928,1409,4.582,1462,4.582,1463,4.582,1464,4.582,1465,4.862,1466,5.265,1467,5.265,1468,5.265,1469,5.265,1470,5.265]],["title/entities/DocumentFile.html",[112,1.306,1291,2.701]],["body/entities/DocumentFile.html",[0,0.136,3,0.13,4,0.13,5,0.13,15,0.332,16,0.879,29,0.521,30,0.014,31,1.181,32,1.325,36,1.333,39,0.76,47,0.806,63,1.075,87,0.195,99,0.147,110,0.01,111,0.01,112,1.421,114,1.939,122,2.371,123,3.444,127,5.692,128,3.656,132,3.474,134,5.069,135,2.947,136,1.578,140,5.069,144,3.847,145,1.474,373,3.994,376,3.867,377,5.691,383,4.372,384,2.753,385,4.571,387,4.571,388,3.163,390,6.063,392,4.407,393,4.571,395,2.939,407,3.656,408,3.444,409,2.455,410,2.753,412,3.818,414,2.331,1280,5.692,1291,3.903,1396,5.691,1418,5.691,1471,3.818,1472,6.539,1473,6.539,1474,6.539,1475,6.539,1476,5.824,1477,3.818,1478,4.387,1479,4.387,1480,5.824,1481,5.824,1482,4.387,1483,5.824,1484,4.387,1485,5.824,1486,5.824,1487,4.387,1488,5.824,1489,4.387,1490,4.387,1491,5.824,1492,4.387,1493,5.824,1494,4.387,1495,4.387,1496,4.387]],["title/interfaces/FindAllOptions.html",[823,1.354,1497,2.701]],["body/interfaces/FindAllOptions.html",[0,0.072,1,1.763,3,0.069,4,0.069,5,0.069,10,0.981,11,1.86,12,1.383,14,1.763,15,0.132,16,0.551,17,0.984,18,3.158,19,3.515,21,2.83,22,2.608,23,2.427,24,2.341,25,3.439,26,3.359,27,2.628,28,2.758,29,0.336,30,0.014,31,1.228,34,0.673,35,1.979,36,1.493,43,2.043,44,1.944,47,0.678,63,0.828,66,1.294,87,0.222,98,2.289,99,0.122,109,0.942,110,0.006,111,0.006,116,1.023,119,2.404,136,0.627,138,0.87,145,0.777,154,0.942,158,2.184,166,1.023,173,3.427,175,1.229,188,0.392,191,1.117,198,1.574,209,0.749,226,0.838,231,0.829,234,2.231,235,0.905,237,1.847,241,2.638,247,1.368,248,1.229,250,1.486,251,2.161,253,2.56,256,1.452,257,1.55,259,2.231,260,2.001,262,2.178,263,2.292,268,1.55,414,2.972,465,1.294,512,1.294,516,1.368,527,2.369,540,1.294,576,2.289,634,1.452,640,0.981,648,2.043,669,1.847,673,0.981,674,2,694,1.452,728,1.94,729,1.229,732,2.972,817,2.159,823,1.227,829,3.482,838,2.972,896,2.289,898,1.55,915,1.668,916,2.292,917,1.668,918,1.55,919,4.555,946,2.633,949,2.447,954,2.447,955,3.983,956,2.633,958,1.294,959,1.668,962,2.633,963,2.633,965,2.633,966,2.633,976,2.633,977,1.668,978,1.55,981,1.668,1000,1.55,1001,2.447,1006,2.447,1008,1.294,1010,2.675,1015,1.668,1019,2.633,1021,1.668,1023,2.633,1025,1.668,1027,2.633,1098,1.17,1111,1.294,1243,2.675,1249,1.55,1365,2.184,1419,1.763,1456,1.368,1497,3.032,1498,1.668,1499,3.906,1500,4.794,1501,1.668,1502,1.668,1503,1.55,1504,3.443,1505,3.443,1506,3.032,1507,3.032,1508,3.032,1509,2.875,1510,3.032,1511,2.866,1512,1.294,1513,1.816,1514,1.816,1515,1.816,1516,1.816,1517,3.551,1518,2.866,1519,1.816,1520,1.816,1521,2.866,1522,2.447,1523,1.816,1524,1.816,1525,1.816,1526,1.816,1527,1.816,1528,1.816,1529,2.866,1530,1.816,1531,2.866,1532,1.668,1533,1.816,1534,4.033,1535,1.816,1536,1.816,1537,2.866,1538,4.033,1539,2.866,1540,1.816,1541,1.816,1542,1.816,1543,1.816,1544,1.816,1545,1.816,1546,1.816,1547,1.816,1548,1.816,1549,2.866,1550,3.551,1551,1.816,1552,2.866,1553,1.816,1554,1.816,1555,2.866,1556,1.668,1557,1.816,1558,1.816,1559,1.816,1560,1.816,1561,2.866,1562,1.816,1563,1.816,1564,2.866,1565,1.816,1566,1.816,1567,1.816,1568,1.816,1569,1.816,1570,1.816,1571,1.816,1572,1.816,1573,1.816,1574,1.816,1575,1.816,1576,2.866,1577,1.816,1578,1.816,1579,1.816,1580,1.816,1581,1.668,1582,1.816,1583,1.668]],["title/injectables/JwtAuthGuard.html",[231,0.915,522,2.039]],["body/injectables/JwtAuthGuard.html",[0,0.194,3,0.186,4,0.186,5,0.186,13,3.212,30,0.014,87,0.243,99,0.209,110,0.012,111,0.012,188,1.06,231,1.649,232,2.766,522,3.676,876,3.926,1584,5.444,1585,5.444,1586,7.266,1587,6.256]],["title/interfaces/JwtPayload.html",[823,1.354,1117,2.701]],["body/interfaces/JwtPayload.html",[0,0.152,3,0.146,4,0.146,5,0.146,13,2.173,15,0.281,16,0.947,17,1.104,22,2.939,29,0.452,30,0.014,31,1.233,35,1.379,36,1.279,39,0.478,41,2.373,44,1.481,47,0.798,63,0.684,87,0.243,99,0.21,110,0.01,111,0.01,188,0.833,195,2.084,198,1.116,231,1.424,251,1.971,259,2.108,260,1.89,266,1.923,293,4.085,294,2.751,328,3.545,424,2.108,469,2.896,527,2.625,811,3.086,823,2.108,855,3.086,871,2.907,876,3.086,880,3.709,947,4.981,948,5.247,950,3.545,996,3.294,1111,2.751,1112,3.545,1113,3.858,1114,3.858,1115,4.923,1116,3.545,1117,4.629,1118,3.858,1119,3.858,1120,3.545,1121,3.858,1122,4.629,1123,3.858,1124,3.858,1125,3.294,1126,3.858,1127,3.858,1128,3.858,1129,3.858,1130,3.858,1131,3.858,1132,3.858,1133,3.858,1134,3.858,1135,3.858,1136,3.858,1137,3.858]],["title/injectables/JwtStrategy.html",[231,0.915,871,2.383]],["body/injectables/JwtStrategy.html",[0,0.151,3,0.144,4,0.144,5,0.144,13,2.755,15,0.278,17,1.097,22,2.727,29,0.408,30,0.014,31,1.056,35,1.365,36,1.27,39,0.669,41,2.349,44,1.466,47,0.702,63,0.957,87,0.242,99,0.208,110,0.01,111,0.01,153,1.946,163,2.018,164,1.52,188,0.824,195,2.062,198,1.104,231,1.414,232,2.151,235,1.903,251,1.963,259,2.094,260,1.878,266,1.903,293,4.533,294,2.722,328,3.508,424,2.094,469,3.173,527,2.436,811,3.053,823,2.094,855,3.053,871,3.685,876,3.053,880,3.685,947,5.227,948,3.508,950,3.508,960,4.89,996,3.26,1112,3.508,1113,3.818,1114,3.818,1115,4.89,1116,3.508,1117,4.857,1118,3.818,1119,3.818,1120,3.508,1121,4.89,1122,4.607,1123,3.818,1124,3.818,1125,3.26,1126,3.818,1127,3.818,1128,3.818,1129,3.818,1130,3.818,1131,4.89,1132,3.818,1133,3.818,1134,3.818,1135,3.818,1136,3.818,1137,3.818,1588,4.234,1589,4.865,1590,4.865]],["title/classes/LoginDto.html",[0,0.125,790,2.53]],["body/classes/LoginDto.html",[0,0.226,2,1.799,3,0.165,4,0.165,5,0.165,8,2.2,9,4.002,12,1.388,15,0.317,16,1.021,22,2.546,27,3.444,28,2.647,29,0.443,30,0.014,32,1.147,37,3.222,39,0.658,47,0.776,81,3.721,87,0.226,90,3.124,93,2.26,95,1.936,99,0.186,100,4.003,110,0.011,111,0.011,743,5.092,790,4.582,1169,4.582,1196,4.88,1217,3.693,1591,4.832,1592,7.3,1593,5.552,1594,5.552,1595,5.89,1596,5.552,1597,5.552]],["title/injectables/MinioService.html",[231,0.915,1465,2.383]],["body/injectables/MinioService.html",[0,0.134,3,0.128,4,0.128,5,0.193,15,0.247,16,0.87,17,1.142,29,0.486,30,0.014,34,1.257,39,0.737,47,0.811,63,0.964,87,0.193,99,0.145,110,0.01,111,0.01,136,1.171,153,1.802,163,2.103,164,2.028,172,2.187,188,0.733,196,2.997,198,1.309,231,1.309,232,1.911,234,2.619,235,2.539,241,3.147,250,3.172,253,2.181,259,2.181,260,1.956,317,3.117,332,4.347,640,2.752,673,2.752,674,3.446,842,2.713,860,4.68,1122,2.897,1380,3.393,1395,5.095,1456,2.556,1465,3.411,1598,3.762,1599,5.649,1600,5.649,1601,5.02,1602,5.768,1603,5.649,1604,5.768,1605,5.02,1606,4.323,1607,6.91,1608,5.768,1609,4.323,1610,3.762,1611,4.323,1612,5.02,1613,4.323,1614,5.649,1615,4.323,1616,4.527,1617,3.762,1618,4.323,1619,3.393,1620,4.323,1621,3.762,1622,3.762,1623,4.323,1624,3.762,1625,4.323,1626,3.762,1627,4.323,1628,3.762,1629,5.649,1630,4.323,1631,3.762,1632,3.762,1633,3.762,1634,3.762,1635,3.762,1636,3.762,1637,3.393,1638,3.762,1639,3.762,1640,3.762,1641,5.02,1642,3.762,1643,4.323,1644,3.762,1645,3.762,1646,4.323,1647,3.762,1648,4.323]],["title/injectables/MinioService-1.html",[109,1.37,231,0.764,1465,1.99]],["body/injectables/MinioService-1.html",[0,0.1,3,0.14,4,0.096,5,0.207,15,0.184,16,0.71,17,1.191,29,0.478,30,0.014,31,0.94,34,1.367,39,0.731,47,0.805,63,0.972,87,0.186,99,0.108,109,1.914,110,0.008,111,0.008,122,1.313,136,1.274,151,2.499,153,1.469,163,2.191,164,2.182,172,2.379,188,0.547,195,1.368,196,2.561,198,1.384,231,1.067,232,1.427,234,2.695,235,1.262,241,3.221,250,2.97,251,2.008,253,2.347,259,2.178,260,1.953,266,1.262,293,4,294,1.806,317,4.001,332,3.827,373,3.844,473,1.715,474,2.807,640,2.747,673,2.747,674,3.444,680,2.809,704,2.327,732,1.715,838,3.239,842,3.827,933,3.391,1122,3.718,1282,2.533,1380,2.533,1395,4.355,1399,2.809,1456,1.908,1465,2.781,1588,2.809,1599,4.829,1600,4.829,1601,4.093,1603,4.829,1605,4.093,1607,6.731,1610,2.809,1612,4.093,1614,4.829,1616,3.691,1617,2.809,1619,2.533,1621,2.809,1622,4.829,1624,4.829,1626,2.809,1628,2.809,1629,5.887,1631,2.809,1632,2.809,1633,2.809,1634,2.809,1635,2.809,1636,2.809,1637,2.533,1638,2.809,1639,2.809,1640,2.809,1641,4.093,1642,2.809,1644,2.809,1645,4.093,1647,2.809,1649,2.809,1650,6.096,1651,4.703,1652,5.548,1653,4.703,1654,6.765,1655,4.703,1656,3.227,1657,3.227,1658,4.703,1659,3.227,1660,3.227,1661,6.096,1662,3.227,1663,4.703,1664,3.227,1665,3.227,1666,3.227,1667,3.227,1668,3.227,1669,2.327,1670,6.096,1671,3.227,1672,3.227,1673,3.227,1674,3.227,1675,3.227,1676,3.227,1677,3.227,1678,3.227,1679,3.227,1680,3.227,1681,3.227,1682,2.809,1683,3.227,1684,3.227,1685,3.227,1686,3.227,1687,3.227,1688,4.703,1689,5.64,1690,3.227,1691,3.227,1692,4.093,1693,3.227,1694,3.227,1695,3.227,1696,3.227,1697,3.227,1698,3.227,1699,3.227,1700,3.227,1701,4.703,1702,3.227,1703,3.227,1704,3.227,1705,3.227,1706,3.227,1707,3.227,1708,3.227,1709,3.227]],["title/classes/PaginatedUsersResponseDto.html",[0,0.125,1710,3.163]],["body/classes/PaginatedUsersResponseDto.html",[0,0.154,2,1.607,3,0.147,4,0.147,5,0.147,8,2.43,12,0.906,15,0.283,16,0.952,29,0.504,30,0.014,31,1.403,32,1.278,37,3.096,39,0.733,41,3.046,44,1.495,87,0.211,95,1.73,99,0.166,109,2.568,110,0.01,111,0.01,128,3.96,173,3.686,728,4.16,828,4.549,1217,3.898,1252,4.583,1365,3.956,1374,4.549,1419,3.525,1499,4.914,1532,5.003,1710,4.952,1711,6.706,1712,3.324,1713,4.961,1714,4.952,1715,4.961,1716,4.317,1717,6.309,1718,4.961,1719,4.318,1720,4.317,1721,4.317,1722,3.577]],["title/entities/Queue.html",[112,1.306,1142,1.946]],["body/entities/Queue.html",[0,0.138,3,0.132,4,0.132,5,0.132,15,0.253,16,0.885,29,0.518,30,0.014,31,1.186,32,1.328,34,1.706,36,1.34,39,0.762,44,1.336,47,0.715,63,1.013,87,0.22,99,0.196,110,0.01,111,0.01,112,1.436,114,1.96,116,2.906,122,2.847,123,3.469,125,2.971,132,3.493,135,3.916,136,2.142,144,3.782,145,1.49,276,1.845,392,4.137,395,2.971,441,4.303,450,3.117,452,3.283,453,3.682,455,4.23,1138,4.633,1142,3.174,1143,3.859,1153,5.106,1209,4.876,1289,4.604,1292,3.859,1316,5.106,1723,3.48,1724,4.74,1725,5.16,1726,5.16,1727,4.74,1728,5.866,1729,4.434,1730,5.106,1731,4.434,1732,5.866,1733,4.434,1734,4.434,1735,4.137,1736,5.866,1737,4.434,1738,5.866,1739,4.434,1740,4.434,1741,5.866,1742,4.434,1743,4.303,1744,4.434,1745,3.48,1746,3.48,1747,3.682,1748,4.434,1749,3.48]],["title/controllers/QueueController.html",[147,1.354,1750,2.906]],["body/controllers/QueueController.html",[0,0.068,3,0.065,4,0.065,5,0.065,9,2.572,10,1.844,11,1.575,12,1.358,15,0.124,17,1.258,29,0.497,30,0.014,31,0.369,32,1.3,34,1.012,36,1.489,39,0.746,42,1.46,44,1.311,47,0.791,63,1.007,87,0.218,96,2.059,99,0.073,110,0.006,111,0.006,122,1.417,136,1.471,138,0.82,147,0.732,149,0.789,151,1.158,153,1.088,154,1.417,155,2.398,156,1.681,161,1.948,163,2.315,164,2.396,166,0.963,167,2.059,172,2.513,178,1.219,180,2.333,182,4.032,183,1.46,184,1.158,185,2.059,188,0.369,191,1.052,193,1.052,196,1.607,197,1.896,198,1.757,203,1.46,205,1.46,222,2.293,234,2.429,235,0.852,250,1.417,251,1.569,253,1.825,259,1.461,260,1.311,266,1.701,276,1.913,327,1.288,336,2.2,356,2.186,420,3.635,424,1.946,441,1.288,449,1.158,450,1.158,452,1.219,465,2.78,466,2.73,473,1.158,474,2.2,476,2.401,512,1.219,515,1.288,522,1.102,523,1.46,524,1.288,530,1.71,538,2.938,543,3.03,556,2.733,562,1.368,579,3.03,580,1.71,587,2.511,590,1.571,640,1.844,669,1.102,673,1.844,674,2.878,675,2.733,676,2.938,713,1.71,729,1.158,736,1.896,761,1.85,827,1.288,834,1.71,838,2.639,842,3.118,850,1.219,880,1.288,912,3.635,924,2.733,933,3.136,934,1.571,953,2.733,960,1.71,1006,1.46,1010,1.288,1039,1.46,1046,3.136,1098,1.762,1142,3.45,1209,3.881,1228,4.845,1231,1.571,1365,1.052,1403,2.511,1432,1.896,1440,3.03,1509,2.434,1583,1.571,1727,2.511,1743,3.212,1747,1.368,1750,2.511,1751,1.896,1752,3.03,1753,3.03,1754,3.482,1755,4.349,1756,3.03,1757,3.03,1758,4.968,1759,4.968,1760,4.968,1761,4.968,1762,4.968,1763,4.323,1764,3.03,1765,3.03,1766,3.03,1767,4.323,1768,3.03,1769,2.179,1770,3.482,1771,2.179,1772,1.896,1773,3.482,1774,2.179,1775,2.733,1776,2.179,1777,3.482,1778,2.179,1779,1.896,1780,6.677,1781,2.179,1782,2.179,1783,2.179,1784,2.179,1785,2.179,1786,2.179,1787,1.896,1788,3.482,1789,2.179,1790,1.896,1791,3.482,1792,2.179,1793,3.482,1794,2.179,1795,2.179,1796,3.482,1797,2.179,1798,3.482,1799,2.179,1800,3.482,1801,2.179,1802,3.482,1803,2.179,1804,3.482,1805,2.179,1806,2.179,1807,3.482,1808,2.179,1809,2.179,1810,3.482,1811,2.179,1812,2.179,1813,3.482,1814,2.179,1815,2.179,1816,3.482,1817,2.179,1818,2.179,1819,2.179,1820,3.482,1821,2.179,1822,2.179,1823,4.231,1824,2.179,1825,2.179,1826,3.482,1827,2.179,1828,2.179,1829,2.434,1830,1.571,1831,3.03,1832,1.368,1833,2.73,1834,1.896,1835,2.179,1836,1.71,1837,3.785,1838,1.896,1839,1.896,1840,2.179,1841,3.482,1842,5.04,1843,2.179,1844,2.733,1845,3.785,1846,2.179,1847,3.03,1848,2.179,1849,2.179,1850,2.179,1851,2.179,1852,3.916,1853,3.03,1854,4.727,1855,2.179,1856,2.179,1857,1.896,1858,2.179,1859,2.179,1860,2.179,1861,2.179,1862,2.179,1863,2.179,1864,2.179,1865,2.179,1866,2.179,1867,2.179,1868,1.896,1869,1.896,1870,2.179,1871,1.71,1872,2.179,1873,1.896,1874,2.179,1875,2.179,1876,2.179,1877,2.179,1878,2.179,1879,4.349,1880,2.179,1881,2.179,1882,3.482,1883,1.896,1884,2.179,1885,2.179,1886,2.179,1887,2.179,1888,2.179,1889,2.179,1890,2.179,1891,2.179,1892,2.179,1893,2.179,1894,2.179,1895,2.179,1896,2.179,1897,2.179,1898,2.179,1899,2.179,1900,2.179,1901,2.179,1902,1.896,1903,2.179,1904,2.179,1905,1.896,1906,2.179,1907,2.179,1908,2.733,1909,1.896,1910,2.179,1911,1.896,1912,2.179,1913,2.179]],["title/entities/QueueDetails.html",[112,1.306,1735,2.383]],["body/entities/QueueDetails.html",[0,0.124,3,0.119,4,0.119,5,0.119,12,1.357,15,0.229,16,0.826,20,3.014,23,2.348,24,2.348,29,0.521,30,0.014,31,1.23,32,1.348,34,1.593,36,1.273,39,0.773,47,0.817,63,1.091,87,0.209,99,0.134,110,0.009,111,0.009,112,1.297,114,1.77,132,3.317,135,3.881,136,2.078,138,2.06,144,3.964,145,1.345,266,2.142,356,3.438,384,3.438,387,5.268,388,2.887,392,4.537,407,3.918,408,3.691,420,3.918,421,3.918,422,3.918,423,3.918,424,2.098,436,3.143,444,2.683,445,5.268,449,2.127,850,3.065,1142,3.704,1231,4.501,1312,5.268,1477,3.485,1735,3.239,1914,6.962,1915,3.485,1916,4.501,1917,4.004,1918,5.477,1919,4.004,1920,4.767,1921,4.004,1922,4.004,1923,5.477,1924,4.004,1925,4.767,1926,4.004,1927,5.477,1928,4.004,1929,5.477,1930,4.004,1931,4.767,1932,6.712,1933,5.477,1934,4.004,1935,4.004,1936,5.477,1937,4.004,1938,5.477,1939,4.004,1940,4.004,1941,4.004,1942,4.004]],["title/classes/QueueGateway.html",[0,0.125,1943,2.383]],["body/classes/QueueGateway.html",[0,0.11,2,1.144,3,0.105,4,0.105,5,0.105,11,1.817,15,0.202,16,0.757,17,1.313,29,0.501,30,0.014,31,1.339,32,1.138,34,1.027,39,0.744,63,1.039,87,0.224,99,0.118,110,0.008,111,0.008,136,1.359,153,1.823,161,1.976,163,2.416,164,2.29,172,1.786,188,0.599,196,3.099,198,1.442,234,2.597,235,1.963,250,2.732,251,1.359,253,2.256,260,1.512,293,4.243,294,1.976,312,2.546,332,3.989,336,3.774,474,1.786,476,2.809,830,2.772,849,2.366,953,2.772,1043,2.366,1071,4.581,1138,2.088,1142,2.818,1637,2.772,1669,3.618,1682,3.073,1775,4.988,1829,4.015,1830,2.546,1853,4.367,1916,5.173,1943,2.967,1944,3.073,1945,5.836,1946,5.836,1947,6.07,1948,5.018,1949,5.018,1950,5.018,1951,5.018,1952,5.018,1953,5.018,1954,5.018,1955,5.018,1956,3.531,1957,5.018,1958,5.018,1959,3.531,1960,5.836,1961,5.018,1962,8.049,1963,3.531,1964,7.175,1965,7.332,1966,5.018,1967,3.531,1968,5.018,1969,5.018,1970,3.531,1971,5.018,1972,5.018,1973,3.531,1974,5.018,1975,5.018,1976,3.531,1977,5.018,1978,5.018,1979,3.531,1980,5.018,1981,3.531,1982,5.018,1983,3.531,1984,5.018,1985,3.531,1986,3.073,1987,4.367,1988,2.772,1989,3.531,1990,5.018,1991,3.531,1992,3.531,1993,3.531,1994,3.531,1995,3.531,1996,3.531,1997,3.531,1998,3.073,1999,5.018,2000,3.073,2001,5.836,2002,3.531,2003,3.531,2004,3.531,2005,3.531,2006,3.531,2007,4.367,2008,3.531,2009,3.531,2010,3.531,2011,5.836,2012,3.531,2013,3.531,2014,3.073,2015,2.772,2016,3.531,2017,3.531,2018,3.531,2019,5.018,2020,3.531,2021,3.531]],["title/modules/QueueModule.html",[209,1.306,288,2.701]],["body/modules/QueueModule.html",[0,0.157,3,0.15,4,0.15,5,0.15,30,0.014,87,0.272,99,0.169,110,0.011,111,0.011,149,2.314,188,0.858,209,2.268,211,2.443,212,2.443,213,2.689,214,2.689,215,2.443,216,3.721,217,3.721,221,3.395,222,2.336,223,2.56,225,2.832,226,1.833,229,2.832,288,5.453,295,4.405,296,3.649,327,2.993,367,4.405,1138,3.778,1142,3.085,1403,3.649,1404,3.649,1735,3.778,1745,3.972,1746,3.972,1750,5.049,1829,4.577,1830,3.649,1832,3.177,1833,5.134,1834,4.405,1943,4.705,1988,5.015,2022,4.405,2023,4.405,2024,4.405,2025,5.061,2026,5.049,2027,5.061,2028,5.061,2029,3.972,2030,4.405,2031,5.061]],["title/injectables/QueueSchedulerService.html",[231,0.915,1833,2.53]],["body/injectables/QueueSchedulerService.html",[0,0.097,3,0.093,4,0.093,5,0.093,10,1.324,15,0.178,16,0.693,17,0.958,29,0.3,30,0.014,32,0.529,34,0.908,39,0.65,63,0.835,87,0.224,99,0.104,110,0.008,111,0.008,116,2.956,122,3.036,145,1.049,153,1.434,163,1.487,164,1.875,172,1.579,188,0.529,196,2.513,198,0.709,222,3.273,226,1.13,231,1.042,232,1.38,234,2.536,235,1.795,237,3.036,241,1.946,248,1.659,250,2.886,251,2.044,253,2.383,260,2.248,262,1.324,276,1.939,296,2.251,327,1.846,330,2.45,332,3.767,450,3.672,452,3.867,453,4.542,473,1.659,474,1.579,557,4.327,568,2.45,593,6.493,633,2.45,640,1.946,648,4.117,654,5.018,673,1.946,674,2.827,697,2.717,716,2.45,718,2.251,728,3.397,1068,2.717,1098,1.579,1142,3.712,1262,2.45,1434,3.603,1509,1.747,1689,2.717,1724,3.31,1743,1.846,1747,2.881,1749,3.603,1767,5.223,1768,5.223,1832,1.96,1833,2.881,1852,5.306,1854,3.995,1902,2.717,1908,5.855,1909,2.717,1911,2.717,1943,4.087,2000,2.717,2014,2.717,2015,2.45,2029,2.45,2032,6.015,2033,2.717,2034,6.001,2035,4.59,2036,2.717,2037,4.59,2038,3.995,2039,3.122,2040,4.59,2041,3.995,2042,5.443,2043,4.59,2044,3.122,2045,4.59,2046,7.548,2047,3.122,2048,5.443,2049,3.122,2050,4.59,2051,3.122,2052,2.717,2053,2.717,2054,4.737,2055,3.122,2056,3.122,2057,3.122,2058,3.122,2059,3.122,2060,2.251,2061,5.223,2062,4.59,2063,4.59,2064,5.223,2065,3.995,2066,3.122,2067,3.995,2068,6.686,2069,4.59,2070,4.59,2071,3.995,2072,4.59,2073,4.59,2074,3.122,2075,4.737,2076,4.59,2077,2.717,2078,3.122,2079,3.122,2080,2.717,2081,3.122,2082,3.122,2083,3.122,2084,3.122,2085,3.122,2086,3.122,2087,3.122,2088,2.717,2089,3.122,2090,3.122,2091,3.122,2092,3.122,2093,3.122,2094,3.122,2095,5.223,2096,2.717,2097,3.122,2098,2.717,2099,3.122,2100,3.122,2101,3.122,2102,3.122]],["title/injectables/QueueService.html",[231,0.915,1829,2.255]],["body/injectables/QueueService.html",[0,0.046,3,0.044,4,0.044,5,0.044,9,0.873,11,1.589,12,0.603,15,0.084,17,1.131,20,0.712,23,0.555,24,0.555,29,0.421,30,0.014,31,1.244,36,1.256,39,0.655,42,2.213,44,0.445,47,0.644,62,1.491,63,0.925,87,0.188,96,0.873,99,0.049,109,1.59,110,0.004,111,0.004,116,2.381,122,1.786,138,0.555,145,0.496,153,0.788,154,1.786,155,1.886,156,1.217,158,0.712,163,2.082,164,2.075,166,1.115,178,1.411,187,0.926,188,0.25,191,0.712,193,0.712,198,1.699,222,1.164,226,0.534,231,0.572,232,0.652,234,2.643,235,0.986,237,2.947,241,1.069,247,0.873,248,0.784,250,1.59,251,2.108,253,2.537,256,2.754,259,1.809,260,1.899,262,2.027,263,0.926,276,2.048,312,1.064,321,1.064,327,0.873,336,0.746,356,1.583,357,1.818,359,0.989,414,2.541,420,3.001,421,0.926,422,0.926,423,0.926,424,2.018,450,2.861,452,3.013,453,0.926,465,2.186,473,2.332,474,1.276,476,3.015,567,1.158,568,1.158,576,0.746,591,1.979,633,1.158,634,1.583,640,1.4,648,3.768,654,3.066,657,3.819,660,1.284,669,1.671,673,1.4,674,2.842,675,1.158,676,3.021,690,1.284,694,0.926,713,1.979,715,2.195,716,1.979,717,2.195,718,1.064,728,1.754,729,1.34,732,0.784,752,1.158,753,1.979,836,1.818,837,1.818,838,1.34,844,1.064,849,0.989,850,1.848,851,1.064,923,1.158,924,2.592,934,1.064,996,0.989,1000,0.989,1001,0.989,1008,0.826,1009,2.195,1010,0.873,1039,2.213,1043,0.989,1046,2.381,1074,1.284,1097,1.284,1098,1.671,1102,1.284,1109,1.284,1138,3.324,1140,2.195,1142,3.864,1151,1.979,1209,4.89,1228,2.941,1231,1.064,1273,1.284,1279,1.284,1374,1.064,1403,1.064,1404,1.064,1419,0.712,1434,1.979,1509,2.456,1522,1.69,1556,1.818,1714,1.158,1724,1.818,1726,1.158,1727,3.448,1730,2.874,1735,1.491,1743,3.021,1745,1.158,1746,1.158,1747,2.452,1749,3.444,1752,2.195,1753,2.195,1756,2.195,1757,2.195,1763,3.4,1764,2.195,1765,2.195,1766,2.195,1772,2.195,1775,3.066,1779,2.195,1787,2.195,1790,2.195,1823,3.608,1829,1.411,1831,2.195,1832,0.926,1836,1.158,1838,1.284,1839,3.819,1842,2.195,1844,1.158,1845,3.819,1847,1.284,1852,5.071,1871,1.158,1873,3.819,1883,1.284,1908,3.066,1916,4.201,1943,3.184,1988,1.158,1998,1.284,2007,5.861,2015,2.592,2029,1.158,2030,1.284,2036,1.284,2038,2.195,2052,1.284,2054,1.284,2060,2.817,2061,2.195,2064,2.195,2065,1.284,2067,3.819,2071,1.284,2075,1.284,2077,3.4,2080,3.4,2088,3.4,2095,4.687,2096,3.819,2098,1.284,2103,1.284,2104,2.522,2105,3.302,2106,2.522,2107,3.302,2108,3.302,2109,1.476,2110,2.522,2111,1.476,2112,1.476,2113,2.522,2114,1.476,2115,1.476,2116,1.476,2117,1.476,2118,1.476,2119,2.522,2120,1.476,2121,2.522,2122,1.476,2123,1.476,2124,1.476,2125,2.522,2126,1.476,2127,2.522,2128,1.476,2129,2.522,2130,1.476,2131,1.476,2132,1.476,2133,1.476,2134,1.476,2135,1.476,2136,1.476,2137,1.284,2138,2.522,2139,2.522,2140,1.476,2141,1.476,2142,1.476,2143,1.476,2144,1.476,2145,1.476,2146,1.476,2147,2.522,2148,1.476,2149,3.302,2150,1.476,2151,1.476,2152,1.476,2153,1.476,2154,1.476,2155,1.476,2156,1.476,2157,1.476,2158,1.476,2159,2.522,2160,1.476,2161,1.979,2162,1.284,2163,1.476,2164,2.522,2165,1.476,2166,3.302,2167,2.522,2168,1.476,2169,1.476,2170,1.476,2171,1.476,2172,1.284,2173,1.476,2174,1.476,2175,1.476,2176,1.476,2177,1.476,2178,1.476,2179,2.522,2180,1.476,2181,1.476,2182,1.476,2183,1.476,2184,1.476,2185,1.476,2186,1.476,2187,1.476,2188,1.476,2189,2.522,2190,1.476,2191,1.476,2192,1.476,2193,1.476,2194,1.476,2195,3.906,2196,2.522,2197,2.522,2198,2.522,2199,1.476,2200,1.476,2201,1.476,2202,1.284,2203,3.906,2204,4.446,2205,1.284,2206,2.522,2207,1.284,2208,3.906,2209,1.476,2210,1.476,2211,2.522,2212,1.476,2213,1.476,2214,1.476,2215,3.906,2216,4.388,2217,1.476,2218,1.476,2219,1.476,2220,3.302,2221,1.476,2222,1.476,2223,1.476,2224,1.476,2225,3.302,2226,3.302,2227,2.522,2228,1.476,2229,1.476,2230,1.476,2231,1.476,2232,2.522,2233,2.522,2234,1.476,2235,1.476,2236,1.476,2237,1.476,2238,1.476,2239,1.476,2240,1.476,2241,1.476,2242,1.476,2243,1.476,2244,1.476,2245,2.522,2246,2.522,2247,1.284,2248,1.476,2249,1.284,2250,1.476,2251,1.284,2252,1.284,2253,1.476,2254,1.284,2255,1.476,2256,3.906,2257,1.476,2258,2.522,2259,1.476,2260,1.476,2261,1.476,2262,1.476,2263,1.476,2264,1.476,2265,4.388,2266,2.522,2267,3.302,2268,1.284,2269,1.476,2270,1.476,2271,1.476,2272,2.522,2273,1.476,2274,2.522,2275,1.476,2276,2.195,2277,1.476,2278,1.476,2279,1.476,2280,1.476,2281,1.476,2282,1.476,2283,1.476,2284,1.476,2285,1.476,2286,1.476,2287,1.476,2288,1.476,2289,1.476,2290,3.302,2291,2.522,2292,2.522,2293,1.476,2294,1.476,2295,1.476,2296,1.476,2297,1.476,2298,2.522,2299,1.476,2300,1.476,2301,1.476,2302,1.476,2303,2.522,2304,1.476,2305,1.476,2306,1.476,2307,1.476,2308,1.476,2309,1.476,2310,1.476,2311,1.476,2312,1.476,2313,1.476]],["title/controllers/QueuesController.html",[147,1.354,2026,2.906]],["body/controllers/QueuesController.html",[0,0.108,3,0.104,4,0.104,5,0.104,12,1.059,15,0.199,17,0.876,20,2.402,23,2.378,24,2.378,29,0.326,30,0.014,32,0.983,36,1.458,39,0.564,47,0.788,63,0.693,87,0.194,99,0.117,110,0.008,111,0.008,116,2.563,147,1.173,149,1.264,151,1.854,153,1.811,163,1.612,164,1.811,167,2.942,184,1.854,188,0.591,195,1.479,196,1.611,198,1.517,234,2.5,251,2.044,253,1.948,259,2.245,260,1.499,262,1.479,276,1.774,359,3.334,421,3.123,422,3.123,423,3.968,424,1.948,450,2.644,452,1.953,476,2.795,640,2.458,673,2.458,676,3.738,718,2.516,729,3.081,823,1.173,842,3.968,844,2.516,850,4.352,1008,1.953,1043,2.338,1067,6.474,1142,3.226,1209,4.655,1419,1.685,1724,4.181,1725,4.551,1726,2.739,1727,4.181,1735,3.738,1743,2.064,1747,3.123,1829,3.245,1830,2.516,1832,2.19,1836,2.739,1844,3.905,1852,5.505,1868,3.037,1869,3.037,1871,4.551,1916,2.516,1931,5.046,2026,3.588,2060,2.516,2172,3.037,2202,5.046,2204,5.501,2205,5.046,2207,5.046,2247,5.501,2249,3.037,2251,3.037,2252,3.037,2276,5.046,2314,3.037,2315,4.975,2316,4.975,2317,6.321,2318,3.49,2319,3.49,2320,3.49,2321,4.33,2322,3.49,2323,4.975,2324,3.49,2325,3.49,2326,3.49,2327,3.49,2328,3.49,2329,3.49,2330,5.798,2331,3.49,2332,2.739,2333,4.975,2334,4.975,2335,3.49,2336,3.49,2337,3.49,2338,3.49,2339,3.49,2340,3.49,2341,3.49,2342,3.49,2343,3.49,2344,3.49,2345,5.798,2346,5.798,2347,5.798,2348,5.798,2349,3.49,2350,5.798,2351,5.798,2352,3.49,2353,5.798,2354,3.49,2355,3.49,2356,4.975,2357,3.49,2358,3.49,2359,3.49,2360,3.49,2361,3.49,2362,3.49,2363,3.49,2364,3.49,2365,3.49,2366,3.49,2367,3.49,2368,3.49]],["title/classes/RegisterDto.html",[0,0.125,799,2.53]],["body/classes/RegisterDto.html",[0,0.195,2,1.312,3,0.12,4,0.12,5,0.12,8,2.344,9,3.263,12,1.446,15,0.231,16,0.833,17,1.369,20,2.665,21,3.176,22,2.654,23,2.362,24,2.362,25,3.176,26,3.176,27,3.119,28,2.76,29,0.503,30,0.014,31,0.935,32,1.303,33,5.292,37,3.454,39,0.748,47,0.832,57,3.698,62,3.263,63,1.109,66,3.088,67,3.178,69,3.698,70,3.178,72,3.698,73,3.979,74,4.207,75,3.979,76,3.178,78,3.979,79,3.941,80,3.979,81,3.698,82,4.527,87,0.185,88,3.979,89,3.113,90,3.55,93,1.648,94,4.429,95,1.412,99,0.135,100,2.919,101,3.178,102,3.178,103,3.941,104,4.928,105,3.698,106,3.178,110,0.009,111,0.009,743,3.698,799,3.941,801,3.979,958,3.088,1169,4.57,1196,5.088,1217,3.684,1262,4.331,1263,4.803,2369,3.524,2370,4.049,2371,4.049,2372,4.049,2373,4.049,2374,4.049,2375,4.049,2376,4.049,2377,4.049,2378,4.049,2379,4.049,2380,4.049,2381,4.049,2382,4.049,2383,4.049,2384,4.049]],["title/interfaces/RequestWithUser.html",[747,2.141,823,1.354]],["body/interfaces/RequestWithUser.html",[0,0.09,1,2.515,3,0.086,4,0.086,5,0.086,8,2.375,10,1.841,11,2.443,12,1.425,13,1.92,14,3.257,15,0.165,16,0.982,22,2.331,28,2.424,29,0.518,30,0.014,31,1.05,35,1.219,36,1.326,41,2.097,44,1.57,47,0.749,63,0.403,87,0.242,95,1.01,97,2.726,99,0.097,110,0.007,111,0.007,147,0.974,161,1.621,182,3.08,184,1.539,188,0.491,193,1.399,195,1.228,198,1.406,234,1.944,251,0.785,253,1.75,259,2.186,260,1.961,262,1.841,276,2.176,336,2.927,424,0.974,469,2.671,472,1.941,474,2.635,497,1.713,515,1.713,522,1.466,524,1.713,525,2.197,527,1.75,532,1.941,533,4.36,534,5.228,535,1.941,538,3.08,539,3.756,540,2.914,542,4.153,549,1.819,576,2.635,590,4.691,640,2.208,669,2.197,673,2.208,674,3.137,676,2.568,732,2.767,739,1.941,740,2.274,741,2.274,743,2.91,745,2.521,747,3.293,748,2.274,750,3.779,751,2.521,752,2.274,753,2.274,757,4.172,759,4.533,760,4.533,761,3.77,762,2.521,764,5.035,765,5.035,767,2.521,768,2.521,769,2.521,771,2.089,773,4.533,774,4.533,778,2.521,780,3.756,783,4.864,784,1.941,790,3.89,792,3.779,793,3.779,799,3.89,801,3.131,811,3.631,812,3.08,813,2.274,814,2.274,815,2.274,816,2.521,817,1.713,818,2.089,819,2.521,820,2.089,821,3.779,822,5.393,823,0.974,824,2.521,825,2.521,826,3.408,827,2.568,828,3.131,829,2.43,830,4.088,831,2.521,832,2.521,833,2.274,834,2.274,835,2.521,836,3.756,837,3.756,838,2.767,839,2.521,840,2.521,841,2.521,842,1.819,843,2.521,844,2.089,845,2.521,846,2.521,847,2.274,848,2.274,849,3.49,850,3.64,851,3.756,852,4.533,853,4.088,854,5.662,855,3.269,856,2.521,857,2.521,858,2.521,859,3.779,860,3.131,861,2.521,862,2.274,863,2.521,864,2.521,865,2.521,866,2.521,1111,1.621]],["title/interfaces/RequestWithUser-1.html",[109,1.37,747,1.788,823,1.131]],["body/interfaces/RequestWithUser-1.html",[3,0.177,4,0.177,5,0.177,12,1.45,15,0.339,16,1.064,29,0.389,30,0.014,87,0.236,99,0.199,110,0.012,111,0.012,188,1.008,198,1.35,251,1.91,336,3.009,469,3.665,476,2.629,747,3.748,761,3.16,820,4.288,823,1.998,1111,3.328,2385,4.668,2386,6.138,2387,5.086,2388,5.176,2389,5.176,2390,5.176]],["title/interfaces/RequestWithUser-2.html",[108,2.427,747,1.788,823,1.131]],["body/interfaces/RequestWithUser-2.html",[0,0.161,3,0.154,4,0.154,5,0.154,12,1.396,13,2.87,15,0.296,16,0.98,17,1.142,29,0.464,30,0.014,35,1.988,41,3.42,47,0.796,63,0.986,87,0.237,99,0.174,110,0.011,111,0.011,136,1.406,138,1.952,188,0.88,195,2.2,198,1.473,231,1.473,251,2.01,525,2.626,527,1.744,747,3.449,761,3.944,818,3.742,823,2.181,827,3.069,912,4.075,944,4.073,1008,2.904,1039,3.478,1084,4.073,1111,2.904,1669,3.742,2332,4.073,2387,4.681,2391,4.073,2392,5.649,2393,6.165,2394,4.073,2395,4.681,2396,4.517,2397,4.517,2398,5.649,2399,4.517,2400,4.517,2401,4.517,2402,4.517,2403,4.517,2404,4.517,2405,4.517,2406,4.517,2407,4.517]],["title/entities/Role.html",[35,1.131,112,1.306]],["body/entities/Role.html",[0,0.17,3,0.163,4,0.163,5,0.163,8,2.187,12,1.443,15,0.313,16,1.013,29,0.495,30,0.014,31,1.138,32,1.282,35,1.883,36,1.479,39,0.736,47,0.773,63,1.01,87,0.224,99,0.183,110,0.011,111,0.011,112,1.774,114,2.422,132,3.856,135,3.671,136,2.049,144,3.671,145,1.841,266,2.625,427,4.299,436,4.299,449,2.91,455,3.95,1365,3.504,2408,4.767,2409,5.478,2410,5.478,2411,5.478,2412,5.478,2413,5.841,2414,5.478,2415,5.841,2416,5.478]],["title/controllers/RolesController.html",[147,1.354,2417,2.906]],["body/controllers/RolesController.html",[0,0.162,3,0.155,4,0.155,5,0.155,15,0.299,17,1.148,29,0.427,30,0.014,32,1.205,36,1.33,39,0.691,47,0.798,63,0.908,87,0.256,99,0.175,110,0.011,111,0.011,147,1.758,149,1.894,151,2.78,153,2.038,155,3.594,156,3.15,163,2.113,164,2.221,166,2.313,167,3.094,184,2.78,188,0.887,195,2.218,196,2.415,198,1.613,203,3.506,424,2.192,497,4.618,515,3.094,522,2.647,523,3.506,524,3.094,525,3.3,526,3.772,527,2.192,528,3.772,538,3.094,549,4.462,896,3.597,2321,4.553,2417,4.704,2418,4.553,2419,5.678,2420,5.232,2421,5.232,2422,5.232,2423,5.232,2424,4.553,2425,5.232,2426,5.232,2427,4.553,2428,5.232,2429,5.232,2430,5.232,2431,5.232,2432,5.232]],["title/guards/RolesGuard.html",[525,2.039,2433,3.163]],["body/guards/RolesGuard.html",[0,0.157,3,0.151,4,0.151,5,0.151,12,1.168,13,2.241,15,0.289,17,1.126,29,0.419,30,0.014,35,1.966,39,0.622,41,3.383,47,0.791,63,1.056,87,0.234,99,0.169,110,0.011,111,0.011,136,1.373,138,2.406,153,1.998,163,2.072,164,1.583,188,0.859,195,2.149,198,1.452,231,1.452,235,1.983,251,1.993,525,3.236,527,1.703,747,2.693,761,3.723,818,3.655,823,2.149,827,2.997,944,3.978,1008,2.836,1039,3.397,1084,3.978,1669,3.655,2332,3.978,2387,5.306,2391,3.978,2392,6.405,2393,6.743,2394,3.978,2395,4.612,2396,4.411,2397,5.566,2398,5.566,2399,4.411,2400,4.411,2401,4.411,2402,4.411,2403,4.411,2404,4.411,2405,4.411,2406,4.411,2407,4.411,2434,5.069,2435,5.069,2436,5.069,2437,5.069,2438,5.069]],["title/modules/RolesModule.html",[209,1.306,289,2.383]],["body/modules/RolesModule.html",[0,0.174,3,0.167,4,0.167,5,0.167,12,1.245,30,0.014,35,1.577,87,0.266,99,0.188,110,0.011,111,0.011,149,2.468,188,0.952,209,2.377,211,2.713,212,2.713,213,2.986,214,2.986,215,2.713,216,3.899,217,3.899,221,3.622,222,2.594,223,2.843,225,3.144,226,2.035,229,3.144,289,4.755,449,2.986,896,4.194,2417,5.292,2427,4.89,2439,4.89,2440,4.89,2441,4.89,2442,5.619,2443,4.89,2444,5.619,2445,5.619]],["title/injectables/RolesService.html",[231,0.915,896,2.039]],["body/injectables/RolesService.html",[0,0.128,3,0.123,4,0.123,5,0.123,12,1.369,15,0.236,17,1.252,19,3.756,29,0.466,30,0.014,31,1.346,35,2.103,36,1.528,39,0.713,43,2.317,47,0.649,63,1.076,87,0.238,99,0.138,110,0.009,111,0.009,145,1.392,153,1.751,155,3.286,156,2.706,163,2.304,164,2.221,166,2.478,188,0.702,198,1.545,226,1.5,231,1.272,232,1.831,234,2.714,235,2.192,237,3.792,241,3.312,247,2.449,248,2.2,250,2.281,251,1.926,253,2.463,259,2.134,260,1.914,262,2.693,359,2.775,414,2.978,424,2.287,449,2.2,527,2.463,896,2.835,898,4.256,918,2.775,919,3.755,978,2.775,2060,4.041,2413,4.877,2419,4.877,2424,4.877,2443,3.604,2446,3.604,2447,5.604,2448,5.604,2449,4.141,2450,4.141,2451,5.604,2452,5.604,2453,4.141,2454,4.141,2455,5.604,2456,4.141,2457,4.141,2458,4.141,2459,4.141,2460,4.141,2461,5.604,2462,5.604,2463,4.141,2464,4.141,2465,4.141,2466,4.141,2467,4.141,2468,4.141,2469,4.141]],["title/classes/UpdateAnnouncementDto.html",[0,0.125,179,2.701]],["body/classes/UpdateAnnouncementDto.html",[0,0.194,2,2.022,3,0.185,4,0.185,5,0.185,13,3.208,30,0.014,87,0.243,99,0.209,110,0.012,111,0.012,154,2.541,160,3.919,179,4.863,192,4.9,1160,4.9,2470,5.434,2471,7.257,2472,4.9,2473,4.9,2474,4.9]],["title/classes/UpdateAppointmentDto.html",[0,0.125,509,2.701]],["body/classes/UpdateAppointmentDto.html",[0,0.217,2,1.902,3,0.174,4,0.174,5,0.174,13,3.095,15,0.335,16,1.056,17,1.232,29,0.384,30,0.014,32,0.995,39,0.571,87,0.259,89,3.232,93,2.39,99,0.196,110,0.012,111,0.012,154,2.39,276,2.099,440,4.694,468,3.686,509,4.691,521,4.609,529,3.935,1172,4.609,1184,5.111,1187,3.935,1189,5.111,2472,4.609,2473,4.609,2474,4.609,2475,6.092,2476,7,2477,5.872]],["title/classes/UpdateDocumentApplicationDto.html",[0,0.125,1389,2.906]],["body/classes/UpdateDocumentApplicationDto.html",[0,0.201,2,1.676,3,0.154,4,0.154,5,0.154,8,2.132,13,2.864,15,0.295,16,0.978,17,1.305,29,0.424,30,0.014,32,1.098,37,3.143,39,0.63,44,1.559,47,0.662,87,0.255,89,3.265,90,2.991,93,2.106,95,1.804,99,0.173,110,0.011,111,0.011,154,2.106,266,2.534,276,2.218,373,3.578,376,4.384,382,4.74,409,4.148,410,3.247,441,3.059,562,4.653,1098,3.278,1187,3.467,1190,4.74,1192,4.06,1196,3.73,1201,4.502,1203,4.502,1216,3.73,1217,3.578,1302,5.505,1330,5.085,1334,4.671,1335,5.085,1389,4.671,1410,4.502,2472,5.552,2473,4.06,2474,4.06,2478,6.156,2479,5.173,2480,5.173,2481,5.173,2482,5.173,2483,5.173]],["title/classes/UpdateQueueDto.html",[0,0.125,1823,2.701]],["body/classes/UpdateQueueDto.html",[0,0.217,2,1.895,3,0.174,4,0.174,5,0.174,15,0.334,16,1.054,17,1.361,29,0.457,30,0.014,32,1.184,39,0.679,47,0.713,87,0.234,89,3.447,90,3.225,93,2.382,99,0.196,110,0.012,111,0.012,276,2.095,1187,3.921,1230,4.592,1232,5.092,1725,5.861,1743,4.416,1823,4.681,1832,3.673,2484,6.499,2485,5.851,2486,5.851,2487,5.851,2488,5.851]],["title/classes/UpdateUserDto.html",[0,0.125,14,1.946]],["body/classes/UpdateUserDto.html",[0,0.213,1,2.528,2,1.215,3,0.111,4,0.111,5,0.111,6,6.013,7,2.704,8,2.354,9,3.566,10,1.59,11,1.358,12,1.382,13,1.658,14,3.151,15,0.214,16,0.79,17,1.421,18,1.993,19,2.218,20,3.524,21,3.051,22,2.583,23,2.269,24,2.269,25,3.051,26,3.051,27,3.035,28,2.685,29,0.502,30,0.014,31,1.164,32,1.282,33,5.936,34,1.091,35,1.469,36,0.765,37,3.447,39,0.736,41,1.811,42,2.513,43,2.099,47,0.825,48,4.556,49,4.556,50,4.556,51,4.556,52,4.556,53,4.556,54,3.264,57,3.508,58,3.264,60,3.264,62,3.096,63,1.037,64,3.264,66,2.929,67,2.944,69,3.508,70,2.944,72,3.508,73,3.775,74,4.041,75,3.775,76,2.944,78,3.775,79,3.785,80,3.775,81,3.508,82,4.348,83,3.264,85,3.264,87,0.175,88,3.775,89,3.606,90,3.492,91,3.775,92,4.109,93,1.527,94,4.903,95,1.308,96,3.096,97,3.286,98,2.648,99,0.175,100,2.704,101,2.944,102,2.944,103,2.354,104,2.944,105,2.513,106,2.944,107,3.264,108,3.775,109,1.527,110,0.009,111,0.009,1258,3.264,1261,3.264,1265,3.264,1268,3.264,1277,3.264,2489,3.751,2490,3.751,2491,3.751,2492,3.751]],["title/classes/UpdateUserStatusDto.html",[0,0.125,2493,2.906]],["body/classes/UpdateUserStatusDto.html",[0,0.218,2,1.92,3,0.176,4,0.176,5,0.176,8,2.121,12,1.419,15,0.338,16,1.062,29,0.388,30,0.014,32,1.004,37,2.512,39,0.576,87,0.235,93,2.412,95,2.066,99,0.198,110,0.012,111,0.012,119,3.989,136,1.906,138,2.648,276,1.663,1155,4.418,1170,5.524,1217,3.561,1252,3.719,2493,5.075,2494,6.125,2495,5.157,2496,5.926,2497,5.926]],["title/entities/User.html",[12,0.736,112,1.306]],["body/entities/User.html",[0,0.12,3,0.115,4,0.115,5,0.115,12,0.978,15,0.221,16,0.808,18,3.259,21,3.103,22,2.307,23,2.307,24,2.307,25,3.103,26,3.103,27,2.711,28,2.399,29,0.526,30,0.014,31,1.121,32,1.363,34,1.556,35,2.066,36,1.416,39,0.782,44,1.613,47,0.828,63,1.12,87,0.179,99,0.129,110,0.009,111,0.009,112,1.254,114,1.711,116,2.711,119,3.259,121,4.11,122,2.693,123,3.164,132,3.259,135,3.9,136,2.168,138,2.013,142,3.858,144,4.027,145,1.301,384,2.43,392,4.353,395,2.594,407,3.359,408,3.912,427,4.2,444,2.594,455,3.858,527,2.061,829,3.432,1289,4.2,1309,3.369,1310,4.657,1312,3.038,1920,4.657,1925,4.657,2415,4.657,2498,3.369,2499,5.351,2500,3.871,2501,3.871,2502,6.616,2503,3.871,2504,3.871,2505,3.871,2506,3.871,2507,3.871,2508,5.351,2509,3.871,2510,3.871,2511,5.351,2512,3.871,2513,3.871,2514,5.351,2515,3.871,2516,3.871,2517,3.871,2518,5.351,2519,5.351,2520,3.871,2521,3.871,2522,3.871,2523,5.351,2524,3.871,2525,3.871,2526,3.871,2527,3.871,2528,3.871,2529,5.351,2530,3.871]],["title/classes/UserQueryDto.html",[0,0.125,2531,2.906]],["body/classes/UserQueryDto.html",[0,0.212,2,1.553,3,0.142,4,0.142,5,0.142,8,2.372,15,0.274,16,0.931,17,1.385,22,2.322,28,1.875,29,0.509,30,0.014,31,1.359,32,1.222,34,1.795,35,2.023,37,3.056,39,0.701,47,0.736,63,0.859,78,3.456,87,0.228,89,3.444,90,3.151,91,4.922,93,1.951,94,4.682,95,1.671,98,3.122,99,0.16,103,3.874,109,3.108,110,0.01,111,0.01,172,3.122,173,3.627,828,4.45,1245,5.658,1269,6.274,1374,4.45,1419,3.48,1499,4.876,1500,4.998,1522,4.136,2531,4.45,2532,4.998,2533,4.171,2534,6.172,2535,4.793,2536,4.793,2537,4.793,2538,4.793,2539,6.172,2540,4.793,2541,4.793,2542,4.171,2543,6.172]],["title/classes/UserResponseDto.html",[0,0.125,1719,2.383]],["body/classes/UserResponseDto.html",[0,0.11,2,1.149,3,0.105,4,0.105,5,0.105,8,2.491,11,1.822,12,1.465,15,0.202,16,0.759,17,1.292,18,3.108,20,2.43,21,2.96,22,2.53,23,2.201,24,2.201,25,2.96,26,2.96,28,2.63,29,0.523,30,0.014,31,1.184,32,1.34,34,1.851,35,1.787,36,1.464,37,3.351,39,0.769,44,1.517,47,0.828,57,3.373,62,2.976,63,1.1,66,3.563,69,3.373,72,3.373,74,3.373,87,0.119,94,4.22,95,1.237,98,2.96,99,0.119,103,3.997,105,4.267,109,2.049,110,0.008,111,0.008,116,2.586,119,3.108,121,3.92,122,2.988,136,1.363,138,1.893,276,1.412,478,2.557,527,2.259,829,3.274,958,2.816,1155,3.159,1217,3.913,1225,5.541,1245,4.997,1246,4.38,1249,3.373,1252,4.808,1253,4.38,1259,5.541,1275,4.38,1712,2.377,1719,2.976,1837,4.38,2532,5.326,2544,3.547,2545,6.367,2546,6.367,2547,3.547,2548,3.547,2549,3.547,2550,3.547,2551,3.547,2552,3.547,2553,3.547,2554,3.547,2555,3.547,2556,3.547,2557,3.547,2558,3.547,2559,3.547,2560,3.547]],["title/interfaces/UserStats.html",[823,1.354,1503,2.701]],["body/interfaces/UserStats.html",[0,0.072,1,1.758,3,0.068,4,0.068,5,0.068,10,0.977,11,1.857,12,1.382,14,1.758,15,0.132,16,0.55,17,0.406,18,3.154,19,3.51,21,2.825,22,2.606,23,2.424,24,2.338,25,3.436,26,3.355,27,2.624,28,2.756,29,0.407,30,0.014,31,1.253,34,0.67,35,1.861,36,1.492,43,2.038,44,1.941,47,0.57,63,0.826,66,1.29,87,0.222,98,2.284,99,0.122,109,0.938,110,0.006,111,0.006,116,1.019,119,2.398,136,0.624,138,0.867,145,0.775,154,0.938,158,2.179,166,1.019,173,2.967,175,1.225,188,0.391,191,1.113,198,1.572,209,0.747,226,0.835,231,0.826,234,2.228,235,0.902,237,1.842,241,2.635,247,1.363,248,1.225,250,1.482,251,2.16,253,2.559,256,1.447,257,1.545,259,2.228,260,1.998,262,2.174,263,2.286,268,1.545,414,2.967,465,1.29,512,1.29,516,1.363,527,2.367,540,1.29,576,2.284,634,1.447,640,0.977,648,2.038,669,1.842,673,0.977,674,1.995,694,1.447,728,1.935,729,1.225,732,2.967,817,2.153,823,1.224,829,3.478,838,2.967,896,2.284,898,1.545,912,2.286,915,1.662,916,2.286,917,1.662,918,1.545,919,4.551,946,2.626,949,2.44,954,2.44,955,3.977,956,2.626,958,1.29,959,1.662,962,2.626,963,2.626,965,2.626,966,2.626,976,2.626,977,1.662,978,1.545,981,1.662,1000,1.545,1001,2.44,1006,2.44,1008,1.29,1010,2.669,1015,1.662,1019,2.626,1021,1.662,1023,2.626,1025,1.662,1027,2.626,1098,1.166,1111,1.29,1243,2.669,1249,1.545,1365,2.179,1419,1.758,1456,1.363,1497,2.44,1498,1.662,1499,3.219,1500,4.551,1501,1.662,1502,1.662,1503,2.44,1504,4.165,1505,4.165,1506,3.977,1507,3.977,1508,3.025,1509,2.869,1510,3.977,1511,4.025,1512,1.29,1513,1.809,1514,1.809,1515,1.809,1516,1.809,1517,3.543,1518,2.858,1519,1.809,1520,1.809,1521,2.858,1522,2.44,1523,1.809,1524,1.809,1525,1.809,1526,1.809,1527,1.809,1528,1.809,1529,2.858,1530,1.809,1531,2.858,1532,1.662,1533,1.809,1534,4.025,1535,1.809,1536,1.809,1537,2.858,1538,4.025,1539,2.858,1540,1.809,1541,1.809,1542,1.809,1543,1.809,1544,1.809,1545,1.809,1546,1.809,1547,1.809,1548,1.809,1549,2.858,1550,3.543,1551,1.809,1552,2.858,1553,1.809,1554,1.809,1555,2.858,1556,1.662,1557,1.809,1558,1.809,1559,1.809,1560,1.809,1561,2.858,1562,1.809,1563,1.809,1564,2.858,1565,1.809,1566,1.809,1567,1.809,1568,1.809,1569,1.809,1570,1.809,1571,1.809,1572,1.809,1573,1.809,1574,1.809,1575,1.809,1576,2.858,1577,1.809,1578,1.809,1579,1.809,1580,1.809,1581,1.662,1582,1.809,1583,1.662]],["title/classes/UserStatsResponseDto.html",[0,0.125,2561,2.906]],["body/classes/UserStatsResponseDto.html",[0,0.191,2,1.553,3,0.142,4,0.142,5,0.142,8,2.446,12,1.247,15,0.274,16,0.931,29,0.509,30,0.014,31,1.388,32,1.264,35,2.023,37,3.162,39,0.725,44,1.86,47,0.49,63,0.667,87,0.206,95,1.671,98,2.425,99,0.16,110,0.01,111,0.01,128,3.874,473,3.279,728,3.279,730,5.506,1155,3.874,1156,4.45,1217,3.981,1252,4.285,1365,3.839,1504,4.574,1505,4.574,1506,4.574,1507,4.574,1508,3.212,1509,3.82,1510,4.574,1712,3.212,1719,4.263,1720,5.371,1722,3.456,2161,4.844,2532,5.117,2561,4.45,2562,5.371,2563,4.793,2564,4.793,2565,5.371,2566,4.793,2567,4.793,2568,5.198,2569,4.793,2570,4.171]],["title/classes/UsersByRoleDto.html",[0,0.125,2568,2.906]],["body/classes/UsersByRoleDto.html",[0,0.201,2,1.681,3,0.154,4,0.154,5,0.154,8,2.43,12,1.186,15,0.296,16,0.98,29,0.486,30,0.014,31,1.376,32,1.1,35,2.144,37,3.239,39,0.631,47,0.663,63,0.904,87,0.217,95,1.81,98,3.284,99,0.174,110,0.011,111,0.011,128,3.258,473,2.757,728,2.757,730,5.108,1155,3.258,1156,3.742,1217,4.045,1252,4.075,1365,3.763,1504,3.478,1505,3.478,1506,3.478,1507,3.478,1508,4.747,1509,4.153,1510,3.478,1712,3.478,1716,4.517,1719,4.189,1721,4.517,1722,3.742,2161,4.073,2532,4.747,2561,3.742,2562,4.517,2565,4.517,2568,5.352,2570,5.649]],["title/controllers/UsersController.html",[147,1.354,2571,2.906]],["body/controllers/UsersController.html",[0,0.075,1,2.55,3,0.072,4,0.072,5,0.072,8,2.359,10,3.166,11,2.297,12,1.498,14,2.55,15,0.139,17,1.116,27,2.533,29,0.506,30,0.014,32,1.112,35,1.482,36,1.433,39,0.638,47,0.729,63,0.883,87,0.245,95,0.848,99,0.081,109,0.99,110,0.006,111,0.006,147,0.817,149,0.881,151,1.292,153,1.187,154,1.902,155,2.256,156,2.256,158,2.256,161,1.361,163,2.055,164,2.05,166,1.075,167,1.438,173,2.018,175,1.292,176,1.754,178,1.361,180,1.63,182,3.123,183,1.63,184,1.292,185,2.764,187,3.596,188,0.412,191,1.174,193,1.174,195,1.031,196,1.123,198,1.565,205,3.539,209,0.788,234,2.631,241,1.61,251,1.827,253,1.775,259,1.276,260,0.733,262,2.859,276,2.096,350,3.668,424,1.276,465,2.955,466,2.933,469,2.928,472,2.545,473,2.018,474,3.555,476,2.804,477,2.117,478,4.573,479,5.52,496,1.909,497,3.751,512,1.361,515,1.438,522,1.231,523,1.63,524,1.438,525,1.922,526,1.754,527,1.276,528,1.754,531,1.909,532,1.63,533,4.519,534,4.85,535,2.545,538,2.246,540,1.361,542,4.398,548,4.765,549,3.981,556,1.909,557,3.808,580,1.909,582,2.117,587,1.754,640,1.031,669,2.672,673,1.031,674,2.066,729,1.292,742,2.981,757,5.281,761,3.226,771,4.732,772,2.117,780,5.429,781,2.117,782,2.117,783,3.808,784,4.069,785,3.668,817,2.246,847,1.909,848,1.909,853,1.909,912,4.482,916,2.384,923,3.668,926,3.668,927,4.067,928,2.117,929,2.117,936,2.117,954,1.63,955,1.63,972,3.306,973,2.117,974,3.306,1243,3.751,1365,2.931,1366,5.284,1419,1.174,1456,2.246,1499,2.384,1500,2.545,1502,1.754,1512,2.615,1581,1.754,1714,2.981,1719,2.764,1722,1.754,1905,2.117,2254,2.117,2493,3.808,2531,3.808,2571,2.739,2572,2.117,2573,4.673,2574,2.432,2575,3.798,2576,2.432,2577,3.798,2578,2.432,2579,2.432,2580,2.432,2581,2.432,2582,2.432,2583,2.432,2584,2.432,2585,2.432,2586,2.432,2587,2.432,2588,2.432,2589,2.432,2590,2.432,2591,2.432,2592,4.673,2593,2.432,2594,2.432,2595,3.798,2596,3.798,2597,2.117,2598,2.432,2599,3.798,2600,2.432,2601,2.432,2602,2.432,2603,2.432,2604,2.432,2605,2.432,2606,2.432,2607,2.432,2608,2.432,2609,2.432,2610,2.432,2611,2.432,2612,2.432,2613,2.432,2614,2.432,2615,2.432,2616,2.432,2617,2.432,2618,3.798,2619,2.432]],["title/modules/UsersModule.html",[209,1.306,290,2.701]],["body/modules/UsersModule.html",[0,0.171,3,0.164,4,0.164,5,0.164,12,1.009,30,0.014,87,0.265,99,0.185,110,0.011,111,0.011,149,2.443,188,0.936,209,2.36,211,2.667,212,2.667,213,2.935,214,2.935,215,2.667,216,3.87,217,3.87,221,3.585,222,2.55,223,2.795,225,3.775,226,2,229,3.775,289,4.68,290,5.461,302,4.336,888,4.808,1501,3.983,1512,4.629,2571,5.252,2597,4.808,2620,4.808,2621,4.808,2622,5.524,2623,4.808,2624,5.524,2625,5.524]],["title/injectables/UsersService.html",[231,0.915,1512,2.255]],["body/injectables/UsersService.html",[0,0.065,1,2.346,3,0.062,4,0.062,5,0.062,10,0.889,11,1.759,12,1.359,14,2.346,15,0.12,17,1.161,18,3.024,19,3.366,21,2.695,22,2.585,23,2.342,24,2.252,25,3.338,26,3.251,27,2.516,28,2.731,29,0.421,30,0.014,31,1.251,34,0.609,35,1.803,36,1.516,39,0.642,43,1.889,44,1.876,47,0.656,63,0.998,66,1.173,87,0.215,98,2.144,99,0.113,109,0.853,110,0.006,111,0.006,116,0.927,119,2.83,136,0.568,138,1.594,145,0.704,153,1.055,154,1.725,155,1.63,156,1.63,158,2.572,163,2.082,164,2.008,166,1.492,173,2.83,175,1.794,188,0.355,191,1.012,198,1.53,209,0.679,226,0.759,231,0.766,232,0.927,234,2.609,235,1.32,237,2.458,241,3.001,247,1.24,248,1.114,250,1.374,251,2.137,253,2.517,256,1.316,257,1.405,259,2.16,260,1.937,262,2.06,263,2.119,268,1.405,414,2.83,465,2.719,466,2.119,476,1.492,512,1.889,516,1.24,527,2.309,540,1.173,576,2.144,634,1.316,640,0.889,648,1.889,669,1.708,673,0.889,674,1.874,694,1.316,728,1.794,729,1.114,732,2.83,817,1.996,823,1.134,829,3.349,838,2.83,894,1.824,896,3.028,898,2.262,915,1.511,916,2.119,917,1.511,918,1.405,919,4.421,946,2.434,949,2.262,954,2.262,955,3.814,956,2.434,958,1.173,959,1.511,962,2.434,963,2.434,965,2.434,966,2.434,976,2.434,977,1.511,978,1.405,981,1.511,1000,1.405,1001,2.262,1006,2.262,1008,1.173,1010,2.506,1015,1.511,1019,2.434,1021,1.511,1023,2.434,1025,1.511,1027,2.434,1098,1.06,1243,3.366,1249,1.405,1365,2.046,1419,1.63,1456,1.24,1497,3.256,1498,1.511,1499,3.05,1500,4.421,1501,1.511,1502,1.511,1503,1.405,1504,3.256,1505,3.256,1506,2.84,1507,2.84,1508,2.84,1509,2.719,1510,2.84,1511,2.649,1512,1.889,1513,2.649,1514,2.649,1515,1.645,1516,1.645,1517,3.326,1518,2.649,1519,1.645,1520,1.645,1521,2.649,1522,2.262,1523,1.645,1524,1.645,1525,1.645,1526,1.645,1527,1.645,1528,1.645,1529,2.649,1530,1.645,1531,2.649,1532,1.511,1533,1.645,1534,3.813,1535,1.645,1536,3.326,1537,2.649,1538,3.813,1539,2.649,1540,1.645,1541,1.645,1542,1.645,1543,1.645,1544,1.645,1545,1.645,1546,1.645,1547,1.645,1548,1.645,1549,2.649,1550,3.326,1551,1.645,1552,2.649,1553,1.645,1554,1.645,1555,2.649,1556,1.511,1557,1.645,1558,1.645,1559,1.645,1560,1.645,1561,2.649,1562,1.645,1563,1.645,1564,2.649,1565,1.645,1566,1.645,1567,1.645,1568,1.645,1569,1.645,1570,1.645,1571,1.645,1572,1.645,1573,1.645,1574,1.645,1575,1.645,1576,2.649,1577,1.645,1578,2.649,1579,2.649,1580,2.649,1581,1.511,1582,1.645,1583,1.511,2626,3.376,2627,3.376,2628,2.096,2629,2.096,2630,2.096,2631,2.096,2632,2.096,2633,2.096,2634,2.096,2635,2.096,2636,2.096,2637,2.096,2638,2.096]],["title/coverage.html",[2639,4.318]],["body/coverage.html",[0,0.251,1,1.611,5,0.099,6,3.781,7,4.077,12,1.033,14,1.611,29,0.218,30,0.014,35,0.936,79,2.094,110,0.008,111,0.008,112,2.42,113,2.236,115,2.903,147,2.473,148,2.405,150,2.903,160,2.094,179,2.236,189,2.094,215,1.611,231,1.751,233,2.903,260,1.005,269,2.405,270,2.903,276,1.352,277,2.094,297,2.618,307,3.474,329,5.389,368,2.903,372,3.228,373,3.828,374,4.193,375,4.193,383,3.024,409,2.696,415,2.094,416,2.618,457,2.405,458,2.903,468,2.094,469,1.54,509,2.236,519,2.094,522,1.688,525,1.688,527,1.121,605,2.903,648,4.735,730,3.474,739,2.236,740,3.781,747,3.004,790,2.094,799,2.094,812,1.973,823,2.427,871,1.973,889,2.903,896,1.688,1112,4.077,1117,2.236,1138,1.973,1139,2.618,1142,1.611,1159,2.903,1160,3.781,1171,2.903,1172,3.781,1190,2.236,1191,2.903,1192,3.781,1228,2.236,1229,2.903,1230,3.781,1243,1.973,1244,2.903,1280,4.465,1281,3.781,1291,3.228,1345,2.405,1346,2.903,1365,1.611,1389,2.405,1408,2.405,1419,2.326,1465,2.849,1471,4.193,1497,2.236,1498,4.077,1503,2.236,1512,1.867,1584,2.903,1585,2.903,1591,2.903,1598,2.903,1649,2.903,1710,2.618,1711,2.903,1712,4.149,1719,1.973,1723,2.618,1735,2.849,1750,2.405,1751,2.903,1823,2.236,1829,1.867,1833,2.094,1914,2.903,1915,2.903,1943,1.973,1944,2.903,2026,2.405,2032,2.903,2033,2.903,2103,2.903,2314,4.193,2369,2.903,2385,3.781,2391,3.781,2395,2.405,2408,2.903,2417,2.405,2418,2.903,2433,2.618,2446,2.903,2470,2.903,2475,2.903,2478,2.903,2484,2.903,2493,2.405,2494,2.903,2495,2.903,2498,2.903,2531,2.405,2532,4.149,2533,2.903,2561,2.405,2568,2.405,2571,2.405,2572,2.903,2639,2.618,2640,2.903,2641,3.336,2642,3.336,2643,6.843,2644,6.843,2645,6.567,2646,5.654,2647,4.193,2648,7.993,2649,3.336,2650,3.336,2651,4.817,2652,3.336,2653,6.192,2654,2.903,2655,4.921,2656,5.654,2657,2.903,2658,2.903,2659,6.192,2660,4.817,2661,4.817,2662,4.817,2663,6.192,2664,3.336,2665,3.336,2666,5.654,2667,4.817,2668,3.336,2669,3.336,2670,3.336,2671,3.336,2672,3.336,2673,3.336]],["title/dependencies.html",[212,2.341,2674,2.929]],["body/dependencies.html",[0,0.211,30,0.014,93,2.275,95,1.95,110,0.011,111,0.011,122,2.275,145,1.879,188,0.948,212,2.699,226,2.024,294,3.128,296,4.031,638,4.865,874,4.388,876,3.509,880,3.306,916,3.509,1116,4.9,1406,5.914,1407,5.914,1616,4.388,1692,4.865,1986,4.865,1987,5.914,2394,4.388,2542,4.865,2675,7.806,2676,5.59,2677,6.796,2678,5.59,2679,5.59,2680,5.59,2681,5.59,2682,5.59,2683,5.59,2684,5.59,2685,5.59,2686,5.59,2687,5.59,2688,5.59,2689,5.59,2690,5.59,2691,5.59,2692,5.59,2693,5.59,2694,5.59,2695,5.59,2696,5.59,2697,5.59,2698,5.59,2699,5.59,2700,5.59,2701,5.59,2702,5.59]],["title/miscellaneous/enumerations.html",[2703,2.112,2704,4.219]],["body/miscellaneous/enumerations.html",[3,0.157,15,0.301,30,0.014,110,0.011,111,0.011,172,4.259,373,2.672,416,4.146,440,4.12,450,4.16,451,5.151,452,4.179,453,4.688,1139,4.146,1151,5.151,1155,4.12,1156,4.732,1194,5.151,1199,4.146,1200,5.604,1280,3.809,1281,5.604,1302,4.732,1319,4.597,1320,4.597,1321,5.712,1322,4.597,1323,3.809,1324,4.597,1325,4.597,1326,4.597,1327,4.597,1328,4.597,1329,5.712,1330,5.151,1331,5.712,1332,5.712,1333,4.597,1334,3.809,1335,4.146,1336,4.597,1337,4.597,1338,4.597,1723,4.146,1743,3.881,1747,4.12,2703,3.316,2704,4.597,2705,6.563,2706,5.282,2707,5.282,2708,5.282]],["title/miscellaneous/functions.html",[2703,2.112,2709,4.219]],["body/miscellaneous/functions.html",[15,0.358,17,1.105,29,0.411,30,0.013,63,0.874,110,0.012,111,0.012,163,2.034,215,3.713,2655,5.465,2657,6.337,2658,6.693,2703,3.942,2709,5.465,2710,7.691,2711,6.28,2712,7.691]],["title/index.html",[15,0.192,704,2.427,2713,3.365]],["body/index.html",[4,0.132,8,1.336,30,0.014,37,2.966,97,2.783,110,0.01,111,0.01,223,3.782,237,2.243,268,2.971,338,3.859,347,4.604,352,3.859,357,4.74,359,2.971,376,4.421,567,3.48,576,3.782,926,3.48,958,2.481,1064,3.859,1071,3.48,1120,5.582,1323,3.197,1334,3.197,1347,5.106,1404,3.197,1595,5.106,1857,3.859,1947,3.859,2053,6.636,2137,3.859,2162,3.859,2268,6.089,2639,3.48,2640,5.106,2714,4.434,2715,4.434,2716,6.574,2717,5.866,2718,4.434,2719,4.434,2720,4.434,2721,6.574,2722,4.434,2723,6.996,2724,4.434,2725,7.741,2726,4.434,2727,4.434,2728,5.866,2729,4.434,2730,4.434,2731,6.574,2732,4.434,2733,4.434,2734,4.434,2735,4.434,2736,4.434,2737,6.996,2738,5.866,2739,4.434,2740,4.434,2741,4.434,2742,4.434,2743,5.866,2744,5.866,2745,4.434,2746,5.866,2747,7.476,2748,6.996,2749,4.434,2750,5.866,2751,4.434,2752,4.434,2753,4.434,2754,4.434,2755,6.996,2756,4.434,2757,4.434,2758,4.434,2759,5.866,2760,4.434,2761,4.434,2762,4.434,2763,4.434,2764,4.434,2765,5.866,2766,4.434,2767,4.434,2768,5.866,2769,4.434,2770,4.434,2771,6.089,2772,5.866,2773,4.434,2774,4.434,2775,4.434,2776,4.434,2777,4.434,2778,4.434,2779,4.434,2780,4.434,2781,5.866,2782,4.434,2783,4.434,2784,4.434,2785,4.434,2786,4.434,2787,4.434,2788,4.434,2789,5.866,2790,4.434,2791,4.434,2792,4.434,2793,4.434,2794,5.866,2795,4.434,2796,4.434,2797,4.434,2798,5.866,2799,5.866,2800,4.434,2801,4.434,2802,4.434,2803,4.434,2804,4.434,2805,4.434,2806,4.434,2807,4.434,2808,4.434,2809,4.434,2810,3.859,2811,4.434,2812,4.434,2813,4.434,2814,4.434,2815,4.434,2816,4.434]],["title/modules.html",[211,2.656]],["body/modules.html",[30,0.012,110,0.012,111,0.012,210,4.075,211,2.936,281,4.384,285,4.075,286,4.075,287,4.075,288,4.075,289,3.596,290,4.075,2771,7.16,2817,8.227,2818,8.227,2819,8.227]],["title/overview.html",[2820,4.788]],["body/overview.html",[2,1.448,30,0.014,79,3.702,109,1.82,110,0.01,111,0.01,114,1.977,149,1.619,189,4.796,209,1.448,210,5.021,211,2.159,212,2.159,213,2.375,214,2.375,215,2.159,216,2.375,217,2.375,218,3.891,219,3.891,220,3.891,221,3.134,222,2.064,223,2.262,232,1.977,277,4.143,281,5.938,282,3.891,283,3.891,284,3.891,285,5.021,286,5.35,287,5.258,288,5.308,289,4.586,290,5.197,519,4.796,599,3.891,600,3.891,601,3.891,812,4.518,867,3.891,868,3.891,869,3.891,871,4.518,896,3.865,1111,2.502,1408,5.509,1419,2.159,1462,3.891,1463,3.891,1464,3.891,1465,4.518,1512,4.275,1829,4.275,1833,4.796,1943,4.15,2022,3.891,2023,3.891,2024,3.891,2041,3.891,2433,3.509,2439,3.891,2440,3.891,2441,3.891,2620,3.891,2621,3.891,2623,3.891,2820,3.891,2821,4.471,2822,4.471]],["title/properties.html",[16,0.732,2674,2.929]],["body/properties.html",[8,1.941,16,0.972,30,0.014,110,0.012,111,0.012,1323,4.644,2810,5.606,2823,6.441,2824,6.441,2825,6.441]],["title/miscellaneous/variables.html",[1125,3.248,2703,2.112]],["body/miscellaneous/variables.html",[12,1.234,15,0.316,27,2.446,28,2.164,29,0.477,30,0.014,34,2.207,47,0.69,110,0.011,111,0.011,114,2.446,172,3.84,198,1.256,251,1.499,297,5.301,314,4.816,315,4.816,317,3.99,321,3.99,323,4.816,324,4.816,325,4.816,330,4.343,336,2.799,347,5.301,469,2.554,476,2.446,527,2.615,761,2.94,1125,3.708,1619,4.343,2385,4.343,2386,4.816,2387,3.99,2388,4.816,2389,4.816,2390,4.816,2395,4.87,2647,4.816,2654,4.816,2703,3.473,2826,5.533,2827,6.754,2828,5.533,2829,5.533,2830,5.533,2831,5.533,2832,5.533,2833,5.533,2834,5.533,2835,5.533,2836,5.533,2837,5.533,2838,6.754,2839,5.533]]],"invertedIndex":[["",{"_index":30,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":648,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["0')}${string(today.getdate()).padstart(2",{"_index":2142,"title":{},"body":{"injectables/QueueService.html":{}}}],["0.0.1",{"_index":2824,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":2683,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":2695,"title":{},"body":{"dependencies.html":{}}}],["0.3.22",{"_index":2702,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":2682,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":2692,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":2648,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":2646,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":2671,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":2663,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":2661,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":2668,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":2665,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":2662,"title":{},"body":{"coverage.html":{}}}],["0/18",{"_index":2670,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":2644,"title":{},"body":{"coverage.html":{}}}],["0/24",{"_index":2669,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":2643,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2653,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":2666,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":2645,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":2659,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":2660,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":2667,"title":{},"body":{"coverage.html":{}}}],["01",{"_index":1225,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"classes/UserResponseDto.html":{}}}],["01t00:00:00.000z",{"_index":2546,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["08:00",{"_index":363,"title":{},"body":{"modules/AppModule.html":{}}}],["09123456789",{"_index":106,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["09123456789'})@isstring",{"_index":2370,"title":{},"body":{"classes/RegisterDto.html":{}}}],["09123456789'})@isstring()@isoptional",{"_index":58,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["1",{"_index":109,"title":{"injectables/MinioService-1.html":{},"interfaces/RequestWithUser-1.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService-1.html":{},"classes/PaginatedUsersResponseDto.html":{},"injectables/QueueService.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["1).padstart(2",{"_index":2141,"title":{},"body":{"injectables/QueueService.html":{}}}],["1).padstart(3",{"_index":2157,"title":{},"body":{"injectables/QueueService.html":{}}}],["1/10",{"_index":2651,"title":{},"body":{"coverage.html":{}}}],["1/12",{"_index":2652,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":2650,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":1419,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"classes/PaginatedUsersResponseDto.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/UserQueryDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["100",{"_index":128,"title":{},"body":{"entities/Announcement.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{}}}],["100).tofixed(1",{"_index":2100,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["1024",{"_index":1420,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["10mb",{"_index":1421,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["11.0.0",{"_index":2677,"title":{},"body":{"dependencies.html":{}}}],["11.0.5",{"_index":2678,"title":{},"body":{"dependencies.html":{}}}],["11.1.0",{"_index":2675,"title":{},"body":{"dependencies.html":{}}}],["11.2.0",{"_index":2680,"title":{},"body":{"dependencies.html":{}}}],["11:59",{"_index":2055,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["123",{"_index":49,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["13",{"_index":2822,"title":{},"body":{"overview.html":{}}}],["15",{"_index":2161,"title":{},"body":{"injectables/QueueService.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{}}}],["16.5.0",{"_index":2686,"title":{},"body":{"dependencies.html":{}}}],["1990",{"_index":1224,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["1d",{"_index":887,"title":{},"body":{"modules/AuthModule.html":{}}}],["1})@isoptional()@type(undefined)@isnumber()@min(1",{"_index":2534,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["2",{"_index":108,"title":{"interfaces/RequestWithUser-2.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["2.0.0",{"_index":2689,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":757,"title":{},"body":{"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":472,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["2024",{"_index":2545,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["23",{"_index":2041,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"overview.html":{}}}],["23:59",{"_index":2056,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["25",{"_index":2570,"title":{},"body":{"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{}}}],["250",{"_index":1481,"title":{},"body":{"entities/DocumentFile.html":{}}}],["255",{"_index":140,"title":{},"body":{"entities/Announcement.html":{},"entities/DocumentFile.html":{}}}],["2})@isnumber()@isoptional",{"_index":38,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["3",{"_index":1279,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/QueueService.html":{}}}],["3.14.1",{"_index":2691,"title":{},"body":{"dependencies.html":{}}}],["30min",{"_index":698,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["33",{"_index":2649,"title":{},"body":{"coverage.html":{}}}],["3306",{"_index":2832,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3600",{"_index":1645,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["4",{"_index":1249,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["4.0.1",{"_index":2693,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":2676,"title":{},"body":{"dependencies.html":{}}}],["4.1.0",{"_index":2684,"title":{},"body":{"dependencies.html":{}}}],["4.8.1",{"_index":2698,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":759,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["401",{"_index":764,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["403",{"_index":767,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["404",{"_index":771,"title":{},"body":{"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["409",{"_index":773,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["5",{"_index":174,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{}}}],["5.0.1",{"_index":2701,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":2681,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":393,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{}}}],["500",{"_index":134,"title":{},"body":{"entities/Announcement.html":{},"entities/DocumentFile.html":{}}}],["59",{"_index":2064,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["5:00",{"_index":696,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["6",{"_index":649,"title":{},"body":{"injectables/AppointmentService.html":{},"classes/CreateUserDto.html":{}}}],["6.0.0",{"_index":2679,"title":{},"body":{"dependencies.html":{}}}],["60000",{"_index":2297,"title":{},"body":{"injectables/QueueService.html":{}}}],["639123456789",{"_index":1246,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["6})@isstring()@minlength(6",{"_index":1270,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["7.8.2",{"_index":2697,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":79,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AppointmentService.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{},"overview.html":{}}}],["8.0.5",{"_index":2687,"title":{},"body":{"dependencies.html":{}}}],["85",{"_index":2562,"title":{},"body":{"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{}}}],["8:00",{"_index":695,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["8})@isstring()@isnotempty()@minlength(8",{"_index":2381,"title":{},"body":{"classes/RegisterDto.html":{}}}],["8})@isstring()@isoptional()@minlength(8",{"_index":83,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["9",{"_index":2821,"title":{},"body":{"overview.html":{}}}],["9000",{"_index":1621,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["999",{"_index":2065,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["_",{"_index":1077,"title":{},"body":{"injectables/AuthService.html":{}}}],["__dirname",{"_index":323,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["__password",{"_index":930,"title":{},"body":{"injectables/AuthService.html":{}}}],["access",{"_index":1906,"title":{},"body":{"controllers/QueueController.html":{}}}],["access_token",{"_index":826,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["accesskey",{"_index":1624,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["accurate",{"_index":2143,"title":{},"body":{"injectables/QueueService.html":{}}}],["action",{"_index":2080,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["active",{"_index":1155,"title":{},"body":{"entities/Counter.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"miscellaneous/enumerations.html":{}}}],["activeusers",{"_index":1505,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["add",{"_index":849,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{}}}],["addcounter",{"_index":1752,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["addcounter(@body",{"_index":1895,"title":{},"body":{"controllers/QueueController.html":{}}}],["addcounter(data",{"_index":1769,"title":{},"body":{"controllers/QueueController.html":{}}}],["addcounter(name",{"_index":2110,"title":{},"body":{"injectables/QueueService.html":{}}}],["adddays",{"_index":635,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["adddays(today",{"_index":708,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["additional",{"_index":1338,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["address",{"_index":20,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Appointment.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["address'})@isemail()@isnotempty",{"_index":1254,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["addselect('count(user.id",{"_index":1568,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["adjust",{"_index":2057,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["admin",{"_index":10,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"controllers/QueueController.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["admin/staff",{"_index":480,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["admin/super",{"_index":1384,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["admincreateuser",{"_index":2573,"title":{},"body":{"controllers/UsersController.html":{}}}],["admincreateuser(createuserdto",{"_index":2574,"title":{},"body":{"controllers/UsersController.html":{}}}],["adminid",{"_index":901,"title":{},"body":{"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{}}}],["administrators",{"_index":751,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["adminrolenames",{"_index":1053,"title":{},"body":{"injectables/AuthService.html":{}}}],["adminrolenames.some",{"_index":1056,"title":{},"body":{"injectables/AuthService.html":{}}}],["adminroles",{"_index":1051,"title":{},"body":{"injectables/AuthService.html":{}}}],["adminroles.map((role",{"_index":1054,"title":{},"body":{"injectables/AuthService.html":{}}}],["admins",{"_index":1901,"title":{},"body":{"controllers/QueueController.html":{}}}],["adminupdate",{"_index":1536,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["adminupdate(id",{"_index":2629,"title":{},"body":{"injectables/UsersService.html":{}}}],["adminupdateuser",{"_index":741,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["adminupdateuser(adminid",{"_index":899,"title":{},"body":{"injectables/AuthService.html":{}}}],["adminupdateuser(req",{"_index":746,"title":{},"body":{"controllers/AuthController.html":{}}}],["adminupdateuserdto",{"_index":1,"title":{"classes/AdminUpdateUserDto.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["adminupdateuserdto})@apiresponse({status",{"_index":756,"title":{},"body":{"controllers/AuthController.html":{}}}],["advanced",{"_index":333,"title":{},"body":{"modules/AppModule.html":{}}}],["afterconnect",{"_index":364,"title":{},"body":{"modules/AppModule.html":{}}}],["ahead",{"_index":2215,"title":{},"body":{"injectables/QueueService.html":{}}}],["alldetails",{"_index":2231,"title":{},"body":{"injectables/QueueService.html":{}}}],["alldetails.foreach((detail",{"_index":2238,"title":{},"body":{"injectables/QueueService.html":{}}}],["alldetails.length",{"_index":2234,"title":{},"body":{"injectables/QueueService.html":{}}}],["allow",{"_index":580,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/QueueController.html":{},"controllers/UsersController.html":{}}}],["allowed",{"_index":1428,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["allowedheaders",{"_index":1993,"title":{},"body":{"classes/QueueGateway.html":{}}}],["allowing",{"_index":2760,"title":{},"body":{"index.html":{}}}],["allows",{"_index":750,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["allqueues",{"_index":2337,"title":{},"body":{"controllers/QueuesController.html":{}}}],["allqueues.map((queue",{"_index":2341,"title":{},"body":{"controllers/QueuesController.html":{}}}],["alltimeslots",{"_index":700,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["alltimeslots.filter((slot",{"_index":702,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["already",{"_index":732,"title":{},"body":{"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService-1.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["always",{"_index":1855,"title":{},"body":{"controllers/QueueController.html":{}}}],["amazing",{"_index":2804,"title":{},"body":{"index.html":{}}}],["announcement",{"_index":113,"title":{"entities/Announcement.html":{}},"body":{"entities/Announcement.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"coverage.html":{}}}],["announcement.controller",{"_index":227,"title":{},"body":{"modules/AnnouncementModule.html":{}}}],["announcement.dto",{"_index":192,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"classes/UpdateAnnouncementDto.html":{}}}],["announcement.dto.ts",{"_index":1160,"title":{},"body":{"classes/CreateAnnouncementDto.html":{},"classes/UpdateAnnouncementDto.html":{},"coverage.html":{}}}],["announcement.dto.ts:10",{"_index":1164,"title":{},"body":{"classes/CreateAnnouncementDto.html":{}}}],["announcement.dto.ts:14",{"_index":1165,"title":{},"body":{"classes/CreateAnnouncementDto.html":{}}}],["announcement.dto.ts:18",{"_index":1162,"title":{},"body":{"classes/CreateAnnouncementDto.html":{}}}],["announcement.dto.ts:22",{"_index":1167,"title":{},"body":{"classes/CreateAnnouncementDto.html":{}}}],["announcement.dto.ts:6",{"_index":1168,"title":{},"body":{"classes/CreateAnnouncementDto.html":{}}}],["announcement.isactive",{"_index":265,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["announcement.service",{"_index":190,"title":{},"body":{"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{}}}],["announcementcontroller",{"_index":148,"title":{"controllers/AnnouncementController.html":{}},"body":{"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"coverage.html":{}}}],["announcementmodule",{"_index":210,"title":{"modules/AnnouncementModule.html":{}},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["announcementrepository",{"_index":239,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["announcements",{"_index":152,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["announcementservice",{"_index":189,"title":{"injectables/AnnouncementService.html":{}},"body":{"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"coverage.html":{},"overview.html":{}}}],["api",{"_index":2328,"title":{},"body":{"controllers/QueuesController.html":{}}}],["apibearerauth",{"_index":535,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["apibearerauth('jwt",{"_index":539,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{}}}],["apibody",{"_index":822,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["apiconsumes",{"_index":1411,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["apiconsumes('multipart/form",{"_index":1430,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["apioperation",{"_index":533,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":749,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiparam",{"_index":821,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["apiproperty",{"_index":1217,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{}}}],["apiproperty({description",{"_index":1196,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["apiproperty({enum",{"_index":1203,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["apiproperty({example",{"_index":1252,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{}}}],["apiproperty({type",{"_index":1720,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{},"classes/UserStatsResponseDto.html":{}}}],["apipropertyoptional",{"_index":94,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{}}}],["apipropertyoptional({description",{"_index":33,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["apipropertyoptional({example",{"_index":1245,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{}}}],["apiresponse",{"_index":534,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":532,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["apitags('appointments",{"_index":536,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["apitags('authentication",{"_index":824,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["apitags('document",{"_index":1412,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["apitags('users",{"_index":2601,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":385,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"injectables/AppointmentService.html":{},"entities/DocumentFile.html":{}}}],["app.appointmenttime",{"_index":693,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["app.controller",{"_index":301,"title":{},"body":{"modules/AppModule.html":{}}}],["app.files",{"_index":1476,"title":{},"body":{"entities/DocumentFile.html":{}}}],["app.service",{"_index":278,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app.statushistory",{"_index":386,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["appcontroller",{"_index":269,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":376,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"classes/UpdateDocumentApplicationDto.html":{},"index.html":{}}}],["application'})@apiresponse({status",{"_index":1354,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["application.dto",{"_index":1410,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["application.dto.ts",{"_index":1192,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"coverage.html":{}}}],["application.dto.ts:12",{"_index":1205,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["application.dto.ts:18",{"_index":2480,"title":{},"body":{"classes/UpdateDocumentApplicationDto.html":{}}}],["application.dto.ts:21",{"_index":1202,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["application.dto.ts:27",{"_index":2481,"title":{},"body":{"classes/UpdateDocumentApplicationDto.html":{}}}],["application.dto.ts:33",{"_index":1211,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["application.dto.ts:42",{"_index":1214,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["application.entity",{"_index":410,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"classes/CreateDocumentApplicationDto.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["application.entity.ts",{"_index":1281,"title":{},"body":{"entities/DocumentApplication.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["application.entity.ts:41",{"_index":1299,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:44",{"_index":1314,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:51",{"_index":1288,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:54",{"_index":1286,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:61",{"_index":1303,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:64",{"_index":1308,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:67",{"_index":1297,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:70",{"_index":1290,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:73",{"_index":1311,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:76",{"_index":1301,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:81",{"_index":1313,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:84",{"_index":1294,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:90",{"_index":1307,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application_id",{"_index":390,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentFile.html":{}}}],["application_subtype",{"_index":1285,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application_type",{"_index":1287,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["applicationid",{"_index":377,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentFile.html":{}}}],["applications",{"_index":1347,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"index.html":{}}}],["applications.controller",{"_index":1467,"title":{},"body":{"modules/DocumentApplicationsModule.html":{}}}],["applications.controller.ts",{"_index":1346,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"coverage.html":{}}}],["applications.controller.ts:112",{"_index":1376,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:136",{"_index":1367,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:154",{"_index":1361,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:165",{"_index":1381,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:183",{"_index":1390,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:211",{"_index":1393,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:226",{"_index":1387,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:241",{"_index":1370,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:249",{"_index":1385,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:46",{"_index":1355,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:74",{"_index":1400,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:96",{"_index":1359,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.module",{"_index":308,"title":{},"body":{"modules/AppModule.html":{}}}],["applications.module.ts",{"_index":1466,"title":{},"body":{"modules/DocumentApplicationsModule.html":{}}}],["applications.service",{"_index":1409,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{}}}],["applications.service.ts",{"_index":2664,"title":{},"body":{"coverage.html":{}}}],["applications/document",{"_index":307,"title":{},"body":{"modules/AppModule.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"coverage.html":{}}}],["applications/dto/create",{"_index":1191,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"coverage.html":{}}}],["applications/dto/update",{"_index":2478,"title":{},"body":{"classes/UpdateDocumentApplicationDto.html":{},"coverage.html":{}}}],["applications/entities/application",{"_index":374,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"coverage.html":{}}}],["applications/entities/document",{"_index":1280,"title":{},"body":{"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["applications/services/minio.service.ts",{"_index":1649,"title":{},"body":{"injectables/MinioService-1.html":{},"coverage.html":{}}}],["applications/services/minio.service.ts:109",{"_index":1656,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:119",{"_index":1659,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:128",{"_index":1664,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:46",{"_index":1665,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:50",{"_index":1657,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:65",{"_index":1666,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:7",{"_index":1667,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:8",{"_index":1668,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:9",{"_index":1655,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:93",{"_index":1662,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applicationstatus",{"_index":1302,"title":{},"body":{"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"classes/UpdateDocumentApplicationDto.html":{},"miscellaneous/enumerations.html":{}}}],["applicationstatus.approved",{"_index":2482,"title":{},"body":{"classes/UpdateDocumentApplicationDto.html":{}}}],["applicationstatus.pending",{"_index":1344,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["applicationstatushistory",{"_index":372,"title":{"entities/ApplicationStatusHistory.html":{}},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentApplication.html":{},"modules/DocumentApplicationsModule.html":{},"coverage.html":{}}}],["applicationsubtype",{"_index":1193,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{}}}],["applicationtype",{"_index":1194,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["applicationtype.birth_certificate",{"_index":1218,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["apply",{"_index":1521,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["appmodule",{"_index":281,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appointment",{"_index":415,"title":{"entities/Appointment.html":{}},"body":{"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"coverage.html":{}}}],["appointment'})@apiresponse({status",{"_index":471,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["appointment.appointmentdate",{"_index":665,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointment.appointmenttime",{"_index":667,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointment.controller",{"_index":603,"title":{},"body":{"modules/AppointmentModule.html":{}}}],["appointment.dto",{"_index":521,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"classes/UpdateAppointmentDto.html":{}}}],["appointment.dto.ts",{"_index":1172,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{},"coverage.html":{}}}],["appointment.dto.ts:13",{"_index":1178,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:17",{"_index":1180,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:21",{"_index":1181,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:25",{"_index":1174,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:29",{"_index":1182,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:33",{"_index":1183,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:37",{"_index":1176,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:41",{"_index":1177,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:45",{"_index":1185,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:48",{"_index":1186,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:51",{"_index":1179,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:9",{"_index":2477,"title":{},"body":{"classes/UpdateAppointmentDto.html":{}}}],["appointment.service",{"_index":520,"title":{},"body":{"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{}}}],["appointment.status",{"_index":681,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointment.userid",{"_index":583,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["appointment_type",{"_index":1918,"title":{},"body":{"entities/QueueDetails.html":{}}}],["appointmentcontroller",{"_index":457,"title":{"controllers/AppointmentController.html":{}},"body":{"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"coverage.html":{}}}],["appointmentdate",{"_index":417,"title":{},"body":{"entities/Appointment.html":{},"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{}}}],["appointmentmodule",{"_index":285,"title":{"modules/AppointmentModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules.html":{},"overview.html":{}}}],["appointmentnumber",{"_index":418,"title":{},"body":{"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["appointmentrepository",{"_index":614,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointments",{"_index":459,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["appointmentservice",{"_index":519,"title":{"injectables/AppointmentService.html":{}},"body":{"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"coverage.html":{},"overview.html":{}}}],["appointmentstatus",{"_index":440,"title":{},"body":{"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{},"miscellaneous/enumerations.html":{}}}],["appointmentstatus.cancelled",{"_index":721,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointmentstatus.completed",{"_index":720,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointmentstatus.confirmed",{"_index":689,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointmentstatus.pending",{"_index":456,"title":{},"body":{"entities/Appointment.html":{},"injectables/AppointmentService.html":{}}}],["appointmenttime",{"_index":419,"title":{},"body":{"entities/Appointment.html":{},"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{}}}],["appointmenttype",{"_index":1231,"title":{},"body":{"classes/CreateQueueDto.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{}}}],["appropriately",{"_index":1065,"title":{},"body":{"injectables/AuthService.html":{}}}],["approved",{"_index":1330,"title":{},"body":{"entities/DocumentApplication.html":{},"classes/UpdateDocumentApplicationDto.html":{},"miscellaneous/enumerations.html":{}}}],["appservice",{"_index":277,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":41,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AuthController.html":{},"interfaces/AuthenticatedUser.html":{},"classes/CreateUserDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/PaginatedUsersResponseDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{}}}],["array.isarray(payload.roles",{"_index":1136,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["array.isarray(queue.details",{"_index":2345,"title":{},"body":{"controllers/QueuesController.html":{}}}],["asc",{"_index":657,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueService.html":{}}}],["asia/manila",{"_index":2043,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["assign",{"_index":43,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["assigned",{"_index":1080,"title":{},"body":{"injectables/AuthService.html":{}}}],["assigning",{"_index":984,"title":{},"body":{"injectables/AuthService.html":{}}}],["assignment",{"_index":2596,"title":{},"body":{"controllers/UsersController.html":{}}}],["assignment'})@apiresponse({status",{"_index":2578,"title":{},"body":{"controllers/UsersController.html":{}}}],["assignments",{"_index":861,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["assignments'})@apiparam({name",{"_index":754,"title":{},"body":{"controllers/AuthController.html":{}}}],["assignrolestouser",{"_index":2447,"title":{},"body":{"injectables/RolesService.html":{}}}],["assignrolestouser(userid",{"_index":2452,"title":{},"body":{"injectables/RolesService.html":{}}}],["associated",{"_index":2275,"title":{},"body":{"injectables/QueueService.html":{}}}],["async",{"_index":234,"title":{},"body":{"injectables/AnnouncementService.html":{},"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["attempt",{"_index":931,"title":{},"body":{"injectables/AuthService.html":{}}}],["attempting",{"_index":1047,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth",{"_index":540,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth')@apibody({type",{"_index":808,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth')@useguards(jwtauthguard",{"_index":776,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth')@useguards(jwtauthguard)@get('profile",{"_index":787,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":877,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":524,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["auth.guard.ts",{"_index":1585,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":813,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/RequestWithUser.html":{}}}],["auth/auth.module",{"_index":300,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/decorators/roles.decorator",{"_index":528,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["auth/decorators/user.decorator",{"_index":530,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{}}}],["auth/dto/update",{"_index":1502,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth/guards/jwt",{"_index":523,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["auth/guards/roles.guard",{"_index":526,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["auth/jwt.strategy",{"_index":531,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["authcontroller",{"_index":739,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["authenticated",{"_index":543,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/QueueController.html":{}}}],["authenticateduser",{"_index":469,"title":{"interfaces/AuthenticatedUser.html":{}},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authguard",{"_index":1587,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":1586,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":286,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":2810,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authorization",{"_index":1994,"title":{},"body":{"classes/QueueGateway.html":{}}}],["authservice",{"_index":812,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{},"overview.html":{}}}],["auto",{"_index":1262,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/QueueSchedulerService.html":{},"classes/RegisterDto.html":{}}}],["availability",{"_index":661,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["available",{"_index":571,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["average",{"_index":2286,"title":{},"body":{"injectables/QueueService.html":{}}}],["averagewaittime",{"_index":2290,"title":{},"body":{"injectables/QueueService.html":{}}}],["await",{"_index":253,"title":{},"body":{"injectables/AnnouncementService.html":{},"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["aws",{"_index":2750,"title":{},"body":{"index.html":{}}}],["back",{"_index":991,"title":{},"body":{"injectables/AuthService.html":{}}}],["backend",{"_index":1838,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["backers",{"_index":2805,"title":{},"body":{"index.html":{}}}],["backward",{"_index":2527,"title":{},"body":{"entities/User.html":{}}}],["bad",{"_index":760,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["badrequestexception",{"_index":516,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('cannot",{"_index":650,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["badrequestexception('date",{"_index":560,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["badrequestexception('document",{"_index":1435,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["badrequestexception('failed",{"_index":1035,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('invalid",{"_index":644,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{}}}],["badrequestexception('this",{"_index":735,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["badrequestexception(`role",{"_index":1078,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception(`user",{"_index":1060,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception(passwordvalidation.message",{"_index":971,"title":{},"body":{"injectables/AuthService.html":{}}}],["based",{"_index":2137,"title":{},"body":{"injectables/QueueService.html":{},"index.html":{}}}],["basic",{"_index":1062,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt",{"_index":916,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare",{"_index":940,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.compare(logindto.password",{"_index":921,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.gensalt",{"_index":973,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["bcrypt.hash(createuserdto.password",{"_index":2615,"title":{},"body":{"controllers/UsersController.html":{}}}],["bcrypt.hash(password",{"_index":975,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(updateuserdto.password",{"_index":1013,"title":{},"body":{"injectables/AuthService.html":{}}}],["before",{"_index":851,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{}}}],["beforeconnect",{"_index":344,"title":{},"body":{"modules/AppModule.html":{}}}],["being",{"_index":1001,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["belongs",{"_index":577,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["below",{"_index":339,"title":{},"body":{"modules/AppModule.html":{}}}],["better",{"_index":2229,"title":{},"body":{"injectables/QueueService.html":{}}}],["between",{"_index":633,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["between(startdate",{"_index":705,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["between(startofday",{"_index":2068,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["between(todaystart",{"_index":2150,"title":{},"body":{"injectables/QueueService.html":{}}}],["bigint",{"_index":1486,"title":{},"body":{"entities/DocumentFile.html":{}}}],["birth",{"_index":1199,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["birth_certificate",{"_index":1319,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["birthdate",{"_index":1223,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["birthplace",{"_index":1226,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["board",{"_index":2797,"title":{},"body":{"index.html":{}}}],["body",{"_index":182,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["body('documentcategory",{"_index":1431,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["body('status",{"_index":588,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["body.status",{"_index":1879,"title":{},"body":{"controllers/QueueController.html":{}}}],["book",{"_index":651,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["booked",{"_index":733,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["bookedslots",{"_index":691,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["bookedslots.includes(slot",{"_index":703,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["boolean",{"_index":138,"title":{},"body":{"entities/Announcement.html":{},"entities/Appointment.html":{},"injectables/AuthService.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"interfaces/FindAllOptions.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["bootstrap",{"_index":215,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["both",{"_index":2332,"title":{},"body":{"controllers/QueuesController.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["browse",{"_index":2819,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2817,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":1691,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["bucketname",{"_index":1599,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["building",{"_index":2717,"title":{},"body":{"index.html":{}}}],["bulacan",{"_index":107,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["bulacan'})@isstring()@isoptional",{"_index":54,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["bulak",{"_index":1631,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["bulak_smart_connect",{"_index":2837,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bulk",{"_index":1870,"title":{},"body":{"controllers/QueueController.html":{}}}],["business",{"_index":1327,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["business_permit",{"_index":1326,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["calculate",{"_index":2285,"title":{},"body":{"injectables/QueueService.html":{}}}],["callback",{"_index":1423,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["callback(null",{"_index":1429,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["called",{"_index":2276,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["caller",{"_index":1582,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["callnext",{"_index":1753,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["callnext(@param('counterid",{"_index":1893,"title":{},"body":{"controllers/QueueController.html":{}}}],["callnext(counterid",{"_index":1772,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["canactivate",{"_index":2392,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":2397,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["cancel",{"_index":2070,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cancellation",{"_index":2082,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cancellations",{"_index":2078,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cancelled",{"_index":453,"title":{},"body":{"entities/Appointment.html":{},"injectables/AppointmentService.html":{},"entities/Queue.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"miscellaneous/enumerations.html":{}}}],["cancelledcount",{"_index":716,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["cancelledqueues",{"_index":2072,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cancelledqueues.length",{"_index":2076,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cancelledservingqueues",{"_index":2090,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cancelledservingqueues.length",{"_index":2092,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cascade",{"_index":388,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/QueueDetails.html":{}}}],["cascade'})@joincolumn({name",{"_index":1477,"title":{},"body":{"entities/DocumentFile.html":{},"entities/QueueDetails.html":{}}}],["catch",{"_index":673,"title":{},"body":{"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"controllers/QueueController.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["category",{"_index":1433,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["category)'})@apiresponse({status",{"_index":1375,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["caught",{"_index":1069,"title":{},"body":{"injectables/AuthService.html":{}}}],["certificate",{"_index":1200,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["change",{"_index":1009,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{}}}],["changed",{"_index":1015,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["changed_at",{"_index":396,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["changed_by",{"_index":398,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["changedat",{"_index":378,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["changedby",{"_index":379,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["changing",{"_index":660,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueService.html":{}}}],["channel",{"_index":2774,"title":{},"body":{"index.html":{}}}],["character",{"_index":1110,"title":{},"body":{"injectables/AuthService.html":{}}}],["characters",{"_index":80,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["check",{"_index":576,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["checkexists",{"_index":2104,"title":{},"body":{"injectables/QueueService.html":{}}}],["checkexists(id",{"_index":2113,"title":{},"body":{"injectables/QueueService.html":{}}}],["checking",{"_index":736,"title":{},"body":{"injectables/AppointmentService.html":{},"controllers/QueueController.html":{}}}],["checkqueueexists",{"_index":1754,"title":{},"body":{"controllers/QueueController.html":{}}}],["checkqueueexists(@param('id",{"_index":1898,"title":{},"body":{"controllers/QueueController.html":{}}}],["checkqueueexists(id",{"_index":1776,"title":{},"body":{"controllers/QueueController.html":{}}}],["checks",{"_index":353,"title":{},"body":{"modules/AppModule.html":{}}}],["checktimeslotavailability",{"_index":606,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["checktimeslotavailability(date",{"_index":615,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["citizen",{"_index":98,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["citizenrole",{"_index":979,"title":{},"body":{"injectables/AuthService.html":{}}}],["citizenrole.id",{"_index":982,"title":{},"body":{"injectables/AuthService.html":{}}}],["class",{"_index":0,"title":{"classes/AdminUpdateUserDto.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/QueueGateway.html":{},"classes/RegisterDto.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/QueueGateway.html":{},"classes/RegisterDto.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"overview.html":{}}}],["clear",{"_index":2313,"title":{},"body":{"injectables/QueueService.html":{}}}],["clicks",{"_index":2759,"title":{},"body":{"index.html":{}}}],["client",{"_index":1964,"title":{},"body":{"classes/QueueGateway.html":{}}}],["client.id",{"_index":2001,"title":{},"body":{"classes/QueueGateway.html":{}}}],["client.join('queue_updates",{"_index":2012,"title":{},"body":{"classes/QueueGateway.html":{}}}],["client.join(`counter_${counterid",{"_index":2009,"title":{},"body":{"classes/QueueGateway.html":{}}}],["client.join(`queue_${queueid",{"_index":2005,"title":{},"body":{"classes/QueueGateway.html":{}}}],["clients",{"_index":2015,"title":{},"body":{"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["cloud",{"_index":2745,"title":{},"body":{"index.html":{}}}],["cluster_announcementmodule",{"_index":218,"title":{},"body":{"modules/AnnouncementModule.html":{},"overview.html":{}}}],["cluster_announcementmodule_exports",{"_index":219,"title":{},"body":{"modules/AnnouncementModule.html":{},"overview.html":{}}}],["cluster_announcementmodule_providers",{"_index":220,"title":{},"body":{"modules/AnnouncementModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":282,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":284,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":283,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appointmentmodule",{"_index":599,"title":{},"body":{"modules/AppointmentModule.html":{},"overview.html":{}}}],["cluster_appointmentmodule_exports",{"_index":600,"title":{},"body":{"modules/AppointmentModule.html":{},"overview.html":{}}}],["cluster_appointmentmodule_providers",{"_index":601,"title":{},"body":{"modules/AppointmentModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":867,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":869,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":870,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":868,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_documentapplicationsmodule",{"_index":1462,"title":{},"body":{"modules/DocumentApplicationsModule.html":{},"overview.html":{}}}],["cluster_documentapplicationsmodule_exports",{"_index":1464,"title":{},"body":{"modules/DocumentApplicationsModule.html":{},"overview.html":{}}}],["cluster_documentapplicationsmodule_providers",{"_index":1463,"title":{},"body":{"modules/DocumentApplicationsModule.html":{},"overview.html":{}}}],["cluster_queuemodule",{"_index":2022,"title":{},"body":{"modules/QueueModule.html":{},"overview.html":{}}}],["cluster_queuemodule_exports",{"_index":2023,"title":{},"body":{"modules/QueueModule.html":{},"overview.html":{}}}],["cluster_queuemodule_providers",{"_index":2024,"title":{},"body":{"modules/QueueModule.html":{},"overview.html":{}}}],["cluster_rolesmodule",{"_index":2439,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_rolesmodule_exports",{"_index":2440,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_rolesmodule_providers",{"_index":2441,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":2620,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":2623,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":2622,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":2621,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":340,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["column",{"_index":144,"title":{},"body":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["column({default",{"_index":433,"title":{},"body":{"entities/Appointment.html":{}}}],["column({name",{"_index":392,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["column({nullable",{"_index":436,"title":{},"body":{"entities/Appointment.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{}}}],["column({type",{"_index":125,"title":{},"body":{"entities/Announcement.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/Queue.html":{}}}],["column({unique",{"_index":427,"title":{},"body":{"entities/Appointment.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["combine",{"_index":2249,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["come",{"_index":1857,"title":{},"body":{"controllers/QueueController.html":{},"index.html":{}}}],["compatibility",{"_index":2528,"title":{},"body":{"entities/User.html":{}}}],["complete",{"_index":48,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["completed",{"_index":452,"title":{},"body":{"entities/Appointment.html":{},"injectables/AppointmentService.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"miscellaneous/enumerations.html":{}}}],["completed_at",{"_index":1728,"title":{},"body":{"entities/Queue.html":{}}}],["completedat",{"_index":1724,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["completedcount",{"_index":715,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueService.html":{}}}],["completedqueues",{"_index":2288,"title":{},"body":{"injectables/QueueService.html":{}}}],["completedqueues.length",{"_index":2291,"title":{},"body":{"injectables/QueueService.html":{}}}],["completedqueues.reduce((total",{"_index":2293,"title":{},"body":{"injectables/QueueService.html":{}}}],["completion",{"_index":2098,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["component",{"_index":1026,"title":{},"body":{"injectables/AuthService.html":{}}}],["components",{"_index":1548,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["config",{"_index":882,"title":{},"body":{"modules/AuthModule.html":{}}}],["config.get('jwt_secret",{"_index":884,"title":{},"body":{"modules/AuthModule.html":{}}}],["config/database.config",{"_index":298,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":292,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":309,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":293,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{}}}],["configservice.get('db_host",{"_index":316,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_logging",{"_index":331,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_name",{"_index":322,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_password",{"_index":320,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_port",{"_index":318,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_synchronize",{"_index":326,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_timezone",{"_index":362,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_username",{"_index":319,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('jwt_secret",{"_index":1123,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('node_env",{"_index":346,"title":{},"body":{"modules/AppModule.html":{}}}],["configured",{"_index":1682,"title":{},"body":{"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{}}}],["confirmed",{"_index":451,"title":{},"body":{"entities/Appointment.html":{},"injectables/AppointmentService.html":{},"miscellaneous/enumerations.html":{}}}],["confirmedcount",{"_index":714,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["conflict",{"_index":774,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["conflictexception",{"_index":915,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["conflictexception('email",{"_index":963,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["conflictexception('username",{"_index":966,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["conn",{"_index":348,"title":{},"body":{"modules/AppModule.html":{}}}],["conn.query('set",{"_index":354,"title":{},"body":{"modules/AppModule.html":{}}}],["conn.query(`set",{"_index":360,"title":{},"body":{"modules/AppModule.html":{}}}],["connect",{"_index":1633,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["connected",{"_index":2000,"title":{},"body":{"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{}}}],["connection",{"_index":345,"title":{},"body":{"modules/AppModule.html":{}}}],["consistent",{"_index":987,"title":{},"body":{"injectables/AuthService.html":{}}}],["console",{"_index":334,"title":{},"body":{"modules/AppModule.html":{}}}],["console.error",{"_index":706,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["console.error('admin",{"_index":1095,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.error('error",{"_index":729,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["console.error('invalid",{"_index":2306,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.error('login",{"_index":957,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.error('registration",{"_index":992,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.error('user",{"_index":1038,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.error(`error",{"_index":675,"title":{},"body":{"injectables/AppointmentService.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["console.error(`invalid",{"_index":1878,"title":{},"body":{"controllers/QueueController.html":{}}}],["console.log",{"_index":1046,"title":{},"body":{"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["console.log('comparing",{"_index":937,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('creating",{"_index":2173,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.log('dto",{"_index":1841,"title":{},"body":{"controllers/QueueController.html":{}}}],["console.log('final",{"_index":1846,"title":{},"body":{"controllers/QueueController.html":{}}}],["console.log('found",{"_index":2202,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["console.log('generated",{"_index":952,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('get",{"_index":2330,"title":{},"body":{"controllers/QueuesController.html":{}}}],["console.log('getting",{"_index":2224,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.log('login",{"_index":833,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["console.log('manual",{"_index":1850,"title":{},"body":{"controllers/QueueController.html":{}}}],["console.log('original",{"_index":1840,"title":{},"body":{"controllers/QueueController.html":{}}}],["console.log('password",{"_index":941,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('processed",{"_index":1858,"title":{},"body":{"controllers/QueueController.html":{}}}],["console.log('processing",{"_index":2342,"title":{},"body":{"controllers/QueuesController.html":{}}}],["console.log('queue",{"_index":1839,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["console.log('received",{"_index":1432,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{}}}],["console.log('register",{"_index":841,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["console.log('stored",{"_index":935,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log('user",{"_index":932,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(`calculated",{"_index":2223,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.log(`creating",{"_index":2158,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.log(`deleted",{"_index":679,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["console.log(`finding",{"_index":2244,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.log(`found",{"_index":2211,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.log(`getting",{"_index":2210,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.log(`manual",{"_index":1907,"title":{},"body":{"controllers/QueueController.html":{}}}],["console.log(`patch",{"_index":1875,"title":{},"body":{"controllers/QueueController.html":{}}}],["console.log(`pending",{"_index":2222,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.log(`queue",{"_index":1883,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["console.log(`returning",{"_index":2251,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["console.log(`serving",{"_index":2217,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.log(`updated",{"_index":671,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["console.log(`updating",{"_index":2201,"title":{},"body":{"injectables/QueueService.html":{}}}],["const",{"_index":251,"title":{},"body":{"injectables/AnnouncementService.html":{},"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService-1.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":235,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["constructor(announcementrepository",{"_index":236,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["constructor(appointmentrepository",{"_index":612,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["constructor(configservice",{"_index":1588,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/MinioService-1.html":{}}}],["constructor(private",{"_index":195,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppController.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService-1.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{}}}],["constructor(queuerepository",{"_index":2036,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["constructor(queueservice",{"_index":1956,"title":{},"body":{"classes/QueueGateway.html":{}}}],["constructor(reflector",{"_index":2435,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(rolesrepository",{"_index":2449,"title":{},"body":{"injectables/RolesService.html":{}}}],["constructor(usersrepository",{"_index":894,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["contact",{"_index":57,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["contact_number",{"_index":2499,"title":{},"body":{"entities/User.html":{}}}],["contactnumber",{"_index":21,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["contain",{"_index":1102,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{}}}],["containing",{"_index":1208,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["content",{"_index":1637,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{}}}],["context",{"_index":2438,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":2401,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":2400,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":2402,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["controller",{"_index":147,"title":{"controllers/AnnouncementController.html":{},"controllers/AppController.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AnnouncementController.html":{},"controllers/AppController.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('announcements",{"_index":194,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["controller('appointments",{"_index":537,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["controller('auth",{"_index":825,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["controller('document",{"_index":1413,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["controller('queue",{"_index":1835,"title":{},"body":{"controllers/QueueController.html":{}}}],["controller('queues",{"_index":2325,"title":{},"body":{"controllers/QueuesController.html":{}}}],["controller('roles",{"_index":2428,"title":{},"body":{"controllers/RolesController.html":{}}}],["controller('users",{"_index":2602,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":149,"title":{},"body":{"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"controllers/QueueController.html":{},"modules/QueueModule.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["convert",{"_index":2298,"title":{},"body":{"injectables/QueueService.html":{}}}],["converting",{"_index":852,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["copy",{"_index":1198,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["cors",{"_index":1989,"title":{},"body":{"classes/QueueGateway.html":{}}}],["count",{"_index":1509,"title":{},"body":{"interfaces/FindAllOptions.html":{},"controllers/QueueController.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["count')@useguards(jwtauthguard",{"_index":1817,"title":{},"body":{"controllers/QueueController.html":{}}}],["counter",{"_index":1138,"title":{"entities/Counter.html":{}},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"coverage.html":{}}}],["counter.currentqueue",{"_index":1730,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{}}}],["counter.currentqueue.completedat",{"_index":2263,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter.currentqueue.status",{"_index":2262,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter.currentqueueid",{"_index":2266,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter.id",{"_index":2282,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter.name",{"_index":2272,"title":{},"body":{"injectables/QueueService.html":{}}}],["counter/entities/counter.entity",{"_index":1746,"title":{},"body":{"entities/Queue.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["counter_number",{"_index":1732,"title":{},"body":{"entities/Queue.html":{}}}],["counterid",{"_index":1775,"title":{},"body":{"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["countername",{"_index":2281,"title":{},"body":{"injectables/QueueService.html":{}}}],["counternumber",{"_index":1725,"title":{},"body":{"entities/Queue.html":{},"controllers/QueuesController.html":{},"classes/UpdateQueueDto.html":{}}}],["counterrepository",{"_index":2108,"title":{},"body":{"injectables/QueueService.html":{}}}],["counters",{"_index":2300,"title":{},"body":{"injectables/QueueService.html":{}}}],["counterstatus",{"_index":1151,"title":{},"body":{"entities/Counter.html":{},"injectables/QueueService.html":{},"miscellaneous/enumerations.html":{}}}],["counterstatus.active",{"_index":1158,"title":{},"body":{"entities/Counter.html":{}}}],["counting",{"_index":2144,"title":{},"body":{"injectables/QueueService.html":{}}}],["counts",{"_index":710,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["courses",{"_index":2780,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":2639,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":154,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create')@useguards(jwtauthguard",{"_index":2576,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(@body",{"_index":197,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/QueueController.html":{}}}],["create(createannouncementdto",{"_index":159,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{}}}],["create(createappointmentdto",{"_index":467,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["create(createdto",{"_index":1353,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["create(createqueuedto",{"_index":1779,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["create(createuserdto",{"_index":1580,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["createannouncementdto",{"_index":160,"title":{"classes/CreateAnnouncementDto.html":{}},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"classes/CreateAnnouncementDto.html":{},"classes/UpdateAnnouncementDto.html":{},"coverage.html":{}}}],["createappointmentdto",{"_index":468,"title":{"classes/CreateAppointmentDto.html":{}},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{},"coverage.html":{}}}],["createappointmentdto.userid",{"_index":544,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["created",{"_index":473,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/MinioService-1.html":{},"controllers/QueueController.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{}}}],["created_at",{"_index":1289,"title":{},"body":{"entities/DocumentApplication.html":{},"entities/Queue.html":{},"entities/User.html":{}}}],["createdat",{"_index":116,"title":{},"body":{"entities/Announcement.html":{},"injectables/AnnouncementService.html":{},"entities/Appointment.html":{},"entities/DocumentApplication.html":{},"interfaces/FindAllOptions.html":{},"entities/Queue.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["createdatecolumn",{"_index":123,"title":{},"body":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/Queue.html":{},"entities/User.html":{}}}],["createdatecolumn({name",{"_index":395,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/Queue.html":{},"entities/User.html":{}}}],["createdby",{"_index":117,"title":{},"body":{"entities/Announcement.html":{},"classes/CreateAnnouncementDto.html":{}}}],["createdocumentapplicationdto",{"_index":1190,"title":{"classes/CreateDocumentApplicationDto.html":{}},"body":{"classes/CreateDocumentApplicationDto.html":{},"controllers/DocumentApplicationsController.html":{},"classes/UpdateDocumentApplicationDto.html":{},"coverage.html":{}}}],["createdto",{"_index":1356,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["createmanualqueue",{"_index":1755,"title":{},"body":{"controllers/QueueController.html":{}}}],["createmanualqueue(createqueuedto",{"_index":1783,"title":{},"body":{"controllers/QueueController.html":{}}}],["createparamdecorator",{"_index":2386,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"miscellaneous/variables.html":{}}}],["createquerybuilder",{"_index":1557,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["createquerybuilder('user",{"_index":1518,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["createqueuedto",{"_index":1228,"title":{"classes/CreateQueueDto.html":{}},"body":{"classes/CreateQueueDto.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"coverage.html":{}}}],["createqueuedto.address",{"_index":2183,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.appointmenttype",{"_index":2186,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.firstname",{"_index":2180,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.isguest",{"_index":1842,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["createqueuedto.lastname",{"_index":2181,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.middleinitial",{"_index":2182,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.phonenumber",{"_index":2184,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.reasonofvisit",{"_index":2185,"title":{},"body":{"injectables/QueueService.html":{}}}],["createqueuedto.userid",{"_index":1845,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["creates",{"_index":2577,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuserdto",{"_index":1243,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["creating",{"_index":1583,"title":{},"body":{"interfaces/FindAllOptions.html":{},"controllers/QueueController.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["creation",{"_index":1837,"title":{},"body":{"controllers/QueueController.html":{},"classes/UserResponseDto.html":{}}}],["credentials",{"_index":830,"title":{},"body":{"controllers/AuthController.html":{},"classes/QueueGateway.html":{},"interfaces/RequestWithUser.html":{}}}],["credentials'})@apibody({type",{"_index":795,"title":{},"body":{"controllers/AuthController.html":{}}}],["credentials'})@apiresponse({status",{"_index":766,"title":{},"body":{"controllers/AuthController.html":{}}}],["cron",{"_index":2051,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cron('59",{"_index":2040,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cruz",{"_index":1222,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["ctx",{"_index":2388,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":2389,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"miscellaneous/variables.html":{}}}],["current",{"_index":1714,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{},"injectables/QueueService.html":{},"controllers/UsersController.html":{}}}],["current_queue_id",{"_index":1145,"title":{},"body":{"entities/Counter.html":{}}}],["currently",{"_index":2213,"title":{},"body":{"injectables/QueueService.html":{}}}],["currentqueue",{"_index":1140,"title":{},"body":{"entities/Counter.html":{},"injectables/QueueService.html":{}}}],["currentqueueid",{"_index":1141,"title":{},"body":{"entities/Counter.html":{}}}],["currentuser",{"_index":2607,"title":{},"body":{"controllers/UsersController.html":{}}}],["currentuser.id",{"_index":2608,"title":{},"body":{"controllers/UsersController.html":{}}}],["currentuser.roles.some((role",{"_index":2609,"title":{},"body":{"controllers/UsersController.html":{}}}],["daily",{"_index":1908,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["data",{"_index":336,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/CreateDocumentApplicationDto.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"miscellaneous/variables.html":{}}}],["data')@apioperation({summary",{"_index":1398,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["data'})@apiresponse({status",{"_index":763,"title":{},"body":{"controllers/AuthController.html":{}}}],["database",{"_index":321,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/QueueService.html":{},"miscellaneous/variables.html":{}}}],["databaseconfig",{"_index":297,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["datasource",{"_index":2712,"title":{},"body":{"miscellaneous/functions.html":{}}}],["date",{"_index":122,"title":{},"body":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"injectables/MinioService-1.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"dependencies.html":{}}}],["date')@useguards(jwtauthguard",{"_index":495,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["date().todatestring",{"_index":1913,"title":{},"body":{"controllers/QueueController.html":{}}}],["date().toisostring",{"_index":1693,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["date(today",{"_index":2061,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["date.getday",{"_index":647,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["datestr",{"_index":2139,"title":{},"body":{"injectables/QueueService.html":{}}}],["day",{"_index":2054,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["dayofweek",{"_index":646,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["dd",{"_index":727,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["death",{"_index":1325,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["death_certificate",{"_index":1324,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["debug",{"_index":934,"title":{},"body":{"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["debugging",{"_index":844,"title":{},"body":{"controllers/AuthController.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["declarations",{"_index":214,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decline",{"_index":1332,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["decorators",{"_index":32,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"controllers/AppController.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"classes/LoginDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{}}}],["decorators/roles.decorator",{"_index":818,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["deeper",{"_index":2776,"title":{},"body":{"index.html":{}}}],["default",{"_index":34,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"entities/Appointment.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["default_role_id",{"_index":2502,"title":{},"body":{"entities/User.html":{}}}],["defaultrole",{"_index":829,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/RequestWithUser.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["defaultroleid",{"_index":18,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["defaultstrategy",{"_index":879,"title":{},"body":{"modules/AuthModule.html":{}}}],["define",{"_index":2396,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["defined",{"_index":39,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dela",{"_index":1221,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["delete",{"_index":185,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"controllers/UsersController.html":{}}}],["delete(':id",{"_index":176,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["delete(':id')@apioperation({summary",{"_index":1386,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["delete(':id')@httpcode(httpstatus.no_content)@apioperation({summary",{"_index":507,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["delete(':id')@useguards(rolesguard)@roles('admin",{"_index":2588,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleted",{"_index":1456,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deletefile",{"_index":1601,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["deletefile(objectname",{"_index":1605,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["deleting",{"_index":680,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/MinioService-1.html":{}}}],["deletion",{"_index":596,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["dependencies",{"_index":212,"title":{"dependencies.html":{}},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":2737,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":2749,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":2743,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":2758,"title":{},"body":{"index.html":{}}}],["deprecated",{"_index":2466,"title":{},"body":{"injectables/RolesService.html":{}}}],["desc",{"_index":257,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["desc').skip(skip).take(limit",{"_index":1526,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["description",{"_index":8,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentApplicationsController.html":{},"classes/LoginDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"index.html":{},"properties.html":{}}}],["detail",{"_index":2240,"title":{},"body":{"injectables/QueueService.html":{}}}],["detail.queue.id",{"_index":2310,"title":{},"body":{"injectables/QueueService.html":{}}}],["details",{"_index":1209,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["details.entity",{"_index":1745,"title":{},"body":{"entities/Queue.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["details.entity.ts",{"_index":1915,"title":{},"body":{"entities/QueueDetails.html":{},"coverage.html":{}}}],["details.entity.ts:14",{"_index":1922,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:17",{"_index":1935,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:21",{"_index":1934,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:24",{"_index":1940,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:28",{"_index":1939,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:31",{"_index":1921,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:34",{"_index":1926,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:37",{"_index":1928,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:40",{"_index":1917,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:43",{"_index":1930,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:46",{"_index":1937,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:49",{"_index":1919,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:52",{"_index":1924,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.queue",{"_index":1736,"title":{},"body":{"entities/Queue.html":{}}}],["details?.address",{"_index":2354,"title":{},"body":{"controllers/QueuesController.html":{}}}],["details?.firstname",{"_index":2350,"title":{},"body":{"controllers/QueuesController.html":{}}}],["details?.lastname",{"_index":2351,"title":{},"body":{"controllers/QueuesController.html":{}}}],["details?.middleinitial",{"_index":2352,"title":{},"body":{"controllers/QueuesController.html":{}}}],["details?.phonenumber",{"_index":2355,"title":{},"body":{"controllers/QueuesController.html":{}}}],["details?.reasonofvisit",{"_index":2353,"title":{},"body":{"controllers/QueuesController.html":{}}}],["detailsmap",{"_index":2226,"title":{},"body":{"injectables/QueueService.html":{}}}],["detailsmap[detail.queueid",{"_index":2239,"title":{},"body":{"injectables/QueueService.html":{}}}],["detailsmap[queue.id",{"_index":2250,"title":{},"body":{"injectables/QueueService.html":{}}}],["development",{"_index":338,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["devtools",{"_index":2786,"title":{},"body":{"index.html":{}}}],["different",{"_index":711,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["digits",{"_index":2153,"title":{},"body":{"injectables/QueueService.html":{}}}],["disable",{"_index":350,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["disconnected",{"_index":2004,"title":{},"body":{"classes/QueueGateway.html":{}}}],["discord",{"_index":2773,"title":{},"body":{"index.html":{}}}],["dive",{"_index":2775,"title":{},"body":{"index.html":{}}}],["document",{"_index":409,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"classes/UpdateDocumentApplicationDto.html":{},"coverage.html":{}}}],["document_category",{"_index":1480,"title":{},"body":{"entities/DocumentFile.html":{}}}],["documentapplication",{"_index":383,"title":{"entities/DocumentApplication.html":{}},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentApplication.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"coverage.html":{}}}],["documentapplicationscontroller",{"_index":1345,"title":{"controllers/DocumentApplicationsController.html":{}},"body":{"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"coverage.html":{}}}],["documentapplicationsmodule",{"_index":287,"title":{"modules/DocumentApplicationsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules.html":{},"overview.html":{}}}],["documentapplicationsservice",{"_index":1408,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"coverage.html":{},"overview.html":{}}}],["documentation",{"_index":2640,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["documentcategory",{"_index":1396,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{}}}],["documentfile",{"_index":1291,"title":{"entities/DocumentFile.html":{}},"body":{"entities/DocumentApplication.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"coverage.html":{}}}],["doe",{"_index":105,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["doe'})@isstring()@isnotempty",{"_index":2376,"title":{},"body":{"classes/RegisterDto.html":{}}}],["doe'})@isstring()@isoptional",{"_index":67,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["doesn't",{"_index":2212,"title":{},"body":{"injectables/QueueService.html":{}}}],["don't",{"_index":579,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/QueueController.html":{}}}],["dotenv",{"_index":2685,"title":{},"body":{"dependencies.html":{}}}],["download",{"_index":1379,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["dropschema",{"_index":342,"title":{},"body":{"modules/AppModule.html":{}}}],["dto",{"_index":9,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["dto/create",{"_index":191,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/login.dto",{"_index":814,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["dto/register.dto",{"_index":815,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["dto/update",{"_index":193,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["dto/user",{"_index":2599,"title":{},"body":{"controllers/UsersController.html":{}}}],["during",{"_index":1068,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueSchedulerService.html":{}}}],["e.g",{"_index":73,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["e2e",{"_index":2733,"title":{},"body":{"index.html":{}}}],["each",{"_index":1273,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/QueueService.html":{}}}],["eager",{"_index":1306,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["earlier",{"_index":2219,"title":{},"body":{"injectables/QueueService.html":{}}}],["east",{"_index":1687,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["easy",{"_index":2236,"title":{},"body":{"injectables/QueueService.html":{}}}],["efficient",{"_index":2718,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":2741,"title":{},"body":{"index.html":{}}}],["email",{"_index":22,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["emailorusername",{"_index":1592,"title":{},"body":{"classes/LoginDto.html":{}}}],["emailregex",{"_index":993,"title":{},"body":{"injectables/AuthService.html":{}}}],["emailregex.test(email",{"_index":995,"title":{},"body":{"injectables/AuthService.html":{}}}],["empty",{"_index":2242,"title":{},"body":{"injectables/QueueService.html":{}}}],["end",{"_index":568,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["enddate",{"_index":500,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["endofday",{"_index":2046,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["endofday.sethours(23",{"_index":2063,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["endpoint",{"_index":842,"title":{},"body":{"controllers/AuthController.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"controllers/QueueController.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["endpoints",{"_index":1457,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["endpoint}:${port",{"_index":1683,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["ensure",{"_index":2739,"title":{},"body":{"index.html":{}}}],["ensurebucketexists",{"_index":1650,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["ensures",{"_index":2155,"title":{},"body":{"injectables/QueueService.html":{}}}],["ensuring",{"_index":1690,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["enterprise",{"_index":2788,"title":{},"body":{"index.html":{}}}],["entities",{"_index":114,"title":{},"body":{"entities/Announcement.html":{},"modules/AppModule.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["entities/announcement.entity",{"_index":228,"title":{},"body":{"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{}}}],["entities/application",{"_index":1468,"title":{},"body":{"modules/DocumentApplicationsModule.html":{}}}],["entities/appointment.entity",{"_index":529,"title":{},"body":{"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["entities/document",{"_index":1216,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["entities/queue",{"_index":2030,"title":{},"body":{"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["entities/queue.entity",{"_index":1832,"title":{},"body":{"controllers/QueueController.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/UpdateQueueDto.html":{}}}],["entities/role.entity",{"_index":2443,"title":{},"body":{"modules/RolesModule.html":{},"injectables/RolesService.html":{}}}],["entities/user.entity",{"_index":1501,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entity",{"_index":112,"title":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{}},"body":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{},"coverage.html":{}}}],["entity('announcements",{"_index":146,"title":{},"body":{"entities/Announcement.html":{}}}],["entity('application_status_history",{"_index":411,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["entity('appointments",{"_index":454,"title":{},"body":{"entities/Appointment.html":{}}}],["entity('counters",{"_index":1157,"title":{},"body":{"entities/Counter.html":{}}}],["entity('document_applications",{"_index":1339,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["entity('document_files",{"_index":1495,"title":{},"body":{"entities/DocumentFile.html":{}}}],["entity('queue_details",{"_index":1942,"title":{},"body":{"entities/QueueDetails.html":{}}}],["entity('queues",{"_index":1748,"title":{},"body":{"entities/Queue.html":{}}}],["entity('roles",{"_index":2416,"title":{},"body":{"entities/Role.html":{}}}],["entity('users",{"_index":2525,"title":{},"body":{"entities/User.html":{}}}],["entity{.ts,.js",{"_index":324,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["enum",{"_index":441,"title":{},"body":{"entities/Appointment.html":{},"entities/Counter.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["enumerations",{"_index":2704,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":328,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["environments",{"_index":343,"title":{},"body":{"modules/AppModule.html":{}}}],["er_dup_entry",{"_index":1041,"title":{},"body":{"injectables/AuthService.html":{}}}],["err",{"_index":1067,"title":{},"body":{"injectables/AuthService.html":{},"controllers/QueuesController.html":{}}}],["error",{"_index":674,"title":{},"body":{"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"controllers/QueueController.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["error('failed",{"_index":2259,"title":{},"body":{"injectables/QueueService.html":{}}}],["error('invalid",{"_index":2366,"title":{},"body":{"controllers/QueuesController.html":{}}}],["error('jwt_secret",{"_index":1124,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["error('queue",{"_index":2368,"title":{},"body":{"controllers/QueuesController.html":{}}}],["error('unauthorized",{"_index":1905,"title":{},"body":{"controllers/QueueController.html":{},"controllers/UsersController.html":{}}}],["error('user",{"_index":2463,"title":{},"body":{"injectables/RolesService.html":{}}}],["error(`failed",{"_index":2258,"title":{},"body":{"injectables/QueueService.html":{}}}],["error.code",{"_index":1040,"title":{},"body":{"injectables/AuthService.html":{}}}],["error.message",{"_index":837,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{}}}],["errormessage",{"_index":2256,"title":{},"body":{"injectables/QueueService.html":{}}}],["errors",{"_index":1044,"title":{},"body":{"injectables/AuthService.html":{}}}],["eslint",{"_index":923,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{},"controllers/UsersController.html":{}}}],["eslint/no",{"_index":927,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["estimated_wait_time",{"_index":1738,"title":{},"body":{"entities/Queue.html":{}}}],["estimatedwaittime",{"_index":1726,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["estimation",{"_index":2163,"title":{},"body":{"injectables/QueueService.html":{}}}],["event",{"_index":2013,"title":{},"body":{"classes/QueueGateway.html":{}}}],["example",{"_index":37,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"index.html":{}}}],["exceptions",{"_index":1096,"title":{},"body":{"injectables/AuthService.html":{}}}],["executioncontext",{"_index":2387,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":1074,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{}}}],["existing",{"_index":1000,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["existingappointment",{"_index":734,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["existingappointments",{"_index":688,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["existingappointments.map",{"_index":692,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["existinguser",{"_index":1538,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["existinguserbyemail",{"_index":962,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["existinguserbyemail.id",{"_index":1004,"title":{},"body":{"injectables/AuthService.html":{}}}],["existinguserbyusername",{"_index":965,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["existinguserbyusername.id",{"_index":1007,"title":{},"body":{"injectables/AuthService.html":{}}}],["exists",{"_index":838,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService-1.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["exists'})@apibearerauth('jwt",{"_index":775,"title":{},"body":{"controllers/AuthController.html":{}}}],["exists'})@apibody({type",{"_index":802,"title":{},"body":{"controllers/AuthController.html":{}}}],["expectation",{"_index":1997,"title":{},"body":{"classes/QueueGateway.html":{}}}],["expects",{"_index":2302,"title":{},"body":{"injectables/QueueService.html":{}}}],["experience",{"_index":2778,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":886,"title":{},"body":{"modules/AuthModule.html":{}}}],["expiry",{"_index":1661,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["export",{"_index":99,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":217,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":1407,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":1395,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["extends",{"_index":13,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AuthController.html":{},"interfaces/AuthenticatedUser.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateUserDto.html":{}}}],["extension",{"_index":72,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["extract",{"_index":1836,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["extraction",{"_index":2253,"title":{},"body":{"injectables/QueueService.html":{}}}],["extractjwt",{"_index":1114,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":1128,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["failed",{"_index":860,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/MinioService.html":{},"interfaces/RequestWithUser.html":{}}}],["failing",{"_index":2243,"title":{},"body":{"injectables/QueueService.html":{}}}],["false",{"_index":266,"title":{},"body":{"injectables/AnnouncementService.html":{},"modules/AppModule.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService-1.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["false})@isoptional()@isenum(applicationstatus",{"_index":2479,"title":{},"body":{"classes/UpdateDocumentApplicationDto.html":{}}}],["false})@isoptional()@isstring",{"_index":1201,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["false})@joincolumn({name",{"_index":389,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["fast",{"_index":2753,"title":{},"body":{"index.html":{}}}],["features",{"_index":2762,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":2227,"title":{},"body":{"injectables/QueueService.html":{}}}],["fetching",{"_index":1871,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["few",{"_index":2755,"title":{},"body":{"index.html":{}}}],["fields",{"_index":976,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["file.application",{"_index":1293,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["file.buffer",{"_index":1635,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["file.entity",{"_index":1317,"title":{},"body":{"entities/DocumentApplication.html":{},"modules/DocumentApplicationsModule.html":{}}}],["file.entity.ts",{"_index":1471,"title":{},"body":{"entities/DocumentFile.html":{},"coverage.html":{}}}],["file.entity.ts:17",{"_index":1490,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.entity.ts:20",{"_index":1479,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.entity.ts:23",{"_index":1484,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.entity.ts:26",{"_index":1489,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.entity.ts:29",{"_index":1487,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.entity.ts:32",{"_index":1492,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.entity.ts:35",{"_index":1482,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.entity.ts:38",{"_index":1494,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.entity.ts:45",{"_index":1478,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.mimetype",{"_index":1638,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["file.mimetype.match(/\\/(jpg|jpeg|png|pdf",{"_index":1424,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["file.originalname",{"_index":1640,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["file.size",{"_index":1636,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["file.size.tostring",{"_index":1695,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["file_name",{"_index":1483,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file_size",{"_index":1485,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file_type",{"_index":1488,"title":{},"body":{"entities/DocumentFile.html":{}}}],["filefilter",{"_index":1422,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["fileid",{"_index":1382,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["fileinterceptor",{"_index":1405,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["fileinterceptor('file",{"_index":1416,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["filename",{"_index":1472,"title":{},"body":{"entities/DocumentFile.html":{}}}],["files",{"_index":1282,"title":{},"body":{"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/MinioService-1.html":{}}}],["files.push(obj",{"_index":1706,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["filesize",{"_index":1418,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{}}}],["filetype",{"_index":1473,"title":{},"body":{"entities/DocumentFile.html":{}}}],["filter",{"_index":1522,"title":{},"body":{"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"classes/UserQueryDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["finalisguest",{"_index":2177,"title":{},"body":{"injectables/QueueService.html":{}}}],["find",{"_index":2060,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"injectables/RolesService.html":{}}}],["findall",{"_index":155,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findall(options",{"_index":1513,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["findall(query",{"_index":2580,"title":{},"body":{"controllers/UsersController.html":{}}}],["findall(status",{"_index":1357,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["findallbyuser",{"_index":607,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["findallbyuser(userid",{"_index":619,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["findalloptions",{"_index":1497,"title":{"interfaces/FindAllOptions.html":{}},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["findbyappointmentnumber",{"_index":460,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["findbyappointmentnumber(@param('number",{"_index":574,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["findbyappointmentnumber(appointmentnumber",{"_index":482,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["findbyemail",{"_index":2626,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyemail(email",{"_index":1578,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["findbyids",{"_index":2467,"title":{},"body":{"injectables/RolesService.html":{}}}],["findbyname",{"_index":2448,"title":{},"body":{"injectables/RolesService.html":{}}}],["findbyname(name",{"_index":2455,"title":{},"body":{"injectables/RolesService.html":{}}}],["findbyqueuenumber",{"_index":1756,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["findbyqueuenumber(@param('queuenumber",{"_index":1886,"title":{},"body":{"controllers/QueueController.html":{}}}],["findbyqueuenumber(queuenumber",{"_index":1787,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["findbystatus",{"_index":1757,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["findbystatus(@param('status",{"_index":1863,"title":{},"body":{"controllers/QueueController.html":{}}}],["findbystatus(status",{"_index":1790,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["findbystatuswithdetails",{"_index":2105,"title":{},"body":{"injectables/QueueService.html":{}}}],["findbystatuswithdetails(status",{"_index":2119,"title":{},"body":{"injectables/QueueService.html":{}}}],["findbyuseridwithdetails",{"_index":2106,"title":{},"body":{"injectables/QueueService.html":{}}}],["findbyuseridwithdetails(userid",{"_index":2121,"title":{},"body":{"injectables/QueueService.html":{}}}],["findbyusername",{"_index":2627,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyusername(username",{"_index":1579,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["findcompleted",{"_index":1758,"title":{},"body":{"controllers/QueueController.html":{}}}],["findone",{"_index":156,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone(@param('id",{"_index":203,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"controllers/RolesController.html":{}}}],["findone(id",{"_index":166,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findpending",{"_index":1759,"title":{},"body":{"controllers/QueueController.html":{}}}],["findpendingwithdetails",{"_index":1760,"title":{},"body":{"controllers/QueueController.html":{}}}],["findserving",{"_index":1761,"title":{},"body":{"controllers/QueueController.html":{}}}],["findservingwithdetails",{"_index":1762,"title":{},"body":{"controllers/QueueController.html":{}}}],["finduserappointments",{"_index":461,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["finduserappointments(@user",{"_index":553,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["finduserappointments(user",{"_index":487,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["first",{"_index":62,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["first_name",{"_index":1920,"title":{},"body":{"entities/QueueDetails.html":{},"entities/User.html":{}}}],["firstname",{"_index":23,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Appointment.html":{},"injectables/AuthService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["fk_appointment_user",{"_index":446,"title":{},"body":{"entities/Appointment.html":{}}}],["fk_current_queue",{"_index":1146,"title":{},"body":{"entities/Counter.html":{}}}],["fk_queue_id",{"_index":1933,"title":{},"body":{"entities/QueueDetails.html":{}}}],["fk_user_id",{"_index":1938,"title":{},"body":{"entities/QueueDetails.html":{}}}],["flatten",{"_index":2340,"title":{},"body":{"controllers/QueuesController.html":{}}}],["fns",{"_index":638,"title":{},"body":{"injectables/AppointmentService.html":{},"dependencies.html":{}}}],["focus",{"_index":2761,"title":{},"body":{"index.html":{}}}],["follow",{"_index":2791,"title":{},"body":{"index.html":{}}}],["forbidden",{"_index":768,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["foreign",{"_index":351,"title":{},"body":{"modules/AppModule.html":{}}}],["foreign_key_checks=0",{"_index":355,"title":{},"body":{"modules/AppModule.html":{}}}],["foreign_key_checks=1",{"_index":366,"title":{},"body":{"modules/AppModule.html":{}}}],["foreignkeyconstraintname",{"_index":445,"title":{},"body":{"entities/Appointment.html":{},"entities/Counter.html":{},"entities/QueueDetails.html":{}}}],["form",{"_index":1207,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["form_data",{"_index":1295,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["format",{"_index":634,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["format(today",{"_index":724,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["formats",{"_index":2404,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["formdata",{"_index":1195,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{}}}],["forwardref",{"_index":1988,"title":{},"body":{"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["found",{"_index":262,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["found'})@apiresponse({status",{"_index":772,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["framework",{"_index":2716,"title":{},"body":{"index.html":{}}}],["frontend",{"_index":1844,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["full",{"_index":958,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"classes/RegisterDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["fullname",{"_index":1027,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["fully",{"_index":1092,"title":{},"body":{"injectables/AuthService.html":{}}}],["function",{"_index":2656,"title":{},"body":{"coverage.html":{}}}],["functionality",{"_index":1828,"title":{},"body":{"controllers/QueueController.html":{}}}],["functions",{"_index":2709,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":2757,"title":{},"body":{"index.html":{}}}],["general",{"_index":2083,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["generate",{"_index":694,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["generatealltimeslots",{"_index":608,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["generated",{"_index":1263,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}}}],["generating",{"_index":1697,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["get(':id",{"_index":167,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["get(':id')@apioperation({summary",{"_index":1360,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get(':id')@roles('admin",{"_index":2422,"title":{},"body":{"controllers/RolesController.html":{}}}],["get(':id')@useguards(rolesguard)@roles('admin",{"_index":2582,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':id/details",{"_index":1810,"title":{},"body":{"controllers/QueueController.html":{}}}],["get(':id/exists",{"_index":1777,"title":{},"body":{"controllers/QueueController.html":{}}}],["get(':id/files",{"_index":1442,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get(':id/files')@apioperation({summary",{"_index":1372,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get(':id/files/all",{"_index":1445,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get(':id/files/all')@apioperation({summary",{"_index":1363,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get(':id/position",{"_index":1813,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('admin/all",{"_index":1458,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get('admin/all')@roles('admin",{"_index":1368,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get('admin/pending",{"_index":1816,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('admin/stats",{"_index":1460,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get('admin/stats')@roles('admin",{"_index":1383,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get('available",{"_index":491,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["get('by",{"_index":483,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["get('completed",{"_index":1793,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('counters",{"_index":1804,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('date",{"_index":501,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["get('files/:fileid/download",{"_index":1448,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get('files/:fileid/download')@apioperation({summary",{"_index":1378,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get('health",{"_index":274,"title":{},"body":{"controllers/AppController.html":{}}}],["get('mine",{"_index":552,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["get('mine')@apioperation({summary",{"_index":488,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["get('minio_use_ssl",{"_index":1675,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["get('number/:queuenumber",{"_index":1788,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('pending",{"_index":1796,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('pending/details",{"_index":1798,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('profile",{"_index":847,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["get('profile')@apioperation({summary",{"_index":2584,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('recent",{"_index":170,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["get('serving",{"_index":1800,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('serving/details",{"_index":1802,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('stats",{"_index":556,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/QueueController.html":{},"controllers/UsersController.html":{}}}],["get('stats')@useguards(jwtauthguard",{"_index":505,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["get('stats')@useguards(rolesguard)@roles('admin",{"_index":2586,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('status/:status",{"_index":1791,"title":{},"body":{"controllers/QueueController.html":{}}}],["get('user/:userid",{"_index":2321,"title":{},"body":{"controllers/QueuesController.html":{},"controllers/RolesController.html":{}}}],["get('user/:userid')@roles('admin",{"_index":2425,"title":{},"body":{"controllers/RolesController.html":{}}}],["get('walk",{"_index":2323,"title":{},"body":{"controllers/QueuesController.html":{}}}],["get()@apioperation({summary",{"_index":1358,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get()@roles('admin",{"_index":2420,"title":{},"body":{"controllers/RolesController.html":{}}}],["get()@useguards(rolesguard)@roles('admin",{"_index":477,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/UsersController.html":{}}}],["getallapplicationfiles",{"_index":1348,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["getallapplicationfiles(id",{"_index":1362,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["getallapplications",{"_index":1349,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["getapplicationfiles",{"_index":1350,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["getapplicationfiles(id",{"_index":1371,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["getappointmentsbydate",{"_index":609,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["getappointmentsbydate(date",{"_index":624,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["getappointmentsbydaterange",{"_index":610,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["getappointmentsbydaterange(startdate",{"_index":626,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["getappointmentsstats",{"_index":611,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["getavailableslots",{"_index":462,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["getavailableslots(@query('date",{"_index":570,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["getavailableslots(date",{"_index":490,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["getbydate",{"_index":463,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["getbydate(@query('date",{"_index":559,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["getbydate(date",{"_index":494,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["getbydaterange",{"_index":464,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["getbydaterange(startdate",{"_index":499,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["getcounters",{"_index":1763,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["getdetailsformultiplequeues",{"_index":1764,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["getdetailsformultiplequeues(@body",{"_index":1872,"title":{},"body":{"controllers/QueueController.html":{}}}],["getdetailsformultiplequeues(body",{"_index":1806,"title":{},"body":{"controllers/QueueController.html":{}}}],["getdetailsformultiplequeues(queueids",{"_index":2125,"title":{},"body":{"injectables/QueueService.html":{}}}],["getdownloadurl",{"_index":1602,"title":{},"body":{"injectables/MinioService.html":{}}}],["getdownloadurl(objectname",{"_index":1608,"title":{},"body":{"injectables/MinioService.html":{}}}],["getfiledownloadurl",{"_index":1351,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["getfiledownloadurl(fileid",{"_index":1377,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["getfileinfo",{"_index":1651,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["getfileinfo(objectname",{"_index":1658,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["gethello",{"_index":271,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getpresignedurl",{"_index":1652,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["getpresignedurl(objectname",{"_index":1660,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["getprofile",{"_index":742,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["getprofile(@request",{"_index":848,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["getprofile(req",{"_index":781,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["getprofile(userid",{"_index":902,"title":{},"body":{"injectables/AuthService.html":{}}}],["getqueuebyid",{"_index":2315,"title":{},"body":{"controllers/QueuesController.html":{}}}],["getqueuebyid(@param('id",{"_index":2363,"title":{},"body":{"controllers/QueuesController.html":{}}}],["getqueuebyid(id",{"_index":2318,"title":{},"body":{"controllers/QueuesController.html":{}}}],["getqueuedetails",{"_index":1765,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["getqueuedetails(@param('id",{"_index":1888,"title":{},"body":{"controllers/QueueController.html":{}}}],["getqueuedetails(id",{"_index":1809,"title":{},"body":{"controllers/QueueController.html":{}}}],["getqueuedetails(queueid",{"_index":2127,"title":{},"body":{"injectables/QueueService.html":{}}}],["getqueueposition",{"_index":1766,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["getqueueposition(@param('id",{"_index":1890,"title":{},"body":{"controllers/QueueController.html":{}}}],["getqueueposition(id",{"_index":1812,"title":{},"body":{"controllers/QueueController.html":{}}}],["getqueueposition(queueid",{"_index":2129,"title":{},"body":{"injectables/QueueService.html":{}}}],["getrawmany",{"_index":1570,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["getrecentannouncements",{"_index":157,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{}}}],["getrecentannouncements(@query('limit",{"_index":201,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["getrecentannouncements(limit",{"_index":169,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{}}}],["getstats",{"_index":465,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getting",{"_index":704,"title":{"index.html":{}},"body":{"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/MinioService-1.html":{}}}],["gettodaypendingcount",{"_index":1767,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueSchedulerService.html":{}}}],["getuserqueues",{"_index":2316,"title":{},"body":{"controllers/QueuesController.html":{}}}],["getuserqueues(@param('userid",{"_index":2357,"title":{},"body":{"controllers/QueuesController.html":{}}}],["getuserqueues(userid",{"_index":2320,"title":{},"body":{"controllers/QueuesController.html":{}}}],["getuserroles",{"_index":2419,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["getuserroles(@param('userid",{"_index":2431,"title":{},"body":{"controllers/RolesController.html":{}}}],["getuserroles(userid",{"_index":2424,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["getwalkinqueues",{"_index":2317,"title":{},"body":{"controllers/QueuesController.html":{}}}],["global",{"_index":2019,"title":{},"body":{"classes/QueueGateway.html":{}}}],["graph",{"_index":2783,"title":{},"body":{"index.html":{}}}],["groupby('role.name",{"_index":1569,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["grow",{"_index":2801,"title":{},"body":{"index.html":{}}}],["guard",{"_index":2433,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":2434,"title":{},"body":{"guards/RolesGuard.html":{}}}],["guards/jwt",{"_index":816,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["guards/roles.guard",{"_index":819,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["guest",{"_index":2170,"title":{},"body":{"injectables/QueueService.html":{}}}],["handle",{"_index":1008,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["handleconnection",{"_index":1948,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handleconnection(client",{"_index":1961,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handledailyqueuereset",{"_index":2034,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["handledisconnect",{"_index":1949,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handledisconnect(client",{"_index":1966,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlegetqueueposition",{"_index":1950,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlegetqueueposition(client",{"_index":1968,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoincounter",{"_index":1951,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoincounter(client",{"_index":1971,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoinqueue",{"_index":1952,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoinqueue(client",{"_index":1974,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoinqueueupdates",{"_index":1953,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoinqueueupdates(client",{"_index":1977,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handling",{"_index":2169,"title":{},"body":{"injectables/QueueService.html":{}}}],["hands",{"_index":2777,"title":{},"body":{"index.html":{}}}],["handy",{"_index":2766,"title":{},"body":{"index.html":{}}}],["hash",{"_index":936,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["hashed",{"_index":1581,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["hashedpassword",{"_index":974,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["haslowercase",{"_index":1105,"title":{},"body":{"injectables/AuthService.html":{}}}],["hasnumbers",{"_index":1107,"title":{},"body":{"injectables/AuthService.html":{}}}],["hasroleassigned",{"_index":1086,"title":{},"body":{"injectables/AuthService.html":{}}}],["hasspecialchars",{"_index":1108,"title":{},"body":{"injectables/AuthService.html":{}}}],["hasuppercase",{"_index":1101,"title":{},"body":{"injectables/AuthService.html":{}}}],["healthcheck",{"_index":272,"title":{},"body":{"controllers/AppController.html":{}}}],["hello",{"_index":370,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":2781,"title":{},"body":{"index.html":{}}}],["here",{"_index":1064,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["history",{"_index":1304,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["history.application",{"_index":1305,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["history.entity",{"_index":1318,"title":{},"body":{"entities/DocumentApplication.html":{},"modules/DocumentApplicationsModule.html":{}}}],["history.entity.ts",{"_index":375,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"coverage.html":{}}}],["history.entity.ts:17",{"_index":400,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["history.entity.ts:20",{"_index":394,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["history.entity.ts:23",{"_index":404,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["history.entity.ts:26",{"_index":402,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["history.entity.ts:29",{"_index":406,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["history.entity.ts:32",{"_index":399,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["history.entity.ts:35",{"_index":397,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["history.entity.ts:43",{"_index":391,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["hit",{"_index":843,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["host",{"_index":315,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["hour",{"_index":737,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["http://localhost:5173",{"_index":1992,"title":{},"body":{"classes/QueueGateway.html":{}}}],["httpcode",{"_index":517,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["httpcode(httpstatus.no_content",{"_index":595,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["https://nestjs.com",{"_index":2814,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":518,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["id",{"_index":36,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":2641,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":42,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"classes/UpdateUserDto.html":{}}}],["ignoreexpiration",{"_index":1129,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["iii",{"_index":75,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["iii)'})@isoptional()@isstring",{"_index":1267,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ildefonso",{"_index":53,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["image",{"_index":118,"title":{},"body":{"entities/Announcement.html":{},"classes/CreateAnnouncementDto.html":{}}}],["implement",{"_index":1827,"title":{},"body":{"controllers/QueueController.html":{}}}],["implements",{"_index":1669,"title":{},"body":{"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["import",{"_index":87,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":229,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}}}],["in(queueids",{"_index":2233,"title":{},"body":{"injectables/QueueService.html":{}}}],["in(roleids",{"_index":2469,"title":{},"body":{"injectables/RolesService.html":{}}}],["inactive",{"_index":1156,"title":{},"body":{"entities/Counter.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"miscellaneous/enumerations.html":{}}}],["inactiveusers",{"_index":1506,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["include",{"_index":2311,"title":{},"body":{"injectables/QueueService.html":{}}}],["including",{"_index":753,"title":{},"body":{"controllers/AuthController.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{}}}],["index",{"_index":15,"title":{"index.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["index(['applicationid",{"_index":412,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentFile.html":{}}}],["index(['applicationtype",{"_index":1341,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["index(['changedat",{"_index":413,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["index(['createdat",{"_index":1343,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["index(['documentcategory",{"_index":1496,"title":{},"body":{"entities/DocumentFile.html":{}}}],["index(['status",{"_index":1342,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["index(['userid",{"_index":1340,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["information",{"_index":97,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"index.html":{}}}],["information'})@apiresponse({status",{"_index":806,"title":{},"body":{"controllers/AuthController.html":{}}}],["infrastructure",{"_index":2764,"title":{},"body":{"index.html":{}}}],["inherited",{"_index":55,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["initial",{"_index":1212,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["inject",{"_index":312,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["inject(forwardref",{"_index":1998,"title":{},"body":{"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["injectable",{"_index":231,"title":{"injectables/AnnouncementService.html":{},"injectables/AppService.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AnnouncementService.html":{},"injectables/AppService.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":232,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppService.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":248,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["injectrepository(announcement",{"_index":249,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["injectrepository(appointment",{"_index":639,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["injectrepository(counter",{"_index":2136,"title":{},"body":{"injectables/QueueService.html":{}}}],["injectrepository(queue",{"_index":2052,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["injectrepository(queuedetails",{"_index":2135,"title":{},"body":{"injectables/QueueService.html":{}}}],["injectrepository(role",{"_index":2459,"title":{},"body":{"injectables/RolesService.html":{}}}],["injectrepository(user",{"_index":918,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["input",{"_index":762,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["install",{"_index":2756,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":2726,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":836,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{}}}],["insufficient",{"_index":769,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["interact",{"_index":2784,"title":{},"body":{"index.html":{}}}],["interface",{"_index":823,"title":{"interfaces/AuthenticatedUser.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"interfaces/UserStats.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["interfaces",{"_index":1111,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"interfaces/UserStats.html":{},"overview.html":{}}}],["intervals",{"_index":699,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["invalid",{"_index":590,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/QueueController.html":{},"interfaces/RequestWithUser.html":{}}}],["inversejoincolumn",{"_index":2519,"title":{},"body":{"entities/User.html":{}}}],["is_active",{"_index":2508,"title":{},"body":{"entities/User.html":{}}}],["is_guest",{"_index":1923,"title":{},"body":{"entities/QueueDetails.html":{}}}],["isactive",{"_index":119,"title":{},"body":{"entities/Announcement.html":{},"injectables/AnnouncementService.html":{},"classes/CreateAnnouncementDto.html":{},"interfaces/FindAllOptions.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["isarray",{"_index":92,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["isauthorized",{"_index":1055,"title":{},"body":{"injectables/AuthService.html":{}}}],["isboolean",{"_index":1170,"title":{},"body":{"classes/CreateAnnouncementDto.html":{},"classes/CreateQueueDto.html":{},"classes/UpdateUserStatusDto.html":{}}}],["isboolean()@isoptional",{"_index":1236,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["isdatestring",{"_index":1188,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["isemail",{"_index":88,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["isenum",{"_index":1187,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{}}}],["isenum(applicationstatus",{"_index":2483,"title":{},"body":{"classes/UpdateDocumentApplicationDto.html":{}}}],["isenum(applicationtype",{"_index":1219,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["isenum(appointmentstatus",{"_index":1189,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["isenum(queuestatus",{"_index":2488,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["isenum(queuestatus)@isoptional",{"_index":2486,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["isglobal",{"_index":310,"title":{},"body":{"modules/AppModule.html":{}}}],["isguest",{"_index":420,"title":{},"body":{"entities/Appointment.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{}}}],["isnan(number(payload.sub",{"_index":1133,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["isnan(queueid",{"_index":2365,"title":{},"body":{"controllers/QueuesController.html":{}}}],["isnan(userid",{"_index":997,"title":{},"body":{"injectables/AuthService.html":{}}}],["isnan(useridnumber",{"_index":2305,"title":{},"body":{"injectables/QueueService.html":{}}}],["isnotempty",{"_index":1169,"title":{},"body":{"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["isnotempty()@isdatestring",{"_index":1175,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["isnotempty()@isstring",{"_index":1173,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["isnumber",{"_index":91,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{}}}],["isobject",{"_index":1215,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["isoptional",{"_index":89,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{}}}],["isoptional()@isboolean",{"_index":1166,"title":{},"body":{"classes/CreateAnnouncementDto.html":{}}}],["isoptional()@isenum(appointmentstatus",{"_index":1184,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["isoptional()@isstring",{"_index":1161,"title":{},"body":{"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{}}}],["ispasswordvalid",{"_index":939,"title":{},"body":{"injectables/AuthService.html":{}}}],["isprivileged",{"_index":1443,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["isstring",{"_index":90,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{}}}],["isstring()@isnotempty",{"_index":1163,"title":{},"body":{"classes/CreateAnnouncementDto.html":{},"classes/CreateQueueDto.html":{}}}],["isstring()@isoptional",{"_index":1232,"title":{},"body":{"classes/CreateQueueDto.html":{},"classes/UpdateQueueDto.html":{}}}],["isvalid",{"_index":637,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/AuthService.html":{}}}],["isvalid(date",{"_index":643,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["isvalid(parseddate",{"_index":686,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["isvalidemail",{"_index":890,"title":{},"body":{"injectables/AuthService.html":{}}}],["isvalidemail(email",{"_index":904,"title":{},"body":{"injectables/AuthService.html":{}}}],["it's",{"_index":2278,"title":{},"body":{"injectables/QueueService.html":{}}}],["items",{"_index":828,"title":{},"body":{"controllers/AuthController.html":{},"classes/PaginatedUsersResponseDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UserQueryDto.html":{}}}],["job",{"_index":2794,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":2796,"title":{},"body":{"index.html":{}}}],["john",{"_index":103,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{}}}],["john'})@isstring()@isnotempty",{"_index":2374,"title":{},"body":{"classes/RegisterDto.html":{}}}],["john'})@isstring()@isoptional",{"_index":64,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["john.doe@example.com",{"_index":1253,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["john_doe",{"_index":101,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["john_doe'})@isstring()@isnotempty",{"_index":2383,"title":{},"body":{"classes/RegisterDto.html":{}}}],["john_doe'})@isstring()@isoptional",{"_index":85,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["johndoe",{"_index":1275,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["join",{"_index":2807,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":408,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["joined",{"_index":2011,"title":{},"body":{"classes/QueueGateway.html":{}}}],["jointable",{"_index":2523,"title":{},"body":{"entities/User.html":{}}}],["jpeg",{"_index":1425,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["jr",{"_index":74,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["jr.'})@isstring()@isoptional",{"_index":76,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["json",{"_index":1296,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["juan",{"_index":1220,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["jwt",{"_index":880,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":820,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{}}}],["jwtauthguard",{"_index":522,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/QueueController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":1127,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":873,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":881,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":1117,"title":{"interfaces/JwtPayload.html":{}},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["jwtservice",{"_index":895,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":871,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":2811,"title":{},"body":{"index.html":{}}}],["keep",{"_index":2526,"title":{},"body":{"entities/User.html":{}}}],["keeps",{"_index":2154,"title":{},"body":{"injectables/QueueService.html":{}}}],["key",{"_index":352,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["last",{"_index":66,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["last_modified_by",{"_index":1300,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["last_name",{"_index":1925,"title":{},"body":{"entities/QueueDetails.html":{},"entities/User.html":{}}}],["lastmodifiedby",{"_index":1283,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["lastname",{"_index":24,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Appointment.html":{},"injectables/AuthService.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["lastname}${nameextension",{"_index":959,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["latest",{"_index":1373,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["learn",{"_index":2769,"title":{},"body":{"index.html":{}}}],["leftjoin('user.roles",{"_index":1566,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["leftjoinandselect('user.defaultrole",{"_index":1519,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["leftjoinandselect('user.roles",{"_index":1520,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["legacy",{"_index":2327,"title":{},"body":{"controllers/QueuesController.html":{}}}],["legend",{"_index":213,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":127,"title":{},"body":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{}}}],["lessthan",{"_index":2134,"title":{},"body":{"injectables/QueueService.html":{}}}],["lessthan(queue.createdat",{"_index":2221,"title":{},"body":{"injectables/QueueService.html":{}}}],["lessthanorequal",{"_index":2133,"title":{},"body":{"injectables/QueueService.html":{}}}],["lessthanorequal(new",{"_index":2289,"title":{},"body":{"injectables/QueueService.html":{}}}],["let's",{"_index":2307,"title":{},"body":{"injectables/QueueService.html":{}}}],["letter",{"_index":1104,"title":{},"body":{"injectables/AuthService.html":{}}}],["license",{"_index":1323,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"properties.html":{}}}],["licensed",{"_index":2799,"title":{},"body":{"index.html":{}}}],["limit",{"_index":173,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/UserQueryDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["limits",{"_index":1417,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["line",{"_index":925,"title":{},"body":{"injectables/AuthService.html":{}}}],["linkedin",{"_index":2793,"title":{},"body":{"index.html":{}}}],["listfiles",{"_index":1653,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["listfiles(prefix",{"_index":1663,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["literal",{"_index":912,"title":{},"body":{"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"interfaces/RequestWithUser-2.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{}}}],["localhost",{"_index":1619,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"miscellaneous/variables.html":{}}}],["log",{"_index":1434,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["logdailystatistics",{"_index":2035,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["logdailystatistics(startofday",{"_index":2045,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["logger",{"_index":332,"title":{},"body":{"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{}}}],["logger(appointmentcontroller.name",{"_index":541,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["logger(minioservice.name",{"_index":1612,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["logger(queuegateway.name",{"_index":1958,"title":{},"body":{"classes/QueueGateway.html":{}}}],["logger(queueschedulerservice.name",{"_index":2050,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["logging",{"_index":330,"title":{},"body":{"modules/AppModule.html":{},"injectables/QueueSchedulerService.html":{},"miscellaneous/variables.html":{}}}],["login",{"_index":743,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{}}}],["login'})@apiresponse({status",{"_index":791,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(@body",{"_index":832,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["login(logindto",{"_index":789,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logindto",{"_index":790,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["logindto.emailorusername",{"_index":920,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto.password",{"_index":938,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto})@post('login",{"_index":796,"title":{},"body":{"controllers/AuthController.html":{}}}],["looking",{"_index":2744,"title":{},"body":{"index.html":{}}}],["lookup",{"_index":2237,"title":{},"body":{"injectables/QueueService.html":{}}}],["loop",{"_index":2790,"title":{},"body":{"index.html":{}}}],["loss",{"_index":337,"title":{},"body":{"modules/AppModule.html":{}}}],["lowercase",{"_index":1106,"title":{},"body":{"injectables/AuthService.html":{}}}],["main",{"_index":50,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["maintain",{"_index":986,"title":{},"body":{"injectables/AuthService.html":{}}}],["makes",{"_index":2751,"title":{},"body":{"index.html":{}}}],["managing",{"_index":2763,"title":{},"body":{"index.html":{}}}],["manila",{"_index":1227,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["manual",{"_index":1854,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueSchedulerService.html":{}}}],["manual/guest",{"_index":1851,"title":{},"body":{"controllers/QueueController.html":{}}}],["manualdailyreset",{"_index":1768,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueSchedulerService.html":{}}}],["manualdailyreset(@user",{"_index":1900,"title":{},"body":{"controllers/QueueController.html":{}}}],["manualdailyreset(user",{"_index":1819,"title":{},"body":{"controllers/QueueController.html":{}}}],["many",{"_index":2218,"title":{},"body":{"injectables/QueueService.html":{}}}],["manytomany",{"_index":2415,"title":{},"body":{"entities/Role.html":{},"entities/User.html":{}}}],["manytomany(undefined",{"_index":2412,"title":{},"body":{"entities/Role.html":{}}}],["manytomany(undefined)@jointable({name",{"_index":2517,"title":{},"body":{"entities/User.html":{}}}],["manytoone",{"_index":407,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["manytoone(undefined",{"_index":384,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["mark",{"_index":2071,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["marriage",{"_index":1321,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["marriage_certificate",{"_index":1320,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["marriage_license",{"_index":1322,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["match",{"_index":1996,"title":{},"body":{"classes/QueueGateway.html":{}}}],["matching",{"_index":111,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(total",{"_index":1533,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["math.floor",{"_index":2296,"title":{},"body":{"injectables/QueueService.html":{}}}],["mau",{"_index":2747,"title":{},"body":{"index.html":{}}}],["message",{"_index":1098,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateDocumentApplicationDto.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"controllers/QueueController.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"classes/UpdateDocumentApplicationDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["metadata",{"_index":1692,"title":{},"body":{"injectables/MinioService-1.html":{},"dependencies.html":{}}}],["method",{"_index":1535,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["methods",{"_index":153,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["middle",{"_index":69,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["middle_initial",{"_index":1927,"title":{},"body":{"entities/QueueDetails.html":{}}}],["middle_name",{"_index":2511,"title":{},"body":{"entities/User.html":{}}}],["middleinitial",{"_index":421,"title":{},"body":{"entities/Appointment.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["middlename",{"_index":25,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["migrationsrun",{"_index":341,"title":{},"body":{"modules/AppModule.html":{}}}],["miguel",{"_index":1259,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["min",{"_index":78,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{}}}],["min(1",{"_index":2543,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["minimum",{"_index":1269,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserQueryDto.html":{}}}],["minio",{"_index":1616,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"dependencies.html":{}}}],["minio.client",{"_index":1614,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["minio_access_key",{"_index":1678,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["minio_bucket_name",{"_index":1680,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["minio_endpoint",{"_index":1671,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["minio_object_name",{"_index":1491,"title":{},"body":{"entities/DocumentFile.html":{}}}],["minio_secret_key",{"_index":1679,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["minioadmin",{"_index":1626,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["minioadmin123",{"_index":1628,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["minioclient",{"_index":1600,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["minioobjectname",{"_index":1474,"title":{},"body":{"entities/DocumentFile.html":{}}}],["minioservice",{"_index":1465,"title":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}},"body":{"modules/DocumentApplicationsModule.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"coverage.html":{},"overview.html":{}}}],["minlength",{"_index":82,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["minlength(6",{"_index":1278,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(8",{"_index":102,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["minute",{"_index":738,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["minutes",{"_index":2164,"title":{},"body":{"injectables/QueueService.html":{}}}],["miscellaneous",{"_index":2703,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":2798,"title":{},"body":{"index.html":{}}}],["mm",{"_index":726,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["mode",{"_index":2728,"title":{},"body":{"index.html":{}}}],["module",{"_index":209,"title":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"interfaces/FindAllOptions.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["modules",{"_index":211,"title":{"modules.html":{}},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/announcement/announcement.module",{"_index":305,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/appointment/appointment.module",{"_index":304,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/document",{"_index":306,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/queue/queue.module",{"_index":303,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":2268,"title":{},"body":{"injectables/QueueService.html":{},"index.html":{}}}],["multer",{"_index":2688,"title":{},"body":{"dependencies.html":{}}}],["multiple",{"_index":2241,"title":{},"body":{"injectables/QueueService.html":{}}}],["mysql",{"_index":314,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["mysql2",{"_index":2690,"title":{},"body":{"dependencies.html":{}}}],["myśliwiec",{"_index":2812,"title":{},"body":{"index.html":{}}}],["name",{"_index":63,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["name'})@isstring()@isnotempty",{"_index":1256,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["name_extension",{"_index":2514,"title":{},"body":{"entities/User.html":{}}}],["namecomponents",{"_index":1017,"title":{},"body":{"injectables/AuthService.html":{}}}],["namecomponents.firstname",{"_index":1028,"title":{},"body":{"injectables/AuthService.html":{}}}],["namecomponents.lastname",{"_index":1030,"title":{},"body":{"injectables/AuthService.html":{}}}],["namecomponents.middlename",{"_index":1029,"title":{},"body":{"injectables/AuthService.html":{}}}],["namecomponents.nameextension",{"_index":1031,"title":{},"body":{"injectables/AuthService.html":{}}}],["nameextension",{"_index":26,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["namespace",{"_index":1995,"title":{},"body":{"classes/QueueGateway.html":{}}}],["need",{"_index":1404,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"index.html":{}}}],["nest",{"_index":2721,"title":{},"body":{"index.html":{}}}],["nested",{"_index":2338,"title":{},"body":{"controllers/QueuesController.html":{}}}],["nestframework",{"_index":2816,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":1120,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"index.html":{}}}],["nestjs/common",{"_index":188,"title":{},"body":{"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":294,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":2394,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":874,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":2473,"title":{},"body":{"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["nestjs/passport",{"_index":876,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1406,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"dependencies.html":{}}}],["nestjs/schedule",{"_index":296,"title":{},"body":{"modules/AppModule.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":95,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentApplicationsController.html":{},"classes/LoginDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":226,"title":{},"body":{"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DocumentApplicationsModule.html":{},"interfaces/FindAllOptions.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":1986,"title":{},"body":{"classes/QueueGateway.html":{},"dependencies.html":{}}}],["new",{"_index":260,"title":{},"body":{"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["new_status",{"_index":401,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["newdate",{"_index":664,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["newfirstname",{"_index":1549,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["newlastname",{"_index":1551,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["newlastname}${newnameextension",{"_index":1554,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["newmiddlename",{"_index":1550,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["newnameextension",{"_index":1552,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["newstatus",{"_index":380,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["newtime",{"_index":666,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["next",{"_index":924,"title":{},"body":{"injectables/AuthService.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["nextcalled",{"_index":2284,"title":{},"body":{"injectables/QueueService.html":{}}}],["nextqueue",{"_index":2265,"title":{},"body":{"injectables/QueueService.html":{}}}],["nextqueue.counternumber",{"_index":2271,"title":{},"body":{"injectables/QueueService.html":{}}}],["nextqueue.id",{"_index":2274,"title":{},"body":{"injectables/QueueService.html":{}}}],["nextqueue.status",{"_index":2270,"title":{},"body":{"injectables/QueueService.html":{}}}],["node.js",{"_index":2715,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":247,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["notfoundexception(`announcement",{"_index":261,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["notfoundexception(`appointment",{"_index":659,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["notfoundexception(`counter",{"_index":2261,"title":{},"body":{"injectables/QueueService.html":{}}}],["notfoundexception(`details",{"_index":2199,"title":{},"body":{"injectables/QueueService.html":{}}}],["notfoundexception(`queue",{"_index":2196,"title":{},"body":{"injectables/QueueService.html":{}}}],["notfoundexception(`role",{"_index":2462,"title":{},"body":{"injectables/RolesService.html":{}}}],["notfoundexception(`user",{"_index":1534,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["notification",{"_index":2084,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["notify",{"_index":2077,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["notifycounterupdate",{"_index":1954,"title":{},"body":{"classes/QueueGateway.html":{}}}],["notifycounterupdate(counterid",{"_index":1980,"title":{},"body":{"classes/QueueGateway.html":{}}}],["notifyqueueupdate",{"_index":1955,"title":{},"body":{"classes/QueueGateway.html":{}}}],["notifyqueueupdate(queueid",{"_index":1982,"title":{},"body":{"classes/QueueGateway.html":{}}}],["npm",{"_index":2725,"title":{},"body":{"index.html":{}}}],["null",{"_index":850,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["null/undefined",{"_index":2344,"title":{},"body":{"controllers/QueuesController.html":{}}}],["nullable",{"_index":135,"title":{},"body":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["number",{"_index":31,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService-1.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["number'})@isoptional()@isstring",{"_index":1247,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["number(createqueuedto.userid",{"_index":2171,"title":{},"body":{"injectables/QueueService.html":{}}}],["number(payload.sub",{"_index":1134,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["number(req.user.id",{"_index":859,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["number(targetuserid",{"_index":866,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["number/:number",{"_index":484,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["obj",{"_index":1705,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["object",{"_index":827,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["object.assign(announcement",{"_index":264,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["object.assign(appointment",{"_index":670,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["object.values(appointmentstatus).includes(status",{"_index":589,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["object.values(appointmentstatus).join",{"_index":592,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["object.values(queuestatus",{"_index":1881,"title":{},"body":{"controllers/QueueController.html":{}}}],["object.values(queuestatus).includes(body.status",{"_index":1877,"title":{},"body":{"controllers/QueueController.html":{}}}],["objectname",{"_index":1607,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["occurred",{"_index":1097,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{}}}],["of(id",{"_index":1559,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["offer",{"_index":2795,"title":{},"body":{"index.html":{}}}],["official",{"_index":2748,"title":{},"body":{"index.html":{}}}],["ok",{"_index":280,"title":{},"body":{"controllers/AppController.html":{}}}],["old_status",{"_index":403,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["oldstatus",{"_index":381,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["omit",{"_index":1511,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["on'].includes(usesslvalue",{"_index":1677,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["ondelete",{"_index":387,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentFile.html":{},"entities/QueueDetails.html":{}}}],["one",{"_index":591,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AuthService.html":{},"injectables/QueueService.html":{}}}],["ones",{"_index":1556,"title":{},"body":{"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["onetomany",{"_index":1316,"title":{},"body":{"entities/DocumentApplication.html":{},"entities/Queue.html":{}}}],["onetomany(undefined",{"_index":1292,"title":{},"body":{"entities/DocumentApplication.html":{},"entities/Queue.html":{}}}],["onetoone",{"_index":1153,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{}}}],["onetoone(undefined",{"_index":1143,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{}}}],["ongatewayconnection",{"_index":1945,"title":{},"body":{"classes/QueueGateway.html":{}}}],["ongatewaydisconnect",{"_index":1946,"title":{},"body":{"classes/QueueGateway.html":{}}}],["only)'})@apiresponse({status",{"_index":1366,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["onmoduleinit",{"_index":1654,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["open",{"_index":2800,"title":{},"body":{"index.html":{}}}],["operator",{"_index":2464,"title":{},"body":{"injectables/RolesService.html":{}}}],["optional",{"_index":17,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser-2.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["optional)'})@isoptional()@isstring",{"_index":1260,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["options",{"_index":1514,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["order",{"_index":256,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["organize",{"_index":2235,"title":{},"body":{"injectables/QueueService.html":{}}}],["origin",{"_index":1990,"title":{},"body":{"classes/QueueGateway.html":{}}}],["original",{"_index":1639,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["out",{"_index":223,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["outer",{"_index":1070,"title":{},"body":{"injectables/AuthService.html":{}}}],["override",{"_index":1856,"title":{},"body":{"controllers/QueueController.html":{}}}],["overview",{"_index":2820,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":578,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["package",{"_index":2674,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":1499,"title":{},"body":{"interfaces/FindAllOptions.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/UserQueryDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["pages",{"_index":1717,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{}}}],["paginatedusersresponsedto",{"_index":1710,"title":{"classes/PaginatedUsersResponseDto.html":{}},"body":{"classes/PaginatedUsersResponseDto.html":{},"coverage.html":{}}}],["param",{"_index":184,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["param('fileid",{"_index":1449,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["param('id",{"_index":205,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"controllers/UsersController.html":{}}}],["param('userid",{"_index":864,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["parameter",{"_index":561,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["parameters",{"_index":163,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["parse",{"_index":683,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["parseddate",{"_index":684,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["parseduserid",{"_index":2175,"title":{},"body":{"injectables/QueueService.html":{}}}],["parseint(id",{"_index":2364,"title":{},"body":{"controllers/QueuesController.html":{}}}],["parseint(process.env.db_port",{"_index":2831,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseint(process.env.minio_port",{"_index":1620,"title":{},"body":{"injectables/MinioService.html":{}}}],["parseint(stat.count",{"_index":1573,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["parseint(userid",{"_index":2304,"title":{},"body":{"injectables/QueueService.html":{}}}],["parseintpipe",{"_index":186,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["parseiso",{"_index":636,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["parseiso(createappointmentdto.appointmentdate",{"_index":642,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["parseiso(date",{"_index":685,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["part",{"_index":2787,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":2472,"title":{},"body":{"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["partialtype(createannouncementdto",{"_index":2471,"title":{},"body":{"classes/UpdateAnnouncementDto.html":{}}}],["partialtype(createappointmentdto",{"_index":2476,"title":{},"body":{"classes/UpdateAppointmentDto.html":{}}}],["parts",{"_index":1014,"title":{},"body":{"injectables/AuthService.html":{}}}],["passport",{"_index":1116,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":875,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":878,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":1113,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1121,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["password",{"_index":27,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["password.length",{"_index":1099,"title":{},"body":{"injectables/AuthService.html":{}}}],["password123",{"_index":81,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["password123'})@isstring()@isnotempty",{"_index":1596,"title":{},"body":{"classes/LoginDto.html":{}}}],["passwords",{"_index":1528,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["passwordvalidation",{"_index":968,"title":{},"body":{"injectables/AuthService.html":{}}}],["passwordvalidation.isvalid",{"_index":970,"title":{},"body":{"injectables/AuthService.html":{}}}],["past",{"_index":653,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["patch",{"_index":183,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"controllers/UsersController.html":{}}}],["patch(':id",{"_index":180,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"controllers/UsersController.html":{}}}],["patch(':id')@apioperation({summary",{"_index":510,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{}}}],["patch(':id')@useguards(rolesguard)@roles('admin",{"_index":2590,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(':id/status",{"_index":587,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"controllers/UsersController.html":{}}}],["patch(':id/status')@roles('admin",{"_index":1392,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["patch(':id/status')@useguards(jwtauthguard",{"_index":513,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["patch(':id/status')@useguards(rolesguard)@roles('admin",{"_index":2593,"title":{},"body":{"controllers/UsersController.html":{}}}],["path",{"_index":2329,"title":{},"body":{"controllers/QueuesController.html":{}}}],["payload",{"_index":947,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["payload.roles.map((role",{"_index":1137,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":1132,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["pdf",{"_index":1427,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["pending",{"_index":450,"title":{},"body":{"entities/Appointment.html":{},"injectables/AppointmentService.html":{},"entities/DocumentApplication.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"miscellaneous/enumerations.html":{}}}],["pendingaheadcount",{"_index":2220,"title":{},"body":{"injectables/QueueService.html":{}}}],["pendingcount",{"_index":713,"title":{},"body":{"injectables/AppointmentService.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["pendingqueues",{"_index":2066,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["pendingqueues.length",{"_index":2069,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["pendingqueues.map(queue",{"_index":2074,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["pendingqueueswithdetails",{"_index":2333,"title":{},"body":{"controllers/QueuesController.html":{}}}],["pendingqueueswithdetails.length",{"_index":2335,"title":{},"body":{"controllers/QueuesController.html":{}}}],["per",{"_index":1374,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"classes/PaginatedUsersResponseDto.html":{},"injectables/QueueService.html":{},"classes/UserQueryDto.html":{}}}],["perform",{"_index":1061,"title":{},"body":{"injectables/AuthService.html":{}}}],["performance",{"_index":2230,"title":{},"body":{"injectables/QueueService.html":{}}}],["permission",{"_index":584,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["permissions",{"_index":862,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["permissions'})@apiresponse({status",{"_index":770,"title":{},"body":{"controllers/AuthController.html":{}}}],["permit",{"_index":1328,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["person",{"_index":2165,"title":{},"body":{"injectables/QueueService.html":{}}}],["phone_number",{"_index":1929,"title":{},"body":{"entities/QueueDetails.html":{}}}],["phonenumber",{"_index":422,"title":{},"body":{"entities/Appointment.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["pickup",{"_index":1335,"title":{},"body":{"entities/DocumentApplication.html":{},"classes/UpdateDocumentApplicationDto.html":{},"miscellaneous/enumerations.html":{}}}],["platform",{"_index":2746,"title":{},"body":{"index.html":{}}}],["please",{"_index":2772,"title":{},"body":{"index.html":{}}}],["pm",{"_index":697,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueSchedulerService.html":{}}}],["png",{"_index":1426,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["port",{"_index":317,"title":{},"body":{"modules/AppModule.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"miscellaneous/variables.html":{}}}],["position",{"_index":2007,"title":{},"body":{"classes/QueueGateway.html":{},"injectables/QueueService.html":{}}}],["possible",{"_index":2742,"title":{},"body":{"index.html":{}}}],["post",{"_index":161,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["post(':id/files",{"_index":1415,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["post(':id/files')@useinterceptors(undefined)@apiconsumes('multipart/form",{"_index":1397,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["post('admin",{"_index":2575,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('admin/daily",{"_index":1820,"title":{},"body":{"controllers/QueueController.html":{}}}],["post('admin/update",{"_index":863,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["post('bulk",{"_index":1807,"title":{},"body":{"controllers/QueueController.html":{}}}],["post('counter",{"_index":1770,"title":{},"body":{"controllers/QueueController.html":{}}}],["post('counter/:counterid/call",{"_index":1773,"title":{},"body":{"controllers/QueueController.html":{}}}],["post('login",{"_index":831,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["post('manual",{"_index":1849,"title":{},"body":{"controllers/QueueController.html":{}}}],["post('manual')@useguards(jwtauthguard",{"_index":1784,"title":{},"body":{"controllers/QueueController.html":{}}}],["post('register",{"_index":839,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["post('update",{"_index":857,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["post()@apioperation({summary",{"_index":470,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{}}}],["post()@useguards(jwtauthguard",{"_index":1781,"title":{},"body":{"controllers/QueueController.html":{}}}],["potential",{"_index":2343,"title":{},"body":{"controllers/QueuesController.html":{}}}],["prefix",{"_index":151,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/MinioService-1.html":{},"controllers/QueueController.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["presigned",{"_index":1698,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["prevent",{"_index":335,"title":{},"body":{"modules/AppModule.html":{}}}],["primarycolumn",{"_index":1315,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["primarycolumn({length",{"_index":1298,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["primarygeneratedcolumn",{"_index":132,"title":{},"body":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentFile.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["private",{"_index":250,"title":{},"body":{"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["privileged",{"_index":1364,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["process",{"_index":2059,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["process.env.db_host",{"_index":2830,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_name",{"_index":2836,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_password",{"_index":2835,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_username",{"_index":2833,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.minio_access_key",{"_index":1625,"title":{},"body":{"injectables/MinioService.html":{}}}],["process.env.minio_bucket_name",{"_index":1630,"title":{},"body":{"injectables/MinioService.html":{}}}],["process.env.minio_endpoint",{"_index":1618,"title":{},"body":{"injectables/MinioService.html":{}}}],["process.env.minio_secret_key",{"_index":1627,"title":{},"body":{"injectables/MinioService.html":{}}}],["process.env.minio_use_ssl",{"_index":1623,"title":{},"body":{"injectables/MinioService.html":{}}}],["process.env.node_env",{"_index":2838,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.ws_cors_origin",{"_index":1991,"title":{},"body":{"classes/QueueGateway.html":{}}}],["processing",{"_index":1329,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["production",{"_index":347,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["profile",{"_index":783,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["profile'})@apiresponse({status",{"_index":782,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["progressive",{"_index":2714,"title":{},"body":{"index.html":{}}}],["project",{"_index":2723,"title":{},"body":{"index.html":{}}}],["promise",{"_index":241,"title":{},"body":{"injectables/AnnouncementService.html":{},"modules/AppModule.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["promise((resolve",{"_index":1700,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["promise.all",{"_index":718,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["proper",{"_index":1049,"title":{},"body":{"injectables/AuthService.html":{}}}],["properties",{"_index":16,"title":{"properties.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AuthController.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"properties.html":{}}}],["provided",{"_index":1010,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["provided)'})@isoptional()@isstring",{"_index":1276,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["provided)'})@isstring()@isoptional",{"_index":1264,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["providedisguest",{"_index":2176,"title":{},"body":{"injectables/QueueService.html":{}}}],["provideduserid",{"_index":2174,"title":{},"body":{"injectables/QueueService.html":{}}}],["providers",{"_index":216,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["query",{"_index":187,"title":{},"body":{"controllers/AnnouncementController.html":{},"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/QueueService.html":{},"controllers/UsersController.html":{}}}],["query('end",{"_index":566,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["query('set",{"_index":365,"title":{},"body":{"modules/AppModule.html":{}}}],["query('start",{"_index":565,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["query('status",{"_index":1437,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["query.dto",{"_index":2600,"title":{},"body":{"controllers/UsersController.html":{}}}],["query.dto.ts",{"_index":2533,"title":{},"body":{"classes/UserQueryDto.html":{},"coverage.html":{}}}],["query.dto.ts:15",{"_index":2536,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["query.dto.ts:26",{"_index":2535,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["query.dto.ts:34",{"_index":2541,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["query.dto.ts:42",{"_index":2538,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["querybuilder",{"_index":1516,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["querybuilder.andwhere('roles.name",{"_index":1524,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["querybuilder.getmanyandcount",{"_index":1527,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["querybuilder.orderby('user.createdat",{"_index":1525,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["querybuilder.where",{"_index":1523,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["questions",{"_index":2770,"title":{},"body":{"index.html":{}}}],["queue",{"_index":1142,"title":{"entities/Queue.html":{}},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"coverage.html":{}}}],["queue.completedat",{"_index":2205,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["queue.completedat.gettime",{"_index":2294,"title":{},"body":{"injectables/QueueService.html":{}}}],["queue.controller",{"_index":2027,"title":{},"body":{"modules/QueueModule.html":{}}}],["queue.counter",{"_index":1144,"title":{},"body":{"entities/Counter.html":{}}}],["queue.counternumber",{"_index":2207,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["queue.createdat",{"_index":2348,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queue.createdat.gettime",{"_index":2295,"title":{},"body":{"injectables/QueueService.html":{}}}],["queue.details",{"_index":1931,"title":{},"body":{"entities/QueueDetails.html":{},"controllers/QueuesController.html":{}}}],["queue.details[0",{"_index":2346,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queue.dto",{"_index":1831,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["queue.dto.ts",{"_index":1230,"title":{},"body":{"classes/CreateQueueDto.html":{},"classes/UpdateQueueDto.html":{},"coverage.html":{}}}],["queue.dto.ts:11",{"_index":2485,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["queue.dto.ts:13",{"_index":1238,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:17",{"_index":1239,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:21",{"_index":1233,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:25",{"_index":1240,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:29",{"_index":1241,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:33",{"_index":1234,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:37",{"_index":1237,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:5",{"_index":1242,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:7",{"_index":2487,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["queue.dto.ts:9",{"_index":1235,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.entity",{"_index":1941,"title":{},"body":{"entities/QueueDetails.html":{}}}],["queue.estimatedwaittime",{"_index":2349,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queue.gateway",{"_index":2029,"title":{},"body":{"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["queue.id",{"_index":2247,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["queue.queuenumber",{"_index":2347,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queue.service",{"_index":1830,"title":{},"body":{"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"controllers/QueuesController.html":{}}}],["queue.status",{"_index":2204,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["queue/${id}/status",{"_index":1876,"title":{},"body":{"controllers/QueueController.html":{}}}],["queue/entities/queue.entity",{"_index":1154,"title":{},"body":{"entities/Counter.html":{}}}],["queue_id",{"_index":1932,"title":{},"body":{"entities/QueueDetails.html":{}}}],["queue_number",{"_index":1741,"title":{},"body":{"entities/Queue.html":{}}}],["queuecontroller",{"_index":1750,"title":{"controllers/QueueController.html":{}},"body":{"controllers/QueueController.html":{},"modules/QueueModule.html":{},"coverage.html":{}}}],["queuedata",{"_index":1853,"title":{},"body":{"controllers/QueueController.html":{},"classes/QueueGateway.html":{}}}],["queuedetails",{"_index":1735,"title":{"entities/QueueDetails.html":{}},"body":{"entities/Queue.html":{},"entities/QueueDetails.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"coverage.html":{}}}],["queuedetails.queue",{"_index":2188,"title":{},"body":{"injectables/QueueService.html":{}}}],["queuedetailsrepository",{"_index":2107,"title":{},"body":{"injectables/QueueService.html":{}}}],["queuegateway",{"_index":1943,"title":{"classes/QueueGateway.html":{}},"body":{"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"coverage.html":{},"overview.html":{}}}],["queueid",{"_index":1916,"title":{},"body":{"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["queueids",{"_index":1873,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["queueids.length",{"_index":2225,"title":{},"body":{"injectables/QueueService.html":{}}}],["queuemodule",{"_index":288,"title":{"modules/QueueModule.html":{}},"body":{"modules/AppModule.html":{},"modules/QueueModule.html":{},"modules.html":{},"overview.html":{}}}],["queuenumber",{"_index":1727,"title":{},"body":{"entities/Queue.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["queuerepository",{"_index":2038,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["queues",{"_index":1852,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["queues.controller",{"_index":2028,"title":{},"body":{"modules/QueueModule.html":{}}}],["queues.length",{"_index":2245,"title":{},"body":{"injectables/QueueService.html":{}}}],["queues.map((queue",{"_index":2246,"title":{},"body":{"injectables/QueueService.html":{}}}],["queues/user",{"_index":2358,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queues/walk",{"_index":2331,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queueschedulerservice",{"_index":1833,"title":{"injectables/QueueSchedulerService.html":{}},"body":{"controllers/QueueController.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"coverage.html":{},"overview.html":{}}}],["queuescontroller",{"_index":2026,"title":{"controllers/QueuesController.html":{}},"body":{"modules/QueueModule.html":{},"controllers/QueuesController.html":{},"coverage.html":{}}}],["queueservice",{"_index":1829,"title":{"injectables/QueueService.html":{}},"body":{"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"coverage.html":{},"overview.html":{}}}],["queuestatus",{"_index":1743,"title":{},"body":{"entities/Queue.html":{},"controllers/QueueController.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/UpdateQueueDto.html":{},"miscellaneous/enumerations.html":{}}}],["queuestatus.cancelled",{"_index":2075,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["queuestatus.completed",{"_index":2096,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["queuestatus.pending",{"_index":1749,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["queuestatus.serving",{"_index":2088,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["range",{"_index":564,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["range')@useguards(jwtauthguard",{"_index":502,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["rate",{"_index":2099,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["re",{"_index":1042,"title":{},"body":{"injectables/AuthService.html":{}}}],["read",{"_index":2808,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":196,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["ready",{"_index":1334,"title":{},"body":{"entities/DocumentApplication.html":{},"classes/UpdateDocumentApplicationDto.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["ready_for_pickup",{"_index":1333,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["real",{"_index":2785,"title":{},"body":{"index.html":{}}}],["reason",{"_index":2081,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["reason_of_visit",{"_index":1936,"title":{},"body":{"entities/QueueDetails.html":{}}}],["reasonofvisit",{"_index":423,"title":{},"body":{"entities/Appointment.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["received",{"_index":834,"title":{},"body":{"controllers/AuthController.html":{},"controllers/QueueController.html":{},"interfaces/RequestWithUser.html":{}}}],["recent",{"_index":1574,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["recently",{"_index":2565,"title":{},"body":{"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{}}}],["recentusers",{"_index":1510,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["recentusers.map((user",{"_index":1577,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["record",{"_index":1206,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{}}}],["referencedcolumnname",{"_index":2529,"title":{},"body":{"entities/User.html":{}}}],["reflect",{"_index":2694,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":2393,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["register",{"_index":744,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["register(@body",{"_index":840,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["register(registerdto",{"_index":798,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["registerdto",{"_index":799,"title":{"classes/RegisterDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["registerdto})@post('register",{"_index":803,"title":{},"body":{"controllers/AuthController.html":{}}}],["registration",{"_index":801,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{}}}],["registration'})@apiresponse({status",{"_index":800,"title":{},"body":{"controllers/AuthController.html":{}}}],["reject",{"_index":1701,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["rejected",{"_index":1331,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["relation",{"_index":2187,"title":{},"body":{"injectables/QueueService.html":{}}}],["relation(user",{"_index":1558,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["relations",{"_index":414,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"injectables/AuthService.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["remove",{"_index":158,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["remove(@param('id",{"_index":207,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{}}}],["remove(id",{"_index":175,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["remove(user.roles",{"_index":1560,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["replaces",{"_index":2465,"title":{},"body":{"injectables/RolesService.html":{}}}],["repository",{"_index":237,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["req",{"_index":780,"title":{},"body":{"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["req.user",{"_index":853,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["req.user.id",{"_index":854,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["request",{"_index":761,"title":{},"body":{"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["request.user",{"_index":2390,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"miscellaneous/variables.html":{}}}],["request.user?.roles",{"_index":2403,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["requestwithuser",{"_index":747,"title":{"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["required",{"_index":562,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AuthService.html":{},"classes/CreateDocumentApplicationDto.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["requiredroles",{"_index":2398,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["requiredroles.some((role",{"_index":2406,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["requires",{"_index":1337,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["requires_additional_info",{"_index":1336,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["requiring",{"_index":2754,"title":{},"body":{"index.html":{}}}],["reset",{"_index":222,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"controllers/QueueController.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["reset')@useguards(jwtauthguard",{"_index":1821,"title":{},"body":{"controllers/QueueController.html":{}}}],["resolve(files",{"_index":1709,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["resources",{"_index":2765,"title":{},"body":{"index.html":{}}}],["respect",{"_index":1843,"title":{},"body":{"controllers/QueueController.html":{}}}],["response",{"_index":954,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["response.dto",{"_index":1722,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{}}}],["response.dto.ts",{"_index":1712,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"coverage.html":{}}}],["response.dto.ts:14",{"_index":2550,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:15",{"_index":1716,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{},"classes/UsersByRoleDto.html":{}}}],["response.dto.ts:20",{"_index":2560,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:21",{"_index":1715,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{}}}],["response.dto.ts:23",{"_index":2567,"title":{},"body":{"classes/UserStatsResponseDto.html":{}}}],["response.dto.ts:26",{"_index":2551,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:27",{"_index":1713,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{}}}],["response.dto.ts:29",{"_index":2563,"title":{},"body":{"classes/UserStatsResponseDto.html":{}}}],["response.dto.ts:32",{"_index":2555,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:33",{"_index":1718,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{}}}],["response.dto.ts:35",{"_index":2564,"title":{},"body":{"classes/UserStatsResponseDto.html":{}}}],["response.dto.ts:38",{"_index":2554,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:41",{"_index":2569,"title":{},"body":{"classes/UserStatsResponseDto.html":{}}}],["response.dto.ts:44",{"_index":2556,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:47",{"_index":2566,"title":{},"body":{"classes/UserStatsResponseDto.html":{}}}],["response.dto.ts:50",{"_index":2557,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:56",{"_index":2544,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:62",{"_index":2553,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:68",{"_index":2547,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:74",{"_index":2559,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:8",{"_index":2552,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:81",{"_index":2558,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:87",{"_index":2548,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:9",{"_index":1721,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{},"classes/UsersByRoleDto.html":{}}}],["response.dto.ts:93",{"_index":2549,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["result",{"_index":676,"title":{},"body":{"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["result.affected",{"_index":678,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["result.details",{"_index":1861,"title":{},"body":{"controllers/QueueController.html":{}}}],["result.length",{"_index":2252,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["result.queue",{"_index":1860,"title":{},"body":{"controllers/QueueController.html":{}}}],["results",{"_index":110,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":1036,"title":{},"body":{"injectables/AuthService.html":{}}}],["retrieved",{"_index":784,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["retrieving",{"_index":1094,"title":{},"body":{"injectables/AuthService.html":{}}}],["return",{"_index":198,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":164,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["robert",{"_index":104,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["robert'})@isstring()@isoptional",{"_index":70,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["role",{"_index":35,"title":{"entities/Role.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["role'})@isoptional()@isstring",{"_index":2537,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["role.id",{"_index":1088,"title":{},"body":{"injectables/AuthService.html":{}}}],["role.name",{"_index":946,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["role_id",{"_index":2530,"title":{},"body":{"entities/User.html":{}}}],["roleid",{"_index":1075,"title":{},"body":{"injectables/AuthService.html":{}}}],["roleids",{"_index":19,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["roleids.length",{"_index":1561,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["rolename",{"_index":1508,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["rolenames",{"_index":944,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["rolenames.includes(role",{"_index":2407,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["roles",{"_index":527,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles('admin",{"_index":549,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["roles.controller",{"_index":2444,"title":{},"body":{"modules/RolesModule.html":{}}}],["roles.map((role",{"_index":945,"title":{},"body":{"injectables/AuthService.html":{}}}],["roles.service",{"_index":2427,"title":{},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{}}}],["roles/entities/role.entity",{"_index":2524,"title":{},"body":{"entities/User.html":{}}}],["roles/roles.module",{"_index":302,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["roles/roles.service",{"_index":917,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["roles_key",{"_index":2395,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolescontroller",{"_index":2417,"title":{"controllers/RolesController.html":{}},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{},"coverage.html":{}}}],["rolesguard",{"_index":525,"title":{"guards/RolesGuard.html":{}},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["rolesguard)@roles('admin",{"_index":496,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["rolesmodule",{"_index":289,"title":{"modules/RolesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["rolesrepository",{"_index":2451,"title":{},"body":{"injectables/RolesService.html":{}}}],["rolesservice",{"_index":896,"title":{"injectables/RolesService.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["rolestats",{"_index":1565,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["rolestats.map((stat",{"_index":1571,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["rollback",{"_index":985,"title":{},"body":{"injectables/AuthService.html":{}}}],["rolled",{"_index":990,"title":{},"body":{"injectables/AuthService.html":{}}}],["room",{"_index":2277,"title":{},"body":{"injectables/QueueService.html":{}}}],["rooms",{"_index":2016,"title":{},"body":{"classes/QueueGateway.html":{}}}],["root",{"_index":2834,"title":{},"body":{"miscellaneous/variables.html":{}}}],["run",{"_index":2053,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"index.html":{}}}],["runs",{"_index":2740,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":2696,"title":{},"body":{"dependencies.html":{}}}],["s@]+@[^\\s@]+\\.[^\\s",{"_index":994,"title":{},"body":{"injectables/AuthService.html":{}}}],["salt",{"_index":972,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["san",{"_index":52,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["sanitizedrecentusers",{"_index":1576,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["sanitizedusers",{"_index":1529,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["save",{"_index":2159,"title":{},"body":{"injectables/QueueService.html":{}}}],["saved",{"_index":2191,"title":{},"body":{"injectables/QueueService.html":{}}}],["saveddetails",{"_index":2189,"title":{},"body":{"injectables/QueueService.html":{}}}],["saveddetails.isguest",{"_index":2192,"title":{},"body":{"injectables/QueueService.html":{}}}],["savedqueue",{"_index":2166,"title":{},"body":{"injectables/QueueService.html":{}}}],["savedqueue.id",{"_index":2179,"title":{},"body":{"injectables/QueueService.html":{}}}],["scalable",{"_index":2719,"title":{},"body":{"index.html":{}}}],["schedulemodule",{"_index":295,"title":{},"body":{"modules/AppModule.html":{},"modules/QueueModule.html":{}}}],["schedulemodule.forroot",{"_index":367,"title":{},"body":{"modules/AppModule.html":{},"modules/QueueModule.html":{}}}],["scheduler.service",{"_index":1834,"title":{},"body":{"controllers/QueueController.html":{},"modules/QueueModule.html":{}}}],["scheduler.service.ts",{"_index":2033,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"coverage.html":{}}}],["scheduler.service.ts:10",{"_index":2037,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["scheduler.service.ts:105",{"_index":2047,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["scheduler.service.ts:138",{"_index":2049,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["scheduler.service.ts:144",{"_index":2039,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["scheduler.service.ts:23",{"_index":2044,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["schema",{"_index":793,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["search",{"_index":1500,"title":{},"body":{"interfaces/FindAllOptions.html":{},"classes/UserQueryDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["secret",{"_index":883,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretkey",{"_index":1122,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["secretorkey",{"_index":1130,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["seeddatabaseifneeded",{"_index":2657,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["seeddatabaseifneeded(datasource",{"_index":2711,"title":{},"body":{"miscellaneous/functions.html":{}}}],["select",{"_index":690,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueService.html":{}}}],["select('role.name",{"_index":1567,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["send",{"_index":2014,"title":{},"body":{"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{}}}],["sequence",{"_index":2138,"title":{},"body":{"injectables/QueueService.html":{}}}],["served",{"_index":2214,"title":{},"body":{"injectables/QueueService.html":{}}}],["server",{"_index":1947,"title":{},"body":{"classes/QueueGateway.html":{},"index.html":{}}}],["service",{"_index":2172,"title":{},"body":{"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["services/minio.service",{"_index":1469,"title":{},"body":{"modules/DocumentApplicationsModule.html":{}}}],["serving",{"_index":1747,"title":{},"body":{"entities/Queue.html":{},"controllers/QueueController.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"miscellaneous/enumerations.html":{}}}],["servingcount",{"_index":2216,"title":{},"body":{"injectables/QueueService.html":{}}}],["servingqueues",{"_index":2087,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["servingqueues.length",{"_index":2089,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["servingqueues.map(queue",{"_index":2091,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["servingqueueswithdetails",{"_index":2334,"title":{},"body":{"controllers/QueuesController.html":{}}}],["servingqueueswithdetails.length",{"_index":2336,"title":{},"body":{"controllers/QueuesController.html":{}}}],["set",{"_index":356,"title":{},"body":{"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"injectables/AuthService.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{}}}],["setmetadata(roles_key",{"_index":2839,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":2724,"title":{},"body":{"index.html":{}}}],["shouldupdatename",{"_index":1016,"title":{},"body":{"injectables/AuthService.html":{}}}],["side",{"_index":2720,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":885,"title":{},"body":{"modules/AuthModule.html":{}}}],["simple",{"_index":2162,"title":{},"body":{"injectables/QueueService.html":{},"index.html":{}}}],["simplify",{"_index":2168,"title":{},"body":{"injectables/QueueService.html":{}}}],["single",{"_index":2228,"title":{},"body":{"injectables/QueueService.html":{}}}],["size",{"_index":1694,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["skip",{"_index":1515,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["slot",{"_index":731,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["slots",{"_index":492,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["smart",{"_index":1632,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["socket",{"_index":1962,"title":{},"body":{"classes/QueueGateway.html":{}}}],["socket.io",{"_index":1987,"title":{},"body":{"classes/QueueGateway.html":{},"dependencies.html":{}}}],["soft",{"_index":267,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["special",{"_index":1109,"title":{},"body":{"injectables/AuthService.html":{},"injectables/QueueService.html":{}}}],["specific",{"_index":1043,"title":{},"body":{"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{}}}],["specified",{"_index":687,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["sponsors",{"_index":2803,"title":{},"body":{"index.html":{}}}],["sql",{"_index":349,"title":{},"body":{"modules/AppModule.html":{}}}],["sr",{"_index":1266,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/.../appointment.entity.ts",{"_index":2706,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../counter.entity.ts",{"_index":2707,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../database.config.ts",{"_index":2826,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../document",{"_index":2705,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":2710,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../queue.entity.ts",{"_index":2708,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../roles.decorator.ts",{"_index":2827,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.decorator.ts",{"_index":2828,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":270,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:14",{"_index":275,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:9",{"_index":273,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":291,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":368,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":369,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":740,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:102",{"_index":804,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:112",{"_index":788,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:134",{"_index":810,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:183",{"_index":779,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:63",{"_index":797,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":872,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":889,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:104",{"_index":907,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:18",{"_index":897,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:206",{"_index":905,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:211",{"_index":903,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:239",{"_index":909,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:26",{"_index":914,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:383",{"_index":900,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:41",{"_index":906,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:538",{"_index":911,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorators/roles.decorator.ts",{"_index":2647,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/user.decorator.ts",{"_index":2385,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dto/login.dto.ts",{"_index":1591,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto.ts:15",{"_index":1594,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/login.dto.ts:23",{"_index":1597,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/register.dto.ts",{"_index":2369,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["src/auth/dto/register.dto.ts:22",{"_index":2373,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:30",{"_index":2384,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:40",{"_index":2382,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:48",{"_index":2375,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:56",{"_index":2378,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:64",{"_index":2377,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:72",{"_index":2379,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:80",{"_index":2380,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:87",{"_index":2371,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/update",{"_index":6,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/auth/guards/jwt",{"_index":1584,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard.ts",{"_index":2391,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard.ts:13",{"_index":2436,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/guards/roles.guard.ts:16",{"_index":2437,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":1112,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:20",{"_index":1589,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:35",{"_index":1590,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/config/database.config.ts",{"_index":2654,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":2655,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/announcement/announcement.controller.ts",{"_index":150,"title":{},"body":{"controllers/AnnouncementController.html":{},"coverage.html":{}}}],["src/modules/announcement/announcement.controller.ts:21",{"_index":162,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["src/modules/announcement/announcement.controller.ts:26",{"_index":165,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["src/modules/announcement/announcement.controller.ts:31",{"_index":171,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["src/modules/announcement/announcement.controller.ts:36",{"_index":168,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["src/modules/announcement/announcement.controller.ts:41",{"_index":181,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["src/modules/announcement/announcement.controller.ts:49",{"_index":177,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["src/modules/announcement/announcement.module.ts",{"_index":224,"title":{},"body":{"modules/AnnouncementModule.html":{}}}],["src/modules/announcement/announcement.service.ts",{"_index":233,"title":{},"body":{"injectables/AnnouncementService.html":{},"coverage.html":{}}}],["src/modules/announcement/announcement.service.ts:15",{"_index":240,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["src/modules/announcement/announcement.service.ts:24",{"_index":242,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["src/modules/announcement/announcement.service.ts:31",{"_index":243,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["src/modules/announcement/announcement.service.ts:43",{"_index":246,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["src/modules/announcement/announcement.service.ts:53",{"_index":245,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["src/modules/announcement/announcement.service.ts:59",{"_index":244,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["src/modules/announcement/announcement.service.ts:9",{"_index":238,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["src/modules/announcement/dto/create",{"_index":1159,"title":{},"body":{"classes/CreateAnnouncementDto.html":{},"coverage.html":{}}}],["src/modules/announcement/dto/update",{"_index":2470,"title":{},"body":{"classes/UpdateAnnouncementDto.html":{},"coverage.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts",{"_index":115,"title":{},"body":{"entities/Announcement.html":{},"coverage.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts:12",{"_index":133,"title":{},"body":{"entities/Announcement.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts:15",{"_index":141,"title":{},"body":{"entities/Announcement.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts:18",{"_index":131,"title":{},"body":{"entities/Announcement.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts:21",{"_index":137,"title":{},"body":{"entities/Announcement.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts:24",{"_index":139,"title":{},"body":{"entities/Announcement.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts:27",{"_index":129,"title":{},"body":{"entities/Announcement.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts:30",{"_index":124,"title":{},"body":{"entities/Announcement.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts:33",{"_index":143,"title":{},"body":{"entities/Announcement.html":{}}}],["src/modules/appointment/appointment.controller.ts",{"_index":458,"title":{},"body":{"controllers/AppointmentController.html":{},"coverage.html":{}}}],["src/modules/appointment/appointment.controller.ts:110",{"_index":493,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:119",{"_index":486,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:125",{"_index":485,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:132",{"_index":511,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:157",{"_index":514,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:176",{"_index":508,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:44",{"_index":475,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:59",{"_index":481,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:66",{"_index":489,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:74",{"_index":506,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:82",{"_index":498,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:93",{"_index":503,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.module.ts",{"_index":602,"title":{},"body":{"modules/AppointmentModule.html":{}}}],["src/modules/appointment/appointment.service.ts",{"_index":605,"title":{},"body":{"injectables/AppointmentService.html":{},"coverage.html":{}}}],["src/modules/appointment/appointment.service.ts:100",{"_index":621,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:114",{"_index":631,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:14",{"_index":613,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:149",{"_index":630,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:162",{"_index":632,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:177",{"_index":629,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:20",{"_index":617,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:209",{"_index":625,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:230",{"_index":627,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:253",{"_index":628,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:305",{"_index":616,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:330",{"_index":623,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:69",{"_index":618,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:78",{"_index":620,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:88",{"_index":622,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/dto/create",{"_index":1171,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"coverage.html":{}}}],["src/modules/appointment/dto/update",{"_index":2475,"title":{},"body":{"classes/UpdateAppointmentDto.html":{},"coverage.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts",{"_index":416,"title":{},"body":{"entities/Appointment.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:22",{"_index":432,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:25",{"_index":428,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:28",{"_index":431,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:31",{"_index":435,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:34",{"_index":437,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:37",{"_index":425,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:40",{"_index":438,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:43",{"_index":439,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:46",{"_index":426,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:49",{"_index":429,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:56",{"_index":442,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:59",{"_index":448,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:66",{"_index":447,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:69",{"_index":434,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:72",{"_index":430,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:75",{"_index":443,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/counter/entities/counter.entity.ts",{"_index":1139,"title":{},"body":{"entities/Counter.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/modules/counter/entities/counter.entity.ts:18",{"_index":1149,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/counter/entities/counter.entity.ts:21",{"_index":1150,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/counter/entities/counter.entity.ts:28",{"_index":1152,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/counter/entities/counter.entity.ts:31",{"_index":1148,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/counter/entities/counter.entity.ts:38",{"_index":1147,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/document",{"_index":373,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"injectables/MinioService-1.html":{},"classes/UpdateDocumentApplicationDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/modules/queue/dto/create",{"_index":1229,"title":{},"body":{"classes/CreateQueueDto.html":{},"coverage.html":{}}}],["src/modules/queue/dto/update",{"_index":2484,"title":{},"body":{"classes/UpdateQueueDto.html":{},"coverage.html":{}}}],["src/modules/queue/entities/queue",{"_index":1914,"title":{},"body":{"entities/QueueDetails.html":{},"coverage.html":{}}}],["src/modules/queue/entities/queue.entity.ts",{"_index":1723,"title":{},"body":{"entities/Queue.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/modules/queue/entities/queue.entity.ts:22",{"_index":1740,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:25",{"_index":1742,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:32",{"_index":1744,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:35",{"_index":1733,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:38",{"_index":1734,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:41",{"_index":1729,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:44",{"_index":1739,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:47",{"_index":1737,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:52",{"_index":1731,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/queue",{"_index":2032,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"coverage.html":{}}}],["src/modules/queue/queue.controller.ts",{"_index":1751,"title":{},"body":{"controllers/QueueController.html":{},"coverage.html":{}}}],["src/modules/queue/queue.controller.ts:104",{"_index":1797,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:109",{"_index":1801,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:114",{"_index":1794,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:120",{"_index":1799,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:126",{"_index":1803,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:132",{"_index":1808,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:137",{"_index":1825,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:166",{"_index":1815,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:171",{"_index":1795,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:176",{"_index":1789,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:181",{"_index":1811,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:186",{"_index":1814,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:191",{"_index":1824,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:196",{"_index":1774,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:201",{"_index":1771,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:206",{"_index":1805,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:211",{"_index":1778,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:223",{"_index":1822,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:241",{"_index":1818,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:30",{"_index":1782,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:61",{"_index":1785,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:94",{"_index":1786,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.controller.ts:99",{"_index":1792,"title":{},"body":{"controllers/QueueController.html":{}}}],["src/modules/queue/queue.gateway.ts",{"_index":1944,"title":{},"body":{"classes/QueueGateway.html":{},"coverage.html":{}}}],["src/modules/queue/queue.gateway.ts:23",{"_index":1959,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:26",{"_index":1957,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:34",{"_index":1963,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:39",{"_index":1967,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:44",{"_index":1976,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:51",{"_index":1970,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:57",{"_index":1973,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:63",{"_index":1979,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:70",{"_index":1983,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:75",{"_index":1981,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.module.ts",{"_index":2025,"title":{},"body":{"modules/QueueModule.html":{}}}],["src/modules/queue/queue.service.ts",{"_index":2103,"title":{},"body":{"injectables/QueueService.html":{},"coverage.html":{}}}],["src/modules/queue/queue.service.ts:123",{"_index":2116,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:129",{"_index":2118,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:136",{"_index":2123,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:148",{"_index":2117,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:160",{"_index":2128,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:176",{"_index":2132,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:21",{"_index":2109,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:218",{"_index":2130,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:269",{"_index":2126,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:304",{"_index":2120,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:33",{"_index":2115,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:358",{"_index":2112,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:428",{"_index":2131,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:475",{"_index":2111,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:481",{"_index":2124,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:488",{"_index":2114,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queue.service.ts:495",{"_index":2122,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/modules/queue/queues.controller.ts",{"_index":2314,"title":{},"body":{"controllers/QueuesController.html":{},"coverage.html":{}}}],["src/modules/queue/queues.controller.ts:109",{"_index":2319,"title":{},"body":{"controllers/QueuesController.html":{}}}],["src/modules/queue/queues.controller.ts:19",{"_index":2324,"title":{},"body":{"controllers/QueuesController.html":{}}}],["src/modules/queue/queues.controller.ts:74",{"_index":2322,"title":{},"body":{"controllers/QueuesController.html":{}}}],["src/roles/entities/role.entity.ts",{"_index":2408,"title":{},"body":{"entities/Role.html":{},"coverage.html":{}}}],["src/roles/entities/role.entity.ts:10",{"_index":2411,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/entities/role.entity.ts:13",{"_index":2409,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/entities/role.entity.ts:16",{"_index":2414,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/entities/role.entity.ts:7",{"_index":2410,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/roles.controller.ts",{"_index":2418,"title":{},"body":{"controllers/RolesController.html":{},"coverage.html":{}}}],["src/roles/roles.controller.ts:14",{"_index":2421,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.controller.ts:20",{"_index":2423,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.controller.ts:26",{"_index":2426,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.module.ts",{"_index":2442,"title":{},"body":{"modules/RolesModule.html":{}}}],["src/roles/roles.service.ts",{"_index":2446,"title":{},"body":{"injectables/RolesService.html":{},"coverage.html":{}}}],["src/roles/roles.service.ts:17",{"_index":2454,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:21",{"_index":2457,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:29",{"_index":2456,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:37",{"_index":2458,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:45",{"_index":2453,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:8",{"_index":2450,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/services/minio.service.ts",{"_index":1598,"title":{},"body":{"injectables/MinioService.html":{},"coverage.html":{}}}],["src/services/minio.service.ts:22",{"_index":1611,"title":{},"body":{"injectables/MinioService.html":{}}}],["src/services/minio.service.ts:46",{"_index":1609,"title":{},"body":{"injectables/MinioService.html":{}}}],["src/services/minio.service.ts:59",{"_index":1606,"title":{},"body":{"injectables/MinioService.html":{}}}],["src/services/minio.service.ts:6",{"_index":1613,"title":{},"body":{"injectables/MinioService.html":{}}}],["src/services/minio.service.ts:7",{"_index":1615,"title":{},"body":{"injectables/MinioService.html":{}}}],["src/services/minio.service.ts:8",{"_index":1604,"title":{},"body":{"injectables/MinioService.html":{}}}],["src/users/dto/create",{"_index":1244,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/paginated",{"_index":1711,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":2494,"title":{},"body":{"classes/UpdateUserStatusDto.html":{},"coverage.html":{}}}],["src/users/dto/user",{"_index":2532,"title":{},"body":{"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts",{"_index":2498,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:17",{"_index":2507,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:20",{"_index":2505,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:23",{"_index":2522,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:26",{"_index":2516,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:29",{"_index":2506,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:32",{"_index":2512,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:35",{"_index":2510,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:38",{"_index":2513,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:41",{"_index":2515,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:44",{"_index":2500,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:47",{"_index":2509,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:50",{"_index":2501,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:53",{"_index":2521,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:57",{"_index":2503,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:60",{"_index":2504,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:74",{"_index":2520,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":2572,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:106",{"_index":2591,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:121",{"_index":2589,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:135",{"_index":2594,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:153",{"_index":2579,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:46",{"_index":2581,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:58",{"_index":2585,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:70",{"_index":2587,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:80",{"_index":2583,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":2624,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":1498,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:108",{"_index":2630,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:210",{"_index":2637,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:220",{"_index":2638,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:230",{"_index":2636,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:273",{"_index":2633,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:280",{"_index":2634,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:287",{"_index":2631,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:35",{"_index":2628,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:42",{"_index":2632,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:87",{"_index":2635,"title":{},"body":{"injectables/UsersService.html":{}}}],["st",{"_index":51,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["staff",{"_index":478,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"classes/UserResponseDto.html":{},"controllers/UsersController.html":{}}}],["staff'].includes(role.name",{"_index":1439,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["start",{"_index":567,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/QueueService.html":{},"index.html":{}}}],["start:dev",{"_index":2729,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":2730,"title":{},"body":{"index.html":{}}}],["startdate",{"_index":504,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["started",{"_index":2713,"title":{"index.html":{}},"body":{}}],["starter",{"_index":2722,"title":{},"body":{"index.html":{}}}],["starting",{"_index":2058,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["startofday",{"_index":2048,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["startofday.sethours(0",{"_index":2062,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["startofday.todatestring",{"_index":2097,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["stat.rolename",{"_index":1572,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["state",{"_index":988,"title":{},"body":{"injectables/AuthService.html":{}}}],["statement",{"_index":845,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["statements",{"_index":2642,"title":{},"body":{"coverage.html":{}}}],["statistics",{"_index":557,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/QueueSchedulerService.html":{},"controllers/UsersController.html":{}}}],["stats",{"_index":730,"title":{},"body":{"injectables/AppointmentService.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"coverage.html":{}}}],["status",{"_index":276,"title":{},"body":{"controllers/AppController.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"entities/Counter.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserResponseDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["status'})@isboolean",{"_index":2496,"title":{},"body":{"classes/UpdateUserStatusDto.html":{}}}],["status.dto",{"_index":2598,"title":{},"body":{"controllers/UsersController.html":{}}}],["status.dto.ts",{"_index":2495,"title":{},"body":{"classes/UpdateUserStatusDto.html":{},"coverage.html":{}}}],["status.dto.ts:10",{"_index":2497,"title":{},"body":{"classes/UpdateUserStatusDto.html":{}}}],["status_message",{"_index":405,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentApplication.html":{}}}],["statusdto",{"_index":1391,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["statusdto.status",{"_index":1453,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["statusdto.statusmessage",{"_index":1454,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["statuses",{"_index":712,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["statushistory",{"_index":1284,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["statusmessage",{"_index":382,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["stay",{"_index":2789,"title":{},"body":{"index.html":{}}}],["steps",{"_index":2738,"title":{},"body":{"index.html":{}}}],["straightforward",{"_index":2752,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":1115,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["stream",{"_index":1702,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["stream.on('data",{"_index":1704,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["stream.on('end",{"_index":1708,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["stream.on('error",{"_index":1707,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["strength",{"_index":967,"title":{},"body":{"injectables/AuthService.html":{}}}],["string",{"_index":47,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["string(error",{"_index":2257,"title":{},"body":{"injectables/QueueService.html":{}}}],["string(payload.email",{"_index":1135,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["string(todaycount",{"_index":2156,"title":{},"body":{"injectables/QueueService.html":{}}}],["structure",{"_index":2339,"title":{},"body":{"controllers/QueuesController.html":{}}}],["sub",{"_index":948,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["submission",{"_index":1213,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["subscribemessage",{"_index":1985,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subscribemessage('getqueueposition",{"_index":1969,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subscribemessage('join_queue_updates",{"_index":1978,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subscribemessage('joincounter",{"_index":1972,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subscribemessage('joinqueue",{"_index":1975,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subtype",{"_index":1197,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["success",{"_index":953,"title":{},"body":{"injectables/AuthService.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{}}}],["successful",{"_index":792,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["successfully",{"_index":474,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/MinioService-1.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["successfully'})@apiresponse({status",{"_index":785,"title":{},"body":{"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["summary",{"_index":542,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["super",{"_index":1126,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["super_admin",{"_index":497,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["super_admin')@apioperation({summary",{"_index":479,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/UsersController.html":{}}}],["super_admin')@post('admin/update",{"_index":777,"title":{},"body":{"controllers/AuthController.html":{}}}],["super_admin')@useguards(rolesguard)@apioperation({summary",{"_index":1369,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["super_admin'].includes(role.name",{"_index":582,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":2771,"title":{},"body":{"index.html":{},"modules.html":{}}}],["supporting",{"_index":2326,"title":{},"body":{"controllers/QueuesController.html":{}}}],["svg",{"_index":2818,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":2699,"title":{},"body":{"dependencies.html":{}}}],["synchronize",{"_index":325,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["table",{"_index":2673,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2672,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":268,"title":{},"body":{"injectables/AnnouncementService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["taken",{"_index":964,"title":{},"body":{"injectables/AuthService.html":{}}}],["target",{"_index":1058,"title":{},"body":{"injectables/AuthService.html":{}}}],["targetuser",{"_index":1059,"title":{},"body":{"injectables/AuthService.html":{}}}],["targetuserid",{"_index":748,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/RequestWithUser.html":{}}}],["temporarily",{"_index":2312,"title":{},"body":{"injectables/QueueService.html":{}}}],["term",{"_index":2539,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["test",{"_index":1595,"title":{},"body":{"classes/LoginDto.html":{},"index.html":{}}}],["test(password",{"_index":1100,"title":{},"body":{"injectables/AuthService.html":{}}}],["test:covdeployment",{"_index":2735,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":2734,"title":{},"body":{"index.html":{}}}],["test@example.com",{"_index":100,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["test@example.com'})@isemail()@isnotempty",{"_index":2372,"title":{},"body":{"classes/RegisterDto.html":{}}}],["test@example.com'})@isemail()@isoptional",{"_index":60,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["test@example.com'})@isnotempty",{"_index":1593,"title":{},"body":{"classes/LoginDto.html":{}}}],["testing",{"_index":2101,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["testminioconnection",{"_index":2658,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["tests",{"_index":2731,"title":{},"body":{"index.html":{}}}],["text",{"_index":130,"title":{},"body":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/DocumentApplication.html":{}}}],["thanks",{"_index":2802,"title":{},"body":{"index.html":{}}}],["this.announcementrepository.create",{"_index":252,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["this.announcementrepository.find",{"_index":255,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["this.announcementrepository.findone",{"_index":258,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["this.announcementrepository.save(announcement",{"_index":254,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["this.announcementservice.create(createannouncementdto",{"_index":199,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["this.announcementservice.findall",{"_index":200,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["this.announcementservice.findone(id",{"_index":204,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["this.announcementservice.getrecentannouncements(limit",{"_index":202,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["this.announcementservice.remove(id",{"_index":208,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["this.announcementservice.update(id",{"_index":206,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["this.appointmentrepository.count",{"_index":719,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.appointmentrepository.delete(id",{"_index":677,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.appointmentrepository.find",{"_index":656,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.appointmentrepository.findone",{"_index":658,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.appointmentrepository.save(appointment",{"_index":682,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.appointmentrepository.save(updated",{"_index":672,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.appointmentservice.create(createappointmentdto",{"_index":547,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.findall",{"_index":551,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.findallbyuser(user.id",{"_index":555,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.findbyappointmentnumber(appointmentnumber",{"_index":575,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.findone(+id",{"_index":573,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.getappointmentsbydate(date",{"_index":563,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.getappointmentsbydaterange",{"_index":569,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.getappointmentsstats",{"_index":558,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.getavailableslots(date",{"_index":572,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.remove(+id",{"_index":598,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.update(+id",{"_index":586,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.updatestatus(+id",{"_index":594,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appservice.gethello",{"_index":279,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.adminupdateuser",{"_index":865,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.authservice.getprofile(number(req.user.id",{"_index":856,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.authservice.login(logindto",{"_index":835,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.authservice.register(registerdto",{"_index":846,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.authservice.updateuserinfo",{"_index":858,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["this.bucketname",{"_index":1629,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["this.checktimeslotavailability(newdate",{"_index":668,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.configservice",{"_index":1674,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.configservice.get",{"_index":1670,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.configservice.get('minio_port",{"_index":1672,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.configservice.get('ws_cors_origin",{"_index":2003,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.counterrepository.create",{"_index":2299,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.counterrepository.find",{"_index":2301,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.counterrepository.findone",{"_index":2260,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.counterrepository.save(counter",{"_index":2267,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.documentapplicationsservice.create(createdto",{"_index":1414,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.findall",{"_index":1459,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.findall(userid",{"_index":1441,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.findone(id",{"_index":1447,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.getallapplicationfiles",{"_index":1446,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.getapplicationfiles",{"_index":1444,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.getapplicationstats",{"_index":1461,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.getfiledownloadurl",{"_index":1450,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.remove(id",{"_index":1455,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.update",{"_index":1451,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.updatestatus",{"_index":1452,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.uploadfile",{"_index":1436,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.ensurebucketexists",{"_index":1684,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.findone(id",{"_index":263,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"injectables/QueueService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.findone(queueid",{"_index":2197,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.generatealltimeslots",{"_index":701,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.getdetailsformultiplequeues(queueids",{"_index":2248,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.getprofile(targetuserid",{"_index":1093,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.getqueueposition(queueid",{"_index":2200,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.getqueueposition(savedqueue.id",{"_index":2193,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.handledailyqueuereset",{"_index":2102,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["this.isvalidemail(email",{"_index":961,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.isvalidemail(updateuserdto.email",{"_index":1003,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(payload",{"_index":951,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logdailystatistics(startofday",{"_index":2093,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["this.logger.error",{"_index":2094,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["this.logger.error('delete",{"_index":1648,"title":{},"body":{"injectables/MinioService.html":{}}}],["this.logger.error('error",{"_index":1689,"title":{},"body":{"injectables/MinioService-1.html":{},"injectables/QueueSchedulerService.html":{}}}],["this.logger.error('get",{"_index":1646,"title":{},"body":{"injectables/MinioService.html":{}}}],["this.logger.error('upload",{"_index":1643,"title":{},"body":{"injectables/MinioService.html":{}}}],["this.logger.log",{"_index":593,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/QueueSchedulerService.html":{}}}],["this.logger.log('fetching",{"_index":550,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.logger.log(`bucket",{"_index":1688,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.logger.log(`client",{"_index":1999,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.logger.log(`cors",{"_index":2002,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.logger.log(`creating",{"_index":546,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.logger.log(`deleting",{"_index":597,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.logger.log(`fetching",{"_index":554,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.logger.log(`file",{"_index":1641,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["this.logger.log(`minio",{"_index":1681,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.logger.log(`socket",{"_index":2010,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.logger.log(`updating",{"_index":585,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.minioclient",{"_index":1617,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["this.minioclient.bucketexists(this.bucketname",{"_index":1685,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.minioclient.listobjects",{"_index":1703,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.minioclient.makebucket(this.bucketname",{"_index":1686,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.minioclient.presignedgetobject",{"_index":1644,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["this.minioclient.putobject",{"_index":1634,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["this.minioclient.removeobject(this.bucketname",{"_index":1647,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["this.minioclient.statobject(this.bucketname",{"_index":1699,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.queuedetailsrepository.create",{"_index":2178,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuedetailsrepository.find",{"_index":2232,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuedetailsrepository.findone",{"_index":2198,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuedetailsrepository.save(queuedetails",{"_index":2190,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuegateway.notifycounterupdate(counterid",{"_index":2283,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuegateway.notifyqueueupdate(id",{"_index":2209,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuegateway.notifyqueueupdate(nextqueue.id",{"_index":2280,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuegateway.notifyqueueupdate(queue.id",{"_index":2079,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["this.queuegateway.server.emit('dailyqueuereset",{"_index":2085,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["this.queuegateway.server.emit('queuelistupdate",{"_index":2194,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.count",{"_index":2095,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["this.queuerepository.create",{"_index":2160,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.find",{"_index":2067,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["this.queuerepository.findone",{"_index":2195,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.save",{"_index":2073,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["this.queuerepository.save(counter.currentqueue",{"_index":2264,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.save(nextqueue",{"_index":2273,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queuerepository.save(queue",{"_index":2167,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.queueschedulerservice.gettodaypendingcount",{"_index":1912,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueschedulerservice.manualdailyreset",{"_index":1910,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.addcounter(data.name",{"_index":1896,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.callnext(+counterid",{"_index":1894,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.checkexists(+id",{"_index":1899,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.create(createqueuedto",{"_index":1848,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.create(queuedata",{"_index":1859,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findall",{"_index":1862,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findbyqueuenumber(queuenumber",{"_index":1887,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findbystatus(queuestatus.completed",{"_index":1867,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findbystatus(queuestatus.pending",{"_index":1865,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findbystatus(queuestatus.serving",{"_index":1866,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findbystatus(status",{"_index":1864,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findbystatuswithdetails(queuestatus.pending",{"_index":1868,"title":{},"body":{"controllers/QueueController.html":{},"controllers/QueuesController.html":{}}}],["this.queueservice.findbystatuswithdetails(queuestatus.serving",{"_index":1869,"title":{},"body":{"controllers/QueueController.html":{},"controllers/QueuesController.html":{}}}],["this.queueservice.findbyuseridwithdetails(userid",{"_index":2360,"title":{},"body":{"controllers/QueuesController.html":{}}}],["this.queueservice.findone(+id",{"_index":1885,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.findone(queueid",{"_index":2367,"title":{},"body":{"controllers/QueuesController.html":{}}}],["this.queueservice.getcounters",{"_index":1897,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.getdetailsformultiplequeues(body.queueids",{"_index":1874,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.getqueuedetails(+id",{"_index":1889,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.getqueuedetails(queueid",{"_index":2006,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.queueservice.getqueueposition(+id",{"_index":1891,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.getqueueposition(queueid",{"_index":2008,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.queueservice.getstats",{"_index":1884,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.queueservice.update(+id",{"_index":1882,"title":{},"body":{"controllers/QueueController.html":{}}}],["this.reflector.getallandoverride",{"_index":2399,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["this.rolesrepository.find",{"_index":2460,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesrepository.findby",{"_index":2468,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesrepository.findone",{"_index":2461,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesservice.assignrolestouser",{"_index":1079,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.rolesservice.assignrolestouser(id",{"_index":1562,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.rolesservice.assignrolestouser(user.id",{"_index":981,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.rolesservice.findall",{"_index":2429,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.findbyname('citizen",{"_index":980,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.rolesservice.findone(+id",{"_index":2430,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.findone(roleid",{"_index":1076,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.rolesservice.findone(updateuserdto.defaultroleid",{"_index":1083,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.rolesservice.getuserroles(+userid",{"_index":2432,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.getuserroles(adminid",{"_index":1052,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.rolesservice.getuserroles(targetuserid",{"_index":1085,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.rolesservice.getuserroles(user.id",{"_index":943,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.rolesservice.getuserroles(userid",{"_index":999,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.server.emit('counterlistupdate",{"_index":2021,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.server.emit('queuelistupdate",{"_index":2018,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.server.to(`counter_${counterid}`).emit('counterupdate",{"_index":2020,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.server.to(`queue_${queueid}`).emit('queueupdate",{"_index":2017,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.updateuserinfo(targetuserid",{"_index":1066,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersrepository",{"_index":1517,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.count",{"_index":1564,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.create",{"_index":977,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.delete(id",{"_index":1563,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.delete(user.id",{"_index":989,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersrepository.find",{"_index":1575,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.findone",{"_index":919,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.save(user",{"_index":978,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.update(id",{"_index":1555,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.update(targetuserid",{"_index":1091,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersrepository.update(userid",{"_index":1033,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.adminupdate(+id",{"_index":2611,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.create(userwithhashedpassword",{"_index":2617,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall",{"_index":2603,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(req.user.id",{"_index":2604,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(user.id",{"_index":2619,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(userid",{"_index":2610,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getstats",{"_index":2605,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.remove(+id",{"_index":2612,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.updatestatus(+id",{"_index":2613,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.validatepasswordstrength(password",{"_index":969,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.validatepasswordstrength(updateuserdto.password",{"_index":1012,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":259,"title":{},"body":{"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["time",{"_index":357,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppointmentService.html":{},"injectables/QueueService.html":{},"index.html":{}}}],["time_zone",{"_index":361,"title":{},"body":{"modules/AppModule.html":{}}}],["timestamp",{"_index":1911,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueSchedulerService.html":{}}}],["timezone",{"_index":2042,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["title",{"_index":120,"title":{},"body":{"entities/Announcement.html":{},"classes/CreateAnnouncementDto.html":{}}}],["today",{"_index":654,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["today's",{"_index":722,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["today.getfullyear()}${string(today.getmonth",{"_index":2140,"title":{},"body":{"injectables/QueueService.html":{}}}],["today.sethours(0",{"_index":655,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["todayappointments",{"_index":723,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["todaycount",{"_index":2149,"title":{},"body":{"injectables/QueueService.html":{}}}],["todayend",{"_index":2147,"title":{},"body":{"injectables/QueueService.html":{}}}],["todayend.sethours(23",{"_index":2148,"title":{},"body":{"injectables/QueueService.html":{}}}],["todaystart",{"_index":2145,"title":{},"body":{"injectables/QueueService.html":{}}}],["todaystart.sethours(0",{"_index":2146,"title":{},"body":{"injectables/QueueService.html":{}}}],["token",{"_index":950,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["tokens",{"_index":1119,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["tolowercase",{"_index":1676,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["tomorrow",{"_index":707,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["tomorrow.sethours(0",{"_index":709,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["total",{"_index":728,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"classes/PaginatedUsersResponseDto.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["totalcount",{"_index":717,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueService.html":{}}}],["totalpages",{"_index":1532,"title":{},"body":{"interfaces/FindAllOptions.html":{},"classes/PaginatedUsersResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["totalusers",{"_index":1504,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["totalwaittimems",{"_index":2292,"title":{},"body":{"injectables/QueueService.html":{}}}],["touch",{"_index":2809,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":2542,"title":{},"body":{"classes/UserQueryDto.html":{},"dependencies.html":{}}}],["trigger",{"_index":1902,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueSchedulerService.html":{}}}],["triggered",{"_index":1909,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueSchedulerService.html":{}}}],["triggering",{"_index":2255,"title":{},"body":{"injectables/QueueService.html":{}}}],["true",{"_index":136,"title":{},"body":{"entities/Announcement.html":{},"injectables/AnnouncementService.html":{},"modules/AppModule.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["true})@joincolumn({name",{"_index":444,"title":{},"body":{"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["try",{"_index":640,"title":{},"body":{"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"controllers/QueueController.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["turn",{"_index":2279,"title":{},"body":{"injectables/QueueService.html":{}}}],["twitter",{"_index":2815,"title":{},"body":{"index.html":{}}}],["type",{"_index":29,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"modules/AppModule.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["typeof",{"_index":1039,"title":{},"body":{"injectables/AuthService.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["typeorm",{"_index":145,"title":{},"body":{"entities/Announcement.html":{},"injectables/AnnouncementService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{},"entities/Role.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":225,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature",{"_index":1470,"title":{},"body":{"modules/DocumentApplicationsModule.html":{}}}],["typeormmodule.forfeature([announcement",{"_index":230,"title":{},"body":{"modules/AnnouncementModule.html":{}}}],["typeormmodule.forfeature([appointment",{"_index":604,"title":{},"body":{"modules/AppointmentModule.html":{}}}],["typeormmodule.forfeature([queue",{"_index":2031,"title":{},"body":{"modules/QueueModule.html":{}}}],["typeormmodule.forfeature([role",{"_index":2445,"title":{},"body":{"modules/RolesModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":888,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":311,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":2829,"title":{},"body":{"miscellaneous/variables.html":{}}}],["types",{"_index":2474,"title":{},"body":{"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["typescript",{"_index":926,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["ui",{"_index":2700,"title":{},"body":{"dependencies.html":{}}}],["unauthorized",{"_index":765,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["unauthorized'})@apibearerauth('jwt",{"_index":786,"title":{},"body":{"controllers/AuthController.html":{}}}],["unauthorized'})@apiresponse({status",{"_index":807,"title":{},"body":{"controllers/AuthController.html":{}}}],["unauthorizedexception",{"_index":811,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{}}}],["unauthorizedexception('admin",{"_index":1050,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('insufficient",{"_index":1057,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('invalid",{"_index":855,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{}}}],["unauthorizedexception('user",{"_index":998,"title":{},"body":{"injectables/AuthService.html":{}}}],["uncomment",{"_index":1403,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{}}}],["undefined",{"_index":44,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Appointment.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateDocumentApplicationDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"injectables/UsersService.html":{}}}],["undefined})@apiresponse({status",{"_index":794,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined})@isarray()@isoptional",{"_index":45,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["undefined})@isenum(applicationtype",{"_index":1204,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["undefined})@isobject",{"_index":1210,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["undefined})@isoptional()@isarray()@isnumber",{"_index":1272,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["unexpected",{"_index":1045,"title":{},"body":{"injectables/AuthService.html":{}}}],["unique",{"_index":455,"title":{},"body":{"entities/Appointment.html":{},"entities/Queue.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["uniqueness",{"_index":1537,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["unit",{"_index":2732,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":476,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser-1.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["unlicensed",{"_index":2825,"title":{},"body":{"properties.html":{}}}],["unsafe",{"_index":2595,"title":{},"body":{"controllers/UsersController.html":{}}}],["unused",{"_index":928,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["update",{"_index":11,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update'})@apibody({type",{"_index":755,"title":{},"body":{"controllers/AuthController.html":{}}}],["update(@param('id",{"_index":1892,"title":{},"body":{"controllers/QueueController.html":{}}}],["update(id",{"_index":178,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"controllers/UsersController.html":{}}}],["updateannouncementdto",{"_index":179,"title":{"classes/UpdateAnnouncementDto.html":{}},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"classes/UpdateAnnouncementDto.html":{},"coverage.html":{}}}],["updateappointmentdto",{"_index":509,"title":{"classes/UpdateAppointmentDto.html":{}},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"classes/UpdateAppointmentDto.html":{},"coverage.html":{}}}],["updateappointmentdto.appointmentdate",{"_index":662,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["updateappointmentdto.appointmenttime",{"_index":663,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["updated",{"_index":669,"title":{},"body":{"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updated'})@apiresponse({status",{"_index":758,"title":{},"body":{"controllers/AuthController.html":{}}}],["updated_at",{"_index":1310,"title":{},"body":{"entities/DocumentApplication.html":{},"entities/User.html":{}}}],["updatedat",{"_index":121,"title":{},"body":{"entities/Announcement.html":{},"entities/Appointment.html":{},"entities/DocumentApplication.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{}}}],["updatedata",{"_index":1539,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.contactnumber",{"_index":1544,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.defaultroleid",{"_index":1547,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.email",{"_index":1540,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.firstname",{"_index":1542,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.lastname",{"_index":1543,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.middlename",{"_index":1545,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.name",{"_index":1553,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.nameextension",{"_index":1546,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.username",{"_index":1541,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedatecolumn",{"_index":142,"title":{},"body":{"entities/Announcement.html":{},"entities/Appointment.html":{},"entities/DocumentApplication.html":{},"entities/User.html":{}}}],["updatedatecolumn({name",{"_index":1309,"title":{},"body":{"entities/DocumentApplication.html":{},"entities/User.html":{}}}],["updatedocumentapplicationdto",{"_index":1389,"title":{"classes/UpdateDocumentApplicationDto.html":{}},"body":{"controllers/DocumentApplicationsController.html":{},"classes/UpdateDocumentApplicationDto.html":{},"coverage.html":{}}}],["updatedqueue",{"_index":2208,"title":{},"body":{"injectables/QueueService.html":{}}}],["updatedto",{"_index":1388,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["updateduser",{"_index":1034,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateduser.defaultrole?.name",{"_index":1037,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateprofile",{"_index":745,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["updateprofile(req",{"_index":805,"title":{},"body":{"controllers/AuthController.html":{}}}],["updatequeuedto",{"_index":1823,"title":{"classes/UpdateQueueDto.html":{}},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{},"classes/UpdateQueueDto.html":{},"coverage.html":{}}}],["updatequeuedto.counternumber",{"_index":2206,"title":{},"body":{"injectables/QueueService.html":{}}}],["updatequeuedto.status",{"_index":2203,"title":{},"body":{"injectables/QueueService.html":{}}}],["updates",{"_index":1071,"title":{},"body":{"injectables/AuthService.html":{},"classes/QueueGateway.html":{},"index.html":{}}}],["updatestatus",{"_index":466,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updatestatus(id",{"_index":512,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"controllers/QueueController.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updatestatusdto",{"_index":2592,"title":{},"body":{"controllers/UsersController.html":{}}}],["updatestatusdto.isactive",{"_index":2614,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuserdto",{"_index":14,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateuserdto.defaultroleid",{"_index":1082,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.email",{"_index":1002,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.firstname",{"_index":1018,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.lastname",{"_index":1022,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.middlename",{"_index":1020,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.nameextension",{"_index":1024,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.password",{"_index":1011,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.roleids",{"_index":1072,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.roleids.includes(updateuserdto.defaultroleid",{"_index":1090,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.roleids.join",{"_index":1081,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.roleids.length",{"_index":1073,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto.username",{"_index":1005,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto:22",{"_index":61,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:27",{"_index":86,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:37",{"_index":84,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:42",{"_index":65,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:47",{"_index":71,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:52",{"_index":68,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:60",{"_index":77,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:68",{"_index":59,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:76",{"_index":56,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto['name",{"_index":1032,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserdto})@useguards(jwtauthguard)@post('update",{"_index":809,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateuserinfo",{"_index":891,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserinfo(userid",{"_index":908,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserstatusdto",{"_index":2493,"title":{"classes/UpdateUserStatusDto.html":{}},"body":{"classes/UpdateUserStatusDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["updating",{"_index":96,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"injectables/AuthService.html":{},"controllers/QueueController.html":{},"injectables/QueueService.html":{},"classes/UpdateUserDto.html":{}}}],["upload",{"_index":1399,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"injectables/MinioService-1.html":{}}}],["uploaddocument",{"_index":1352,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["uploaddocument(id",{"_index":1394,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["uploaded",{"_index":1642,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["uploaded_at",{"_index":1493,"title":{},"body":{"entities/DocumentFile.html":{}}}],["uploadedat",{"_index":1475,"title":{},"body":{"entities/DocumentFile.html":{}}}],["uploadedfile",{"_index":1402,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["uploadfile",{"_index":1603,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["uploadfile(file",{"_index":1610,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["uploading",{"_index":1696,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["uppercase",{"_index":1103,"title":{},"body":{"injectables/AuthService.html":{}}}],["url",{"_index":1380,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["use",{"_index":327,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"injectables/QueueService.html":{}}}],["usefactory",{"_index":313,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["useguards",{"_index":515,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard",{"_index":538,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["useguards(rolesguard",{"_index":548,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["useinterceptors",{"_index":1401,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["user",{"_index":12,"title":{"entities/User.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"classes/LoginDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":752,"title":{},"body":{"controllers/AuthController.html":{},"injectables/QueueService.html":{},"interfaces/RequestWithUser.html":{}}}],["user'})@isoptional()@isnumber",{"_index":1250,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.defaultrole?.name",{"_index":956,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.defaultroleid",{"_index":983,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.dto",{"_index":817,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":7,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:102",{"_index":1251,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:19",{"_index":1255,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":2489,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:27",{"_index":1277,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:36",{"_index":1271,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:37",{"_index":2492,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:42",{"_index":2490,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:44",{"_index":1257,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:47",{"_index":2491,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:52",{"_index":1261,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:60",{"_index":1258,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:68",{"_index":1265,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:76",{"_index":1268,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:84",{"_index":1248,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:90",{"_index":40,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["user.dto.ts:94",{"_index":1274,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:99",{"_index":46,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["user.email",{"_index":949,"title":{},"body":{"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.firstname",{"_index":1019,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.id",{"_index":545,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{}}}],["user.lastname",{"_index":1023,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.middlename",{"_index":1021,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.nameextension",{"_index":1025,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.password",{"_index":922,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.roles",{"_index":2413,"title":{},"body":{"entities/Role.html":{},"injectables/RolesService.html":{}}}],["user.roles.map((role",{"_index":1531,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.roles.some((role",{"_index":581,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{}}}],["user.roles?.includes['admin",{"_index":1903,"title":{},"body":{"controllers/QueueController.html":{}}}],["user.roles?.includes['super_admin",{"_index":1904,"title":{},"body":{"controllers/QueueController.html":{}}}],["user.username",{"_index":1006,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"controllers/QueueController.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user/:userid",{"_index":778,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/RequestWithUser.html":{}}}],["user?.id",{"_index":1440,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"controllers/QueueController.html":{}}}],["user?.roles.some((role",{"_index":1438,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["user_id",{"_index":1312,"title":{},"body":{"entities/DocumentApplication.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["user_roles",{"_index":2518,"title":{},"body":{"entities/User.html":{}}}],["userdetails",{"_index":2308,"title":{},"body":{"injectables/QueueService.html":{}}}],["userdetails.map((detail",{"_index":2309,"title":{},"body":{"injectables/QueueService.html":{}}}],["userentity",{"_index":1780,"title":{},"body":{"controllers/QueueController.html":{}}}],["userid",{"_index":424,"title":{},"body":{"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{}}}],["useridnumber",{"_index":2303,"title":{},"body":{"injectables/QueueService.html":{}}}],["username",{"_index":28,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["username'})@isoptional()@isstring",{"_index":2540,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["userquerydto",{"_index":2531,"title":{"classes/UserQueryDto.html":{}},"body":{"classes/UserQueryDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["userqueues",{"_index":2359,"title":{},"body":{"controllers/QueuesController.html":{}}}],["userqueues.length",{"_index":2361,"title":{},"body":{"controllers/QueuesController.html":{}}}],["userqueues.map((queue",{"_index":2362,"title":{},"body":{"controllers/QueuesController.html":{}}}],["userresponsedto",{"_index":1719,"title":{"classes/UserResponseDto.html":{}},"body":{"classes/PaginatedUsersResponseDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["userroles",{"_index":1084,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["userroles.map((role",{"_index":2405,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["userroles.some",{"_index":1087,"title":{},"body":{"injectables/AuthService.html":{}}}],["users",{"_index":1365,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"classes/PaginatedUsersResponseDto.html":{},"controllers/QueueController.html":{},"entities/Role.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users.controller",{"_index":2625,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.map((user",{"_index":1530,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["users.service",{"_index":2597,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/entities/user.entity",{"_index":449,"title":{},"body":{"entities/Appointment.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/DocumentApplication.html":{},"controllers/QueueController.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{}}}],["users/users.module",{"_index":299,"title":{},"body":{"modules/AppModule.html":{}}}],["usersbyrole",{"_index":1507,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["usersbyroledto",{"_index":2568,"title":{"classes/UsersByRoleDto.html":{}},"body":{"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"coverage.html":{}}}],["userscontroller",{"_index":2571,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":290,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":898,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["usersservice",{"_index":1512,"title":{"injectables/UsersService.html":{}},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["userstats",{"_index":1503,"title":{"interfaces/UserStats.html":{}},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userstatsresponsedto",{"_index":2561,"title":{"classes/UserStatsResponseDto.html":{}},"body":{"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"coverage.html":{}}}],["userwithhashedpassword",{"_index":2616,"title":{},"body":{"controllers/UsersController.html":{}}}],["userwithoutpassword",{"_index":955,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["userwithroles",{"_index":2618,"title":{},"body":{"controllers/UsersController.html":{}}}],["usessl",{"_index":1622,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["usesslvalue",{"_index":1673,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["using",{"_index":359,"title":{},"body":{"modules/AppModule.html":{},"injectables/QueueService.html":{},"controllers/QueuesController.html":{},"injectables/RolesService.html":{},"index.html":{}}}],["valid",{"_index":942,"title":{},"body":{"injectables/AuthService.html":{}}}],["validate",{"_index":960,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/QueueController.html":{}}}],["validate(payload",{"_index":1131,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["validatepasswordstrength",{"_index":892,"title":{},"body":{"injectables/AuthService.html":{}}}],["validatepasswordstrength(password",{"_index":910,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser",{"_index":893,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(logindto",{"_index":913,"title":{},"body":{"injectables/AuthService.html":{}}}],["validating",{"_index":1118,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["validation",{"_index":996,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/QueueService.html":{}}}],["validator",{"_index":93,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserQueryDto.html":{},"dependencies.html":{}}}],["validity",{"_index":641,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["validvalues",{"_index":1880,"title":{},"body":{"controllers/QueueController.html":{}}}],["value",{"_index":172,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"controllers/QueueController.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"classes/UserQueryDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":1847,"title":{},"body":{"controllers/QueueController.html":{},"injectables/QueueService.html":{}}}],["varchar",{"_index":126,"title":{},"body":{"entities/Announcement.html":{}}}],["variable",{"_index":329,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{}}}],["variables",{"_index":1125,"title":{"miscellaneous/variables.html":{}},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["vars",{"_index":929,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["verify",{"_index":1048,"title":{},"body":{"injectables/AuthService.html":{}}}],["version",{"_index":2823,"title":{},"body":{"properties.html":{}}}],["video",{"_index":2779,"title":{},"body":{"index.html":{}}}],["view",{"_index":2606,"title":{},"body":{"controllers/UsersController.html":{}}}],["visit",{"_index":2768,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":2782,"title":{},"body":{"index.html":{}}}],["void",{"_index":1965,"title":{},"body":{"classes/QueueGateway.html":{}}}],["wait",{"_index":2287,"title":{},"body":{"injectables/QueueService.html":{}}}],["waiting",{"_index":2269,"title":{},"body":{"injectables/QueueService.html":{}}}],["walk",{"_index":2356,"title":{},"body":{"controllers/QueuesController.html":{}}}],["want",{"_index":1826,"title":{},"body":{"controllers/QueueController.html":{}}}],["watch",{"_index":2727,"title":{},"body":{"index.html":{}}}],["we'll",{"_index":1063,"title":{},"body":{"injectables/AuthService.html":{}}}],["website",{"_index":2813,"title":{},"body":{"index.html":{}}}],["websocketgateway",{"_index":1984,"title":{},"body":{"classes/QueueGateway.html":{}}}],["websocketserver",{"_index":1960,"title":{},"body":{"classes/QueueGateway.html":{}}}],["weekend",{"_index":645,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["weekends",{"_index":652,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["weren't",{"_index":2086,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["willbeassigned",{"_index":1089,"title":{},"body":{"injectables/AuthService.html":{}}}],["without",{"_index":2254,"title":{},"body":{"injectables/QueueService.html":{},"controllers/UsersController.html":{}}}],["working",{"_index":2767,"title":{},"body":{"index.html":{}}}],["world",{"_index":371,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":2792,"title":{},"body":{"index.html":{}}}],["xxx",{"_index":2152,"title":{},"body":{"injectables/QueueService.html":{}}}],["yes",{"_index":933,"title":{},"body":{"injectables/AuthService.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/MinioService-1.html":{},"controllers/QueueController.html":{}}}],["you'd",{"_index":2806,"title":{},"body":{"index.html":{}}}],["you're",{"_index":2736,"title":{},"body":{"index.html":{}}}],["yyyy",{"_index":725,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["yyyymmdd",{"_index":2151,"title":{},"body":{"injectables/QueueService.html":{}}}],["zone",{"_index":358,"title":{},"body":{"modules/AppModule.html":{}}}],["zoom",{"_index":221,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AdminUpdateUserDto.html":{"url":"classes/AdminUpdateUserDto.html","title":"class - AdminUpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AdminUpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/update-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for admin to update any user\n\n            \n\n            \n                Extends\n            \n            \n                            UpdateUserDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                defaultRoleId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                roleIds\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                contactNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                middleName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                nameExtension\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        defaultRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Default role ID for the user', example: 2})@IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        roleIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Array of role IDs to assign to the user', example: undefined, type: undefined})@IsArray()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:99\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Complete address', example: '123 Main St, San Ildefonso, Bulacan'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:76\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        contactNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Contact number', example: '09123456789'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:68\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User email address', example: 'test@example.com'})@IsEmail()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:22\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'First name', example: 'John'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:42\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Last name', example: 'Doe'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:52\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Middle name', example: 'Robert'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:47\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        nameExtension\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Name extension (e.g., Jr., III)', example: 'Jr.'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:60\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User password (min 8 characters)', example: 'password123', minLength: 8})@IsString()@IsOptional()@MinLength(8)\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:37\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Username', example: 'john_doe'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:27\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsOptional,\n  IsString,\n  MinLength,\n  IsNumber,\n  IsArray,\n} from 'class-validator';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\n/**\n * DTO for updating user information (citizen)\n * @class UpdateUserDto\n */\nexport class UpdateUserDto {\n  @ApiPropertyOptional({\n    description: 'User email address',\n    example: 'test@example.com',\n  })\n  @IsEmail()\n  @IsOptional()\n  email?: string;\n\n  @ApiPropertyOptional({ description: 'Username', example: 'john_doe' })\n  @IsString()\n  @IsOptional()\n  username?: string;\n\n  @ApiPropertyOptional({\n    description: 'User password (min 8 characters)',\n    example: 'password123',\n    minLength: 8,\n  })\n  @IsString()\n  @IsOptional()\n  @MinLength(8)\n  password?: string;\n\n  @ApiPropertyOptional({ description: 'First name', example: 'John' })\n  @IsString()\n  @IsOptional()\n  firstName?: string;\n\n  @ApiPropertyOptional({ description: 'Middle name', example: 'Robert' })\n  @IsString()\n  @IsOptional()\n  middleName?: string;\n\n  @ApiPropertyOptional({ description: 'Last name', example: 'Doe' })\n  @IsString()\n  @IsOptional()\n  lastName?: string;\n\n  @ApiPropertyOptional({\n    description: 'Name extension (e.g., Jr., III)',\n    example: 'Jr.',\n  })\n  @IsString()\n  @IsOptional()\n  nameExtension?: string;\n\n  @ApiPropertyOptional({\n    description: 'Contact number',\n    example: '09123456789',\n  })\n  @IsString()\n  @IsOptional()\n  contactNumber?: string;\n\n  @ApiPropertyOptional({\n    description: 'Complete address',\n    example: '123 Main St, San Ildefonso, Bulacan',\n  })\n  @IsString()\n  @IsOptional()\n  address?: string;\n}\n\n/**\n * DTO for admin to update any user\n * @class AdminUpdateUserDto\n */\nexport class AdminUpdateUserDto extends UpdateUserDto {\n  @ApiPropertyOptional({\n    description: 'Default role ID for the user',\n    example: 2,\n  })\n  @IsNumber()\n  @IsOptional()\n  defaultRoleId?: number;\n\n  @ApiPropertyOptional({\n    description: 'Array of role IDs to assign to the user',\n    example: [1, 2],\n    type: [Number],\n  })\n  @IsArray()\n  @IsOptional()\n  roleIds?: number[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Announcement.html":{"url":"entities/Announcement.html","title":"entity - Announcement","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Announcement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/announcement/entities/announcement.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                createdBy\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                image\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                title\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/entities/announcement.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 100, default: 'admin'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/entities/announcement.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/entities/announcement.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/entities/announcement.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 500, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/entities/announcement.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'boolean', default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/entities/announcement.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/entities/announcement.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/entities/announcement.entity.ts:33\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  CreateDateColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity('announcements')\nexport class Announcement {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ type: 'varchar', length: 255 })\n  title: string;\n\n  @Column({ type: 'text' })\n  description: string;\n\n  @Column({ type: 'varchar', length: 500, nullable: true })\n  image: string;\n\n  @Column({ type: 'boolean', default: true })\n  isActive: boolean;\n\n  @Column({ type: 'varchar', length: 100, default: 'admin' })\n  createdBy: string;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AnnouncementController.html":{"url":"controllers/AnnouncementController.html","title":"controller - AnnouncementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AnnouncementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/announcement/announcement.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                announcements\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                getRecentAnnouncements\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createAnnouncementDto: CreateAnnouncementDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createAnnouncementDto\n                                            \n                                                            CreateAnnouncementDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getRecentAnnouncements\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRecentAnnouncements(limit: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('recent')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    5\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.controller.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateAnnouncementDto: UpdateAnnouncementDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.controller.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateAnnouncementDto\n                                            \n                                                            UpdateAnnouncementDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  ParseIntPipe,\n  Query,\n} from '@nestjs/common';\nimport { AnnouncementService } from './announcement.service';\nimport { CreateAnnouncementDto } from './dto/create-announcement.dto';\nimport { UpdateAnnouncementDto } from './dto/update-announcement.dto';\n\n@Controller('announcements')\nexport class AnnouncementController {\n  constructor(private readonly announcementService: AnnouncementService) {}\n\n  @Post()\n  create(@Body() createAnnouncementDto: CreateAnnouncementDto) {\n    return this.announcementService.create(createAnnouncementDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.announcementService.findAll();\n  }\n\n  @Get('recent')\n  getRecentAnnouncements(@Query('limit', ParseIntPipe) limit: number = 5) {\n    return this.announcementService.getRecentAnnouncements(limit);\n  }\n\n  @Get(':id')\n  findOne(@Param('id', ParseIntPipe) id: number) {\n    return this.announcementService.findOne(id);\n  }\n\n  @Patch(':id')\n  update(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() updateAnnouncementDto: UpdateAnnouncementDto,\n  ) {\n    return this.announcementService.update(id, updateAnnouncementDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id', ParseIntPipe) id: number) {\n    return this.announcementService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AnnouncementModule.html":{"url":"modules/AnnouncementModule.html","title":"module - AnnouncementModule","body":"\n                   \n\n\n\n\n    Modules\n    AnnouncementModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AnnouncementModule\n\n\n\ncluster_AnnouncementModule_exports\n\n\n\ncluster_AnnouncementModule_providers\n\n\n\n\nAnnouncementService \n\nAnnouncementService \n\n\n\nAnnouncementModule\n\nAnnouncementModule\n\nAnnouncementService  -->\n\nAnnouncementModule->AnnouncementService \n\n\n\n\n\nAnnouncementService\n\nAnnouncementService\n\nAnnouncementModule -->\n\nAnnouncementService->AnnouncementModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/announcement/announcement.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AnnouncementService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AnnouncementController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AnnouncementService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AnnouncementService } from './announcement.service';\nimport { AnnouncementController } from './announcement.controller';\nimport { Announcement } from './entities/announcement.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Announcement])],\n  controllers: [AnnouncementController],\n  providers: [AnnouncementService],\n  exports: [AnnouncementService],\n})\nexport class AnnouncementModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AnnouncementService.html":{"url":"injectables/AnnouncementService.html","title":"injectable - AnnouncementService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AnnouncementService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/announcement/announcement.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getRecentAnnouncements\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(announcementRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/announcement/announcement.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        announcementRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createAnnouncementDto: CreateAnnouncementDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createAnnouncementDto\n                                            \n                                                            CreateAnnouncementDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getRecentAnnouncements\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRecentAnnouncements(limit: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.service.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    5\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.service.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateAnnouncementDto: UpdateAnnouncementDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.service.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateAnnouncementDto\n                                            \n                                                            UpdateAnnouncementDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Announcement } from './entities/announcement.entity';\nimport { CreateAnnouncementDto } from './dto/create-announcement.dto';\nimport { UpdateAnnouncementDto } from './dto/update-announcement.dto';\n\n@Injectable()\nexport class AnnouncementService {\n  constructor(\n    @InjectRepository(Announcement)\n    private announcementRepository: Repository,\n  ) {}\n\n  async create(\n    createAnnouncementDto: CreateAnnouncementDto,\n  ): Promise {\n    const announcement = this.announcementRepository.create(\n      createAnnouncementDto,\n    );\n    return await this.announcementRepository.save(announcement);\n  }\n\n  async findAll(): Promise {\n    return await this.announcementRepository.find({\n      where: { isActive: true },\n      order: { createdAt: 'DESC' },\n    });\n  }\n\n  async findOne(id: number): Promise {\n    const announcement = await this.announcementRepository.findOne({\n      where: { id, isActive: true },\n    });\n\n    if (!announcement) {\n      throw new NotFoundException(`Announcement with ID ${id} not found`);\n    }\n\n    return announcement;\n  }\n\n  async update(\n    id: number,\n    updateAnnouncementDto: UpdateAnnouncementDto,\n  ): Promise {\n    const announcement = await this.findOne(id);\n\n    Object.assign(announcement, updateAnnouncementDto);\n    return await this.announcementRepository.save(announcement);\n  }\n\n  async remove(id: number): Promise {\n    const announcement = await this.findOne(id);\n    announcement.isActive = false; // Soft delete\n    await this.announcementRepository.save(announcement);\n  }\n\n  async getRecentAnnouncements(limit: number = 5): Promise {\n    return await this.announcementRepository.find({\n      where: { isActive: true },\n      order: { createdAt: 'DESC' },\n      take: limit,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                            \n                                    \n                                healthCheck\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        healthCheck\n                        \n                    \n                \n            \n            \n                \n                        \n                    healthCheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('health')\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     { status: string; }\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n\n  @Get('health')\n  healthCheck() {\n    return { status: 'ok' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAnnouncementModule\n\nAnnouncementModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAnnouncementModule->AppModule\n\n\n\n\n\nAppointmentModule\n\nAppointmentModule\n\nAppModule -->\n\nAppointmentModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nDocumentApplicationsModule\n\nDocumentApplicationsModule\n\nAppModule -->\n\nDocumentApplicationsModule->AppModule\n\n\n\n\n\nQueueModule\n\nQueueModule\n\nAppModule -->\n\nQueueModule->AppModule\n\n\n\n\n\nRolesModule\n\nRolesModule\n\nAppModule -->\n\nRolesModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AnnouncementModule\n                        \n                        \n                            AppointmentModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            DocumentApplicationsModule\n                        \n                        \n                            QueueModule\n                        \n                        \n                            RolesModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ScheduleModule } from '@nestjs/schedule';\n// import { databaseConfig } from './config/database.config';\nimport { UsersModule } from './users/users.module';\nimport { AuthModule } from './auth/auth.module';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { RolesModule } from './roles/roles.module';\nimport { QueueModule } from './modules/queue/queue.module';\nimport { AppointmentModule } from './modules/appointment/appointment.module';\nimport { AnnouncementModule } from './modules/announcement/announcement.module';\nimport { DocumentApplicationsModule } from './modules/document-applications/document-applications.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'mysql',\n        host: configService.get('DB_HOST'),\n        port: configService.get('DB_PORT'),\n        username: configService.get('DB_USERNAME'),\n        password: configService.get('DB_PASSWORD'),\n        database: configService.get('DB_NAME'),\n        entities: [__dirname + '/**/*.entity{.ts,.js}'],\n        synchronize: configService.get('DB_SYNCHRONIZE') === 'true', // Use environment variable\n        logging: configService.get('DB_LOGGING') === 'true', // Use environment variable\n        logger: 'advanced-console',\n        // Prevent data loss in development (below code is for development only)\n        // synchronize: true,\n        migrationsRun: false,\n        dropSchema: false,\n\n        // Only for development environments!\n        beforeConnect: async (connection): Promise => {\n          if (configService.get('NODE_ENV') !== 'production') {\n            const conn = connection as {\n              query: (sql: string) => Promise;\n            };\n            // Disable foreign key checks for development\n            await conn.query('SET FOREIGN_KEY_CHECKS=0;');\n            // Set time zone using environment variable\n            await conn.query(`SET time_zone = '${configService.get('DB_TIMEZONE') || '+08:00'}';`);\n          }\n        },\n        afterConnect: async (connection): Promise => {\n          if (configService.get('NODE_ENV') !== 'production') {\n            await (\n              connection as { query: (sql: string) => Promise }\n            ).query('SET FOREIGN_KEY_CHECKS=1;');\n          }\n        },\n      }),\n    }),\n    UsersModule,\n    AuthModule,\n    RolesModule,\n    QueueModule,\n    AppointmentModule,\n    AnnouncementModule,\n    DocumentApplicationsModule,\n    ScheduleModule.forRoot(),\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/ApplicationStatusHistory.html":{"url":"entities/ApplicationStatusHistory.html","title":"entity - ApplicationStatusHistory","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  ApplicationStatusHistory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/document-applications/entities/application-status-history.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                application\n                            \n                            \n                                    \n                                applicationId\n                            \n                            \n                                    \n                                changedAt\n                            \n                            \n                                    \n                                changedBy\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                newStatus\n                            \n                            \n                                    \n                                oldStatus\n                            \n                            \n                                    \n                                statusMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        application\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DocumentApplication\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, app => app.statusHistory, {onDelete: 'CASCADE', nullable: false})@JoinColumn({name: 'application_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/application-status-history.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        applicationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'application_id', length: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/application-status-history.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        changedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'changed_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/application-status-history.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        changedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'changed_by', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/application-status-history.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/application-status-history.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        newStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'new_status', length: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/application-status-history.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        oldStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'old_status', length: 50, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/application-status-history.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        statusMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'status_message', type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/application-status-history.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  CreateDateColumn,\n  ManyToOne,\n  JoinColumn,\n  Index,\n} from 'typeorm';\nimport { DocumentApplication } from './document-application.entity';\n\n@Entity('application_status_history')\n@Index(['applicationId'])\n@Index(['changedAt'])\nexport class ApplicationStatusHistory {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ name: 'application_id', length: 50 })\n  applicationId: string;\n\n  @Column({ name: 'old_status', length: 50, nullable: true })\n  oldStatus: string;\n\n  @Column({ name: 'new_status', length: 50 })\n  newStatus: string;\n\n  @Column({ name: 'status_message', type: 'text', nullable: true })\n  statusMessage: string;\n\n  @Column({ name: 'changed_by', nullable: true })\n  changedBy: number;\n\n  @CreateDateColumn({ name: 'changed_at' })\n  changedAt: Date;\n\n  // Relations\n  @ManyToOne(() => DocumentApplication, (app) => app.statusHistory, {\n    onDelete: 'CASCADE',\n    nullable: false,\n  })\n  @JoinColumn({ name: 'application_id' })\n  application: DocumentApplication;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Appointment.html":{"url":"entities/Appointment.html","title":"entity - Appointment","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Appointment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/appointment/entities/appointment.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                address\n                            \n                            \n                                    \n                                appointmentDate\n                            \n                            \n                                    \n                                appointmentNumber\n                            \n                            \n                                    \n                                appointmentTime\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isGuest\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                middleInitial\n                            \n                            \n                                    \n                                phoneNumber\n                            \n                            \n                                    \n                                reasonOfVisit\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    \n                                user\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        appointmentDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'date'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        appointmentNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        appointmentTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isGuest\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        middleInitial\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reasonOfVisit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AppointmentStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: AppointmentStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {nullable: true})@JoinColumn({name: 'userId', foreignKeyConstraintName: 'FK_appointment_user'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:59\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  ManyToOne,\n  JoinColumn,\n} from 'typeorm';\nimport { User } from '../../../users/entities/user.entity';\n\nexport enum AppointmentStatus {\n  PENDING = 'pending',\n  CONFIRMED = 'confirmed',\n  COMPLETED = 'completed',\n  CANCELLED = 'cancelled',\n}\n\n@Entity('appointments')\nexport class Appointment {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true })\n  appointmentNumber: string;\n\n  @Column()\n  firstName: string;\n\n  @Column()\n  lastName: string;\n\n  @Column({ nullable: true })\n  middleInitial: string;\n\n  @Column()\n  address: string;\n\n  @Column()\n  phoneNumber: string;\n\n  @Column()\n  reasonOfVisit: string;\n\n  @Column({ type: 'date' })\n  appointmentDate: string;\n\n  @Column()\n  appointmentTime: string;\n\n  @Column({\n    type: 'enum',\n    enum: AppointmentStatus,\n    default: AppointmentStatus.PENDING,\n  })\n  status: AppointmentStatus;\n\n  @Column({ nullable: true })\n  userId: number;\n\n  @ManyToOne(() => User, { nullable: true })\n  @JoinColumn({\n    name: 'userId',\n    foreignKeyConstraintName: 'FK_appointment_user',\n  })\n  user: User;\n\n  @Column({ default: false })\n  isGuest: boolean;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppointmentController.html":{"url":"controllers/AppointmentController.html","title":"controller - AppointmentController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppointmentController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/appointment/appointment.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                appointments\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                findByAppointmentNumber\n                            \n                            \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findUserAppointments\n                            \n                            \n                                    \n                                    Async\n                                getAvailableSlots\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getByDate\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getByDateRange\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getStats\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createAppointmentDto: CreateAppointmentDto, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create new appointment'})@ApiResponse({status: 201, description: 'Appointment created successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createAppointmentDto\n                                            \n                                                            CreateAppointmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(RolesGuard)@Roles('admin', 'staff', 'super_admin')@ApiOperation({summary: 'Get all appointments (Admin/Staff only)'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:59\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findByAppointmentNumber\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByAppointmentNumber(appointmentNumber: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('by-number/:number')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:125\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                appointmentNumber\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:119\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findUserAppointments\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserAppointments(user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('mine')@ApiOperation({summary: 'Get user appointments'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getAvailableSlots\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAvailableSlots(date: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('available-slots')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:110\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getByDate\n                        \n                    \n                \n            \n            \n                \n                        \n                    getByDate(date: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('by-date')@UseGuards(JwtAuthGuard, RolesGuard)@Roles('admin', 'staff', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:82\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getByDateRange\n                        \n                    \n                \n            \n            \n                \n                        \n                    getByDateRange(startDate: string, endDate: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('date-range')@UseGuards(JwtAuthGuard, RolesGuard)@Roles('admin', 'staff', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                startDate\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                endDate\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('stats')@UseGuards(JwtAuthGuard, RolesGuard)@Roles('admin', 'staff', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:74\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.NO_CONTENT)@ApiOperation({summary: 'Delete appointment'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:176\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateAppointmentDto: UpdateAppointmentDto, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOperation({summary: 'Update appointment'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:132\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateAppointmentDto\n                                            \n                                                            UpdateAppointmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(id: string, status: AppointmentStatus)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/status')@UseGuards(JwtAuthGuard, RolesGuard)@Roles('admin', 'staff', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:157\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                status\n                                            \n                                                            AppointmentStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n  Query,\n  BadRequestException,\n  HttpCode,\n  HttpStatus,\n  Logger,\n} from '@nestjs/common';\nimport { AppointmentService } from './appointment.service';\nimport { CreateAppointmentDto } from './dto/create-appointment.dto';\nimport { UpdateAppointmentDto } from './dto/update-appointment.dto';\nimport { JwtAuthGuard } from '../../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../../auth/guards/roles.guard';\nimport { Roles } from '../../auth/decorators/roles.decorator';\nimport { AppointmentStatus } from './entities/appointment.entity';\nimport { User } from '../../auth/decorators/user.decorator';\nimport { AuthenticatedUser } from '../../auth/jwt.strategy';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n} from '@nestjs/swagger';\n\n@ApiTags('Appointments')\n@Controller('appointments')\n@UseGuards(JwtAuthGuard)\n@ApiBearerAuth('JWT-auth')\nexport class AppointmentController {\n  private readonly logger = new Logger(AppointmentController.name);\n\n  constructor(private readonly appointmentService: AppointmentService) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Create new appointment' })\n  @ApiResponse({ status: 201, description: 'Appointment created successfully' })\n  async create(\n    @Body() createAppointmentDto: CreateAppointmentDto,\n    @User() user: AuthenticatedUser,\n  ) {\n    // Set the userId from the authenticated user\n    createAppointmentDto.userId = user.id;\n\n    this.logger.log(`Creating appointment for user ${user.id}`);\n    return this.appointmentService.create(createAppointmentDto);\n  }\n\n  @Get()\n  @UseGuards(RolesGuard)\n  @Roles('admin', 'staff', 'super_admin')\n  @ApiOperation({ summary: 'Get all appointments (Admin/Staff only)' })\n  async findAll() {\n    this.logger.log('Fetching all appointments');\n    return this.appointmentService.findAll();\n  }\n\n  @Get('mine')\n  @ApiOperation({ summary: 'Get user appointments' })\n  async findUserAppointments(@User() user: AuthenticatedUser) {\n    this.logger.log(`Fetching appointments for user ${user.id}`);\n    return this.appointmentService.findAllByUser(user.id);\n  }\n\n  @Get('stats')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles('admin', 'staff', 'super_admin')\n  async getStats() {\n    this.logger.log('Fetching appointment statistics');\n    return this.appointmentService.getAppointmentsStats();\n  }\n\n  @Get('by-date')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles('admin', 'staff', 'super_admin')\n  async getByDate(@Query('date') date: string) {\n    if (!date) {\n      throw new BadRequestException('Date parameter is required');\n    }\n    this.logger.log(`Fetching appointments for date: ${date}`);\n    return this.appointmentService.getAppointmentsByDate(date);\n  }\n\n  @Get('date-range')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles('admin', 'staff', 'super_admin')\n  async getByDateRange(\n    @Query('start') startDate: string,\n    @Query('end') endDate: string,\n  ) {\n    if (!startDate || !endDate) {\n      throw new BadRequestException(\n        'Start and end date parameters are required',\n      );\n    }\n    this.logger.log(`Fetching appointments from ${startDate} to ${endDate}`);\n    return this.appointmentService.getAppointmentsByDateRange(\n      startDate,\n      endDate,\n    );\n  }\n\n  @Get('available-slots')\n  async getAvailableSlots(@Query('date') date: string) {\n    if (!date) {\n      throw new BadRequestException('Date parameter is required');\n    }\n    this.logger.log(`Fetching available slots for date: ${date}`);\n    return this.appointmentService.getAvailableSlots(date);\n  }\n\n  @Get(':id')\n  async findOne(@Param('id') id: string) {\n    this.logger.log(`Fetching appointment with ID: ${id}`);\n    return this.appointmentService.findOne(+id);\n  }\n\n  @Get('by-number/:number')\n  async findByAppointmentNumber(@Param('number') appointmentNumber: string) {\n    this.logger.log(`Fetching appointment with number: ${appointmentNumber}`);\n    return this.appointmentService.findByAppointmentNumber(appointmentNumber);\n  }\n\n  @Patch(':id')\n  @ApiOperation({ summary: 'Update appointment' })\n  async update(\n    @Param('id') id: string,\n    @Body() updateAppointmentDto: UpdateAppointmentDto,\n    @User() user: AuthenticatedUser,\n  ) {\n    // Get the appointment to check if it belongs to the user\n    const appointment = await this.appointmentService.findOne(+id);\n\n    // If not admin and not the appointment owner, don't allow update\n    if (\n      !user.roles.some((role) => ['admin', 'staff', 'super_admin'].includes(role.name)) &&\n      appointment.userId !== user.id\n    ) {\n      throw new BadRequestException(\n        'You do not have permission to update this appointment',\n      );\n    }\n\n    this.logger.log(`Updating appointment with ID: ${id}`);\n    return this.appointmentService.update(+id, updateAppointmentDto);\n  }\n\n  @Patch(':id/status')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles('admin', 'staff', 'super_admin')\n  async updateStatus(\n    @Param('id') id: string,\n    @Body('status') status: AppointmentStatus,\n  ) {\n    if (!Object.values(AppointmentStatus).includes(status)) {\n      throw new BadRequestException(\n        `Invalid status. Must be one of: ${Object.values(AppointmentStatus).join(', ')}`,\n      );\n    }\n\n    this.logger.log(\n      `Updating status for appointment with ID: ${id} to ${status}`,\n    );\n    return this.appointmentService.updateStatus(+id, status);\n  }\n\n  @Delete(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  @ApiOperation({ summary: 'Delete appointment' })\n  async remove(@Param('id') id: string, @User() user: AuthenticatedUser) {\n    // Get the appointment to check if it belongs to the user\n    const appointment = await this.appointmentService.findOne(+id);\n\n    // If not admin and not the appointment owner, don't allow deletion\n    if (\n      !user.roles.some((role) => ['admin', 'staff', 'super_admin'].includes(role.name)) &&\n      appointment.userId !== user.id\n    ) {\n      throw new BadRequestException(\n        'You do not have permission to delete this appointment',\n      );\n    }\n\n    this.logger.log(`Deleting appointment with ID: ${id}`);\n    await this.appointmentService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppointmentModule.html":{"url":"modules/AppointmentModule.html","title":"module - AppointmentModule","body":"\n                   \n\n\n\n\n    Modules\n    AppointmentModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppointmentModule\n\n\n\ncluster_AppointmentModule_exports\n\n\n\ncluster_AppointmentModule_providers\n\n\n\n\nAppointmentService \n\nAppointmentService \n\n\n\nAppointmentModule\n\nAppointmentModule\n\nAppointmentService  -->\n\nAppointmentModule->AppointmentService \n\n\n\n\n\nAppointmentService\n\nAppointmentService\n\nAppointmentModule -->\n\nAppointmentService->AppointmentModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/appointment/appointment.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppointmentService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppointmentController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AppointmentService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AppointmentService } from './appointment.service';\nimport { AppointmentController } from './appointment.controller';\nimport { Appointment } from './entities/appointment.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Appointment])],\n  controllers: [AppointmentController],\n  providers: [AppointmentService],\n  exports: [AppointmentService],\n})\nexport class AppointmentModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppointmentService.html":{"url":"injectables/AppointmentService.html","title":"injectable - AppointmentService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppointmentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/appointment/appointment.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                checkTimeSlotAvailability\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllByUser\n                            \n                            \n                                    Async\n                                findByAppointmentNumber\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Private\n                                generateAllTimeSlots\n                            \n                            \n                                    Async\n                                getAppointmentsByDate\n                            \n                            \n                                    Async\n                                getAppointmentsByDateRange\n                            \n                            \n                                    Async\n                                getAppointmentsStats\n                            \n                            \n                                    Async\n                                getAvailableSlots\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(appointmentRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/appointment/appointment.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        appointmentRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        checkTimeSlotAvailability\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkTimeSlotAvailability(date: string, time: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:305\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                time\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createAppointmentDto: CreateAppointmentDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createAppointmentDto\n                                            \n                                                            CreateAppointmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:69\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllByUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllByUser(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByAppointmentNumber\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByAppointmentNumber(appointmentNumber: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:100\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                appointmentNumber\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:88\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        generateAllTimeSlots\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateAllTimeSlots()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:330\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     string[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAppointmentsByDate\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAppointmentsByDate(date: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:209\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAppointmentsByDateRange\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAppointmentsByDateRange(startDate: string, endDate: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:230\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                startDate\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                endDate\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAppointmentsStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAppointmentsStats()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:253\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAvailableSlots\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAvailableSlots(date: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:177\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:149\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateAppointmentDto: UpdateAppointmentDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:114\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateAppointmentDto\n                                            \n                                                            UpdateAppointmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(id: number, status: AppointmentStatus)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:162\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                status\n                                            \n                                                            AppointmentStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  BadRequestException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, Between } from 'typeorm';\nimport { Appointment, AppointmentStatus } from './entities/appointment.entity';\nimport { CreateAppointmentDto } from './dto/create-appointment.dto';\nimport { UpdateAppointmentDto } from './dto/update-appointment.dto';\nimport { format, addDays, parseISO, isValid } from 'date-fns';\n\n@Injectable()\nexport class AppointmentService {\n  constructor(\n    @InjectRepository(Appointment)\n    private appointmentRepository: Repository,\n  ) {}\n\n  async create(\n    createAppointmentDto: CreateAppointmentDto,\n  ): Promise {\n    try {\n      // Check date validity\n      const date = parseISO(createAppointmentDto.appointmentDate);\n      if (!isValid(date)) {\n        throw new BadRequestException('Invalid appointment date');\n      }\n\n      // Check if date is a weekend\n      const dayOfWeek = date.getDay();\n      if (dayOfWeek === 0 || dayOfWeek === 6) {\n        throw new BadRequestException('Cannot book appointments on weekends');\n      }\n\n      // Check if date is in the past\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      if (date  {\n    return this.appointmentRepository.find({\n      order: {\n        appointmentDate: 'ASC',\n        appointmentTime: 'ASC',\n      },\n    });\n  }\n\n  async findAllByUser(userId: number): Promise {\n    return this.appointmentRepository.find({\n      where: { userId },\n      order: {\n        appointmentDate: 'DESC',\n        appointmentTime: 'ASC',\n      },\n    });\n  }\n\n  async findOne(id: number): Promise {\n    const appointment = await this.appointmentRepository.findOne({\n      where: { id },\n    });\n\n    if (!appointment) {\n      throw new NotFoundException(`Appointment with ID ${id} not found`);\n    }\n\n    return appointment;\n  }\n\n  async findByAppointmentNumber(\n    appointmentNumber: string,\n  ): Promise {\n    const appointment = await this.appointmentRepository.findOne({\n      where: { appointmentNumber },\n    });\n\n    if (!appointment) {\n      throw new NotFoundException(`Appointment ${appointmentNumber} not found`);\n    }\n\n    return appointment;\n  }\n\n  async update(\n    id: number,\n    updateAppointmentDto: UpdateAppointmentDto,\n  ): Promise {\n    try {\n      const appointment = await this.findOne(id);\n\n      // If changing date or time, check availability\n      if (\n        updateAppointmentDto.appointmentDate ||\n        updateAppointmentDto.appointmentTime\n      ) {\n        const newDate =\n          updateAppointmentDto.appointmentDate || appointment.appointmentDate;\n        const newTime =\n          updateAppointmentDto.appointmentTime || appointment.appointmentTime;\n\n        if (\n          newDate !== appointment.appointmentDate ||\n          newTime !== appointment.appointmentTime\n        ) {\n          await this.checkTimeSlotAvailability(newDate, newTime);\n        }\n      }\n\n      // Update the appointment\n      const updated = Object.assign(appointment, updateAppointmentDto);\n      console.log(`Updated appointment ${id}:`, updated);\n      return this.appointmentRepository.save(updated);\n    } catch (error) {\n      console.error(`Error updating appointment ${id}:`, error);\n      throw error;\n    }\n  }\n\n  async remove(id: number): Promise {\n    try {\n      const result = await this.appointmentRepository.delete(id);\n      if (result.affected === 0) {\n        throw new NotFoundException(`Appointment with ID ${id} not found`);\n      }\n      console.log(`Deleted appointment ${id}`);\n    } catch (error) {\n      console.error(`Error deleting appointment ${id}:`, error);\n      throw error;\n    }\n  }\n\n  async updateStatus(\n    id: number,\n    status: AppointmentStatus,\n  ): Promise {\n    try {\n      const appointment = await this.findOne(id);\n      appointment.status = status;\n      console.log(`Updated status for appointment ${id} to ${status}`);\n      return this.appointmentRepository.save(appointment);\n    } catch (error) {\n      console.error(`Error updating status for appointment ${id}:`, error);\n      throw error;\n    }\n  }\n\n  async getAvailableSlots(date: string): Promise {\n    try {\n      // Parse the date\n      const parsedDate = parseISO(date);\n      if (!isValid(parsedDate)) {\n        throw new BadRequestException('Invalid date format');\n      }\n\n      // Get all appointments for the specified date\n      const existingAppointments = await this.appointmentRepository.find({\n        where: {\n          appointmentDate: date,\n          status: AppointmentStatus.PENDING || AppointmentStatus.CONFIRMED,\n        },\n        select: ['appointmentTime'],\n      });\n\n      const bookedSlots = existingAppointments.map(\n        (app) => app.appointmentTime,\n      );\n\n      // Generate all time slots (8:00 AM - 5:00 PM with 30min intervals)\n      const allTimeSlots = this.generateAllTimeSlots();\n\n      // Return only available slots\n      return allTimeSlots.filter((slot) => !bookedSlots.includes(slot));\n    } catch (error) {\n      console.error(`Error getting available slots for date ${date}:`, error);\n      throw error;\n    }\n  }\n\n  async getAppointmentsByDate(date: string): Promise {\n    try {\n      const parsedDate = parseISO(date);\n      if (!isValid(parsedDate)) {\n        throw new BadRequestException('Invalid date format');\n      }\n\n      return this.appointmentRepository.find({\n        where: {\n          appointmentDate: date,\n        },\n        order: {\n          appointmentTime: 'ASC',\n        },\n      });\n    } catch (error) {\n      console.error(`Error getting appointments for date ${date}:`, error);\n      throw error;\n    }\n  }\n\n  async getAppointmentsByDateRange(\n    startDate: string,\n    endDate: string,\n  ): Promise {\n    try {\n      return this.appointmentRepository.find({\n        where: {\n          appointmentDate: Between(startDate, endDate),\n        },\n        order: {\n          appointmentDate: 'ASC',\n          appointmentTime: 'ASC',\n        },\n      });\n    } catch (error) {\n      console.error(\n        `Error getting appointments in range ${startDate} to ${endDate}:`,\n        error,\n      );\n      throw error;\n    }\n  }\n\n  async getAppointmentsStats() {\n    try {\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n\n      const tomorrow = addDays(today, 1);\n      tomorrow.setHours(0, 0, 0, 0);\n\n      // Get counts for different statuses\n      const [\n        pendingCount,\n        confirmedCount,\n        completedCount,\n        cancelledCount,\n        totalCount,\n      ] = await Promise.all([\n        this.appointmentRepository.count({\n          where: { status: AppointmentStatus.PENDING },\n        }),\n        this.appointmentRepository.count({\n          where: { status: AppointmentStatus.CONFIRMED },\n        }),\n        this.appointmentRepository.count({\n          where: { status: AppointmentStatus.COMPLETED },\n        }),\n        this.appointmentRepository.count({\n          where: { status: AppointmentStatus.CANCELLED },\n        }),\n        this.appointmentRepository.count(),\n      ]);\n\n      // Get today's appointments\n      const todayAppointments = await this.appointmentRepository.count({\n        where: {\n          appointmentDate: format(today, 'yyyy-MM-dd'),\n        },\n      });\n\n      return {\n        pending: pendingCount,\n        confirmed: confirmedCount,\n        completed: completedCount,\n        cancelled: cancelledCount,\n        total: totalCount,\n        today: todayAppointments,\n      };\n    } catch (error) {\n      console.error('Error getting appointment stats:', error);\n      throw error;\n    }\n  }\n\n  private async checkTimeSlotAvailability(\n    date: string,\n    time: string,\n  ): Promise {\n    try {\n      // Check if time slot is already booked\n      const existingAppointment = await this.appointmentRepository.findOne({\n        where: {\n          appointmentDate: date,\n          appointmentTime: time,\n          status: AppointmentStatus.PENDING || AppointmentStatus.CONFIRMED,\n        },\n      });\n\n      if (existingAppointment) {\n        throw new BadRequestException('This time slot is already booked');\n      }\n    } catch (error) {\n      console.error(\n        `Error checking time slot availability for ${date} at ${time}:`,\n        error,\n      );\n      throw error;\n    }\n  }\n  private generateAllTimeSlots(): string[] {\n    const slots: string[] = [];\n    let hour = 8;\n    let minute = 0;\n\n    while (hour \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                adminUpdateUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                getProfile\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                register\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                updateProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        adminUpdateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    adminUpdateUser(req: RequestWithUser, targetUserId: string, updateUserDto: AdminUpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Admin update user', description: 'Allows administrators to update any user's information including role assignments'})@ApiParam({name: 'userId', description: 'ID of the user to update'})@ApiBody({type: AdminUpdateUserDto})@ApiResponse({status: 200, description: 'User successfully updated'})@ApiResponse({status: 400, description: 'Bad request - invalid input data'})@ApiResponse({status: 401, description: 'Unauthorized - invalid credentials'})@ApiResponse({status: 403, description: 'Forbidden - insufficient permissions'})@ApiResponse({status: 404, description: 'Not found - user or role not found'})@ApiResponse({status: 409, description: 'Conflict - email or username already exists'})@ApiBearerAuth('JWT-auth')@UseGuards(JwtAuthGuard, RolesGuard)@Roles('admin', 'super_admin')@Post('admin/update-user/:userId')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:183\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestWithUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                targetUserId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            AdminUpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(req: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get user profile'})@ApiResponse({status: 200, description: 'Profile retrieved successfully'})@ApiResponse({status: 401, description: 'Unauthorized'})@ApiBearerAuth('JWT-auth')@UseGuards(JwtAuthGuard)@Get('profile')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:112\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestWithUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'User login'})@ApiResponse({status: 200, description: 'Login successful', schema: undefined})@ApiResponse({status: 401, description: 'Unauthorized - invalid credentials'})@ApiBody({type: LoginDto})@Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(registerDto: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'User registration'})@ApiResponse({status: 201, description: 'Registration successful', schema: undefined})@ApiResponse({status: 400, description: 'Bad request - invalid data'})@ApiResponse({status: 409, description: 'Conflict - email or username already exists'})@ApiBody({type: RegisterDto})@Post('register')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:102\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                registerDto\n                                            \n                                                            RegisterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        updateProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProfile(req: RequestWithUser, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update user profile', description: 'Allows a user to update their own profile information'})@ApiResponse({status: 200, description: 'Profile updated successfully'})@ApiResponse({status: 400, description: 'Bad request - invalid data'})@ApiResponse({status: 401, description: 'Unauthorized'})@ApiResponse({status: 409, description: 'Conflict - email or username already exists'})@ApiBearerAuth('JWT-auth')@ApiBody({type: UpdateUserDto})@UseGuards(JwtAuthGuard)@Post('update-profile')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:134\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestWithUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  Get,\n  UseGuards,\n  Request,\n  UnauthorizedException,\n  Param,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\nimport { UpdateUserDto, AdminUpdateUserDto } from './dto/update-user.dto';\nimport { Roles } from './decorators/roles.decorator';\nimport { RolesGuard } from './guards/roles.guard';\nimport { AuthenticatedUser } from './jwt.strategy';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n  ApiParam,\n  ApiBody,\n} from '@nestjs/swagger';\n\ninterface RequestWithUser extends Request {\n  user: AuthenticatedUser;\n}\n\n@ApiTags('Authentication')\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @ApiOperation({ summary: 'User login' })\n  @ApiResponse({\n    status: 200,\n    description: 'Login successful',\n    schema: {\n      properties: {\n        access_token: { type: 'string' },\n        user: {\n          type: 'object',\n          properties: {\n            id: { type: 'number' },\n            email: { type: 'string' },\n            username: { type: 'string' },\n            roles: { type: 'array', items: { type: 'string' } },\n            defaultRole: { type: 'string' },\n          },\n        },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Unauthorized - invalid credentials',\n  })\n  @ApiBody({ type: LoginDto })\n  @Post('login')\n  async login(@Body() loginDto: LoginDto) {\n    console.log('Login request received:', loginDto);\n    try {\n      const result = await this.authService.login(loginDto);\n      return result;\n    } catch (error) {\n      throw new UnauthorizedException(\n        error instanceof Error ? error.message : 'Invalid credentials',\n      );\n    }\n  }\n\n  @ApiOperation({ summary: 'User registration' })\n  @ApiResponse({\n    status: 201,\n    description: 'Registration successful',\n    schema: {\n      properties: {\n        access_token: { type: 'string' },\n        user: {\n          type: 'object',\n          properties: {\n            id: { type: 'number' },\n            email: { type: 'string' },\n            username: { type: 'string' },\n            roles: { type: 'array', items: { type: 'string' } },\n            defaultRole: { type: 'string' },\n          },\n        },\n      },\n    },\n  })\n  @ApiResponse({ status: 400, description: 'Bad request - invalid data' })\n  @ApiResponse({\n    status: 409,\n    description: 'Conflict - email or username already exists',\n  })\n  @ApiBody({ type: RegisterDto })\n  @Post('register')\n  async register(@Body() registerDto: RegisterDto) {\n    console.log('Register endpoint hit with data:', registerDto); //Debugging Statement\n    return this.authService.register(registerDto);\n  }\n  @ApiOperation({ summary: 'Get user profile' })\n  @ApiResponse({ status: 200, description: 'Profile retrieved successfully' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @ApiBearerAuth('JWT-auth')\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  getProfile(@Request() req: RequestWithUser) {\n    // Add null check before converting to number\n    if (!req.user || req.user.id === undefined || req.user.id === null) {\n      throw new UnauthorizedException('Invalid user ID');\n    }\n    return this.authService.getProfile(Number(req.user.id));\n  }\n  @ApiOperation({\n    summary: 'Update user profile',\n    description: 'Allows a user to update their own profile information',\n  })\n  @ApiResponse({ status: 200, description: 'Profile updated successfully' })\n  @ApiResponse({ status: 400, description: 'Bad request - invalid data' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @ApiResponse({\n    status: 409,\n    description: 'Conflict - email or username already exists',\n  })\n  @ApiBearerAuth('JWT-auth')\n  @ApiBody({ type: UpdateUserDto })\n  @UseGuards(JwtAuthGuard)\n  @Post('update-profile')\n  async updateProfile(\n    @Request() req: RequestWithUser,\n    @Body() updateUserDto: UpdateUserDto,\n  ) {\n    // Add null check before converting to number\n    if (!req.user || req.user.id === undefined || req.user.id === null) {\n      throw new UnauthorizedException('Invalid user ID');\n    }\n\n    try {\n      return await this.authService.updateUserInfo(\n        Number(req.user.id),\n        updateUserDto,\n      );\n    } catch (error) {\n      throw new UnauthorizedException(\n        error instanceof Error ? error.message : 'Failed to update profile',\n      );\n    }\n  }\n  @ApiOperation({\n    summary: 'Admin update user',\n    description:\n      \"Allows administrators to update any user's information including role assignments\",\n  })\n  @ApiParam({ name: 'userId', description: 'ID of the user to update' })\n  @ApiBody({ type: AdminUpdateUserDto })\n  @ApiResponse({ status: 200, description: 'User successfully updated' })\n  @ApiResponse({ status: 400, description: 'Bad request - invalid input data' })\n  @ApiResponse({\n    status: 401,\n    description: 'Unauthorized - invalid credentials',\n  })\n  @ApiResponse({\n    status: 403,\n    description: 'Forbidden - insufficient permissions',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Not found - user or role not found',\n  })\n  @ApiResponse({\n    status: 409,\n    description: 'Conflict - email or username already exists',\n  })\n  @ApiBearerAuth('JWT-auth')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles('admin', 'super_admin')\n  @Post('admin/update-user/:userId')\n  async adminUpdateUser(\n    @Request() req: RequestWithUser,\n    @Param('userId') targetUserId: string,\n    @Body() updateUserDto: AdminUpdateUserDto,\n  ) {\n    // Add null check before converting to number\n    if (!req.user || req.user.id === undefined || req.user.id === null) {\n      throw new UnauthorizedException('Invalid admin ID');\n    }\n\n    try {\n      return await this.authService.adminUpdateUser(\n        Number(req.user.id),\n        Number(targetUserId),\n        updateUserDto,\n      );\n    } catch (error) {\n      throw new UnauthorizedException(\n        error instanceof Error ? error.message : 'Failed to update user',\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nRolesModule\n\nRolesModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nRolesModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RolesModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from '../users/entities/user.entity';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { JwtStrategy } from './jwt.strategy';\nimport { ConfigService } from '@nestjs/config';\nimport { RolesModule } from '../roles/roles.module';\n\n@Module({\n  imports: [\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.registerAsync({\n      inject: [ConfigService],\n      useFactory: (config: ConfigService) => {\n        return {\n          secret: config.get('JWT_SECRET'),\n          signOptions: { expiresIn: '1d' },\n        };\n      },\n    }),\n    TypeOrmModule.forFeature([User]),\n    RolesModule,\n  ],\n  providers: [AuthService, JwtStrategy],\n  controllers: [AuthController],\n  exports: [AuthService, JwtStrategy, PassportModule],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                adminUpdateUser\n                            \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Private\n                                isValidEmail\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                updateUserInfo\n                            \n                            \n                                    Private\n                                validatePasswordStrength\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, jwtService: JwtService, rolesService: RolesService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        rolesService\n                                                  \n                                                        \n                                                                        RolesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        adminUpdateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    adminUpdateUser(adminId: number, targetUserId: number, updateUserDto: AdminUpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:383\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                adminId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                targetUserId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            AdminUpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:211\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isValidEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    isValidEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:206\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(registerDto: RegisterDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:104\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                registerDto\n                                            \n                                                            RegisterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateUserInfo\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUserInfo(userId: number, updateUserDto: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:239\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        validatePasswordStrength\n                        \n                    \n                \n            \n            \n                \n                        \n                    validatePasswordStrength(password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:538\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(loginDto: LoginDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  UnauthorizedException,\n  ConflictException,\n  BadRequestException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from '../users/entities/user.entity';\nimport * as bcrypt from 'bcrypt';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { RolesService } from '../roles/roles.service';\nimport { UpdateUserDto, AdminUpdateUserDto } from './dto/update-user.dto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n    private jwtService: JwtService,\n    private rolesService: RolesService,\n  ) {}\n\n  async validateUser(loginDto: LoginDto): Promise {\n    const user = await this.usersRepository.findOne({\n      where: [\n        { email: loginDto.emailOrUsername },\n        { username: loginDto.emailOrUsername },\n      ],\n    });\n    if (user && (await bcrypt.compare(loginDto.password, user.password))) {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { password: __password, ...result } = user;\n      return result;\n    }\n    return null;\n  }\n\n  async login(loginDto: LoginDto) {\n    console.log('Login attempt with:', loginDto);\n\n    try {\n      const user = await this.usersRepository.findOne({\n        where: [\n          { email: loginDto.emailOrUsername },\n          { username: loginDto.emailOrUsername },\n        ],\n        relations: ['defaultRole'],\n      });\n\n      console.log('User found:', user ? 'Yes' : 'No');\n\n      if (!user) {\n        throw new UnauthorizedException('Invalid email or password');\n      }\n\n      // Debug password check\n      console.log('Stored password hash:', user.password);\n      console.log('Comparing with:', loginDto.password);\n\n      const isPasswordValid = await bcrypt.compare(\n        loginDto.password,\n        user.password,\n      );\n      console.log('Password valid:', isPasswordValid);\n\n      if (!isPasswordValid) {\n        throw new UnauthorizedException('Invalid email or password');\n      }\n\n      // Get user roles\n      const roles = await this.rolesService.getUserRoles(user.id);\n      const roleNames = roles.map((role) => role.name);\n\n      const payload = {\n        sub: user.id,\n        email: user.email,\n        roles: roleNames,\n      };\n\n      const token = this.jwtService.sign(payload);\n      console.log('Generated token:', token ? 'Success' : 'Failed');\n\n      // Remove password from response\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { password: __password, ...userWithoutPassword } = user;\n\n      return {\n        access_token: token,\n        user: {\n          ...userWithoutPassword,\n          roles: roleNames,\n          defaultRole: user.defaultRole?.name || 'citizen',\n        },\n      };\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  }\n\n  async register(registerDto: RegisterDto) {\n    const {\n      email,\n      username,\n      password,\n      firstName,\n      middleName,\n      lastName,\n      nameExtension,\n      contactNumber,\n    } = registerDto;\n\n    // Generate full name\n    const name = `${firstName} ${middleName ? middleName + ' ' : ''}${lastName}${nameExtension ? ' ' + nameExtension : ''}`;\n\n    // Validate email format\n    if (!this.isValidEmail(email)) {\n      throw new BadRequestException('Invalid email format');\n    }\n\n    // Check if user exists by email\n    const existingUserByEmail = await this.usersRepository.findOne({\n      where: { email },\n    });\n    if (existingUserByEmail) {\n      throw new ConflictException('Email already exists');\n    }\n\n    // Check if username is taken\n    if (username) {\n      const existingUserByUsername = await this.usersRepository.findOne({\n        where: { username },\n      });\n      if (existingUserByUsername) {\n        throw new ConflictException('Username already exists');\n      }\n    }\n\n    // Validate password strength\n    const passwordValidation = this.validatePasswordStrength(password);\n    if (!passwordValidation.isValid) {\n      throw new BadRequestException(passwordValidation.message);\n    }\n\n    // Hash password\n    const salt = await bcrypt.genSalt();\n    const hashedPassword = await bcrypt.hash(password, salt);\n\n    try {\n      // Create new user with all fields\n      const user = this.usersRepository.create({\n        email,\n        username,\n        password: hashedPassword,\n        firstName,\n        middleName,\n        lastName,\n        nameExtension,\n        contactNumber,\n        name,\n      });\n\n      await this.usersRepository.save(user);\n\n      // Add citizen role to the user\n      try {\n        const citizenRole = await this.rolesService.findByName('citizen');\n        await this.rolesService.assignRolesToUser(user.id, [citizenRole.id]);\n\n        // Set default role\n        user.defaultRoleId = citizenRole.id;\n        await this.usersRepository.save(user);\n      } catch (error) {\n        console.error('Error assigning citizen role:', error);\n        // Rollback: Delete the user to maintain a consistent state\n        await this.usersRepository.delete(user.id);\n        throw new ConflictException(\n          'Failed to assign citizen role. Registration rolled back.',\n        );\n      }\n\n      // Generate JWT token\n      const payload = { sub: user.id, email: user.email, roles: ['citizen'] };\n\n      // Remove password from response\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { password: __password, ...userWithoutPassword } = user;\n\n      return {\n        access_token: this.jwtService.sign(payload),\n        user: {\n          ...userWithoutPassword,\n          roles: ['citizen'],\n          defaultRole: 'citizen',\n        },\n      };\n    } catch (error) {\n      console.error('Registration error:', error);\n      throw error;\n    }\n  }\n\n  private isValidEmail(email: string): boolean {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  }\n\n  async getProfile(userId: number) {\n    // Validation for userId\n    if (!userId || isNaN(userId)) {\n      throw new UnauthorizedException('Invalid user ID');\n    }\n\n    const user = await this.usersRepository.findOne({\n      where: { id: userId },\n      relations: ['defaultRole'],\n    });\n    if (!user) {\n      throw new UnauthorizedException('User not found');\n    }\n\n    // Get user roles\n    const roles = await this.rolesService.getUserRoles(userId);\n    const roleNames = roles.map((role) => role.name);\n\n    // Remove password from response\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { password: __password, ...result } = user;\n    return {\n      ...result,\n      roles: roleNames,\n      defaultRole: user.defaultRole?.name || 'citizen',\n    };\n  }\n\n  async updateUserInfo(userId: number, updateUserDto: UpdateUserDto) {\n    try {\n      // First get the existing user\n      const user = await this.usersRepository.findOne({\n        where: { id: userId },\n      });\n\n      if (!user) {\n        throw new UnauthorizedException('User not found');\n      }\n\n      // Check if email is being updated and not already taken\n      if (updateUserDto.email && updateUserDto.email !== user.email) {\n        // Validate email format\n        if (!this.isValidEmail(updateUserDto.email)) {\n          throw new BadRequestException('Invalid email format');\n        }\n\n        const existingUserByEmail = await this.usersRepository.findOne({\n          where: { email: updateUserDto.email },\n        });\n\n        if (existingUserByEmail && existingUserByEmail.id !== userId) {\n          throw new ConflictException('Email already exists');\n        }\n      }\n\n      // Check if username is being updated and not already taken\n      if (updateUserDto.username && updateUserDto.username !== user.username) {\n        const existingUserByUsername = await this.usersRepository.findOne({\n          where: { username: updateUserDto.username },\n        });\n\n        if (existingUserByUsername && existingUserByUsername.id !== userId) {\n          throw new ConflictException('Username already exists');\n        }\n      }\n\n      // Handle password change if provided\n      if (updateUserDto.password) {\n        // Validate password strength\n        const passwordValidation = this.validatePasswordStrength(updateUserDto.password);\n        if (!passwordValidation.isValid) {\n          throw new BadRequestException(passwordValidation.message);\n        }\n\n        // Hash new password\n        const salt = await bcrypt.genSalt();\n        const hashedPassword = await bcrypt.hash(updateUserDto.password, salt);\n        updateUserDto.password = hashedPassword;\n      } else {\n        // Remove password from DTO if not being updated\n        delete updateUserDto.password;\n      }\n\n      // Update name if name parts are changed\n      let shouldUpdateName = false;\n      const nameComponents = {\n        firstName: updateUserDto.firstName || user.firstName,\n        middleName:\n          updateUserDto.middleName !== undefined\n            ? updateUserDto.middleName\n            : user.middleName,\n        lastName: updateUserDto.lastName || user.lastName,\n        nameExtension:\n          updateUserDto.nameExtension !== undefined\n            ? updateUserDto.nameExtension\n            : user.nameExtension,\n      };\n\n      if (\n        updateUserDto.firstName ||\n        updateUserDto.middleName !== undefined ||\n        updateUserDto.lastName ||\n        updateUserDto.nameExtension !== undefined\n      ) {\n        shouldUpdateName = true;\n      }\n\n      // Generate full name if any name component changed\n      if (shouldUpdateName) {\n        const fullName = `${nameComponents.firstName} ${\n          nameComponents.middleName ? nameComponents.middleName + ' ' : ''\n        }${nameComponents.lastName}${\n          nameComponents.nameExtension ? ' ' + nameComponents.nameExtension : ''\n        }`;\n        updateUserDto['name'] = fullName;\n      }\n\n      try {\n        // Update user with all provided fields\n        await this.usersRepository.update(userId, updateUserDto);\n\n        // Get updated user with relations\n        const updatedUser = await this.usersRepository.findOne({\n          where: { id: userId },\n          relations: ['defaultRole'],\n        });\n\n        if (!updatedUser) {\n          throw new BadRequestException('Failed to retrieve updated user');\n        }\n\n        // Get user roles\n        const roles = await this.rolesService.getUserRoles(userId);\n        const roleNames = roles.map((role) => role.name);\n\n        // Remove password from response\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { password: __password, ...result } = updatedUser;\n\n        return {\n          ...result,\n          roles: roleNames,\n          defaultRole: updatedUser.defaultRole?.name || 'citizen',\n        };\n      } catch (error: unknown) {\n        console.error('User update database error:', error);\n        if (\n          typeof error === 'object' &&\n          error !== null &&\n          'code' in error &&\n          error.code === 'ER_DUP_ENTRY'\n        ) {\n          throw new ConflictException('Email or username already exists');\n        }\n        throw new BadRequestException(\n          'Failed to update user information in database',\n        );\n      }\n    } catch (error) {\n      console.error('User update error:', error);\n      // Re-throw specific errors\n      if (\n        error instanceof UnauthorizedException ||\n        error instanceof BadRequestException ||\n        error instanceof ConflictException\n      ) {\n        throw error;\n      }\n      // For any other unexpected error\n      throw new BadRequestException('Failed to update user information');\n    }\n  }\n  async adminUpdateUser(\n    adminId: number,\n    targetUserId: number,\n    updateUserDto: AdminUpdateUserDto,\n  ) {\n    console.log(\n      `Admin ${adminId} attempting to update user ${targetUserId}`,\n      updateUserDto,\n    );\n\n    try {\n      // Verify the admin has proper permissions\n      const admin = await this.usersRepository.findOne({\n        where: { id: adminId },\n      });\n\n      if (!admin) {\n        throw new UnauthorizedException('Admin not found');\n      }\n\n      // Get admin roles\n      const adminRoles = await this.rolesService.getUserRoles(adminId);\n      const adminRoleNames = adminRoles.map((role) => role.name);\n\n      // Check if the user has admin or super_admin role\n      const isAuthorized = adminRoleNames.some(\n        (role) => role === 'admin' || role === 'super_admin',\n      );\n\n      if (!isAuthorized) {\n        throw new UnauthorizedException('Insufficient permissions');\n      }\n\n      // Check if target user exists\n      const targetUser = await this.usersRepository.findOne({\n        where: { id: targetUserId },\n      });\n\n      if (!targetUser) {\n        throw new BadRequestException(`User with ID ${targetUserId} not found`);\n      }\n\n      // First perform the basic user update\n      // We'll catch any errors here to handle them appropriately\n      try {\n        await this.updateUserInfo(targetUserId, updateUserDto);\n      } catch (err) {\n        console.error('Error during basic user update:', err);\n        throw err; // Re-throw to be caught by outer try-catch\n      }\n\n      // Handle role updates if provided\n      if (updateUserDto.roleIds && updateUserDto.roleIds.length > 0) {\n        try {\n          // Verify all roles exist before assigning\n          for (const roleId of updateUserDto.roleIds) {\n            try {\n              await this.rolesService.findOne(roleId);\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            } catch (_) {\n              throw new BadRequestException(`Role with ID ${roleId} not found`);\n            }\n          }\n\n          // Assign roles\n          await this.rolesService.assignRolesToUser(\n            targetUserId,\n            updateUserDto.roleIds,\n          );\n          console.log(\n            `Assigned roles ${updateUserDto.roleIds.join(', ')} to user ${targetUserId}`,\n          );\n        } catch (error) {\n          console.error('Error assigning roles:', error);\n          throw new BadRequestException(\n            error instanceof Error ? error.message : 'Failed to assign roles',\n          );\n        }\n      }\n\n      // Update default role if provided\n      if (updateUserDto.defaultRoleId) {\n        try {\n          // Verify the role exists\n          try {\n            await this.rolesService.findOne(updateUserDto.defaultRoleId);\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          } catch (_) {\n            throw new BadRequestException(\n              `Default role with ID ${updateUserDto.defaultRoleId} not found`,\n            );\n          }\n\n          // Verify user has this role assigned or will have it assigned\n          const userRoles = await this.rolesService.getUserRoles(targetUserId);\n          const hasRoleAssigned = userRoles.some(\n            (role) => role.id === updateUserDto.defaultRoleId,\n          );\n\n          const willBeAssigned =\n            updateUserDto.roleIds &&\n            updateUserDto.roleIds.includes(updateUserDto.defaultRoleId);\n\n          if (!hasRoleAssigned && !willBeAssigned) {\n            throw new BadRequestException(\n              'Cannot set default role to a role the user does not have',\n            );\n          }\n\n          // Update the default role\n          await this.usersRepository.update(targetUserId, {\n            defaultRoleId: updateUserDto.defaultRoleId,\n          });\n          console.log(\n            `Updated default role to ${updateUserDto.defaultRoleId} for user ${targetUserId}`,\n          );\n        } catch (error) {\n          console.error('Error updating default role:', error);\n          throw new BadRequestException(\n            error instanceof Error\n              ? error.message\n              : 'Failed to update default role',\n          );\n        }\n      }\n\n      // Return the fully updated user\n      try {\n        const updatedUser = await this.getProfile(targetUserId);\n        return updatedUser;\n      } catch (error) {\n        console.error('Error retrieving updated user profile:', error);\n        throw new BadRequestException(\n          'User was updated but profile could not be retrieved',\n        );\n      }\n    } catch (error) {\n      console.error('Admin update user error:', error);\n\n      // Re-throw specific exceptions\n      if (\n        error instanceof UnauthorizedException ||\n        error instanceof BadRequestException ||\n        error instanceof ConflictException\n      ) {\n        throw error;\n      }\n\n      // For any other errors\n      throw new BadRequestException(\n        'Failed to update user: Unexpected error occurred',\n      );\n    }\n  }\n\n  private validatePasswordStrength(password: string): { isValid: boolean; message?: string } {\n    if (!password) {\n      return { isValid: false, message: 'Password is required' };\n    }\n\n    if (password.length ]/.test(password);\n\n    if (!hasUpperCase) {\n      return { isValid: false, message: 'Password must contain at least one uppercase letter' };\n    }\n\n    if (!hasLowerCase) {\n      return { isValid: false, message: 'Password must contain at least one lowercase letter' };\n    }\n\n    if (!hasNumbers) {\n      return { isValid: false, message: 'Password must contain at least one number' };\n    }\n\n    if (!hasSpecialChars) {\n      return { isValid: false, message: 'Password must contain at least one special character (!@#$%^&*(),.?\":{}|<>)' };\n    }\n\n    return { isValid: true };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthenticatedUser.html":{"url":"interfaces/AuthenticatedUser.html","title":"interface - AuthenticatedUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AuthenticatedUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            roles\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        roles:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\n\ninterface JwtPayload {\n  sub: number;\n  email: string;\n  roles?: string[];\n}\n\n// Strategy for validating JWT tokens in NestJS\nexport interface AuthenticatedUser {\n  id: number;\n  email: string;\n  roles: Array;\n}\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private configService: ConfigService) {\n    const secretKey = configService.get('JWT_SECRET');\n\n    if (!secretKey) {\n      throw new Error('JWT_SECRET is not defined in environment variables');\n    }\n\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: secretKey,\n    });\n  }\n\n  validate(payload: JwtPayload): AuthenticatedUser {\n    // Validation for the payload\n    if (!payload || payload.sub === undefined || isNaN(Number(payload.sub))) {\n      throw new UnauthorizedException('Invalid token payload');\n    }\n\n    const userId = Number(payload.sub);\n    const email = String(payload.email || '');\n    const roles = Array.isArray(payload.roles)\n      ? payload.roles.map((role) => ({ name: role }))\n      : [];\n\n    return {\n      id: userId,\n      email,\n      roles,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Counter.html":{"url":"entities/Counter.html","title":"entity - Counter","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Counter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/counter/entities/counter.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                currentQueue\n                            \n                            \n                                    \n                                currentQueueId\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        currentQueue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Queue | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, queue => queue.counter, {nullable: true})@JoinColumn({name: 'current_queue_id', foreignKeyConstraintName: 'fk_current_queue'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        currentQueueId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'current_queue_id', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CounterStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: CounterStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:28\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  OneToOne,\n  JoinColumn,\n} from 'typeorm';\nimport { Queue } from '../../queue/entities/queue.entity';\n\nexport enum CounterStatus {\n  ACTIVE = 'active',\n  INACTIVE = 'inactive',\n}\n\n@Entity('counters')\nexport class Counter {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  name: string;\n\n  @Column({\n    type: 'enum',\n    enum: CounterStatus,\n    default: CounterStatus.ACTIVE,\n  })\n  status: CounterStatus;\n\n  @Column({ name: 'current_queue_id', nullable: true })\n  currentQueueId: number | null;\n\n  @OneToOne(() => Queue, (queue) => queue.counter, { nullable: true })\n  @JoinColumn({\n    name: 'current_queue_id',\n    foreignKeyConstraintName: 'fk_current_queue',\n  })\n  currentQueue: Queue | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAnnouncementDto.html":{"url":"classes/CreateAnnouncementDto.html","title":"class - CreateAnnouncementDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAnnouncementDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/announcement/dto/create-announcement.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                createdBy\n                            \n                            \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                image\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                isActive\n                            \n                            \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        createdBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/dto/create-announcement.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/dto/create-announcement.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/dto/create-announcement.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/dto/create-announcement.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/dto/create-announcement.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsOptional, IsBoolean } from 'class-validator';\n\nexport class CreateAnnouncementDto {\n  @IsString()\n  @IsNotEmpty()\n  title: string;\n\n  @IsString()\n  @IsNotEmpty()\n  description: string;\n\n  @IsOptional()\n  @IsString()\n  image?: string;\n\n  @IsOptional()\n  @IsString()\n  createdBy?: string;\n\n  @IsOptional()\n  @IsBoolean()\n  isActive?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAppointmentDto.html":{"url":"classes/CreateAppointmentDto.html","title":"class - CreateAppointmentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAppointmentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/appointment/dto/create-appointment.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                address\n                            \n                            \n                                    \n                                    \n                                appointmentDate\n                            \n                            \n                                    \n                                    \n                                appointmentTime\n                            \n                            \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    Optional\n                                isGuest\n                            \n                            \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                middleInitial\n                            \n                            \n                                    \n                                    \n                                phoneNumber\n                            \n                            \n                                    \n                                    \n                                reasonOfVisit\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                            \n                                    \n                                    Optional\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        appointmentDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        appointmentTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        isGuest\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        middleInitial\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        reasonOfVisit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AppointmentStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEnum(AppointmentStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:48\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsNotEmpty,\n  IsString,\n  IsOptional,\n  IsEnum,\n  IsDateString,\n} from 'class-validator';\nimport { AppointmentStatus } from '../entities/appointment.entity';\n\nexport class CreateAppointmentDto {\n  @IsNotEmpty()\n  @IsString()\n  firstName: string;\n\n  @IsNotEmpty()\n  @IsString()\n  lastName: string;\n\n  @IsOptional()\n  @IsString()\n  middleInitial: string;\n\n  @IsNotEmpty()\n  @IsString()\n  address: string;\n\n  @IsNotEmpty()\n  @IsString()\n  phoneNumber: string;\n\n  @IsNotEmpty()\n  @IsString()\n  reasonOfVisit: string;\n\n  @IsNotEmpty()\n  @IsDateString()\n  appointmentDate: string;\n\n  @IsNotEmpty()\n  @IsString()\n  appointmentTime: string;\n\n  @IsOptional()\n  @IsEnum(AppointmentStatus)\n  status?: AppointmentStatus;\n\n  @IsOptional()\n  userId?: number;\n\n  @IsOptional()\n  isGuest?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateDocumentApplicationDto.html":{"url":"classes/CreateDocumentApplicationDto.html","title":"class - CreateDocumentApplicationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateDocumentApplicationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/document-applications/dto/create-document-application.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                applicationSubtype\n                            \n                            \n                                    \n                                    \n                                applicationType\n                            \n                            \n                                    \n                                    \n                                formData\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                statusMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        applicationSubtype\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Application subtype (optional)', example: 'Copy of Birth Certificate', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/dto/create-document-application.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        applicationType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ApplicationType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: ApplicationType, description: 'Type of document application', example: undefined})@IsEnum(ApplicationType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/dto/create-document-application.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        formData\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Form data containing all application details', example: undefined})@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/dto/create-document-application.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        statusMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Optional status message', example: 'Initial application submission', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/dto/create-document-application.dto.ts:42\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsOptional, IsObject, IsString } from 'class-validator';\nimport { ApplicationType } from '../entities/document-application.entity';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateDocumentApplicationDto {\n  @ApiProperty({\n    enum: ApplicationType,\n    description: 'Type of document application',\n    example: ApplicationType.BIRTH_CERTIFICATE,\n  })\n  @IsEnum(ApplicationType)\n  applicationType: ApplicationType;\n\n  @ApiProperty({\n    description: 'Application subtype (optional)',\n    example: 'Copy of Birth Certificate',\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  applicationSubtype?: string;\n\n  @ApiProperty({\n    description: 'Form data containing all application details',\n    example: {\n      firstName: 'Juan',\n      lastName: 'Dela Cruz',\n      birthDate: '1990-01-01',\n      birthPlace: 'Manila',\n    },\n  })\n  @IsObject()\n  formData: Record;\n\n  @ApiProperty({\n    description: 'Optional status message',\n    example: 'Initial application submission',\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  statusMessage?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateQueueDto.html":{"url":"classes/CreateQueueDto.html","title":"class - CreateQueueDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateQueueDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/dto/create-queue.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                    \n                                    \n                                appointmentType\n                            \n                            \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                isGuest\n                            \n                            \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                middleInitial\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                phoneNumber\n                            \n                            \n                                    \n                                    \n                                reasonOfVisit\n                            \n                            \n                                    \n                                    Optional\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        appointmentType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        isGuest\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        middleInitial\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        reasonOfVisit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsOptional, IsNotEmpty, IsBoolean } from 'class-validator';\n\nexport class CreateQueueDto {\n  @IsOptional()\n  userId?: number | string;\n\n  @IsString()\n  @IsNotEmpty()\n  firstName: string;\n\n  @IsString()\n  @IsNotEmpty()\n  lastName: string;\n\n  @IsString()\n  @IsOptional()\n  middleInitial?: string;\n\n  @IsString()\n  @IsOptional()\n  address?: string;\n\n  @IsString()\n  @IsOptional()\n  phoneNumber?: string;\n\n  @IsString()\n  @IsNotEmpty()\n  reasonOfVisit: string;\n\n  @IsString()\n  @IsNotEmpty()\n  appointmentType: string;\n\n  @IsBoolean()\n  @IsOptional()\n  isGuest?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                contactNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                defaultRoleId\n                            \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                middleName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                nameExtension\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                roleIds\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        contactNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: '+639123456789', description: 'Contact number'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        defaultRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 4, description: 'Default role ID for the user'})@IsOptional()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:102\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'john.doe@example.com', description: 'User email address'})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'John', description: 'User first name'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Doe', description: 'User last name'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'Miguel', description: 'User middle name (optional)'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'John Miguel Doe Jr.', description: 'Full name (auto-generated if not provided)'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        nameExtension\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'Jr.', description: 'Name extension (e.g., Jr., Sr., III)'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'password123', description: 'User password (minimum 6 characters)', minLength: 6})@IsString()@MinLength(6)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        roleIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: undefined, description: 'Array of role IDs to assign to the user', type: undefined})@IsOptional()@IsArray()@IsNumber({}, {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'johndoe', description: 'Username (optional, will use email if not provided)'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsString,\n  IsOptional,\n  MinLength,\n  IsArray,\n  IsNumber,\n  IsNotEmpty,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @ApiProperty({\n    example: 'john.doe@example.com',\n    description: 'User email address',\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @ApiPropertyOptional({\n    example: 'johndoe',\n    description: 'Username (optional, will use email if not provided)',\n  })\n  @IsOptional()\n  @IsString()\n  username?: string;\n\n  @ApiProperty({\n    example: 'password123',\n    description: 'User password (minimum 6 characters)',\n    minLength: 6,\n  })\n  @IsString()\n  @MinLength(6)\n  password: string;\n\n  @ApiProperty({\n    example: 'John',\n    description: 'User first name',\n  })\n  @IsString()\n  @IsNotEmpty()\n  firstName: string;\n\n  @ApiPropertyOptional({\n    example: 'Miguel',\n    description: 'User middle name (optional)',\n  })\n  @IsOptional()\n  @IsString()\n  middleName?: string;\n\n  @ApiProperty({\n    example: 'Doe',\n    description: 'User last name',\n  })\n  @IsString()\n  @IsNotEmpty()\n  lastName: string;\n\n  @ApiPropertyOptional({\n    example: 'John Miguel Doe Jr.',\n    description: 'Full name (auto-generated if not provided)',\n  })\n  @IsString()\n  @IsOptional()\n  name?: string;\n\n  @ApiPropertyOptional({\n    example: 'Jr.',\n    description: 'Name extension (e.g., Jr., Sr., III)',\n  })\n  @IsOptional()\n  @IsString()\n  nameExtension?: string;\n\n  @ApiPropertyOptional({\n    example: '+639123456789',\n    description: 'Contact number',\n  })\n  @IsOptional()\n  @IsString()\n  contactNumber?: string;\n\n  @ApiPropertyOptional({\n    example: [2, 3],\n    description: 'Array of role IDs to assign to the user',\n    type: [Number],\n  })\n  @IsOptional()\n  @IsArray()\n  @IsNumber({}, { each: true })\n  roleIds?: number[];\n\n  @ApiPropertyOptional({\n    example: 4,\n    description: 'Default role ID for the user',\n  })\n  @IsOptional()\n  @IsNumber()\n  defaultRoleId?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DocumentApplication.html":{"url":"entities/DocumentApplication.html","title":"entity - DocumentApplication","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DocumentApplication\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/document-applications/entities/document-application.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                applicationSubtype\n                            \n                            \n                                    \n                                applicationType\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                files\n                            \n                            \n                                    \n                                formData\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastModifiedBy\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                statusHistory\n                            \n                            \n                                    \n                                statusMessage\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    \n                                user\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        applicationSubtype\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'application_subtype', length: 100, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        applicationType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ApplicationType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: ApplicationType, name: 'application_type'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        files\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DocumentFile[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, file => file.application, {cascade: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        formData\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'form_data', type: 'json'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn({length: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastModifiedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'last_modified_by', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ApplicationStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: ApplicationStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        statusHistory\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ApplicationStatusHistory[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, history => history.application, {cascade: false, eager: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        statusMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'status_message', type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({name: 'updated_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {nullable: true})@JoinColumn({name: 'user_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'user_id', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:44\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryColumn,\n  Column,\n  CreateDateColumn,\n  UpdateDateColumn,\n  OneToMany,\n  ManyToOne,\n  JoinColumn,\n  Index,\n} from 'typeorm';\nimport { User } from '../../../users/entities/user.entity';\nimport { DocumentFile } from './document-file.entity';\nimport { ApplicationStatusHistory } from './application-status-history.entity';\n\nexport enum ApplicationType {\n  BIRTH_CERTIFICATE = 'Birth Certificate',\n  MARRIAGE_CERTIFICATE = 'Marriage Certificate',\n  MARRIAGE_LICENSE = 'Marriage License',\n  DEATH_CERTIFICATE = 'Death Certificate',\n  BUSINESS_PERMIT = 'Business Permit',\n}\n\nexport enum ApplicationStatus {\n  PENDING = 'Pending',\n  PROCESSING = 'Processing',\n  APPROVED = 'Approved',\n  REJECTED = 'Rejected',\n  DECLINE = 'Decline',\n  READY_FOR_PICKUP = 'Ready for Pickup',\n  REQUIRES_ADDITIONAL_INFO = 'Requires Additional Info',\n}\n\n@Entity('document_applications')\n@Index(['userId'])\n@Index(['applicationType'])\n@Index(['status'])\n@Index(['createdAt'])\nexport class DocumentApplication {\n  @PrimaryColumn({ length: 50 })\n  id: string;\n\n  @Column({ name: 'user_id', nullable: true })\n  userId: number;\n\n  @Column({\n    type: 'enum',\n    enum: ApplicationType,\n    name: 'application_type',\n  })\n  applicationType: ApplicationType;\n\n  @Column({ name: 'application_subtype', length: 100, nullable: true })\n  applicationSubtype: string;\n\n  @Column({\n    type: 'enum',\n    enum: ApplicationStatus,\n    default: ApplicationStatus.PENDING,\n  })\n  status: ApplicationStatus;\n\n  @Column({ name: 'status_message', type: 'text', nullable: true })\n  statusMessage: string;\n\n  @Column({ name: 'form_data', type: 'json' })\n  formData: Record;\n\n  @CreateDateColumn({ name: 'created_at' })\n  createdAt: Date;\n\n  @UpdateDateColumn({ name: 'updated_at' })\n  updatedAt: Date;\n\n  @Column({ name: 'last_modified_by', nullable: true })\n  lastModifiedBy: number;\n\n  // Relations\n  @ManyToOne(() => User, { nullable: true })\n  @JoinColumn({ name: 'user_id' })\n  user: User;\n\n  @OneToMany(() => DocumentFile, (file) => file.application, { cascade: true })\n  files: DocumentFile[];\n\n  @OneToMany(() => ApplicationStatusHistory, (history) => history.application, {\n    cascade: false,\n    eager: false,\n  })\n  statusHistory: ApplicationStatusHistory[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/DocumentApplicationsController.html":{"url":"controllers/DocumentApplicationsController.html","title":"controller - DocumentApplicationsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  DocumentApplicationsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/document-applications/document-applications.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                document-applications\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getAllApplicationFiles\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getAllApplications\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getApplicationFiles\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getFileDownloadUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getStats\n                            \n                            \n                                    \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                updateStatus\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                uploadDocument\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createDto: CreateDocumentApplicationDto, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create new document application'})@ApiResponse({status: 201, description: 'Application created successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createDto\n                                            \n                                                            CreateDocumentApplicationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(status?: string, user?: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Get user applications'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:96\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'Get specific application'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:154\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getAllApplicationFiles\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllApplicationFiles(id: string, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/files/all')@ApiOperation({summary: 'Get all application files (privileged users only)'})@ApiResponse({status: 200, description: 'All files retrieved successfully'})@ApiResponse({status: 404, description: 'Application not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:136\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getAllApplications\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllApplications()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('admin/all')@Roles('admin', 'staff', 'super_admin')@UseGuards(RolesGuard)@ApiOperation({summary: 'Get all applications (Privileged users only)'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:241\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getApplicationFiles\n                        \n                    \n                \n            \n            \n                \n                        \n                    getApplicationFiles(id: string, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/files')@ApiOperation({summary: 'Get application files (latest per category)'})@ApiResponse({status: 200, description: 'Files retrieved successfully'})@ApiResponse({status: 404, description: 'Application not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:112\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getFileDownloadUrl\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFileDownloadUrl(fileId: string, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('files/:fileId/download')@ApiOperation({summary: 'Get file download URL'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:165\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fileId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('admin/stats')@Roles('admin', 'super_admin')@UseGuards(RolesGuard)@ApiOperation({summary: 'Get application statistics (Admin/Super Admin only)'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:249\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise>\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({summary: 'Delete application'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:226\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateDto: UpdateDocumentApplicationDto, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOperation({summary: 'Update application'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:183\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateDto\n                                            \n                                                            UpdateDocumentApplicationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(id: string, statusDto: literal type, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/status')@Roles('admin', 'staff', 'super_admin')@UseGuards(RolesGuard)@ApiOperation({summary: 'Update application status (Privileged users only)'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:211\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                statusDto\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        uploadDocument\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadDocument(id: string, file: Express.Multer.File, documentCategory: string, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':id/files')@UseInterceptors(undefined)@ApiConsumes('multipart/form-data')@ApiOperation({summary: 'Upload document file'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                documentCategory\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseInterceptors,\n  UploadedFile,\n  Query,\n  UseGuards,\n  //Request, // Uncomment if you need to use Request object\n  BadRequestException,\n} from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { DocumentApplicationsService } from './document-applications.service';\nimport { CreateDocumentApplicationDto } from './dto/create-document-application.dto';\nimport { UpdateDocumentApplicationDto } from './dto/update-document-application.dto';\nimport { JwtAuthGuard } from '../../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../../auth/guards/roles.guard';\nimport { Roles } from '../../auth/decorators/roles.decorator';\nimport { User } from '../../auth/decorators/user.decorator';\nimport { AuthenticatedUser } from '../../auth/jwt.strategy';\nimport { ApplicationStatus } from './entities/document-application.entity';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n  ApiConsumes,\n} from '@nestjs/swagger';\n\n@ApiTags('Document Applications')\n@Controller('document-applications')\n@UseGuards(JwtAuthGuard)\n@ApiBearerAuth('JWT-auth')\nexport class DocumentApplicationsController {\n  constructor(\n    private readonly documentApplicationsService: DocumentApplicationsService,\n  ) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Create new document application' })\n  @ApiResponse({ status: 201, description: 'Application created successfully' })\n  async create(\n    @Body() createDto: CreateDocumentApplicationDto,\n    @User() user: AuthenticatedUser,\n  ) {\n    return this.documentApplicationsService.create(createDto, user.id);\n  }\n\n  @Post(':id/files')\n  @UseInterceptors(\n    FileInterceptor('file', {\n      limits: {\n        fileSize: 10 * 1024 * 1024, // 10MB limit\n      },\n      fileFilter: (req, file, callback) => {\n        if (!file.mimetype.match(/\\/(jpg|jpeg|png|pdf)$/)) {\n          return callback(\n            new BadRequestException(\n              'Only JPEG, PNG, and PDF files are allowed',\n            ),\n            false,\n          );\n        }\n        callback(null, true);\n      },\n    }),\n  )\n  @ApiConsumes('multipart/form-data')\n  @ApiOperation({ summary: 'Upload document file' })\n  async uploadDocument(\n    @Param('id') id: string,\n    @UploadedFile() file: Express.Multer.File,\n    @Body('documentCategory') documentCategory: string,\n    @User() user: AuthenticatedUser,\n  ) {\n    console.log('Received document category:', documentCategory); // Debug log\n\n    if (!documentCategory) {\n      throw new BadRequestException('Document category is required');\n    }\n\n    return this.documentApplicationsService.uploadFile(\n      id,\n      file,\n      documentCategory,\n      user.id,\n    );\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Get user applications' })\n  async findAll(\n    @Query('status') status?: string,\n    @User() user?: AuthenticatedUser,\n  ) {\n    const userId = user?.roles.some((role) =>\n      ['admin', 'super_admin', 'staff'].includes(role.name),\n    )\n      ? undefined\n      : user?.id;\n    return this.documentApplicationsService.findAll(userId);\n  }\n\n  @Get(':id/files')\n  @ApiOperation({ summary: 'Get application files (latest per category)' })\n  @ApiResponse({ status: 200, description: 'Files retrieved successfully' })\n  @ApiResponse({ status: 404, description: 'Application not found' })\n  async getApplicationFiles(\n    @Param('id') id: string,\n    @User() user: AuthenticatedUser,\n  ) {\n    const userId = user.roles.some((role) =>\n      ['admin', 'super_admin', 'staff'].includes(role.name),\n    )\n      ? undefined\n      : user.id;\n\n    console.log(\n      `Getting files for application ${id}, user: ${user.email}, isPrivileged: ${!userId}`,\n    );\n\n    return await this.documentApplicationsService.getApplicationFiles(\n      id,\n      userId,\n    );\n  }\n\n  @Get(':id/files/all')\n  @ApiOperation({ summary: 'Get all application files (privileged users only)' })\n  @ApiResponse({ status: 200, description: 'All files retrieved successfully' })\n  @ApiResponse({ status: 404, description: 'Application not found' })\n  async getAllApplicationFiles(\n    @Param('id') id: string,\n    @User() user: AuthenticatedUser,\n  ) {\n    const userId = user.roles.some((role) =>\n      ['admin', 'super_admin', 'staff'].includes(role.name),\n    )\n      ? undefined\n      : user.id;\n\n    return await this.documentApplicationsService.getAllApplicationFiles(\n      id,\n      userId,\n    );\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: 'Get specific application' })\n  async findOne(@Param('id') id: string, @User() user: AuthenticatedUser) {\n    const userId = user.roles.some((role) =>\n      ['admin', 'super_admin', 'staff'].includes(role.name),\n    )\n      ? undefined\n      : user.id;\n    return this.documentApplicationsService.findOne(id, userId);\n  }\n\n  @Get('files/:fileId/download')\n  @ApiOperation({ summary: 'Get file download URL' })\n  async getFileDownloadUrl(\n    @Param('fileId') fileId: string,\n    @User() user: AuthenticatedUser,\n  ) {\n    const userId = user.roles.some((role) =>\n      ['admin', 'super_admin', 'staff'].includes(role.name),\n    )\n      ? undefined\n      : user.id;\n    const url = await this.documentApplicationsService.getFileDownloadUrl(\n      +fileId,\n      userId,\n    );\n    return { url };\n  }\n\n  @Patch(':id')\n  @ApiOperation({ summary: 'Update application' })\n  async update(\n    @Param('id') id: string,\n    @Body() updateDto: UpdateDocumentApplicationDto,\n    @User() user: AuthenticatedUser,\n  ) {\n    const userId = user.roles.some((role) =>\n      ['admin', 'super_admin', 'staff'].includes(role.name),\n    )\n      ? undefined\n      : user.id;\n    const adminId = user.roles.some((role) =>\n      ['admin', 'super_admin', 'staff'].includes(role.name),\n    )\n      ? user.id\n      : undefined;\n\n    return this.documentApplicationsService.update(\n      id,\n      updateDto,\n      userId,\n      adminId,\n    );\n  }\n\n  @Patch(':id/status')\n  @Roles('admin', 'staff', 'super_admin')\n  @UseGuards(RolesGuard)\n  @ApiOperation({ summary: 'Update application status (Privileged users only)' })\n  async updateStatus(\n    @Param('id') id: string,\n    @Body() statusDto: { status: string; statusMessage?: string },\n    @User() user: AuthenticatedUser,\n  ) {\n    return this.documentApplicationsService.updateStatus(\n      id,\n      statusDto.status as ApplicationStatus,\n      statusDto.statusMessage,\n      user.id,\n    );\n  }\n\n  @Delete(':id')\n  @ApiOperation({ summary: 'Delete application' })\n  async remove(@Param('id') id: string, @User() user: AuthenticatedUser) {\n    const userId = user.roles.some((role) =>\n      ['admin', 'super_admin', 'staff'].includes(role.name),\n    )\n      ? undefined\n      : user.id;\n    await this.documentApplicationsService.remove(id, userId);\n    return { message: 'Application deleted successfully' };\n  }\n\n  // Admin endpoints\n  @Get('admin/all')\n  @Roles('admin', 'staff', 'super_admin')\n  @UseGuards(RolesGuard)\n  @ApiOperation({ summary: 'Get all applications (Privileged users only)' })\n  async getAllApplications() {\n    return this.documentApplicationsService.findAll();\n  }\n\n  @Get('admin/stats')\n  @Roles('admin', 'super_admin')\n  @UseGuards(RolesGuard)\n  @ApiOperation({ summary: 'Get application statistics (Admin/Super Admin only)' })\n  async getStats(): Promise\n  > {\n    return this.documentApplicationsService.getApplicationStats();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DocumentApplicationsModule.html":{"url":"modules/DocumentApplicationsModule.html","title":"module - DocumentApplicationsModule","body":"\n                   \n\n\n\n\n    Modules\n    DocumentApplicationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DocumentApplicationsModule\n\n\n\ncluster_DocumentApplicationsModule_providers\n\n\n\ncluster_DocumentApplicationsModule_exports\n\n\n\n\nDocumentApplicationsService \n\nDocumentApplicationsService \n\n\n\nMinioService \n\nMinioService \n\n\n\nDocumentApplicationsModule\n\nDocumentApplicationsModule\n\nDocumentApplicationsService  -->\n\nDocumentApplicationsModule->DocumentApplicationsService \n\n\n\nMinioService  -->\n\nDocumentApplicationsModule->MinioService \n\n\n\n\n\nDocumentApplicationsService\n\nDocumentApplicationsService\n\nDocumentApplicationsModule -->\n\nDocumentApplicationsService->DocumentApplicationsModule\n\n\n\n\n\nMinioService\n\nMinioService\n\nDocumentApplicationsModule -->\n\nMinioService->DocumentApplicationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/document-applications/document-applications.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DocumentApplicationsService\n                        \n                        \n                            MinioService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            DocumentApplicationsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            DocumentApplicationsService\n                        \n                        \n                            MinioService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { DocumentApplicationsService } from './document-applications.service';\nimport { DocumentApplicationsController } from './document-applications.controller';\nimport { DocumentApplication } from './entities/document-application.entity';\nimport { DocumentFile } from './entities/document-file.entity';\nimport { ApplicationStatusHistory } from './entities/application-status-history.entity';\nimport { MinioService } from './services/minio.service';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      DocumentApplication,\n      DocumentFile,\n      ApplicationStatusHistory,\n    ]),\n  ],\n  controllers: [DocumentApplicationsController],\n  providers: [DocumentApplicationsService, MinioService],\n  exports: [DocumentApplicationsService, MinioService],\n})\nexport class DocumentApplicationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DocumentFile.html":{"url":"entities/DocumentFile.html","title":"entity - DocumentFile","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DocumentFile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/document-applications/entities/document-file.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                application\n                            \n                            \n                                    \n                                applicationId\n                            \n                            \n                                    \n                                documentCategory\n                            \n                            \n                                    \n                                fileName\n                            \n                            \n                                    \n                                fileSize\n                            \n                            \n                                    \n                                fileType\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                minioObjectName\n                            \n                            \n                                    \n                                uploadedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        application\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DocumentApplication\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, app => app.files, {onDelete: 'CASCADE'})@JoinColumn({name: 'application_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        applicationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'application_id', length: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        documentCategory\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'document_category', length: 250, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        fileName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'file_name', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        fileSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'file_size', type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        fileType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'file_type', length: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        minioObjectName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'minio_object_name', length: 500})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        uploadedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'uploaded_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:38\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  CreateDateColumn,\n  ManyToOne,\n  JoinColumn,\n  Index,\n} from 'typeorm';\nimport { DocumentApplication } from './document-application.entity';\n\n@Entity('document_files')\n@Index(['applicationId'])\n@Index(['documentCategory'])\nexport class DocumentFile {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ name: 'application_id', length: 50 })\n  applicationId: string;\n\n  @Column({ name: 'file_name', length: 255 })\n  fileName: string;\n\n  @Column({ name: 'file_type', length: 100 })\n  fileType: string;\n\n  @Column({ name: 'file_size', type: 'bigint' })\n  fileSize: number;\n\n  @Column({ name: 'minio_object_name', length: 500 })\n  minioObjectName: string;\n\n  @Column({ name: 'document_category', length: 250, nullable: true })\n  documentCategory: string;\n\n  @CreateDateColumn({ name: 'uploaded_at' })\n  uploadedAt: Date;\n\n  // Relations\n  @ManyToOne(() => DocumentApplication, (app) => app.files, {\n    onDelete: 'CASCADE',\n  })\n  @JoinColumn({ name: 'application_id' })\n  application: DocumentApplication;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FindAllOptions.html":{"url":"interfaces/FindAllOptions.html","title":"interface - FindAllOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FindAllOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            limit\n                                        \n                                \n                                \n                                        \n                                            page\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            role\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            search\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        limit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        limit:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        page\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        page:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        search\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        search:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  BadRequestException,\n  ConflictException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, Like, In } from 'typeorm';\nimport { User } from './entities/user.entity';\nimport { AdminUpdateUserDto } from '../auth/dto/update-user.dto'; // Import from auth module\nimport { RolesService } from '../roles/roles.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport * as bcrypt from 'bcrypt';\n\ninterface FindAllOptions {\n  page: number;\n  limit: number;\n  search?: string;\n  role?: string;\n}\n\nexport interface UserStats {\n  totalUsers: number;\n  activeUsers: number;\n  inactiveUsers: number;\n  usersByRole: { roleName: string; count: number }[];\n  recentUsers: Omit[];\n}\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n    private rolesService: RolesService,\n  ) {}\n\n  async findAll(options: FindAllOptions) {\n    const { page, limit, search, role } = options;\n    const skip = (page - 1) * limit;\n\n    const queryBuilder = this.usersRepository\n      .createQueryBuilder('user')\n      .leftJoinAndSelect('user.defaultRole', 'defaultRole')\n      .leftJoinAndSelect('user.roles', 'roles');\n\n    // Apply search filter\n    if (search) {\n      queryBuilder.where(\n        '(user.firstName LIKE :search OR user.lastName LIKE :search OR user.email LIKE :search OR user.username LIKE :search)',\n        { search: `%${search}%` },\n      );\n    }\n\n    // Apply role filter\n    if (role) {\n      queryBuilder.andWhere('roles.name = :role', { role });\n    }\n\n    queryBuilder.orderBy('user.createdAt', 'DESC').skip(skip).take(limit);\n\n    const [users, total] = await queryBuilder.getManyAndCount();\n\n    // Remove passwords from response\n    const sanitizedUsers = users.map((user) => {\n      const { password, ...userWithoutPassword } = user;\n      return {\n        ...userWithoutPassword,\n        roles: user.roles.map((role) => role.name),\n        defaultRole: user.defaultRole?.name || 'citizen',\n      };\n    });\n\n    return {\n      users: sanitizedUsers,\n      total,\n      page,\n      limit,\n      totalPages: Math.ceil(total / limit),\n    };\n  }\n\n  async findOne(id: number): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id },\n      relations: ['defaultRole', 'roles'],\n    });\n\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    // Remove password and format response\n\n    const { password, ...userWithoutPassword } = user;\n    return {\n      ...userWithoutPassword,\n      roles: user.roles.map((role) => role.name),\n      defaultRole: user.defaultRole?.name || 'citizen',\n    };\n  }\n\n  // Admin-only update method\n  async adminUpdate(\n    id: number,\n    updateUserDto: AdminUpdateUserDto,\n  ): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id },\n      relations: ['roles'],\n    });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    const {\n      email,\n\n      username,\n\n      firstName,\n\n      middleName,\n\n      lastName,\n\n      nameExtension,\n\n      contactNumber,\n\n      roleIds,\n\n      defaultRoleId,\n    } = updateUserDto;\n\n    // Check email uniqueness if being updated\n    if (email && email !== user.email) {\n      const existingUser = await this.usersRepository.findOne({\n        where: { email },\n      });\n      if (existingUser) {\n        throw new ConflictException('Email already exists');\n      }\n    }\n\n    // Check username uniqueness if being updated\n    if (username && username !== user.username) {\n      const existingUser = await this.usersRepository.findOne({\n        where: { username },\n      });\n      if (existingUser) {\n        throw new ConflictException('Username already exists');\n      }\n    }\n\n    // Update fields\n    const updateData: any = {};\n\n    if (email) updateData.email = email;\n    if (username) updateData.username = username;\n    if (firstName) updateData.firstName = firstName;\n    if (lastName) updateData.lastName = lastName;\n    if (contactNumber) updateData.contactNumber = contactNumber;\n\n    // Handle optional fields\n    if (middleName !== undefined) updateData.middleName = middleName;\n    if (nameExtension !== undefined) updateData.nameExtension = nameExtension;\n    if (defaultRoleId !== undefined) updateData.defaultRoleId = defaultRoleId;\n\n    // Update name if name components changed\n    if (\n      firstName ||\n      middleName !== undefined ||\n      lastName ||\n      nameExtension !== undefined\n    ) {\n      const newFirstName = firstName || user.firstName;\n      const newMiddleName =\n        middleName !== undefined ? middleName : user.middleName;\n      const newLastName = lastName || user.lastName;\n      const newNameExtension =\n        nameExtension !== undefined ? nameExtension : user.nameExtension;\n\n      updateData.name = `${newFirstName} ${newMiddleName ? newMiddleName + ' ' : ''}${newLastName}${newNameExtension ? ' ' + newNameExtension : ''}`;\n    }\n\n    await this.usersRepository.update(id, updateData);\n\n    // Update roles if provided\n    if (roleIds !== undefined) {\n      // Remove existing roles and assign new ones\n      await this.usersRepository\n        .createQueryBuilder()\n        .relation(User, 'roles')\n        .of(id)\n        .remove(user.roles);\n\n      if (roleIds.length > 0) {\n        await this.rolesService.assignRolesToUser(id, roleIds);\n      }\n    }\n\n    return this.findOne(id);\n  }\n\n  async remove(id: number): Promise {\n    const user = await this.usersRepository.findOne({ where: { id } });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    await this.usersRepository.delete(id);\n    return { message: `User with ID ${id} has been deleted` };\n  }\n\n  async updateStatus(id: number, isActive: boolean): Promise {\n    const user = await this.usersRepository.findOne({ where: { id } });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    await this.usersRepository.update(id, { isActive });\n    return this.findOne(id);\n  }\n\n  async getStats(): Promise {\n    const totalUsers = await this.usersRepository.count();\n    const activeUsers = await this.usersRepository.count({\n      where: { isActive: true },\n    });\n    const inactiveUsers = totalUsers - activeUsers;\n\n    // Get user count by role\n    const roleStats = await this.usersRepository\n      .createQueryBuilder('user')\n      .leftJoin('user.roles', 'role')\n      .select('role.name', 'roleName')\n      .addSelect('COUNT(user.id)', 'count')\n      .groupBy('role.name')\n      .getRawMany();\n\n    const usersByRole = roleStats.map((stat) => ({\n      roleName: stat.roleName || 'No Role',\n\n      count: parseInt(stat.count),\n    }));\n\n    // Get recent users (last 10)\n    const recentUsers = await this.usersRepository.find({\n      order: { createdAt: 'DESC' },\n      take: 10,\n      relations: ['defaultRole', 'roles'],\n    });\n\n    const sanitizedRecentUsers = recentUsers.map((user) => {\n      const { password, ...userWithoutPassword } = user;\n      return userWithoutPassword as Omit;\n    });\n\n    return {\n      totalUsers,\n      activeUsers,\n      inactiveUsers,\n      usersByRole,\n      recentUsers: sanitizedRecentUsers,\n    };\n  }\n\n  async findByEmail(email: string): Promise {\n    return this.usersRepository.findOne({\n      where: { email },\n      relations: ['defaultRole', 'roles'],\n    });\n  }\n\n  async findByUsername(username: string): Promise {\n    return this.usersRepository.findOne({\n      where: { username },\n      relations: ['defaultRole', 'roles'],\n    });\n  }\n\n  async create(createUserDto: CreateUserDto) {\n    const {\n      email,\n      username,\n      password,\n      firstName,\n      middleName,\n      lastName,\n      nameExtension,\n      contactNumber,\n      name,\n      roleIds,\n      defaultRoleId,\n    } = createUserDto;\n\n    // Generate full name if not provided\n    const fullName =\n      name ||\n      `${firstName} ${middleName ? middleName + ' ' : ''}${lastName}${nameExtension ? ' ' + nameExtension : ''}`;\n\n    // Check if user already exists\n    const existingUserByEmail = await this.usersRepository.findOne({\n      where: { email },\n    });\n    if (existingUserByEmail) {\n      throw new ConflictException('Email already exists');\n    }\n\n    if (username) {\n      const existingUserByUsername = await this.usersRepository.findOne({\n        where: { username },\n      });\n      if (existingUserByUsername) {\n        throw new ConflictException('Username already exists');\n      }\n    }\n\n    try {\n      // Create user\n      const user = this.usersRepository.create({\n        email,\n        username,\n        password, // Should be hashed by the caller\n        firstName,\n        middleName,\n        lastName,\n        nameExtension,\n        contactNumber,\n        name: fullName,\n        defaultRoleId: defaultRoleId || 4, // Default to citizen\n      });\n\n      await this.usersRepository.save(user);\n\n      // Assign roles if provided\n      if (roleIds && roleIds.length > 0) {\n        await this.rolesService.assignRolesToUser(user.id, roleIds);\n      }\n\n      return user;\n    } catch (error) {\n      console.error('Error creating user:', error);\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            roles\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        roles:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\n\ninterface JwtPayload {\n  sub: number;\n  email: string;\n  roles?: string[];\n}\n\n// Strategy for validating JWT tokens in NestJS\nexport interface AuthenticatedUser {\n  id: number;\n  email: string;\n  roles: Array;\n}\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private configService: ConfigService) {\n    const secretKey = configService.get('JWT_SECRET');\n\n    if (!secretKey) {\n      throw new Error('JWT_SECRET is not defined in environment variables');\n    }\n\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: secretKey,\n    });\n  }\n\n  validate(payload: JwtPayload): AuthenticatedUser {\n    // Validation for the payload\n    if (!payload || payload.sub === undefined || isNaN(Number(payload.sub))) {\n      throw new UnauthorizedException('Invalid token payload');\n    }\n\n    const userId = Number(payload.sub);\n    const email = String(payload.email || '');\n    const roles = Array.isArray(payload.roles)\n      ? payload.roles.map((role) => ({ name: role }))\n      : [];\n\n    return {\n      id: userId,\n      email,\n      roles,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(payload: JwtPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            JwtPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         AuthenticatedUser\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\n\ninterface JwtPayload {\n  sub: number;\n  email: string;\n  roles?: string[];\n}\n\n// Strategy for validating JWT tokens in NestJS\nexport interface AuthenticatedUser {\n  id: number;\n  email: string;\n  roles: Array;\n}\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private configService: ConfigService) {\n    const secretKey = configService.get('JWT_SECRET');\n\n    if (!secretKey) {\n      throw new Error('JWT_SECRET is not defined in environment variables');\n    }\n\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: secretKey,\n    });\n  }\n\n  validate(payload: JwtPayload): AuthenticatedUser {\n    // Validation for the payload\n    if (!payload || payload.sub === undefined || isNaN(Number(payload.sub))) {\n      throw new UnauthorizedException('Invalid token payload');\n    }\n\n    const userId = Number(payload.sub);\n    const email = String(payload.email || '');\n    const roles = Array.isArray(payload.roles)\n      ? payload.roles.map((role) => ({ name: role }))\n      : [];\n\n    return {\n      id: userId,\n      email,\n      roles,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for user login\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                emailOrUsername\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        emailOrUsername\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Email or username for login', example: 'test@example.com'})@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Test User password', example: 'password123'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\n/**\n * DTO for user login\n * @class LoginDto\n */\n\nexport class LoginDto {\n  @ApiProperty({\n    description: 'Email or username for login',\n    example: 'test@example.com',\n  })\n  @IsNotEmpty()\n  emailOrUsername: string;\n\n  @ApiProperty({\n    description: 'Test User password',\n    example: 'password123',\n  })\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MinioService.html":{"url":"injectables/MinioService.html","title":"injectable - MinioService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MinioService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/minio.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                bucketName\n                            \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                minioClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteFile\n                            \n                            \n                                    Async\n                                getDownloadUrl\n                            \n                            \n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/services/minio.service.ts:8\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteFile(objectName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/minio.service.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                objectName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getDownloadUrl\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDownloadUrl(objectName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/minio.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                objectName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(file: Express.Multer.File, objectName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/minio.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                objectName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        bucketName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/services/minio.service.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(MinioService.name)\n                    \n                \n                    \n                        \n                                Defined in src/services/minio.service.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        minioClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Minio.Client\n\n                    \n                \n                    \n                        \n                                Defined in src/services/minio.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport * as Minio from 'minio';\n\n@Injectable()\nexport class MinioService {\n  private readonly logger = new Logger(MinioService.name);\n  private minioClient: Minio.Client;\n  private bucketName: string;\n\n  constructor() {\n    this.minioClient = new Minio.Client({\n      endPoint: process.env.MINIO_ENDPOINT || 'localhost',\n      port: parseInt(process.env.MINIO_PORT || '9000'),\n      useSSL: process.env.MINIO_USE_SSL === 'true',\n      accessKey: process.env.MINIO_ACCESS_KEY || 'minioadmin',\n      secretKey: process.env.MINIO_SECRET_KEY || 'minioadmin123',\n    });\n\n    this.bucketName = process.env.MINIO_BUCKET_NAME || 'bulak-smart-connect';\n  }\n\n  async uploadFile(\n    file: Express.Multer.File,\n    objectName: string,\n  ): Promise {\n    try {\n      await this.minioClient.putObject(\n        this.bucketName,\n        objectName,\n        file.buffer,\n        file.size,\n        {\n          'Content-Type': file.mimetype,\n          'Original-Name': file.originalname,\n        },\n      );\n\n      this.logger.log(`File uploaded: ${objectName}`);\n      return objectName;\n    } catch (error) {\n      this.logger.error('Upload failed:', error);\n      throw error;\n    }\n  }\n\n  async getDownloadUrl(objectName: string): Promise {\n    try {\n      return await this.minioClient.presignedGetObject(\n        this.bucketName,\n        objectName,\n        3600,\n      );\n    } catch (error) {\n      this.logger.error('Get URL failed:', error);\n      throw error;\n    }\n  }\n\n  async deleteFile(objectName: string): Promise {\n    try {\n      await this.minioClient.removeObject(this.bucketName, objectName);\n      this.logger.log(`File deleted: ${objectName}`);\n    } catch (error) {\n      this.logger.error('Delete failed:', error);\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MinioService-1.html":{"url":"injectables/MinioService-1.html","title":"injectable - MinioService-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MinioService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/document-applications/services/minio.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                bucketName\n                            \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                minioClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteFile\n                            \n                            \n                                    Async\n                                ensureBucketExists\n                            \n                            \n                                    Async\n                                getFileInfo\n                            \n                            \n                                    Async\n                                getPresignedUrl\n                            \n                            \n                                    Async\n                                listFiles\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                            \n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/document-applications/services/minio.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteFile(objectName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/document-applications/services/minio.service.ts:109\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                objectName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        ensureBucketExists\n                        \n                    \n                \n            \n            \n                \n                        \n                    ensureBucketExists()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/document-applications/services/minio.service.ts:50\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getFileInfo\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFileInfo(objectName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/document-applications/services/minio.service.ts:119\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                objectName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPresignedUrl\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPresignedUrl(objectName: string, expiry: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/document-applications/services/minio.service.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                objectName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                expiry\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    3600\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        listFiles\n                        \n                    \n                \n            \n            \n                \n                        \n                    listFiles(prefix?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/document-applications/services/minio.service.ts:128\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                prefix\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/document-applications/services/minio.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(file: Express.Multer.File, objectName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/document-applications/services/minio.service.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                objectName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        bucketName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/services/minio.service.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(MinioService.name)\n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/services/minio.service.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        minioClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Minio.Client\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/services/minio.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, OnModuleInit } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport * as Minio from 'minio';\n\n@Injectable()\nexport class MinioService implements OnModuleInit {\n  private readonly logger = new Logger(MinioService.name);\n  private minioClient: Minio.Client;\n  private bucketName: string;\n\n  constructor(private configService: ConfigService) {\n    const endpoint = this.configService.get(\n      'MINIO_ENDPOINT',\n      'localhost',\n    );\n    const port = this.configService.get('MINIO_PORT', 9000);\n    const useSSLValue = this.configService\n      .get('MINIO_USE_SSL', 'false')\n      .toLowerCase();\n    const useSSL = ['true', '1', 'yes', 'on'].includes(useSSLValue);\n    const accessKey = this.configService.get(\n      'MINIO_ACCESS_KEY',\n      'minioadmin',\n    );\n    const secretKey = this.configService.get(\n      'MINIO_SECRET_KEY',\n      'minioadmin123',\n    );\n\n    this.minioClient = new Minio.Client({\n      endPoint: endpoint,\n      port: port,\n      useSSL: useSSL,\n      accessKey: accessKey,\n      secretKey: secretKey,\n    });\n\n    this.bucketName = this.configService.get(\n      'MINIO_BUCKET_NAME',\n      'bulak-smart-connect',\n    );\n\n    this.logger.log(`MinIO configured with endpoint: ${endpoint}:${port}`);\n  }\n\n  async onModuleInit() {\n    await this.ensureBucketExists();\n  }\n\n  async ensureBucketExists(): Promise {\n    try {\n      const exists = await this.minioClient.bucketExists(this.bucketName);\n      if (!exists) {\n        await this.minioClient.makeBucket(this.bucketName, 'us-east-1');\n        this.logger.log(`Bucket ${this.bucketName} created successfully`);\n      } else {\n        this.logger.log(`Bucket ${this.bucketName} already exists`);\n      }\n    } catch (error) {\n      this.logger.error('Error ensuring bucket exists:', error);\n      throw error;\n    }\n  }\n\n  async uploadFile(\n    file: Express.Multer.File,\n    objectName: string,\n  ): Promise {\n    try {\n      const metaData = {\n        'Content-Type': file.mimetype,\n        'Original-Name': file.originalname,\n        'Upload-Date': new Date().toISOString(),\n        'File-Size': file.size.toString(),\n      };\n\n      await this.minioClient.putObject(\n        this.bucketName,\n        objectName,\n        file.buffer,\n        file.size,\n        metaData,\n      );\n\n      this.logger.log(`File uploaded successfully: ${objectName}`);\n      return objectName;\n    } catch (error) {\n      this.logger.error('Error uploading file:', error);\n      throw error;\n    }\n  }\n\n  async getPresignedUrl(\n    objectName: string,\n    expiry: number = 3600,\n  ): Promise {\n    try {\n      return await this.minioClient.presignedGetObject(\n        this.bucketName,\n        objectName,\n        expiry,\n      );\n    } catch (error) {\n      this.logger.error('Error generating presigned URL:', error);\n      throw error;\n    }\n  }\n\n  async deleteFile(objectName: string): Promise {\n    try {\n      await this.minioClient.removeObject(this.bucketName, objectName);\n      this.logger.log(`File deleted successfully: ${objectName}`);\n    } catch (error) {\n      this.logger.error('Error deleting file:', error);\n      throw error;\n    }\n  }\n\n  async getFileInfo(objectName: string): Promise {\n    try {\n      return await this.minioClient.statObject(this.bucketName, objectName);\n    } catch (error) {\n      this.logger.error('Error getting file info:', error);\n      throw error;\n    }\n  }\n\n  async listFiles(prefix?: string): Promise {\n    return new Promise((resolve, reject) => {\n      const files: any[] = [];\n      const stream = this.minioClient.listObjects(\n        this.bucketName,\n        prefix,\n        true,\n      );\n\n      stream.on('data', (obj) => files.push(obj));\n      stream.on('error', reject);\n      stream.on('end', () => resolve(files));\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginatedUsersResponseDto.html":{"url":"classes/PaginatedUsersResponseDto.html","title":"class - PaginatedUsersResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginatedUsersResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/paginated-users-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                limit\n                            \n                            \n                                    \n                                page\n                            \n                            \n                                    \n                                total\n                            \n                            \n                                    \n                                totalPages\n                            \n                            \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 10, description: 'Number of items per page'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/paginated-users-response.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 1, description: 'Current page number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/paginated-users-response.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        total\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 100, description: 'Total number of users'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/paginated-users-response.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        totalPages\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 10, description: 'Total number of pages'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/paginated-users-response.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserResponseDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined, description: 'Array of users'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/paginated-users-response.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { UserResponseDto } from './user-response.dto';\n\nexport class PaginatedUsersResponseDto {\n  @ApiProperty({\n    type: [UserResponseDto],\n    description: 'Array of users',\n  })\n  users: UserResponseDto[];\n\n  @ApiProperty({\n    example: 100,\n    description: 'Total number of users',\n  })\n  total: number;\n\n  @ApiProperty({\n    example: 1,\n    description: 'Current page number',\n  })\n  page: number;\n\n  @ApiProperty({\n    example: 10,\n    description: 'Number of items per page',\n  })\n  limit: number;\n\n  @ApiProperty({\n    example: 10,\n    description: 'Total number of pages',\n  })\n  totalPages: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Queue.html":{"url":"entities/Queue.html","title":"entity - Queue","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Queue\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/entities/queue.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                completedAt\n                            \n                            \n                                    \n                                counter\n                            \n                            \n                                    \n                                counterNumber\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                details\n                            \n                            \n                                    \n                                estimatedWaitTime\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                queueNumber\n                            \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        completedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'completed_at', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        counter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Counter\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, counter => counter.currentQueue, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        counterNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'counter_number', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        details\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueueDetails[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, details => details.queue)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        estimatedWaitTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'estimated_wait_time', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        queueNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'queue_number', unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueueStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: QueueStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:32\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  OneToMany,\n  CreateDateColumn,\n  OneToOne,\n} from 'typeorm';\nimport { QueueDetails } from './queue-details.entity';\nimport { Counter } from '../../counter/entities/counter.entity';\n\nexport enum QueueStatus {\n  PENDING = 'pending',\n  SERVING = 'serving',\n  COMPLETED = 'completed',\n  CANCELLED = 'cancelled',\n}\n\n@Entity('queues')\nexport class Queue {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ name: 'queue_number', unique: true })\n  queueNumber: string;\n\n  @Column({\n    type: 'enum',\n    enum: QueueStatus,\n    default: QueueStatus.PENDING,\n  })\n  status: QueueStatus;\n\n  @Column({ name: 'counter_number', nullable: true })\n  counterNumber: string;\n\n  @CreateDateColumn({ name: 'created_at' })\n  createdAt: Date;\n\n  @Column({ name: 'completed_at', nullable: true })\n  completedAt: Date;\n\n  @Column({ name: 'estimated_wait_time', nullable: true })\n  estimatedWaitTime: number;\n\n  @OneToMany(() => QueueDetails, (details) => details.queue)\n  details: QueueDetails[];\n\n  @OneToOne(() => Counter, (counter) => counter.currentQueue, {\n    nullable: true,\n  })\n  counter: Counter;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/QueueController.html":{"url":"controllers/QueueController.html","title":"controller - QueueController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  QueueController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/queue.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                queue\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                addCounter\n                            \n                            \n                                    \n                                callNext\n                            \n                            \n                                    \n                                    Async\n                                checkQueueExists\n                            \n                            \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                    Async\n                                createManualQueue\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findByQueueNumber\n                            \n                            \n                                    \n                                findByStatus\n                            \n                            \n                                    \n                                findCompleted\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                findPending\n                            \n                            \n                                    \n                                findPendingWithDetails\n                            \n                            \n                                    \n                                findServing\n                            \n                            \n                                    \n                                findServingWithDetails\n                            \n                            \n                                    \n                                getCounters\n                            \n                            \n                                    \n                                getDetailsForMultipleQueues\n                            \n                            \n                                    \n                                getQueueDetails\n                            \n                            \n                                    \n                                getQueuePosition\n                            \n                            \n                                    \n                                getStats\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getTodayPendingCount\n                            \n                            \n                                    \n                                    \n                                    Async\n                                manualDailyReset\n                            \n                            \n                                    \n                                update\n                            \n                            \n                                    \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        addCounter\n                        \n                    \n                \n            \n            \n                \n                        \n                    addCounter(data: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('counter')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:201\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        callNext\n                        \n                    \n                \n            \n            \n                \n                        \n                    callNext(counterId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('counter/:counterId/call-next')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:196\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                counterId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        checkQueueExists\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkQueueExists(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/exists')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:211\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createQueueDto: CreateQueueDto, user?: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(JwtAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createQueueDto\n                                            \n                                                            CreateQueueDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            UserEntity\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        createManualQueue\n                        \n                    \n                \n            \n            \n                \n                        \n                    createManualQueue(createQueueDto: CreateQueueDto, user?: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('manual')@UseGuards(JwtAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createQueueDto\n                                            \n                                                            CreateQueueDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            UserEntity\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:94\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findByQueueNumber\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByQueueNumber(queueNumber: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('number/:queueNumber')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:176\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueNumber\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findByStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByStatus(status: QueueStatus)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('status/:status')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:99\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            QueueStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findCompleted\n                        \n                    \n                \n            \n            \n                \n                        \n                    findCompleted()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('completed')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:114\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:171\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findPending\n                        \n                    \n                \n            \n            \n                \n                        \n                    findPending()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('pending')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:104\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findPendingWithDetails\n                        \n                    \n                \n            \n            \n                \n                        \n                    findPendingWithDetails()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('pending/details')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:120\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findServing\n                        \n                    \n                \n            \n            \n                \n                        \n                    findServing()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('serving')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:109\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findServingWithDetails\n                        \n                    \n                \n            \n            \n                \n                        \n                    findServingWithDetails()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('serving/details')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:126\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getCounters\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCounters()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('counters')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:206\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getDetailsForMultipleQueues\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDetailsForMultipleQueues(body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('bulk-details')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:132\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getQueueDetails\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQueueDetails(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/details')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:181\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getQueuePosition\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQueuePosition(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/position')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:186\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('stats')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:166\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getTodayPendingCount\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTodayPendingCount()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('admin/pending-count')@UseGuards(JwtAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:241\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        manualDailyReset\n                        \n                    \n                \n            \n            \n                \n                        \n                    manualDailyReset(user?: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('admin/daily-reset')@UseGuards(JwtAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:223\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            UserEntity\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateQueueDto: UpdateQueueDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:191\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateQueueDto\n                                            \n                                                            UpdateQueueDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(id: string, body: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/status')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.controller.ts:137\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  //Delete, // Uncomment if you want to implement delete functionality\n  //Request, // Uncomment if you want to use Request object\n  UseGuards,\n} from '@nestjs/common';\nimport { QueueService } from './queue.service';\nimport { CreateQueueDto } from './dto/create-queue.dto';\nimport { UpdateQueueDto } from './dto/update-queue.dto';\nimport { QueueStatus } from './entities/queue.entity';\nimport { JwtAuthGuard } from '../../auth/guards/jwt-auth.guard';\nimport { User } from '../../auth/decorators/user.decorator';\nimport { User as UserEntity } from '../../users/entities/user.entity';\nimport { QueueSchedulerService } from './queue-scheduler.service';\n\n@Controller('queue')\nexport class QueueController {\n  constructor(\n    private readonly queueService: QueueService,\n    private readonly queueSchedulerService: QueueSchedulerService,\n  ) {}\n\n  @Post()\n  @UseGuards(JwtAuthGuard)\n  create(@Body() createQueueDto: CreateQueueDto, @User() user?: UserEntity) {\n    // Extract user ID from authenticated user\n    const userId = user?.id || null;\n\n    console.log('=== QUEUE CREATION BACKEND DEBUG ===');\n    console.log('Queue creation - User from JWT:', user);\n    console.log('Original DTO received:', createQueueDto);\n    console.log('DTO isGuest value:', createQueueDto.isGuest);\n    console.log('DTO isGuest type:', typeof createQueueDto.isGuest);\n\n    // Set userId and respect the isGuest boolean from frontend\n    if (userId) {\n      createQueueDto.userId = userId;\n      // If isGuest is not provided, default to false for authenticated users\n      if (createQueueDto.isGuest === undefined) {\n        createQueueDto.isGuest = false;\n      }\n    } else {\n      createQueueDto.userId = undefined;\n      createQueueDto.isGuest = true;\n    }\n\n    console.log('Final DTO values:');\n    console.log('- userId:', createQueueDto.userId);\n    console.log('- isGuest:', createQueueDto.isGuest);\n\n    return this.queueService.create(createQueueDto);\n  }\n\n  @Post('manual')\n  @UseGuards(JwtAuthGuard)\n  async createManualQueue(\n    @Body() createQueueDto: CreateQueueDto,\n    @User() user?: UserEntity,\n  ) {\n    try {\n      console.log('Manual queue creation by admin:', user?.id);\n      console.log('Received DTO:', createQueueDto);\n\n      // Set default values for manual/guest queues\n      const queueData: CreateQueueDto = {\n        ...createQueueDto,\n        userId: undefined, // Manual queues don't have user IDs\n        isGuest: true, // Always true for manual queues\n        // Don't override appointmentType - let it come from the frontend\n      };\n\n      console.log('Processed queue data:', queueData);\n\n      const result = await this.queueService.create(queueData);\n\n      return {\n        success: true,\n        queue: result.queue || result,\n        details: result.details,\n        message: 'Manual queue created successfully',\n      };\n    } catch (error) {\n      console.error('Error creating manual queue:', error);\n      throw error;\n    }\n  }\n\n  @Get()\n  findAll() {\n    return this.queueService.findAll();\n  }\n\n  @Get('status/:status')\n  findByStatus(@Param('status') status: QueueStatus) {\n    return this.queueService.findByStatus(status);\n  }\n\n  @Get('pending')\n  findPending() {\n    return this.queueService.findByStatus(QueueStatus.PENDING);\n  }\n\n  @Get('serving')\n  findServing() {\n    return this.queueService.findByStatus(QueueStatus.SERVING);\n  }\n\n  @Get('completed')\n  findCompleted() {\n    return this.queueService.findByStatus(QueueStatus.COMPLETED);\n  }\n\n  // Endpoint for pending queues with details\n  @Get('pending/details')\n  findPendingWithDetails() {\n    return this.queueService.findByStatusWithDetails(QueueStatus.PENDING);\n  }\n\n  // Endpoint for serving queues with details\n  @Get('serving/details')\n  findServingWithDetails() {\n    return this.queueService.findByStatusWithDetails(QueueStatus.SERVING);\n  }\n\n  // Endpoint for bulk fetching queue details\n  @Post('bulk-details')\n  getDetailsForMultipleQueues(@Body() body: { queueIds: number[] }) {\n    return this.queueService.getDetailsForMultipleQueues(body.queueIds);\n  }\n  // Endpoint for updating queue status\n  @Patch(':id/status')\n  async updateStatus(\n    @Param('id') id: string,\n    @Body() body: { status: QueueStatus },\n  ) {\n    console.log(`PATCH /queue/${id}/status with body:`, body);\n\n    try {\n      // Validate the status enum value\n      if (!Object.values(QueueStatus).includes(body.status)) {\n        console.error(`Invalid status value: ${body.status}`);\n        return {\n          error: 'Invalid status value',\n          validValues: Object.values(QueueStatus),\n        };\n      }\n\n      // Update the queue status\n      const result = await this.queueService.update(+id, {\n        status: body.status,\n      });\n      console.log(`Queue ${id} status updated successfully to ${body.status}`);\n      return result;\n    } catch (error) {\n      console.error(`Error updating queue ${id} status:`, error);\n      throw error;\n    }\n  }\n\n  @Get('stats')\n  getStats() {\n    return this.queueService.getStats();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.queueService.findOne(+id);\n  }\n\n  @Get('number/:queueNumber')\n  findByQueueNumber(@Param('queueNumber') queueNumber: string) {\n    return this.queueService.findByQueueNumber(queueNumber);\n  }\n\n  @Get(':id/details')\n  getQueueDetails(@Param('id') id: string) {\n    return this.queueService.getQueueDetails(+id);\n  }\n\n  @Get(':id/position')\n  getQueuePosition(@Param('id') id: string) {\n    return this.queueService.getQueuePosition(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateQueueDto: UpdateQueueDto) {\n    return this.queueService.update(+id, updateQueueDto);\n  }\n\n  @Post('counter/:counterId/call-next')\n  callNext(@Param('counterId') counterId: string) {\n    return this.queueService.callNext(+counterId);\n  }\n\n  @Post('counter')\n  addCounter(@Body() data: { name: string }) {\n    return this.queueService.addCounter(data.name);\n  }\n\n  @Get('counters')\n  getCounters() {\n    return this.queueService.getCounters();\n  }\n\n  @Get(':id/exists')\n  async checkQueueExists(@Param('id') id: string) {\n    try {\n      const exists = await this.queueService.checkExists(+id);\n      return { exists };\n    } catch (error) {\n      console.error(`Error checking if queue ${id} exists:`, error);\n      return { exists: false };\n    }\n  }\n\n  @Post('admin/daily-reset')\n  @UseGuards(JwtAuthGuard)\n  async manualDailyReset(@User() user?: UserEntity) {\n    // Only allow admins to trigger manual reset\n    if (!user || !user.roles?.includes['admin'] && !user.roles?.includes['super_admin']) {\n      throw new Error('Unauthorized: Admin access required');\n    }\n\n    console.log(`Manual daily reset triggered by admin: ${user.username}`);\n    await this.queueSchedulerService.manualDailyReset();\n    \n    return {\n      success: true,\n      message: 'Daily queue reset completed successfully',\n      timestamp: new Date(),\n    };\n  }\n\n  @Get('admin/pending-count')\n  @UseGuards(JwtAuthGuard)\n  async getTodayPendingCount() {\n    const count = await this.queueSchedulerService.getTodayPendingCount();\n    return {\n      pendingCount: count,\n      date: new Date().toDateString(),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/QueueDetails.html":{"url":"entities/QueueDetails.html","title":"entity - QueueDetails","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  QueueDetails\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/entities/queue-details.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                address\n                            \n                            \n                                    \n                                appointmentType\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isGuest\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                middleInitial\n                            \n                            \n                                    \n                                phoneNumber\n                            \n                            \n                                    \n                                    \n                                queue\n                            \n                            \n                                    \n                                queueId\n                            \n                            \n                                    \n                                reasonOfVisit\n                            \n                            \n                                    \n                                    \n                                user\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        appointmentType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'appointment_type'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'first_name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isGuest\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'is_guest', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'last_name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        middleInitial\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'middle_initial', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'phone_number', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        queue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Queue\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, queue => queue.details, {onDelete: 'CASCADE'})@JoinColumn({name: 'queue_id', foreignKeyConstraintName: 'fk_queue_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        queueId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'queue_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reasonOfVisit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'reason_of_visit'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {onDelete: 'SET NULL', nullable: true})@JoinColumn({name: 'user_id', foreignKeyConstraintName: 'fk_user_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'user_id', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:24\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  JoinColumn,\n} from 'typeorm';\nimport { Queue } from './queue.entity';\nimport { User } from '../../../users/entities/user.entity';\n\n@Entity('queue_details')\nexport class QueueDetails {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ name: 'queue_id' })\n  queueId: number;\n\n  @ManyToOne(() => Queue, (queue) => queue.details, { onDelete: 'CASCADE' })\n  @JoinColumn({ name: 'queue_id', foreignKeyConstraintName: 'fk_queue_id' })\n  queue: Queue;\n\n  @Column({ name: 'user_id', nullable: true })\n  userId: number;\n\n  @ManyToOne(() => User, { onDelete: 'SET NULL', nullable: true })\n  @JoinColumn({ name: 'user_id', foreignKeyConstraintName: 'fk_user_id' })\n  user: User;\n\n  @Column({ name: 'first_name' })\n  firstName: string;\n\n  @Column({ name: 'last_name' })\n  lastName: string;\n\n  @Column({ name: 'middle_initial', nullable: true })\n  middleInitial: string;\n\n  @Column({ nullable: true })\n  address: string;\n\n  @Column({ name: 'phone_number', nullable: true })\n  phoneNumber: string;\n\n  @Column({ name: 'reason_of_visit' })\n  reasonOfVisit: string;\n\n  @Column({ name: 'appointment_type' })\n  appointmentType: string;\n\n  @Column({ name: 'is_guest', default: false })\n  isGuest: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QueueGateway.html":{"url":"classes/QueueGateway.html","title":"class - QueueGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QueueGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/queue.gateway.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        OnGatewayConnection\n                        OnGatewayDisconnect\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleConnection\n                            \n                            \n                                handleDisconnect\n                            \n                            \n                                    \n                                    Async\n                                handleGetQueuePosition\n                            \n                            \n                                    \n                                    Async\n                                handleJoinCounter\n                            \n                            \n                                    \n                                    Async\n                                handleJoinQueue\n                            \n                            \n                                    \n                                    Async\n                                handleJoinQueueUpdates\n                            \n                            \n                                notifyCounterUpdate\n                            \n                            \n                                notifyQueueUpdate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(queueService: QueueService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/queue/queue.gateway.ts:26\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        queueService\n                                                  \n                                                        \n                                                                        QueueService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(QueueGateway.name)\n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/queue.gateway.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/queue.gateway.ts:26\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handleConnection\n                        \n                    \n                \n            \n            \n                \nhandleConnection(client: Socket)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleDisconnect\n                        \n                    \n                \n            \n            \n                \nhandleDisconnect(client: Socket)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleGetQueuePosition\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleGetQueuePosition(client: Socket, queueId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('getQueuePosition')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleJoinCounter\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleJoinCounter(client: Socket, counterId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('joinCounter')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                counterId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleJoinQueue\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleJoinQueue(client: Socket, queueId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('joinQueue')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleJoinQueueUpdates\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleJoinQueueUpdates(client: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('join_queue_updates')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notifyCounterUpdate\n                        \n                    \n                \n            \n            \n                \nnotifyCounterUpdate(counterId: number, data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                counterId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notifyQueueUpdate\n                        \n                    \n                \n            \n            \n                \nnotifyQueueUpdate(queueId: number, data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:70\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  WebSocketGateway,\n  WebSocketServer,\n  SubscribeMessage,\n  OnGatewayConnection,\n  OnGatewayDisconnect,\n} from '@nestjs/websockets';\nimport { Server, Socket } from 'socket.io';\nimport { QueueService } from './queue.service';\nimport { Logger, Inject, forwardRef } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\n@WebSocketGateway({\n  cors: {\n    origin: process.env.WS_CORS_ORIGIN || 'http://localhost:5173',\n    methods: ['GET', 'POST'],\n    credentials: true,\n    allowedHeaders: ['Content-Type', 'Authorization'],\n  },\n  namespace: 'socket.io', // Add this to match client expectation\n})\nexport class QueueGateway implements OnGatewayConnection, OnGatewayDisconnect {\n  private readonly logger = new Logger(QueueGateway.name);\n\n  @WebSocketServer()\n  server: Server;\n\n  constructor(\n    @Inject(forwardRef(() => QueueService))\n    private readonly queueService: QueueService,\n    private readonly configService: ConfigService,\n  ) {}\n\n  handleConnection(client: Socket) {\n    this.logger.log(`Client connected: ${client.id}`);\n    this.logger.log(`CORS origin configured: ${this.configService.get('WS_CORS_ORIGIN')}`);\n  }\n\n  handleDisconnect(client: Socket) {\n    this.logger.log(`Client disconnected: ${client.id}`);\n  }\n\n  @SubscribeMessage('joinQueue')\n  async handleJoinQueue(client: Socket, queueId: number) {\n    await client.join(`queue_${queueId}`);\n    const queueData = await this.queueService.getQueueDetails(queueId);\n    return queueData;\n  }\n\n  @SubscribeMessage('getQueuePosition')\n  async handleGetQueuePosition(client: Socket, queueId: number) {\n    const position = await this.queueService.getQueuePosition(queueId);\n    return { position };\n  }\n\n  @SubscribeMessage('joinCounter')\n  async handleJoinCounter(client: Socket, counterId: number) {\n    await client.join(`counter_${counterId}`);\n    return { success: true };\n  }\n\n  @SubscribeMessage('join_queue_updates')\n  async handleJoinQueueUpdates(client: Socket) {\n    this.logger.log(`Socket ${client.id} joined queue updates`);\n    await client.join('queue_updates');\n    return { event: 'joined', data: 'Successfully joined queue updates' };\n  }\n\n  // Send updates to all clients or specific rooms\n  notifyQueueUpdate(queueId: number, data: any) {\n    void this.server.to(`queue_${queueId}`).emit('queueUpdate', data);\n    void this.server.emit('queueListUpdate'); // Global queue update\n  }\n\n  notifyCounterUpdate(counterId: number, data: any) {\n    void this.server.to(`counter_${counterId}`).emit('counterUpdate', data);\n    void this.server.emit('counterListUpdate'); // Global counter update\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/QueueModule.html":{"url":"modules/QueueModule.html","title":"module - QueueModule","body":"\n                   \n\n\n\n\n    Modules\n    QueueModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_QueueModule\n\n\n\ncluster_QueueModule_exports\n\n\n\ncluster_QueueModule_providers\n\n\n\n\nQueueGateway \n\nQueueGateway \n\n\n\nQueueSchedulerService \n\nQueueSchedulerService \n\n\n\nQueueService \n\nQueueService \n\n\n\nQueueModule\n\nQueueModule\n\nQueueGateway  -->\n\nQueueModule->QueueGateway \n\n\n\nQueueSchedulerService  -->\n\nQueueModule->QueueSchedulerService \n\n\n\nQueueService  -->\n\nQueueModule->QueueService \n\n\n\n\n\nQueueSchedulerService\n\nQueueSchedulerService\n\nQueueModule -->\n\nQueueSchedulerService->QueueModule\n\n\n\n\n\nQueueService\n\nQueueService\n\nQueueModule -->\n\nQueueService->QueueModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/queue/queue.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            QueueSchedulerService\n                        \n                        \n                            QueueService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            QueueController\n                        \n                        \n                            QueuesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            QueueGateway\n                        \n                        \n                            QueueSchedulerService\n                        \n                        \n                            QueueService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {\n  Module,\n  //forwardRef, // Uncomment if you need to use forwardRef\n} from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ScheduleModule } from '@nestjs/schedule';\nimport { QueueService } from './queue.service';\nimport { QueueController } from './queue.controller';\nimport { QueuesController } from './queues.controller';\nimport { QueueGateway } from './queue.gateway';\nimport { QueueSchedulerService } from './queue-scheduler.service';\nimport { Queue } from './entities/queue.entity';\nimport { QueueDetails } from './entities/queue-details.entity';\nimport { Counter } from '../counter/entities/counter.entity';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Queue, QueueDetails, Counter]),\n    ScheduleModule.forRoot(),\n  ],\n  controllers: [QueueController, QueuesController],\n  providers: [QueueService, QueueGateway, QueueSchedulerService],\n  exports: [QueueService, QueueGateway, QueueSchedulerService],\n})\nexport class QueueModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QueueSchedulerService.html":{"url":"injectables/QueueSchedulerService.html","title":"injectable - QueueSchedulerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  QueueSchedulerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/queue-scheduler.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getTodayPendingCount\n                            \n                            \n                                    \n                                    Async\n                                handleDailyQueueReset\n                            \n                            \n                                    Private\n                                    Async\n                                logDailyStatistics\n                            \n                            \n                                    Async\n                                manualDailyReset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(queueRepository: Repository, queueGateway: QueueGateway)\n                    \n                \n                        \n                            \n                                Defined in src/modules/queue/queue-scheduler.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        queueRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queueGateway\n                                                  \n                                                        \n                                                                        QueueGateway\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getTodayPendingCount\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTodayPendingCount()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue-scheduler.service.ts:144\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleDailyQueueReset\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleDailyQueueReset()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron('59 23 * * *', {name: 'daily-queue-reset', timeZone: 'Asia/Manila'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue-scheduler.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        logDailyStatistics\n                        \n                    \n                \n            \n            \n                \n                        \n                    logDailyStatistics(startOfDay: Date, endOfDay: Date)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue-scheduler.service.ts:105\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                startOfDay\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                endOfDay\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        manualDailyReset\n                        \n                    \n                \n            \n            \n                \n                        \n                    manualDailyReset()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue-scheduler.service.ts:138\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(QueueSchedulerService.name)\n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/queue-scheduler.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { Cron } from '@nestjs/schedule';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, Between } from 'typeorm';\nimport { Queue, QueueStatus } from './entities/queue.entity';\nimport { QueueGateway } from './queue.gateway';\n\n@Injectable()\nexport class QueueSchedulerService {\n  private readonly logger = new Logger(QueueSchedulerService.name);\n\n  constructor(\n    @InjectRepository(Queue)\n    private queueRepository: Repository,\n    private queueGateway: QueueGateway,\n  ) {}\n\n  // Run every day at 11:59 PM (23:59)\n  @Cron('59 23 * * *', {\n    name: 'daily-queue-reset',\n    timeZone: 'Asia/Manila', // Adjust to your timezone\n  })\n  async handleDailyQueueReset() {\n    this.logger.log('🔄 Starting daily queue reset process...');\n\n    try {\n      // Find all pending queues from today\n      const today = new Date();\n      const startOfDay = new Date(today);\n      startOfDay.setHours(0, 0, 0, 0);\n      \n      const endOfDay = new Date(today);\n      endOfDay.setHours(23, 59, 59, 999);\n\n      // Get all pending queues created today\n      const pendingQueues = await this.queueRepository.find({\n        where: {\n          status: QueueStatus.PENDING,\n          createdAt: Between(startOfDay, endOfDay),\n        },\n      });\n\n      this.logger.log(`📋 Found ${pendingQueues.length} pending queues to cancel`);\n\n      if (pendingQueues.length > 0) {\n        // Mark all pending queues as cancelled\n        const cancelledQueues = await this.queueRepository.save(\n          pendingQueues.map(queue => ({\n            ...queue,\n            status: QueueStatus.CANCELLED,\n            completedAt: new Date(), // Mark when they were cancelled\n          }))\n        );\n\n        this.logger.log(`❌ Cancelled ${cancelledQueues.length} pending queues`);\n\n        // Notify all connected clients about the queue cancellations\n        for (const queue of cancelledQueues) {\n          this.queueGateway.notifyQueueUpdate(queue.id, {\n            action: 'cancelled',\n            reason: 'End of day auto-cancellation',\n            queue: queue,\n          });\n        }\n\n        // Send a general notification about the daily reset\n        this.queueGateway.server.emit('dailyQueueReset', {\n          cancelledCount: cancelledQueues.length,\n          timestamp: new Date(),\n          message: 'Daily queue reset completed. All pending queues have been cancelled.',\n        });\n      }\n\n      // Also cancel any serving queues that weren't completed\n      const servingQueues = await this.queueRepository.find({\n        where: {\n          status: QueueStatus.SERVING,\n          createdAt: Between(startOfDay, endOfDay),\n        },\n      });\n\n      if (servingQueues.length > 0) {\n        const cancelledServingQueues = await this.queueRepository.save(\n          servingQueues.map(queue => ({\n            ...queue,\n            status: QueueStatus.CANCELLED,\n            completedAt: new Date(),\n          }))\n        );\n\n        this.logger.log(`❌ Cancelled ${cancelledServingQueues.length} serving queues`);\n      }\n\n      this.logger.log('✅ Daily queue reset completed successfully');\n\n      // Log statistics for the day\n      await this.logDailyStatistics(startOfDay, endOfDay);\n\n    } catch (error) {\n      this.logger.error('❌ Error during daily queue reset:', error);\n    }\n  }\n\n  // Optional: Log daily statistics\n  private async logDailyStatistics(startOfDay: Date, endOfDay: Date) {\n    try {\n      const [completed, cancelled, total] = await Promise.all([\n        this.queueRepository.count({\n          where: {\n            status: QueueStatus.COMPLETED,\n            createdAt: Between(startOfDay, endOfDay),\n          },\n        }),\n        this.queueRepository.count({\n          where: {\n            status: QueueStatus.CANCELLED,\n            createdAt: Between(startOfDay, endOfDay),\n          },\n        }),\n        this.queueRepository.count({\n          where: {\n            createdAt: Between(startOfDay, endOfDay),\n          },\n        }),\n      ]);\n\n      this.logger.log(`📊 Daily Statistics for ${startOfDay.toDateString()}:`);\n      this.logger.log(`   Total Queues: ${total}`);\n      this.logger.log(`   Completed: ${completed}`);\n      this.logger.log(`   Cancelled: ${cancelled}`);\n      this.logger.log(`   Completion Rate: ${total > 0 ? ((completed / total) * 100).toFixed(1) : 0}%`);\n    } catch (error) {\n      this.logger.error('Error logging daily statistics:', error);\n    }\n  }\n\n  // Manual trigger for testing or admin use\n  async manualDailyReset() {\n    this.logger.log('🔄 Manual daily queue reset triggered');\n    await this.handleDailyQueueReset();\n  }\n\n  // Get pending queues count for today\n  async getTodayPendingCount(): Promise {\n    const today = new Date();\n    const startOfDay = new Date(today);\n    startOfDay.setHours(0, 0, 0, 0);\n    \n    const endOfDay = new Date(today);\n    endOfDay.setHours(23, 59, 59, 999);\n\n    return await this.queueRepository.count({\n      where: {\n        status: QueueStatus.PENDING,\n        createdAt: Between(startOfDay, endOfDay),\n      },\n    });\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QueueService.html":{"url":"injectables/QueueService.html","title":"injectable - QueueService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  QueueService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/queue.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addCounter\n                            \n                            \n                                    Async\n                                callNext\n                            \n                            \n                                    Async\n                                checkExists\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByQueueNumber\n                            \n                            \n                                    Async\n                                findByStatus\n                            \n                            \n                                    Async\n                                findByStatusWithDetails\n                            \n                            \n                                    Async\n                                findByUserIdWithDetails\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getCounters\n                            \n                            \n                                    Async\n                                getDetailsForMultipleQueues\n                            \n                            \n                                    Async\n                                getQueueDetails\n                            \n                            \n                                    Async\n                                getQueuePosition\n                            \n                            \n                                    Async\n                                getStats\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(queueRepository: Repository, queueDetailsRepository: Repository, counterRepository: Repository, queueGateway: QueueGateway)\n                    \n                \n                        \n                            \n                                Defined in src/modules/queue/queue.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        queueRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queueDetailsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        counterRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queueGateway\n                                                  \n                                                        \n                                                                        QueueGateway\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addCounter\n                        \n                    \n                \n            \n            \n                \n                        \n                    addCounter(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:475\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        callNext\n                        \n                    \n                \n            \n            \n                \n                        \n                    callNext(counterId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:358\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                counterId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        checkExists\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkExists(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:488\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createQueueDto: CreateQueueDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createQueueDto\n                                            \n                                                            CreateQueueDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:123\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByQueueNumber\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByQueueNumber(queueNumber: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:148\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueNumber\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByStatus(status: QueueStatus)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:129\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            QueueStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByStatusWithDetails\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByStatusWithDetails(status: QueueStatus)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:304\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            QueueStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByUserIdWithDetails\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByUserIdWithDetails(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:495\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:136\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCounters\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCounters()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:481\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getDetailsForMultipleQueues\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDetailsForMultipleQueues(queueIds: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:269\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueIds\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getQueueDetails\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQueueDetails(queueId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:160\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getQueuePosition\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQueuePosition(queueId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:218\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:428\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateQueueDto: UpdateQueueDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.service.ts:176\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateQueueDto\n                                            \n                                                            UpdateQueueDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  Inject,\n  forwardRef,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, LessThanOrEqual, LessThan, In, Between } from 'typeorm';\nimport { Queue, QueueStatus } from './entities/queue.entity';\nimport { QueueDetails } from './entities/queue-details.entity';\nimport {\n  Counter,\n  //CounterStatus, //Uncomment if you need to use CounterStatus\n} from '../counter/entities/counter.entity';\nimport { CreateQueueDto } from './dto/create-queue.dto';\nimport { UpdateQueueDto } from './dto/update-queue.dto';\nimport { QueueGateway } from './queue.gateway';\n\n@Injectable()\nexport class QueueService {\n  constructor(\n    @InjectRepository(Queue)\n    private queueRepository: Repository,\n    @InjectRepository(QueueDetails)\n    private queueDetailsRepository: Repository,\n    @InjectRepository(Counter)\n    private counterRepository: Repository,\n    @Inject(forwardRef(() => QueueGateway))\n    private queueGateway: QueueGateway,\n  ) {}\n\n  async create(createQueueDto: CreateQueueDto) {\n    // Generate a queue number based on date and sequence\n    const today = new Date();\n    const dateStr = `${today.getFullYear()}${String(today.getMonth() + 1).padStart(2, '0')}${String(today.getDate()).padStart(2, '0')}`;\n\n    // Get the start and end of today for accurate daily counting\n    const todayStart = new Date(today);\n    todayStart.setHours(0, 0, 0, 0);\n    \n    const todayEnd = new Date(today);\n    todayEnd.setHours(23, 59, 59, 999);\n\n    // Count ONLY queues created TODAY (this will reset to 0 each day)\n    const todayCount = await this.queueRepository.count({\n      where: {\n        createdAt: Between(todayStart, todayEnd),\n      },\n    });\n\n    // Format the queue number: YYYYMMDD-XXX (using 3 digits for daily sequence)\n    // This keeps your existing backend format but ensures daily reset\n    const queueNumber = `${dateStr}-${String(todayCount + 1).padStart(3, '0')}`;\n\n    console.log(`Creating queue number: ${queueNumber} for today. Daily count: ${todayCount + 1}`);\n\n    // Create and save the queue\n    const queue = this.queueRepository.create({\n      queueNumber,\n      status: QueueStatus.PENDING,\n      estimatedWaitTime: 15 * (todayCount + 1), // Simple estimation: 15 minutes per person\n    });\n\n    const savedQueue = await this.queueRepository.save(queue);\n\n    // Simplify the user ID handling\n    const userId =\n      typeof createQueueDto.userId === 'number'\n        ? createQueueDto.userId\n        : typeof createQueueDto.userId === 'string' &&\n            createQueueDto.userId !== 'guest'\n          ? Number(createQueueDto.userId)\n          : undefined;\n\n    // isGuest is already a boolean from the DTO validation\n    const isGuest = createQueueDto.isGuest ?? !userId;\n\n    // Log for debugging\n    console.log('=== QUEUE SERVICE CREATE DEBUG ===');\n    console.log('Creating queue details with:', {\n      providedUserId: createQueueDto.userId,\n      parsedUserId: userId,\n      providedIsGuest: createQueueDto.isGuest,\n      finalIsGuest: isGuest,\n    });\n\n    // Create queue details\n    const queueDetails = this.queueDetailsRepository.create({\n      queueId: savedQueue.id,\n      userId: userId,\n      firstName: createQueueDto.firstName,\n      lastName: createQueueDto.lastName,\n      middleInitial: createQueueDto.middleInitial,\n      address: createQueueDto.address,\n      phoneNumber: createQueueDto.phoneNumber,\n      reasonOfVisit: createQueueDto.reasonOfVisit,\n      appointmentType: createQueueDto.appointmentType,\n      isGuest: isGuest,\n    });\n\n    // Set the queue relation\n    queueDetails.queue = savedQueue;\n\n    const savedDetails = await this.queueDetailsRepository.save(queueDetails);\n\n    console.log('Queue details saved with isGuest:', savedDetails.isGuest);\n\n    // Get queue position\n    const position = await this.getQueuePosition(savedQueue.id);\n\n    const result = { queue: savedQueue, details: savedDetails, position };\n\n    // Notify all clients that a new queue has been created\n    this.queueGateway.server.emit('queueListUpdate', {\n      action: 'created',\n      queueId: savedQueue.id,\n    });\n\n    return result;\n  }\n\n  async findAll() {\n    return await this.queueRepository.find({\n      order: { createdAt: 'ASC' },\n    });\n  }\n\n  async findByStatus(status: QueueStatus) {\n    return await this.queueRepository.find({\n      where: { status },\n      order: { createdAt: 'ASC' },\n    });\n  }\n\n  async findOne(id: number) {\n    const queue = await this.queueRepository.findOne({\n      where: { id },\n    });\n\n    if (!queue) {\n      throw new NotFoundException(`Queue #${id} not found`);\n    }\n\n    return queue;\n  }\n\n  async findByQueueNumber(queueNumber: string) {\n    const queue = await this.queueRepository.findOne({\n      where: { queueNumber },\n    });\n\n    if (!queue) {\n      throw new NotFoundException(`Queue #${queueNumber} not found`);\n    }\n\n    return queue;\n  }\n\n  async getQueueDetails(queueId: number) {\n    const queue = await this.findOne(queueId);\n\n    const details = await this.queueDetailsRepository.findOne({\n      where: { queueId },\n      relations: ['user'],\n    });\n\n    if (!details) {\n      throw new NotFoundException(`Details for queue #${queueId} not found`);\n    }\n\n    const position = await this.getQueuePosition(queueId);\n\n    return { queue, details, position };\n  }\n  async update(id: number, updateQueueDto: UpdateQueueDto) {\n    console.log(`Updating queue ${id} with:`, updateQueueDto);\n\n    try {\n      // Find the queue\n      const queue = await this.findOne(id);\n      console.log('Found queue:', queue);\n\n      if (updateQueueDto.status) {\n        // Log the status change\n        console.log(\n          `Changing status from ${queue.status} to ${updateQueueDto.status}`,\n        );\n        queue.status = updateQueueDto.status;\n\n        // If completed, set completion time\n        if (updateQueueDto.status === QueueStatus.COMPLETED) {\n          queue.completedAt = new Date();\n        }\n      }\n\n      if (updateQueueDto.counterNumber) {\n        queue.counterNumber = updateQueueDto.counterNumber;\n      }\n\n      // Save the updated queue\n      const updatedQueue = await this.queueRepository.save(queue);\n      console.log('Queue updated successfully:', updatedQueue);\n\n      // Notify clients about the queue update\n      this.queueGateway.notifyQueueUpdate(id, {\n        action: 'updated',\n        queue: updatedQueue,\n      });\n\n      return updatedQueue;\n    } catch (error) {\n      console.error(`Error updating queue ${id}:`, error);\n      throw error;\n    }\n  }\n\n  async getQueuePosition(queueId: number) {\n    console.log(`Getting position for queue ID: ${queueId}`);\n\n    const queue = await this.findOne(queueId);\n    console.log(`Found queue:`, queue);\n\n    // If the queue doesn't exist, return position 0\n    if (!queue) {\n      console.log('Queue not found');\n      return { position: 0 };\n    }\n\n    // If the queue is not pending, return special position values\n    if (queue.status === QueueStatus.SERVING) {\n      console.log('Queue is currently being served');\n      return { position: 0, status: 'serving' };\n    }\n\n    if (queue.status === QueueStatus.COMPLETED) {\n      console.log('Queue is completed');\n      return { position: 0, status: 'completed' };\n    }\n\n    if (queue.status !== QueueStatus.PENDING) {\n      console.log(`Queue status is ${queue.status}, not pending`);\n      return { position: 0, status: queue.status };\n    }\n\n    // Count serving queues (they are ahead of all pending queues)\n    const servingCount = await this.queueRepository.count({\n      where: {\n        status: QueueStatus.SERVING,\n      },\n    });\n    console.log(`Serving queues count: ${servingCount}`);\n\n    // Count how many pending queues are ahead of this one (created earlier)\n    const pendingAheadCount = await this.queueRepository.count({\n      where: {\n        status: QueueStatus.PENDING,\n        createdAt: LessThan(queue.createdAt), // Queues created before this one\n      },\n    });\n    console.log(`Pending queues ahead: ${pendingAheadCount}`);\n\n    // Total position = serving queues + pending queues ahead + 1\n    const position = servingCount + pendingAheadCount + 1;\n    console.log(`Calculated position: ${position}`);\n\n    return { position, status: 'pending' };\n  }\n  async getDetailsForMultipleQueues(queueIds: number[]) {\n    console.log('Getting details for queue IDs:', queueIds);\n\n    if (!queueIds || queueIds.length === 0) {\n      return {};\n    }\n\n    const detailsMap = {};\n\n    try {\n      // Fetch all queue details in a single query for better performance\n      const allDetails = await this.queueDetailsRepository.find({\n        where: {\n          queueId: In(queueIds),\n        },\n        relations: ['user'],\n      });\n\n      console.log(\n        `Found ${allDetails.length} details for ${queueIds.length} queues`,\n      );\n\n      // Organize by queueId for easy lookup\n      allDetails.forEach((detail) => {\n        detailsMap[detail.queueId] = detail;\n      });\n\n      return detailsMap;\n    } catch (error: unknown) {\n      console.error('Error fetching details for multiple queues:', error);\n      // Return empty details rather than failing\n      return {};\n    }\n  }\n\n  async findByStatusWithDetails(status: QueueStatus) {\n    console.log(`Finding queues with status: ${status} and their details`);\n\n    try {\n      // First get all queues with this status\n      const queues = await this.queueRepository.find({\n        where: { status },\n        order: { createdAt: 'ASC' },\n      });\n\n      console.log(`Found ${queues.length} queues with status ${status}`);\n\n      if (queues.length === 0) {\n        return [];\n      }\n\n      // Get all queue IDs\n      const queueIds = queues.map((queue) => queue.id);\n\n      // Fetch details for all these queues\n      const detailsMap = await this.getDetailsForMultipleQueues(queueIds);\n\n      // Combine queue and details data\n      const result = queues.map((queue) => {\n        return {\n          ...queue,\n          details: detailsMap[queue.id] || null,\n        };\n      });\n\n      console.log(`Returning ${result.length} queues with details`);\n      return result;\n    } catch (error: unknown) {\n      // Handle error message extraction without triggering ESLint\n      let errorMessage: string;\n\n      if (error instanceof Error) {\n        errorMessage = error.message;\n      } else {\n        errorMessage = String(error);\n      }\n\n      console.error('Error in findByStatusWithDetails:', errorMessage);\n\n      if (error instanceof Error) {\n        throw new Error(`Failed to get queue details: ${error.message}`);\n      }\n      if (typeof error === 'string') {\n        throw new Error(`Failed to get queue details: ${error}`);\n      }\n      throw new Error('Failed to get queue details: An unknown error occurred');\n    }\n  }\n\n  async callNext(counterId: number) {\n    const counter = await this.counterRepository.findOne({\n      where: { id: counterId },\n      relations: ['currentQueue'],\n    });\n\n    if (!counter) {\n      throw new NotFoundException(`Counter #${counterId} not found`);\n    }\n\n    // Mark current queue as completed if exists\n    if (counter.currentQueue) {\n      counter.currentQueue.status = QueueStatus.COMPLETED;\n      counter.currentQueue.completedAt = new Date();\n      await this.queueRepository.save(counter.currentQueue);\n    }\n\n    // Find the next pending queue\n    const nextQueue = await this.queueRepository.findOne({\n      where: { status: QueueStatus.PENDING },\n      order: { createdAt: 'ASC' },\n    });\n\n    if (!nextQueue) {\n      counter.currentQueueId = null;\n      counter.currentQueue = null;\n      await this.counterRepository.save(counter);\n      return { counter, message: 'No more queues waiting' };\n    }\n\n    // Update the next queue\n    nextQueue.status = QueueStatus.SERVING;\n    nextQueue.counterNumber = counter.name;\n    await this.queueRepository.save(nextQueue);\n\n    // Update counter\n    counter.currentQueueId = nextQueue.id;\n    counter.currentQueue = nextQueue;\n    await this.counterRepository.save(counter);\n\n    // Get associated details\n    const details = await this.queueDetailsRepository.findOne({\n      where: { queueId: nextQueue.id },\n    });\n\n    const result = {\n      counter,\n      queue: nextQueue,\n      details,\n      message: 'Next queue called successfully',\n    };\n\n    if (nextQueue) {\n      // Notify the specific queue room that it's their turn\n      this.queueGateway.notifyQueueUpdate(nextQueue.id, {\n        action: 'called',\n        counterName: counter.name,\n        counterId: counter.id,\n      });\n    }\n\n    // Notify counter clients\n    this.queueGateway.notifyCounterUpdate(counterId, {\n      action: 'nextCalled',\n      ...result,\n    });\n\n    return result;\n  }\n\n  async getStats() {\n    const [\n      pendingCount,\n      servingCount,\n      completedCount,\n      cancelledCount,\n      totalCount,\n    ] = await Promise.all([\n      this.queueRepository.count({ where: { status: QueueStatus.PENDING } }),\n      this.queueRepository.count({ where: { status: QueueStatus.SERVING } }),\n      this.queueRepository.count({ where: { status: QueueStatus.COMPLETED } }),\n      this.queueRepository.count({ where: { status: QueueStatus.CANCELLED } }),\n      this.queueRepository.count(),\n    ]);\n\n    // Calculate average wait time\n    const completedQueues = await this.queueRepository.find({\n      where: {\n        status: QueueStatus.COMPLETED,\n        completedAt: LessThanOrEqual(new Date()),\n      },\n      select: ['createdAt', 'completedAt'],\n    });\n\n    let averageWaitTime = 0;\n    if (completedQueues.length > 0) {\n      const totalWaitTimeMs = completedQueues.reduce((total, queue) => {\n        return (\n          total + (queue.completedAt.getTime() - queue.createdAt.getTime())\n        );\n      }, 0);\n      averageWaitTime = Math.floor(\n        totalWaitTimeMs / completedQueues.length / 60000,\n      ); // Convert to minutes\n    }\n\n    return {\n      pending: pendingCount,\n      serving: servingCount,\n      completed: completedCount,\n      cancelled: cancelledCount,\n      total: totalCount,\n      averageWaitTime,\n    };\n  }\n\n  // Add a counter\n  async addCounter(name: string) {\n    const counter = this.counterRepository.create({ name });\n    return await this.counterRepository.save(counter);\n  }\n\n  // Get all counters\n  async getCounters() {\n    return await this.counterRepository.find({\n      relations: ['currentQueue'],\n    });\n  }\n\n  // Check if queue exists\n  async checkExists(id: number): Promise {\n    const queue = await this.queueRepository.findOne({\n      where: { id },\n    });\n    return !!queue;\n  }\n\n  async findByUserIdWithDetails(userId: string) {\n    // Convert string userId to number since the database expects a number\n    const userIdNumber = parseInt(userId, 10);\n\n    if (isNaN(userIdNumber)) {\n      console.error('Invalid userId provided:', userId);\n      return [];\n    }\n\n    // First, let's find the user's queue details that contain the userId\n    const userDetails = await this.queueDetailsRepository.find({\n      where: {\n        userId: userIdNumber,\n      },\n      relations: ['queue'],\n    });\n\n    // Extract queue IDs from the details\n    const queueIds = userDetails.map((detail) => detail.queue.id);\n\n    if (queueIds.length === 0) {\n      return [];\n    }\n\n    // Find ALL queues (including completed ones) but filter them in the frontend\n    // Change this to include completed queues temporarily so we can clear them\n    return await this.queueRepository.find({\n      where: {\n        id: In(queueIds),\n        // Remove status filter to get all queues including completed ones\n      },\n      relations: ['details'],\n      order: { createdAt: 'ASC' },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/QueuesController.html":{"url":"controllers/QueuesController.html","title":"controller - QueuesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  QueuesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/queues.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                queues\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                getQueueById\n                            \n                            \n                                    \n                                    Async\n                                getUserQueues\n                            \n                            \n                                    \n                                    Async\n                                getWalkInQueues\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getQueueById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQueueById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queues.controller.ts:109\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getUserQueues\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserQueues(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('user/:userId')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queues.controller.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getWalkInQueues\n                        \n                    \n                \n            \n            \n                \n                        \n                    getWalkInQueues()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('walk-in')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queues.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param } from '@nestjs/common';\nimport { QueueService } from './queue.service';\nimport { QueueStatus } from './entities/queue.entity';\n\ninterface QueueDetails {\n  firstName?: string;\n  lastName?: string;\n  middleInitial?: string;\n  reasonOfVisit?: string;\n  address?: string;\n  phoneNumber?: string;\n}\n\n@Controller('queues')\nexport class QueuesController {\n  constructor(private readonly queueService: QueueService) {}\n  // This endpoint is for supporting the legacy API path that the frontend is using\n  @Get('walk-in')\n  async getWalkInQueues() {\n    console.log('GET /queues/walk-in endpoint called');\n    try {\n      // Get both pending and serving queues with details using the service methods\n      const [pendingQueuesWithDetails, servingQueuesWithDetails] =\n        await Promise.all([\n          this.queueService.findByStatusWithDetails(QueueStatus.PENDING),\n          this.queueService.findByStatusWithDetails(QueueStatus.SERVING),\n        ]);\n\n      console.log('Found pending queues:', pendingQueuesWithDetails.length);\n      console.log('Found serving queues:', servingQueuesWithDetails.length);\n\n      // Combine all queues\n      const allQueues = [\n        ...pendingQueuesWithDetails,\n        ...servingQueuesWithDetails,\n      ];\n\n      // Extract details from the nested structure and flatten them for the frontend\n      const result = allQueues.map((queue) => {\n        // For debugging\n        console.log('Processing queue:', queue.id, 'status:', queue.status);\n\n        // Handle potential null/undefined details\n        const details: QueueDetails | null = Array.isArray(queue.details)\n          ? (queue.details[0] as QueueDetails)\n          : (queue.details as QueueDetails);\n\n        return {\n          id: queue.id,\n          queueNumber: queue.queueNumber,\n          status: queue.status,\n          counterNumber: queue.counterNumber,\n          createdAt: queue.createdAt,\n          completedAt: queue.completedAt,\n          estimatedWaitTime: queue.estimatedWaitTime,\n          firstName: details?.firstName || null,\n          lastName: details?.lastName || null,\n          middleInitial: details?.middleInitial || null,\n          reasonOfVisit: details?.reasonOfVisit || null,\n          address: details?.address || null,\n          phoneNumber: details?.phoneNumber || null,\n        };\n      });\n\n      console.log(`Returning ${result.length} walk-in queues`);\n      return result;\n    } catch (err: unknown) {\n      console.error('Error fetching walk-in queues:', err);\n      throw err;\n    }\n  }\n\n  @Get('user/:userId')\n  async getUserQueues(@Param('userId') userId: string) {\n    console.log('GET /queues/user/' + userId + ' endpoint called');\n    try {\n      // Find queues for the specific user that are not completed\n      const userQueues =\n        await this.queueService.findByUserIdWithDetails(userId);\n\n      console.log('Found user queues:', userQueues.length);\n\n      const result = userQueues.map((queue) => {\n        const details = Array.isArray(queue.details)\n          ? queue.details[0]\n          : queue.details;\n\n        return {\n          id: queue.id,\n          queueNumber: queue.queueNumber,\n          status: queue.status,\n          counterNumber: queue.counterNumber,\n          createdAt: queue.createdAt,\n          completedAt: queue.completedAt,\n          firstName: details?.firstName || null,\n          lastName: details?.lastName || null,\n          reasonOfVisit: details?.reasonOfVisit || null,\n        };\n      });\n\n      return result;\n    } catch (err) {\n      console.error('Error fetching user queues:', err);\n      throw err;\n    }\n  }\n\n  @Get(':id')\n  async getQueueById(@Param('id') id: string) {\n    console.log('GET /queues/' + id + ' endpoint called');\n    try {\n      const queueId = parseInt(id, 10);\n      if (isNaN(queueId)) {\n        throw new Error('Invalid queue ID');\n      }\n\n      const queue = await this.queueService.findOne(queueId);\n\n      if (!queue) {\n        throw new Error('Queue not found');\n      }\n\n      const details = Array.isArray(queue.details)\n        ? queue.details[0]\n        : queue.details;\n\n      return {\n        id: queue.id,\n        queueNumber: queue.queueNumber,\n        status: queue.status,\n        counterNumber: queue.counterNumber,\n        createdAt: queue.createdAt,\n        completedAt: queue.completedAt,\n        firstName: details?.firstName || null,\n        lastName: details?.lastName || null,\n        reasonOfVisit: details?.reasonOfVisit || null,\n      };\n    } catch (err) {\n      console.error('Error fetching queue:', err);\n      throw err;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/register.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for user registration\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                contactNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                middleName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                nameExtension\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        contactNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Contact number', example: '09123456789'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:87\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User email address', example: 'test@example.com'})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User first name', example: 'John'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User last name', example: 'Doe'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User middle name (optional)', example: 'Robert'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Full name (auto-generated)', example: 'John Robert Doe'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        nameExtension\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Name extension (e.g., Jr., III)', example: 'Jr.'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User password (min 8 characters)', example: 'password123', minLength: 8})@IsString()@IsNotEmpty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Username for login', example: 'john_doe'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  MinLength,\n} from 'class-validator';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\n/**\n * DTO for user registration\n * @class RegisterDto\n */\n\nexport class RegisterDto {\n  @ApiProperty({\n    description: 'User email address',\n    example: 'test@example.com',\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @ApiProperty({\n    description: 'Username for login',\n    example: 'john_doe',\n  })\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n\n  @ApiProperty({\n    description: 'User password (min 8 characters)',\n    example: 'password123',\n    minLength: 8,\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  password: string;\n\n  @ApiProperty({\n    description: 'User first name',\n    example: 'John',\n  })\n  @IsString()\n  @IsNotEmpty()\n  firstName: string;\n\n  @ApiPropertyOptional({\n    description: 'User middle name (optional)',\n    example: 'Robert',\n  })\n  @IsString()\n  @IsOptional()\n  middleName?: string;\n\n  @ApiProperty({\n    description: 'User last name',\n    example: 'Doe',\n  })\n  @IsString()\n  @IsNotEmpty()\n  lastName: string;\n\n  @ApiPropertyOptional({\n    description: 'Full name (auto-generated)',\n    example: 'John Robert Doe',\n  })\n  @IsString()\n  @IsOptional()\n  name?: string;\n\n  @ApiPropertyOptional({\n    description: 'Name extension (e.g., Jr., III)',\n    example: 'Jr.',\n  })\n  @IsString()\n  @IsOptional()\n  nameExtension?: string;\n\n  @ApiPropertyOptional({\n    description: 'Contact number',\n    example: '09123456789',\n  })\n  @IsString()\n  contactNumber?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser.html":{"url":"interfaces/RequestWithUser.html","title":"interface - RequestWithUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         AuthenticatedUser\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AuthenticatedUser\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  Get,\n  UseGuards,\n  Request,\n  UnauthorizedException,\n  Param,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\nimport { UpdateUserDto, AdminUpdateUserDto } from './dto/update-user.dto';\nimport { Roles } from './decorators/roles.decorator';\nimport { RolesGuard } from './guards/roles.guard';\nimport { AuthenticatedUser } from './jwt.strategy';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n  ApiParam,\n  ApiBody,\n} from '@nestjs/swagger';\n\ninterface RequestWithUser extends Request {\n  user: AuthenticatedUser;\n}\n\n@ApiTags('Authentication')\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @ApiOperation({ summary: 'User login' })\n  @ApiResponse({\n    status: 200,\n    description: 'Login successful',\n    schema: {\n      properties: {\n        access_token: { type: 'string' },\n        user: {\n          type: 'object',\n          properties: {\n            id: { type: 'number' },\n            email: { type: 'string' },\n            username: { type: 'string' },\n            roles: { type: 'array', items: { type: 'string' } },\n            defaultRole: { type: 'string' },\n          },\n        },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Unauthorized - invalid credentials',\n  })\n  @ApiBody({ type: LoginDto })\n  @Post('login')\n  async login(@Body() loginDto: LoginDto) {\n    console.log('Login request received:', loginDto);\n    try {\n      const result = await this.authService.login(loginDto);\n      return result;\n    } catch (error) {\n      throw new UnauthorizedException(\n        error instanceof Error ? error.message : 'Invalid credentials',\n      );\n    }\n  }\n\n  @ApiOperation({ summary: 'User registration' })\n  @ApiResponse({\n    status: 201,\n    description: 'Registration successful',\n    schema: {\n      properties: {\n        access_token: { type: 'string' },\n        user: {\n          type: 'object',\n          properties: {\n            id: { type: 'number' },\n            email: { type: 'string' },\n            username: { type: 'string' },\n            roles: { type: 'array', items: { type: 'string' } },\n            defaultRole: { type: 'string' },\n          },\n        },\n      },\n    },\n  })\n  @ApiResponse({ status: 400, description: 'Bad request - invalid data' })\n  @ApiResponse({\n    status: 409,\n    description: 'Conflict - email or username already exists',\n  })\n  @ApiBody({ type: RegisterDto })\n  @Post('register')\n  async register(@Body() registerDto: RegisterDto) {\n    console.log('Register endpoint hit with data:', registerDto); //Debugging Statement\n    return this.authService.register(registerDto);\n  }\n  @ApiOperation({ summary: 'Get user profile' })\n  @ApiResponse({ status: 200, description: 'Profile retrieved successfully' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @ApiBearerAuth('JWT-auth')\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  getProfile(@Request() req: RequestWithUser) {\n    // Add null check before converting to number\n    if (!req.user || req.user.id === undefined || req.user.id === null) {\n      throw new UnauthorizedException('Invalid user ID');\n    }\n    return this.authService.getProfile(Number(req.user.id));\n  }\n  @ApiOperation({\n    summary: 'Update user profile',\n    description: 'Allows a user to update their own profile information',\n  })\n  @ApiResponse({ status: 200, description: 'Profile updated successfully' })\n  @ApiResponse({ status: 400, description: 'Bad request - invalid data' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @ApiResponse({\n    status: 409,\n    description: 'Conflict - email or username already exists',\n  })\n  @ApiBearerAuth('JWT-auth')\n  @ApiBody({ type: UpdateUserDto })\n  @UseGuards(JwtAuthGuard)\n  @Post('update-profile')\n  async updateProfile(\n    @Request() req: RequestWithUser,\n    @Body() updateUserDto: UpdateUserDto,\n  ) {\n    // Add null check before converting to number\n    if (!req.user || req.user.id === undefined || req.user.id === null) {\n      throw new UnauthorizedException('Invalid user ID');\n    }\n\n    try {\n      return await this.authService.updateUserInfo(\n        Number(req.user.id),\n        updateUserDto,\n      );\n    } catch (error) {\n      throw new UnauthorizedException(\n        error instanceof Error ? error.message : 'Failed to update profile',\n      );\n    }\n  }\n  @ApiOperation({\n    summary: 'Admin update user',\n    description:\n      \"Allows administrators to update any user's information including role assignments\",\n  })\n  @ApiParam({ name: 'userId', description: 'ID of the user to update' })\n  @ApiBody({ type: AdminUpdateUserDto })\n  @ApiResponse({ status: 200, description: 'User successfully updated' })\n  @ApiResponse({ status: 400, description: 'Bad request - invalid input data' })\n  @ApiResponse({\n    status: 401,\n    description: 'Unauthorized - invalid credentials',\n  })\n  @ApiResponse({\n    status: 403,\n    description: 'Forbidden - insufficient permissions',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Not found - user or role not found',\n  })\n  @ApiResponse({\n    status: 409,\n    description: 'Conflict - email or username already exists',\n  })\n  @ApiBearerAuth('JWT-auth')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles('admin', 'super_admin')\n  @Post('admin/update-user/:userId')\n  async adminUpdateUser(\n    @Request() req: RequestWithUser,\n    @Param('userId') targetUserId: string,\n    @Body() updateUserDto: AdminUpdateUserDto,\n  ) {\n    // Add null check before converting to number\n    if (!req.user || req.user.id === undefined || req.user.id === null) {\n      throw new UnauthorizedException('Invalid admin ID');\n    }\n\n    try {\n      return await this.authService.adminUpdateUser(\n        Number(req.user.id),\n        Number(targetUserId),\n        updateUserDto,\n      );\n    } catch (error) {\n      throw new UnauthorizedException(\n        error instanceof Error ? error.message : 'Failed to update user',\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser-1.html":{"url":"interfaces/RequestWithUser-1.html","title":"interface - RequestWithUser-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/decorators/user.decorator.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         AuthenticatedUser\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AuthenticatedUser\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { createParamDecorator, ExecutionContext } from '@nestjs/common';\nimport { AuthenticatedUser } from '../jwt.strategy';\n\ninterface RequestWithUser {\n  user: AuthenticatedUser;\n}\n\nexport const User = createParamDecorator(\n  (data: unknown, ctx: ExecutionContext): AuthenticatedUser => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.user;\n  },\n);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser-2.html":{"url":"interfaces/RequestWithUser-2.html","title":"interface - RequestWithUser-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/roles.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ROLES_KEY } from '../decorators/roles.decorator';\n\n// Define interface for request with user\ninterface RequestWithUser extends Request {\n  user?: {\n    roles?: Array | string[];\n  };\n}\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(\n      ROLES_KEY,\n      [context.getHandler(), context.getClass()],\n    );\n\n    if (!requiredRoles) {\n      return true;\n    }\n\n    const request = context.switchToHttp().getRequest();\n    const userRoles = request.user?.roles || [];\n\n    // Handle both string array and object array formats\n    const roleNames = userRoles.map((role: string | { name: string }) =>\n      typeof role === 'string' ? role : (role as { name: string }).name,\n    );\n\n    return requiredRoles.some((role) => roleNames.includes(role));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Role.html":{"url":"entities/Role.html","title":"entity - Role","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Role\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/entities/role.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, user => user.roles)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:16\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, PrimaryGeneratedColumn, ManyToMany } from 'typeorm';\nimport { User } from '../../users/entities/user.entity';\n\n@Entity('roles')\nexport class Role {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true, nullable: false })\n  name: string;\n\n  @Column({ nullable: true })\n  description: string;\n\n  @ManyToMany(() => User, (user) => user.roles)\n  users: User[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RolesController.html":{"url":"controllers/RolesController.html","title":"controller - RolesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RolesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/roles.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                roles\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                getUserRoles\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@Roles('admin', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/roles/roles.controller.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@Roles('admin', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/roles/roles.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getUserRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserRoles(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('user/:userId')@Roles('admin', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/roles/roles.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, UseGuards } from '@nestjs/common';\nimport { RolesService } from './roles.service';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../auth/guards/roles.guard';\nimport { Roles } from '../auth/decorators/roles.decorator';\n\n@Controller('roles')\n@UseGuards(JwtAuthGuard, RolesGuard)\nexport class RolesController {\n  constructor(private readonly rolesService: RolesService) {}\n\n  @Get()\n  @Roles('admin', 'super_admin')\n  findAll() {\n    return this.rolesService.findAll();\n  }\n\n  @Get(':id')\n  @Roles('admin', 'super_admin')\n  findOne(@Param('id') id: string) {\n    return this.rolesService.findOne(+id);\n  }\n\n  @Get('user/:userId')\n  @Roles('admin', 'super_admin')\n  getUserRoles(@Param('userId') userId: string) {\n    return this.rolesService.getUserRoles(+userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/roles.guard.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/roles.guard.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ROLES_KEY } from '../decorators/roles.decorator';\n\n// Define interface for request with user\ninterface RequestWithUser extends Request {\n  user?: {\n    roles?: Array | string[];\n  };\n}\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(\n      ROLES_KEY,\n      [context.getHandler(), context.getClass()],\n    );\n\n    if (!requiredRoles) {\n      return true;\n    }\n\n    const request = context.switchToHttp().getRequest();\n    const userRoles = request.user?.roles || [];\n\n    // Handle both string array and object array formats\n    const roleNames = userRoles.map((role: string | { name: string }) =>\n      typeof role === 'string' ? role : (role as { name: string }).name,\n    );\n\n    return requiredRoles.some((role) => roleNames.includes(role));\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RolesModule.html":{"url":"modules/RolesModule.html","title":"module - RolesModule","body":"\n                   \n\n\n\n\n    Modules\n    RolesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_exports\n\n\n\ncluster_RolesModule_providers\n\n\n\n\nRolesService \n\nRolesService \n\n\n\nRolesModule\n\nRolesModule\n\nRolesService  -->\n\nRolesModule->RolesService \n\n\n\n\n\nRolesService\n\nRolesService\n\nRolesModule -->\n\nRolesService->RolesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/roles/roles.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RolesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RolesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RolesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Role } from './entities/role.entity';\nimport { User } from '../users/entities/user.entity';\nimport { RolesService } from './roles.service';\nimport { RolesController } from './roles.controller';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Role, User])],\n  providers: [RolesService],\n  controllers: [RolesController],\n  exports: [RolesService],\n})\nexport class RolesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RolesService.html":{"url":"injectables/RolesService.html","title":"injectable - RolesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RolesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/roles.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                assignRolesToUser\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByName\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getUserRoles\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(rolesRepository: Repository, usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/roles/roles.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        rolesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        assignRolesToUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    assignRolesToUser(userId: number, roleIds: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roleIds\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByName\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByName(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserRoles(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, In } from 'typeorm';\nimport { Role } from './entities/role.entity';\nimport { User } from '../users/entities/user.entity';\n\n@Injectable()\nexport class RolesService {\n  constructor(\n    @InjectRepository(Role)\n    private rolesRepository: Repository,\n\n    @InjectRepository(User)\n    private usersRepository: Repository,\n  ) {}\n\n  async findAll(): Promise {\n    return this.rolesRepository.find();\n  }\n\n  async findOne(id: number): Promise {\n    const role = await this.rolesRepository.findOne({ where: { id } });\n    if (!role) {\n      throw new NotFoundException(`Role with ID ${id} not found`);\n    }\n    return role;\n  }\n\n  async findByName(name: string): Promise {\n    const role = await this.rolesRepository.findOne({ where: { name } });\n    if (!role) {\n      throw new NotFoundException(`Role with name ${name} not found`);\n    }\n    return role;\n  }\n\n  async getUserRoles(userId: number): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id: userId },\n      relations: ['roles'],\n    });\n    return user ? user.roles : [];\n  }\n\n  async assignRolesToUser(userId: number, roleIds: number[]): Promise {\n    // Find the user\n    const user = await this.usersRepository.findOne({\n      where: { id: userId },\n      relations: ['roles'],\n    });\n\n    if (!user) {\n      throw new Error('User not found');\n    }\n\n    // Find the roles using In operator (replaces deprecated findByIds)\n    const roles = await this.rolesRepository.findBy({\n      id: In(roleIds),\n    });\n\n    // Assign roles to user\n    user.roles = roles;\n    await this.usersRepository.save(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAnnouncementDto.html":{"url":"classes/UpdateAnnouncementDto.html","title":"class - UpdateAnnouncementDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAnnouncementDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/announcement/dto/update-announcement.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateAnnouncementDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateAnnouncementDto } from './create-announcement.dto';\n\nexport class UpdateAnnouncementDto extends PartialType(CreateAnnouncementDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAppointmentDto.html":{"url":"classes/UpdateAppointmentDto.html","title":"class - UpdateAppointmentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAppointmentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/appointment/dto/update-appointment.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateAppointmentDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AppointmentStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEnum(AppointmentStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/update-appointment.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { IsOptional, IsEnum } from 'class-validator';\nimport { CreateAppointmentDto } from './create-appointment.dto';\nimport { AppointmentStatus } from '../entities/appointment.entity';\n\nexport class UpdateAppointmentDto extends PartialType(CreateAppointmentDto) {\n  @IsOptional()\n  @IsEnum(AppointmentStatus)\n  status?: AppointmentStatus;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateDocumentApplicationDto.html":{"url":"classes/UpdateDocumentApplicationDto.html","title":"class - UpdateDocumentApplicationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateDocumentApplicationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/document-applications/dto/update-document-application.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(\n  CreateDocumentApplicationDto,\n)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                statusMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ApplicationStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: ApplicationStatus, description: 'Application status', example: undefined, required: false})@IsOptional()@IsEnum(ApplicationStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/dto/update-document-application.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        statusMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Status message', example: 'Application approved and ready for pickup', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/dto/update-document-application.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateDocumentApplicationDto } from './create-document-application.dto';\nimport { IsEnum, IsOptional, IsString } from 'class-validator';\nimport { ApplicationStatus } from '../entities/document-application.entity';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class UpdateDocumentApplicationDto extends PartialType(\n  CreateDocumentApplicationDto,\n) {\n  @ApiProperty({\n    enum: ApplicationStatus,\n    description: 'Application status',\n    example: ApplicationStatus.APPROVED,\n    required: false,\n  })\n  @IsOptional()\n  @IsEnum(ApplicationStatus)\n  status?: ApplicationStatus;\n\n  @ApiProperty({\n    description: 'Status message',\n    example: 'Application approved and ready for pickup',\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  statusMessage?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateQueueDto.html":{"url":"classes/UpdateQueueDto.html","title":"class - UpdateQueueDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateQueueDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/dto/update-queue.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                counterNumber\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        counterNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/update-queue.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueueStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(QueueStatus)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/update-queue.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsEnum, IsOptional } from 'class-validator';\nimport { QueueStatus } from '../entities/queue.entity';\n\nexport class UpdateQueueDto {\n  @IsEnum(QueueStatus)\n  @IsOptional()\n  status?: QueueStatus;\n\n  @IsString()\n  @IsOptional()\n  counterNumber?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/update-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for updating user information (citizen)\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                contactNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                middleName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                nameExtension\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Complete address', example: '123 Main St, San Ildefonso, Bulacan'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        contactNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Contact number', example: '09123456789'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User email address', example: 'test@example.com'})@IsEmail()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'First name', example: 'John'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Last name', example: 'Doe'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Middle name', example: 'Robert'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        nameExtension\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Name extension (e.g., Jr., III)', example: 'Jr.'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User password (min 8 characters)', example: 'password123', minLength: 8})@IsString()@IsOptional()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Username', example: 'john_doe'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsOptional,\n  IsString,\n  MinLength,\n  IsNumber,\n  IsArray,\n} from 'class-validator';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\n/**\n * DTO for updating user information (citizen)\n * @class UpdateUserDto\n */\nexport class UpdateUserDto {\n  @ApiPropertyOptional({\n    description: 'User email address',\n    example: 'test@example.com',\n  })\n  @IsEmail()\n  @IsOptional()\n  email?: string;\n\n  @ApiPropertyOptional({ description: 'Username', example: 'john_doe' })\n  @IsString()\n  @IsOptional()\n  username?: string;\n\n  @ApiPropertyOptional({\n    description: 'User password (min 8 characters)',\n    example: 'password123',\n    minLength: 8,\n  })\n  @IsString()\n  @IsOptional()\n  @MinLength(8)\n  password?: string;\n\n  @ApiPropertyOptional({ description: 'First name', example: 'John' })\n  @IsString()\n  @IsOptional()\n  firstName?: string;\n\n  @ApiPropertyOptional({ description: 'Middle name', example: 'Robert' })\n  @IsString()\n  @IsOptional()\n  middleName?: string;\n\n  @ApiPropertyOptional({ description: 'Last name', example: 'Doe' })\n  @IsString()\n  @IsOptional()\n  lastName?: string;\n\n  @ApiPropertyOptional({\n    description: 'Name extension (e.g., Jr., III)',\n    example: 'Jr.',\n  })\n  @IsString()\n  @IsOptional()\n  nameExtension?: string;\n\n  @ApiPropertyOptional({\n    description: 'Contact number',\n    example: '09123456789',\n  })\n  @IsString()\n  @IsOptional()\n  contactNumber?: string;\n\n  @ApiPropertyOptional({\n    description: 'Complete address',\n    example: '123 Main St, San Ildefonso, Bulacan',\n  })\n  @IsString()\n  @IsOptional()\n  address?: string;\n}\n\n/**\n * DTO for admin to update any user\n * @class AdminUpdateUserDto\n */\nexport class AdminUpdateUserDto extends UpdateUserDto {\n  @ApiPropertyOptional({\n    description: 'Default role ID for the user',\n    example: 2,\n  })\n  @IsNumber()\n  @IsOptional()\n  defaultRoleId?: number;\n\n  @ApiPropertyOptional({\n    description: 'Array of role IDs to assign to the user',\n    example: [1, 2],\n    type: [Number],\n  })\n  @IsArray()\n  @IsOptional()\n  roleIds?: number[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserStatusDto.html":{"url":"classes/UpdateUserStatusDto.html","title":"class - UpdateUserStatusDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserStatusDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user-status.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                isActive\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: true, description: 'User active status'})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user-status.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsBoolean } from 'class-validator';\n\nexport class UpdateUserStatusDto {\n  @ApiProperty({\n    example: true,\n    description: 'User active status',\n  })\n  @IsBoolean()\n  isActive: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                contactNumber\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                defaultRole\n                            \n                            \n                                    \n                                defaultRoleId\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                middleName\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                nameExtension\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                roles\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        contactNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'contact_number', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        defaultRole\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {nullable: true})@JoinColumn({name: 'default_role_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        defaultRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'default_role_id', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'first_name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'is_active', default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'last_name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'middle_name', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        nameExtension\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'name_extension', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined)@JoinTable({name: 'user_roles', joinColumn: undefined, inverseJoinColumn: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({name: 'updated_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:23\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  ManyToOne,\n  JoinColumn,\n  ManyToMany,\n  JoinTable,\n} from 'typeorm';\nimport { Role } from '../../roles/entities/role.entity';\n\n@Entity('users')\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true })\n  email: string;\n\n  @Column({ unique: true })\n  username: string;\n\n  @Column()\n  password: string;\n\n  @Column({ name: 'first_name' })\n  firstName: string;\n\n  @Column({ name: 'middle_name', nullable: true })\n  middleName: string;\n\n  @Column({ name: 'last_name' })\n  lastName: string;\n\n  @Column()\n  name: string; // Keep for backward compatibility\n\n  @Column({ name: 'name_extension', nullable: true })\n  nameExtension: string;\n\n  @Column({ name: 'contact_number', nullable: true })\n  contactNumber: string;\n\n  @Column({ name: 'is_active', default: true })\n  isActive: boolean;\n\n  @CreateDateColumn({ name: 'created_at' })\n  createdAt: Date;\n\n  @UpdateDateColumn({ name: 'updated_at' })\n  updatedAt: Date;\n\n  @ManyToOne(() => Role, { nullable: true })\n  @JoinColumn({ name: 'default_role_id' })\n  defaultRole: Role;\n\n  @Column({ name: 'default_role_id', nullable: true })\n  defaultRoleId: number;\n\n  @ManyToMany(() => Role)\n  @JoinTable({\n    name: 'user_roles',\n    joinColumn: {\n      name: 'user_id',\n      referencedColumnName: 'id',\n    },\n    inverseJoinColumn: {\n      name: 'role_id',\n      referencedColumnName: 'id',\n    },\n  })\n  roles: Role[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserQueryDto.html":{"url":"classes/UserQueryDto.html","title":"class - UserQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/user-query.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                role\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                search\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 10, description: 'Number of items per page', minimum: 1})@IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-query.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 1, description: 'Page number', minimum: 1})@IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-query.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'citizen', description: 'Filter by role'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-query.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        search\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'john', description: 'Search term for name, email, or username'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-query.dto.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { IsOptional, IsString, IsNumber, Min } from 'class-validator';\nimport { Type } from 'class-transformer';\n\nexport class UserQueryDto {\n  @ApiPropertyOptional({\n    example: 1,\n    description: 'Page number',\n    minimum: 1,\n  })\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  page?: number = 1;\n\n  @ApiPropertyOptional({\n    example: 10,\n    description: 'Number of items per page',\n    minimum: 1,\n  })\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  limit?: number = 10;\n\n  @ApiPropertyOptional({\n    example: 'john',\n    description: 'Search term for name, email, or username',\n  })\n  @IsOptional()\n  @IsString()\n  search?: string;\n\n  @ApiPropertyOptional({\n    example: 'citizen',\n    description: 'Filter by role',\n  })\n  @IsOptional()\n  @IsString()\n  role?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserResponseDto.html":{"url":"classes/UserResponseDto.html","title":"class - UserResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/user-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                contactNumber\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                defaultRole\n                            \n                            \n                                    \n                                    Optional\n                                defaultRoleId\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    Optional\n                                middleName\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    Optional\n                                nameExtension\n                            \n                            \n                                    \n                                roles\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    Optional\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        contactNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '+639123456789', description: 'Contact number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2024-01-01T00:00:00.000Z', description: 'User creation date'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        defaultRole\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'citizen', description: 'Default role name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:87\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        defaultRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 4, description: 'Default role ID'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'john.doe@example.com', description: 'User email address'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'John', description: 'User first name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 1, description: 'User ID'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: true, description: 'User active status'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Doe', description: 'User last name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'Miguel', description: 'User middle name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'John Miguel Doe', description: 'Full name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        nameExtension\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'Jr.', description: 'Name extension'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined, description: 'User roles', type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2024-01-01T00:00:00.000Z', description: 'User last update date'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'johndoe', description: 'Username'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class UserResponseDto {\n  @ApiProperty({\n    example: 1,\n    description: 'User ID',\n  })\n  id: number;\n\n  @ApiProperty({\n    example: 'john.doe@example.com',\n    description: 'User email address',\n  })\n  email: string;\n\n  @ApiPropertyOptional({\n    example: 'johndoe',\n    description: 'Username',\n  })\n  username?: string;\n\n  @ApiProperty({\n    example: 'John',\n    description: 'User first name',\n  })\n  firstName: string;\n\n  @ApiPropertyOptional({\n    example: 'Miguel',\n    description: 'User middle name',\n  })\n  middleName?: string;\n\n  @ApiProperty({\n    example: 'Doe',\n    description: 'User last name',\n  })\n  lastName: string;\n\n  @ApiProperty({\n    example: 'John Miguel Doe',\n    description: 'Full name',\n  })\n  name: string;\n\n  @ApiPropertyOptional({\n    example: 'Jr.',\n    description: 'Name extension',\n  })\n  nameExtension?: string;\n\n  @ApiProperty({\n    example: '+639123456789',\n    description: 'Contact number',\n  })\n  contactNumber: string;\n\n  @ApiProperty({\n    example: true,\n    description: 'User active status',\n  })\n  isActive: boolean;\n\n  @ApiProperty({\n    example: '2024-01-01T00:00:00.000Z',\n    description: 'User creation date',\n  })\n  createdAt: Date;\n\n  @ApiProperty({\n    example: '2024-01-01T00:00:00.000Z',\n    description: 'User last update date',\n  })\n  updatedAt: Date;\n\n  @ApiProperty({\n    example: ['citizen', 'staff'],\n    description: 'User roles',\n    type: [String],\n  })\n  roles: string[];\n\n  @ApiProperty({\n    example: 'citizen',\n    description: 'Default role name',\n  })\n  defaultRole: string;\n\n  @ApiPropertyOptional({\n    example: 4,\n    description: 'Default role ID',\n  })\n  defaultRoleId?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserStats.html":{"url":"interfaces/UserStats.html","title":"interface - UserStats","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserStats\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            activeUsers\n                                        \n                                \n                                \n                                        \n                                            inactiveUsers\n                                        \n                                \n                                \n                                        \n                                            recentUsers\n                                        \n                                \n                                \n                                        \n                                            totalUsers\n                                        \n                                \n                                \n                                        \n                                            usersByRole\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        activeUsers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        activeUsers:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        inactiveUsers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        inactiveUsers:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        recentUsers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        recentUsers:         Omit[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Omit[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        totalUsers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        totalUsers:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        usersByRole\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        usersByRole:     literal type[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  BadRequestException,\n  ConflictException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, Like, In } from 'typeorm';\nimport { User } from './entities/user.entity';\nimport { AdminUpdateUserDto } from '../auth/dto/update-user.dto'; // Import from auth module\nimport { RolesService } from '../roles/roles.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport * as bcrypt from 'bcrypt';\n\ninterface FindAllOptions {\n  page: number;\n  limit: number;\n  search?: string;\n  role?: string;\n}\n\nexport interface UserStats {\n  totalUsers: number;\n  activeUsers: number;\n  inactiveUsers: number;\n  usersByRole: { roleName: string; count: number }[];\n  recentUsers: Omit[];\n}\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n    private rolesService: RolesService,\n  ) {}\n\n  async findAll(options: FindAllOptions) {\n    const { page, limit, search, role } = options;\n    const skip = (page - 1) * limit;\n\n    const queryBuilder = this.usersRepository\n      .createQueryBuilder('user')\n      .leftJoinAndSelect('user.defaultRole', 'defaultRole')\n      .leftJoinAndSelect('user.roles', 'roles');\n\n    // Apply search filter\n    if (search) {\n      queryBuilder.where(\n        '(user.firstName LIKE :search OR user.lastName LIKE :search OR user.email LIKE :search OR user.username LIKE :search)',\n        { search: `%${search}%` },\n      );\n    }\n\n    // Apply role filter\n    if (role) {\n      queryBuilder.andWhere('roles.name = :role', { role });\n    }\n\n    queryBuilder.orderBy('user.createdAt', 'DESC').skip(skip).take(limit);\n\n    const [users, total] = await queryBuilder.getManyAndCount();\n\n    // Remove passwords from response\n    const sanitizedUsers = users.map((user) => {\n      const { password, ...userWithoutPassword } = user;\n      return {\n        ...userWithoutPassword,\n        roles: user.roles.map((role) => role.name),\n        defaultRole: user.defaultRole?.name || 'citizen',\n      };\n    });\n\n    return {\n      users: sanitizedUsers,\n      total,\n      page,\n      limit,\n      totalPages: Math.ceil(total / limit),\n    };\n  }\n\n  async findOne(id: number): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id },\n      relations: ['defaultRole', 'roles'],\n    });\n\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    // Remove password and format response\n\n    const { password, ...userWithoutPassword } = user;\n    return {\n      ...userWithoutPassword,\n      roles: user.roles.map((role) => role.name),\n      defaultRole: user.defaultRole?.name || 'citizen',\n    };\n  }\n\n  // Admin-only update method\n  async adminUpdate(\n    id: number,\n    updateUserDto: AdminUpdateUserDto,\n  ): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id },\n      relations: ['roles'],\n    });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    const {\n      email,\n\n      username,\n\n      firstName,\n\n      middleName,\n\n      lastName,\n\n      nameExtension,\n\n      contactNumber,\n\n      roleIds,\n\n      defaultRoleId,\n    } = updateUserDto;\n\n    // Check email uniqueness if being updated\n    if (email && email !== user.email) {\n      const existingUser = await this.usersRepository.findOne({\n        where: { email },\n      });\n      if (existingUser) {\n        throw new ConflictException('Email already exists');\n      }\n    }\n\n    // Check username uniqueness if being updated\n    if (username && username !== user.username) {\n      const existingUser = await this.usersRepository.findOne({\n        where: { username },\n      });\n      if (existingUser) {\n        throw new ConflictException('Username already exists');\n      }\n    }\n\n    // Update fields\n    const updateData: any = {};\n\n    if (email) updateData.email = email;\n    if (username) updateData.username = username;\n    if (firstName) updateData.firstName = firstName;\n    if (lastName) updateData.lastName = lastName;\n    if (contactNumber) updateData.contactNumber = contactNumber;\n\n    // Handle optional fields\n    if (middleName !== undefined) updateData.middleName = middleName;\n    if (nameExtension !== undefined) updateData.nameExtension = nameExtension;\n    if (defaultRoleId !== undefined) updateData.defaultRoleId = defaultRoleId;\n\n    // Update name if name components changed\n    if (\n      firstName ||\n      middleName !== undefined ||\n      lastName ||\n      nameExtension !== undefined\n    ) {\n      const newFirstName = firstName || user.firstName;\n      const newMiddleName =\n        middleName !== undefined ? middleName : user.middleName;\n      const newLastName = lastName || user.lastName;\n      const newNameExtension =\n        nameExtension !== undefined ? nameExtension : user.nameExtension;\n\n      updateData.name = `${newFirstName} ${newMiddleName ? newMiddleName + ' ' : ''}${newLastName}${newNameExtension ? ' ' + newNameExtension : ''}`;\n    }\n\n    await this.usersRepository.update(id, updateData);\n\n    // Update roles if provided\n    if (roleIds !== undefined) {\n      // Remove existing roles and assign new ones\n      await this.usersRepository\n        .createQueryBuilder()\n        .relation(User, 'roles')\n        .of(id)\n        .remove(user.roles);\n\n      if (roleIds.length > 0) {\n        await this.rolesService.assignRolesToUser(id, roleIds);\n      }\n    }\n\n    return this.findOne(id);\n  }\n\n  async remove(id: number): Promise {\n    const user = await this.usersRepository.findOne({ where: { id } });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    await this.usersRepository.delete(id);\n    return { message: `User with ID ${id} has been deleted` };\n  }\n\n  async updateStatus(id: number, isActive: boolean): Promise {\n    const user = await this.usersRepository.findOne({ where: { id } });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    await this.usersRepository.update(id, { isActive });\n    return this.findOne(id);\n  }\n\n  async getStats(): Promise {\n    const totalUsers = await this.usersRepository.count();\n    const activeUsers = await this.usersRepository.count({\n      where: { isActive: true },\n    });\n    const inactiveUsers = totalUsers - activeUsers;\n\n    // Get user count by role\n    const roleStats = await this.usersRepository\n      .createQueryBuilder('user')\n      .leftJoin('user.roles', 'role')\n      .select('role.name', 'roleName')\n      .addSelect('COUNT(user.id)', 'count')\n      .groupBy('role.name')\n      .getRawMany();\n\n    const usersByRole = roleStats.map((stat) => ({\n      roleName: stat.roleName || 'No Role',\n\n      count: parseInt(stat.count),\n    }));\n\n    // Get recent users (last 10)\n    const recentUsers = await this.usersRepository.find({\n      order: { createdAt: 'DESC' },\n      take: 10,\n      relations: ['defaultRole', 'roles'],\n    });\n\n    const sanitizedRecentUsers = recentUsers.map((user) => {\n      const { password, ...userWithoutPassword } = user;\n      return userWithoutPassword as Omit;\n    });\n\n    return {\n      totalUsers,\n      activeUsers,\n      inactiveUsers,\n      usersByRole,\n      recentUsers: sanitizedRecentUsers,\n    };\n  }\n\n  async findByEmail(email: string): Promise {\n    return this.usersRepository.findOne({\n      where: { email },\n      relations: ['defaultRole', 'roles'],\n    });\n  }\n\n  async findByUsername(username: string): Promise {\n    return this.usersRepository.findOne({\n      where: { username },\n      relations: ['defaultRole', 'roles'],\n    });\n  }\n\n  async create(createUserDto: CreateUserDto) {\n    const {\n      email,\n      username,\n      password,\n      firstName,\n      middleName,\n      lastName,\n      nameExtension,\n      contactNumber,\n      name,\n      roleIds,\n      defaultRoleId,\n    } = createUserDto;\n\n    // Generate full name if not provided\n    const fullName =\n      name ||\n      `${firstName} ${middleName ? middleName + ' ' : ''}${lastName}${nameExtension ? ' ' + nameExtension : ''}`;\n\n    // Check if user already exists\n    const existingUserByEmail = await this.usersRepository.findOne({\n      where: { email },\n    });\n    if (existingUserByEmail) {\n      throw new ConflictException('Email already exists');\n    }\n\n    if (username) {\n      const existingUserByUsername = await this.usersRepository.findOne({\n        where: { username },\n      });\n      if (existingUserByUsername) {\n        throw new ConflictException('Username already exists');\n      }\n    }\n\n    try {\n      // Create user\n      const user = this.usersRepository.create({\n        email,\n        username,\n        password, // Should be hashed by the caller\n        firstName,\n        middleName,\n        lastName,\n        nameExtension,\n        contactNumber,\n        name: fullName,\n        defaultRoleId: defaultRoleId || 4, // Default to citizen\n      });\n\n      await this.usersRepository.save(user);\n\n      // Assign roles if provided\n      if (roleIds && roleIds.length > 0) {\n        await this.rolesService.assignRolesToUser(user.id, roleIds);\n      }\n\n      return user;\n    } catch (error) {\n      console.error('Error creating user:', error);\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserStatsResponseDto.html":{"url":"classes/UserStatsResponseDto.html","title":"class - UserStatsResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserStatsResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/user-stats-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                activeUsers\n                            \n                            \n                                    \n                                inactiveUsers\n                            \n                            \n                                    \n                                recentUsers\n                            \n                            \n                                    \n                                totalUsers\n                            \n                            \n                                    \n                                usersByRole\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        activeUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 85, description: 'Number of active users'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-stats-response.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        inactiveUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 15, description: 'Number of inactive users'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-stats-response.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        recentUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserResponseDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined, description: 'Recently created users'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-stats-response.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        totalUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 100, description: 'Total number of users'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-stats-response.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        usersByRole\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UsersByRoleDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined, description: 'User count by role'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-stats-response.dto.ts:41\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { UserResponseDto } from './user-response.dto';\n\nclass UsersByRoleDto {\n  @ApiProperty({\n    example: 'citizen',\n    description: 'Role name',\n  })\n  roleName: string;\n\n  @ApiProperty({\n    example: 25,\n    description: 'Number of users with this role',\n  })\n  count: number;\n}\n\nexport class UserStatsResponseDto {\n  @ApiProperty({\n    example: 100,\n    description: 'Total number of users',\n  })\n  totalUsers: number;\n\n  @ApiProperty({\n    example: 85,\n    description: 'Number of active users',\n  })\n  activeUsers: number;\n\n  @ApiProperty({\n    example: 15,\n    description: 'Number of inactive users',\n  })\n  inactiveUsers: number;\n\n  @ApiProperty({\n    type: [UsersByRoleDto],\n    description: 'User count by role',\n  })\n  usersByRole: UsersByRoleDto[];\n\n  @ApiProperty({\n    type: [UserResponseDto],\n    description: 'Recently created users',\n  })\n  recentUsers: UserResponseDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UsersByRoleDto.html":{"url":"classes/UsersByRoleDto.html","title":"class - UsersByRoleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UsersByRoleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/user-stats-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                count\n                            \n                            \n                                    \n                                roleName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 25, description: 'Number of users with this role'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-stats-response.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        roleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'citizen', description: 'Role name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-stats-response.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { UserResponseDto } from './user-response.dto';\n\nclass UsersByRoleDto {\n  @ApiProperty({\n    example: 'citizen',\n    description: 'Role name',\n  })\n  roleName: string;\n\n  @ApiProperty({\n    example: 25,\n    description: 'Number of users with this role',\n  })\n  count: number;\n}\n\nexport class UserStatsResponseDto {\n  @ApiProperty({\n    example: 100,\n    description: 'Total number of users',\n  })\n  totalUsers: number;\n\n  @ApiProperty({\n    example: 85,\n    description: 'Number of active users',\n  })\n  activeUsers: number;\n\n  @ApiProperty({\n    example: 15,\n    description: 'Number of inactive users',\n  })\n  inactiveUsers: number;\n\n  @ApiProperty({\n    type: [UsersByRoleDto],\n    description: 'User count by role',\n  })\n  usersByRole: UsersByRoleDto[];\n\n  @ApiProperty({\n    type: [UserResponseDto],\n    description: 'Recently created users',\n  })\n  recentUsers: UserResponseDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                adminCreateUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getProfile\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getStats\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        adminCreateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    adminCreateUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('admin-create')@UseGuards(JwtAuthGuard, RolesGuard)@Roles('admin', 'super_admin')@ApiOperation({summary: 'Admin creates user with role assignment'})@ApiResponse({status: 201, description: 'User created successfully', type: UserResponseDto})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:153\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(query: UserQueryDto, req: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(RolesGuard)@Roles('admin', 'staff', 'super_admin')@ApiOperation({summary: 'Get all users (Admin only)'})@ApiResponse({status: 200, description: 'Users retrieved successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            UserQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string, req: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@UseGuards(RolesGuard)@Roles('admin', 'staff', 'super_admin')@ApiOperation({summary: 'Get user by ID (Admin only)'})@ApiResponse({status: 200, description: 'User found'})@ApiResponse({status: 404, description: 'User not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:80\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(req: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('profile')@ApiOperation({summary: 'Get current user profile'})@ApiResponse({status: 200, description: 'Profile retrieved successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('stats')@UseGuards(RolesGuard)@Roles('admin', 'staff', 'super_admin')@ApiOperation({summary: 'Get user statistics (Admin only)'})@ApiResponse({status: 200, description: 'Statistics retrieved successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:70\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string, req: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@UseGuards(RolesGuard)@Roles('admin', 'super_admin')@ApiOperation({summary: 'Delete user (Admin only)'})@ApiResponse({status: 200, description: 'User deleted successfully'})@ApiResponse({status: 404, description: 'User not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:121\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateUserDto: AdminUpdateUserDto, req: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@UseGuards(RolesGuard)@Roles('admin', 'super_admin')@ApiOperation({summary: 'Update user (Admin only)'})@ApiResponse({status: 200, description: 'User updated successfully'})@ApiResponse({status: 404, description: 'User not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:106\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            AdminUpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(id: string, updateStatusDto: UpdateUserStatusDto, req: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/status')@UseGuards(RolesGuard)@Roles('admin', 'super_admin')@ApiOperation({summary: 'Update user status (Admin only)'})@ApiResponse({status: 200, description: 'User status updated successfully'})@ApiResponse({status: 404, description: 'User not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:135\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateStatusDto\n                                            \n                                                            UpdateUserStatusDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-unsafe-return */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nimport {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n  Request,\n  Query,\n} from '@nestjs/common';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n} from '@nestjs/swagger';\nimport { UsersService } from './users.service';\nimport { AdminUpdateUserDto } from '../auth/dto/update-user.dto'; // Import from auth module\nimport { UpdateUserStatusDto } from './dto/update-user-status.dto';\nimport { UserQueryDto } from './dto/user-query.dto';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../auth/guards/roles.guard';\nimport { Roles } from '../auth/decorators/roles.decorator';\nimport { AuthenticatedUser } from '../auth/jwt.strategy';\nimport * as bcrypt from 'bcrypt';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UserResponseDto } from './dto/user-response.dto';\n\n@ApiTags('users')\n@Controller('users')\n@UseGuards(JwtAuthGuard)\n@ApiBearerAuth()\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Get()\n  @UseGuards(RolesGuard)\n  @Roles('admin', 'staff', 'super_admin')\n  @ApiOperation({ summary: 'Get all users (Admin only)' })\n  @ApiResponse({ status: 200, description: 'Users retrieved successfully' })\n  async findAll(\n    @Query() query: UserQueryDto,\n\n    @Request() req: { user: AuthenticatedUser },\n  ) {\n    const { page = 1, limit = 10, search, role } = query;\n    return this.usersService.findAll({ page, limit, search, role });\n  }\n\n  @Get('profile')\n  @ApiOperation({ summary: 'Get current user profile' })\n  @ApiResponse({ status: 200, description: 'Profile retrieved successfully' })\n  async getProfile(@Request() req: { user: AuthenticatedUser }) {\n    return this.usersService.findOne(req.user.id);\n  }\n\n  @Get('stats')\n  @UseGuards(RolesGuard)\n  @Roles('admin', 'staff', 'super_admin')\n  @ApiOperation({ summary: 'Get user statistics (Admin only)' })\n  @ApiResponse({\n    status: 200,\n    description: 'Statistics retrieved successfully',\n  })\n  async getStats() {\n    return this.usersService.getStats();\n  }\n\n  @Get(':id')\n  @UseGuards(RolesGuard)\n  @Roles('admin', 'staff', 'super_admin')\n  @ApiOperation({ summary: 'Get user by ID (Admin only)' })\n  @ApiResponse({ status: 200, description: 'User found' })\n  @ApiResponse({ status: 404, description: 'User not found' })\n  async findOne(\n    @Param('id') id: string,\n    @Request() req: { user: AuthenticatedUser },\n  ) {\n    // Allow users to view their own profile\n    const userId = +id;\n    const currentUser = req.user;\n\n    if (\n      userId === currentUser.id ||\n      currentUser.roles.some((role) =>\n        ['admin', 'staff', 'super_admin'].includes(role.name),\n      )\n    ) {\n      return this.usersService.findOne(userId);\n    }\n\n    throw new Error('Unauthorized');\n  }\n\n  @Patch(':id')\n  @UseGuards(RolesGuard)\n  @Roles('admin', 'super_admin')\n  @ApiOperation({ summary: 'Update user (Admin only)' })\n  @ApiResponse({ status: 200, description: 'User updated successfully' })\n  @ApiResponse({ status: 404, description: 'User not found' })\n  async update(\n    @Param('id') id: string,\n    @Body() updateUserDto: AdminUpdateUserDto,\n\n    @Request() req: { user: AuthenticatedUser },\n  ) {\n    return this.usersService.adminUpdate(+id, updateUserDto);\n  }\n\n  @Delete(':id')\n  @UseGuards(RolesGuard)\n  @Roles('admin', 'super_admin')\n  @ApiOperation({ summary: 'Delete user (Admin only)' })\n  @ApiResponse({ status: 200, description: 'User deleted successfully' })\n  @ApiResponse({ status: 404, description: 'User not found' })\n  async remove(\n    @Param('id') id: string,\n\n    @Request() req: { user: AuthenticatedUser },\n  ) {\n    return this.usersService.remove(+id);\n  }\n\n  @Patch(':id/status')\n  @UseGuards(RolesGuard)\n  @Roles('admin', 'super_admin')\n  @ApiOperation({ summary: 'Update user status (Admin only)' })\n  @ApiResponse({ status: 200, description: 'User status updated successfully' })\n  @ApiResponse({ status: 404, description: 'User not found' })\n  async updateStatus(\n    @Param('id') id: string,\n    @Body() updateStatusDto: UpdateUserStatusDto,\n\n    @Request() req: { user: AuthenticatedUser },\n  ) {\n    return this.usersService.updateStatus(+id, updateStatusDto.isActive);\n  }\n\n  @Post('admin-create')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles('admin', 'super_admin')\n  @ApiOperation({ summary: 'Admin creates user with role assignment' })\n  @ApiResponse({\n    status: 201,\n    description: 'User created successfully',\n    type: UserResponseDto,\n  })\n  async adminCreateUser(\n    @Body() createUserDto: CreateUserDto,\n  ): Promise {\n    try {\n      // Hash password\n      const salt = await bcrypt.genSalt();\n      const hashedPassword = await bcrypt.hash(createUserDto.password, salt);\n\n      // Create user with hashed password\n      const userWithHashedPassword = {\n        ...createUserDto,\n        password: hashedPassword,\n      };\n\n      const user = await this.usersService.create(userWithHashedPassword);\n\n      // Return user without password\n\n      const { password, ...userWithoutPassword } = user;\n\n      // Get user with roles for response\n\n      const userWithRoles = await this.usersService.findOne(user.id);\n\n      return userWithRoles;\n    } catch (error) {\n      console.error('Error in admin create user:', error);\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nRolesModule\n\nRolesModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nRolesModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RolesModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { User } from './entities/user.entity';\nimport { RolesModule } from '../roles/roles.module';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User]), RolesModule],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService, TypeOrmModule],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                adminUpdate\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByEmail\n                            \n                            \n                                    Async\n                                findByUsername\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getStats\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, rolesService: RolesService)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:35\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        rolesService\n                                                  \n                                                        \n                                                                        RolesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        adminUpdate\n                        \n                    \n                \n            \n            \n                \n                        \n                    adminUpdate(id: number, updateUserDto: AdminUpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:108\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            AdminUpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:287\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(options: FindAllOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                            FindAllOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:273\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByUsername\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByUsername(username: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:280\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:87\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:230\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:210\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(id: number, isActive: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:220\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                isActive\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  BadRequestException,\n  ConflictException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, Like, In } from 'typeorm';\nimport { User } from './entities/user.entity';\nimport { AdminUpdateUserDto } from '../auth/dto/update-user.dto'; // Import from auth module\nimport { RolesService } from '../roles/roles.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport * as bcrypt from 'bcrypt';\n\ninterface FindAllOptions {\n  page: number;\n  limit: number;\n  search?: string;\n  role?: string;\n}\n\nexport interface UserStats {\n  totalUsers: number;\n  activeUsers: number;\n  inactiveUsers: number;\n  usersByRole: { roleName: string; count: number }[];\n  recentUsers: Omit[];\n}\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n    private rolesService: RolesService,\n  ) {}\n\n  async findAll(options: FindAllOptions) {\n    const { page, limit, search, role } = options;\n    const skip = (page - 1) * limit;\n\n    const queryBuilder = this.usersRepository\n      .createQueryBuilder('user')\n      .leftJoinAndSelect('user.defaultRole', 'defaultRole')\n      .leftJoinAndSelect('user.roles', 'roles');\n\n    // Apply search filter\n    if (search) {\n      queryBuilder.where(\n        '(user.firstName LIKE :search OR user.lastName LIKE :search OR user.email LIKE :search OR user.username LIKE :search)',\n        { search: `%${search}%` },\n      );\n    }\n\n    // Apply role filter\n    if (role) {\n      queryBuilder.andWhere('roles.name = :role', { role });\n    }\n\n    queryBuilder.orderBy('user.createdAt', 'DESC').skip(skip).take(limit);\n\n    const [users, total] = await queryBuilder.getManyAndCount();\n\n    // Remove passwords from response\n    const sanitizedUsers = users.map((user) => {\n      const { password, ...userWithoutPassword } = user;\n      return {\n        ...userWithoutPassword,\n        roles: user.roles.map((role) => role.name),\n        defaultRole: user.defaultRole?.name || 'citizen',\n      };\n    });\n\n    return {\n      users: sanitizedUsers,\n      total,\n      page,\n      limit,\n      totalPages: Math.ceil(total / limit),\n    };\n  }\n\n  async findOne(id: number): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id },\n      relations: ['defaultRole', 'roles'],\n    });\n\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    // Remove password and format response\n\n    const { password, ...userWithoutPassword } = user;\n    return {\n      ...userWithoutPassword,\n      roles: user.roles.map((role) => role.name),\n      defaultRole: user.defaultRole?.name || 'citizen',\n    };\n  }\n\n  // Admin-only update method\n  async adminUpdate(\n    id: number,\n    updateUserDto: AdminUpdateUserDto,\n  ): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id },\n      relations: ['roles'],\n    });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    const {\n      email,\n\n      username,\n\n      firstName,\n\n      middleName,\n\n      lastName,\n\n      nameExtension,\n\n      contactNumber,\n\n      roleIds,\n\n      defaultRoleId,\n    } = updateUserDto;\n\n    // Check email uniqueness if being updated\n    if (email && email !== user.email) {\n      const existingUser = await this.usersRepository.findOne({\n        where: { email },\n      });\n      if (existingUser) {\n        throw new ConflictException('Email already exists');\n      }\n    }\n\n    // Check username uniqueness if being updated\n    if (username && username !== user.username) {\n      const existingUser = await this.usersRepository.findOne({\n        where: { username },\n      });\n      if (existingUser) {\n        throw new ConflictException('Username already exists');\n      }\n    }\n\n    // Update fields\n    const updateData: any = {};\n\n    if (email) updateData.email = email;\n    if (username) updateData.username = username;\n    if (firstName) updateData.firstName = firstName;\n    if (lastName) updateData.lastName = lastName;\n    if (contactNumber) updateData.contactNumber = contactNumber;\n\n    // Handle optional fields\n    if (middleName !== undefined) updateData.middleName = middleName;\n    if (nameExtension !== undefined) updateData.nameExtension = nameExtension;\n    if (defaultRoleId !== undefined) updateData.defaultRoleId = defaultRoleId;\n\n    // Update name if name components changed\n    if (\n      firstName ||\n      middleName !== undefined ||\n      lastName ||\n      nameExtension !== undefined\n    ) {\n      const newFirstName = firstName || user.firstName;\n      const newMiddleName =\n        middleName !== undefined ? middleName : user.middleName;\n      const newLastName = lastName || user.lastName;\n      const newNameExtension =\n        nameExtension !== undefined ? nameExtension : user.nameExtension;\n\n      updateData.name = `${newFirstName} ${newMiddleName ? newMiddleName + ' ' : ''}${newLastName}${newNameExtension ? ' ' + newNameExtension : ''}`;\n    }\n\n    await this.usersRepository.update(id, updateData);\n\n    // Update roles if provided\n    if (roleIds !== undefined) {\n      // Remove existing roles and assign new ones\n      await this.usersRepository\n        .createQueryBuilder()\n        .relation(User, 'roles')\n        .of(id)\n        .remove(user.roles);\n\n      if (roleIds.length > 0) {\n        await this.rolesService.assignRolesToUser(id, roleIds);\n      }\n    }\n\n    return this.findOne(id);\n  }\n\n  async remove(id: number): Promise {\n    const user = await this.usersRepository.findOne({ where: { id } });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    await this.usersRepository.delete(id);\n    return { message: `User with ID ${id} has been deleted` };\n  }\n\n  async updateStatus(id: number, isActive: boolean): Promise {\n    const user = await this.usersRepository.findOne({ where: { id } });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    await this.usersRepository.update(id, { isActive });\n    return this.findOne(id);\n  }\n\n  async getStats(): Promise {\n    const totalUsers = await this.usersRepository.count();\n    const activeUsers = await this.usersRepository.count({\n      where: { isActive: true },\n    });\n    const inactiveUsers = totalUsers - activeUsers;\n\n    // Get user count by role\n    const roleStats = await this.usersRepository\n      .createQueryBuilder('user')\n      .leftJoin('user.roles', 'role')\n      .select('role.name', 'roleName')\n      .addSelect('COUNT(user.id)', 'count')\n      .groupBy('role.name')\n      .getRawMany();\n\n    const usersByRole = roleStats.map((stat) => ({\n      roleName: stat.roleName || 'No Role',\n\n      count: parseInt(stat.count),\n    }));\n\n    // Get recent users (last 10)\n    const recentUsers = await this.usersRepository.find({\n      order: { createdAt: 'DESC' },\n      take: 10,\n      relations: ['defaultRole', 'roles'],\n    });\n\n    const sanitizedRecentUsers = recentUsers.map((user) => {\n      const { password, ...userWithoutPassword } = user;\n      return userWithoutPassword as Omit;\n    });\n\n    return {\n      totalUsers,\n      activeUsers,\n      inactiveUsers,\n      usersByRole,\n      recentUsers: sanitizedRecentUsers,\n    };\n  }\n\n  async findByEmail(email: string): Promise {\n    return this.usersRepository.findOne({\n      where: { email },\n      relations: ['defaultRole', 'roles'],\n    });\n  }\n\n  async findByUsername(username: string): Promise {\n    return this.usersRepository.findOne({\n      where: { username },\n      relations: ['defaultRole', 'roles'],\n    });\n  }\n\n  async create(createUserDto: CreateUserDto) {\n    const {\n      email,\n      username,\n      password,\n      firstName,\n      middleName,\n      lastName,\n      nameExtension,\n      contactNumber,\n      name,\n      roleIds,\n      defaultRoleId,\n    } = createUserDto;\n\n    // Generate full name if not provided\n    const fullName =\n      name ||\n      `${firstName} ${middleName ? middleName + ' ' : ''}${lastName}${nameExtension ? ' ' + nameExtension : ''}`;\n\n    // Check if user already exists\n    const existingUserByEmail = await this.usersRepository.findOne({\n      where: { email },\n    });\n    if (existingUserByEmail) {\n      throw new ConflictException('Email already exists');\n    }\n\n    if (username) {\n      const existingUserByUsername = await this.usersRepository.findOne({\n        where: { username },\n      });\n      if (existingUserByUsername) {\n        throw new ConflictException('Username already exists');\n      }\n    }\n\n    try {\n      // Create user\n      const user = this.usersRepository.create({\n        email,\n        username,\n        password, // Should be hashed by the caller\n        firstName,\n        middleName,\n        lastName,\n        nameExtension,\n        contactNumber,\n        name: fullName,\n        defaultRoleId: defaultRoleId || 4, // Default to citizen\n      });\n\n      await this.usersRepository.save(user);\n\n      // Assign roles if provided\n      if (roleIds && roleIds.length > 0) {\n        await this.rolesService.assignRolesToUser(user.id, roleIds);\n      }\n\n      return user;\n    } catch (error) {\n      console.error('Error creating user:', error);\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                        src/auth/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/decorators/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/user.decorator.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/auth/decorators/user.decorator.ts\n            \n            variable\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/auth/dto/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                10 %\n                (1/10)\n            \n        \n        \n            \n                \n                src/auth/dto/update-user.dto.ts\n            \n            class\n            AdminUpdateUserDto\n            \n                8 %\n                (1/12)\n            \n        \n        \n            \n                \n                src/auth/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                10 %\n                (1/10)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/roles.guard.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            interface\n            AuthenticatedUser\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            interface\n            JwtPayload\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/config/database.config.ts\n            \n            variable\n            databaseConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            seedDatabaseIfNeeded\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            testMinIOConnection\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/announcement/announcement.controller.ts\n            \n            controller\n            AnnouncementController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/announcement/announcement.service.ts\n            \n            injectable\n            AnnouncementService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/announcement/dto/create-announcement.dto.ts\n            \n            class\n            CreateAnnouncementDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/announcement/dto/update-announcement.dto.ts\n            \n            class\n            UpdateAnnouncementDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/announcement/entities/announcement.entity.ts\n            \n            entity\n            Announcement\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/appointment/appointment.controller.ts\n            \n            controller\n            AppointmentController\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/modules/appointment/appointment.service.ts\n            \n            injectable\n            AppointmentService\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/modules/appointment/dto/create-appointment.dto.ts\n            \n            class\n            CreateAppointmentDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/modules/appointment/dto/update-appointment.dto.ts\n            \n            class\n            UpdateAppointmentDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/appointment/entities/appointment.entity.ts\n            \n            entity\n            Appointment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/counter/entities/counter.entity.ts\n            \n            entity\n            Counter\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/document-applications/document-applications.controller.ts\n            \n            controller\n            DocumentApplicationsController\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/modules/document-applications/document-applications.service.ts\n            \n            injectable\n            DocumentApplicationsService\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/modules/document-applications/dto/create-document-application.dto.ts\n            \n            class\n            CreateDocumentApplicationDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/document-applications/dto/update-document-application.dto.ts\n            \n            class\n            UpdateDocumentApplicationDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/document-applications/entities/application-status-history.entity.ts\n            \n            entity\n            ApplicationStatusHistory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/document-applications/entities/application-status-history.entity.ts\n            \n            class\n            ApplicationStatusHistory\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/modules/document-applications/entities/document-application.entity.ts\n            \n            entity\n            DocumentApplication\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/document-applications/entities/document-application.entity.ts\n            \n            class\n            DocumentApplication\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/modules/document-applications/entities/document-file.entity.ts\n            \n            entity\n            DocumentFile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/document-applications/entities/document-file.entity.ts\n            \n            class\n            DocumentFile\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/document-applications/services/minio.service.ts\n            \n            injectable\n            MinioService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/modules/queue/dto/create-queue.dto.ts\n            \n            class\n            CreateQueueDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/queue/dto/update-queue.dto.ts\n            \n            class\n            UpdateQueueDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/queue/entities/queue-details.entity.ts\n            \n            entity\n            QueueDetails\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/queue/entities/queue.entity.ts\n            \n            entity\n            Queue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/queue/queue-scheduler.service.ts\n            \n            injectable\n            QueueSchedulerService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/queue/queue.controller.ts\n            \n            controller\n            QueueController\n            \n                0 %\n                (0/24)\n            \n        \n        \n            \n                \n                src/modules/queue/queue.gateway.ts\n            \n            class\n            QueueGateway\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/modules/queue/queue.service.ts\n            \n            injectable\n            QueueService\n            \n                0 %\n                (0/18)\n            \n        \n        \n            \n                \n                src/modules/queue/queues.controller.ts\n            \n            controller\n            QueuesController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/queue/queues.controller.ts\n            \n            interface\n            QueueDetails\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/roles/entities/role.entity.ts\n            \n            entity\n            Role\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/roles/roles.controller.ts\n            \n            controller\n            RolesController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/roles/roles.service.ts\n            \n            injectable\n            RolesService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/services/minio.service.ts\n            \n            injectable\n            MinioService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/users/dto/paginated-users-response.dto.ts\n            \n            class\n            PaginatedUsersResponseDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/dto/update-user-status.dto.ts\n            \n            class\n            UpdateUserStatusDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dto/user-query.dto.ts\n            \n            class\n            UserQueryDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dto/user-response.dto.ts\n            \n            class\n            UserResponseDto\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/users/dto/user-stats-response.dto.ts\n            \n            class\n            UsersByRoleDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dto/user-stats-response.dto.ts\n            \n            class\n            UserStatsResponseDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            interface\n            FindAllOptions\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            interface\n            UserStats\n            \n                0 %\n                (0/6)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^11.1.0\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.1.0\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/passport : ^11.0.5\n        \n            @nestjs/platform-express : ^11.1.0\n        \n            @nestjs/platform-socket.io : ^11.1.0\n        \n            @nestjs/schedule : ^6.0.0\n        \n            @nestjs/swagger : ^11.2.0\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            @nestjs/websockets : ^11.1.0\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            date-fns : ^4.1.0\n        \n            dotenv : ^16.5.0\n        \n            minio : ^8.0.5\n        \n            multer : ^2.0.0\n        \n            mysql2 : ^3.14.1\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.2\n        \n            socket.io : ^4.8.1\n        \n            swagger-ui-express : ^5.0.1\n        \n            typeorm : ^0.3.22\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ApplicationStatus   (src/.../document-application.entity.ts)\n                        \n                        \n                            ApplicationType   (src/.../document-application.entity.ts)\n                        \n                        \n                            AppointmentStatus   (src/.../appointment.entity.ts)\n                        \n                        \n                            CounterStatus   (src/.../counter.entity.ts)\n                        \n                        \n                            QueueStatus   (src/.../queue.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/document-applications/entities/document-application.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        ApplicationStatus\n                    \n                \n                        \n                            \n                                 PENDING\n                            \n                        \n                        \n                            \n                                Value : Pending\n                            \n                        \n                        \n                            \n                                 PROCESSING\n                            \n                        \n                        \n                            \n                                Value : Processing\n                            \n                        \n                        \n                            \n                                 APPROVED\n                            \n                        \n                        \n                            \n                                Value : Approved\n                            \n                        \n                        \n                            \n                                 REJECTED\n                            \n                        \n                        \n                            \n                                Value : Rejected\n                            \n                        \n                        \n                            \n                                 DECLINE\n                            \n                        \n                        \n                            \n                                Value : Decline\n                            \n                        \n                        \n                            \n                                 READY_FOR_PICKUP\n                            \n                        \n                        \n                            \n                                Value : Ready for Pickup\n                            \n                        \n                        \n                            \n                                 REQUIRES_ADDITIONAL_INFO\n                            \n                        \n                        \n                            \n                                Value : Requires Additional Info\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ApplicationType\n                    \n                \n                        \n                            \n                                 BIRTH_CERTIFICATE\n                            \n                        \n                        \n                            \n                                Value : Birth Certificate\n                            \n                        \n                        \n                            \n                                 MARRIAGE_CERTIFICATE\n                            \n                        \n                        \n                            \n                                Value : Marriage Certificate\n                            \n                        \n                        \n                            \n                                 MARRIAGE_LICENSE\n                            \n                        \n                        \n                            \n                                Value : Marriage License\n                            \n                        \n                        \n                            \n                                 DEATH_CERTIFICATE\n                            \n                        \n                        \n                            \n                                Value : Death Certificate\n                            \n                        \n                        \n                            \n                                 BUSINESS_PERMIT\n                            \n                        \n                        \n                            \n                                Value : Business Permit\n                            \n                        \n            \n        \n\n    src/modules/appointment/entities/appointment.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        AppointmentStatus\n                    \n                \n                        \n                            \n                                 PENDING\n                            \n                        \n                        \n                            \n                                Value : pending\n                            \n                        \n                        \n                            \n                                 CONFIRMED\n                            \n                        \n                        \n                            \n                                Value : confirmed\n                            \n                        \n                        \n                            \n                                 COMPLETED\n                            \n                        \n                        \n                            \n                                Value : completed\n                            \n                        \n                        \n                            \n                                 CANCELLED\n                            \n                        \n                        \n                            \n                                Value : cancelled\n                            \n                        \n            \n        \n\n    src/modules/counter/entities/counter.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        CounterStatus\n                    \n                \n                        \n                            \n                                 ACTIVE\n                            \n                        \n                        \n                            \n                                Value : active\n                            \n                        \n                        \n                            \n                                 INACTIVE\n                            \n                        \n                        \n                            \n                                Value : inactive\n                            \n                        \n            \n        \n\n    src/modules/queue/entities/queue.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        QueueStatus\n                    \n                \n                        \n                            \n                                 PENDING\n                            \n                        \n                        \n                            \n                                Value : pending\n                            \n                        \n                        \n                            \n                                 SERVING\n                            \n                        \n                        \n                            \n                                Value : serving\n                            \n                        \n                        \n                            \n                                 COMPLETED\n                            \n                        \n                        \n                            \n                                Value : completed\n                            \n                        \n                        \n                            \n                                 CANCELLED\n                            \n                        \n                        \n                            \n                                Value : cancelled\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            seedDatabaseIfNeeded   (src/.../main.ts)\n                        \n                        \n                            testMinIOConnection   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seedDatabaseIfNeeded\n                        \n                    \n                \n            \n            \n                \nseedDatabaseIfNeeded(dataSource: DataSource)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dataSource\n                                            \n                                                        DataSource\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        testMinIOConnection\n                        \n                    \n                \n            \n            \n                \ntestMinIOConnection()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AnnouncementModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppointmentModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DocumentApplicationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        QueueModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RolesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AnnouncementModule\n\n\n\ncluster_AnnouncementModule_exports\n\n\n\ncluster_AnnouncementModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppointmentModule\n\n\n\ncluster_AppointmentModule_exports\n\n\n\ncluster_AppointmentModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_DocumentApplicationsModule\n\n\n\ncluster_DocumentApplicationsModule_exports\n\n\n\ncluster_DocumentApplicationsModule_providers\n\n\n\ncluster_QueueModule\n\n\n\ncluster_QueueModule_exports\n\n\n\ncluster_QueueModule_providers\n\n\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_exports\n\n\n\ncluster_RolesModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAnnouncementService \n\nAnnouncementService \n\n\n\nAnnouncementModule\n\nAnnouncementModule\n\nAnnouncementService  -->\n\nAnnouncementModule->AnnouncementService \n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAnnouncementModule->AppModule\n\n\n\n\n\nAnnouncementService\n\nAnnouncementService\n\nAnnouncementModule -->\n\nAnnouncementService->AnnouncementModule\n\n\n\n\n\nAppointmentModule\n\nAppointmentModule\n\nAppModule -->\n\nAppointmentModule->AppModule\n\n\n\n\n\nAppointmentService \n\nAppointmentService \n\nAppointmentService  -->\n\nAppointmentModule->AppointmentService \n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nDocumentApplicationsModule\n\nDocumentApplicationsModule\n\nAppModule -->\n\nDocumentApplicationsModule->AppModule\n\n\n\n\n\nDocumentApplicationsService \n\nDocumentApplicationsService \n\nDocumentApplicationsService  -->\n\nDocumentApplicationsModule->DocumentApplicationsService \n\n\n\n\n\nMinioService \n\nMinioService \n\nMinioService  -->\n\nDocumentApplicationsModule->MinioService \n\n\n\n\n\nQueueModule\n\nQueueModule\n\nAppModule -->\n\nQueueModule->AppModule\n\n\n\n\n\nQueueGateway \n\nQueueGateway \n\nQueueGateway  -->\n\nQueueModule->QueueGateway \n\n\n\n\n\nQueueSchedulerService \n\nQueueSchedulerService \n\nQueueSchedulerService  -->\n\nQueueModule->QueueSchedulerService \n\n\n\n\n\nQueueService \n\nQueueService \n\nQueueService  -->\n\nQueueModule->QueueService \n\n\n\n\n\nRolesModule\n\nRolesModule\n\nAuthModule -->\n\nRolesModule->AuthModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nRolesModule->UsersModule\n\n\n\nAppModule -->\n\nRolesModule->AppModule\n\n\n\n\n\nRolesService \n\nRolesService \n\nRolesService  -->\n\nRolesModule->RolesService \n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAppointmentService\n\nAppointmentService\n\nAppointmentModule -->\n\nAppointmentService->AppointmentModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nDocumentApplicationsService\n\nDocumentApplicationsService\n\nDocumentApplicationsModule -->\n\nDocumentApplicationsService->DocumentApplicationsModule\n\n\n\n\n\nMinioService\n\nMinioService\n\nDocumentApplicationsModule -->\n\nMinioService->DocumentApplicationsModule\n\n\n\n\n\nQueueSchedulerService\n\nQueueSchedulerService\n\nQueueModule -->\n\nQueueSchedulerService->QueueModule\n\n\n\n\n\nQueueService\n\nQueueService\n\nQueueModule -->\n\nQueueService->QueueModule\n\n\n\n\n\nRolesService\n\nRolesService\n\nRolesModule -->\n\nRolesService->RolesModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        8 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    9 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    10 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    13 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    23 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    8 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            databaseConfig   (src/.../database.config.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                        \n                            User   (src/.../user.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/database.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        databaseConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TypeOrmModuleOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'mysql',\n  host: process.env.DB_HOST || 'localhost',\n  port: parseInt(process.env.DB_PORT || '3306'),\n  username: process.env.DB_USERNAME || 'root',\n  password: process.env.DB_PASSWORD || '',\n  database: process.env.DB_NAME || 'bulak_smart_connect',\n  entities: [__dirname + '/../**/*.entity{.ts,.js}'],\n  synchronize: process.env.NODE_ENV !== 'production',\n  logging: process.env.NODE_ENV !== 'production',\n}\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: string[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        User\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext): AuthenticatedUser => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.user;\n  },\n)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
