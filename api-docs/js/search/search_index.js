var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AdminUpdateUserDto.html",[0,0.176,1,2.124]],["body/classes/AdminUpdateUserDto.html",[0,0.297,1,3.122,2,0.961,3,0.098,4,0.098,5,0.098,6,4.771,7,2.687,8,1.996,9,3.842,10,2.468,11,2.189,12,1.681,13,2.468,14,4.131,15,0.187,16,0.584,17,1.509,18,3.272,19,3.439,20,2.679,21,3.122,22,1.984,23,2.271,24,2.271,25,3.122,26,3.122,27,2.425,28,2.906,29,0.464,30,0.013,31,1.431,32,1.154,33,4.996,34,1.191,35,2.009,36,1.011,37,2.635,38,3.695,39,0.673,40,3.695,41,2.694,42,4.117,43,2.968,44,1.169,45,3.695,46,3.695,47,0.739,48,4.553,49,4.553,50,4.553,51,4.553,52,4.553,53,4.553,54,3.226,55,7.666,56,3.695,57,3.531,58,3.226,59,3.695,60,3.226,61,3.695,62,3.13,63,1.276,64,3.226,65,3.695,66,2.968,67,2.917,68,3.695,69,3.531,70,2.917,71,3.695,72,3.531,73,3.791,74,4.092,75,3.791,76,2.917,77,3.695,78,3.791,79,2.744,80,2.576,81,3.531,82,2.985,83,3.226,84,3.695,85,3.226,86,3.695,87,0.155,88,2.468,89,2.779,90,2.686,91,3.531,92,4.117,93,1.169,94,3.462,95,1.059,96,2.503,97,2.503,98,1.909,99,0.155,100,1.825,101,2.917,102,2.917,103,2.218,104,2.917,105,2.349,106,2.687,107,3.226,108,3.531,109,1.551,110,0.008,111,0.008]],["title/entities/Announcement.html",[112,1.259,113,2.785]],["body/entities/Announcement.html",[0,0.217,3,0.134,4,0.134,5,0.134,8,1.782,10,3.045,15,0.256,16,0.721,29,0.486,30,0.013,31,1.247,32,1.189,34,1.702,36,1.372,39,0.693,47,0.727,87,0.151,99,0.151,110,0.01,111,0.01,112,1.546,113,4.357,114,2.205,115,4.411,116,3.215,117,6.181,118,6.181,119,3.833,120,6.181,121,4.794,122,2.801,123,4.029,124,5.052,125,4.893,126,7.868,127,4.065,128,3.045,129,5.052,130,5.08,131,5.052,132,3.657,133,5.052,134,5.617,135,3.324,136,1.937,137,5.052,138,2.904,139,5.052,140,5.617,141,5.052,142,5.147,143,5.052,144,3.887,145,1.71,146,5.052]],["title/controllers/AnnouncementController.html",[147,1.662,148,2.99]],["body/controllers/AnnouncementController.html",[0,0.204,3,0.126,4,0.126,5,0.126,11,2.89,15,0.241,17,1.369,29,0.439,30,0.013,31,1.602,32,1.138,34,1.087,36,1.501,39,0.664,63,1.279,87,0.217,99,0.142,110,0.009,111,0.009,147,1.925,148,4.503,149,1.925,150,4.158,151,2.858,152,4.762,153,2.247,154,2.813,155,3.947,156,3.353,157,5.408,158,3.06,159,4.158,160,4.924,161,4.376,162,4.762,163,2.84,164,2.714,165,4.762,166,2.352,167,3.937,168,4.762,169,4.158,170,6.193,171,4.762,172,2.078,173,3.353,174,4.194,175,2.578,176,4.503,177,4.762,178,3.027,179,5.415,180,4.503,181,4.762,182,4.194,183,3.462,184,2.858,185,3.027,186,7.557,187,3.225,188,0.954,189,4.376,190,4.158,191,2.578,192,4.89,193,2.71,194,4.762,195,2.254,196,1.856,197,4.762,198,2.08,199,4.762,200,4.762,201,4.762,202,4.762,203,4.158,204,4.762,205,3.462,206,4.762,207,3.76,208,4.762]],["title/modules/AnnouncementModule.html",[209,1.392,210,2.785]],["body/modules/AnnouncementModule.html",[0,0.25,3,0.155,4,0.155,5,0.155,30,0.013,87,0.239,99,0.174,110,0.01,111,0.01,113,3.955,148,5.493,149,2.846,188,1.17,189,5.398,190,5.099,209,2.558,210,5.585,211,2.885,212,2.885,213,3.162,214,3.162,215,2.885,216,4.091,217,4.091,218,5.099,219,5.099,220,5.099,221,3.811,222,2.885,223,3.017,224,5.841,225,3.324,226,2.195,227,5.841,228,5.099,229,3.324,230,5.841]],["title/injectables/AnnouncementService.html",[189,2.614,231,1.035]],["body/injectables/AnnouncementService.html",[0,0.183,3,0.113,4,0.113,5,0.113,11,2.737,15,0.216,17,1.361,29,0.436,30,0.013,31,1.575,34,0.974,36,1.488,39,0.658,63,1.271,87,0.224,99,0.127,110,0.009,111,0.009,113,5.198,116,2.615,119,3.529,136,1.694,145,1.444,153,2.089,154,2.96,155,3.779,156,3.118,157,5.027,158,2.844,159,3.725,160,4.88,163,2.823,164,2.631,166,2.844,169,5.027,172,1.862,173,3.118,174,3.9,175,3.118,178,2.712,179,5.286,185,2.712,188,0.855,189,3.661,191,2.31,192,4.546,193,2.428,198,1.957,226,1.603,228,3.725,231,1.449,232,2.019,233,3.725,234,3.141,235,2.328,236,4.266,237,3.605,238,4.266,239,5.758,240,4.266,241,3.547,242,4.266,243,4.266,244,4.266,245,4.266,246,4.266,247,2.712,248,2.31,249,4.266,250,1.662,251,2.136,252,4.266,253,2.934,254,6.518,255,5.758,256,3.9,257,3.9,258,4.266,259,1.603,260,1.146,261,4.266,262,2.019,263,3.9,264,4.266,265,4.266,266,1.444,267,4.266,268,2.889]],["title/controllers/AppController.html",[147,1.662,269,2.99]],["body/controllers/AppController.html",[0,0.255,3,0.157,4,0.157,5,0.157,15,0.301,30,0.013,32,1.045,39,0.609,47,0.684,87,0.212,99,0.177,110,0.011,111,0.011,147,2.875,149,2.402,153,2.58,164,2.491,188,1.19,195,2.811,196,2.315,198,1.909,269,5.17,270,5.186,271,6.887,272,7.888,273,5.94,274,7.111,275,5.94,276,1.79,277,4.838,278,5.186,279,5.94,280,5.94]],["title/modules/AppModule.html",[209,1.392,281,2.99]],["body/modules/AppModule.html",[0,0.172,3,0.106,4,0.106,5,0.106,27,1.407,28,1.686,29,0.233,30,0.013,47,0.497,87,0.247,99,0.12,110,0.008,111,0.008,114,1.752,136,1.769,149,2.234,187,3.742,188,0.804,209,2.139,210,4.994,211,1.983,212,1.983,213,2.174,214,2.174,215,1.983,216,3.42,217,2.174,221,2.992,222,1.983,223,2.074,225,2.285,226,1.509,229,3.595,234,2.077,241,2.97,251,1.229,253,2.374,266,1.87,269,4.593,277,4.688,278,3.505,281,6.131,282,3.505,283,3.505,284,3.505,285,4.994,286,4.994,287,4.994,288,4.994,289,4.426,290,4.994,291,4.688,292,4.426,293,4.015,294,4.824,295,3.872,296,2.174,297,3.505,298,2.919,299,3.17,300,4.015,301,4.015,302,4.015,303,4.015,304,3.17,305,4.015,306,4.015,307,4.015,308,4.015,309,2.919,310,4.015,311,1.752,312,3.17,313,3.17,314,3.17,315,4.015,316,4.015,317,4.015,318,3.17,319,3.505,320,3.505,321,3.505,322,4.015,323,2.919,324,4.015,325,4.015,326,4.015,327,2.919,328,4.015,329,3.505,330,3.505,331,4.824,332,4.015,333,3.316,334,4.278,335,5.515,336,2.919,337,4.015,338,1.686,339,4.015,340,4.015,341,3.17,342,2.41,343,4.015,344,5.372,345,4.015,346,2.074,347,4.015,348,4.015,349,4.015,350,4.015,351,6.805,352,5.525,353,4.017,354,4.015,355,5.525,356,3.17,357,4.015,358,2.919,359,3.505,360,4.015,361,4.015,362,4.017,363,2.41,364,4.015,365,2.719,366,4.015,367,4.015,368,4.015,369,4.015,370,4.015,371,4.015,372,4.015,373,3.505,374,4.015]],["title/injectables/AppService.html",[231,1.035,277,2.614]],["body/injectables/AppService.html",[0,0.27,3,0.167,4,0.167,5,0.167,15,0.32,30,0.013,39,0.54,47,0.662,87,0.188,99,0.188,110,0.011,111,0.011,153,2.673,164,2.21,188,1.263,198,1.693,231,1.854,232,2.985,271,7.022,277,4.683,375,5.506,376,6.306,377,6.306,378,6.306]],["title/classes/ApplicationNotificationDto.html",[0,0.176,379,2.226]],["body/classes/ApplicationNotificationDto.html",[0,0.315,2,0.941,3,0.096,4,0.096,5,0.096,8,2.02,15,0.183,16,0.576,20,2.912,22,2.417,27,2.093,29,0.414,30,0.013,32,0.955,34,1.173,36,0.996,37,2.594,39,0.557,47,0.737,79,2.333,80,2.538,82,2.951,87,0.153,88,3.473,89,2.093,90,2.673,93,1.145,94,2.607,95,1.037,99,0.213,100,1.787,110,0.008,111,0.008,127,1.869,128,1.713,260,0.972,276,1.728,311,3.449,346,2.654,379,2.782,380,2.172,381,3.234,382,3.086,383,3.078,384,3.114,385,2.654,386,3.618,387,3.618,388,2.654,389,3.618,390,3.618,391,2.924,392,3.863,393,3.473,394,2.3,395,3.222,396,3.973,397,4.404,398,4.176,399,3.618,400,3.086,401,2.73,402,3.159,403,3.618,404,2.891,405,2.172,406,1.959,407,1.787,408,3.521,409,3.941,410,2.924,411,1.959,412,3.996,413,3.083,414,2.924,415,3.266,416,3.585,417,2.242,418,3.903,419,3.266,420,3.266,421,3.083,422,3.266,423,3.585,424,3.798,425,1.959,426,2.172,427,1.959,428,2.172,429,2.172,430,2.172,431,2.172,432,2.172,433,2.172,434,3.083,435,2.172,436,3.083,437,2.172,438,2.3,439,2.3,440,2.3,441,2.3,442,2.3,443,2.059,444,2.059,445,2.059,446,2.059,447,1.959,448,1.959,449,2.172,450,2.059,451,1.579,452,1.959,453,1.787,454,1.869,455,1.869]],["title/entities/ApplicationStatusHistory.html",[112,1.259,456,2.785]],["body/entities/ApplicationStatusHistory.html",[0,0.197,3,0.122,4,0.122,5,0.122,15,0.306,16,0.677,29,0.47,30,0.013,31,1.392,32,1.165,36,1.31,39,0.68,47,0.713,63,1.323,87,0.18,99,0.137,110,0.009,111,0.009,112,1.404,114,2.001,122,2.271,123,3.439,127,3.96,130,4.771,132,3.491,135,4.098,136,1.993,144,3.787,145,1.553,266,1.553,276,2.02,381,3.659,384,2.949,385,3.122,456,4.092,457,4.146,458,7.007,459,4.004,460,6.759,461,6.759,462,5.901,463,6.759,464,4.577,465,4.567,466,2.916,467,6.043,468,4.771,469,4.394,470,4.586,471,6.272,472,4.586,473,4.481,474,5.574,475,4.586,476,3.106,477,6.043,478,4.586,479,6.043,480,4.586,481,4.586,482,6.043,483,4.586,484,6.043,485,4.586,486,5.276,487,4.586,488,3.842,489,3.627,490,2.61,491,2.916,492,4.586,493,4.004,494,4.586,495,2.266]],["title/entities/Appointment.html",[112,1.259,496,2.34]],["body/entities/Appointment.html",[0,0.182,3,0.112,4,0.112,5,0.112,12,1.639,15,0.215,16,0.642,20,2.356,23,2.441,24,2.441,29,0.485,30,0.013,31,1.348,32,1.218,34,1.483,36,1.259,39,0.71,44,1.34,47,0.75,63,0.717,87,0.171,99,0.171,110,0.008,111,0.008,112,1.296,114,1.848,116,2.949,121,4.398,122,2.816,123,3.695,125,3.642,132,3.355,135,3.594,136,1.992,138,2.233,142,4.721,144,4.137,145,1.434,266,1.94,276,1.634,401,3.052,451,2.5,466,2.692,488,3.642,489,3.439,496,3.261,497,3.343,498,5.127,499,4.398,500,5.127,501,4.721,502,4.398,503,3.897,504,4.398,505,2.833,506,4.235,507,4.235,508,3.343,509,4.235,510,4.235,511,4.235,512,4.235,513,4.235,514,3.697,515,4.235,516,4.235,517,4.524,518,4.235,519,4.235,520,4.235,521,4.621,522,4.235,523,4.235,524,2.868,525,4.524,526,5.73,527,4.235,528,4.235,529,2.41,530,3.88,531,3.642,532,3.439,533,4.235,534,3.079,535,3.697]],["title/controllers/AppointmentController.html",[147,1.662,536,2.99]],["body/controllers/AppointmentController.html",[0,0.111,3,0.069,4,0.069,5,0.069,8,1.012,10,2.617,11,2.767,12,1.722,15,0.132,17,1.317,29,0.422,30,0.013,31,0.504,32,1.084,36,1.504,39,0.632,47,0.742,63,1.23,87,0.217,95,0.745,96,1.761,99,0.078,110,0.006,111,0.006,122,2.773,147,1.051,149,1.051,151,1.56,153,1.458,154,2.715,155,2.176,156,2.661,158,1.986,161,2.555,163,2.773,164,2.585,166,1.284,167,1.653,175,1.408,176,1.89,178,1.653,180,1.89,182,3.328,183,1.89,184,1.56,185,3.515,187,1.761,188,0.521,191,1.408,193,1.479,195,1.23,196,1.566,198,1.951,205,3.573,207,2.052,234,3.12,250,1.013,251,1.692,253,1.847,259,2.376,260,1.876,266,1.361,276,1.713,338,1.687,362,1.89,495,2.731,496,4.58,499,3.328,505,1.013,521,3.515,536,2.922,537,2.27,538,6.101,539,3.509,540,4.019,541,3.509,542,4.019,543,4.914,544,3.515,545,3.328,546,2.27,547,4.018,548,3.691,549,2.27,550,2.6,551,2.922,552,2.287,553,2.287,554,2.6,555,3.589,556,2.6,557,2.27,558,5.363,559,2.27,560,4.019,561,2.6,562,5.754,563,2.722,564,2.27,565,5.529,566,4.019,567,2.6,568,2.27,569,2.6,570,2.6,571,2.6,572,2.6,573,2.27,574,4.019,575,4.29,576,2.6,577,2.6,578,2.6,579,4.828,580,4.442,581,2.6,582,2.6,583,5.519,584,4.019,585,2.6,586,2.6,587,5.22,588,2.6,589,2.6,590,2.6,591,2.6,592,4.61,593,2.27,594,2.6,595,1.56,596,2.6,597,2.6,598,1.761,599,3.402,600,2.6,601,2.6,602,3.124,603,2.27,604,3.173,605,1.479,606,1.89,607,1.761,608,3.237,609,1.89,610,0.943,611,1.89,612,1.761,613,2.27,614,2.052,615,1.89,616,4.792,617,2.922,618,1.89,619,2.6,620,2.6,621,4.049,622,2.052,623,1.56,624,2.6,625,4.596,626,2.6,627,2.6,628,4.72,629,2.6,630,2.6,631,2.052,632,4.049,633,2.6,634,4.019,635,2.6,636,2.6,637,2.6,638,6.321,639,2.6,640,2.27,641,1.89,642,2.6,643,2.6,644,4.019,645,4.019,646,2.949,647,2.6,648,2.27,649,2.6,650,2.6,651,2.27,652,2.27,653,2.6,654,2.6,655,2.052,656,2.6,657,2.27,658,4.914,659,2.6,660,2.6,661,2.176,662,4.019,663,4.019,664,3.509,665,3.509,666,3.509,667,3.509,668,4.019,669,4.019,670,2.6,671,2.6,672,2.052,673,2.6,674,2.6,675,2.27,676,2.052,677,2.6,678,1.653,679,2.6,680,2.6,681,2.6,682,2.6,683,2.6]],["title/modules/AppointmentModule.html",[209,1.392,285,2.785]],["body/modules/AppointmentModule.html",[0,0.25,3,0.155,4,0.155,5,0.155,30,0.013,87,0.239,99,0.174,110,0.01,111,0.01,149,2.846,188,1.17,209,2.558,211,2.885,212,2.885,213,3.162,214,3.162,215,2.885,216,4.091,217,4.091,221,3.811,222,2.885,223,3.017,225,3.324,226,2.195,229,3.324,285,5.585,496,3.324,536,5.493,602,5.398,603,5.099,612,3.955,684,5.099,685,5.099,686,5.099,687,5.841,688,5.841,689,5.841]],["title/classes/AppointmentNotificationDto.html",[0,0.176,690,2.99]],["body/classes/AppointmentNotificationDto.html",[0,0.258,2,1.183,3,0.121,4,0.121,5,0.121,8,1.925,15,0.231,16,0.674,17,1.298,20,2.181,22,2.134,23,1.71,24,1.71,29,0.483,30,0.013,32,1.124,33,3.822,37,2.56,39,0.655,44,1.44,47,0.746,87,0.179,88,2.845,89,2.359,90,2.609,93,1.44,94,2.938,95,1.304,99,0.136,110,0.009,111,0.009,122,1.71,136,1.563,260,1.614,276,1.963,363,2.731,383,3.389,392,2.464,401,2.524,404,2.702,407,2.97,450,2.589,496,4.507,499,4.559,503,2.731,530,3.082,532,3.608,690,4.371,691,6.811,692,3.592,693,5.878,694,5.879,695,2.893,696,4.071,697,4.553,698,6.012,699,4.55,700,5.249,701,5.249,702,4.746,703,4.55,704,3.973,705,5.249,706,4.55,707,3.973,708,5.879,709,5.249,710,4.55,711,4.55,712,3.822,713,4.55,714,4.55,715,6.253,716,5.315,717,5.878,718,4.371,719,4.55,720,3.973,721,4.298,722,3.973,723,3.973]],["title/injectables/AppointmentService.html",[231,1.035,602,2.614]],["body/injectables/AppointmentService.html",[0,0.096,3,0.059,4,0.059,5,0.059,11,2.132,12,0.762,15,0.113,16,0.399,17,1.306,29,0.437,30,0.013,31,1.432,34,0.509,36,1.473,39,0.64,47,0.711,63,1.22,79,1.011,87,0.185,96,2.41,99,0.066,109,0.935,110,0.005,111,0.005,122,2.987,145,0.754,153,1.291,154,2.019,155,1.927,156,2.407,158,1.758,163,2.709,164,2.559,166,1.1,172,0.972,175,1.927,178,1.416,188,0.446,191,1.206,193,1.267,196,1.732,198,1.872,226,0.837,231,0.896,232,1.054,234,3.087,235,1.439,237,2.623,241,3.422,247,1.416,248,1.206,250,2.659,251,2.388,253,2.565,256,3.439,257,1.508,259,2.807,260,1.905,262,2.104,263,2.41,276,1.814,338,2.132,363,4.096,385,1.15,393,2.104,412,1.15,417,3.097,451,0.972,495,2.196,496,4.325,498,5.096,499,3.439,500,4.673,505,1.387,521,3.228,530,1.508,531,1.416,532,1.337,535,3.881,538,4.847,539,3.881,541,3.107,545,3.011,546,1.944,547,3.763,555,1.1,563,2.41,564,1.944,573,3.107,575,4.433,583,4.847,587,3.881,592,4.371,595,1.337,599,1.267,602,2.263,604,2.81,612,1.508,648,1.944,655,2.81,661,3.006,695,3.228,724,1.944,725,4.445,726,3.559,727,5.078,728,3.559,729,4.445,730,5.078,731,2.227,732,3.559,733,3.559,734,2.227,735,2.227,736,2.227,737,1.619,738,2.227,739,3.692,740,3.559,741,2.227,742,2.227,743,2.227,744,2.227,745,3.559,746,2.227,747,2.227,748,2.227,749,2.227,750,2.227,751,2.227,752,2.227,753,2.227,754,3.559,755,1.944,756,2.227,757,2.227,758,1.758,759,1.944,760,2.227,761,3.287,762,2.227,763,2.227,764,2.227,765,3.51,766,2.227,767,4.445,768,2.227,769,2.227,770,2.227,771,2.227,772,2.227,773,3.881,774,3.559,775,5.551,776,3.559,777,5.919,778,4.445,779,4.445,780,2.227,781,3.559,782,3.559,783,3.559,784,3.559,785,3.559,786,4.445,787,3.559,788,2.227,789,2.136,790,2.227,791,3.559,792,2.227,793,3.188,794,4.105,795,5.551,796,1.508,797,2.227,798,2.227,799,2.227,800,1.944,801,2.227,802,2.227,803,2.227,804,3.559,805,3.559,806,3.559,807,1.944,808,2.227,809,4.445,810,2.227,811,2.227,812,2.227,813,2.227,814,1.337,815,2.227,816,2.227,817,1.944,818,2.227,819,2.227,820,2.227,821,2.227,822,2.227,823,2.227,824,3.692,825,2.227,826,2.81,827,2.227,828,2.227,829,2.227,830,2.227,831,2.227,832,1.944,833,3.559,834,3.559,835,3.559,836,3.107,837,3.559,838,1.758,839,5.919,840,2.227,841,2.227,842,2.227,843,3.559,844,2.227,845,2.227,846,2.227,847,2.227,848,1.267,849,1.15,850,1.619,851,4.445,852,2.025,853,3.559,854,3.559,855,2.227,856,1.944,857,3.559,858,2.227]],["title/modules/AuthModule.html",[209,1.392,286,2.785]],["body/modules/AuthModule.html",[0,0.207,3,0.128,4,0.128,5,0.128,12,1.032,30,0.013,87,0.248,99,0.144,110,0.009,111,0.009,149,2.524,188,0.966,209,2.344,211,2.382,212,2.382,213,2.61,214,2.61,215,2.382,216,3.749,217,3.749,221,3.381,222,2.382,223,2.491,225,2.744,226,1.812,229,3.941,286,5.731,289,4.664,291,5.263,292,4.969,294,5.451,295,4.168,296,2.61,304,3.806,311,2.725,312,3.806,313,3.806,314,3.806,318,3.806,319,4.209,529,2.744,859,4.209,860,4.821,861,4.209,862,4.209,863,5.606,864,4.969,865,4.821,866,5.467,867,4.821,868,3.806,869,6.243,870,3.065,871,4.209,872,4.821,873,3.806,874,4.209,875,4.821,876,4.821,877,3.065,878,4.821,879,4.209,880,3.505,881,4.821,882,4.821,883,4.821]],["title/interfaces/AuthenticatedUser.html",[548,2.031,884,1.392]],["body/interfaces/AuthenticatedUser.html",[0,0.219,3,0.135,4,0.135,5,0.135,13,2.412,15,0.258,16,0.725,22,2.296,29,0.413,30,0.013,31,1.449,35,1.56,36,1.496,39,0.437,41,3.672,44,1.613,47,0.694,63,0.863,87,0.223,99,0.193,110,0.01,111,0.01,188,1.021,195,2.412,198,1.369,231,1.628,251,2.289,259,2.432,260,1.737,266,1.725,295,4.045,296,2.76,334,3.452,505,2.521,548,3.511,610,2.907,864,3.059,870,3.24,877,4.113,880,3.706,884,2.19,885,2.76,886,3.706,887,3.452,888,4.024,889,4.024,890,5.108,891,3.706,892,4.381,893,3.706,894,4.024,895,4.024,896,3.706,897,4.024,898,4.814,899,4.024,900,3.452,901,4.024,902,4.024,903,4.024,904,4.024,905,4.024,906,4.024,907,3.452,908,5.168,909,4.024,910,4.024,911,3.452,912,3.706,913,4.024,914,4.024,915,4.024,916,4.024]],["title/entities/Counter.html",[112,1.259,917,2.34]],["body/entities/Counter.html",[0,0.222,3,0.137,4,0.137,5,0.137,15,0.262,16,0.732,29,0.459,30,0.013,31,1.457,32,1.139,34,1.491,36,1.387,39,0.664,44,1.637,47,0.587,63,1.312,87,0.195,99,0.195,110,0.01,111,0.01,112,1.583,114,2.257,125,3.288,132,3.697,135,3.883,136,1.86,144,3.829,145,1.751,276,1.801,401,3.254,473,3.104,489,3.919,524,3.503,525,5.156,917,3.716,918,4.084,919,7.157,920,7.157,921,3.91,922,5.091,923,4.516,924,6.53,925,7.517,926,6.53,927,5.172,928,5.172,929,5.172,930,5.172,931,6.768,932,5.172,933,5.702,934,5.172,935,4.152,936,4.748,937,5.172,938,5.172]],["title/classes/CreateAnnouncementDto.html",[0,0.176,160,2.614]],["body/classes/CreateAnnouncementDto.html",[0,0.294,2,1.455,3,0.148,4,0.148,5,0.148,8,1.866,15,0.284,16,0.769,17,1.463,29,0.46,30,0.013,32,1.165,39,0.68,47,0.742,87,0.167,89,2.709,90,2.779,93,1.771,99,0.167,110,0.01,111,0.01,117,6.475,118,6.475,119,4.015,120,6.475,138,2.673,160,4.36,721,4.451,939,7.048,940,4.418,941,5.988,942,5.596,943,5.988,944,5.596,945,5.596,946,5.596,947,5.596,948,5.596,949,5.415]],["title/classes/CreateAppointmentDto.html",[0,0.176,547,2.614]],["body/classes/CreateAppointmentDto.html",[0,0.269,2,1.264,3,0.129,4,0.129,5,0.129,15,0.246,16,0.704,17,1.412,20,2.522,23,2.613,24,2.613,29,0.478,30,0.013,31,1.217,32,1.211,39,0.706,47,0.757,87,0.187,89,2.777,90,2.814,93,1.538,99,0.145,110,0.009,111,0.009,138,2.446,276,1.75,498,5.489,500,5.489,501,5.055,502,4.708,503,4.172,504,4.708,505,2.709,521,4.42,547,3.991,612,3.292,721,4.82,722,5.481,941,4.245,950,7.237,951,3.838,952,7.789,953,4.862,954,4.862,955,4.862,956,4.862,957,4.862,958,4.862,959,4.862,960,4.862,961,4.862,962,4.862,963,4.245,964,4.862,965,4.862,966,3.292,967,4.245]],["title/classes/CreateDocumentApplicationDto.html",[0,0.176,968,2.785]],["body/classes/CreateDocumentApplicationDto.html",[0,0.27,2,1.271,3,0.13,4,0.13,5,0.13,8,1.918,15,0.248,16,0.706,17,1.457,23,1.838,24,1.838,29,0.453,30,0.013,32,1.082,37,2.544,39,0.631,47,0.662,87,0.208,89,2.442,90,2.442,93,1.547,95,1.401,99,0.146,110,0.009,111,0.009,266,2.133,276,1.586,342,3.781,382,4.154,383,3.299,384,3.509,388,3.254,395,2.547,401,2.053,404,2.764,455,3.254,457,3.936,464,4.721,490,4.516,491,3.108,646,4.419,696,4.267,966,3.311,968,4.267,969,6.652,970,3.86,971,5.503,972,6.086,973,6.3,974,6.3,975,4.974,976,4.889,977,4.269,978,4.889,979,4.889,980,4.974,981,6.3,982,6.3,983,4.889,984,4.889,985,6.3,986,6.3,987,4.889,988,6.3,989,3.555,990,4.889,991,4.889,992,4.889,993,4.889,994,4.889,995,4.889,996,4.889,997,4.974,998,4.889,999,4.889]],["title/classes/CreateQueueDto.html",[0,0.176,1000,3.246]],["body/classes/CreateQueueDto.html",[0,0.276,2,1.313,3,0.134,4,0.134,5,0.134,15,0.256,16,0.721,17,1.493,20,2.568,23,2.661,24,2.661,29,0.474,30,0.013,31,1.247,32,1.201,39,0.7,47,0.76,87,0.151,89,2.802,90,2.836,93,1.599,99,0.151,110,0.01,111,0.01,138,2.507,501,5.147,502,4.794,503,4.249,504,4.794,505,2.759,721,4.619,943,6.507,949,5.08,1000,5.08,1001,7.191,1002,3.989,1003,6.181,1004,6.181,1005,5.052,1006,5.052,1007,5.052,1008,5.052,1009,5.052,1010,5.052,1011,5.052,1012,5.052,1013,5.052,1014,5.052]],["title/classes/CreateUserDto.html",[0,0.176,1015,2.34]],["body/classes/CreateUserDto.html",[0,0.228,2,0.986,3,0.1,4,0.1,5,0.1,7,2.757,8,2.101,12,1.718,15,0.192,16,0.595,17,1.488,18,3.318,19,3.487,20,1.376,21,3.166,22,2.131,23,2.303,24,2.303,25,3.166,26,3.166,27,2.449,28,2.934,29,0.466,30,0.013,31,1.404,32,1.16,34,1.213,35,2.032,36,1.029,37,2.499,39,0.677,41,2.743,42,4.192,43,3.022,44,1.2,47,0.741,57,3.596,62,3.187,63,1.337,66,3.022,69,3.596,72,3.596,73,3.861,74,4.906,75,2.757,80,2.623,81,3.596,82,3.027,87,0.158,88,2.513,89,2.659,90,2.702,91,4.15,92,4.192,93,1.2,94,3.312,95,1.087,99,0.113,103,3.985,105,4.221,108,2.568,110,0.008,111,0.008,136,1.38,333,3.187,404,2.536,412,3.166,721,3.985,1015,3.022,1016,6.958,1017,5.872,1018,4.636,1019,3.792,1020,3.792,1021,3.376,1022,3.792,1023,3.792,1024,4.221,1025,4.636,1026,3.792,1027,3.792,1028,5.31,1029,3.792,1030,3.311,1031,5.797,1032,3.792,1033,3.311,1034,3.022,1035,4.192,1036,4.192,1037,3.792,1038,3.311,1039,5.31,1040,3.792,1041,3.311,1042,4.192,1043,3.792,1044,3.792,1045,3.792,1046,5.31,1047,3.792,1048,4.636,1049,3.792,1050,3.311,1051,3.596,1052,3.792,1053,2.757]],["title/entities/DocumentApplication.html",[112,1.259,465,2.614]],["body/entities/DocumentApplication.html",[0,0.157,3,0.137,4,0.097,5,0.16,12,1.576,15,0.263,16,0.581,29,0.478,30,0.013,31,1.268,32,1.173,34,1.185,36,1.166,39,0.684,44,1.161,47,0.644,63,1.313,87,0.195,99,0.179,110,0.008,111,0.008,112,1.123,114,1.601,116,2.733,121,4.076,122,2.459,123,2.952,125,3.298,127,3.109,128,2.455,130,4.096,135,4.008,136,2.04,142,3.772,144,3.717,145,1.242,266,2.215,276,1.647,382,3.888,384,1.601,388,1.895,400,2.68,401,3.257,451,2.264,452,2.809,453,1.812,454,1.895,455,3.109,456,4.431,457,4.155,464,4.076,465,3.298,466,2.332,469,4.757,473,4.143,474,3.772,476,2.484,486,4.529,488,3.298,489,3.113,490,2.087,495,1.812,505,2.345,524,2.484,529,2.087,971,4.752,972,5.255,980,4.096,1054,5.848,1055,2.896,1056,4.752,1057,6.018,1058,6.018,1059,5.187,1060,3.668,1061,5.187,1062,3.668,1063,4.096,1064,3.668,1065,4.431,1066,4.529,1067,5.187,1068,3.668,1069,5.187,1070,5.187,1071,3.668,1072,3.668,1073,3.668,1074,5.187,1075,3.668,1076,5.019,1077,3.668,1078,5.187,1079,5.187,1080,5.187,1081,3.668,1082,3.668,1083,3.203,1084,4.529,1085,3.668,1086,5.165,1087,3.668,1088,3.668,1089,5.187,1090,5.255,1091,3.203,1092,3.203,1093,3.203,1094,3.203,1095,4.529,1096,3.203,1097,2.667,1098,3.203,1099,3.203,1100,3.203,1101,3.203,1102,3.203,1103,4.529,1104,4.529,1105,3.203,1106,3.203,1107,3.203,1108,2.896,1109,3.668,1110,3.668,1111,3.668,1112,3.668,1113,3.668,1114,3.668]],["title/controllers/DocumentApplicationsController.html",[147,1.662,1115,2.99]],["body/controllers/DocumentApplicationsController.html",[0,0.093,3,0.058,4,0.058,5,0.179,8,1.704,10,3.388,11,2.582,12,1.781,15,0.11,17,1.227,29,0.409,30,0.013,32,1.035,36,1.487,39,0.604,44,2.023,47,0.736,63,1.146,87,0.21,95,0.622,99,0.065,110,0.005,111,0.005,136,1.136,147,0.877,149,0.877,151,1.302,153,1.265,154,2.489,155,2.366,156,2.366,158,1.722,161,2.216,163,2.545,164,2.469,166,1.072,167,1.38,173,1.175,175,1.175,176,1.578,178,1.38,180,1.578,182,3.388,183,1.578,184,1.302,185,2.778,187,1.47,188,0.435,191,1.175,193,1.235,196,1.358,198,1.922,205,4.254,207,1.713,234,3.066,235,0.877,241,1.521,250,1.358,251,2.118,253,1.88,259,0.816,260,1.471,262,2.368,266,0.735,276,1.704,309,5.205,333,1.302,338,1.464,342,1.302,384,3.408,395,0.877,457,3.698,464,1.47,490,3.754,491,1.38,495,2.471,505,2.829,544,3.18,545,2.959,548,3.979,549,1.895,551,2.535,552,1.984,553,3.118,555,3.418,558,3.637,562,5.582,563,3.388,568,1.895,580,4.398,593,1.895,595,1.302,598,1.47,599,1.984,605,1.235,606,1.578,607,1.47,608,1.175,609,1.578,610,0.787,611,1.578,613,1.895,614,1.713,615,1.578,616,5.205,617,4.254,618,1.578,621,1.47,622,1.713,623,1.302,625,5.123,628,5.345,631,3.449,632,2.959,641,2.535,646,1.302,657,3.044,666,5.369,672,1.713,678,1.38,695,2.216,697,1.38,824,1.578,968,3.388,989,1.578,1056,5.345,1076,2.535,1115,2.535,1116,1.895,1117,5.369,1118,4.369,1119,5.003,1120,4.369,1121,4.369,1122,4.369,1123,2.17,1124,2.17,1125,2.17,1126,3.486,1127,2.17,1128,2.17,1129,2.17,1130,2.361,1131,2.17,1132,2.17,1133,2.17,1134,5.851,1135,3.023,1136,1.895,1137,3.95,1138,3.637,1139,3.044,1140,3.95,1141,2.17,1142,2.17,1143,4.369,1144,2.17,1145,2.17,1146,2.17,1147,3.486,1148,2.752,1149,2.17,1150,2.17,1151,2.17,1152,2.17,1153,3.486,1154,3.95,1155,2.17,1156,4.369,1157,2.17,1158,3.486,1159,2.17,1160,2.17,1161,2.17,1162,5.003,1163,3.637,1164,2.17,1165,4.369,1166,2.17,1167,2.17,1168,2.17,1169,3.449,1170,5.109,1171,2.17,1172,2.17,1173,3.044,1174,2.17,1175,3.486,1176,3.486,1177,2.092,1178,1.895,1179,1.713,1180,2.17,1181,1.895,1182,1.895,1183,3.177,1184,1.895,1185,3.044,1186,2.17,1187,2.17,1188,2.17,1189,2.17,1190,2.17,1191,2.17,1192,2.17,1193,2.17,1194,1.895,1195,1.072,1196,3.486,1197,2.17,1198,2.17,1199,1.713,1200,3.486,1201,2.17,1202,2.17,1203,2.17,1204,2.17,1205,2.17,1206,2.17,1207,2.17,1208,2.17,1209,2.17,1210,4.369,1211,1.895,1212,1.895,1213,2.17,1214,2.17,1215,2.17,1216,2.17,1217,6.394,1218,2.17,1219,3.486,1220,3.486,1221,3.486,1222,3.486,1223,2.17,1224,2.17,1225,1.47,1226,2.17,1227,2.17,1228,2.17,1229,2.17,1230,2.17,1231,2.17,1232,2.17,1233,2.17,1234,3.044,1235,2.17,1236,2.17,1237,2.17,1238,2.17,1239,2.17,1240,1.302,1241,1.895,1242,2.17,1243,2.17,1244,2.17,1245,2.17]],["title/modules/DocumentApplicationsModule.html",[209,1.392,287,2.785]],["body/modules/DocumentApplicationsModule.html",[0,0.233,3,0.144,4,0.144,5,0.144,30,0.013,87,0.245,99,0.162,110,0.01,111,0.01,149,2.722,188,1.088,209,2.477,211,2.683,212,2.683,213,2.94,214,2.94,215,2.683,216,3.962,217,3.962,221,3.645,222,2.683,223,2.805,225,3.09,226,2.041,229,3.09,276,1.367,287,5.642,309,3.948,456,4.559,457,2.805,465,4.28,490,3.831,491,3.452,989,4.895,1065,4.559,1091,4.741,1092,4.741,1115,5.32,1183,6.117,1184,4.741,1246,4.741,1247,4.741,1248,4.741,1249,5.05,1250,5.431,1251,5.431,1252,5.431,1253,5.431,1254,5.431]],["title/entities/DocumentFile.html",[112,1.259,1065,2.785]],["body/entities/DocumentFile.html",[0,0.195,3,0.121,4,0.121,5,0.121,15,0.305,16,0.674,29,0.473,30,0.013,31,1.388,32,1.177,36,1.305,39,0.686,47,0.727,63,1.34,87,0.179,99,0.136,110,0.009,111,0.009,112,1.393,114,1.986,122,2.26,123,3.421,127,4.179,128,2.845,132,3.478,134,5.249,135,3.106,136,1.563,140,5.249,144,3.854,145,1.54,381,3.645,384,2.938,385,3.106,457,4.179,465,4.553,466,2.893,468,4.746,469,3.308,471,6.253,473,4.591,474,4.371,476,3.082,488,3.822,489,3.608,490,2.589,491,2.893,493,3.973,495,2.248,1054,5.882,1065,4.071,1170,5.878,1194,5.878,1255,3.973,1256,6.732,1257,6.732,1258,6.732,1259,6.732,1260,6.012,1261,3.973,1262,4.55,1263,4.55,1264,6.012,1265,6.012,1266,4.55,1267,6.012,1268,4.55,1269,6.012,1270,6.012,1271,4.55,1272,6.012,1273,4.55,1274,4.55,1275,6.012,1276,4.55,1277,6.012,1278,4.55,1279,4.55,1280,4.55]],["title/interfaces/FindAllOptions.html",[884,1.392,1281,2.785]],["body/interfaces/FindAllOptions.html",[0,0.104,1,1.964,3,0.064,4,0.064,5,0.064,10,1.146,11,2.234,12,1.662,14,1.964,15,0.123,16,0.426,17,1.048,18,3.323,19,3.492,21,2.987,22,2.044,23,2.498,24,2.413,25,3.614,26,3.532,27,2.15,28,3.044,29,0.309,30,0.013,31,1.442,34,0.553,35,2.219,36,1.458,43,2.164,44,2.103,47,0.614,63,1.039,66,1.378,87,0.204,98,2.425,99,0.113,109,1.016,110,0.006,111,0.006,116,1.099,119,2.542,136,0.629,138,0.943,145,0.82,154,1.099,158,2.319,166,1.196,173,3.599,175,1.311,188,0.485,191,1.311,196,0.943,198,1.915,209,0.82,226,0.91,231,0.957,234,2.57,235,0.979,237,1.964,241,2.801,247,1.539,248,1.311,250,1.83,251,2.503,253,2.938,256,1.639,257,1.639,259,2.57,260,1.879,262,2.518,263,2.575,268,1.639,338,1.596,393,1.146,395,0.979,417,1.659,495,2.856,544,1.539,595,1.453,599,1.378,610,2.63,623,1.453,661,2.542,737,1.76,739,1.76,761,1.196,789,2.282,793,1.196,794,2.425,814,1.453,848,2.164,849,1.25,852,3.29,884,1.287,885,1.311,1015,2.672,1021,1.539,1034,1.378,1051,3.18,1135,2.425,1195,1.878,1225,2.575,1240,1.453,1281,3.18,1282,1.76,1283,4.08,1284,4.979,1285,1.76,1286,1.76,1287,1.76,1288,2.417,1289,2.425,1290,1.76,1291,2.282,1292,1.639,1293,3.603,1294,3.603,1295,3.18,1296,3.18,1297,3.18,1298,3.382,1299,3.18,1300,3.002,1301,1.378,1302,1.911,1303,1.639,1304,1.639,1305,1.911,1306,1.911,1307,3.707,1308,3.002,1309,1.911,1310,3.852,1311,1.911,1312,3.002,1313,2.764,1314,1.911,1315,2.764,1316,2.764,1317,2.764,1318,1.911,1319,1.911,1320,1.911,1321,1.911,1322,1.911,1323,2.417,1324,3.002,1325,1.911,1326,4.156,1327,3.002,1328,2.764,1329,2.764,1330,1.76,1331,1.911,1332,4.738,1333,4.2,1334,1.76,1335,1.911,1336,3.002,1337,2.764,1338,4.2,1339,2.764,1340,3.676,1341,2.764,1342,2.575,1343,3.002,1344,1.911,1345,1.911,1346,1.911,1347,1.911,1348,1.911,1349,1.453,1350,1.911,1351,1.911,1352,1.911,1353,1.911,1354,1.76,1355,3.002,1356,3.707,1357,1.76,1358,1.911,1359,3.002,1360,1.76,1361,1.911,1362,1.911,1363,3.002,1364,1.539,1365,1.911,1366,1.911,1367,1.911,1368,1.911,1369,1.911,1370,3.002,1371,1.911,1372,1.911,1373,3.002,1374,1.911,1375,1.911,1376,1.911,1377,1.911,1378,1.911,1379,1.911,1380,1.911,1381,1.911,1382,1.911,1383,1.911,1384,1.911,1385,3.002,1386,1.911,1387,1.911,1388,1.911,1389,1.911,1390,2.764,1391,1.76,1392,2.764,1393,2.764,1394,1.76,1395,1.76,1396,1.911,1397,1.639,1398,1.76,1399,1.911]],["title/classes/ForgotPasswordDto.html",[0,0.176,425,2.226]],["body/classes/ForgotPasswordDto.html",[0,0.319,2,0.988,3,0.101,4,0.101,5,0.101,8,2.035,15,0.193,16,0.596,20,2.934,22,2.427,27,2.15,29,0.309,30,0.013,32,0.558,34,1.215,36,0.737,37,2.574,39,0.326,47,0.731,79,2.415,80,2.627,82,3.031,87,0.159,88,3.522,89,2.15,90,2.703,93,1.203,94,2.677,95,1.089,99,0.216,100,1.877,110,0.008,111,0.008,127,1.963,128,1.799,260,1.02,276,1.338,311,3.479,346,2.747,379,2.058,380,2.281,381,2.058,382,1.963,383,1.799,384,2.677,385,1.963,388,1.963,391,2.163,392,3.925,393,3.522,394,2.416,395,3.248,396,4.029,397,4.466,398,4.235,400,2.747,401,2.576,404,2.915,405,2.281,406,2.058,407,1.877,408,3.598,409,3.986,410,3.026,411,2.058,412,4.038,413,3.192,414,3.026,415,3.381,416,3.682,417,2.321,418,3.988,419,3.381,420,3.381,421,3.192,422,3.381,423,3.682,424,3.9,425,2.88,426,3.192,427,2.058,428,2.281,429,2.281,430,2.281,431,2.281,432,2.281,433,2.281,434,3.192,435,2.281,436,3.192,437,2.281,438,2.416,439,2.416,440,2.416,441,2.416,442,2.416,443,2.163,444,2.163,445,2.163,446,2.163,447,2.058,448,2.058,449,2.281,450,2.163,451,1.658,452,2.058,453,1.877,454,1.963,455,1.963,1400,3.8]],["title/injectables/JwtAuthGuard.html",[231,1.035,605,2.34]],["body/injectables/JwtAuthGuard.html",[0,0.275,3,0.17,4,0.17,5,0.17,13,3.52,30,0.012,87,0.222,99,0.191,110,0.011,111,0.011,188,1.284,231,1.872,232,3.034,605,4.232,870,4.075,1401,5.597,1402,5.597,1403,7.437,1404,6.411]],["title/interfaces/JwtPayload.html",[884,1.392,892,2.785]],["body/interfaces/JwtPayload.html",[0,0.218,3,0.135,4,0.135,5,0.135,13,2.405,15,0.258,16,0.724,17,1.17,22,2.295,29,0.412,30,0.013,31,1.448,35,1.555,36,1.252,39,0.435,41,2.625,44,1.608,47,0.72,63,0.86,87,0.223,99,0.193,110,0.01,111,0.01,188,1.018,195,2.405,198,1.365,231,1.625,251,2.286,259,2.427,260,1.734,266,1.72,295,4.04,296,2.751,334,3.441,505,2.516,548,3.19,610,2.905,864,3.05,870,3.231,877,4.105,880,3.695,884,2.186,885,2.751,886,3.695,887,3.441,888,4.012,889,4.012,890,5.098,891,3.695,892,4.807,893,5.431,894,4.012,895,4.012,896,3.695,897,4.012,898,4.807,899,4.012,900,3.441,901,4.012,902,4.012,903,4.012,904,4.012,905,4.012,906,4.012,907,3.441,908,5.161,909,4.012,910,4.012,911,3.441,912,3.695,913,4.012,914,4.012,915,4.012,916,4.012]],["title/injectables/JwtStrategy.html",[231,1.035,864,2.468]],["body/injectables/JwtStrategy.html",[0,0.216,3,0.133,4,0.133,5,0.133,13,3.037,15,0.255,17,1.163,22,2.133,29,0.372,30,0.013,31,1.244,35,1.54,36,1.244,39,0.605,41,2.599,44,1.592,47,0.635,63,1.196,87,0.222,99,0.191,110,0.01,111,0.01,153,2.328,163,2.412,164,1.763,188,1.008,195,2.381,198,1.351,231,1.615,232,2.381,235,2.034,251,2.278,259,2.412,260,1.723,266,1.703,295,4.473,296,2.724,334,3.407,505,2.5,548,3.49,610,2.7,864,3.851,870,3.198,877,4.079,880,3.657,884,2.172,886,3.657,887,3.407,888,3.971,889,3.971,890,5.066,891,3.657,892,5.039,893,3.657,894,3.971,895,3.971,896,3.657,897,5.066,898,4.785,899,3.971,900,3.407,901,3.971,902,3.971,903,3.971,904,3.971,905,3.971,906,5.066,907,3.407,908,5.41,909,3.971,910,3.971,911,3.407,912,3.657,913,3.971,914,3.971,915,3.971,916,3.971,1405,5.066,1406,4.392,1407,5.03,1408,5.03]],["title/interfaces/LockoutData.html",[884,1.392,1409,2.99]],["body/interfaces/LockoutData.html",[0,0.06,1,1.256,3,0.037,4,0.037,5,0.037,9,0.896,10,2.388,11,2.795,12,1.729,14,2.606,15,0.071,16,0.272,17,0.441,18,1.316,19,0.802,21,1.256,22,2.028,23,1.434,24,1.205,25,2.224,26,1.971,27,2.685,28,2.432,29,0.186,30,0.013,31,1.033,34,1.218,35,2.166,36,1.123,43,1.825,44,1.207,47,0.501,62,1.459,63,0.854,87,0.173,96,2.171,97,1.646,98,2.882,99,0.042,110,0.004,111,0.004,112,0.744,122,2.097,136,0.833,138,0.947,145,0.477,154,0.64,158,2.326,174,2.171,185,1.545,188,0.282,193,0.802,196,0.947,198,1.881,226,0.53,231,0.612,234,2.248,235,0.57,237,1.256,241,1.399,248,0.763,250,1.966,251,2.495,253,2.94,259,2.94,260,2.1,262,2.524,266,1.594,327,2.331,333,0.845,338,1.021,346,0.728,356,3.983,358,2.331,362,1.767,393,1.805,395,1.903,398,1.383,417,1.399,423,2.289,443,0.802,444,0.802,445,0.802,446,0.802,495,2.126,505,1.966,529,0.802,553,0.802,555,0.696,563,0.954,580,1.545,599,3.297,610,2.484,628,2.531,646,0.845,661,2.887,676,3.012,678,2.038,697,0.896,712,0.896,758,3.983,761,3.288,765,1.919,789,3.477,793,3.288,794,4.112,796,3.188,814,1.924,849,2.606,852,2.871,863,0.954,868,1.112,877,0.896,884,0.477,885,0.763,887,2.583,893,1.767,907,0.954,908,1.767,911,2.171,912,3.13,922,2.583,1034,1.383,1051,2.171,1053,2.331,1130,1.646,1138,1.024,1211,1.23,1225,2.171,1234,2.799,1285,2.773,1288,0.896,1289,1.656,1290,1.024,1291,1.459,1303,0.954,1304,0.954,1310,3.2,1315,1.024,1316,1.024,1317,1.024,1323,2.425,1326,2.583,1328,2.773,1329,1.767,1332,4.163,1334,1.767,1337,2.331,1339,2.331,1340,3.39,1341,1.767,1342,2.171,1349,1.924,1354,1.767,1357,1.024,1360,1.024,1364,0.896,1390,1.767,1391,1.024,1392,2.773,1393,2.773,1394,1.024,1397,1.646,1398,1.024,1405,3.399,1409,2.331,1410,1.23,1411,4.871,1412,4.305,1413,3.758,1414,3.206,1415,2.583,1416,1.23,1417,2.171,1418,1.23,1419,1.409,1420,1.409,1421,1.409,1422,1.409,1423,3.814,1424,1.409,1425,3.206,1426,4.405,1427,5.045,1428,5.045,1429,3.983,1430,4.405,1431,4.405,1432,4.405,1433,4.305,1434,1.409,1435,3.206,1436,2.431,1437,1.409,1438,1.919,1439,4.305,1440,1.409,1441,1.409,1442,3.33,1443,2.773,1444,0.954,1445,3.206,1446,1.409,1447,2.431,1448,2.799,1449,1.23,1450,2.799,1451,2.531,1452,4.21,1453,1.409,1454,1.23,1455,2.122,1456,2.122,1457,1.409,1458,2.122,1459,1.409,1460,1.409,1461,1.409,1462,1.23,1463,1.409,1464,1.919,1465,1.409,1466,1.409,1467,1.409,1468,1.23,1469,1.23,1470,1.23,1471,2.431,1472,1.409,1473,1.409,1474,1.409,1475,1.409,1476,1.409,1477,1.23,1478,1.23,1479,1.409,1480,1.409,1481,3.33,1482,1.409,1483,2.431,1484,3.206,1485,1.409,1486,1.409,1487,1.409,1488,3.983,1489,3.206,1490,2.431,1491,1.409,1492,2.122,1493,1.409,1494,1.409,1495,1.409,1496,3.206,1497,2.799,1498,3.206,1499,1.409,1500,3.206,1501,3.206,1502,4.11,1503,2.799,1504,4.11,1505,1.409,1506,2.531,1507,1.409,1508,1.409,1509,2.431,1510,1.409,1511,3.206,1512,1.409,1513,1.409,1514,1.409,1515,1.409,1516,1.409,1517,1.112,1518,1.409,1519,1.409,1520,1.23,1521,1.409,1522,1.409,1523,1.409,1524,1.409,1525,1.409,1526,1.409,1527,2.431,1528,2.431,1529,1.409,1530,3.206,1531,1.409,1532,1.409,1533,3.206,1534,1.409,1535,1.409,1536,3.814,1537,1.409,1538,1.409,1539,1.409,1540,3.206,1541,1.409,1542,2.431,1543,3.206,1544,2.431,1545,3.206,1546,1.409,1547,1.409,1548,2.431,1549,1.409,1550,2.431,1551,1.409,1552,1.409,1553,1.23,1554,1.409,1555,2.122,1556,2.431,1557,1.409,1558,4.305,1559,2.122,1560,1.409,1561,1.409,1562,2.431,1563,1.112,1564,1.409,1565,1.409,1566,3.206,1567,3.206,1568,4.656,1569,2.431,1570,1.23,1571,4.405,1572,1.409,1573,3.33,1574,1.23,1575,2.122,1576,1.409,1577,1.409,1578,1.409,1579,1.409,1580,1.409,1581,2.431,1582,1.409,1583,1.409,1584,1.409,1585,2.431,1586,1.409,1587,1.409,1588,2.431,1589,1.409,1590,1.23,1591,1.409,1592,1.409,1593,2.799,1594,1.112,1595,1.409,1596,1.409,1597,3.814,1598,1.409,1599,1.409,1600,2.431,1601,1.409,1602,2.431,1603,1.409,1604,1.409,1605,3.206,1606,1.409,1607,2.122,1608,4.305,1609,1.409,1610,1.112,1611,1.409,1612,2.431,1613,1.409,1614,1.409,1615,2.431,1616,1.409,1617,1.409,1618,1.409,1619,1.409,1620,1.409,1621,1.919,1622,1.409,1623,1.409,1624,1.409,1625,1.919,1626,1.409,1627,1.409,1628,1.409,1629,1.409,1630,1.409,1631,1.409,1632,1.409,1633,1.409,1634,1.409,1635,1.409,1636,1.409,1637,1.409,1638,1.409,1639,2.122,1640,1.409,1641,1.409,1642,1.409,1643,1.23]],["title/classes/LoginDto.html",[0,0.176,1415,2.785]],["body/classes/LoginDto.html",[0,0.321,2,1.486,3,0.151,4,0.151,5,0.151,8,1.884,9,4.417,12,1.666,15,0.29,16,0.779,22,1.991,27,2.796,28,2.917,29,0.403,30,0.013,32,1.021,37,2.464,39,0.595,47,0.7,81,3.871,87,0.207,90,2.434,93,1.809,95,1.638,99,0.17,100,2.824,110,0.01,111,0.01,383,3.288,404,2.716,721,4.492,1415,5.069,1644,4.991,1645,6.147,1646,7.485,1647,5.716,1648,5.716,1649,5.485,1650,5.716,1651,5.716]],["title/injectables/MinioService.html",[231,1.035,1249,2.468]],["body/injectables/MinioService.html",[0,0.192,3,0.119,4,0.119,5,0.177,15,0.227,16,0.667,17,1.212,29,0.442,30,0.013,34,1.024,39,0.666,47,0.731,63,1.205,87,0.178,99,0.134,110,0.009,111,0.009,136,1.166,153,2.161,163,2.513,164,2.342,172,1.958,188,0.899,196,2.605,198,1.599,231,1.499,232,2.123,234,3.004,235,2.703,241,3.325,250,3.114,253,2.513,259,2.513,260,1.795,323,3.262,338,2.99,761,3.302,793,3.302,794,4.128,898,3.038,1154,3.542,1169,5.278,1240,2.692,1249,3.574,1452,5.278,1652,3.917,1653,5.837,1654,5.837,1655,5.199,1656,5.955,1657,5.837,1658,5.955,1659,5.199,1660,4.486,1661,7.103,1662,5.955,1663,4.486,1664,3.917,1665,4.486,1666,5.199,1667,4.486,1668,5.837,1669,4.486,1670,4.702,1671,3.917,1672,3.542,1673,4.486,1674,3.542,1675,4.486,1676,3.917,1677,3.917,1678,4.486,1679,3.917,1680,4.486,1681,3.917,1682,4.486,1683,3.917,1684,5.837,1685,4.486,1686,3.542,1687,3.542,1688,3.542,1689,3.917,1690,3.917,1691,3.917,1692,3.542,1693,3.917,1694,3.917,1695,3.917,1696,5.199,1697,3.917,1698,4.486,1699,3.917,1700,3.917,1701,4.486,1702,3.917,1703,4.486]],["title/injectables/MinioService-1.html",[109,1.441,231,0.864,1249,2.06]],["body/injectables/MinioService-1.html",[0,0.145,3,0.129,4,0.089,5,0.19,15,0.171,16,0.548,17,1.263,29,0.435,30,0.013,31,1.113,34,1.116,39,0.661,47,0.726,63,1.216,87,0.171,99,0.101,109,2.051,110,0.007,111,0.007,122,1.268,136,1.27,151,2.932,153,1.772,163,2.619,164,2.518,172,2.132,188,0.676,195,1.596,196,2.238,198,1.691,231,1.23,232,1.596,234,3.09,235,1.364,241,3.404,250,2.923,251,2.332,253,2.701,259,2.512,260,1.795,266,1.142,295,3.965,296,1.826,323,4.176,338,2.644,457,4.029,552,1.92,553,3.269,563,3.308,761,3.301,793,3.301,794,4.127,800,2.945,824,2.452,849,3.452,852,1.92,898,3.89,1056,2.663,1154,2.663,1169,4.535,1173,2.945,1240,2.024,1249,2.932,1340,4.003,1406,2.945,1653,5.015,1654,5.015,1655,4.265,1657,5.015,1659,4.265,1661,6.928,1664,2.945,1666,4.265,1668,5.015,1670,3.857,1671,2.945,1672,4.971,1674,2.663,1676,2.945,1677,5.015,1679,5.015,1681,2.945,1683,2.945,1684,6.084,1686,2.663,1687,2.663,1688,2.663,1689,2.945,1690,2.945,1691,2.945,1692,2.663,1693,2.945,1694,2.945,1695,2.945,1696,4.265,1697,2.945,1699,2.945,1700,4.265,1702,2.945,1704,2.945,1705,6.297,1706,4.885,1707,5.744,1708,4.885,1709,6.968,1710,4.885,1711,3.373,1712,3.373,1713,4.885,1714,3.373,1715,3.373,1716,5.498,1717,3.373,1718,4.885,1719,3.373,1720,3.373,1721,3.373,1722,3.373,1723,3.373,1724,2.452,1725,6.297,1726,3.373,1727,3.373,1728,3.373,1729,3.373,1730,3.373,1731,3.373,1732,3.373,1733,3.373,1734,3.373,1735,3.373,1736,3.373,1737,2.945,1738,3.373,1739,3.373,1740,3.373,1741,3.373,1742,3.373,1743,4.885,1744,3.373,1745,3.373,1746,4.265,1747,3.373,1748,3.373,1749,3.373,1750,3.373,1751,3.373,1752,3.373,1753,3.373,1754,3.373,1755,4.885,1756,3.373,1757,3.373,1758,3.373,1759,3.373,1760,3.373,1761,3.373,1762,3.373,1763,3.373]],["title/entities/OTP.html",[112,1.259,311,1.794]],["body/entities/OTP.html",[0,0.232,3,0.143,4,0.143,5,0.143,15,0.274,16,0.753,22,2.094,29,0.476,30,0.013,31,1.302,32,1.193,34,1.236,36,1.416,39,0.695,47,0.72,87,0.161,99,0.161,110,0.01,111,0.01,112,1.657,114,2.363,116,3.319,122,2.872,123,4.158,125,3.442,132,3.775,138,2.619,144,4.086,145,1.833,266,2.275,311,3.429,408,3.956,409,2.797,410,3.081,514,4.727,1764,4.727,1765,6.38,1766,5.769,1767,5.414,1768,5.414,1769,5.867,1770,5.414,1771,5.414,1772,5.414,1773,5.414,1774,5.414,1775,5.414,1776,5.414]],["title/injectables/OTPService.html",[231,1.035,292,2.468]],["body/injectables/OTPService.html",[0,0.177,3,0.109,4,0.109,5,0.109,15,0.209,17,1.161,22,2.251,29,0.372,30,0.013,34,1.463,39,0.59,47,0.739,63,1.084,87,0.231,99,0.123,110,0.008,111,0.008,122,2.408,136,1.665,145,1.905,153,2.042,163,2.408,164,2.245,172,2.456,174,3.811,188,0.826,198,1.934,226,1.55,231,1.416,232,1.952,234,2.952,235,2.275,237,3.555,241,3.244,248,2.233,250,2.496,251,2.276,253,2.794,260,1.72,266,2.439,291,4.837,292,3.378,295,4.33,296,2.233,311,3.5,312,3.256,327,2.999,358,2.999,363,2.475,407,2.037,408,4.342,409,3.555,412,2.131,421,2.475,448,2.233,661,2.233,814,2.475,879,4.914,1364,2.622,1443,2.999,1716,3.601,1765,5.593,1766,5.687,1777,3.601,1778,6.882,1779,6.406,1780,5.593,1781,4.124,1782,4.124,1783,5.628,1784,4.124,1785,4.124,1786,4.124,1787,4.124,1788,4.124,1789,4.124,1790,4.914,1791,4.124,1792,4.124,1793,4.124,1794,3.601,1795,4.124,1796,4.914,1797,3.601,1798,5.628,1799,4.124,1800,4.124,1801,4.124,1802,4.124,1803,4.124,1804,4.124,1805,4.124,1806,4.124,1807,5.628,1808,4.124,1809,4.124,1810,4.124,1811,4.124,1812,6.406,1813,4.124,1814,5.628,1815,4.124,1816,3.601,1817,4.124,1818,3.601,1819,4.124,1820,4.124,1821,4.124,1822,4.124]],["title/classes/PaginatedUsersResponseDto.html",[0,0.176,1823,3.246]],["body/classes/PaginatedUsersResponseDto.html",[0,0.22,2,1.333,3,0.136,4,0.136,5,0.136,8,2.078,12,1.097,15,0.26,16,0.728,29,0.458,30,0.013,31,1.642,32,1.136,37,2.371,39,0.662,41,3.355,44,1.622,87,0.194,95,1.469,99,0.153,109,2.726,110,0.01,111,0.01,128,3.073,173,3.859,404,2.865,848,4.565,1024,4.764,1135,4.332,1148,5.127,1195,3.702,1283,5.1,1330,5.182,1438,5.127,1823,5.127,1824,6.896,1825,3.472,1826,5.127,1827,5.127,1828,5.127,1829,4.476,1830,6.494,1831,5.127,1832,4.497,1833,4.476,1834,4.476,1835,3.727]],["title/entities/Queue.html",[112,1.259,921,2.031]],["body/entities/Queue.html",[0,0.197,3,0.122,4,0.122,5,0.122,15,0.233,16,0.678,29,0.47,30,0.013,31,1.394,32,1.18,34,1.382,36,1.312,39,0.688,44,1.455,47,0.646,63,1.265,87,0.202,99,0.18,110,0.009,111,0.009,112,1.408,114,2.007,116,3.073,122,2.703,123,3.445,125,2.923,132,3.496,135,4.1,136,2.107,144,3.79,145,1.557,276,1.703,401,3.137,451,2.642,473,4.316,476,3.114,531,3.848,532,3.633,534,4.401,696,5.06,917,4.57,921,3.343,923,4.015,933,5.285,1063,4.779,1066,4.015,1090,5.285,1836,3.63,1837,5.343,1838,5.343,1839,5.908,1840,4.92,1841,6.053,1842,4.598,1843,6.053,1844,4.598,1845,6.053,1846,4.598,1847,4.598,1848,4.572,1849,6.053,1850,4.598,1851,6.053,1852,4.598,1853,4.598,1854,6.053,1855,4.598,1856,5.06,1857,4.598,1858,4.015,1859,4.015,1860,4.401,1861,4.598,1862,4.015]],["title/entities/QueueDetails.html",[112,1.259,1848,2.614]],["body/entities/QueueDetails.html",[0,0.179,3,0.11,4,0.11,5,0.11,12,1.632,15,0.211,16,0.635,20,2.336,23,2.42,24,2.42,29,0.473,30,0.013,31,1.445,32,1.197,34,1.294,36,1.248,39,0.698,47,0.737,63,1.36,87,0.192,99,0.124,110,0.008,111,0.008,112,1.275,114,1.817,132,3.326,135,4.066,136,2.046,138,2.207,144,3.968,145,1.41,266,1.918,362,4.118,466,3.601,468,5.455,469,3.027,473,4.724,488,4.093,489,3.864,501,4.681,502,4.36,503,3.864,504,4.36,505,2.509,517,3.287,524,2.82,525,5.455,529,2.37,921,3.888,922,3.836,1003,5.621,1086,5.455,1261,3.635,1848,3.601,1863,7.156,1864,3.635,1865,5.083,1866,4.164,1867,5.664,1868,4.164,1869,4.946,1870,4.164,1871,4.164,1872,5.664,1873,4.164,1874,4.946,1875,4.164,1876,5.664,1877,4.164,1878,5.664,1879,4.164,1880,4.946,1881,6.909,1882,5.664,1883,4.164,1884,4.164,1885,5.664,1886,4.164,1887,5.664,1888,4.164,1889,4.164,1890,4.164,1891,4.164]],["title/classes/QueueGateway.html",[0,0.176,1892,2.614]],["body/classes/QueueGateway.html",[0,0.158,2,0.956,3,0.097,4,0.097,5,0.097,11,2.181,15,0.186,16,0.582,17,1.388,29,0.456,30,0.013,31,1.569,32,1.015,34,0.839,39,0.672,63,1.296,87,0.206,99,0.11,110,0.008,111,0.008,136,1.351,153,2.186,161,2.337,163,2.878,164,2.638,172,1.604,188,0.736,196,2.692,198,1.758,234,2.979,235,2.1,250,2.692,251,1.59,253,2.597,260,1.395,295,4.195,296,1.99,318,2.902,338,2.749,342,4.595,407,1.816,553,2.092,555,3.235,678,2.337,712,3.83,917,2.092,921,2.976,1130,2.489,1464,2.902,1506,2.902,1692,2.902,1724,3.777,1737,3.209,1865,5.82,1892,3.303,1893,3.209,1894,6.025,1895,6.025,1896,6.261,1897,5.195,1898,5.195,1899,5.195,1900,5.195,1901,5.195,1902,5.195,1903,5.195,1904,5.195,1905,3.676,1906,4.992,1907,5.195,1908,5.195,1909,3.676,1910,6.025,1911,5.195,1912,8.244,1913,3.676,1914,7.372,1915,7.529,1916,5.195,1917,3.676,1918,5.195,1919,5.195,1920,3.676,1921,5.195,1922,6.549,1923,5.195,1924,3.676,1925,5.195,1926,5.195,1927,3.676,1928,5.195,1929,5.195,1930,3.676,1931,5.195,1932,3.676,1933,5.195,1934,3.676,1935,5.195,1936,3.676,1937,3.209,1938,4.536,1939,2.902,1940,3.209,1941,5.195,1942,5.195,1943,3.676,1944,3.676,1945,3.209,1946,3.676,1947,3.676,1948,3.676,1949,3.676,1950,3.676,1951,3.676,1952,5.195,1953,3.676,1954,6.025,1955,3.676,1956,3.676,1957,3.676,1958,5.195,1959,3.676,1960,4.102,1961,3.676,1962,3.676,1963,3.676,1964,6.025,1965,3.676,1966,3.676,1967,3.209,1968,3.676,1969,3.676,1970,3.676,1971,5.195,1972,3.676,1973,3.676]],["title/modules/QueueModule.html",[209,1.392,288,2.785]],["body/modules/QueueModule.html",[0,0.224,3,0.139,4,0.139,5,0.139,30,0.013,87,0.248,99,0.156,110,0.01,111,0.01,149,2.658,188,1.047,209,2.435,211,2.582,212,2.582,213,2.83,214,2.83,215,2.582,216,3.894,217,3.894,221,3.559,222,2.582,223,2.7,225,2.974,226,1.965,229,2.974,288,5.641,297,4.563,298,3.8,333,3.137,373,4.563,917,3.741,921,3.247,1178,4.563,1179,4.127,1848,4.179,1858,4.563,1859,4.563,1892,5.18,1906,5.669,1939,4.127,1940,5.739,1974,4.563,1975,4.563,1976,4.563,1977,5.669,1978,5.227,1979,6.279,1980,5.229,1981,5.227,1982,5.227,1983,4.563,1984,5.227,1985,3.8,1986,5.227,1987,5.227]],["title/classes/QueueNotificationDto.html",[0,0.176,1988,2.99]],["body/classes/QueueNotificationDto.html",[0,0.256,2,1.172,3,0.12,4,0.12,5,0.12,8,1.959,15,0.228,16,0.67,17,1.432,20,2.168,22,2.128,29,0.476,30,0.013,31,1.383,32,1.144,37,2.622,39,0.667,47,0.737,87,0.178,88,2.828,89,2.601,90,2.673,91,4.047,93,1.427,95,1.292,99,0.134,110,0.009,111,0.009,266,2.416,276,1.959,363,3.586,383,3.684,391,3.401,392,2.441,395,3.002,396,3.235,401,2.509,402,3.937,404,2.867,646,4.743,692,3.56,704,3.937,707,3.937,712,3.799,716,3.56,718,4.345,720,3.937,917,3.401,921,3.769,975,5.291,1053,4.345,1108,4.718,1195,2.952,1443,4.345,1840,4.873,1960,6.145,1988,4.345,1989,6.9,1990,5.852,1991,4.509,1992,4.509,1993,5.976,1994,5.976,1995,4.509,1996,5.217,1997,4.509,1998,5.217,1999,4.509,2000,4.509,2001,5.217,2002,4.509,2003,5.852,2004,4.509]],["title/injectables/QueueSchedulerService.html",[231,1.035,1977,2.785]],["body/injectables/QueueSchedulerService.html",[0,0.13,3,0.081,4,0.081,5,0.081,10,1.439,15,0.154,16,0.507,17,0.98,29,0.263,30,0.013,32,0.447,34,1.034,39,0.596,63,1.014,87,0.2,99,0.091,110,0.007,111,0.007,116,3.05,122,2.952,136,0.79,145,1.029,153,1.642,163,1.701,164,2.099,172,1.975,188,0.609,196,2.107,198,1.609,222,3.608,226,1.143,231,1.139,232,1.439,234,2.871,235,1.83,237,3.095,241,1.975,248,1.646,250,2.94,251,2.338,253,2.686,259,1.143,260,2.026,262,1.439,266,1.831,276,1.75,298,2.21,333,1.825,336,2.21,338,2.515,341,2.4,395,1.229,407,1.502,417,3.333,448,1.646,451,2.93,531,4.269,532,4.289,552,1.73,553,1.73,555,1.502,641,3.932,652,2.654,678,4.856,694,2.4,708,2.4,709,2.654,718,2.21,755,3.952,761,2.236,773,5.231,793,2.236,794,3.593,796,2.059,817,2.654,826,2.4,836,2.654,838,2.4,848,3.645,849,1.57,852,1.73,921,3.813,1035,2.4,1212,2.654,1298,1.933,1449,2.654,1574,2.654,1594,2.4,1769,2.654,1796,2.654,1837,3.574,1856,2.059,1860,3.291,1862,3.952,1892,4.422,1967,2.654,1977,3.065,1983,2.654,1985,2.21,2005,6.24,2006,2.654,2007,5.408,2008,5.991,2009,5.991,2010,4.526,2011,5.991,2012,3.04,2013,4.526,2014,4.526,2015,3.04,2016,4.526,2017,5.991,2018,7.544,2019,5.408,2020,4.526,2021,3.04,2022,4.526,2023,7.638,2024,3.04,2025,5.408,2026,3.04,2027,4.526,2028,3.04,2029,3.04,2030,3.04,2031,2.654,2032,4.526,2033,3.04,2034,3.04,2035,6.405,2036,3.04,2037,3.04,2038,5.408,2039,3.04,2040,3.04,2041,3.04,2042,2.654,2043,3.04,2044,4.526,2045,5.991,2046,5.991,2047,5.991,2048,5.991,2049,4.526,2050,3.04,2051,6.49,2052,3.04,2053,3.04,2054,3.04,2055,4.526,2056,6.715,2057,4.526,2058,4.526,2059,4.526,2060,4.526,2061,3.04,2062,5.408,2063,4.526,2064,3.04,2065,3.04,2066,3.04,2067,3.04,2068,3.04,2069,3.04,2070,3.04,2071,3.04,2072,3.04,2073,3.04,2074,3.04,2075,3.04,2076,3.04,2077,3.04,2078,3.04,2079,3.04,2080,5.991,2081,3.04,2082,3.04,2083,3.04,2084,2.654,2085,3.04,2086,4.526,2087,3.04,2088,3.04,2089,3.04]],["title/controllers/QueuesController.html",[147,1.662,1980,2.99]],["body/controllers/QueuesController.html",[0,0.155,3,0.096,4,0.096,5,0.096,12,1.277,15,0.183,17,0.93,20,1.863,23,2.443,24,2.443,29,0.298,30,0.013,32,0.877,36,1.422,39,0.511,47,0.71,63,0.869,87,0.178,99,0.108,110,0.008,111,0.008,116,2.711,147,1.461,149,1.461,151,2.169,153,2.166,163,1.93,164,2.092,167,3.264,184,2.169,188,0.724,195,1.711,196,2.001,198,1.843,234,2.867,250,1.409,251,2.367,253,2.244,259,2.58,260,1.603,262,1.711,276,1.636,338,2.155,365,3.477,451,2.24,502,3.477,503,3.081,504,4.402,505,2.327,531,2.298,555,3.211,696,4.83,761,2.949,793,2.949,796,4.402,838,2.854,849,3.084,884,1.224,921,3.391,922,5.396,1130,2.448,1195,1.786,1349,2.169,1593,6.659,1625,2.854,1672,5.132,1837,4.714,1838,4.714,1839,3.156,1840,4.341,1848,4.132,1856,2.448,1860,3.733,1865,2.854,1880,5.213,1906,4.043,1939,2.854,1980,3.733,1985,2.628,2051,6.831,2090,3.156,2091,5.134,2092,5.134,2093,6.5,2094,3.615,2095,3.615,2096,3.615,2097,4.482,2098,3.615,2099,5.134,2100,3.615,2101,3.615,2102,3.615,2103,3.615,2104,3.615,2105,3.615,2106,3.615,2107,4.482,2108,5.97,2109,3.615,2110,5.97,2111,2.854,2112,3.156,2113,5.134,2114,5.134,2115,3.615,2116,3.615,2117,5.97,2118,3.615,2119,3.615,2120,3.615,2121,3.615,2122,3.615,2123,3.615,2124,3.615,2125,3.615,2126,3.615,2127,3.156,2128,3.615,2129,6.5,2130,6.5,2131,3.615,2132,3.615,2133,5.97,2134,5.97,2135,5.97,2136,5.97,2137,5.97,2138,5.97,2139,3.615,2140,5.97,2141,5.97,2142,3.615,2143,5.97,2144,3.615,2145,3.615,2146,3.615,2147,3.615,2148,5.134,2149,5.97,2150,3.615,2151,3.615,2152,3.615,2153,3.615,2154,3.615,2155,3.615,2156,3.615,2157,3.615,2158,3.615,2159,3.615,2160,3.615,2161,3.615]],["title/classes/RegisterDto.html",[0,0.176,1417,2.785]],["body/classes/RegisterDto.html",[0,0.271,2,1.046,3,0.107,4,0.107,5,0.107,8,2.009,9,3.518,12,1.722,15,0.204,16,0.62,17,1.478,20,2.008,21,3.267,22,2.207,23,2.377,24,2.377,25,3.267,26,3.267,27,2.502,28,2.998,29,0.459,30,0.013,31,1.073,32,1.162,33,4.54,37,2.644,39,0.677,47,0.751,57,3.748,62,3.321,63,1.372,66,3.149,67,3.177,69,3.748,70,3.177,72,3.748,73,4.023,74,4.283,75,4.023,76,3.177,78,4.023,79,2.872,80,2.734,81,3.748,82,3.124,87,0.165,88,2.619,89,2.502,90,2.77,93,1.273,94,3.22,95,1.153,99,0.12,100,1.988,101,3.177,102,3.177,103,3.796,104,4.993,105,3.518,106,2.926,110,0.008,111,0.008,311,3.22,346,2.859,383,3.38,404,2.677,409,3.267,414,2.29,721,4.429,1034,3.149,1035,4.369,1036,4.369,1417,4.283,1517,4.369,1645,4.369,2162,3.514,2163,4.024,2164,4.024,2165,4.024,2166,4.024,2167,4.024,2168,4.024,2169,4.024,2170,4.024,2171,4.024,2172,4.024,2173,4.024,2174,4.024,2175,4.024,2176,4.024,2177,4.024,2178,4.024,2179,4.024,2180,4.024]],["title/interfaces/RequestWithUser.html",[884,1.392,2181,2.34]],["body/interfaces/RequestWithUser.html",[0,0.037,1,1.124,3,0.023,4,0.023,5,0.023,8,1.996,9,1.705,10,1.269,11,2.621,12,1.385,13,0.748,14,2.127,15,0.044,16,0.733,20,1.818,22,2.356,23,0.326,24,0.326,27,2.374,28,1.309,29,0.475,30,0.013,31,0.894,34,0.613,35,0.484,36,0.848,37,2.413,39,0.074,41,0.816,44,1.21,47,0.729,62,0.521,63,0.147,79,0.718,80,0.429,82,0.429,87,0.164,94,0.379,95,0.249,97,1.07,99,0.026,100,0.429,103,0.521,105,0.552,106,0.631,108,1.474,109,1.606,110,0.002,111,0.002,122,0.594,136,1.644,138,1.362,147,0.351,158,0.429,161,0.552,164,0.94,174,1.816,182,3.265,184,0.521,188,0.174,193,0.494,196,0.338,198,1.773,222,3.124,234,2.347,235,0.351,250,1.045,251,1.793,253,2.482,259,2.603,260,1.904,262,0.748,266,0.737,276,1.937,291,1.384,292,1.306,311,3.415,313,0.685,314,0.685,333,2.627,334,0.588,336,0.631,338,0.664,341,0.685,342,1.61,344,2.118,346,3.027,353,2.781,359,1.38,363,0.949,365,0.588,379,0.47,381,2.37,382,2.261,384,3.041,385,0.448,388,0.816,391,0.494,392,2.37,393,2.528,395,2.74,396,0.47,397,0.949,398,0.494,400,1.124,401,0.914,404,0.315,405,0.521,406,1.178,407,3.373,408,2.971,409,3.267,410,1.988,411,1.178,412,1.61,413,1.871,414,1.239,416,1.306,417,1.17,418,0.949,425,0.47,426,1.61,427,0.47,428,1.306,429,0.521,430,0.521,431,0.949,432,1.306,433,0.521,434,0.521,435,0.521,436,0.521,437,0.521,443,0.494,444,0.494,445,0.494,446,1.774,447,0.47,448,2.071,449,1.61,450,1.526,451,0.69,452,0.856,453,0.781,454,0.816,455,0.816,462,0.758,496,3.94,499,4.107,503,0.521,505,0.338,530,1.07,532,0.949,548,1.325,551,0.631,552,0.494,553,3.683,580,0.552,598,0.588,599,2.624,605,0.494,607,0.588,608,0.856,610,0.973,615,0.631,616,4.654,617,4.846,618,0.631,621,1.816,622,1.718,623,1.306,625,4.598,632,0.588,646,3.374,655,2.118,661,1.688,664,1.38,675,4.375,676,0.685,678,1.981,690,1.582,693,5.295,694,2.118,696,2.788,697,4.115,700,1.9,701,1.9,702,2.118,705,1.9,708,3.251,712,1.384,715,4.664,716,1.248,717,3.051,718,5.403,723,0.758,758,1.248,761,3.084,765,1.248,789,0.949,793,3.084,794,4.007,796,1.816,807,0.758,814,0.521,826,2.759,832,0.758,849,2.382,852,1.239,856,0.758,863,1.474,866,0.685,871,0.758,873,0.685,884,0.294,885,0.47,887,1.816,907,0.588,911,2.366,917,0.494,921,1.726,922,2.111,971,2.118,980,1.248,997,0.685,1015,0.494,1021,1.384,1036,2.118,1042,0.685,1053,1.582,1130,0.588,1137,3.64,1138,0.631,1140,0.685,1177,3.206,1195,0.429,1199,1.718,1241,1.9,1288,0.552,1291,0.521,1310,0.949,1323,0.552,1340,2.617,1342,2.59,1364,1.981,1405,2.118,1409,0.631,1411,1.38,1413,0.758,1415,2.111,1416,0.758,1417,1.474,1418,0.758,1442,3.051,1443,1.95,1444,0.588,1448,0.758,1450,0.758,1451,2.759,1452,3.64,1454,1.9,1455,1.38,1456,0.758,1458,0.758,1462,3.051,1464,5.053,1468,0.758,1469,1.38,1470,0.758,1477,0.758,1478,2.342,1492,1.38,1497,0.758,1506,2.461,1517,1.718,1520,0.758,1553,0.758,1555,1.9,1559,4.026,1568,1.9,1570,0.758,1571,1.38,1573,1.9,1575,0.758,1594,0.685,1607,1.9,1621,3.02,1639,1.38,1643,0.758,1645,2.461,1649,2.461,1686,0.685,1687,0.685,1688,0.685,1766,2.461,1780,0.758,1794,1.38,1797,0.758,1816,0.758,1818,4.026,1826,1.248,1840,1.582,1945,1.9,1960,3.251,1988,1.149,1990,1.38,1996,0.758,1998,1.38,2001,0.758,2003,0.758,2042,3.051,2084,0.758,2107,0.758,2112,2.721,2127,0.758,2181,1.774,2182,0.758,2183,0.868,2184,0.685,2185,0.868,2186,1.58,2187,5.488,2188,0.868,2189,0.868,2190,0.868,2191,1.58,2192,0.868,2193,0.868,2194,0.868,2195,0.868,2196,2.176,2197,6.157,2198,4.117,2199,4.117,2200,0.868,2201,0.868,2202,0.868,2203,3.117,2204,3.117,2205,2.176,2206,2.176,2207,0.868,2208,0.868,2209,0.868,2210,2.682,2211,1.58,2212,2.682,2213,1.58,2214,0.868,2215,2.176,2216,1.58,2217,0.868,2218,0.758,2219,0.758,2220,1.58,2221,1.9,2222,3.494,2223,0.868,2224,1.58,2225,0.868,2226,0.868,2227,0.868,2228,1.58,2229,0.868,2230,0.868,2231,0.868,2232,0.868,2233,0.868,2234,2.176,2235,2.176,2236,0.868,2237,0.868,2238,0.868,2239,0.868,2240,0.868,2241,0.631,2242,0.758,2243,0.868,2244,0.868,2245,0.868,2246,0.868,2247,1.58,2248,0.868,2249,0.868,2250,0.868,2251,0.868,2252,0.868,2253,0.868,2254,2.682,2255,2.176,2256,0.868,2257,0.868,2258,0.868,2259,0.868,2260,4.117,2261,2.721,2262,1.58,2263,0.868,2264,0.868,2265,0.868,2266,0.868,2267,1.58,2268,1.58,2269,0.868,2270,1.58,2271,2.176,2272,1.58,2273,0.868,2274,0.868,2275,5.859,2276,2.682,2277,2.682,2278,2.176,2279,0.868,2280,0.868,2281,2.176,2282,5.488,2283,1.58,2284,0.868,2285,2.176,2286,1.58,2287,2.176,2288,0.868,2289,0.758,2290,0.868,2291,0.868,2292,0.868,2293,0.868,2294,0.868,2295,0.868,2296,0.868,2297,1.58,2298,0.868,2299,0.868,2300,1.58,2301,0.868,2302,0.868,2303,0.868,2304,1.58,2305,0.868,2306,0.868,2307,0.868,2308,0.868,2309,1.58,2310,0.868,2311,0.868,2312,0.868,2313,0.868,2314,0.868,2315,0.868,2316,1.58,2317,0.868,2318,0.868,2319,0.868,2320,1.58,2321,0.868,2322,0.868,2323,1.58,2324,0.868,2325,0.868,2326,0.868,2327,0.868,2328,0.868,2329,0.758,2330,0.868,2331,0.868,2332,0.868,2333,1.38,2334,0.868,2335,0.868,2336,0.868,2337,2.682,2338,0.868,2339,0.868,2340,0.868,2341,0.868,2342,0.868,2343,0.868,2344,0.868,2345,0.868,2346,5.011,2347,0.868,2348,0.758,2349,0.868,2350,0.868,2351,0.868,2352,0.868,2353,0.868,2354,0.868,2355,0.868,2356,0.868,2357,0.868,2358,0.868,2359,0.868,2360,0.868,2361,2.682,2362,0.868,2363,0.868,2364,0.868,2365,0.868,2366,0.868,2367,0.868,2368,0.868,2369,0.868,2370,0.868,2371,0.868,2372,0.868,2373,2.682,2374,0.868,2375,2.682,2376,0.868,2377,4.117,2378,0.868,2379,2.682,2380,2.682,2381,2.682,2382,2.682,2383,0.868,2384,0.868,2385,0.868,2386,0.868,2387,0.868,2388,0.868,2389,0.868,2390,3.494,2391,0.868,2392,0.868,2393,3.494,2394,0.868,2395,0.868,2396,0.868,2397,0.868,2398,0.868,2399,0.868,2400,0.868,2401,0.868,2402,0.868,2403,0.868,2404,0.868,2405,0.868,2406,0.868,2407,0.868,2408,0.868,2409,1.58,2410,0.868,2411,0.868,2412,0.868]],["title/interfaces/RequestWithUser-1.html",[109,1.441,884,1.162,2181,1.953]],["body/interfaces/RequestWithUser-1.html",[3,0.162,4,0.162,5,0.162,12,1.738,15,0.309,16,0.81,29,0.354,30,0.013,87,0.216,99,0.182,110,0.011,111,0.011,188,1.224,198,1.64,251,2.213,342,3.665,548,4.013,555,3.017,873,4.822,884,2.067,885,3.307,1177,3.665,2181,4.114,2413,4.822,2414,6.312,2415,5.256,2416,5.332,2417,5.332,2418,5.332]],["title/interfaces/RequestWithUser-2.html",[108,2.324,884,1.162,2181,1.953]],["body/interfaces/RequestWithUser-2.html",[0,0.23,3,0.142,4,0.142,5,0.142,12,1.676,13,3.159,15,0.271,16,0.748,17,1.21,29,0.422,30,0.013,35,2.226,41,3.756,47,0.718,63,1.231,87,0.217,99,0.16,110,0.01,111,0.01,136,1.392,138,2.087,188,1.073,195,2.535,198,1.792,231,1.68,251,2.33,608,2.9,610,1.943,695,4.243,697,3.405,884,2.26,885,2.9,1177,4.568,1349,3.214,1488,4.228,1563,4.228,1610,4.228,1724,3.894,2111,4.228,2181,3.798,2184,4.228,2415,4.853,2419,4.228,2420,5.827,2421,6.349,2422,4.228,2423,4.853,2424,4.676,2425,4.676,2426,5.827,2427,4.676,2428,4.676,2429,4.676,2430,4.676,2431,4.676,2432,4.676,2433,4.676,2434,4.676,2435,4.676]],["title/classes/ResetPasswordDto.html",[0,0.176,427,2.226]],["body/classes/ResetPasswordDto.html",[0,0.312,2,0.91,3,0.093,4,0.093,5,0.093,8,2.009,15,0.177,16,0.563,20,2.897,22,2.415,27,2.473,29,0.372,30,0.013,32,0.862,34,1.146,36,0.679,37,2.571,39,0.503,47,0.73,79,2.91,80,3.165,82,3.35,87,0.15,88,3.44,89,2.055,90,2.652,93,1.108,94,2.56,95,1.004,99,0.21,100,1.73,110,0.007,111,0.007,127,1.809,128,2.375,260,1.348,276,1.263,311,3.546,346,3.03,379,1.896,380,2.102,381,1.896,382,1.809,383,2.776,384,2.56,385,1.809,388,1.809,391,1.993,392,3.821,393,3.44,394,2.226,395,3.285,396,3.935,397,4.362,398,4.136,400,2.593,401,2.463,404,2.875,405,2.102,406,1.896,407,1.73,408,3.469,409,3.911,410,2.856,411,1.896,412,4.152,413,3.521,414,3.338,415,3.729,416,4.07,417,2.56,418,4.07,419,3.191,420,3.729,421,3.012,422,3.191,423,4.07,424,4.312,425,1.896,426,2.102,427,2.718,428,3.012,429,3.012,430,3.012,431,3.012,432,3.012,433,3.012,434,3.845,435,2.102,436,3.845,437,2.102,438,2.226,439,2.226,440,2.226,441,3.729,442,3.191,443,2.856,444,2.856,445,2.856,446,3.338,447,1.896,448,1.896,449,2.102,450,1.993,451,1.528,452,1.896,453,1.73,454,1.809,455,1.809,2436,3.502,2437,3.502,2438,3.502,2439,3.502,2440,3.058,2441,3.058,2442,3.502]],["title/entities/Role.html",[35,1.259,112,1.259]],["body/entities/Role.html",[0,0.242,3,0.15,4,0.15,5,0.15,8,1.873,12,1.731,15,0.286,16,0.772,29,0.45,30,0.013,31,1.336,32,1.139,35,2.11,36,1.442,39,0.664,47,0.697,63,1.26,87,0.206,99,0.168,110,0.01,111,0.01,112,1.727,114,2.462,132,3.845,135,3.845,136,2.015,144,3.676,145,1.91,266,2.333,508,4.454,517,4.454,529,3.211,534,4.102,1135,3.845,2443,4.926,2444,5.642,2445,5.642,2446,5.642,2447,5.642,2448,6.018,2449,5.642,2450,6.018,2451,5.642]],["title/controllers/RolesController.html",[147,1.662,2452,2.99]],["body/controllers/RolesController.html",[0,0.231,3,0.143,4,0.143,5,0.143,15,0.273,17,1.215,29,0.389,30,0.013,32,1.072,36,1.3,39,0.625,47,0.719,63,1.135,87,0.234,99,0.161,110,0.01,111,0.01,147,2.182,149,2.182,151,3.239,153,2.433,155,4.133,156,3.631,163,2.521,164,2.557,166,2.666,167,3.431,184,3.239,188,1.081,195,2.554,196,2.103,198,1.959,203,4.712,505,2.613,580,5.087,598,3.655,605,3.071,606,3.924,607,3.655,608,3.631,609,3.924,610,2.433,611,3.924,621,3.655,632,4.942,1289,3.769,2097,4.712,2452,4.876,2453,4.712,2454,5.856,2455,5.397,2456,5.397,2457,5.397,2458,5.397,2459,4.712,2460,5.397,2461,5.397,2462,4.712,2463,5.397,2464,5.397,2465,5.397,2466,5.397,2467,5.397]],["title/guards/RolesGuard.html",[608,2.226,2241,2.99]],["body/guards/RolesGuard.html",[0,0.224,3,0.139,4,0.139,5,0.139,12,1.408,13,2.477,15,0.265,17,1.192,29,0.382,30,0.013,35,2.203,39,0.564,41,3.718,47,0.714,63,1.317,87,0.215,99,0.156,110,0.01,111,0.01,136,1.361,138,2.564,153,2.387,163,2.473,164,1.834,188,1.049,195,2.477,198,1.767,231,1.656,235,2.116,251,2.311,608,3.563,610,1.899,697,3.328,884,2.228,1177,4.319,1349,3.142,1488,4.133,1563,4.133,1610,4.133,1724,3.806,2111,4.133,2181,2.979,2184,4.133,2415,5.489,2419,4.133,2420,6.592,2421,6.933,2422,4.133,2423,4.784,2424,4.57,2425,5.745,2426,5.745,2427,4.57,2428,4.57,2429,4.57,2430,4.57,2431,4.57,2432,4.57,2433,4.57,2434,4.57,2435,4.57,2468,5.235,2469,5.235,2470,5.235,2471,5.235,2472,5.235]],["title/modules/RolesModule.html",[209,1.392,289,2.468]],["body/modules/RolesModule.html",[0,0.248,3,0.153,4,0.153,5,0.153,12,1.497,30,0.013,35,1.77,87,0.243,99,0.172,110,0.01,111,0.01,149,2.829,188,1.158,209,2.547,211,2.856,212,2.856,213,3.131,214,3.131,215,2.856,216,4.073,217,4.073,221,3.788,222,2.856,223,2.987,225,3.291,226,2.173,229,3.291,289,4.94,529,3.291,1289,4.381,2452,5.47,2462,5.049,2473,5.049,2474,5.049,2475,5.049,2476,5.782,2477,5.049,2478,5.782,2479,5.782]],["title/injectables/RolesService.html",[231,1.035,1289,2.124]],["body/injectables/RolesService.html",[0,0.185,3,0.114,4,0.114,5,0.114,12,1.646,15,0.218,17,1.325,19,3.726,29,0.424,30,0.013,31,1.577,35,2.355,36,1.491,39,0.645,43,2.449,47,0.588,63,1.341,87,0.218,99,0.128,110,0.009,111,0.009,145,1.457,153,2.101,155,3.792,156,3.136,163,2.747,164,2.561,166,2.861,188,0.862,198,1.881,226,1.617,231,1.458,232,2.036,234,3.109,235,2.342,237,3.974,241,3.495,247,2.735,248,2.33,250,2.257,251,2.237,253,2.83,259,2.461,260,1.758,262,3.098,365,2.914,495,2.861,505,2.729,529,2.449,610,2.731,1289,2.992,1303,2.914,1304,4.434,1332,3.922,1397,2.914,1625,4.573,2448,5.057,2454,5.057,2459,5.057,2477,3.757,2480,3.757,2481,5.792,2482,5.792,2483,4.303,2484,4.303,2485,5.792,2486,5.792,2487,4.303,2488,4.303,2489,5.792,2490,4.303,2491,4.303,2492,4.303,2493,4.303,2494,4.303,2495,5.792,2496,5.792,2497,4.303,2498,4.303,2499,4.303,2500,4.303,2501,4.303,2502,4.303,2503,4.303]],["title/classes/SendOtpDto.html",[0,0.176,406,2.226]],["body/classes/SendOtpDto.html",[0,0.317,2,0.962,3,0.098,4,0.098,5,0.098,8,2.027,15,0.187,16,0.585,17,0.946,20,2.922,22,2.422,27,2.118,29,0.351,30,0.013,32,0.767,33,2.352,34,1.5,36,0.717,37,2.578,39,0.447,44,1.171,47,0.732,79,2.37,80,2.578,82,2.987,87,0.156,88,3.495,89,2.118,90,2.687,93,1.171,94,2.639,95,1.06,99,0.214,100,1.827,110,0.008,111,0.008,127,1.911,128,1.751,172,1.614,260,0.993,276,1.313,311,3.515,346,2.696,379,2.003,380,2.22,381,2.003,382,1.911,383,1.751,384,2.639,385,1.911,388,1.911,391,2.105,392,3.891,393,3.495,394,2.352,395,3.234,396,3.999,397,4.432,398,4.203,400,2.696,401,2.757,404,2.902,405,2.22,406,2.826,407,2.578,408,3.999,409,4.06,410,2.97,411,2.003,412,4.015,413,3.132,414,2.97,415,3.318,416,3.629,417,2.277,418,3.941,419,3.318,420,3.318,421,3.132,422,3.318,423,3.629,424,3.844,425,2.003,426,2.22,427,2.003,428,2.22,429,2.22,430,2.22,431,2.22,432,2.22,433,2.22,434,3.132,435,2.22,436,3.132,437,2.22,438,2.352,439,2.352,440,2.352,441,2.352,442,2.352,443,2.105,444,2.105,445,2.105,446,2.105,447,2.003,448,2.003,449,2.22,450,2.105,451,1.614,452,2.003,453,1.827,454,1.911,455,1.911,2504,3.699,2505,3.23,2506,3.699]],["title/classes/TestOtpDto.html",[0,0.176,447,2.226]],["body/classes/TestOtpDto.html",[0,0.319,2,0.986,3,0.1,4,0.1,5,0.1,8,2.035,15,0.192,16,0.595,20,2.933,22,2.426,27,2.147,29,0.308,30,0.013,32,0.557,34,1.213,36,0.735,37,2.573,39,0.325,47,0.731,79,2.412,80,2.623,82,3.027,87,0.158,88,3.52,89,2.147,90,2.702,93,1.2,94,2.674,95,1.087,99,0.216,100,2.623,110,0.008,111,0.008,127,1.959,128,1.795,260,1.018,276,1.336,311,3.505,346,2.743,379,2.053,380,2.276,381,2.053,382,1.959,383,1.795,384,2.674,385,1.959,388,1.959,391,2.158,392,3.784,393,3.52,394,2.411,395,3.247,396,4.027,397,4.463,398,4.232,400,2.743,401,2.573,404,2.914,405,2.276,406,2.053,407,1.873,408,3.595,409,3.984,410,3.022,411,2.053,412,4.036,413,3.187,414,3.022,415,3.376,416,3.678,417,2.317,418,3.985,419,3.376,420,3.376,421,3.187,422,3.376,423,3.678,424,3.896,425,2.053,426,2.276,427,2.053,428,2.276,429,2.276,430,2.276,431,2.276,432,2.276,433,2.276,434,3.187,435,2.276,436,3.187,437,2.276,438,2.411,439,2.411,440,2.411,441,2.411,442,2.411,443,2.158,444,2.158,445,2.158,446,2.158,447,2.875,448,2.875,449,3.187,450,2.158,451,1.655,452,2.053,453,1.873,454,1.959,455,1.959,2507,3.792]],["title/classes/UpdateAnnouncementDto.html",[0,0.176,179,2.785]],["body/classes/UpdateAnnouncementDto.html",[0,0.274,2,1.663,3,0.17,4,0.17,5,0.17,13,3.516,30,0.012,87,0.222,99,0.191,110,0.011,111,0.011,154,2.906,160,4.068,179,5.031,192,5.052,940,5.052,2508,5.587,2509,7.429,2510,5.052,2511,5.052,2512,5.052]],["title/classes/UpdateAppointmentDto.html",[0,0.176,592,2.785]],["body/classes/UpdateAppointmentDto.html",[0,0.308,2,1.568,3,0.16,4,0.16,5,0.16,13,3.397,15,0.306,16,0.804,17,1.301,29,0.35,30,0.013,32,0.886,39,0.517,87,0.236,89,2.515,93,1.909,99,0.18,110,0.011,111,0.011,154,2.74,276,1.928,521,4.87,547,3.835,592,4.86,604,4.763,612,4.086,951,4.763,963,5.267,966,4.086,967,5.267,2510,4.763,2511,4.763,2512,4.763,2513,6.266,2514,7.177,2515,6.033]],["title/classes/UpdateDocumentApplicationDto.html",[0,0.176,1163,2.99]],["body/classes/UpdateDocumentApplicationDto.html",[0,0.286,2,1.388,3,0.141,4,0.141,5,0.141,8,1.828,13,3.153,15,0.271,16,0.747,17,1.378,29,0.387,30,0.013,32,0.979,37,2.406,39,0.571,44,1.689,47,0.599,87,0.233,89,2.544,90,2.334,93,1.689,95,1.53,99,0.159,110,0.01,111,0.01,154,2.425,266,2.255,276,2.037,383,2.527,384,3.318,395,2.693,400,3.441,401,2.241,404,2.634,453,3.291,454,3.441,457,3.751,464,4.918,490,4.327,491,3.394,646,4.563,966,3.616,968,4.918,970,4.215,975,4.215,977,4.661,989,3.882,1076,5.689,1163,4.844,1185,4.661,2510,5.733,2511,4.215,2512,4.215,2516,6.34,2517,5.339,2518,5.339,2519,5.339,2520,5.339,2521,5.339]],["title/classes/UpdateQueueDto.html",[0,0.176,2522,3.246]],["body/classes/UpdateQueueDto.html",[0,0.307,2,1.563,3,0.159,4,0.159,5,0.159,15,0.305,16,0.803,17,1.435,29,0.416,30,0.013,32,1.052,39,0.614,47,0.644,87,0.214,89,2.68,90,2.509,93,1.903,99,0.179,110,0.011,111,0.011,276,1.925,966,4.072,1002,4.747,1004,5.249,1838,6.039,1856,5.181,1985,4.371,2522,5.654,2523,6.679,2524,6.012,2525,6.012,2526,6.012,2527,6.012]],["title/classes/UpdateUserDto.html",[0,0.176,14,2.124]],["body/classes/UpdateUserDto.html",[0,0.303,1,2.801,2,1.016,3,0.104,4,0.104,5,0.104,6,6.206,7,2.841,8,2.016,9,3.958,10,1.849,11,1.64,12,1.661,13,1.849,14,3.474,15,0.198,16,0.608,17,1.499,18,2.115,19,2.223,20,2.721,21,3.217,22,2.025,23,2.34,24,2.34,25,3.217,26,3.217,27,2.476,28,2.966,29,0.456,30,0.013,31,1.369,32,1.14,33,4.935,34,0.892,35,1.66,36,0.757,37,2.635,39,0.665,41,2.018,42,3.084,43,2.223,47,0.744,48,4.734,49,4.734,50,4.734,51,4.734,52,4.734,53,4.734,54,3.411,57,3.672,58,3.411,60,3.411,62,3.254,63,1.294,64,3.411,66,3.085,67,3.084,69,3.672,70,3.084,72,3.672,73,3.942,74,4.217,75,3.942,76,3.084,78,3.942,79,2.828,80,2.678,81,3.672,82,3.076,83,3.411,85,3.411,87,0.162,88,2.566,89,2.807,90,2.72,91,3.672,92,4.281,93,1.236,94,3.496,95,1.12,96,3.672,97,3.672,98,2.801,99,0.162,100,1.93,101,3.084,102,3.084,103,2.345,104,3.084,105,2.484,106,2.841,107,3.411,108,3.672,109,1.64,110,0.008,111,0.008,1030,3.411,1033,3.411,1038,3.411,1041,3.411,1050,3.411,2528,3.907,2529,3.907,2530,3.907,2531,3.907]],["title/classes/UpdateUserStatusDto.html",[0,0.176,2532,2.99]],["body/classes/UpdateUserStatusDto.html",[0,0.309,2,1.582,3,0.161,4,0.161,5,0.161,8,1.816,12,1.701,15,0.308,16,0.808,29,0.353,30,0.013,32,0.894,37,1.926,39,0.521,87,0.215,93,1.926,95,1.744,99,0.181,110,0.011,111,0.011,119,4.163,136,1.875,138,2.811,276,1.532,404,2.617,935,4.586,949,5.695,1024,3.869,2532,5.245,2533,6.298,2534,5.313,2535,6.086,2536,6.086]],["title/entities/User.html",[12,0.88,112,1.259]],["body/entities/User.html",[0,0.173,3,0.107,4,0.107,5,0.107,12,1.185,15,0.204,16,0.621,18,3.427,21,3.269,22,1.814,23,2.379,24,2.379,25,3.269,26,3.269,27,2.217,28,2.657,29,0.478,30,0.013,31,1.321,32,1.21,34,1.265,35,2.315,36,1.385,39,0.706,44,1.753,47,0.746,63,1.394,87,0.165,99,0.12,110,0.008,111,0.008,112,1.233,114,1.758,116,2.874,119,3.427,121,4.286,122,2.561,123,3.152,132,3.269,135,4.085,136,2.132,138,2.158,142,4.027,144,4.03,145,1.364,466,2.561,473,4.538,476,2.728,488,3.521,489,4.09,508,4.372,524,2.728,534,4.027,610,2.296,1063,4.372,1083,3.518,1084,4.835,1086,3.181,1310,3.798,1869,4.835,1874,4.835,2450,4.835,2537,3.518,2538,5.538,2539,4.029,2540,4.029,2541,6.815,2542,4.029,2543,4.029,2544,4.029,2545,4.029,2546,4.029,2547,5.538,2548,4.029,2549,4.029,2550,5.538,2551,4.029,2552,4.029,2553,5.538,2554,4.029,2555,4.029,2556,4.029,2557,5.538,2558,5.538,2559,4.029,2560,4.029,2561,4.029,2562,5.538,2563,4.029,2564,4.029,2565,4.029,2566,4.029,2567,4.029,2568,5.538,2569,4.029]],["title/classes/UserQueryDto.html",[0,0.176,2570,2.99]],["body/classes/UserQueryDto.html",[0,0.301,2,1.289,3,0.131,4,0.131,5,0.131,8,2.029,15,0.251,16,0.713,17,1.461,22,1.822,28,2.082,29,0.462,30,0.013,31,1.591,32,1.087,34,1.452,35,2.266,37,2.342,39,0.634,47,0.665,63,1.076,78,3.605,87,0.209,89,2.681,90,2.459,91,4.752,93,1.569,94,3.34,95,1.421,98,3.284,99,0.148,103,3.816,109,3.287,110,0.009,111,0.009,172,2.774,173,3.8,1017,5.844,1042,5.844,1148,5.019,1195,3.656,1283,5.062,1284,5.183,1313,4.622,1826,5.019,2570,4.622,2571,5.183,2572,4.329,2573,6.358,2574,4.959,2575,4.959,2576,4.959,2577,4.959,2578,6.358,2579,4.959,2580,4.959,2581,4.329,2582,6.358]],["title/classes/UserResponseDto.html",[0,0.176,1832,2.468]],["body/classes/UserResponseDto.html",[0,0.159,2,0.962,3,0.098,4,0.098,5,0.098,8,2.13,11,2.191,12,1.759,15,0.187,16,0.585,17,1.367,18,3.274,20,1.893,21,3.123,22,1.985,23,2.273,24,2.273,25,3.123,26,3.123,28,2.907,29,0.475,30,0.013,31,1.393,32,1.19,34,1.5,35,2.01,36,1.431,37,2.564,39,0.694,44,1.651,47,0.746,57,3.534,62,3.132,63,1.371,66,3.737,69,3.534,72,3.534,74,3.534,87,0.11,94,3.022,95,1.06,98,3.123,99,0.11,103,3.941,105,4.175,109,2.191,110,0.008,111,0.008,116,2.746,119,3.274,121,4.095,122,2.835,136,1.357,138,2.034,276,1.313,404,2.879,558,2.69,610,2.512,702,5.185,935,3.318,997,5.185,1017,5.185,1018,4.556,1021,3.318,1024,4.997,1025,4.556,1031,5.734,1034,2.97,1048,4.556,1310,3.629,1825,2.505,1832,3.132,2571,5.517,2583,3.699,2584,6.567,2585,5.219,2586,3.699,2587,3.699,2588,3.699,2589,3.699,2590,3.699,2591,3.699,2592,3.699,2593,3.699,2594,3.699,2595,3.699,2596,3.699,2597,3.699,2598,3.699,2599,3.699]],["title/interfaces/UserStats.html",[884,1.392,1292,2.785]],["body/interfaces/UserStats.html",[0,0.103,1,1.959,3,0.064,4,0.064,5,0.064,10,1.142,11,2.229,12,1.661,14,1.959,15,0.122,16,0.425,17,0.437,18,3.318,19,3.487,21,2.982,22,2.042,23,2.495,24,2.409,25,3.61,26,3.528,27,2.147,28,3.041,29,0.372,30,0.013,31,1.471,34,0.551,35,2.09,36,1.457,43,2.158,44,2.101,47,0.519,63,1.037,66,1.373,87,0.204,98,2.42,99,0.113,109,1.013,110,0.006,111,0.006,116,1.096,119,2.537,136,0.627,138,0.94,145,0.817,154,1.096,158,2.314,166,1.192,173,3.125,175,1.306,188,0.483,191,1.306,196,0.94,198,1.913,209,0.817,226,0.907,231,0.954,234,2.567,235,0.975,237,1.959,241,2.797,247,1.534,248,1.306,250,1.826,251,2.502,253,2.937,256,1.634,257,1.634,259,2.567,260,1.877,262,2.513,263,2.568,268,1.634,338,1.592,393,1.142,395,0.975,417,1.655,495,2.851,544,1.534,595,1.448,599,1.373,610,2.628,623,1.448,661,2.537,695,2.41,737,1.754,739,1.754,761,1.192,789,2.276,793,1.192,794,2.42,814,1.448,848,2.158,849,1.246,852,3.285,884,1.284,885,1.306,1015,2.666,1021,1.534,1034,1.373,1051,3.173,1135,2.42,1195,1.873,1225,2.568,1240,1.448,1281,2.568,1282,1.754,1283,3.376,1284,4.733,1285,1.754,1286,1.754,1287,1.754,1288,2.41,1289,2.42,1290,1.754,1291,2.276,1292,2.568,1293,4.341,1294,4.341,1295,4.15,1296,4.15,1297,3.173,1298,3.376,1299,4.15,1300,4.192,1301,1.373,1302,1.905,1303,1.634,1304,1.634,1305,1.905,1306,1.905,1307,3.699,1308,2.994,1309,1.905,1310,3.847,1311,1.905,1312,2.994,1313,2.757,1314,1.905,1315,2.757,1316,2.757,1317,2.757,1318,1.905,1319,1.905,1320,1.905,1321,1.905,1322,1.905,1323,2.41,1324,2.994,1325,1.905,1326,4.15,1327,2.994,1328,2.757,1329,2.757,1330,1.754,1331,1.905,1332,4.733,1333,4.192,1334,1.754,1335,1.905,1336,2.994,1337,2.757,1338,4.192,1339,2.757,1340,3.67,1341,2.757,1342,2.568,1343,2.994,1344,1.905,1345,1.905,1346,1.905,1347,1.905,1348,1.905,1349,1.448,1350,1.905,1351,1.905,1352,1.905,1353,1.905,1354,1.754,1355,2.994,1356,3.699,1357,1.754,1358,1.905,1359,2.994,1360,1.754,1361,1.905,1362,1.905,1363,2.994,1364,1.534,1365,1.905,1366,1.905,1367,1.905,1368,1.905,1369,1.905,1370,2.994,1371,1.905,1372,1.905,1373,2.994,1374,1.905,1375,1.905,1376,1.905,1377,1.905,1378,1.905,1379,1.905,1380,1.905,1381,1.905,1382,1.905,1383,1.905,1384,1.905,1385,2.994,1386,1.905,1387,1.905,1388,1.905,1389,1.905,1390,2.757,1391,1.754,1392,2.757,1393,2.757,1394,1.754,1395,1.754,1396,1.905,1397,1.634,1398,1.754,1399,1.905]],["title/classes/UserStatsResponseDto.html",[0,0.176,2600,2.99]],["body/classes/UserStatsResponseDto.html",[0,0.273,2,1.289,3,0.131,4,0.131,5,0.131,8,2.092,12,1.501,15,0.251,16,0.713,29,0.462,30,0.013,31,1.625,32,1.124,35,2.266,37,2.422,39,0.656,44,2.012,47,0.446,63,0.839,87,0.19,95,1.421,98,2.562,99,0.148,110,0.009,111,0.009,128,3.009,404,2.925,552,3.618,848,3.618,850,5.693,935,4.042,936,4.622,1024,4.461,1135,4.207,1293,4.752,1294,4.752,1295,4.752,1296,4.752,1297,3.358,1298,4.461,1299,4.752,1444,4.305,1825,3.358,1832,4.442,1833,5.551,1835,3.605,2571,5.303,2600,4.622,2601,5.551,2602,4.959,2603,4.959,2604,5.551,2605,4.959,2606,4.959,2607,5.381,2608,4.959,2609,4.329]],["title/classes/UsersByRoleDto.html",[0,0.176,2607,2.99]],["body/classes/UsersByRoleDto.html",[0,0.286,2,1.392,3,0.142,4,0.142,5,0.142,8,2.078,12,1.428,15,0.271,16,0.748,29,0.442,30,0.013,31,1.611,32,0.981,35,2.397,37,2.478,39,0.572,47,0.6,63,1.13,87,0.199,95,1.535,98,3.448,99,0.16,110,0.01,111,0.01,128,2.535,404,2.97,552,3.048,848,3.048,850,5.287,935,3.405,936,3.894,1024,4.243,1135,4.125,1293,3.627,1294,3.627,1295,3.627,1296,3.627,1297,4.924,1298,4.839,1299,3.627,1444,3.627,1825,3.627,1829,4.676,1832,4.364,1834,4.676,1835,3.894,2571,4.924,2600,3.894,2601,4.676,2604,4.676,2607,5.534,2609,5.827]],["title/controllers/UsersController.html",[147,1.662,2610,2.99]],["body/controllers/UsersController.html",[0,0.109,1,2.823,3,0.067,4,0.067,5,0.067,8,2.02,10,3.628,11,2.744,12,1.796,14,2.823,15,0.129,17,1.185,27,2.073,29,0.46,30,0.013,32,0.993,35,1.673,36,1.4,39,0.579,47,0.659,63,1.106,87,0.224,95,0.729,99,0.076,109,1.068,110,0.006,111,0.006,147,1.028,149,1.028,151,1.526,153,1.433,154,2.201,155,2.624,156,2.624,158,2.394,161,1.616,163,2.457,164,2.368,166,1.256,167,1.616,173,2.139,175,1.377,176,1.849,178,1.616,180,1.849,182,3.7,183,1.849,184,1.526,185,3.08,187,4.007,188,0.509,191,1.377,193,1.447,195,1.203,196,1.54,198,1.905,205,3.973,209,0.861,234,3.017,241,1.724,250,0.991,251,2.125,253,2.054,259,1.485,260,1.061,262,3.285,276,1.929,338,1.659,356,3.826,505,1.54,544,3.474,545,3.282,548,3.229,551,2.873,552,2.248,553,4.112,555,3.229,557,2.22,558,4.753,559,5.708,579,2.22,580,4.156,595,1.526,598,1.722,605,1.447,606,1.849,607,1.722,608,2.139,609,1.849,610,1.433,611,1.849,614,2.007,615,1.849,616,5.047,617,5.406,618,2.873,621,2.676,623,1.526,625,4.914,631,4.945,632,4.427,640,2.22,641,3.973,665,2.22,667,2.22,672,2.007,695,4.665,761,1.256,789,3.279,793,1.256,794,2.503,849,1.314,1015,3.72,1135,3.236,1136,5.469,1137,5.939,1138,4.554,1139,4.231,1140,5.336,1177,3.759,1195,1.256,1199,6.101,1240,2.371,1283,2.512,1284,2.676,1287,1.849,1288,2.512,1291,2.371,1301,2.758,1323,1.616,1326,1.722,1395,1.849,1426,4.231,1429,3.826,1430,4.231,1431,2.22,1432,2.22,1438,3.119,1481,2.22,1502,3.45,1503,2.22,1504,3.45,1621,4.314,1832,2.908,1835,1.849,2218,2.22,2219,2.22,2221,2.22,2532,3.973,2570,3.973,2610,2.873,2611,2.22,2612,4.846,2613,3.951,2614,2.543,2615,3.951,2616,2.543,2617,3.951,2618,2.543,2619,2.543,2620,2.543,2621,2.543,2622,2.543,2623,2.543,2624,2.543,2625,2.543,2626,2.543,2627,2.543,2628,2.543,2629,2.543,2630,2.543,2631,2.543,2632,2.543,2633,2.543,2634,2.543,2635,4.846,2636,2.543,2637,2.543,2638,3.951,2639,3.951,2640,2.22,2641,2.543,2642,3.951,2643,2.543,2644,2.543,2645,2.543,2646,2.543,2647,2.543,2648,2.543,2649,2.543,2650,2.543,2651,2.543,2652,2.543,2653,2.543,2654,2.543,2655,2.543,2656,2.543,2657,2.543,2658,2.543,2659,2.543,2660,2.543,2661,2.543,2662,2.543,2663,2.543,2664,3.951,2665,2.543]],["title/modules/UsersModule.html",[209,1.392,290,2.785]],["body/modules/UsersModule.html",[0,0.244,3,0.151,4,0.151,5,0.151,12,1.217,30,0.013,87,0.242,99,0.17,110,0.01,111,0.01,149,2.801,188,1.14,209,2.529,211,2.81,212,2.81,213,3.08,214,3.08,215,2.81,216,4.044,217,4.044,221,3.751,222,2.81,223,2.938,225,3.942,226,2.138,229,3.942,289,4.864,290,5.648,304,4.491,874,4.966,1286,4.136,1301,4.816,2610,5.431,2640,4.966,2666,4.966,2667,4.966,2668,5.688,2669,4.966,2670,5.688,2671,5.688]],["title/injectables/UsersService.html",[231,1.035,1301,2.34]],["body/injectables/UsersService.html",[0,0.093,1,2.589,3,0.058,4,0.058,5,0.058,10,1.03,11,2.104,12,1.631,14,2.589,15,0.11,16,0.392,17,1.228,18,3.173,19,3.335,21,2.835,22,2.021,23,2.406,24,2.314,25,3.501,26,3.412,27,2.053,28,3.008,29,0.383,30,0.013,31,1.466,34,0.798,35,2.022,36,1.478,39,0.593,43,1.989,44,2.026,47,0.594,63,1.244,66,1.239,87,0.197,98,2.262,99,0.104,109,0.914,110,0.005,111,0.005,116,0.989,119,2.972,136,0.566,138,1.706,145,0.737,153,1.268,154,1.988,155,1.892,156,1.892,158,2.711,163,2.482,164,2.314,166,1.726,172,0.95,173,2.972,175,1.892,188,0.436,191,1.179,196,1.706,198,1.859,209,0.737,226,0.818,231,0.88,232,1.03,234,2.989,235,1.413,237,2.589,241,3.17,247,1.384,248,1.179,250,2.139,251,2.474,253,2.886,256,1.474,257,1.474,259,2.482,260,1.859,262,2.372,263,2.367,268,1.474,338,2.104,393,1.03,395,0.88,417,1.525,495,2.711,544,3.186,545,2.367,555,1.726,595,2.097,599,1.239,610,2.559,623,1.307,661,2.371,737,2.541,739,2.541,761,1.075,789,2.097,793,1.075,794,2.262,814,1.307,848,1.989,849,1.125,852,3.123,884,1.183,1015,3.335,1021,1.384,1034,1.239,1051,2.965,1135,2.262,1195,1.726,1225,2.367,1240,1.307,1281,3.394,1282,1.583,1283,3.186,1284,4.589,1285,1.583,1286,1.583,1287,1.583,1288,2.222,1289,3.181,1290,1.583,1291,2.097,1292,1.474,1293,3.394,1294,3.394,1295,2.965,1296,2.965,1297,2.965,1298,3.186,1299,2.965,1300,2.759,1301,1.989,1302,2.759,1303,1.474,1304,2.367,1305,1.719,1306,1.719,1307,3.457,1308,2.759,1309,1.719,1310,3.695,1311,1.719,1312,2.759,1313,2.541,1314,1.719,1315,2.541,1316,2.541,1317,2.541,1318,1.719,1319,1.719,1320,1.719,1321,1.719,1322,1.719,1323,2.222,1324,2.759,1325,1.719,1326,3.968,1327,2.759,1328,2.541,1329,2.541,1330,1.583,1331,1.719,1332,4.589,1333,3.957,1334,1.583,1335,3.457,1336,2.759,1337,2.541,1338,3.957,1339,2.541,1340,3.489,1341,2.541,1342,2.367,1343,2.759,1344,1.719,1345,1.719,1346,1.719,1347,1.719,1348,1.719,1349,1.307,1350,1.719,1351,1.719,1352,1.719,1353,1.719,1354,1.583,1355,2.759,1356,3.457,1357,1.583,1358,1.719,1359,2.759,1360,1.583,1361,1.719,1362,1.719,1363,2.759,1364,1.384,1365,1.719,1366,1.719,1367,1.719,1368,1.719,1369,1.719,1370,2.759,1371,1.719,1372,1.719,1373,2.759,1374,1.719,1375,1.719,1376,1.719,1377,1.719,1378,1.719,1379,1.719,1380,1.719,1381,1.719,1382,1.719,1383,1.719,1384,1.719,1385,2.759,1386,1.719,1387,2.759,1388,2.759,1389,2.759,1390,2.541,1391,1.583,1392,2.541,1393,2.541,1394,1.583,1395,1.583,1396,1.719,1397,1.474,1398,1.583,1399,1.719,2672,3.495,2673,3.495,2674,2.177,2675,3.495,2676,2.177,2677,2.177,2678,2.177,2679,2.177,2680,2.177,2681,2.177,2682,2.177,2683,2.177,2684,2.177,2685,2.177]],["title/classes/VerifyOtpDto.html",[0,0.176,411,2.226]],["body/classes/VerifyOtpDto.html",[0,0.314,2,0.929,3,0.095,4,0.095,5,0.095,8,2.016,15,0.181,16,0.571,17,0.923,20,2.906,22,2.415,27,2.079,29,0.375,30,0.013,32,0.872,33,2.272,34,1.477,36,0.693,37,2.578,39,0.508,44,1.131,47,0.732,79,2.313,80,2.516,82,3.194,87,0.152,88,3.461,89,2.079,90,2.665,93,1.131,94,2.589,95,1.024,99,0.212,100,1.765,110,0.008,111,0.008,127,1.846,128,1.691,172,1.56,260,0.96,276,1.282,311,3.571,346,3.065,379,1.935,380,2.145,381,1.935,382,1.846,383,2.41,384,2.589,385,1.846,388,1.846,391,2.034,392,3.847,393,3.461,394,2.272,395,3.259,396,3.959,397,4.388,398,4.161,400,2.631,401,2.715,404,2.885,405,2.145,406,1.935,407,1.765,408,3.959,409,4.073,410,2.898,411,2.757,412,4.164,413,3.561,414,3.376,415,3.772,416,3.881,417,2.589,418,4.102,419,3.237,420,3.772,421,3.056,422,3.237,423,3.881,424,4.111,425,1.935,426,2.145,427,1.935,428,2.145,429,2.145,430,2.145,431,2.145,432,2.145,433,2.145,434,3.056,435,2.145,436,3.056,437,2.145,438,2.272,439,2.272,440,2.272,441,2.272,442,2.272,443,2.034,444,2.034,445,2.034,446,2.034,447,1.935,448,1.935,449,2.145,450,2.034,451,1.56,452,1.935,453,1.765,454,1.846,455,1.846,2440,3.12,2441,3.12,2505,3.12,2686,3.574,2687,3.574,2688,3.574]],["title/coverage.html",[2689,4.434]],["body/coverage.html",[0,0.36,1,1.667,5,0.086,6,3.734,7,4.071,12,1.198,14,1.667,29,0.187,30,0.013,35,0.987,79,1.465,110,0.007,111,0.007,112,2.34,113,2.185,115,2.817,147,2.999,148,2.346,150,2.817,160,2.051,179,2.185,189,2.051,215,1.594,231,1.997,233,2.817,260,0.866,269,2.346,270,2.817,276,1.19,277,2.051,291,2.051,292,1.936,299,2.547,309,3.439,311,1.408,335,5.383,375,2.817,379,1.747,380,4.117,406,1.747,411,1.747,417,3.781,425,1.747,427,1.747,447,1.747,456,3.203,457,3.948,458,4.129,459,4.129,465,3.007,474,2.346,490,2.691,496,1.836,497,2.547,536,2.346,537,2.817,547,2.051,548,1.594,592,2.185,602,2.051,605,1.836,608,1.747,610,1.17,690,2.346,691,2.817,692,3.734,724,2.817,850,3.439,863,2.185,864,1.936,866,2.547,884,2.511,886,4.071,892,2.185,917,1.836,918,2.547,921,1.594,939,2.817,940,3.734,950,2.817,951,3.734,968,2.185,969,2.817,970,3.734,1000,2.547,1001,2.817,1002,3.734,1015,1.836,1016,2.817,1054,4.483,1055,3.734,1065,3.203,1115,2.346,1116,2.817,1135,1.667,1163,2.346,1183,2.346,1195,1.594,1249,2.838,1255,4.129,1281,2.185,1282,4.071,1289,1.667,1292,2.185,1301,1.836,1401,2.817,1402,2.817,1409,2.346,1410,4.129,1415,2.185,1417,2.185,1451,2.547,1644,2.817,1652,2.817,1704,2.817,1764,2.817,1777,2.817,1823,2.547,1824,2.817,1825,4.176,1832,1.936,1836,2.547,1848,3.007,1863,2.817,1864,2.817,1892,2.051,1893,2.817,1906,2.185,1977,2.185,1979,2.817,1980,2.346,1988,2.346,1989,2.817,2005,2.817,2006,2.817,2090,4.129,2162,2.817,2181,3.186,2182,4.129,2241,2.346,2413,3.734,2419,3.734,2423,2.346,2443,2.817,2452,2.346,2453,2.817,2480,2.817,2508,2.817,2513,2.817,2516,2.817,2522,2.547,2523,2.817,2532,2.346,2533,2.817,2534,2.817,2537,2.817,2570,2.346,2571,4.176,2572,2.817,2600,2.346,2607,2.346,2610,2.346,2611,2.817,2689,2.547,2690,2.817,2691,3.226,2692,7.089,2693,7.27,2694,4.729,2695,4.729,2696,7.089,2697,4.129,2698,8.176,2699,6.166,2700,3.226,2701,3.226,2702,6.565,2703,6.166,2704,2.817,2705,3.226,2706,3.226,2707,3.226,2708,2.817,2709,5.383,2710,6.166,2711,2.817,2712,2.817,2713,2.817,2714,6.166,2715,4.729,2716,6.565,2717,3.226,2718,4.729,2719,4.729,2720,3.226,2721,4.729,2722,3.226,2723,3.226,2724,3.226,2725,3.226,2726,3.226,2727,3.226,2728,3.226]],["title/dependencies.html",[212,2.444,2729,2.996]],["body/dependencies.html",[0,0.294,30,0.013,93,1.768,95,1.601,110,0.01,111,0.01,122,2.1,145,1.892,188,1.119,212,2.76,226,2.1,296,3.025,298,4.063,759,4.878,868,4.411,870,3.552,877,3.552,891,4.982,1181,5.982,1182,5.982,1291,3.353,1670,4.411,1746,4.878,1790,4.878,1937,4.878,1938,5.982,2422,4.411,2581,4.878,2730,7.928,2731,5.587,2732,6.852,2733,5.587,2734,5.587,2735,5.587,2736,5.587,2737,5.587,2738,5.587,2739,5.587,2740,5.587,2741,5.587,2742,5.587,2743,5.587,2744,5.587,2745,5.587,2746,5.587,2747,5.587,2748,5.587,2749,5.587,2750,6.852,2751,5.587,2752,5.587,2753,5.587,2754,5.587,2755,5.587,2756,5.587,2757,5.587,2758,5.587,2759,5.587,2760,5.587,2761,5.587,2762,5.587,2763,5.587,2764,5.587,2765,5.587,2766,5.587,2767,5.587]],["title/miscellaneous/enumerations.html",[2768,2.182,2769,4.319]],["body/miscellaneous/enumerations.html",[3,0.144,15,0.276,30,0.013,110,0.01,111,0.01,172,3.758,382,3.485,388,2.814,400,3.485,451,3.5,452,3.652,453,2.691,454,2.814,455,3.785,457,2.814,497,4.301,521,4.288,530,4.568,531,4.868,532,4.596,918,4.301,931,5.89,935,4.288,936,4.905,1054,3.961,1055,5.785,1076,4.905,1093,4.756,1094,4.756,1095,5.89,1096,4.756,1097,3.961,1098,4.756,1099,4.756,1100,4.756,1101,4.756,1102,4.756,1103,5.89,1104,5.89,1105,4.756,1106,4.756,1107,4.756,1108,4.301,1836,4.301,1856,4.568,1860,4.905,2768,3.463,2769,4.756,2770,6.746,2771,5.448,2772,5.448,2773,5.448]],["title/miscellaneous/functions.html",[2768,2.182,2774,4.319]],["body/miscellaneous/functions.html",[15,0.324,17,1.158,29,0.371,30,0.012,63,1.081,110,0.011,111,0.011,163,2.401,215,3.875,2709,5.577,2711,6.85,2712,6.48,2713,6.85,2768,4.06,2774,5.577,2775,8.075,2776,6.387,2777,7.845]],["title/index.html",[15,0.174,824,2.495,2778,3.432]],["body/index.html",[4,0.122,8,1.157,30,0.012,37,2.276,97,3.114,110,0.009,111,0.009,223,3.963,237,2.375,268,3.114,344,3.63,353,4.401,358,3.343,363,4.062,365,3.114,384,3.348,396,3.278,453,2.272,651,4.015,661,4.154,712,2.923,896,5.771,1034,2.617,1097,3.343,1117,5.285,1179,3.63,1429,3.63,1590,4.015,1649,4.779,1896,4.015,2031,6.829,2242,4.015,2261,4.015,2289,4.015,2329,5.285,2348,4.015,2689,3.63,2690,5.285,2779,4.598,2780,4.598,2781,6.767,2782,6.053,2783,4.598,2784,4.598,2785,4.598,2786,6.767,2787,4.598,2788,7.191,2789,4.598,2790,7.937,2791,4.598,2792,4.598,2793,4.598,2794,4.598,2795,6.767,2796,4.598,2797,4.598,2798,4.598,2799,4.598,2800,4.598,2801,7.191,2802,6.053,2803,4.598,2804,4.598,2805,4.598,2806,6.053,2807,7.191,2808,6.053,2809,4.598,2810,6.053,2811,7.672,2812,7.191,2813,4.598,2814,6.053,2815,4.598,2816,4.598,2817,4.598,2818,4.598,2819,7.191,2820,4.598,2821,4.598,2822,4.598,2823,4.598,2824,6.053,2825,4.598,2826,4.598,2827,4.598,2828,4.598,2829,6.053,2830,4.598,2831,4.598,2832,6.053,2833,4.598,2834,4.598,2835,6.279,2836,4.598,2837,4.598,2838,4.598,2839,4.598,2840,4.598,2841,4.598,2842,4.598,2843,4.598,2844,6.053,2845,4.598,2846,4.598,2847,4.598,2848,4.598,2849,4.598,2850,4.598,2851,4.598,2852,6.053,2853,4.598,2854,4.598,2855,4.598,2856,4.598,2857,6.053,2858,4.598,2859,4.598,2860,4.598,2861,6.053,2862,6.053,2863,4.598,2864,4.598,2865,4.598,2866,4.598,2867,4.598,2868,4.598,2869,4.598,2870,4.598,2871,4.598,2872,4.598,2873,4.015,2874,4.598,2875,4.598,2876,4.598,2877,4.598,2878,4.598,2879,4.598]],["title/modules.html",[211,2.774]],["body/modules.html",[30,0.011,110,0.011,111,0.011,210,4.225,211,3.082,281,4.536,285,4.225,286,4.225,287,4.225,288,4.225,289,3.744,290,4.225,2835,7.347,2880,8.414,2881,8.414,2882,8.414]],["title/overview.html",[2883,4.903]],["body/overview.html",[2,1.156,30,0.013,79,2.019,109,1.866,110,0.009,111,0.009,114,1.94,149,1.797,189,4.931,209,1.505,210,5.146,211,2.196,212,2.196,213,2.407,214,2.407,215,2.196,216,2.407,217,2.407,218,3.882,219,3.882,220,3.882,221,3.205,222,2.196,223,2.297,232,2.104,277,4.231,281,6.161,282,3.882,283,3.882,284,3.882,285,5.146,286,5.667,287,5.402,288,5.456,289,4.729,290,5.336,291,5.009,292,4.729,602,4.931,684,3.882,685,3.882,686,3.882,859,3.882,861,3.882,862,3.882,863,5.253,864,4.655,885,2.407,1183,5.64,1246,3.882,1247,3.882,1248,3.882,1249,4.655,1289,4.007,1301,4.414,1444,3.011,1892,4.511,1906,5.253,1974,3.882,1975,3.882,1976,3.882,1977,5.253,2241,3.232,2473,3.882,2474,3.882,2475,3.882,2666,3.882,2667,3.882,2669,3.882,2704,5.168,2883,3.882,2884,4.446,2885,4.446]],["title/properties.html",[16,0.554,2729,2.996]],["body/properties.html",[8,1.659,16,0.739,30,0.012,110,0.011,111,0.011,1097,4.793,2873,5.756,2886,6.593,2887,6.593,2888,6.593]],["title/miscellaneous/variables.html",[900,3.35,2768,2.182]],["body/miscellaneous/variables.html",[12,1.484,15,0.289,27,1.996,28,2.392,29,0.434,30,0.013,34,1.776,47,0.623,110,0.01,111,0.01,114,2.486,172,3.394,198,1.53,251,1.744,299,5.474,320,4.974,321,4.974,323,4.142,327,4.142,329,4.974,330,4.974,331,4.974,336,4.142,342,3.419,353,5.041,548,2.814,555,2.814,610,2.892,900,3.858,1177,3.419,1674,4.498,2333,6.054,2413,4.498,2414,4.974,2415,4.142,2416,4.974,2417,4.974,2418,4.974,2423,5.041,2697,4.974,2708,4.974,2768,3.622,2889,5.697,2890,6.934,2891,5.697,2892,5.697,2893,5.697,2894,5.697,2895,5.697,2896,5.697,2897,5.697,2898,5.697,2899,5.697,2900,5.697,2901,5.697]]],"invertedIndex":[["",{"_index":30,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"classes/ResetPasswordDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":417,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/LockoutData.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{}}}],["0.0.1",{"_index":2887,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":2744,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":2760,"title":{},"body":{"dependencies.html":{}}}],["0.3.22",{"_index":2767,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":2743,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":2755,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":2698,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":2721,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":2716,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":2715,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":2720,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":2718,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":2695,"title":{},"body":{"coverage.html":{}}}],["0/19",{"_index":2724,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":2693,"title":{},"body":{"coverage.html":{}}}],["0/24",{"_index":2694,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":2692,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2696,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":2702,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":2714,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":2699,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":2703,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":2719,"title":{},"body":{"coverage.html":{}}}],["001",{"_index":450,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/AppointmentNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["001'})@isstring",{"_index":386,"title":{},"body":{"classes/ApplicationNotificationDto.html":{}}}],["001'})@isstring()@isnotempty",{"_index":703,"title":{},"body":{"classes/AppointmentNotificationDto.html":{}}}],["01",{"_index":997,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UserResponseDto.html":{}}}],["01t00:00:00.000z",{"_index":2584,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["08:00",{"_index":369,"title":{},"body":{"modules/AppModule.html":{}}}],["09123456789",{"_index":106,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{}}}],["09123456789'})@isstring",{"_index":2163,"title":{},"body":{"classes/RegisterDto.html":{}}}],["09123456789'})@isstring()@isoptional",{"_index":58,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["1",{"_index":109,"title":{"injectables/MinioService-1.html":{},"interfaces/RequestWithUser-1.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService-1.html":{},"classes/PaginatedUsersResponseDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["1.5.4",{"_index":2758,"title":{},"body":{"dependencies.html":{}}}],["1.5.5",{"_index":2739,"title":{},"body":{"dependencies.html":{}}}],["1/10",{"_index":2707,"title":{},"body":{"coverage.html":{}}}],["1/11",{"_index":2705,"title":{},"body":{"coverage.html":{}}}],["1/12",{"_index":2706,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":2701,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":1195,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/QueueNotificationDto.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"classes/UserQueryDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["100",{"_index":128,"title":{},"body":{"entities/Announcement.html":{},"classes/ApplicationNotificationDto.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"classes/ForgotPasswordDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"classes/VerifyOtpDto.html":{}}}],["100).tofixed(1",{"_index":2085,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["1000",{"_index":1448,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["1024",{"_index":1196,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["10:00",{"_index":2359,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["10:30",{"_index":2360,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["10mb",{"_index":1197,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["11",{"_index":2884,"title":{},"body":{"overview.html":{}}}],["11.0.0",{"_index":2732,"title":{},"body":{"dependencies.html":{}}}],["11.0.5",{"_index":2733,"title":{},"body":{"dependencies.html":{}}}],["11.1.0",{"_index":2730,"title":{},"body":{"dependencies.html":{}}}],["11.2.0",{"_index":2735,"title":{},"body":{"dependencies.html":{}}}],["11:59",{"_index":2033,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["123",{"_index":49,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["123456",{"_index":414,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["123456'})@isstring()@isoptional",{"_index":2174,"title":{},"body":{"classes/RegisterDto.html":{}}}],["15",{"_index":1444,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"overview.html":{}}}],["16.5.0",{"_index":2747,"title":{},"body":{"dependencies.html":{}}}],["1990",{"_index":996,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["1})@isoptional()@type(undefined)@isnumber()@min(1",{"_index":2573,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["2",{"_index":108,"title":{"interfaces/RequestWithUser-2.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{}}}],["2.0.0",{"_index":2750,"title":{},"body":{"dependencies.html":{}}}],["2.0.10",{"_index":2741,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":1137,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":551,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["2024",{"_index":702,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UserResponseDto.html":{}}}],["23",{"_index":2017,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["23:59",{"_index":2034,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["24",{"_index":2369,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["24h",{"_index":883,"title":{},"body":{"modules/AuthModule.html":{}}}],["25",{"_index":2609,"title":{},"body":{"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{}}}],["250",{"_index":1265,"title":{},"body":{"entities/DocumentFile.html":{}}}],["255",{"_index":140,"title":{},"body":{"entities/Announcement.html":{},"entities/DocumentFile.html":{}}}],["2})@isnumber()@isoptional",{"_index":38,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["3",{"_index":1053,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/LockoutData.html":{},"classes/QueueNotificationDto.html":{},"interfaces/RequestWithUser.html":{}}}],["3.14.1",{"_index":2752,"title":{},"body":{"dependencies.html":{}}}],["300",{"_index":1803,"title":{},"body":{"injectables/OTPService.html":{}}}],["30min",{"_index":818,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["31",{"_index":2885,"title":{},"body":{"overview.html":{}}}],["33",{"_index":2700,"title":{},"body":{"coverage.html":{}}}],["3306",{"_index":2895,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3600",{"_index":1700,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["4",{"_index":1021,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/RequestWithUser.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["4.0.1",{"_index":2756,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":2731,"title":{},"body":{"dependencies.html":{}}}],["4.1.0",{"_index":2745,"title":{},"body":{"dependencies.html":{}}}],["4.8.1",{"_index":2763,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":2203,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["401",{"_index":2198,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["403",{"_index":2234,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["404",{"_index":1140,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["409",{"_index":2205,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["5",{"_index":174,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"interfaces/LockoutData.html":{},"injectables/OTPService.html":{},"interfaces/RequestWithUser.html":{}}}],["5.0.1",{"_index":2766,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":2742,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":474,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"coverage.html":{}}}],["500",{"_index":134,"title":{},"body":{"entities/Announcement.html":{},"entities/DocumentFile.html":{}}}],["59",{"_index":2048,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["5:00",{"_index":816,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["6",{"_index":412,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"injectables/AppointmentService.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"injectables/OTPService.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["6.0.0",{"_index":2734,"title":{},"body":{"dependencies.html":{}}}],["6.4.17",{"_index":2737,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":1447,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["639123456789",{"_index":1018,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["6})@isstring()@minlength(6",{"_index":1043,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["7.0.4",{"_index":2754,"title":{},"body":{"dependencies.html":{}}}],["7.8.2",{"_index":2762,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":79,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/ApplicationNotificationDto.html":{},"injectables/AppointmentService.html":{},"classes/ForgotPasswordDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateUserDto.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{},"overview.html":{}}}],["8.0.5",{"_index":2748,"title":{},"body":{"dependencies.html":{}}}],["8/16",{"_index":2726,"title":{},"body":{"coverage.html":{}}}],["85",{"_index":2601,"title":{},"body":{"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{}}}],["8:00",{"_index":815,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["8})@isstring()@isnotempty()@minlength(8",{"_index":2176,"title":{},"body":{"classes/RegisterDto.html":{}}}],["8})@isstring()@isoptional()@minlength(8",{"_index":83,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["9",{"_index":2704,"title":{},"body":{"coverage.html":{},"overview.html":{}}}],["9000",{"_index":1676,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["999",{"_index":2049,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["9]{6",{"_index":418,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["9]{6}$'})@isstring()@length(6",{"_index":2440,"title":{},"body":{"classes/ResetPasswordDto.html":{},"classes/VerifyOtpDto.html":{}}}],["_",{"_index":1602,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["__dirname",{"_index":329,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["__password",{"_index":1433,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["access_token",{"_index":1492,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["accesskey",{"_index":1679,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["account",{"_index":1442,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["action",{"_index":2066,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["active",{"_index":935,"title":{},"body":{"entities/Counter.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"miscellaneous/enumerations.html":{}}}],["activeusers",{"_index":1294,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["add",{"_index":1506,"title":{},"body":{"interfaces/LockoutData.html":{},"classes/QueueGateway.html":{},"interfaces/RequestWithUser.html":{}}}],["adddays",{"_index":756,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["adddays(today",{"_index":828,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["additional",{"_index":1108,"title":{},"body":{"entities/DocumentApplication.html":{},"classes/QueueNotificationDto.html":{},"miscellaneous/enumerations.html":{}}}],["additionalproperties",{"_index":698,"title":{},"body":{"classes/AppointmentNotificationDto.html":{}}}],["address",{"_index":20,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/ApplicationNotificationDto.html":{},"entities/Appointment.html":{},"classes/AppointmentNotificationDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"entities/QueueDetails.html":{},"classes/QueueNotificationDto.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{},"classes/VerifyOtpDto.html":{}}}],["address'})@isemail()@isnotempty",{"_index":1026,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["addselect('count(user.id",{"_index":1377,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["admin",{"_index":10,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["admin/staff",{"_index":560,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["admin/super",{"_index":1158,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["admincreateuser",{"_index":2612,"title":{},"body":{"controllers/UsersController.html":{}}}],["admincreateuser(createuserdto",{"_index":2614,"title":{},"body":{"controllers/UsersController.html":{}}}],["adminid",{"_index":1234,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"interfaces/LockoutData.html":{}}}],["administrator",{"_index":723,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"interfaces/RequestWithUser.html":{}}}],["administrator'})@isstring()@isoptional",{"_index":710,"title":{},"body":{"classes/AppointmentNotificationDto.html":{}}}],["administrators",{"_index":2229,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["adminrolenames",{"_index":1579,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["adminrolenames.some",{"_index":1582,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["adminroles",{"_index":1577,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["adminroles.map((role",{"_index":1580,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["adminupdate",{"_index":1335,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["adminupdate(id",{"_index":2676,"title":{},"body":{"injectables/UsersService.html":{}}}],["adminupdateuser",{"_index":1570,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["adminupdateuserdto",{"_index":1,"title":{"classes/AdminUpdateUserDto.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["advanced",{"_index":339,"title":{},"body":{"modules/AppModule.html":{}}}],["afterconnect",{"_index":370,"title":{},"body":{"modules/AppModule.html":{}}}],["again",{"_index":1475,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["against",{"_index":2284,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["alert",{"_index":2274,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["alerts",{"_index":1998,"title":{},"body":{"classes/QueueNotificationDto.html":{},"interfaces/RequestWithUser.html":{}}}],["allow",{"_index":665,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/UsersController.html":{}}}],["allowed",{"_index":1205,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["allowedheaders",{"_index":1946,"title":{},"body":{"classes/QueueGateway.html":{}}}],["allowing",{"_index":2825,"title":{},"body":{"index.html":{}}}],["allows",{"_index":2224,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["allqueues",{"_index":2121,"title":{},"body":{"controllers/QueuesController.html":{}}}],["allqueues.map((queue",{"_index":2126,"title":{},"body":{"controllers/QueuesController.html":{}}}],["alltimeslots",{"_index":820,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["alltimeslots.filter((slot",{"_index":822,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["already",{"_index":852,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService-1.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["always",{"_index":2078,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["amazing",{"_index":2867,"title":{},"body":{"index.html":{}}}],["announcement",{"_index":113,"title":{"entities/Announcement.html":{}},"body":{"entities/Announcement.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"coverage.html":{}}}],["announcement.controller",{"_index":227,"title":{},"body":{"modules/AnnouncementModule.html":{}}}],["announcement.dto",{"_index":192,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"classes/UpdateAnnouncementDto.html":{}}}],["announcement.dto.ts",{"_index":940,"title":{},"body":{"classes/CreateAnnouncementDto.html":{},"classes/UpdateAnnouncementDto.html":{},"coverage.html":{}}}],["announcement.dto.ts:10",{"_index":944,"title":{},"body":{"classes/CreateAnnouncementDto.html":{}}}],["announcement.dto.ts:14",{"_index":945,"title":{},"body":{"classes/CreateAnnouncementDto.html":{}}}],["announcement.dto.ts:18",{"_index":942,"title":{},"body":{"classes/CreateAnnouncementDto.html":{}}}],["announcement.dto.ts:22",{"_index":947,"title":{},"body":{"classes/CreateAnnouncementDto.html":{}}}],["announcement.dto.ts:6",{"_index":948,"title":{},"body":{"classes/CreateAnnouncementDto.html":{}}}],["announcement.isactive",{"_index":265,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["announcement.service",{"_index":190,"title":{},"body":{"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{}}}],["announcementcontroller",{"_index":148,"title":{"controllers/AnnouncementController.html":{}},"body":{"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"coverage.html":{}}}],["announcementmodule",{"_index":210,"title":{"modules/AnnouncementModule.html":{}},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["announcementrepository",{"_index":239,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["announcements",{"_index":152,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["announcementservice",{"_index":189,"title":{"injectables/AnnouncementService.html":{}},"body":{"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"coverage.html":{},"overview.html":{}}}],["api",{"_index":2105,"title":{},"body":{"controllers/QueuesController.html":{}}}],["apibearerauth",{"_index":618,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["apibearerauth('jwt",{"_index":622,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{}}}],["apibody",{"_index":2187,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["apiconsumes",{"_index":1186,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["apiconsumes('multipart/form",{"_index":1207,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["apioperation",{"_index":616,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["apiparam",{"_index":2186,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["apiproperty",{"_index":404,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/AppointmentNotificationDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/QueueNotificationDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"classes/VerifyOtpDto.html":{}}}],["apiproperty({description",{"_index":383,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/AppointmentNotificationDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{},"classes/QueueNotificationDto.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/VerifyOtpDto.html":{}}}],["apiproperty({enum",{"_index":977,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["apiproperty({example",{"_index":1024,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{}}}],["apiproperty({type",{"_index":1833,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{},"classes/UserStatsResponseDto.html":{}}}],["apipropertyoptional",{"_index":94,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/ApplicationNotificationDto.html":{},"classes/AppointmentNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/VerifyOtpDto.html":{}}}],["apipropertyoptional({description",{"_index":33,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/AppointmentNotificationDto.html":{},"classes/RegisterDto.html":{},"classes/SendOtpDto.html":{},"classes/UpdateUserDto.html":{},"classes/VerifyOtpDto.html":{}}}],["apipropertyoptional({example",{"_index":1017,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{}}}],["apiquery",{"_index":2188,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["apiresponse",{"_index":617,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":615,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["apitags('appointments",{"_index":619,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["apitags('authentication",{"_index":2193,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["apitags('document",{"_index":1187,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["apitags('users",{"_index":2644,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":385,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"injectables/AppointmentService.html":{},"entities/DocumentFile.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["app.appointmenttime",{"_index":813,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["app.controller",{"_index":303,"title":{},"body":{"modules/AppModule.html":{}}}],["app.files",{"_index":1260,"title":{},"body":{"entities/DocumentFile.html":{}}}],["app.service",{"_index":278,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app.statushistory",{"_index":467,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["appcontroller",{"_index":269,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applicantname",{"_index":2375,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["application",{"_index":384,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/VerifyOtpDto.html":{},"index.html":{}}}],["application'})@apiresponse({status",{"_index":1124,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["application.dto",{"_index":1185,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["application.dto.ts",{"_index":970,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"coverage.html":{}}}],["application.dto.ts:12",{"_index":979,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["application.dto.ts:18",{"_index":2518,"title":{},"body":{"classes/UpdateDocumentApplicationDto.html":{}}}],["application.dto.ts:21",{"_index":976,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["application.dto.ts:27",{"_index":2519,"title":{},"body":{"classes/UpdateDocumentApplicationDto.html":{}}}],["application.dto.ts:33",{"_index":984,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["application.dto.ts:42",{"_index":987,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["application.entity",{"_index":491,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"classes/CreateDocumentApplicationDto.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["application.entity.ts",{"_index":1055,"title":{},"body":{"entities/DocumentApplication.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["application.entity.ts:41",{"_index":1073,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:44",{"_index":1088,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:51",{"_index":1062,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:54",{"_index":1060,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:61",{"_index":1077,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:64",{"_index":1082,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:67",{"_index":1071,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:70",{"_index":1064,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:73",{"_index":1085,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:76",{"_index":1075,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:81",{"_index":1087,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:84",{"_index":1068,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application.entity.ts:90",{"_index":1081,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application_id",{"_index":471,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentFile.html":{}}}],["application_subtype",{"_index":1059,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["application_type",{"_index":1061,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["applicationid",{"_index":381,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/DocumentFile.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["applicationnotificationdto",{"_index":379,"title":{"classes/ApplicationNotificationDto.html":{}},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{}}}],["applications",{"_index":1117,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"index.html":{}}}],["applications.controller",{"_index":1251,"title":{},"body":{"modules/DocumentApplicationsModule.html":{}}}],["applications.controller.ts",{"_index":1116,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"coverage.html":{}}}],["applications.controller.ts:120",{"_index":1150,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:146",{"_index":1141,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:164",{"_index":1131,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:183",{"_index":1155,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:201",{"_index":1164,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:231",{"_index":1167,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:246",{"_index":1161,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:261",{"_index":1144,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:271",{"_index":1159,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:49",{"_index":1125,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:77",{"_index":1174,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.controller.ts:99",{"_index":1129,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["applications.module",{"_index":310,"title":{},"body":{"modules/AppModule.html":{}}}],["applications.module.ts",{"_index":1250,"title":{},"body":{"modules/DocumentApplicationsModule.html":{}}}],["applications.service",{"_index":1184,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{}}}],["applications.service.ts",{"_index":2717,"title":{},"body":{"coverage.html":{}}}],["applications/document",{"_index":309,"title":{},"body":{"modules/AppModule.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"coverage.html":{}}}],["applications/dto/create",{"_index":969,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"coverage.html":{}}}],["applications/dto/update",{"_index":2516,"title":{},"body":{"classes/UpdateDocumentApplicationDto.html":{},"coverage.html":{}}}],["applications/entities/application",{"_index":458,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"coverage.html":{}}}],["applications/entities/document",{"_index":1054,"title":{},"body":{"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["applications/services/minio.service.ts",{"_index":1704,"title":{},"body":{"injectables/MinioService-1.html":{},"coverage.html":{}}}],["applications/services/minio.service.ts:109",{"_index":1711,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:119",{"_index":1714,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:128",{"_index":1719,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:46",{"_index":1720,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:50",{"_index":1712,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:65",{"_index":1721,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:7",{"_index":1722,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:8",{"_index":1723,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:9",{"_index":1710,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applications/services/minio.service.ts:93",{"_index":1717,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["applicationstatus",{"_index":1076,"title":{},"body":{"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"classes/UpdateDocumentApplicationDto.html":{},"miscellaneous/enumerations.html":{}}}],["applicationstatus.approved",{"_index":2520,"title":{},"body":{"classes/UpdateDocumentApplicationDto.html":{}}}],["applicationstatus.pending",{"_index":1114,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["applicationstatushistory",{"_index":456,"title":{"entities/ApplicationStatusHistory.html":{}},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentApplication.html":{},"modules/DocumentApplicationsModule.html":{},"coverage.html":{}}}],["applicationsubtype",{"_index":971,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"interfaces/RequestWithUser.html":{}}}],["applicationtype",{"_index":382,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{},"miscellaneous/enumerations.html":{}}}],["applicationtype.birth_certificate",{"_index":990,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["apply",{"_index":1312,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["appmodule",{"_index":281,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appointment",{"_index":496,"title":{"entities/Appointment.html":{}},"body":{"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["appointment'})@apiresponse({status",{"_index":550,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["appointment.appointmentdate",{"_index":785,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointment.appointmenttime",{"_index":787,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointment.controller",{"_index":688,"title":{},"body":{"modules/AppointmentModule.html":{}}}],["appointment.dto",{"_index":604,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"classes/UpdateAppointmentDto.html":{}}}],["appointment.dto.ts",{"_index":951,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{},"coverage.html":{}}}],["appointment.dto.ts:13",{"_index":957,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:17",{"_index":959,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:21",{"_index":960,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:25",{"_index":953,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:29",{"_index":961,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:33",{"_index":962,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:37",{"_index":955,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:41",{"_index":956,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:45",{"_index":964,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:48",{"_index":965,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:51",{"_index":958,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["appointment.dto.ts:9",{"_index":2515,"title":{},"body":{"classes/UpdateAppointmentDto.html":{}}}],["appointment.service",{"_index":603,"title":{},"body":{"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{}}}],["appointment.status",{"_index":801,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointment.userid",{"_index":668,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["appointment_type",{"_index":1867,"title":{},"body":{"entities/QueueDetails.html":{}}}],["appointmentcontroller",{"_index":536,"title":{"controllers/AppointmentController.html":{}},"body":{"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"coverage.html":{}}}],["appointmentdate",{"_index":498,"title":{},"body":{"entities/Appointment.html":{},"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{}}}],["appointmentdetails",{"_index":693,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"interfaces/RequestWithUser.html":{}}}],["appointmentmodule",{"_index":285,"title":{"modules/AppointmentModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules.html":{},"overview.html":{}}}],["appointmentnotificationdto",{"_index":690,"title":{"classes/AppointmentNotificationDto.html":{}},"body":{"classes/AppointmentNotificationDto.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["appointmentnumber",{"_index":499,"title":{},"body":{"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"interfaces/RequestWithUser.html":{}}}],["appointmentrepository",{"_index":733,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointments",{"_index":538,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["appointmentservice",{"_index":602,"title":{"injectables/AppointmentService.html":{}},"body":{"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"coverage.html":{},"overview.html":{}}}],["appointmentstatus",{"_index":521,"title":{},"body":{"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{},"miscellaneous/enumerations.html":{}}}],["appointmentstatus.cancelled",{"_index":841,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointmentstatus.completed",{"_index":840,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointmentstatus.confirmed",{"_index":809,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["appointmentstatus.pending",{"_index":535,"title":{},"body":{"entities/Appointment.html":{},"injectables/AppointmentService.html":{}}}],["appointmenttime",{"_index":500,"title":{},"body":{"entities/Appointment.html":{},"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{}}}],["appointmenttype",{"_index":1003,"title":{},"body":{"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{}}}],["appropriately",{"_index":1591,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["approval",{"_index":2390,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["approved",{"_index":400,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"entities/DocumentApplication.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/VerifyOtpDto.html":{},"miscellaneous/enumerations.html":{}}}],["appservice",{"_index":277,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["appt",{"_index":701,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"interfaces/RequestWithUser.html":{}}}],["array",{"_index":41,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"interfaces/AuthenticatedUser.html":{},"classes/CreateUserDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/PaginatedUsersResponseDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserDto.html":{}}}],["array.isarray(payload.roles",{"_index":915,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["array.isarray(queue.details",{"_index":2133,"title":{},"body":{"controllers/QueuesController.html":{}}}],["asc",{"_index":777,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["asia/manila",{"_index":2020,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["assign",{"_index":43,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["assigned",{"_index":1605,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["assigning",{"_index":1511,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["assignment",{"_index":2639,"title":{},"body":{"controllers/UsersController.html":{}}}],["assignment'})@apiresponse({status",{"_index":2618,"title":{},"body":{"controllers/UsersController.html":{}}}],["assignments",{"_index":2232,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["assignrolestouser",{"_index":2481,"title":{},"body":{"injectables/RolesService.html":{}}}],["assignrolestouser(userid",{"_index":2486,"title":{},"body":{"injectables/RolesService.html":{}}}],["async",{"_index":234,"title":{},"body":{"injectables/AnnouncementService.html":{},"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["attempt",{"_index":1478,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["attempting",{"_index":1572,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["attempts",{"_index":1411,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["attemptsused",{"_index":2401,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["auth",{"_index":623,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth.controller",{"_index":872,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":607,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["auth.guard.ts",{"_index":1402,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":871,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/RequestWithUser.html":{}}}],["auth/auth.module",{"_index":302,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/decorators/roles.decorator",{"_index":611,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["auth/decorators/user.decorator",{"_index":613,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{}}}],["auth/dto/update",{"_index":1287,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth/guards/jwt",{"_index":606,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["auth/guards/roles.guard",{"_index":609,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["auth/jwt.strategy",{"_index":614,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["authcontroller",{"_index":866,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["authenticated",{"_index":626,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["authenticateduser",{"_index":548,"title":{"interfaces/AuthenticatedUser.html":{}},"body":{"controllers/AppointmentController.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authentication",{"_index":2259,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["authguard",{"_index":1404,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":1403,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":286,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":2873,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authorization",{"_index":1947,"title":{},"body":{"classes/QueueGateway.html":{}}}],["authservice",{"_index":863,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{},"overview.html":{}}}],["auto",{"_index":1035,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/QueueSchedulerService.html":{},"classes/RegisterDto.html":{}}}],["automatically",{"_index":2328,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["availability",{"_index":781,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["available",{"_index":655,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"interfaces/RequestWithUser.html":{}}}],["avoid",{"_index":2353,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["await",{"_index":253,"title":{},"body":{"injectables/AnnouncementService.html":{},"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["aws",{"_index":2814,"title":{},"body":{"index.html":{}}}],["back",{"_index":1519,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["backers",{"_index":2868,"title":{},"body":{"index.html":{}}}],["backward",{"_index":2566,"title":{},"body":{"entities/User.html":{}}}],["bad",{"_index":2204,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["badrequestexception",{"_index":599,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('cannot",{"_index":769,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["badrequestexception('date",{"_index":644,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["badrequestexception('document",{"_index":1213,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["badrequestexception('failed",{"_index":1559,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["badrequestexception('invalid",{"_index":765,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["badrequestexception('this",{"_index":855,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["badrequestexception('user",{"_index":1631,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["badrequestexception(`role",{"_index":1603,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["badrequestexception(`user",{"_index":1586,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["badrequestexception(passwordvalidation.message",{"_index":1501,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["base32",{"_index":1805,"title":{},"body":{"injectables/OTPService.html":{}}}],["based",{"_index":2289,"title":{},"body":{"interfaces/RequestWithUser.html":{},"index.html":{}}}],["basic",{"_index":1588,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["bcrypt",{"_index":1291,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare",{"_index":1485,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["bcrypt.compare(logindto.password",{"_index":1424,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["bcrypt.gensalt",{"_index":1503,"title":{},"body":{"interfaces/LockoutData.html":{},"controllers/UsersController.html":{}}}],["bcrypt.hash(createuserdto.password",{"_index":2660,"title":{},"body":{"controllers/UsersController.html":{}}}],["bcrypt.hash(newpassword",{"_index":1632,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["bcrypt.hash(password",{"_index":1505,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["bcrypt.hash(updateuserdto.password",{"_index":1538,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["before",{"_index":1555,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["beforeconnect",{"_index":350,"title":{},"body":{"modules/AppModule.html":{}}}],["being",{"_index":1337,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["belongs",{"_index":662,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["below",{"_index":345,"title":{},"body":{"modules/AppModule.html":{}}}],["best",{"_index":2298,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["better",{"_index":2043,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["between",{"_index":755,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueSchedulerService.html":{}}}],["between(startdate",{"_index":825,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["between(startofday",{"_index":2056,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["bigint",{"_index":1270,"title":{},"body":{"entities/DocumentFile.html":{}}}],["birth",{"_index":388,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{},"miscellaneous/enumerations.html":{}}}],["birth_certificate",{"_index":1093,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["birthdate",{"_index":995,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["birthplace",{"_index":998,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["blue",{"_index":2268,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["board",{"_index":2860,"title":{},"body":{"index.html":{}}}],["body",{"_index":182,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["body('documentcategory",{"_index":1208,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["body('status",{"_index":673,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["book",{"_index":770,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["booked",{"_index":853,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["bookedslots",{"_index":811,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["bookedslots.includes(slot",{"_index":823,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["boolean",{"_index":138,"title":{},"body":{"entities/Announcement.html":{},"entities/Appointment.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"entities/OTP.html":{},"entities/QueueDetails.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["bootstrap",{"_index":215,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["both",{"_index":2111,"title":{},"body":{"controllers/QueuesController.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["branded",{"_index":2339,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["breaking",{"_index":2354,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["browse",{"_index":2882,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2880,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":1745,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["bucketname",{"_index":1653,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["building",{"_index":2782,"title":{},"body":{"index.html":{}}}],["bulacan",{"_index":107,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["bulacan'})@isstring()@isoptional",{"_index":54,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["bulak",{"_index":1686,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"interfaces/RequestWithUser.html":{}}}],["bulak_smart_connect",{"_index":2900,"title":{},"body":{"miscellaneous/variables.html":{}}}],["business",{"_index":1101,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["business_permit",{"_index":1100,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["calculate",{"_index":1806,"title":{},"body":{"injectables/OTPService.html":{}}}],["callback",{"_index":1200,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["callback(null",{"_index":1206,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["called",{"_index":2110,"title":{},"body":{"controllers/QueuesController.html":{}}}],["caller",{"_index":1396,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["canactivate",{"_index":2420,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":2425,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["cancel",{"_index":2058,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cancellation",{"_index":708,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{}}}],["cancellations",{"_index":709,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"injectables/QueueSchedulerService.html":{}}}],["cancelled",{"_index":532,"title":{},"body":{"entities/Appointment.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"entities/Queue.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"miscellaneous/enumerations.html":{}}}],["cancelledcount",{"_index":836,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueSchedulerService.html":{}}}],["cancelledqueues",{"_index":2059,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cancelledqueues.length",{"_index":2063,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cancelledservingqueues",{"_index":2072,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cancelledservingqueues.length",{"_index":2074,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cascade",{"_index":469,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/QueueDetails.html":{}}}],["cascade'})@joincolumn({name",{"_index":1261,"title":{},"body":{"entities/DocumentFile.html":{},"entities/QueueDetails.html":{}}}],["cases",{"_index":2256,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["catch",{"_index":793,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["category",{"_index":1210,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["category)'})@apiresponse({status",{"_index":1149,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["caught",{"_index":1595,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["certificate",{"_index":455,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{},"miscellaneous/enumerations.html":{}}}],["certificate'})@isstring",{"_index":389,"title":{},"body":{"classes/ApplicationNotificationDto.html":{}}}],["change",{"_index":1535,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["changed",{"_index":1354,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["changed_at",{"_index":477,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["changed_by",{"_index":479,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["changedat",{"_index":460,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["changedby",{"_index":461,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["changes",{"_index":2364,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["changing",{"_index":780,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["channel",{"_index":2837,"title":{},"body":{"index.html":{}}}],["character",{"_index":1643,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["characters",{"_index":80,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/ApplicationNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateUserDto.html":{},"classes/VerifyOtpDto.html":{}}}],["check",{"_index":661,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/OTPService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["checkaccountlockout(@body",{"_index":2399,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["checking",{"_index":856,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/RequestWithUser.html":{}}}],["checks",{"_index":359,"title":{},"body":{"modules/AppModule.html":{},"interfaces/RequestWithUser.html":{}}}],["checktimeslotavailability",{"_index":725,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["checktimeslotavailability(date",{"_index":734,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["citizen",{"_index":98,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["citizenrole",{"_index":1507,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["citizenrole.id",{"_index":1509,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["class",{"_index":0,"title":{"classes/AdminUpdateUserDto.html":{},"classes/ApplicationNotificationDto.html":{},"classes/AppointmentNotificationDto.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/QueueGateway.html":{},"classes/QueueNotificationDto.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"classes/VerifyOtpDto.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"classes/ResetPasswordDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/ApplicationNotificationDto.html":{},"classes/AppointmentNotificationDto.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/QueueGateway.html":{},"classes/QueueNotificationDto.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"classes/VerifyOtpDto.html":{},"overview.html":{}}}],["cleanupexpiredotps",{"_index":1778,"title":{},"body":{"injectables/OTPService.html":{}}}],["clear",{"_index":2409,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["clearaccountlockout(@body",{"_index":2410,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["clearaccountlockout(identifier",{"_index":1459,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["cleared",{"_index":1463,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["clearing",{"_index":2412,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["clicks",{"_index":2824,"title":{},"body":{"index.html":{}}}],["client",{"_index":1914,"title":{},"body":{"classes/QueueGateway.html":{}}}],["client.id",{"_index":1954,"title":{},"body":{"classes/QueueGateway.html":{}}}],["client.join('queue_updates",{"_index":1965,"title":{},"body":{"classes/QueueGateway.html":{}}}],["client.join(`counter_${counterid",{"_index":1962,"title":{},"body":{"classes/QueueGateway.html":{}}}],["client.join(`queue_${queueid",{"_index":1957,"title":{},"body":{"classes/QueueGateway.html":{}}}],["clients",{"_index":1967,"title":{},"body":{"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{}}}],["cloud",{"_index":2809,"title":{},"body":{"index.html":{}}}],["cluster_announcementmodule",{"_index":218,"title":{},"body":{"modules/AnnouncementModule.html":{},"overview.html":{}}}],["cluster_announcementmodule_exports",{"_index":219,"title":{},"body":{"modules/AnnouncementModule.html":{},"overview.html":{}}}],["cluster_announcementmodule_providers",{"_index":220,"title":{},"body":{"modules/AnnouncementModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":282,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":284,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":283,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appointmentmodule",{"_index":684,"title":{},"body":{"modules/AppointmentModule.html":{},"overview.html":{}}}],["cluster_appointmentmodule_exports",{"_index":685,"title":{},"body":{"modules/AppointmentModule.html":{},"overview.html":{}}}],["cluster_appointmentmodule_providers",{"_index":686,"title":{},"body":{"modules/AppointmentModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":859,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":861,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":860,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":862,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_documentapplicationsmodule",{"_index":1246,"title":{},"body":{"modules/DocumentApplicationsModule.html":{},"overview.html":{}}}],["cluster_documentapplicationsmodule_exports",{"_index":1247,"title":{},"body":{"modules/DocumentApplicationsModule.html":{},"overview.html":{}}}],["cluster_documentapplicationsmodule_providers",{"_index":1248,"title":{},"body":{"modules/DocumentApplicationsModule.html":{},"overview.html":{}}}],["cluster_queuemodule",{"_index":1974,"title":{},"body":{"modules/QueueModule.html":{},"overview.html":{}}}],["cluster_queuemodule_exports",{"_index":1976,"title":{},"body":{"modules/QueueModule.html":{},"overview.html":{}}}],["cluster_queuemodule_providers",{"_index":1975,"title":{},"body":{"modules/QueueModule.html":{},"overview.html":{}}}],["cluster_rolesmodule",{"_index":2473,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_rolesmodule_exports",{"_index":2475,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_rolesmodule_providers",{"_index":2474,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":2666,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":2667,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":2668,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":2669,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":346,"title":{},"body":{"modules/AppModule.html":{},"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/LockoutData.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["coding",{"_index":2341,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["color",{"_index":2340,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["column",{"_index":144,"title":{},"body":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/OTP.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["column({default",{"_index":514,"title":{},"body":{"entities/Appointment.html":{},"entities/OTP.html":{}}}],["column({name",{"_index":473,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["column({nullable",{"_index":517,"title":{},"body":{"entities/Appointment.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{}}}],["column({type",{"_index":125,"title":{},"body":{"entities/Announcement.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/OTP.html":{},"entities/Queue.html":{}}}],["column({unique",{"_index":508,"title":{},"body":{"entities/Appointment.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["combine",{"_index":2120,"title":{},"body":{"controllers/QueuesController.html":{}}}],["come",{"_index":2830,"title":{},"body":{"index.html":{}}}],["compatibility",{"_index":2567,"title":{},"body":{"entities/User.html":{}}}],["complete",{"_index":48,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["completed",{"_index":531,"title":{},"body":{"entities/Appointment.html":{},"injectables/AppointmentService.html":{},"entities/Queue.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"miscellaneous/enumerations.html":{}}}],["completed_at",{"_index":1841,"title":{},"body":{"entities/Queue.html":{}}}],["completedat",{"_index":1837,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{}}}],["completedcount",{"_index":835,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["completes",{"_index":2314,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["completion",{"_index":2083,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["complexity",{"_index":431,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["component",{"_index":1546,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["components",{"_index":1353,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["concurrent",{"_index":2036,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["config/database.config",{"_index":300,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":294,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":315,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":295,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{}}}],["configservice.get('db_host",{"_index":322,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_logging",{"_index":337,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_name",{"_index":328,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_password",{"_index":326,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_port",{"_index":324,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_synchronize",{"_index":332,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_timezone",{"_index":368,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_username",{"_index":325,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('jwt_secret",{"_index":880,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('node_env",{"_index":352,"title":{},"body":{"modules/AppModule.html":{}}}],["configured",{"_index":1737,"title":{},"body":{"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{}}}],["confirmation",{"_index":715,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"interfaces/RequestWithUser.html":{}}}],["confirmation'})@isstring()@isnotempty",{"_index":719,"title":{},"body":{"classes/AppointmentNotificationDto.html":{}}}],["confirmed",{"_index":530,"title":{},"body":{"entities/Appointment.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"interfaces/RequestWithUser.html":{},"miscellaneous/enumerations.html":{}}}],["confirmed'})@isstring()@isoptional",{"_index":713,"title":{},"body":{"classes/AppointmentNotificationDto.html":{}}}],["confirmedcount",{"_index":834,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["conflict",{"_index":2206,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["conflictexception",{"_index":1285,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["conflictexception('email",{"_index":1339,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["conflictexception('username",{"_index":1341,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["conn",{"_index":354,"title":{},"body":{"modules/AppModule.html":{}}}],["conn.query",{"_index":366,"title":{},"body":{"modules/AppModule.html":{}}}],["conn.query('set",{"_index":360,"title":{},"body":{"modules/AppModule.html":{}}}],["connect",{"_index":1688,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"interfaces/RequestWithUser.html":{}}}],["connected",{"_index":1953,"title":{},"body":{"classes/QueueGateway.html":{}}}],["connection",{"_index":351,"title":{},"body":{"modules/AppModule.html":{}}}],["consistent",{"_index":1514,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["console",{"_index":340,"title":{},"body":{"modules/AppModule.html":{}}}],["const",{"_index":251,"title":{},"body":{"injectables/AnnouncementService.html":{},"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":235,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["constructor(announcementrepository",{"_index":236,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["constructor(appointmentrepository",{"_index":731,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["constructor(configservice",{"_index":1406,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/MinioService-1.html":{}}}],["constructor(otprepository",{"_index":1781,"title":{},"body":{"injectables/OTPService.html":{}}}],["constructor(private",{"_index":195,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppController.html":{},"controllers/AppointmentController.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService-1.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser-2.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{}}}],["constructor(queuerepository",{"_index":2012,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["constructor(queueservice",{"_index":1905,"title":{},"body":{"classes/QueueGateway.html":{}}}],["constructor(reflector",{"_index":2469,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(rolesrepository",{"_index":2483,"title":{},"body":{"injectables/RolesService.html":{}}}],["constructor(usersrepository",{"_index":2674,"title":{},"body":{"injectables/UsersService.html":{}}}],["contact",{"_index":57,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["contact_number",{"_index":2538,"title":{},"body":{"entities/User.html":{}}}],["contactnumber",{"_index":21,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["contain",{"_index":423,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/LockoutData.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["containing",{"_index":982,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["content",{"_index":1692,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{}}}],["context",{"_index":2472,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":2429,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":2428,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":2430,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["continues",{"_index":2358,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["controller",{"_index":147,"title":{"controllers/AnnouncementController.html":{},"controllers/AppController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AnnouncementController.html":{},"controllers/AppController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('announcements",{"_index":194,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["controller('appointments",{"_index":620,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["controller('auth",{"_index":2194,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["controller('document",{"_index":1188,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["controller('queues",{"_index":2101,"title":{},"body":{"controllers/QueuesController.html":{}}}],["controller('roles",{"_index":2463,"title":{},"body":{"controllers/RolesController.html":{}}}],["controller('users",{"_index":2645,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":149,"title":{},"body":{"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["converting",{"_index":2220,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["copy",{"_index":974,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["cors",{"_index":1941,"title":{},"body":{"classes/QueueGateway.html":{}}}],["count",{"_index":1298,"title":{},"body":{"interfaces/FindAllOptions.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["counter",{"_index":917,"title":{"entities/Counter.html":{}},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"classes/QueueNotificationDto.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["counter.currentqueue",{"_index":1843,"title":{},"body":{"entities/Queue.html":{}}}],["counter/entities/counter.entity",{"_index":1859,"title":{},"body":{"entities/Queue.html":{},"modules/QueueModule.html":{}}}],["counter_number",{"_index":1845,"title":{},"body":{"entities/Queue.html":{}}}],["counterid",{"_index":1922,"title":{},"body":{"classes/QueueGateway.html":{}}}],["counternumber",{"_index":1838,"title":{},"body":{"entities/Queue.html":{},"controllers/QueuesController.html":{},"classes/UpdateQueueDto.html":{}}}],["counterstatus",{"_index":931,"title":{},"body":{"entities/Counter.html":{},"miscellaneous/enumerations.html":{}}}],["counterstatus.active",{"_index":938,"title":{},"body":{"entities/Counter.html":{}}}],["counts",{"_index":830,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["courses",{"_index":2843,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":2689,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":154,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create')@useguards(jwtauthguard",{"_index":2616,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(@body",{"_index":197,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["create(createannouncementdto",{"_index":159,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{}}}],["create(createappointmentdto",{"_index":546,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["create(createdto",{"_index":1123,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["create(createuserdto",{"_index":1389,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["createannouncementdto",{"_index":160,"title":{"classes/CreateAnnouncementDto.html":{}},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"classes/CreateAnnouncementDto.html":{},"classes/UpdateAnnouncementDto.html":{},"coverage.html":{}}}],["createappointmentdto",{"_index":547,"title":{"classes/CreateAppointmentDto.html":{}},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{},"coverage.html":{}}}],["createappointmentdto.userid",{"_index":627,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["created",{"_index":552,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/MinioService-1.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{}}}],["created_at",{"_index":1063,"title":{},"body":{"entities/DocumentApplication.html":{},"entities/Queue.html":{},"entities/User.html":{}}}],["createdat",{"_index":116,"title":{},"body":{"entities/Announcement.html":{},"injectables/AnnouncementService.html":{},"entities/Appointment.html":{},"entities/DocumentApplication.html":{},"interfaces/FindAllOptions.html":{},"entities/OTP.html":{},"entities/Queue.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["createdatecolumn",{"_index":123,"title":{},"body":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/OTP.html":{},"entities/Queue.html":{},"entities/User.html":{}}}],["createdatecolumn({name",{"_index":476,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/Queue.html":{},"entities/User.html":{}}}],["createdby",{"_index":117,"title":{},"body":{"entities/Announcement.html":{},"classes/CreateAnnouncementDto.html":{}}}],["createdocumentapplicationdto",{"_index":968,"title":{"classes/CreateDocumentApplicationDto.html":{}},"body":{"classes/CreateDocumentApplicationDto.html":{},"controllers/DocumentApplicationsController.html":{},"classes/UpdateDocumentApplicationDto.html":{},"coverage.html":{}}}],["createdto",{"_index":1126,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["createparamdecorator",{"_index":2414,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"miscellaneous/variables.html":{}}}],["createquerybuilder",{"_index":1366,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["createquerybuilder('user",{"_index":1308,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["createqueuedto",{"_index":1000,"title":{"classes/CreateQueueDto.html":{}},"body":{"classes/CreateQueueDto.html":{},"coverage.html":{}}}],["creates",{"_index":2617,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuserdto",{"_index":1015,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":2210,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["createuserdto.otp",{"_index":2211,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["creating",{"_index":1399,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["creation",{"_index":2585,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["credentials",{"_index":1945,"title":{},"body":{"classes/QueueGateway.html":{},"interfaces/RequestWithUser.html":{}}}],["critical",{"_index":1552,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["cron",{"_index":2029,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cron('59",{"_index":2016,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["cruz",{"_index":994,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["ctx",{"_index":2416,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":2417,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"miscellaneous/variables.html":{}}}],["current",{"_index":1438,"title":{},"body":{"interfaces/LockoutData.html":{},"classes/PaginatedUsersResponseDto.html":{},"controllers/UsersController.html":{}}}],["current.attempts",{"_index":1439,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["current.lastattempt",{"_index":1440,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["current.lockeduntil",{"_index":1445,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["current.lockeduntil.gettime",{"_index":1457,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["current_queue_id",{"_index":925,"title":{},"body":{"entities/Counter.html":{}}}],["currentqueue",{"_index":919,"title":{},"body":{"entities/Counter.html":{}}}],["currentqueueid",{"_index":920,"title":{},"body":{"entities/Counter.html":{}}}],["currentuser",{"_index":2651,"title":{},"body":{"controllers/UsersController.html":{}}}],["currentuser.id",{"_index":2652,"title":{},"body":{"controllers/UsersController.html":{}}}],["currentuser.roles.some((role",{"_index":2653,"title":{},"body":{"controllers/UsersController.html":{}}}],["daily",{"_index":2018,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["data",{"_index":342,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateDocumentApplicationDto.html":{},"controllers/DocumentApplicationsController.html":{},"classes/QueueGateway.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"miscellaneous/variables.html":{}}}],["data')@apioperation({summary",{"_index":1172,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["database",{"_index":327,"title":{},"body":{"modules/AppModule.html":{},"interfaces/LockoutData.html":{},"injectables/OTPService.html":{},"miscellaneous/variables.html":{}}}],["databaseconfig",{"_index":299,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["datasource",{"_index":2777,"title":{},"body":{"miscellaneous/functions.html":{}}}],["date",{"_index":122,"title":{},"body":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"entities/Queue.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"dependencies.html":{}}}],["date')@useguards(jwtauthguard",{"_index":578,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["date().toisostring",{"_index":1747,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["date(date.now",{"_index":1446,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["date.getday",{"_index":768,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["date.now",{"_index":1458,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["day",{"_index":2032,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["dayofweek",{"_index":767,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["dd",{"_index":847,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["death",{"_index":1099,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["death_certificate",{"_index":1098,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["debug",{"_index":1211,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"interfaces/LockoutData.html":{}}}],["debugging",{"_index":2127,"title":{},"body":{"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["declarations",{"_index":214,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decline",{"_index":1104,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["decorators",{"_index":32,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"controllers/AppController.html":{},"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"classes/AppointmentNotificationDto.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{},"entities/OTP.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"classes/VerifyOtpDto.html":{}}}],["decorators/roles.decorator",{"_index":2184,"title":{},"body":{"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["dedicated",{"_index":2302,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["deeper",{"_index":2839,"title":{},"body":{"index.html":{}}}],["default",{"_index":34,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"classes/ApplicationNotificationDto.html":{},"entities/Appointment.html":{},"injectables/AppointmentService.html":{},"entities/Counter.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{},"miscellaneous/variables.html":{}}}],["default_role_id",{"_index":2541,"title":{},"body":{"entities/User.html":{}}}],["defaultrole",{"_index":1310,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["defaultroleid",{"_index":18,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["defaultstrategy",{"_index":876,"title":{},"body":{"modules/AuthModule.html":{}}}],["define",{"_index":2424,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["defined",{"_index":39,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{}}}],["dela",{"_index":993,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["delete",{"_index":185,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/LockoutData.html":{},"controllers/UsersController.html":{}}}],["delete(':id",{"_index":176,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["delete(':id')@apioperation({summary",{"_index":1160,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["delete(':id')@httpcode(httpstatus.no_content)@apioperation({summary",{"_index":590,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["delete(':id')@useguards(rolesguard)@roles('admin",{"_index":2631,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleted",{"_index":1240,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deletefile",{"_index":1655,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["deletefile(objectname",{"_index":1659,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["deleting",{"_index":800,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/MinioService-1.html":{}}}],["deletion",{"_index":681,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["dependencies",{"_index":212,"title":{"dependencies.html":{}},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":2801,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":2813,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":2806,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":2823,"title":{},"body":{"index.html":{}}}],["deprecated",{"_index":2500,"title":{},"body":{"injectables/RolesService.html":{}}}],["desc",{"_index":257,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["desc').skip(skip).take(limit",{"_index":1320,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["description",{"_index":8,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"classes/ApplicationNotificationDto.html":{},"controllers/AppointmentController.html":{},"classes/AppointmentNotificationDto.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentApplicationsController.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/QueueNotificationDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"entities/Role.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"classes/VerifyOtpDto.html":{},"index.html":{},"properties.html":{}}}],["design",{"_index":2344,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["details",{"_index":696,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/Queue.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["details.entity",{"_index":1858,"title":{},"body":{"entities/Queue.html":{},"modules/QueueModule.html":{}}}],["details.entity.ts",{"_index":1864,"title":{},"body":{"entities/QueueDetails.html":{},"coverage.html":{}}}],["details.entity.ts:14",{"_index":1871,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:17",{"_index":1884,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:21",{"_index":1883,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:24",{"_index":1889,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:28",{"_index":1888,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:31",{"_index":1870,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:34",{"_index":1875,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:37",{"_index":1877,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:40",{"_index":1866,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:43",{"_index":1879,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:46",{"_index":1886,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:49",{"_index":1868,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.entity.ts:52",{"_index":1873,"title":{},"body":{"entities/QueueDetails.html":{}}}],["details.queue",{"_index":1849,"title":{},"body":{"entities/Queue.html":{}}}],["details?.address",{"_index":2144,"title":{},"body":{"controllers/QueuesController.html":{}}}],["details?.firstname",{"_index":2140,"title":{},"body":{"controllers/QueuesController.html":{}}}],["details?.lastname",{"_index":2141,"title":{},"body":{"controllers/QueuesController.html":{}}}],["details?.middleinitial",{"_index":2142,"title":{},"body":{"controllers/QueuesController.html":{}}}],["details?.phonenumber",{"_index":2145,"title":{},"body":{"controllers/QueuesController.html":{}}}],["details?.reasonofvisit",{"_index":2143,"title":{},"body":{"controllers/QueuesController.html":{}}}],["development",{"_index":344,"title":{},"body":{"modules/AppModule.html":{},"interfaces/RequestWithUser.html":{},"index.html":{}}}],["devtools",{"_index":2849,"title":{},"body":{"index.html":{}}}],["different",{"_index":831,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["digit",{"_index":413,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["digits",{"_index":421,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"injectables/OTPService.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["digits'})@matches(/^[0",{"_index":2441,"title":{},"body":{"classes/ResetPasswordDto.html":{},"classes/VerifyOtpDto.html":{}}}],["disable",{"_index":356,"title":{},"body":{"modules/AppModule.html":{},"interfaces/LockoutData.html":{},"controllers/UsersController.html":{}}}],["disabled",{"_index":2323,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["disconnected",{"_index":1956,"title":{},"body":{"classes/QueueGateway.html":{}}}],["discord",{"_index":2836,"title":{},"body":{"index.html":{}}}],["dive",{"_index":2838,"title":{},"body":{"index.html":{}}}],["document",{"_index":490,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"classes/UpdateDocumentApplicationDto.html":{},"coverage.html":{}}}],["document_category",{"_index":1264,"title":{},"body":{"entities/DocumentFile.html":{}}}],["documentapplication",{"_index":465,"title":{"entities/DocumentApplication.html":{}},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentApplication.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"coverage.html":{}}}],["documentapplicationscontroller",{"_index":1115,"title":{"controllers/DocumentApplicationsController.html":{}},"body":{"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"coverage.html":{}}}],["documentapplicationsmodule",{"_index":287,"title":{"modules/DocumentApplicationsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules.html":{},"overview.html":{}}}],["documentapplicationsservice",{"_index":1183,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"coverage.html":{},"overview.html":{}}}],["documentation",{"_index":2690,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["documentcategory",{"_index":1170,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{}}}],["documentfile",{"_index":1065,"title":{"entities/DocumentFile.html":{}},"body":{"entities/DocumentApplication.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"coverage.html":{}}}],["doe",{"_index":105,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["doe'})@isstring()@isnotempty",{"_index":2169,"title":{},"body":{"classes/RegisterDto.html":{}}}],["doe'})@isstring()@isoptional",{"_index":67,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["don't",{"_index":664,"title":{},"body":{"controllers/AppointmentController.html":{},"interfaces/RequestWithUser.html":{}}}],["dotenv",{"_index":2746,"title":{},"body":{"dependencies.html":{}}}],["download",{"_index":1153,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["dropschema",{"_index":348,"title":{},"body":{"modules/AppModule.html":{}}}],["dto",{"_index":9,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{}}}],["dto.applicantname",{"_index":2382,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["dto.applicationid",{"_index":2379,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["dto.applicationsubtype",{"_index":2381,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["dto.applicationtype",{"_index":2380,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["dto.email",{"_index":2377,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["dto.newstatus",{"_index":2388,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["dto.previousstatus",{"_index":2389,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["dto.rejectionreason",{"_index":2397,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["dto.status",{"_index":2384,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["dto.submissiondate",{"_index":2383,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["dto/appointment",{"_index":2192,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["dto/create",{"_index":191,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/login.dto",{"_index":1416,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["dto/otp.dto",{"_index":2189,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["dto/queue",{"_index":2190,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["dto/register.dto",{"_index":1418,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["dto/update",{"_index":193,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["dto/user",{"_index":2642,"title":{},"body":{"controllers/UsersController.html":{}}}],["due",{"_index":1473,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["during",{"_index":1594,"title":{},"body":{"interfaces/LockoutData.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{}}}],["e.g",{"_index":73,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["e2e",{"_index":2797,"title":{},"body":{"index.html":{}}}],["each",{"_index":1046,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["eager",{"_index":1080,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["east",{"_index":1742,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["efficient",{"_index":2783,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":2804,"title":{},"body":{"index.html":{}}}],["email",{"_index":22,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/ApplicationNotificationDto.html":{},"classes/AppointmentNotificationDto.html":{},"interfaces/AuthenticatedUser.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/QueueNotificationDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{}}}],["email'})@isemail",{"_index":394,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["email.service",{"_index":1791,"title":{},"body":{"injectables/OTPService.html":{}}}],["emailorusername",{"_index":1646,"title":{},"body":{"classes/LoginDto.html":{}}}],["emailregex",{"_index":1522,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["emailregex.test(email",{"_index":1524,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["emailservice",{"_index":291,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/OTPService.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{},"overview.html":{}}}],["enabled",{"_index":2209,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["encoding",{"_index":1804,"title":{},"body":{"injectables/OTPService.html":{}}}],["end",{"_index":652,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/QueueSchedulerService.html":{}}}],["enddate",{"_index":583,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["endofday",{"_index":2023,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["endofday.toisostring",{"_index":2053,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["endpoint",{"_index":1672,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"controllers/QueuesController.html":{}}}],["endpoints",{"_index":1241,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{}}}],["endpoint}:${port",{"_index":1738,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["enforcement",{"_index":2317,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["ensure",{"_index":2348,"title":{},"body":{"interfaces/RequestWithUser.html":{},"index.html":{}}}],["ensurebucketexists",{"_index":1705,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["ensuring",{"_index":1744,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["enterprise",{"_index":2851,"title":{},"body":{"index.html":{}}}],["entities",{"_index":114,"title":{},"body":{"entities/Announcement.html":{},"modules/AppModule.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/OTP.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["entities/announcement.entity",{"_index":228,"title":{},"body":{"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{}}}],["entities/application",{"_index":1252,"title":{},"body":{"modules/DocumentApplicationsModule.html":{}}}],["entities/appointment.entity",{"_index":612,"title":{},"body":{"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"classes/CreateAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["entities/document",{"_index":989,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["entities/otp.entity",{"_index":312,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/OTPService.html":{}}}],["entities/queue",{"_index":1986,"title":{},"body":{"modules/QueueModule.html":{}}}],["entities/queue.entity",{"_index":1985,"title":{},"body":{"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"classes/UpdateQueueDto.html":{}}}],["entities/role.entity",{"_index":2477,"title":{},"body":{"modules/RolesModule.html":{},"injectables/RolesService.html":{}}}],["entities/user.entity",{"_index":1286,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entity",{"_index":112,"title":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/OTP.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{}},"body":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"interfaces/LockoutData.html":{},"entities/OTP.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{},"coverage.html":{}}}],["entity('announcements",{"_index":146,"title":{},"body":{"entities/Announcement.html":{}}}],["entity('application_status_history",{"_index":492,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["entity('appointments",{"_index":533,"title":{},"body":{"entities/Appointment.html":{}}}],["entity('counters",{"_index":937,"title":{},"body":{"entities/Counter.html":{}}}],["entity('document_applications",{"_index":1109,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["entity('document_files",{"_index":1279,"title":{},"body":{"entities/DocumentFile.html":{}}}],["entity('otps",{"_index":1775,"title":{},"body":{"entities/OTP.html":{}}}],["entity('queue_details",{"_index":1891,"title":{},"body":{"entities/QueueDetails.html":{}}}],["entity('queues",{"_index":1861,"title":{},"body":{"entities/Queue.html":{}}}],["entity('roles",{"_index":2451,"title":{},"body":{"entities/Role.html":{}}}],["entity('users",{"_index":2564,"title":{},"body":{"entities/User.html":{}}}],["entity{.ts,.js",{"_index":330,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["enum",{"_index":401,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"entities/Appointment.html":{},"classes/AppointmentNotificationDto.html":{},"entities/Counter.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"classes/ForgotPasswordDto.html":{},"entities/Queue.html":{},"classes/QueueNotificationDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/VerifyOtpDto.html":{}}}],["enumerations",{"_index":2769,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":334,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{}}}],["environments",{"_index":349,"title":{},"body":{"modules/AppModule.html":{}}}],["er_dup_entry",{"_index":1565,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["err",{"_index":1593,"title":{},"body":{"interfaces/LockoutData.html":{},"controllers/QueuesController.html":{}}}],["error",{"_index":794,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["error('invalid",{"_index":2159,"title":{},"body":{"controllers/QueuesController.html":{}}}],["error('jwt_secret",{"_index":899,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["error('queue",{"_index":2161,"title":{},"body":{"controllers/QueuesController.html":{}}}],["error('unauthorized",{"_index":2655,"title":{},"body":{"controllers/UsersController.html":{}}}],["error('user",{"_index":2497,"title":{},"body":{"injectables/RolesService.html":{}}}],["error.code",{"_index":1564,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["error.message",{"_index":1607,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["errors",{"_index":1567,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["eslint",{"_index":1426,"title":{},"body":{"interfaces/LockoutData.html":{},"controllers/UsersController.html":{}}}],["eslint/no",{"_index":1430,"title":{},"body":{"interfaces/LockoutData.html":{},"controllers/UsersController.html":{}}}],["estimated",{"_index":1993,"title":{},"body":{"classes/QueueNotificationDto.html":{}}}],["estimated_wait_time",{"_index":1851,"title":{},"body":{"entities/Queue.html":{}}}],["estimatedtime",{"_index":1990,"title":{},"body":{"classes/QueueNotificationDto.html":{},"interfaces/RequestWithUser.html":{}}}],["estimatedwaittime",{"_index":1839,"title":{},"body":{"entities/Queue.html":{},"controllers/QueuesController.html":{}}}],["etc",{"_index":1776,"title":{},"body":{"entities/OTP.html":{}}}],["event",{"_index":1966,"title":{},"body":{"classes/QueueGateway.html":{}}}],["exactly",{"_index":420,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["example",{"_index":37,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/ApplicationNotificationDto.html":{},"classes/AppointmentNotificationDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/QueueNotificationDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"classes/VerifyOtpDto.html":{},"index.html":{}}}],["exceptions",{"_index":1623,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["execution",{"_index":2037,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["executioncontext",{"_index":2415,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":1599,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["existence",{"_index":2307,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["existing",{"_index":1364,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/OTPService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["existingappointment",{"_index":854,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["existingappointments",{"_index":808,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["existingappointments.map",{"_index":812,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["existinguser",{"_index":1338,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["existinguserbyemail",{"_index":1392,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["existinguserbyemail.id",{"_index":1532,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["existinguserbyusername",{"_index":1393,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["existinguserbyusername.id",{"_index":1534,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["exists",{"_index":1340,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService-1.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["expectation",{"_index":1950,"title":{},"body":{"classes/QueueGateway.html":{}}}],["experience",{"_index":2841,"title":{},"body":{"index.html":{}}}],["expiration",{"_index":2290,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["expired",{"_index":1818,"title":{},"body":{"injectables/OTPService.html":{},"interfaces/RequestWithUser.html":{}}}],["expires",{"_index":2262,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["expiresat",{"_index":1765,"title":{},"body":{"entities/OTP.html":{},"injectables/OTPService.html":{}}}],["expiresat.setminutes(expiresat.getminutes",{"_index":1810,"title":{},"body":{"injectables/OTPService.html":{}}}],["expiresin",{"_index":882,"title":{},"body":{"modules/AuthModule.html":{}}}],["expiry",{"_index":1716,"title":{},"body":{"injectables/MinioService-1.html":{},"injectables/OTPService.html":{}}}],["expiryminutes",{"_index":1807,"title":{},"body":{"injectables/OTPService.html":{}}}],["export",{"_index":99,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"classes/ResetPasswordDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{}}}],["exports",{"_index":217,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":1182,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":1169,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["extends",{"_index":13,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"interfaces/AuthenticatedUser.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateUserDto.html":{}}}],["extension",{"_index":72,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["extract",{"_index":2122,"title":{},"body":{"controllers/QueuesController.html":{}}}],["extractjwt",{"_index":889,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":903,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["factor",{"_index":2258,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["failed",{"_index":1452,"title":{},"body":{"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"interfaces/RequestWithUser.html":{}}}],["failedattempts",{"_index":1420,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["false",{"_index":266,"title":{},"body":{"injectables/AnnouncementService.html":{},"modules/AppModule.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"interfaces/AuthenticatedUser.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"entities/QueueDetails.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["false})@isoptional()@isenum(applicationstatus",{"_index":2517,"title":{},"body":{"classes/UpdateDocumentApplicationDto.html":{}}}],["false})@isoptional()@isnumber",{"_index":1999,"title":{},"body":{"classes/QueueNotificationDto.html":{}}}],["false})@isoptional()@isstring",{"_index":975,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"classes/QueueNotificationDto.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["false})@joincolumn({name",{"_index":470,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["fast",{"_index":2817,"title":{},"body":{"index.html":{}}}],["features",{"_index":2261,"title":{},"body":{"interfaces/RequestWithUser.html":{},"index.html":{}}}],["fetching",{"_index":2149,"title":{},"body":{"controllers/QueuesController.html":{}}}],["few",{"_index":2819,"title":{},"body":{"index.html":{}}}],["field",{"_index":2180,"title":{},"body":{"classes/RegisterDto.html":{}}}],["fields",{"_index":1342,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"classes/ResetPasswordDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{}}}],["file.application",{"_index":1067,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["file.buffer",{"_index":1690,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["file.entity",{"_index":1091,"title":{},"body":{"entities/DocumentApplication.html":{},"modules/DocumentApplicationsModule.html":{}}}],["file.entity.ts",{"_index":1255,"title":{},"body":{"entities/DocumentFile.html":{},"coverage.html":{}}}],["file.entity.ts:17",{"_index":1274,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.entity.ts:20",{"_index":1263,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.entity.ts:23",{"_index":1268,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.entity.ts:26",{"_index":1273,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.entity.ts:29",{"_index":1271,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.entity.ts:32",{"_index":1276,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.entity.ts:35",{"_index":1266,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.entity.ts:38",{"_index":1278,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.entity.ts:45",{"_index":1262,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file.mimetype",{"_index":1693,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["file.mimetype.match(/\\/(jpg|jpeg|png|pdf",{"_index":1201,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["file.originalname",{"_index":1695,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["file.size",{"_index":1691,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["file.size.tostring",{"_index":1749,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["file_name",{"_index":1267,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file_size",{"_index":1269,"title":{},"body":{"entities/DocumentFile.html":{}}}],["file_type",{"_index":1272,"title":{},"body":{"entities/DocumentFile.html":{}}}],["filefilter",{"_index":1198,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["fileid",{"_index":1156,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["fileinterceptor",{"_index":1180,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["fileinterceptor('file",{"_index":1192,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["filename",{"_index":1256,"title":{},"body":{"entities/DocumentFile.html":{}}}],["files",{"_index":1056,"title":{},"body":{"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/MinioService-1.html":{}}}],["files.push(obj",{"_index":1760,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["filesize",{"_index":1194,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{}}}],["filetype",{"_index":1257,"title":{},"body":{"entities/DocumentFile.html":{}}}],["filter",{"_index":1313,"title":{},"body":{"interfaces/FindAllOptions.html":{},"classes/UserQueryDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["finally",{"_index":2077,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["find",{"_index":1625,"title":{},"body":{"interfaces/LockoutData.html":{},"controllers/QueuesController.html":{},"injectables/RolesService.html":{}}}],["findall",{"_index":155,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findall(@query('includeuser",{"_index":633,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["findall(includeuser",{"_index":556,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["findall(options",{"_index":737,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["findall(query",{"_index":2620,"title":{},"body":{"controllers/UsersController.html":{}}}],["findall(status",{"_index":1127,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["findallbyuser",{"_index":726,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["findallbyuser(userid",{"_index":740,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["findalloptions",{"_index":1281,"title":{"interfaces/FindAllOptions.html":{}},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["findbyappointmentnumber",{"_index":539,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["findbyappointmentnumber(@param('number",{"_index":659,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["findbyappointmentnumber(appointmentnumber",{"_index":564,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["findbyemail",{"_index":2672,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyemail(email",{"_index":1387,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["findbyids",{"_index":2501,"title":{},"body":{"injectables/RolesService.html":{}}}],["findbyname",{"_index":2482,"title":{},"body":{"injectables/RolesService.html":{}}}],["findbyname(name",{"_index":2489,"title":{},"body":{"injectables/RolesService.html":{}}}],["findbyusername",{"_index":2673,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyusername(username",{"_index":1388,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["finding",{"_index":1627,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["findone",{"_index":156,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone(@param('id",{"_index":203,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/RolesController.html":{}}}],["findone(id",{"_index":166,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["finduserappointments",{"_index":540,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["finduserappointments(@user",{"_index":637,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["finduserappointments(user",{"_index":570,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["finduserbyemail(email",{"_index":1626,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["first",{"_index":62,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"interfaces/LockoutData.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["first_name",{"_index":1869,"title":{},"body":{"entities/QueueDetails.html":{},"entities/User.html":{}}}],["firstname",{"_index":23,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Appointment.html":{},"classes/AppointmentNotificationDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"entities/QueueDetails.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["fix",{"_index":1553,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["fixed",{"_index":2035,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["fk_appointment_user",{"_index":526,"title":{},"body":{"entities/Appointment.html":{}}}],["fk_current_queue",{"_index":926,"title":{},"body":{"entities/Counter.html":{}}}],["fk_queue_id",{"_index":1882,"title":{},"body":{"entities/QueueDetails.html":{}}}],["fk_user_id",{"_index":1887,"title":{},"body":{"entities/QueueDetails.html":{}}}],["flag",{"_index":2079,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["flatten",{"_index":2125,"title":{},"body":{"controllers/QueuesController.html":{}}}],["fns",{"_index":759,"title":{},"body":{"injectables/AppointmentService.html":{},"dependencies.html":{}}}],["focus",{"_index":2826,"title":{},"body":{"index.html":{}}}],["follow",{"_index":2854,"title":{},"body":{"index.html":{}}}],["forbidden",{"_index":2235,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["foreign",{"_index":357,"title":{},"body":{"modules/AppModule.html":{}}}],["foreign_key_checks=0",{"_index":361,"title":{},"body":{"modules/AppModule.html":{}}}],["foreign_key_checks=1",{"_index":372,"title":{},"body":{"modules/AppModule.html":{}}}],["foreignkeyconstraintname",{"_index":525,"title":{},"body":{"entities/Appointment.html":{},"entities/Counter.html":{},"entities/QueueDetails.html":{}}}],["forgot",{"_index":1476,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["forgotpassword(@body",{"_index":2311,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["forgotpassworddto",{"_index":425,"title":{"classes/ForgotPasswordDto.html":{}},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{}}}],["form",{"_index":981,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["form_data",{"_index":1069,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["format",{"_index":393,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{}}}],["format(today",{"_index":844,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["formats",{"_index":2432,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["formatted",{"_index":2304,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["formdata",{"_index":972,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{}}}],["forwardref",{"_index":1940,"title":{},"body":{"classes/QueueGateway.html":{},"modules/QueueModule.html":{}}}],["found",{"_index":262,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["found'})@apiresponse({status",{"_index":2623,"title":{},"body":{"controllers/UsersController.html":{}}}],["framework",{"_index":2781,"title":{},"body":{"index.html":{}}}],["frontend",{"_index":2107,"title":{},"body":{"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["full",{"_index":1034,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"classes/RegisterDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["fullname",{"_index":1390,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["fully",{"_index":1618,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["function",{"_index":2710,"title":{},"body":{"coverage.html":{}}}],["functionality",{"_index":2355,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["functions",{"_index":2774,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":2822,"title":{},"body":{"index.html":{}}}],["general",{"_index":2067,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["generate",{"_index":814,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/OTPService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["generatealltimeslots",{"_index":727,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["generated",{"_index":1036,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{}}}],["generateotp",{"_index":1779,"title":{},"body":{"injectables/OTPService.html":{}}}],["generateotp(email",{"_index":1785,"title":{},"body":{"injectables/OTPService.html":{}}}],["generates",{"_index":2254,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["generating",{"_index":1751,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["generation",{"_index":449,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["get(':id",{"_index":167,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["get(':id')@apioperation({summary",{"_index":568,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{}}}],["get(':id')@roles('admin",{"_index":2457,"title":{},"body":{"controllers/RolesController.html":{}}}],["get(':id')@useguards(rolesguard)@roles('admin",{"_index":2622,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':id/files",{"_index":1224,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get(':id/files')@apioperation({summary",{"_index":1146,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get(':id/files/all",{"_index":1228,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get(':id/files/all')@apioperation({summary",{"_index":1133,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get('admin/all",{"_index":1242,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get('admin/all')@roles('admin",{"_index":1142,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get('admin/stats",{"_index":1244,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get('admin/stats')@roles('admin",{"_index":1157,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get('available",{"_index":574,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["get('by",{"_index":565,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["get('date",{"_index":584,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["get('files/:fileid/download",{"_index":1231,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get('files/:fileid/download')@apioperation({summary",{"_index":1152,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get('health",{"_index":274,"title":{},"body":{"controllers/AppController.html":{}}}],["get('mine",{"_index":636,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["get('mine')@apioperation({summary",{"_index":571,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["get('minio_use_ssl",{"_index":1730,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["get('profile",{"_index":2218,"title":{},"body":{"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["get('profile')@apioperation({summary",{"_index":2626,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('recent",{"_index":170,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["get('stats",{"_index":640,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/UsersController.html":{}}}],["get('stats')@useguards(jwtauthguard",{"_index":588,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["get('stats')@useguards(rolesguard)@roles('admin",{"_index":2629,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('user/:userid",{"_index":2097,"title":{},"body":{"controllers/QueuesController.html":{},"controllers/RolesController.html":{}}}],["get('user/:userid')@roles('admin",{"_index":2460,"title":{},"body":{"controllers/RolesController.html":{}}}],["get('walk",{"_index":2099,"title":{},"body":{"controllers/QueuesController.html":{}}}],["get()@apioperation({summary",{"_index":1128,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["get()@roles('admin",{"_index":2455,"title":{},"body":{"controllers/RolesController.html":{}}}],["get()@useguards(rolesguard)@roles('admin",{"_index":557,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/UsersController.html":{}}}],["getaccountlockout(identifier",{"_index":1434,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["getallapplicationfiles",{"_index":1118,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["getallapplicationfiles(id",{"_index":1132,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["getallapplications",{"_index":1119,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["getapplicationfiles",{"_index":1120,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["getapplicationfiles(id",{"_index":1145,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["getappointmentsbydate",{"_index":728,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["getappointmentsbydate(date",{"_index":745,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["getappointmentsbydaterange",{"_index":729,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["getappointmentsbydaterange(startdate",{"_index":747,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["getappointmentsstats",{"_index":730,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["getavailableslots",{"_index":541,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["getavailableslots(@query('date",{"_index":654,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["getavailableslots(date",{"_index":573,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["getbydate",{"_index":542,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["getbydate(@query('date",{"_index":643,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["getbydate(date",{"_index":577,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["getbydaterange",{"_index":543,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["getbydaterange(startdate",{"_index":582,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["getdownloadurl",{"_index":1656,"title":{},"body":{"injectables/MinioService.html":{}}}],["getdownloadurl(objectname",{"_index":1662,"title":{},"body":{"injectables/MinioService.html":{}}}],["getfiledownloadurl",{"_index":1121,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["getfiledownloadurl(fileid",{"_index":1151,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["getfileinfo",{"_index":1706,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["getfileinfo(objectname",{"_index":1713,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["gethello",{"_index":271,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getpresignedurl",{"_index":1707,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["getpresignedurl(objectname",{"_index":1715,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["getprofile",{"_index":2613,"title":{},"body":{"controllers/UsersController.html":{}}}],["getprofile(@request",{"_index":2219,"title":{},"body":{"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["getprofile(req",{"_index":2625,"title":{},"body":{"controllers/UsersController.html":{}}}],["getprofile(userid",{"_index":1525,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["getqueuebyid",{"_index":2091,"title":{},"body":{"controllers/QueuesController.html":{}}}],["getqueuebyid(@param('id",{"_index":2156,"title":{},"body":{"controllers/QueuesController.html":{}}}],["getqueuebyid(id",{"_index":2094,"title":{},"body":{"controllers/QueuesController.html":{}}}],["getrawmany",{"_index":1379,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["getrecentannouncements",{"_index":157,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{}}}],["getrecentannouncements(@query('limit",{"_index":201,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["getrecentannouncements(limit",{"_index":169,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{}}}],["getstats",{"_index":544,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getting",{"_index":824,"title":{"index.html":{}},"body":{"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/MinioService-1.html":{}}}],["gettodaypendingcount",{"_index":2008,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["getuserqueues",{"_index":2092,"title":{},"body":{"controllers/QueuesController.html":{}}}],["getuserqueues(@param('userid",{"_index":2150,"title":{},"body":{"controllers/QueuesController.html":{}}}],["getuserqueues(userid",{"_index":2096,"title":{},"body":{"controllers/QueuesController.html":{}}}],["getuserroles",{"_index":2454,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["getuserroles(@param('userid",{"_index":2466,"title":{},"body":{"controllers/RolesController.html":{}}}],["getuserroles(userid",{"_index":2459,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["getwalkinqueues",{"_index":2093,"title":{},"body":{"controllers/QueuesController.html":{}}}],["global",{"_index":1971,"title":{},"body":{"classes/QueueGateway.html":{}}}],["gradient",{"_index":2269,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["graph",{"_index":2846,"title":{},"body":{"index.html":{}}}],["green",{"_index":2338,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["groupby('role.name",{"_index":1378,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["grow",{"_index":2864,"title":{},"body":{"index.html":{}}}],["guaranteed",{"_index":2351,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["guard",{"_index":2241,"title":{"guards/RolesGuard.html":{}},"body":{"interfaces/RequestWithUser.html":{},"coverage.html":{},"overview.html":{}}}],["guards",{"_index":2468,"title":{},"body":{"guards/RolesGuard.html":{}}}],["guards/jwt",{"_index":2183,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["guards/roles.guard",{"_index":2185,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["handle",{"_index":1349,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["handleconnection",{"_index":1897,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handleconnection(client",{"_index":1911,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handledailyqueuereset",{"_index":2009,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["handledisconnect",{"_index":1898,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handledisconnect(client",{"_index":1916,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlegetqueueposition",{"_index":1899,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlegetqueueposition(client",{"_index":1918,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoincounter",{"_index":1900,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoincounter(client",{"_index":1921,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoinqueue",{"_index":1901,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoinqueue(client",{"_index":1925,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoinqueueupdates",{"_index":1902,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handlejoinqueueupdates(client",{"_index":1928,"title":{},"body":{"classes/QueueGateway.html":{}}}],["handling",{"_index":2044,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["hands",{"_index":2840,"title":{},"body":{"index.html":{}}}],["handy",{"_index":2831,"title":{},"body":{"index.html":{}}}],["happening",{"_index":2246,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["hash",{"_index":1481,"title":{},"body":{"interfaces/LockoutData.html":{},"controllers/UsersController.html":{}}}],["hashed",{"_index":1395,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["hashedpassword",{"_index":1504,"title":{},"body":{"interfaces/LockoutData.html":{},"controllers/UsersController.html":{}}}],["hashing",{"_index":2316,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["haslowercase",{"_index":1640,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["hasnumbers",{"_index":1641,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["hasroleassigned",{"_index":1612,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["hasspecialchars",{"_index":1642,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["hasuppercase",{"_index":1638,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["healthcheck",{"_index":272,"title":{},"body":{"controllers/AppController.html":{}}}],["hello",{"_index":377,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":2844,"title":{},"body":{"index.html":{}}}],["here",{"_index":1590,"title":{},"body":{"interfaces/LockoutData.html":{},"index.html":{}}}],["history",{"_index":1078,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["history.application",{"_index":1079,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["history.entity",{"_index":1092,"title":{},"body":{"entities/DocumentApplication.html":{},"modules/DocumentApplicationsModule.html":{}}}],["history.entity.ts",{"_index":459,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"coverage.html":{}}}],["history.entity.ts:17",{"_index":481,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["history.entity.ts:20",{"_index":475,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["history.entity.ts:23",{"_index":485,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["history.entity.ts:26",{"_index":483,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["history.entity.ts:29",{"_index":487,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["history.entity.ts:32",{"_index":480,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["history.entity.ts:35",{"_index":478,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["history.entity.ts:43",{"_index":472,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["holder",{"_index":705,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"interfaces/RequestWithUser.html":{}}}],["host",{"_index":321,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["hour",{"_index":857,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["hours",{"_index":2370,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["http://localhost:5173",{"_index":1944,"title":{},"body":{"classes/QueueGateway.html":{}}}],["httpcode",{"_index":600,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["httpcode(httpstatus.no_content",{"_index":680,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["https://nestjs.com",{"_index":2877,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":601,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["id",{"_index":36,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"entities/OTP.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{}}}],["identifier",{"_index":1451,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["identifier.tolowercase",{"_index":1435,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["ids",{"_index":42,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["ignoreexpiration",{"_index":904,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["iii",{"_index":75,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["iii)'})@isoptional()@isstring",{"_index":1040,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ildefonso",{"_index":53,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["image",{"_index":118,"title":{},"body":{"entities/Announcement.html":{},"classes/CreateAnnouncementDto.html":{}}}],["implementation",{"_index":2332,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["implements",{"_index":1724,"title":{},"body":{"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["import",{"_index":87,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"classes/ResetPasswordDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{}}}],["imports",{"_index":229,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}}}],["in(roleids",{"_index":2503,"title":{},"body":{"injectables/RolesService.html":{}}}],["inactive",{"_index":936,"title":{},"body":{"entities/Counter.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"miscellaneous/enumerations.html":{}}}],["inactiveusers",{"_index":1295,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["include",{"_index":1219,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["included",{"_index":2342,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["includeuser",{"_index":562,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{}}}],["including",{"_index":2231,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["index",{"_index":15,"title":{"index.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"classes/ResetPasswordDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["index(['applicationid",{"_index":493,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentFile.html":{}}}],["index(['applicationtype",{"_index":1111,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["index(['changedat",{"_index":494,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["index(['createdat",{"_index":1113,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["index(['documentcategory",{"_index":1280,"title":{},"body":{"entities/DocumentFile.html":{}}}],["index(['status",{"_index":1112,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["index(['userid",{"_index":1110,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"classes/ResetPasswordDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{},"miscellaneous/enumerations.html":{}}}],["information",{"_index":97,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"index.html":{}}}],["infrastructure",{"_index":2828,"title":{},"body":{"index.html":{}}}],["inherited",{"_index":55,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["initial",{"_index":985,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["initiated",{"_index":2308,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["initiates",{"_index":2296,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["inject",{"_index":318,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/QueueGateway.html":{}}}],["inject(forwardref",{"_index":1951,"title":{},"body":{"classes/QueueGateway.html":{}}}],["injectable",{"_index":231,"title":{"injectables/AnnouncementService.html":{},"injectables/AppService.html":{},"injectables/AppointmentService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"injectables/QueueSchedulerService.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AnnouncementService.html":{},"injectables/AppService.html":{},"injectables/AppointmentService.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":232,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppService.html":{},"injectables/AppointmentService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"injectables/QueueSchedulerService.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":248,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/OTPService.html":{},"injectables/QueueSchedulerService.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["injectrepository(announcement",{"_index":249,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["injectrepository(appointment",{"_index":760,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["injectrepository(otp",{"_index":1792,"title":{},"body":{"injectables/OTPService.html":{}}}],["injectrepository(queue",{"_index":2030,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["injectrepository(role",{"_index":2493,"title":{},"body":{"injectables/RolesService.html":{}}}],["injectrepository(user",{"_index":1303,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["input",{"_index":2233,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["install",{"_index":2821,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":2791,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":1568,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["instructions",{"_index":2305,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["insufficient",{"_index":2236,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["integration",{"_index":2326,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["interact",{"_index":2847,"title":{},"body":{"index.html":{}}}],["interface",{"_index":884,"title":{"interfaces/AuthenticatedUser.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"interfaces/UserStats.html":{}},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["interfaces",{"_index":885,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"interfaces/UserStats.html":{},"overview.html":{}}}],["internally",{"_index":2303,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["intervals",{"_index":819,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["invalid",{"_index":675,"title":{},"body":{"controllers/AppointmentController.html":{},"interfaces/RequestWithUser.html":{}}}],["invalidate",{"_index":1793,"title":{},"body":{"injectables/OTPService.html":{}}}],["invalidated",{"_index":2264,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["inversejoincolumn",{"_index":2558,"title":{},"body":{"entities/User.html":{}}}],["is_active",{"_index":2547,"title":{},"body":{"entities/User.html":{}}}],["is_guest",{"_index":1872,"title":{},"body":{"entities/QueueDetails.html":{}}}],["isactive",{"_index":119,"title":{},"body":{"entities/Announcement.html":{},"injectables/AnnouncementService.html":{},"classes/CreateAnnouncementDto.html":{},"interfaces/FindAllOptions.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["isarray",{"_index":92,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["isauthorized",{"_index":1581,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["isboolean",{"_index":949,"title":{},"body":{"classes/CreateAnnouncementDto.html":{},"classes/CreateQueueDto.html":{},"classes/UpdateUserStatusDto.html":{}}}],["isboolean()@isoptional",{"_index":1008,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["isdatestring",{"_index":722,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"classes/CreateAppointmentDto.html":{}}}],["isemail",{"_index":88,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/ApplicationNotificationDto.html":{},"classes/AppointmentNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/QueueNotificationDto.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateUserDto.html":{},"classes/VerifyOtpDto.html":{}}}],["isenum",{"_index":966,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{}}}],["isenum(applicationstatus",{"_index":2521,"title":{},"body":{"classes/UpdateDocumentApplicationDto.html":{}}}],["isenum(applicationtype",{"_index":991,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["isenum(appointmentstatus",{"_index":967,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["isenum(queuestatus",{"_index":2527,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["isenum(queuestatus)@isoptional",{"_index":2525,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["isglobal",{"_index":316,"title":{},"body":{"modules/AppModule.html":{}}}],["isguest",{"_index":501,"title":{},"body":{"entities/Appointment.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{}}}],["islocked",{"_index":1454,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["isnan(number(payload.sub",{"_index":910,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["isnan(queueid",{"_index":2158,"title":{},"body":{"controllers/QueuesController.html":{}}}],["isnan(userid",{"_index":1526,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["isnotempty",{"_index":721,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["isnotempty()@isdatestring",{"_index":954,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["isnotempty()@isstring",{"_index":952,"title":{},"body":{"classes/CreateAppointmentDto.html":{}}}],["isnumber",{"_index":91,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/QueueNotificationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{}}}],["isobject",{"_index":988,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["isolation",{"_index":2291,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["isoptional",{"_index":89,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/ApplicationNotificationDto.html":{},"classes/AppointmentNotificationDto.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/QueueNotificationDto.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"classes/VerifyOtpDto.html":{}}}],["isoptional()@isboolean",{"_index":946,"title":{},"body":{"classes/CreateAnnouncementDto.html":{}}}],["isoptional()@isenum(appointmentstatus",{"_index":963,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"classes/UpdateAppointmentDto.html":{}}}],["isoptional()@isstring",{"_index":941,"title":{},"body":{"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{}}}],["isotpvalid",{"_index":2212,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["ispasswordvalid",{"_index":1484,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["isprivileged",{"_index":1226,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["isresetinprogress",{"_index":2007,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["isstring",{"_index":90,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/ApplicationNotificationDto.html":{},"classes/AppointmentNotificationDto.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{},"classes/QueueNotificationDto.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"classes/VerifyOtpDto.html":{}}}],["isstring()@isnotempty",{"_index":943,"title":{},"body":{"classes/CreateAnnouncementDto.html":{},"classes/CreateQueueDto.html":{}}}],["isstring()@isoptional",{"_index":1004,"title":{},"body":{"classes/CreateQueueDto.html":{},"classes/UpdateQueueDto.html":{}}}],["isvalid",{"_index":758,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["isvalid(date",{"_index":764,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["isvalid(parseddate",{"_index":806,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["isvalidemail(email",{"_index":1521,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["items",{"_index":1826,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UserQueryDto.html":{}}}],["job",{"_index":2857,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":2859,"title":{},"body":{"index.html":{}}}],["john",{"_index":103,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{}}}],["john'})@isstring()@isnotempty",{"_index":2167,"title":{},"body":{"classes/RegisterDto.html":{}}}],["john'})@isstring()@isoptional",{"_index":64,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["john.doe@example.com",{"_index":1025,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["john_doe",{"_index":101,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["john_doe'})@isstring()@isnotempty",{"_index":2178,"title":{},"body":{"classes/RegisterDto.html":{}}}],["john_doe'})@isstring()@isoptional",{"_index":85,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["johndoe",{"_index":1048,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["join",{"_index":2870,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":489,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["joined",{"_index":1964,"title":{},"body":{"classes/QueueGateway.html":{}}}],["jointable",{"_index":2562,"title":{},"body":{"entities/User.html":{}}}],["jpeg",{"_index":1202,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["jr",{"_index":74,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["jr.'})@isstring()@isoptional",{"_index":76,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["json",{"_index":1070,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["juan",{"_index":992,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["jwt",{"_index":877,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":873,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{}}}],["jwtauthguard",{"_index":605,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":902,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":867,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":878,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":892,"title":{"interfaces/JwtPayload.html":{}},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["jwtservice",{"_index":1414,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["jwtstrategy",{"_index":864,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":2874,"title":{},"body":{"index.html":{}}}],["keep",{"_index":2565,"title":{},"body":{"entities/User.html":{}}}],["key",{"_index":358,"title":{},"body":{"modules/AppModule.html":{},"interfaces/LockoutData.html":{},"injectables/OTPService.html":{},"index.html":{}}}],["last",{"_index":66,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["last_modified_by",{"_index":1074,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["last_name",{"_index":1874,"title":{},"body":{"entities/QueueDetails.html":{},"entities/User.html":{}}}],["lastattempt",{"_index":1412,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["lastmodifiedby",{"_index":1057,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["lastname",{"_index":24,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Appointment.html":{},"classes/AppointmentNotificationDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"entities/QueueDetails.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["lastname}${nameextension",{"_index":1391,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["latest",{"_index":1147,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["learn",{"_index":2833,"title":{},"body":{"index.html":{}}}],["leftjoin('user.roles",{"_index":1375,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["leftjoinandselect('user.defaultrole",{"_index":1309,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["leftjoinandselect('user.roles",{"_index":1311,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["legacy",{"_index":2104,"title":{},"body":{"controllers/QueuesController.html":{}}}],["legend",{"_index":213,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":127,"title":{},"body":{"entities/Announcement.html":{},"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"classes/ForgotPasswordDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["length(6",{"_index":419,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["length(8",{"_index":438,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["lessthan",{"_index":1789,"title":{},"body":{"injectables/OTPService.html":{}}}],["lessthan(new",{"_index":1822,"title":{},"body":{"injectables/OTPService.html":{}}}],["letter",{"_index":1639,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["lgu",{"_index":2217,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["license",{"_index":1097,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"properties.html":{}}}],["licensed",{"_index":2862,"title":{},"body":{"index.html":{}}}],["limit",{"_index":173,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/UserQueryDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["limiting",{"_index":2265,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["limits",{"_index":1193,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["line",{"_index":1428,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["linkedin",{"_index":2856,"title":{},"body":{"index.html":{}}}],["listfiles",{"_index":1708,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["listfiles(prefix",{"_index":1718,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["literal",{"_index":695,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser-2.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{}}}],["localhost",{"_index":1674,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"miscellaneous/variables.html":{}}}],["lock",{"_index":1441,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["locked",{"_index":1450,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["lockeduntil",{"_index":1413,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["lockout",{"_index":1462,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["lockoutdata",{"_index":1409,"title":{"interfaces/LockoutData.html":{}},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["lockoutdata.attempts",{"_index":2402,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["lockoutdata.lockeduntil",{"_index":1469,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["lockoutdata.lockeduntil.gettime",{"_index":1470,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["lockoutdata?.attempts",{"_index":2403,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["lockoutdata?.lockeduntil",{"_index":1468,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["log",{"_index":1212,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"injectables/QueueSchedulerService.html":{}}}],["logdailystatistics",{"_index":2010,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["logdailystatistics(startofday",{"_index":2022,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["logger",{"_index":338,"title":{},"body":{"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["logger(appointmentcontroller.name",{"_index":624,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["logger(appointmentservice.name",{"_index":754,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["logger(authcontroller.name",{"_index":2195,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["logger(authservice.name",{"_index":1419,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["logger(documentapplicationscontroller.name",{"_index":1189,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["logger(minioservice.name",{"_index":1666,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["logger(queuegateway.name",{"_index":1908,"title":{},"body":{"classes/QueueGateway.html":{}}}],["logger(queueschedulerservice.name",{"_index":2027,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["logger(queuescontroller.name",{"_index":2102,"title":{},"body":{"controllers/QueuesController.html":{}}}],["logger(userscontroller.name",{"_index":2646,"title":{},"body":{"controllers/UsersController.html":{}}}],["logger(usersservice.name",{"_index":1302,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["logging",{"_index":336,"title":{},"body":{"modules/AppModule.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"miscellaneous/variables.html":{}}}],["login",{"_index":1645,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{}}}],["login(@body",{"_index":2201,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["login(logindto",{"_index":1465,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["logindto",{"_index":1415,"title":{"classes/LoginDto.html":{}},"body":{"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["logindto.emailorusername",{"_index":1423,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["logindto.emailorusername.tolowercase",{"_index":1466,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["logindto.password",{"_index":1483,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["long",{"_index":439,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["long'})@matches(/^(?=.*[a",{"_index":2438,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["looking",{"_index":2808,"title":{},"body":{"index.html":{}}}],["loop",{"_index":2853,"title":{},"body":{"index.html":{}}}],["loss",{"_index":343,"title":{},"body":{"modules/AppModule.html":{}}}],["lowercase",{"_index":444,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["main",{"_index":50,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["maintain",{"_index":1513,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["make",{"_index":2239,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["makes",{"_index":2815,"title":{},"body":{"index.html":{}}}],["managing",{"_index":2827,"title":{},"body":{"index.html":{}}}],["manila",{"_index":999,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["manual",{"_index":2086,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["manualdailyreset",{"_index":2011,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["manytomany",{"_index":2450,"title":{},"body":{"entities/Role.html":{},"entities/User.html":{}}}],["manytomany(undefined",{"_index":2447,"title":{},"body":{"entities/Role.html":{}}}],["manytomany(undefined)@jointable({name",{"_index":2556,"title":{},"body":{"entities/User.html":{}}}],["manytoone",{"_index":488,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["manytoone(undefined",{"_index":466,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["map",{"_index":1421,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["mark",{"_index":1796,"title":{},"body":{"injectables/OTPService.html":{},"injectables/QueueSchedulerService.html":{}}}],["marked",{"_index":2288,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["marks",{"_index":2286,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["marriage",{"_index":1095,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["marriage_certificate",{"_index":1094,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["marriage_license",{"_index":1096,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["match",{"_index":1949,"title":{},"body":{"classes/QueueGateway.html":{}}}],["matches",{"_index":405,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["matches(/^(?=.*[a",{"_index":440,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["matches(/^[0",{"_index":422,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["matching",{"_index":111,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"classes/ResetPasswordDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.ceil",{"_index":1456,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["math.ceil(timeremaining",{"_index":1472,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["math.ceil(total",{"_index":1331,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["mau",{"_index":2811,"title":{},"body":{"index.html":{}}}],["maxlength",{"_index":415,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["meet",{"_index":430,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["meets",{"_index":2315,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["message",{"_index":395,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/LockoutData.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{}}}],["metadata",{"_index":1746,"title":{},"body":{"injectables/MinioService-1.html":{},"dependencies.html":{}}}],["method",{"_index":1334,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["methods",{"_index":153,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["middle",{"_index":69,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["middle_initial",{"_index":1876,"title":{},"body":{"entities/QueueDetails.html":{}}}],["middle_name",{"_index":2550,"title":{},"body":{"entities/User.html":{}}}],["middleinitial",{"_index":502,"title":{},"body":{"entities/Appointment.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"controllers/QueuesController.html":{}}}],["middlename",{"_index":25,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["migrationsrun",{"_index":347,"title":{},"body":{"modules/AppModule.html":{}}}],["miguel",{"_index":1031,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UserResponseDto.html":{}}}],["min",{"_index":78,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{}}}],["min(1",{"_index":2582,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["minimum",{"_index":1042,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UserQueryDto.html":{}}}],["minio",{"_index":1670,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"dependencies.html":{}}}],["minio.client",{"_index":1668,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["minio_access_key",{"_index":1733,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["minio_bucket_name",{"_index":1735,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["minio_endpoint",{"_index":1726,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["minio_object_name",{"_index":1275,"title":{},"body":{"entities/DocumentFile.html":{}}}],["minio_secret_key",{"_index":1734,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["minioadmin",{"_index":1681,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["minioadmin123",{"_index":1683,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["minioclient",{"_index":1654,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["minioobjectname",{"_index":1258,"title":{},"body":{"entities/DocumentFile.html":{}}}],["minioservice",{"_index":1249,"title":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}},"body":{"modules/DocumentApplicationsModule.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"coverage.html":{},"overview.html":{}}}],["minlength",{"_index":82,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/ApplicationNotificationDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateUserDto.html":{},"classes/VerifyOtpDto.html":{}}}],["minlength(6",{"_index":1052,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(8",{"_index":102,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["minute",{"_index":858,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["minutes",{"_index":1443,"title":{},"body":{"interfaces/LockoutData.html":{},"injectables/OTPService.html":{},"classes/QueueNotificationDto.html":{},"interfaces/RequestWithUser.html":{}}}],["minutesremaining",{"_index":1471,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["miscellaneous",{"_index":2768,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":2276,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["mit",{"_index":2861,"title":{},"body":{"index.html":{}}}],["mm",{"_index":846,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["mode",{"_index":2329,"title":{},"body":{"interfaces/RequestWithUser.html":{},"index.html":{}}}],["module",{"_index":209,"title":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"interfaces/FindAllOptions.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["modules",{"_index":211,"title":{"modules.html":{}},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/announcement/announcement.module",{"_index":307,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/appointment/appointment.module",{"_index":306,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/document",{"_index":308,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/queue/queue.module",{"_index":305,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":2807,"title":{},"body":{"index.html":{}}}],["multer",{"_index":2749,"title":{},"body":{"dependencies.html":{}}}],["multiple",{"_index":1474,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["mysql",{"_index":320,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["mysql2",{"_index":2751,"title":{},"body":{"dependencies.html":{}}}],["myśliwiec",{"_index":2875,"title":{},"body":{"index.html":{}}}],["name",{"_index":63,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["name'})@isstring()@isnotempty",{"_index":1028,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["name_extension",{"_index":2553,"title":{},"body":{"entities/User.html":{}}}],["namecomponents",{"_index":1541,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["namecomponents.firstname",{"_index":1547,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["namecomponents.lastname",{"_index":1549,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["namecomponents.middlename",{"_index":1548,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["namecomponents.nameextension",{"_index":1550,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["nameextension",{"_index":26,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["namespace",{"_index":1948,"title":{},"body":{"classes/QueueGateway.html":{}}}],["need",{"_index":1179,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"modules/QueueModule.html":{},"index.html":{}}}],["nest",{"_index":2786,"title":{},"body":{"index.html":{}}}],["nested",{"_index":2123,"title":{},"body":{"controllers/QueuesController.html":{}}}],["nestframework",{"_index":2879,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":896,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"index.html":{}}}],["nestjs/common",{"_index":188,"title":{},"body":{"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"interfaces/FindAllOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":296,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":2422,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":868,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/LockoutData.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":2511,"title":{},"body":{"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["nestjs/passport",{"_index":870,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1181,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"dependencies.html":{}}}],["nestjs/schedule",{"_index":298,"title":{},"body":{"modules/AppModule.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":95,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/ApplicationNotificationDto.html":{},"controllers/AppointmentController.html":{},"classes/AppointmentNotificationDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentApplicationsController.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/QueueNotificationDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"classes/VerifyOtpDto.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":226,"title":{},"body":{"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"injectables/AppointmentService.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/OTPService.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":1937,"title":{},"body":{"classes/QueueGateway.html":{},"dependencies.html":{}}}],["new",{"_index":260,"title":{},"body":{"injectables/AnnouncementService.html":{},"classes/ApplicationNotificationDto.html":{},"controllers/AppointmentController.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"injectables/RolesService.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{}}}],["new_status",{"_index":482,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["newdate",{"_index":784,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["newfirstname",{"_index":1355,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["newlastname",{"_index":1358,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["newlastname}${newnameextension",{"_index":1362,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["newmiddlename",{"_index":1356,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["newnameextension",{"_index":1359,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["newpassword",{"_index":446,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["newsecure123",{"_index":433,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["newstatus",{"_index":462,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"interfaces/RequestWithUser.html":{}}}],["newtime",{"_index":786,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["next",{"_index":1427,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["node.js",{"_index":2780,"title":{},"body":{"index.html":{}}}],["node_env=development",{"_index":2327,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["nodemailer",{"_index":2753,"title":{},"body":{"dependencies.html":{}}}],["notfoundexception",{"_index":247,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["notfoundexception(`announcement",{"_index":261,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["notfoundexception(`appointment",{"_index":779,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["notfoundexception(`role",{"_index":2496,"title":{},"body":{"injectables/RolesService.html":{}}}],["notfoundexception(`user",{"_index":1333,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["notification",{"_index":718,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{}}}],["notification.dto",{"_index":2191,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["notification.dto.ts",{"_index":692,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"classes/QueueNotificationDto.html":{},"coverage.html":{}}}],["notification.dto.ts:10",{"_index":1992,"title":{},"body":{"classes/QueueNotificationDto.html":{}}}],["notification.dto.ts:17",{"_index":707,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"classes/QueueNotificationDto.html":{}}}],["notification.dto.ts:25",{"_index":704,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"classes/QueueNotificationDto.html":{}}}],["notification.dto.ts:34",{"_index":720,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"classes/QueueNotificationDto.html":{}}}],["notification.dto.ts:42",{"_index":714,"title":{},"body":{"classes/AppointmentNotificationDto.html":{}}}],["notification.dto.ts:43",{"_index":1995,"title":{},"body":{"classes/QueueNotificationDto.html":{}}}],["notification.dto.ts:50",{"_index":711,"title":{},"body":{"classes/AppointmentNotificationDto.html":{}}}],["notification.dto.ts:52",{"_index":2002,"title":{},"body":{"classes/QueueNotificationDto.html":{}}}],["notification.dto.ts:57",{"_index":699,"title":{},"body":{"classes/AppointmentNotificationDto.html":{}}}],["notification.dto.ts:61",{"_index":1997,"title":{},"body":{"classes/QueueNotificationDto.html":{}}}],["notificationdto",{"_index":2346,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["notifications",{"_index":1222,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["notify",{"_index":2064,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["notifycounterupdate",{"_index":1903,"title":{},"body":{"classes/QueueGateway.html":{}}}],["notifycounterupdate(counterid",{"_index":1931,"title":{},"body":{"classes/QueueGateway.html":{}}}],["notifyqueueupdate",{"_index":1904,"title":{},"body":{"classes/QueueGateway.html":{}}}],["notifyqueueupdate(queueid",{"_index":1933,"title":{},"body":{"classes/QueueGateway.html":{}}}],["now",{"_index":2350,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["now_serving",{"_index":2001,"title":{},"body":{"classes/QueueNotificationDto.html":{},"interfaces/RequestWithUser.html":{}}}],["npm",{"_index":2790,"title":{},"body":{"index.html":{}}}],["null",{"_index":922,"title":{},"body":{"entities/Counter.html":{},"interfaces/LockoutData.html":{},"entities/QueueDetails.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["null/undefined",{"_index":2132,"title":{},"body":{"controllers/QueuesController.html":{}}}],["nullable",{"_index":135,"title":{},"body":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["number",{"_index":31,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"classes/QueueNotificationDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"entities/Role.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["number'})@isoptional()@isstring",{"_index":1019,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["number(payload.sub",{"_index":913,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["number(req.user.id",{"_index":2228,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["number(targetuserid",{"_index":2253,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["number/:number",{"_index":566,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["number/id",{"_index":700,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"interfaces/RequestWithUser.html":{}}}],["numbers",{"_index":424,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["obj",{"_index":1759,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["object",{"_index":697,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["object.assign(announcement",{"_index":264,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["object.assign(appointment",{"_index":790,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["object.values(appointmentstatus).includes(status",{"_index":674,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["object.values(appointmentstatus).join",{"_index":677,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["objectname",{"_index":1661,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["occurred",{"_index":1624,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["of(id",{"_index":1368,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["offer",{"_index":2858,"title":{},"body":{"index.html":{}}}],["official",{"_index":2812,"title":{},"body":{"index.html":{}}}],["ok",{"_index":280,"title":{},"body":{"controllers/AppController.html":{}}}],["old_status",{"_index":484,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["oldstatus",{"_index":463,"title":{},"body":{"entities/ApplicationStatusHistory.html":{}}}],["omit",{"_index":1300,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["on'].includes(usesslvalue",{"_index":1732,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["ondelete",{"_index":468,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentFile.html":{},"entities/QueueDetails.html":{}}}],["one",{"_index":676,"title":{},"body":{"controllers/AppointmentController.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["ones",{"_index":1365,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["onetomany",{"_index":1090,"title":{},"body":{"entities/DocumentApplication.html":{},"entities/Queue.html":{}}}],["onetomany(undefined",{"_index":1066,"title":{},"body":{"entities/DocumentApplication.html":{},"entities/Queue.html":{}}}],["onetoone",{"_index":933,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{}}}],["onetoone(undefined",{"_index":923,"title":{},"body":{"entities/Counter.html":{},"entities/Queue.html":{}}}],["ongatewayconnection",{"_index":1894,"title":{},"body":{"classes/QueueGateway.html":{}}}],["ongatewaydisconnect",{"_index":1895,"title":{},"body":{"classes/QueueGateway.html":{}}}],["only)'})@apiresponse({status",{"_index":1136,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["onmoduleinit",{"_index":1709,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["open",{"_index":2863,"title":{},"body":{"index.html":{}}}],["operation",{"_index":2357,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["operator",{"_index":2498,"title":{},"body":{"injectables/RolesService.html":{}}}],["optional",{"_index":17,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser-2.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/SendOtpDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{},"miscellaneous/functions.html":{}}}],["optional)'})@isoptional()@isstring",{"_index":1032,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["optionally",{"_index":2324,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["options",{"_index":739,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["options?.relations",{"_index":776,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["orange",{"_index":2336,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["order",{"_index":256,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["origin",{"_index":1942,"title":{},"body":{"classes/QueueGateway.html":{}}}],["original",{"_index":1694,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["otp",{"_index":311,"title":{"entities/OTP.html":{}},"body":{"modules/AppModule.html":{},"classes/ApplicationNotificationDto.html":{},"modules/AuthModule.html":{},"classes/ForgotPasswordDto.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{}}}],["otpentity",{"_index":1812,"title":{},"body":{"injectables/OTPService.html":{}}}],["otpentity.expiresat",{"_index":1819,"title":{},"body":{"injectables/OTPService.html":{}}}],["otpentity.verified",{"_index":1820,"title":{},"body":{"injectables/OTPService.html":{}}}],["otplength",{"_index":1798,"title":{},"body":{"injectables/OTPService.html":{}}}],["otprepository",{"_index":1783,"title":{},"body":{"injectables/OTPService.html":{}}}],["otps",{"_index":1794,"title":{},"body":{"injectables/OTPService.html":{},"interfaces/RequestWithUser.html":{}}}],["otpservice",{"_index":292,"title":{"injectables/OTPService.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/OTPService.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{},"overview.html":{}}}],["out",{"_index":223,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["outer",{"_index":1596,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["overrideconsoleinproduction",{"_index":2711,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["overview",{"_index":2883,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":663,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["package",{"_index":2729,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":1283,"title":{},"body":{"interfaces/FindAllOptions.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/UserQueryDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["pages",{"_index":1830,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{}}}],["paginatedusersresponsedto",{"_index":1823,"title":{"classes/PaginatedUsersResponseDto.html":{}},"body":{"classes/PaginatedUsersResponseDto.html":{},"coverage.html":{}}}],["param",{"_index":184,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["param('fileid",{"_index":1232,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["param('id",{"_index":205,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["param('userid",{"_index":2243,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["parameter",{"_index":645,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["parameters",{"_index":163,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["parse",{"_index":803,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["parseddate",{"_index":804,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["parseint",{"_index":1808,"title":{},"body":{"injectables/OTPService.html":{}}}],["parseint(id",{"_index":2157,"title":{},"body":{"controllers/QueuesController.html":{}}}],["parseint(process.env.db_port",{"_index":2894,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseint(process.env.minio_port",{"_index":1675,"title":{},"body":{"injectables/MinioService.html":{}}}],["parseint(stat.count",{"_index":1382,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["parseint(this.configservice.get('otp_length",{"_index":1799,"title":{},"body":{"injectables/OTPService.html":{}}}],["parseintpipe",{"_index":186,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["parseiso",{"_index":757,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["parseiso(createappointmentdto.appointmentdate",{"_index":763,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["parseiso(date",{"_index":805,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["part",{"_index":2850,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":2510,"title":{},"body":{"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["partialtype(createannouncementdto",{"_index":2509,"title":{},"body":{"classes/UpdateAnnouncementDto.html":{}}}],["partialtype(createappointmentdto",{"_index":2514,"title":{},"body":{"classes/UpdateAppointmentDto.html":{}}}],["parts",{"_index":1539,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["passport",{"_index":891,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":869,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":875,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":888,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":897,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["password",{"_index":27,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"modules/AppModule.html":{},"classes/ApplicationNotificationDto.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{},"miscellaneous/variables.html":{}}}],["password.length",{"_index":1636,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["password123",{"_index":81,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["password123'})@isstring()@isnotempty",{"_index":1650,"title":{},"body":{"classes/LoginDto.html":{}}}],["password_reset",{"_index":410,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"entities/OTP.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["passwords",{"_index":1322,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["passwordvalidation",{"_index":1498,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["passwordvalidation.isvalid",{"_index":1500,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["past",{"_index":772,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["patch",{"_index":183,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["patch(':id",{"_index":180,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["patch(':id')@apioperation({summary",{"_index":593,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{}}}],["patch(':id')@useguards(rolesguard)@roles('admin",{"_index":2633,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(':id/status",{"_index":672,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["patch(':id/status')@roles('admin",{"_index":1166,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["patch(':id/status')@useguards(jwtauthguard",{"_index":596,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["patch(':id/status')@useguards(rolesguard)@roles('admin",{"_index":2636,"title":{},"body":{"controllers/UsersController.html":{}}}],["path",{"_index":2106,"title":{},"body":{"controllers/QueuesController.html":{}}}],["pattern",{"_index":416,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["payload",{"_index":908,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{}}}],["payload.roles.map((role",{"_index":916,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":909,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["pdf",{"_index":1204,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["pending",{"_index":451,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"entities/Appointment.html":{},"injectables/AppointmentService.html":{},"entities/DocumentApplication.html":{},"classes/ForgotPasswordDto.html":{},"entities/Queue.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{},"miscellaneous/enumerations.html":{}}}],["pendingcount",{"_index":833,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["pendingqueues",{"_index":2054,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["pendingqueues.length",{"_index":2057,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["pendingqueues.map((queue",{"_index":2061,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["pendingqueueswithdetails",{"_index":2113,"title":{},"body":{"controllers/QueuesController.html":{}}}],["pendingqueueswithdetails.length",{"_index":2118,"title":{},"body":{"controllers/QueuesController.html":{}}}],["per",{"_index":1148,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"classes/PaginatedUsersResponseDto.html":{},"classes/UserQueryDto.html":{}}}],["perform",{"_index":1587,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["permission",{"_index":669,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["permissions",{"_index":1575,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["permit",{"_index":1102,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["phone_number",{"_index":1878,"title":{},"body":{"entities/QueueDetails.html":{}}}],["phonenumber",{"_index":503,"title":{},"body":{"entities/Appointment.html":{},"classes/AppointmentNotificationDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["pickup",{"_index":454,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"entities/DocumentApplication.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/VerifyOtpDto.html":{},"miscellaneous/enumerations.html":{}}}],["platform",{"_index":2810,"title":{},"body":{"index.html":{}}}],["please",{"_index":396,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/QueueNotificationDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{},"index.html":{}}}],["pm",{"_index":817,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueSchedulerService.html":{}}}],["png",{"_index":1203,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["port",{"_index":323,"title":{},"body":{"modules/AppModule.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"miscellaneous/variables.html":{}}}],["position",{"_index":1960,"title":{},"body":{"classes/QueueGateway.html":{},"classes/QueueNotificationDto.html":{},"interfaces/RequestWithUser.html":{}}}],["position_alert",{"_index":2003,"title":{},"body":{"classes/QueueNotificationDto.html":{},"interfaces/RequestWithUser.html":{}}}],["possible",{"_index":2805,"title":{},"body":{"index.html":{}}}],["post",{"_index":161,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"classes/QueueGateway.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["post(':id/files",{"_index":1191,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["post(':id/files')@useinterceptors(undefined)@apiconsumes('multipart/form",{"_index":1171,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["post('admin",{"_index":2615,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('admin/update",{"_index":2237,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["post('check",{"_index":2398,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["post('clear",{"_index":2408,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["post('forgot",{"_index":2310,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["post('login",{"_index":2200,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["post('notifications/application",{"_index":2373,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["post('notifications/appointment",{"_index":2361,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["post('record",{"_index":2404,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["post('register",{"_index":2207,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["post('reset",{"_index":2318,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["post('send",{"_index":2278,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["post('test",{"_index":2330,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["post('update",{"_index":2225,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["post('verify",{"_index":2293,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["post()@apioperation({summary",{"_index":549,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{}}}],["potential",{"_index":2131,"title":{},"body":{"controllers/QueuesController.html":{}}}],["practice",{"_index":2299,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["prefix",{"_index":151,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/MinioService-1.html":{},"controllers/QueuesController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["presigned",{"_index":1752,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["prevent",{"_index":341,"title":{},"body":{"modules/AppModule.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{}}}],["previous",{"_index":2263,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["previousstatus",{"_index":2386,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["primarycolumn",{"_index":1089,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["primarycolumn({length",{"_index":1072,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["primarygeneratedcolumn",{"_index":132,"title":{},"body":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentFile.html":{},"entities/OTP.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["private",{"_index":250,"title":{},"body":{"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["privileged",{"_index":1134,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["proceed",{"_index":1996,"title":{},"body":{"classes/QueueNotificationDto.html":{},"interfaces/RequestWithUser.html":{}}}],["process",{"_index":2042,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{}}}],["process.env.db_host",{"_index":2893,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_name",{"_index":2899,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_password",{"_index":2898,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_username",{"_index":2896,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.minio_access_key",{"_index":1680,"title":{},"body":{"injectables/MinioService.html":{}}}],["process.env.minio_bucket_name",{"_index":1685,"title":{},"body":{"injectables/MinioService.html":{}}}],["process.env.minio_endpoint",{"_index":1673,"title":{},"body":{"injectables/MinioService.html":{}}}],["process.env.minio_secret_key",{"_index":1682,"title":{},"body":{"injectables/MinioService.html":{}}}],["process.env.minio_use_ssl",{"_index":1678,"title":{},"body":{"injectables/MinioService.html":{}}}],["process.env.node_env",{"_index":2333,"title":{},"body":{"interfaces/RequestWithUser.html":{},"miscellaneous/variables.html":{}}}],["process.env.ws_cors_origin",{"_index":1943,"title":{},"body":{"classes/QueueGateway.html":{}}}],["processing",{"_index":1103,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["production",{"_index":353,"title":{},"body":{"modules/AppModule.html":{},"interfaces/RequestWithUser.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["professional",{"_index":2270,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["profile",{"_index":1621,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["profile'})@apiresponse({status",{"_index":2627,"title":{},"body":{"controllers/UsersController.html":{}}}],["progress",{"_index":2039,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["progressive",{"_index":2779,"title":{},"body":{"index.html":{}}}],["project",{"_index":2788,"title":{},"body":{"index.html":{}}}],["promise",{"_index":241,"title":{},"body":{"injectables/AnnouncementService.html":{},"modules/AppModule.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"injectables/QueueSchedulerService.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["promise((resolve",{"_index":1754,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["promise.all",{"_index":838,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{}}}],["propagate",{"_index":2076,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["proper",{"_index":1574,"title":{},"body":{"interfaces/LockoutData.html":{},"injectables/QueueSchedulerService.html":{}}}],["properties",{"_index":16,"title":{"properties.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/JwtPayload.html":{},"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"classes/ResetPasswordDto.html":{},"entities/Role.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{},"properties.html":{}}}],["provide",{"_index":397,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["provided",{"_index":1051,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["provided)'})@isoptional()@isstring",{"_index":1049,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["provided)'})@isstring()@isoptional",{"_index":1037,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["providers",{"_index":216,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["purpose",{"_index":408,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["purposes",{"_index":1816,"title":{},"body":{"injectables/OTPService.html":{},"interfaces/RequestWithUser.html":{}}}],["qrcode",{"_index":2757,"title":{},"body":{"dependencies.html":{}}}],["query",{"_index":187,"title":{},"body":{"controllers/AnnouncementController.html":{},"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["query('end",{"_index":650,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["query('includeuser",{"_index":657,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{}}}],["query('set",{"_index":371,"title":{},"body":{"modules/AppModule.html":{}}}],["query('start",{"_index":649,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["query('status",{"_index":1215,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["query.dto",{"_index":2643,"title":{},"body":{"controllers/UsersController.html":{}}}],["query.dto.ts",{"_index":2572,"title":{},"body":{"classes/UserQueryDto.html":{},"coverage.html":{}}}],["query.dto.ts:15",{"_index":2575,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["query.dto.ts:26",{"_index":2574,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["query.dto.ts:34",{"_index":2580,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["query.dto.ts:42",{"_index":2577,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["querybuilder",{"_index":1306,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["querybuilder.andwhere('roles.name",{"_index":1318,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["querybuilder.getmanyandcount",{"_index":1321,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["querybuilder.orderby('user.createdat",{"_index":1319,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["querybuilder.where",{"_index":1314,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["questions",{"_index":2834,"title":{},"body":{"index.html":{}}}],["queue",{"_index":921,"title":{"entities/Queue.html":{}},"body":{"entities/Counter.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["queue.completedat",{"_index":2138,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queue.controller",{"_index":1981,"title":{},"body":{"modules/QueueModule.html":{}}}],["queue.counter",{"_index":924,"title":{},"body":{"entities/Counter.html":{}}}],["queue.counternumber",{"_index":2136,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queue.createdat",{"_index":2137,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queue.details",{"_index":1880,"title":{},"body":{"entities/QueueDetails.html":{},"controllers/QueuesController.html":{}}}],["queue.details[0",{"_index":2134,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queue.dto.ts",{"_index":1002,"title":{},"body":{"classes/CreateQueueDto.html":{},"classes/UpdateQueueDto.html":{},"coverage.html":{}}}],["queue.dto.ts:11",{"_index":2524,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["queue.dto.ts:13",{"_index":1010,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:17",{"_index":1011,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:21",{"_index":1005,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:25",{"_index":1012,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:29",{"_index":1013,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:33",{"_index":1006,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:37",{"_index":1009,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:5",{"_index":1014,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.dto.ts:7",{"_index":2526,"title":{},"body":{"classes/UpdateQueueDto.html":{}}}],["queue.dto.ts:9",{"_index":1007,"title":{},"body":{"classes/CreateQueueDto.html":{}}}],["queue.entity",{"_index":1890,"title":{},"body":{"entities/QueueDetails.html":{}}}],["queue.estimatedwaittime",{"_index":2139,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queue.gateway",{"_index":1983,"title":{},"body":{"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{}}}],["queue.id",{"_index":2129,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queue.queuenumber",{"_index":2135,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queue.service",{"_index":1939,"title":{},"body":{"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"controllers/QueuesController.html":{}}}],["queue.status",{"_index":2130,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queue/entities/queue.entity",{"_index":934,"title":{},"body":{"entities/Counter.html":{}}}],["queue_id",{"_index":1881,"title":{},"body":{"entities/QueueDetails.html":{}}}],["queue_number",{"_index":1854,"title":{},"body":{"entities/Queue.html":{}}}],["queuecontroller",{"_index":1979,"title":{},"body":{"modules/QueueModule.html":{},"coverage.html":{}}}],["queuedata",{"_index":1958,"title":{},"body":{"classes/QueueGateway.html":{}}}],["queuedetails",{"_index":1848,"title":{"entities/QueueDetails.html":{}},"body":{"entities/Queue.html":{},"entities/QueueDetails.html":{},"modules/QueueModule.html":{},"controllers/QueuesController.html":{},"coverage.html":{}}}],["queuegateway",{"_index":1892,"title":{"classes/QueueGateway.html":{}},"body":{"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"coverage.html":{},"overview.html":{}}}],["queueid",{"_index":1865,"title":{},"body":{"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"controllers/QueuesController.html":{}}}],["queuemodule",{"_index":288,"title":{"modules/QueueModule.html":{}},"body":{"modules/AppModule.html":{},"modules/QueueModule.html":{},"modules.html":{},"overview.html":{}}}],["queuenotificationdto",{"_index":1988,"title":{"classes/QueueNotificationDto.html":{}},"body":{"classes/QueueNotificationDto.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["queuenumber",{"_index":1840,"title":{},"body":{"entities/Queue.html":{},"classes/QueueNotificationDto.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["queuerepository",{"_index":2014,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["queues",{"_index":2051,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{}}}],["queues.controller",{"_index":1982,"title":{},"body":{"modules/QueueModule.html":{}}}],["queues/user",{"_index":2151,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queues/walk",{"_index":2109,"title":{},"body":{"controllers/QueuesController.html":{}}}],["queueschedulerservice",{"_index":1977,"title":{"injectables/QueueSchedulerService.html":{}},"body":{"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"coverage.html":{},"overview.html":{}}}],["queuescontroller",{"_index":1980,"title":{"controllers/QueuesController.html":{}},"body":{"modules/QueueModule.html":{},"controllers/QueuesController.html":{},"coverage.html":{}}}],["queueservice",{"_index":1906,"title":{},"body":{"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"controllers/QueuesController.html":{},"coverage.html":{},"overview.html":{}}}],["queuestatus",{"_index":1856,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"classes/UpdateQueueDto.html":{},"miscellaneous/enumerations.html":{}}}],["queuestatus.cancelled",{"_index":2062,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["queuestatus.completed",{"_index":2081,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["queuestatus.pending",{"_index":1862,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueSchedulerService.html":{}}}],["queuestatus.serving",{"_index":2070,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["range",{"_index":648,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["range')@useguards(jwtauthguard",{"_index":585,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["rate",{"_index":2084,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{}}}],["re",{"_index":1566,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["read",{"_index":2871,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":196,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppController.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ready",{"_index":453,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"entities/DocumentApplication.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/VerifyOtpDto.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["ready_for_pickup",{"_index":1105,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["real",{"_index":2848,"title":{},"body":{"index.html":{}}}],["reason",{"_index":694,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{}}}],["reason_of_visit",{"_index":1885,"title":{},"body":{"entities/QueueDetails.html":{}}}],["reasonofvisit",{"_index":504,"title":{},"body":{"entities/Appointment.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"entities/QueueDetails.html":{},"controllers/QueuesController.html":{}}}],["receive",{"_index":2309,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["received",{"_index":428,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["recent",{"_index":1383,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["recently",{"_index":2604,"title":{},"body":{"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{}}}],["recentusers",{"_index":1299,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["recentusers.map((user",{"_index":1386,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["recipient",{"_index":391,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/QueueNotificationDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["record",{"_index":980,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"interfaces/RequestWithUser.html":{}}}],["recordfailedattempt(@body",{"_index":2405,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["recordfailedloginattempt(identifier",{"_index":1437,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["recording",{"_index":2407,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["red",{"_index":2272,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["referencedcolumnname",{"_index":2568,"title":{},"body":{"entities/User.html":{}}}],["reflect",{"_index":2759,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":2421,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["regardless",{"_index":2306,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["register(@body",{"_index":2208,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["register(registerdto",{"_index":1494,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["registerdto",{"_index":1417,"title":{"classes/RegisterDto.html":{}},"body":{"interfaces/LockoutData.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["registered",{"_index":426,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["registration",{"_index":1517,"title":{},"body":{"interfaces/LockoutData.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{}}}],["reject",{"_index":1755,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["rejected",{"_index":452,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"entities/DocumentApplication.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{},"miscellaneous/enumerations.html":{}}}],["rejection",{"_index":2393,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["rejectionreason",{"_index":2395,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["related",{"_index":1554,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["relation(user",{"_index":1367,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["relations",{"_index":495,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["relationship",{"_index":1220,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["reminder",{"_index":717,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"interfaces/RequestWithUser.html":{}}}],["remove",{"_index":158,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["remove(@param('id",{"_index":207,"title":{},"body":{"controllers/AnnouncementController.html":{},"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{}}}],["remove(id",{"_index":175,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["remove(user.roles",{"_index":1369,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["replaces",{"_index":2499,"title":{},"body":{"injectables/RolesService.html":{}}}],["repository",{"_index":237,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/OTPService.html":{},"injectables/QueueSchedulerService.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["req",{"_index":1199,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["req.user",{"_index":2221,"title":{},"body":{"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["req.user.id",{"_index":2222,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["req.user?.id",{"_index":2248,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["req.user?.roles",{"_index":2249,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["request",{"_index":1177,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["request.user",{"_index":2418,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"miscellaneous/variables.html":{}}}],["request.user?.roles",{"_index":2431,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["requested",{"_index":1221,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["requestwithuser",{"_index":2181,"title":{"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{}},"body":{"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["required",{"_index":646,"title":{},"body":{"controllers/AppointmentController.html":{},"classes/CreateDocumentApplicationDto.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/LockoutData.html":{},"classes/QueueNotificationDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["requiredroles",{"_index":2426,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["requiredroles.some((role",{"_index":2434,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["requirements",{"_index":432,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["requires",{"_index":1107,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["requires_additional_info",{"_index":1106,"title":{},"body":{"entities/DocumentApplication.html":{},"miscellaneous/enumerations.html":{}}}],["requiring",{"_index":2818,"title":{},"body":{"index.html":{}}}],["reset",{"_index":222,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resetdto",{"_index":2320,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["resetpassword",{"_index":2319,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["resetpassworddto",{"_index":427,"title":{"classes/ResetPasswordDto.html":{}},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{}}}],["resolve(files",{"_index":1763,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["resources",{"_index":2829,"title":{},"body":{"index.html":{}}}],["response",{"_index":1323,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["response.dto",{"_index":1835,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{}}}],["response.dto.ts",{"_index":1825,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"coverage.html":{}}}],["response.dto.ts:14",{"_index":2589,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:15",{"_index":1829,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{},"classes/UsersByRoleDto.html":{}}}],["response.dto.ts:20",{"_index":2599,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:21",{"_index":1828,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{}}}],["response.dto.ts:23",{"_index":2606,"title":{},"body":{"classes/UserStatsResponseDto.html":{}}}],["response.dto.ts:26",{"_index":2590,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:27",{"_index":1827,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{}}}],["response.dto.ts:29",{"_index":2602,"title":{},"body":{"classes/UserStatsResponseDto.html":{}}}],["response.dto.ts:32",{"_index":2594,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:33",{"_index":1831,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{}}}],["response.dto.ts:35",{"_index":2603,"title":{},"body":{"classes/UserStatsResponseDto.html":{}}}],["response.dto.ts:38",{"_index":2593,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:41",{"_index":2608,"title":{},"body":{"classes/UserStatsResponseDto.html":{}}}],["response.dto.ts:44",{"_index":2595,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:47",{"_index":2605,"title":{},"body":{"classes/UserStatsResponseDto.html":{}}}],["response.dto.ts:50",{"_index":2596,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:56",{"_index":2583,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:62",{"_index":2592,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:68",{"_index":2586,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:74",{"_index":2598,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:8",{"_index":2591,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:81",{"_index":2597,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:87",{"_index":2587,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["response.dto.ts:9",{"_index":1834,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{},"classes/UsersByRoleDto.html":{}}}],["response.dto.ts:93",{"_index":2588,"title":{},"body":{"classes/UserResponseDto.html":{}}}],["responsive",{"_index":2343,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["result",{"_index":796,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/LockoutData.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["result.affected",{"_index":798,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["result.length",{"_index":2147,"title":{},"body":{"controllers/QueuesController.html":{}}}],["results",{"_index":110,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"classes/ResetPasswordDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":1560,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["retrieved",{"_index":1138,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["retrieving",{"_index":1620,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["return",{"_index":198,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":164,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["reveal",{"_index":2297,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["robert",{"_index":104,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["robert'})@isstring()@isoptional",{"_index":70,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserDto.html":{}}}],["role",{"_index":35,"title":{"entities/Role.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"interfaces/AuthenticatedUser.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["role'})@isoptional()@isstring",{"_index":2576,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["role.id",{"_index":1614,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["role.name",{"_index":1328,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["role_id",{"_index":2569,"title":{},"body":{"entities/User.html":{}}}],["roleid",{"_index":1600,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["roleids",{"_index":19,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["roleids.length",{"_index":1370,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["rolename",{"_index":1297,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["rolenames",{"_index":1488,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["rolenames.includes(role",{"_index":2435,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["roles",{"_index":610,"title":{},"body":{"controllers/AppointmentController.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles('admin",{"_index":632,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["roles.controller",{"_index":2478,"title":{},"body":{"modules/RolesModule.html":{}}}],["roles.map((role",{"_index":1489,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["roles.service",{"_index":2462,"title":{},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{}}}],["roles/entities/role.entity",{"_index":2563,"title":{},"body":{"entities/User.html":{}}}],["roles/roles.module",{"_index":304,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["roles/roles.service",{"_index":1290,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["roles_key",{"_index":2423,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolescontroller",{"_index":2452,"title":{"controllers/RolesController.html":{}},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{},"coverage.html":{}}}],["rolesguard",{"_index":608,"title":{"guards/RolesGuard.html":{}},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["rolesguard)@roles('admin",{"_index":579,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/UsersController.html":{}}}],["rolesmodule",{"_index":289,"title":{"modules/RolesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["rolesrepository",{"_index":2485,"title":{},"body":{"injectables/RolesService.html":{}}}],["rolesservice",{"_index":1289,"title":{"injectables/RolesService.html":{}},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["rolestats",{"_index":1374,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["rolestats.map((stat",{"_index":1380,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["rollback",{"_index":1512,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["rolled",{"_index":1518,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["rooms",{"_index":1968,"title":{},"body":{"classes/QueueGateway.html":{}}}],["root",{"_index":2897,"title":{},"body":{"miscellaneous/variables.html":{}}}],["run",{"_index":2031,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"index.html":{}}}],["runs",{"_index":2803,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":2761,"title":{},"body":{"dependencies.html":{}}}],["s+@\\s+\\.\\s+/.test(email",{"_index":2280,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["s@]+@[^\\s@]+\\.[^\\s",{"_index":1523,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["salt",{"_index":1502,"title":{},"body":{"interfaces/LockoutData.html":{},"controllers/UsersController.html":{}}}],["san",{"_index":52,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["sanitizedrecentusers",{"_index":1385,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["sanitizedusers",{"_index":1324,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["save",{"_index":1811,"title":{},"body":{"injectables/OTPService.html":{}}}],["scalable",{"_index":2784,"title":{},"body":{"index.html":{}}}],["schedulemodule",{"_index":297,"title":{},"body":{"modules/AppModule.html":{},"modules/QueueModule.html":{}}}],["schedulemodule.forroot",{"_index":373,"title":{},"body":{"modules/AppModule.html":{},"modules/QueueModule.html":{}}}],["scheduler.service",{"_index":1984,"title":{},"body":{"modules/QueueModule.html":{}}}],["scheduler.service.ts",{"_index":2006,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"coverage.html":{}}}],["scheduler.service.ts:10",{"_index":2028,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["scheduler.service.ts:11",{"_index":2013,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["scheduler.service.ts:137",{"_index":2024,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["scheduler.service.ts:172",{"_index":2026,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["scheduler.service.ts:178",{"_index":2015,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["scheduler.service.ts:24",{"_index":2021,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["schema",{"_index":2197,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["search",{"_index":1284,"title":{},"body":{"interfaces/FindAllOptions.html":{},"classes/UserQueryDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["searching",{"_index":2050,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["secret",{"_index":879,"title":{},"body":{"modules/AuthModule.html":{},"injectables/OTPService.html":{}}}],["secretkey",{"_index":898,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["secretorkey",{"_index":905,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["secure",{"_index":2300,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["security",{"_index":2260,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["see",{"_index":2244,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["seeddatabaseifneeded",{"_index":2712,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["seeddatabaseifneeded(datasource",{"_index":2776,"title":{},"body":{"miscellaneous/functions.html":{}}}],["select",{"_index":810,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["select('role.name",{"_index":1376,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["send",{"_index":407,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/AppointmentNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["sendapplicationapproval",{"_index":2391,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["sendapplicationconfirmation",{"_index":2374,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["sendapplicationnotification",{"_index":2345,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["sendapplicationrejection",{"_index":2394,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["sendapplicationstatusupdate",{"_index":2385,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["sendappointmentcancellation(@body",{"_index":2367,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["sendappointmentconfirmation(@body",{"_index":2362,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["sendappointmentreminder",{"_index":2371,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["sendappointmentstatusupdate(@body",{"_index":2365,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["sending",{"_index":2282,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["sendotp(@body",{"_index":2279,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["sendotpdto",{"_index":406,"title":{"classes/SendOtpDto.html":{}},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{}}}],["sendqueuenotification(@body",{"_index":2347,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["sends",{"_index":2255,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["sent",{"_index":2275,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["server",{"_index":1896,"title":{},"body":{"classes/QueueGateway.html":{},"index.html":{}}}],["service",{"_index":2112,"title":{},"body":{"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["services/email.service",{"_index":314,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"interfaces/RequestWithUser.html":{}}}],["services/minio.service",{"_index":1253,"title":{},"body":{"modules/DocumentApplicationsModule.html":{}}}],["services/otp.service",{"_index":313,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"interfaces/RequestWithUser.html":{}}}],["serving",{"_index":1860,"title":{},"body":{"entities/Queue.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"miscellaneous/enumerations.html":{}}}],["servingqueues",{"_index":2069,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["servingqueues.length",{"_index":2071,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["servingqueues.map((queue",{"_index":2073,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["servingqueueswithdetails",{"_index":2114,"title":{},"body":{"controllers/QueuesController.html":{}}}],["servingqueueswithdetails.length",{"_index":2119,"title":{},"body":{"controllers/QueuesController.html":{}}}],["set",{"_index":362,"title":{},"body":{"modules/AppModule.html":{},"controllers/AppointmentController.html":{},"interfaces/LockoutData.html":{},"entities/QueueDetails.html":{}}}],["setmetadata(roles_key",{"_index":2901,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":2789,"title":{},"body":{"index.html":{}}}],["shouldupdatename",{"_index":1540,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["side",{"_index":2785,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":881,"title":{},"body":{"modules/AuthModule.html":{}}}],["simple",{"_index":2820,"title":{},"body":{"index.html":{}}}],["single",{"_index":2287,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["size",{"_index":1748,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["skip",{"_index":1305,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["skipping",{"_index":2040,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["slot",{"_index":851,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["slots",{"_index":575,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["smart",{"_index":1687,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"interfaces/RequestWithUser.html":{}}}],["socket",{"_index":1912,"title":{},"body":{"classes/QueueGateway.html":{}}}],["socket.io",{"_index":1938,"title":{},"body":{"classes/QueueGateway.html":{},"dependencies.html":{}}}],["soft",{"_index":267,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"modules/AnnouncementModule.html":{},"injectables/AnnouncementService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"modules/AppointmentModule.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"modules/AuthModule.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"modules/QueueModule.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"classes/ResetPasswordDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{},"index.html":{}}}],["spam",{"_index":2266,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["speakeasy",{"_index":1790,"title":{},"body":{"injectables/OTPService.html":{},"dependencies.html":{}}}],["speakeasy.totp",{"_index":1800,"title":{},"body":{"injectables/OTPService.html":{}}}],["special",{"_index":445,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["specific",{"_index":1130,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"interfaces/LockoutData.html":{},"classes/QueueGateway.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{}}}],["specified",{"_index":807,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/RequestWithUser.html":{}}}],["sponsors",{"_index":2866,"title":{},"body":{"index.html":{}}}],["sql",{"_index":355,"title":{},"body":{"modules/AppModule.html":{}}}],["sr",{"_index":1039,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/.../appointment.entity.ts",{"_index":2771,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../counter.entity.ts",{"_index":2772,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../database.config.ts",{"_index":2889,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../document",{"_index":2770,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":2775,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../queue.entity.ts",{"_index":2773,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../roles.decorator.ts",{"_index":2890,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.decorator.ts",{"_index":2891,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":270,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:14",{"_index":275,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:9",{"_index":273,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":293,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":375,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":376,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":2182,"title":{},"body":{"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["src/auth/auth.module.ts",{"_index":865,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":1410,"title":{},"body":{"interfaces/LockoutData.html":{},"coverage.html":{}}}],["src/auth/decorators/roles.decorator.ts",{"_index":2697,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/user.decorator.ts",{"_index":2413,"title":{},"body":{"interfaces/RequestWithUser-1.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dto/appointment",{"_index":691,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto.ts",{"_index":1644,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto.ts:15",{"_index":1648,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/login.dto.ts:23",{"_index":1651,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/otp.dto.ts",{"_index":380,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{}}}],["src/auth/dto/otp.dto.ts:106",{"_index":2439,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["src/auth/dto/otp.dto.ts:116",{"_index":2507,"title":{},"body":{"classes/TestOtpDto.html":{}}}],["src/auth/dto/otp.dto.ts:126",{"_index":399,"title":{},"body":{"classes/ApplicationNotificationDto.html":{}}}],["src/auth/dto/otp.dto.ts:133",{"_index":387,"title":{},"body":{"classes/ApplicationNotificationDto.html":{}}}],["src/auth/dto/otp.dto.ts:141",{"_index":403,"title":{},"body":{"classes/ApplicationNotificationDto.html":{}}}],["src/auth/dto/otp.dto.ts:148",{"_index":390,"title":{},"body":{"classes/ApplicationNotificationDto.html":{}}}],["src/auth/dto/otp.dto.ts:17",{"_index":2504,"title":{},"body":{"classes/SendOtpDto.html":{}}}],["src/auth/dto/otp.dto.ts:27",{"_index":2506,"title":{},"body":{"classes/SendOtpDto.html":{}}}],["src/auth/dto/otp.dto.ts:37",{"_index":2686,"title":{},"body":{"classes/VerifyOtpDto.html":{}}}],["src/auth/dto/otp.dto.ts:49",{"_index":2687,"title":{},"body":{"classes/VerifyOtpDto.html":{}}}],["src/auth/dto/otp.dto.ts:59",{"_index":2688,"title":{},"body":{"classes/VerifyOtpDto.html":{}}}],["src/auth/dto/otp.dto.ts:69",{"_index":1400,"title":{},"body":{"classes/ForgotPasswordDto.html":{}}}],["src/auth/dto/otp.dto.ts:79",{"_index":2436,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["src/auth/dto/otp.dto.ts:91",{"_index":2442,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["src/auth/dto/queue",{"_index":1989,"title":{},"body":{"classes/QueueNotificationDto.html":{},"coverage.html":{}}}],["src/auth/dto/register.dto.ts",{"_index":2162,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["src/auth/dto/register.dto.ts:21",{"_index":2166,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:29",{"_index":2179,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:39",{"_index":2177,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:47",{"_index":2168,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:55",{"_index":2171,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:63",{"_index":2170,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:71",{"_index":2172,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:79",{"_index":2173,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:86",{"_index":2164,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/register.dto.ts:95",{"_index":2175,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/update",{"_index":6,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/auth/guards/jwt",{"_index":1401,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard.ts",{"_index":2419,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard.ts:13",{"_index":2470,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/guards/roles.guard.ts:16",{"_index":2471,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":886,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:20",{"_index":1407,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:35",{"_index":1408,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/config/database.config.ts",{"_index":2708,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/entities/otp.entity.ts",{"_index":1764,"title":{},"body":{"entities/OTP.html":{},"coverage.html":{}}}],["src/entities/otp.entity.ts:11",{"_index":1771,"title":{},"body":{"entities/OTP.html":{}}}],["src/entities/otp.entity.ts:14",{"_index":1768,"title":{},"body":{"entities/OTP.html":{}}}],["src/entities/otp.entity.ts:17",{"_index":1772,"title":{},"body":{"entities/OTP.html":{}}}],["src/entities/otp.entity.ts:20",{"_index":1773,"title":{},"body":{"entities/OTP.html":{}}}],["src/entities/otp.entity.ts:23",{"_index":1774,"title":{},"body":{"entities/OTP.html":{}}}],["src/entities/otp.entity.ts:26",{"_index":1770,"title":{},"body":{"entities/OTP.html":{}}}],["src/entities/otp.entity.ts:29",{"_index":1767,"title":{},"body":{"entities/OTP.html":{}}}],["src/main.ts",{"_index":2709,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/announcement/announcement.controller.ts",{"_index":150,"title":{},"body":{"controllers/AnnouncementController.html":{},"coverage.html":{}}}],["src/modules/announcement/announcement.controller.ts:21",{"_index":162,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["src/modules/announcement/announcement.controller.ts:26",{"_index":165,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["src/modules/announcement/announcement.controller.ts:31",{"_index":171,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["src/modules/announcement/announcement.controller.ts:36",{"_index":168,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["src/modules/announcement/announcement.controller.ts:41",{"_index":181,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["src/modules/announcement/announcement.controller.ts:49",{"_index":177,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["src/modules/announcement/announcement.module.ts",{"_index":224,"title":{},"body":{"modules/AnnouncementModule.html":{}}}],["src/modules/announcement/announcement.service.ts",{"_index":233,"title":{},"body":{"injectables/AnnouncementService.html":{},"coverage.html":{}}}],["src/modules/announcement/announcement.service.ts:15",{"_index":240,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["src/modules/announcement/announcement.service.ts:24",{"_index":242,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["src/modules/announcement/announcement.service.ts:31",{"_index":243,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["src/modules/announcement/announcement.service.ts:43",{"_index":246,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["src/modules/announcement/announcement.service.ts:53",{"_index":245,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["src/modules/announcement/announcement.service.ts:59",{"_index":244,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["src/modules/announcement/announcement.service.ts:9",{"_index":238,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["src/modules/announcement/dto/create",{"_index":939,"title":{},"body":{"classes/CreateAnnouncementDto.html":{},"coverage.html":{}}}],["src/modules/announcement/dto/update",{"_index":2508,"title":{},"body":{"classes/UpdateAnnouncementDto.html":{},"coverage.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts",{"_index":115,"title":{},"body":{"entities/Announcement.html":{},"coverage.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts:12",{"_index":133,"title":{},"body":{"entities/Announcement.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts:15",{"_index":141,"title":{},"body":{"entities/Announcement.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts:18",{"_index":131,"title":{},"body":{"entities/Announcement.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts:21",{"_index":137,"title":{},"body":{"entities/Announcement.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts:24",{"_index":139,"title":{},"body":{"entities/Announcement.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts:27",{"_index":129,"title":{},"body":{"entities/Announcement.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts:30",{"_index":124,"title":{},"body":{"entities/Announcement.html":{}}}],["src/modules/announcement/entities/announcement.entity.ts:33",{"_index":143,"title":{},"body":{"entities/Announcement.html":{}}}],["src/modules/appointment/appointment.controller.ts",{"_index":537,"title":{},"body":{"controllers/AppointmentController.html":{},"coverage.html":{}}}],["src/modules/appointment/appointment.controller.ts:113",{"_index":576,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:123",{"_index":569,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:135",{"_index":567,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:142",{"_index":594,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:169",{"_index":597,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:188",{"_index":591,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:44",{"_index":554,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:59",{"_index":561,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:69",{"_index":572,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:77",{"_index":589,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:85",{"_index":581,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.controller.ts:96",{"_index":586,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["src/modules/appointment/appointment.module.ts",{"_index":687,"title":{},"body":{"modules/AppointmentModule.html":{}}}],["src/modules/appointment/appointment.service.ts",{"_index":724,"title":{},"body":{"injectables/AppointmentService.html":{},"coverage.html":{}}}],["src/modules/appointment/appointment.service.ts:108",{"_index":742,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:122",{"_index":752,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:157",{"_index":751,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:16",{"_index":732,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:170",{"_index":753,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:185",{"_index":750,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:217",{"_index":746,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:23",{"_index":736,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:238",{"_index":748,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:261",{"_index":749,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:313",{"_index":735,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:338",{"_index":744,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:72",{"_index":738,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:82",{"_index":741,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/appointment.service.ts:92",{"_index":743,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["src/modules/appointment/dto/create",{"_index":950,"title":{},"body":{"classes/CreateAppointmentDto.html":{},"coverage.html":{}}}],["src/modules/appointment/dto/update",{"_index":2513,"title":{},"body":{"classes/UpdateAppointmentDto.html":{},"coverage.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts",{"_index":497,"title":{},"body":{"entities/Appointment.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:22",{"_index":513,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:25",{"_index":509,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:28",{"_index":512,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:31",{"_index":516,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:34",{"_index":518,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:37",{"_index":506,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:40",{"_index":519,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:43",{"_index":520,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:46",{"_index":507,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:49",{"_index":510,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:56",{"_index":522,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:59",{"_index":528,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:66",{"_index":527,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:69",{"_index":515,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:72",{"_index":511,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/appointment/entities/appointment.entity.ts:75",{"_index":523,"title":{},"body":{"entities/Appointment.html":{}}}],["src/modules/counter/entities/counter.entity.ts",{"_index":918,"title":{},"body":{"entities/Counter.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/modules/counter/entities/counter.entity.ts:18",{"_index":929,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/counter/entities/counter.entity.ts:21",{"_index":930,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/counter/entities/counter.entity.ts:28",{"_index":932,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/counter/entities/counter.entity.ts:31",{"_index":928,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/counter/entities/counter.entity.ts:38",{"_index":927,"title":{},"body":{"entities/Counter.html":{}}}],["src/modules/document",{"_index":457,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"entities/DocumentFile.html":{},"injectables/MinioService-1.html":{},"classes/UpdateDocumentApplicationDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/modules/queue/dto/create",{"_index":1001,"title":{},"body":{"classes/CreateQueueDto.html":{},"coverage.html":{}}}],["src/modules/queue/dto/update",{"_index":2523,"title":{},"body":{"classes/UpdateQueueDto.html":{},"coverage.html":{}}}],["src/modules/queue/entities/queue",{"_index":1863,"title":{},"body":{"entities/QueueDetails.html":{},"coverage.html":{}}}],["src/modules/queue/entities/queue.entity.ts",{"_index":1836,"title":{},"body":{"entities/Queue.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/modules/queue/entities/queue.entity.ts:22",{"_index":1853,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:25",{"_index":1855,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:32",{"_index":1857,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:35",{"_index":1846,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:38",{"_index":1847,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:41",{"_index":1842,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:44",{"_index":1852,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:47",{"_index":1850,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/entities/queue.entity.ts:52",{"_index":1844,"title":{},"body":{"entities/Queue.html":{}}}],["src/modules/queue/queue",{"_index":2005,"title":{},"body":{"injectables/QueueSchedulerService.html":{},"coverage.html":{}}}],["src/modules/queue/queue.controller.ts",{"_index":2722,"title":{},"body":{"coverage.html":{}}}],["src/modules/queue/queue.gateway.ts",{"_index":1893,"title":{},"body":{"classes/QueueGateway.html":{},"coverage.html":{}}}],["src/modules/queue/queue.gateway.ts:23",{"_index":1909,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:26",{"_index":1907,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:34",{"_index":1913,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:41",{"_index":1917,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:46",{"_index":1927,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:53",{"_index":1920,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:59",{"_index":1924,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:65",{"_index":1930,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:72",{"_index":1934,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.gateway.ts:77",{"_index":1932,"title":{},"body":{"classes/QueueGateway.html":{}}}],["src/modules/queue/queue.module.ts",{"_index":1978,"title":{},"body":{"modules/QueueModule.html":{}}}],["src/modules/queue/queue.service.ts",{"_index":2723,"title":{},"body":{"coverage.html":{}}}],["src/modules/queue/queues.controller.ts",{"_index":2090,"title":{},"body":{"controllers/QueuesController.html":{},"coverage.html":{}}}],["src/modules/queue/queues.controller.ts:111",{"_index":2095,"title":{},"body":{"controllers/QueuesController.html":{}}}],["src/modules/queue/queues.controller.ts:21",{"_index":2100,"title":{},"body":{"controllers/QueuesController.html":{}}}],["src/modules/queue/queues.controller.ts:76",{"_index":2098,"title":{},"body":{"controllers/QueuesController.html":{}}}],["src/roles/entities/role.entity.ts",{"_index":2443,"title":{},"body":{"entities/Role.html":{},"coverage.html":{}}}],["src/roles/entities/role.entity.ts:10",{"_index":2446,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/entities/role.entity.ts:13",{"_index":2444,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/entities/role.entity.ts:16",{"_index":2449,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/entities/role.entity.ts:7",{"_index":2445,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/roles.controller.ts",{"_index":2453,"title":{},"body":{"controllers/RolesController.html":{},"coverage.html":{}}}],["src/roles/roles.controller.ts:14",{"_index":2456,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.controller.ts:20",{"_index":2458,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.controller.ts:26",{"_index":2461,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.module.ts",{"_index":2476,"title":{},"body":{"modules/RolesModule.html":{}}}],["src/roles/roles.service.ts",{"_index":2480,"title":{},"body":{"injectables/RolesService.html":{},"coverage.html":{}}}],["src/roles/roles.service.ts:17",{"_index":2488,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:21",{"_index":2491,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:29",{"_index":2490,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:37",{"_index":2492,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:45",{"_index":2487,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:8",{"_index":2484,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/services/email.service.ts",{"_index":2725,"title":{},"body":{"coverage.html":{}}}],["src/services/minio.service.ts",{"_index":1652,"title":{},"body":{"injectables/MinioService.html":{},"coverage.html":{}}}],["src/services/minio.service.ts:22",{"_index":1665,"title":{},"body":{"injectables/MinioService.html":{}}}],["src/services/minio.service.ts:46",{"_index":1663,"title":{},"body":{"injectables/MinioService.html":{}}}],["src/services/minio.service.ts:59",{"_index":1660,"title":{},"body":{"injectables/MinioService.html":{}}}],["src/services/minio.service.ts:6",{"_index":1667,"title":{},"body":{"injectables/MinioService.html":{}}}],["src/services/minio.service.ts:7",{"_index":1669,"title":{},"body":{"injectables/MinioService.html":{}}}],["src/services/minio.service.ts:8",{"_index":1658,"title":{},"body":{"injectables/MinioService.html":{}}}],["src/services/otp.service.ts",{"_index":1777,"title":{},"body":{"injectables/OTPService.html":{},"coverage.html":{}}}],["src/services/otp.service.ts:11",{"_index":1782,"title":{},"body":{"injectables/OTPService.html":{}}}],["src/services/otp.service.ts:19",{"_index":1786,"title":{},"body":{"injectables/OTPService.html":{}}}],["src/services/otp.service.ts:62",{"_index":1788,"title":{},"body":{"injectables/OTPService.html":{}}}],["src/services/otp.service.ts:92",{"_index":1784,"title":{},"body":{"injectables/OTPService.html":{}}}],["src/users/dto/create",{"_index":1016,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/paginated",{"_index":1824,"title":{},"body":{"classes/PaginatedUsersResponseDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":2533,"title":{},"body":{"classes/UpdateUserStatusDto.html":{},"coverage.html":{}}}],["src/users/dto/user",{"_index":2571,"title":{},"body":{"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts",{"_index":2537,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:17",{"_index":2546,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:20",{"_index":2544,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:23",{"_index":2561,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:26",{"_index":2555,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:29",{"_index":2545,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:32",{"_index":2551,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:35",{"_index":2549,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:38",{"_index":2552,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:41",{"_index":2554,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:44",{"_index":2539,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:47",{"_index":2548,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:50",{"_index":2540,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:53",{"_index":2560,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:57",{"_index":2542,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:60",{"_index":2543,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:74",{"_index":2559,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":2611,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:109",{"_index":2634,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:124",{"_index":2632,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:138",{"_index":2637,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:156",{"_index":2619,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:49",{"_index":2621,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:61",{"_index":2628,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:73",{"_index":2630,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:83",{"_index":2624,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":2670,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":1282,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:111",{"_index":2677,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:213",{"_index":2684,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:223",{"_index":2685,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:233",{"_index":2683,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:276",{"_index":2680,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:283",{"_index":2681,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:290",{"_index":2678,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:37",{"_index":2675,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:45",{"_index":2679,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:90",{"_index":2682,"title":{},"body":{"injectables/UsersService.html":{}}}],["st",{"_index":51,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["staff",{"_index":558,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"classes/UserResponseDto.html":{},"controllers/UsersController.html":{}}}],["staff'].includes(role.name",{"_index":1217,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["start",{"_index":651,"title":{},"body":{"controllers/AppointmentController.html":{},"index.html":{}}}],["start:dev",{"_index":2793,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":2794,"title":{},"body":{"index.html":{}}}],["startdate",{"_index":587,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{}}}],["started",{"_index":2778,"title":{"index.html":{}},"body":{}}],["starter",{"_index":2787,"title":{},"body":{"index.html":{}}}],["starting",{"_index":2041,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["startofday",{"_index":2025,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["startofday.todatestring",{"_index":2082,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["startofday.toisostring",{"_index":2052,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["stat.rolename",{"_index":1381,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["state",{"_index":1515,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["statements",{"_index":2691,"title":{},"body":{"coverage.html":{}}}],["statistics",{"_index":641,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"injectables/QueueSchedulerService.html":{},"controllers/UsersController.html":{}}}],["stats",{"_index":850,"title":{},"body":{"injectables/AppointmentService.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"coverage.html":{}}}],["status",{"_index":276,"title":{},"body":{"controllers/AppController.html":{},"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"entities/Counter.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"modules/DocumentApplicationsModule.html":{},"classes/ForgotPasswordDto.html":{},"entities/Queue.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserResponseDto.html":{},"controllers/UsersController.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{}}}],["status'})@isboolean",{"_index":2535,"title":{},"body":{"classes/UpdateUserStatusDto.html":{}}}],["status.dto",{"_index":2641,"title":{},"body":{"controllers/UsersController.html":{}}}],["status.dto.ts",{"_index":2534,"title":{},"body":{"classes/UpdateUserStatusDto.html":{},"coverage.html":{}}}],["status.dto.ts:10",{"_index":2536,"title":{},"body":{"classes/UpdateUserStatusDto.html":{}}}],["status_message",{"_index":486,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"entities/DocumentApplication.html":{}}}],["status_update",{"_index":716,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"classes/QueueNotificationDto.html":{},"interfaces/RequestWithUser.html":{}}}],["statuscode",{"_index":2277,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["statusdto",{"_index":1165,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["statusdto.status",{"_index":1237,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["statusdto.statusmessage",{"_index":1238,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["statuses",{"_index":832,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/RequestWithUser.html":{}}}],["statushistory",{"_index":1058,"title":{},"body":{"entities/DocumentApplication.html":{}}}],["statusmessage",{"_index":464,"title":{},"body":{"entities/ApplicationStatusHistory.html":{},"classes/CreateDocumentApplicationDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["stay",{"_index":2852,"title":{},"body":{"index.html":{}}}],["step",{"_index":1802,"title":{},"body":{"injectables/OTPService.html":{}}}],["steps",{"_index":2802,"title":{},"body":{"index.html":{}}}],["straightforward",{"_index":2816,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":890,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["stream",{"_index":1756,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["stream.on('data",{"_index":1758,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["stream.on('end",{"_index":1762,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["stream.on('error",{"_index":1761,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["strength",{"_index":1497,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["string",{"_index":47,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueNotificationDto.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"classes/ResetPasswordDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{},"miscellaneous/variables.html":{}}}],["string(payload.email",{"_index":914,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["structure",{"_index":2124,"title":{},"body":{"controllers/QueuesController.html":{}}}],["sub",{"_index":893,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{}}}],["submission",{"_index":986,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["submissiondate",{"_index":2376,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["subscribemessage",{"_index":1936,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subscribemessage('getqueueposition",{"_index":1919,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subscribemessage('join_queue_updates",{"_index":1929,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subscribemessage('joincounter",{"_index":1923,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subscribemessage('joinqueue",{"_index":1926,"title":{},"body":{"classes/QueueGateway.html":{}}}],["subtype",{"_index":973,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["success",{"_index":1464,"title":{},"body":{"interfaces/LockoutData.html":{},"classes/QueueGateway.html":{},"interfaces/RequestWithUser.html":{}}}],["successful",{"_index":2196,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["successfully",{"_index":553,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService-1.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["successfully'})@apiresponse({status",{"_index":1139,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["summary",{"_index":625,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{}}}],["super",{"_index":901,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["super_admin",{"_index":580,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["super_admin')@apioperation({summary",{"_index":559,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/UsersController.html":{}}}],["super_admin')@useguards(rolesguard)@apioperation({summary",{"_index":1143,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["super_admin'].includes(role.name",{"_index":667,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":2835,"title":{},"body":{"index.html":{},"modules.html":{}}}],["supported",{"_index":2335,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["supporting",{"_index":2103,"title":{},"body":{"controllers/QueuesController.html":{}}}],["sure",{"_index":2240,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["svg",{"_index":2881,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":2764,"title":{},"body":{"dependencies.html":{}}}],["synchronize",{"_index":331,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["table",{"_index":2728,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2727,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":268,"title":{},"body":{"injectables/AnnouncementService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["taken",{"_index":1496,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["target",{"_index":1584,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["targetuser",{"_index":1585,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["targetuserid",{"_index":1571,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["template",{"_index":2271,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["templates",{"_index":2267,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["term",{"_index":2578,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["test",{"_index":1649,"title":{},"body":{"classes/LoginDto.html":{},"interfaces/RequestWithUser.html":{},"index.html":{}}}],["test(password",{"_index":1637,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["test:covdeployment",{"_index":2799,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":2798,"title":{},"body":{"index.html":{}}}],["test@example.com",{"_index":100,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateUserDto.html":{},"classes/VerifyOtpDto.html":{}}}],["test@example.com'})@isemail()@isnotempty",{"_index":2165,"title":{},"body":{"classes/RegisterDto.html":{}}}],["test@example.com'})@isemail()@isoptional",{"_index":60,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["test@example.com'})@isnotempty",{"_index":1647,"title":{},"body":{"classes/LoginDto.html":{}}}],["testing",{"_index":448,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"injectables/OTPService.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["testminioconnection",{"_index":2713,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["testotp(@body",{"_index":2331,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["testotpdto",{"_index":447,"title":{"classes/TestOtpDto.html":{}},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{}}}],["tests",{"_index":2795,"title":{},"body":{"index.html":{}}}],["text",{"_index":130,"title":{},"body":{"entities/Announcement.html":{},"entities/ApplicationStatusHistory.html":{},"entities/DocumentApplication.html":{}}}],["thanks",{"_index":2865,"title":{},"body":{"index.html":{}}}],["theme",{"_index":2337,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["themed",{"_index":2273,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.announcementrepository.create",{"_index":252,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["this.announcementrepository.find",{"_index":255,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["this.announcementrepository.findone",{"_index":258,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["this.announcementrepository.save(announcement",{"_index":254,"title":{},"body":{"injectables/AnnouncementService.html":{}}}],["this.announcementservice.create(createannouncementdto",{"_index":199,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["this.announcementservice.findall",{"_index":200,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["this.announcementservice.findone(id",{"_index":204,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["this.announcementservice.getrecentannouncements(limit",{"_index":202,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["this.announcementservice.remove(id",{"_index":208,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["this.announcementservice.update(id",{"_index":206,"title":{},"body":{"controllers/AnnouncementController.html":{}}}],["this.appointmentrepository.count",{"_index":839,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.appointmentrepository.delete(id",{"_index":797,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.appointmentrepository.find",{"_index":775,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.appointmentrepository.findone",{"_index":778,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.appointmentrepository.save(appointment",{"_index":802,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.appointmentrepository.save(updated",{"_index":792,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.appointmentservice.create(createappointmentdto",{"_index":630,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.findall",{"_index":635,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.findallbyuser(user.id",{"_index":639,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.findbyappointmentnumber(appointmentnumber",{"_index":660,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.findone(+id",{"_index":658,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.getappointmentsbydate(date",{"_index":647,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.getappointmentsbydaterange",{"_index":653,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.getappointmentsstats",{"_index":642,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.getavailableslots(date",{"_index":656,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.remove(+id",{"_index":683,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.update(+id",{"_index":671,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appointmentservice.updatestatus(+id",{"_index":679,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.appservice.gethello",{"_index":279,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.adminupdateuser",{"_index":2252,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.authservice.clearaccountlockout(identifier",{"_index":2411,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.authservice.finduserbyemail(email",{"_index":2312,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.authservice.getaccountlockout(identifier",{"_index":2400,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.authservice.getprofile(number(req.user.id",{"_index":2223,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.authservice.login(logindto",{"_index":2202,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.authservice.recordfailedloginattempt(identifier",{"_index":2406,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.authservice.register(createuserdto",{"_index":2214,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.authservice.updatepassword(email",{"_index":2321,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.authservice.updateuserinfo",{"_index":2227,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.bucketname",{"_index":1684,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["this.checktimeslotavailability(newdate",{"_index":788,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.configservice",{"_index":1729,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.configservice.get",{"_index":1725,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.configservice.get('minio_port",{"_index":1727,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.configservice.get('otp_expiry_minutes",{"_index":1809,"title":{},"body":{"injectables/OTPService.html":{}}}],["this.configservice.get('otp_secret",{"_index":1801,"title":{},"body":{"injectables/OTPService.html":{}}}],["this.configservice.get('ws_cors_origin",{"_index":1955,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.documentapplicationsservice.create(createdto",{"_index":1190,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.findall",{"_index":1243,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.findall(userid",{"_index":1223,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.findone(id",{"_index":1230,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.getallapplicationfiles",{"_index":1229,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.getapplicationfiles",{"_index":1227,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.getapplicationstats",{"_index":1245,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.getfiledownloadurl",{"_index":1233,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.remove(id",{"_index":1239,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.update",{"_index":1235,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.updatestatus",{"_index":1236,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.documentapplicationsservice.uploadfile",{"_index":1214,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.emailservice.sendapplicationnotification",{"_index":2216,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.emailservice.sendappointmentcancellation",{"_index":2368,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.emailservice.sendappointmentconfirmation",{"_index":2363,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.emailservice.sendappointmentreminder",{"_index":2372,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.emailservice.sendappointmentstatusupdate",{"_index":2366,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.emailservice.senddocumentapplicationapproval",{"_index":2392,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.emailservice.senddocumentapplicationconfirmation",{"_index":2378,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.emailservice.senddocumentapplicationrejection",{"_index":2396,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.emailservice.senddocumentapplicationstatusupdate",{"_index":2387,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.emailservice.sendotp(email",{"_index":1815,"title":{},"body":{"injectables/OTPService.html":{}}}],["this.emailservice.sendqueuepositionalert",{"_index":2349,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.emailservice.sendqueuestatusupdate",{"_index":2352,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.ensurebucketexists",{"_index":1739,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.failedattempts.delete(key",{"_index":1460,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.failedattempts.get(key",{"_index":1436,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.failedattempts.set(key",{"_index":1453,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.findone(id",{"_index":263,"title":{},"body":{"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.finduserbyemail(email",{"_index":1630,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.generatealltimeslots",{"_index":821,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.getaccountlockout(identifier",{"_index":1467,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.getprofile(targetuserid",{"_index":1619,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.handledailyqueuereset",{"_index":2089,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["this.isresetinprogress",{"_index":2038,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["this.isvalidemail(email",{"_index":1495,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.isvalidemail(updateuserdto.email",{"_index":1531,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.jwtservice.sign(payload",{"_index":1490,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.logdailystatistics(startofday",{"_index":2075,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["this.logger.error",{"_index":826,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{}}}],["this.logger.error('admin",{"_index":1622,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.logger.error('delete",{"_index":1703,"title":{},"body":{"injectables/MinioService.html":{}}}],["this.logger.error('error",{"_index":849,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService-1.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["this.logger.error('forgot",{"_index":2313,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.logger.error('get",{"_index":1701,"title":{},"body":{"injectables/MinioService.html":{}}}],["this.logger.error('login",{"_index":1493,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.logger.error('queue",{"_index":2356,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.logger.error('registration",{"_index":1520,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["this.logger.error('reset",{"_index":2322,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.logger.error('test",{"_index":2334,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.logger.error('upload",{"_index":1698,"title":{},"body":{"injectables/MinioService.html":{}}}],["this.logger.error('user",{"_index":1562,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.logger.error(`error",{"_index":795,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.logger.log",{"_index":678,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/LockoutData.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{}}}],["this.logger.log('admin",{"_index":2247,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.logger.log('comparing",{"_index":1482,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.logger.log('fetching",{"_index":634,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.logger.log('found",{"_index":2117,"title":{},"body":{"controllers/QueuesController.html":{}}}],["this.logger.log('generated",{"_index":1491,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.logger.log('get",{"_index":2108,"title":{},"body":{"controllers/QueuesController.html":{}}}],["this.logger.log('login",{"_index":1477,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["this.logger.log('password",{"_index":1486,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.logger.log('processing",{"_index":2128,"title":{},"body":{"controllers/QueuesController.html":{}}}],["this.logger.log('received",{"_index":1209,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["this.logger.log('stored",{"_index":1480,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.logger.log('target",{"_index":2250,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.logger.log('update",{"_index":2251,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.logger.log('user",{"_index":1479,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.logger.log(`account",{"_index":1461,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.logger.log(`bucket",{"_index":1743,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.logger.log(`client",{"_index":1952,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.logger.log(`creating",{"_index":629,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.logger.log(`deleted",{"_index":799,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.logger.log(`deleting",{"_index":682,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.logger.log(`fetching",{"_index":638,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.logger.log(`file",{"_index":1696,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["this.logger.log(`minio",{"_index":1736,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.logger.log(`password",{"_index":1634,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.logger.log(`returning",{"_index":2146,"title":{},"body":{"controllers/QueuesController.html":{}}}],["this.logger.log(`socket",{"_index":1963,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.logger.log(`updated",{"_index":791,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["this.logger.log(`updating",{"_index":670,"title":{},"body":{"controllers/AppointmentController.html":{}}}],["this.logger.warn",{"_index":1449,"title":{},"body":{"interfaces/LockoutData.html":{},"injectables/QueueSchedulerService.html":{}}}],["this.minioclient",{"_index":1671,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["this.minioclient.bucketexists(this.bucketname",{"_index":1740,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.minioclient.listobjects",{"_index":1757,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.minioclient.makebucket(this.bucketname",{"_index":1741,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.minioclient.presignedgetobject",{"_index":1699,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["this.minioclient.putobject",{"_index":1689,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["this.minioclient.removeobject(this.bucketname",{"_index":1702,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["this.minioclient.statobject(this.bucketname",{"_index":1753,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["this.otprepository.create",{"_index":1813,"title":{},"body":{"injectables/OTPService.html":{}}}],["this.otprepository.delete",{"_index":1821,"title":{},"body":{"injectables/OTPService.html":{}}}],["this.otprepository.findone",{"_index":1817,"title":{},"body":{"injectables/OTPService.html":{}}}],["this.otprepository.save(otpentity",{"_index":1814,"title":{},"body":{"injectables/OTPService.html":{}}}],["this.otprepository.update",{"_index":1795,"title":{},"body":{"injectables/OTPService.html":{}}}],["this.otpservice.generateotp(email",{"_index":2281,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.otpservice.verifyotp",{"_index":2213,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.otpservice.verifyotp(email",{"_index":2294,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["this.queuegateway.notifyqueueupdate(queue.id",{"_index":2065,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["this.queuegateway.server.emit('dailyqueuereset",{"_index":2068,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["this.queuerepository.count",{"_index":2080,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["this.queuerepository.find",{"_index":2055,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["this.queuerepository.save",{"_index":2060,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["this.queueservice.findbystatuswithdetails(queuestatus.pending",{"_index":2115,"title":{},"body":{"controllers/QueuesController.html":{}}}],["this.queueservice.findbystatuswithdetails(queuestatus.serving",{"_index":2116,"title":{},"body":{"controllers/QueuesController.html":{}}}],["this.queueservice.findbyuseridwithdetails(userid",{"_index":2153,"title":{},"body":{"controllers/QueuesController.html":{}}}],["this.queueservice.findone(queueid",{"_index":2160,"title":{},"body":{"controllers/QueuesController.html":{}}}],["this.queueservice.getqueuedetails(queueid",{"_index":1959,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.queueservice.getqueueposition(queueid",{"_index":1961,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.reflector.getallandoverride",{"_index":2427,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["this.rolesrepository.find",{"_index":2494,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesrepository.findby",{"_index":2502,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesrepository.findone",{"_index":2495,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.rolesservice.assignrolestouser",{"_index":1604,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.rolesservice.assignrolestouser(id",{"_index":1371,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.rolesservice.assignrolestouser(user.id",{"_index":1398,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.rolesservice.findall",{"_index":2464,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.findbyname('citizen",{"_index":1508,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.rolesservice.findone(+id",{"_index":2465,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.findone(roleid",{"_index":1601,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.rolesservice.findone(updateuserdto.defaultroleid",{"_index":1609,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.rolesservice.getuserroles(+userid",{"_index":2467,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.rolesservice.getuserroles(adminid",{"_index":1578,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.rolesservice.getuserroles(targetuserid",{"_index":1611,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.rolesservice.getuserroles(user.id",{"_index":1487,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.rolesservice.getuserroles(userid",{"_index":1528,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.server.emit('counterlistupdate",{"_index":1973,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.server.emit('queuelistupdate",{"_index":1970,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.server.to(`counter_${counterid}`).emit('counterupdate",{"_index":1972,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.server.to(`queue_${queueid}`).emit('queueupdate",{"_index":1969,"title":{},"body":{"classes/QueueGateway.html":{}}}],["this.updateuserinfo(targetuserid",{"_index":1592,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.usersrepository",{"_index":1307,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.count",{"_index":1373,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.create",{"_index":1394,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.delete(id",{"_index":1372,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.delete(user.id",{"_index":1516,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.usersrepository.find",{"_index":1384,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.findone",{"_index":1332,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.save(user",{"_index":1397,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.update",{"_index":1633,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.usersrepository.update(id",{"_index":1363,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["this.usersrepository.update(targetuserid",{"_index":1617,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.usersrepository.update(userid",{"_index":1557,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.usersservice.adminupdate(+id",{"_index":2656,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.create(userwithhashedpassword",{"_index":2662,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall",{"_index":2647,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(req.user.id",{"_index":2648,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(user.id",{"_index":2665,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(userid",{"_index":2654,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getstats",{"_index":2649,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.remove(+id",{"_index":2657,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.updatestatus(+id",{"_index":2658,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.validatepasswordstrength",{"_index":1537,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.validatepasswordstrength(newpassword",{"_index":1629,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["this.validatepasswordstrength(password",{"_index":1499,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["throw",{"_index":259,"title":{},"body":{"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"interfaces/AuthenticatedUser.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["time",{"_index":363,"title":{},"body":{"modules/AppModule.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"injectables/OTPService.html":{},"classes/QueueNotificationDto.html":{},"interfaces/RequestWithUser.html":{},"index.html":{}}}],["time_zone",{"_index":367,"title":{},"body":{"modules/AppModule.html":{}}}],["timeremaining",{"_index":1455,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["timestamp",{"_index":1769,"title":{},"body":{"entities/OTP.html":{},"injectables/QueueSchedulerService.html":{}}}],["timezone",{"_index":2019,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["title",{"_index":120,"title":{},"body":{"entities/Announcement.html":{},"classes/CreateAnnouncementDto.html":{}}}],["today",{"_index":773,"title":{},"body":{"injectables/AppointmentService.html":{},"injectables/QueueSchedulerService.html":{}}}],["today's",{"_index":842,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["today.getdate",{"_index":2047,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["today.getfullyear",{"_index":2045,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["today.getmonth",{"_index":2046,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["today.sethours(0",{"_index":774,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["todayappointments",{"_index":843,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["token",{"_index":912,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{}}}],["tokens",{"_index":895,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["tolowercase",{"_index":1731,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["tomorrow",{"_index":827,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["tomorrow.sethours(0",{"_index":829,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["total",{"_index":848,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"classes/PaginatedUsersResponseDto.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["totalcount",{"_index":837,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["totalpages",{"_index":1330,"title":{},"body":{"interfaces/FindAllOptions.html":{},"classes/PaginatedUsersResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["totalusers",{"_index":1293,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["touch",{"_index":2872,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":2581,"title":{},"body":{"classes/UserQueryDto.html":{},"dependencies.html":{}}}],["trigger",{"_index":2087,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["triggered",{"_index":2088,"title":{},"body":{"injectables/QueueSchedulerService.html":{}}}],["true",{"_index":136,"title":{},"body":{"entities/Announcement.html":{},"injectables/AnnouncementService.html":{},"modules/AppModule.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"classes/AppointmentNotificationDto.html":{},"entities/Counter.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["true})@joincolumn({name",{"_index":524,"title":{},"body":{"entities/Appointment.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["try",{"_index":761,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["twitter",{"_index":2878,"title":{},"body":{"index.html":{}}}],["two",{"_index":2257,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["type",{"_index":29,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Announcement.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"modules/AppModule.html":{},"classes/ApplicationNotificationDto.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"classes/AppointmentNotificationDto.html":{},"injectables/AppointmentService.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"classes/QueueGateway.html":{},"classes/QueueNotificationDto.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"classes/ResetPasswordDto.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"guards/RolesGuard.html":{},"injectables/RolesService.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["typeof",{"_index":1563,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["typeorm",{"_index":145,"title":{},"body":{"entities/Announcement.html":{},"injectables/AnnouncementService.html":{},"entities/ApplicationStatusHistory.html":{},"entities/Appointment.html":{},"injectables/AppointmentService.html":{},"entities/Counter.html":{},"entities/DocumentApplication.html":{},"entities/DocumentFile.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"entities/Queue.html":{},"entities/QueueDetails.html":{},"injectables/QueueSchedulerService.html":{},"entities/Role.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":225,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature",{"_index":1254,"title":{},"body":{"modules/DocumentApplicationsModule.html":{}}}],["typeormmodule.forfeature([announcement",{"_index":230,"title":{},"body":{"modules/AnnouncementModule.html":{}}}],["typeormmodule.forfeature([appointment",{"_index":689,"title":{},"body":{"modules/AppointmentModule.html":{}}}],["typeormmodule.forfeature([otp",{"_index":374,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmodule.forfeature([queue",{"_index":1987,"title":{},"body":{"modules/QueueModule.html":{}}}],["typeormmodule.forfeature([role",{"_index":2479,"title":{},"body":{"modules/RolesModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":874,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":317,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":2892,"title":{},"body":{"miscellaneous/variables.html":{}}}],["types",{"_index":2512,"title":{},"body":{"classes/UpdateAnnouncementDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{}}}],["types/nodemailer",{"_index":2736,"title":{},"body":{"dependencies.html":{}}}],["types/qrcode",{"_index":2738,"title":{},"body":{"dependencies.html":{}}}],["types/speakeasy",{"_index":2740,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":1429,"title":{},"body":{"interfaces/LockoutData.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["ui",{"_index":2765,"title":{},"body":{"dependencies.html":{}}}],["unauthorized",{"_index":2199,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["unauthorizedexception",{"_index":887,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["unauthorizedexception('admin",{"_index":1576,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["unauthorizedexception('insufficient",{"_index":1583,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["unauthorizedexception('invalid",{"_index":911,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["unauthorizedexception('user",{"_index":1527,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["uncomment",{"_index":1178,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"modules/QueueModule.html":{}}}],["undefined",{"_index":44,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Appointment.html":{},"classes/AppointmentNotificationDto.html":{},"interfaces/AuthenticatedUser.html":{},"entities/Counter.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Queue.html":{},"interfaces/RequestWithUser.html":{},"classes/SendOtpDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{}}}],["undefined})@isarray()@isoptional",{"_index":45,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["undefined})@isenum(applicationtype",{"_index":978,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["undefined})@isobject",{"_index":983,"title":{},"body":{"classes/CreateDocumentApplicationDto.html":{}}}],["undefined})@isoptional()@isarray()@isnumber",{"_index":1045,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["undefined})@isstring",{"_index":402,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/QueueNotificationDto.html":{}}}],["unexpected",{"_index":1569,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["unique",{"_index":534,"title":{},"body":{"entities/Appointment.html":{},"entities/Queue.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["uniqueness",{"_index":1336,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["unit",{"_index":2796,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":555,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/LockoutData.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser-1.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["unlicensed",{"_index":2888,"title":{},"body":{"properties.html":{}}}],["unsafe",{"_index":2638,"title":{},"body":{"controllers/UsersController.html":{}}}],["unused",{"_index":1431,"title":{},"body":{"interfaces/LockoutData.html":{},"controllers/UsersController.html":{}}}],["update",{"_index":11,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"classes/QueueGateway.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update(id",{"_index":178,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["updateannouncementdto",{"_index":179,"title":{"classes/UpdateAnnouncementDto.html":{}},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"classes/UpdateAnnouncementDto.html":{},"coverage.html":{}}}],["updateappointmentdto",{"_index":592,"title":{"classes/UpdateAppointmentDto.html":{}},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"classes/UpdateAppointmentDto.html":{},"coverage.html":{}}}],["updateappointmentdto.appointmentdate",{"_index":782,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["updateappointmentdto.appointmenttime",{"_index":783,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["updated",{"_index":789,"title":{},"body":{"injectables/AppointmentService.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updated_at",{"_index":1084,"title":{},"body":{"entities/DocumentApplication.html":{},"entities/User.html":{}}}],["updatedat",{"_index":121,"title":{},"body":{"entities/Announcement.html":{},"entities/Appointment.html":{},"entities/DocumentApplication.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{}}}],["updatedata",{"_index":1343,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.contactnumber",{"_index":1348,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.defaultroleid",{"_index":1352,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.email",{"_index":1344,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.firstname",{"_index":1346,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.lastname",{"_index":1347,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.middlename",{"_index":1350,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.name",{"_index":1361,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.nameextension",{"_index":1351,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedata.username",{"_index":1345,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["updatedatecolumn",{"_index":142,"title":{},"body":{"entities/Announcement.html":{},"entities/Appointment.html":{},"entities/DocumentApplication.html":{},"entities/User.html":{}}}],["updatedatecolumn({name",{"_index":1083,"title":{},"body":{"entities/DocumentApplication.html":{},"entities/User.html":{}}}],["updatedocumentapplicationdto",{"_index":1163,"title":{"classes/UpdateDocumentApplicationDto.html":{}},"body":{"controllers/DocumentApplicationsController.html":{},"classes/UpdateDocumentApplicationDto.html":{},"coverage.html":{}}}],["updatedto",{"_index":1162,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["updateduser",{"_index":1558,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["updateduser.defaultrole?.name",{"_index":1561,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["updatepassword(email",{"_index":1628,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["updateprofile",{"_index":2226,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["updatequeuedto",{"_index":2522,"title":{"classes/UpdateQueueDto.html":{}},"body":{"classes/UpdateQueueDto.html":{},"coverage.html":{}}}],["updates",{"_index":712,"title":{},"body":{"classes/AppointmentNotificationDto.html":{},"interfaces/LockoutData.html":{},"classes/QueueGateway.html":{},"classes/QueueNotificationDto.html":{},"interfaces/RequestWithUser.html":{},"index.html":{}}}],["updatestatus",{"_index":545,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updatestatus(id",{"_index":595,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updatestatusdto",{"_index":2635,"title":{},"body":{"controllers/UsersController.html":{}}}],["updatestatusdto.isactive",{"_index":2659,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuserdto",{"_index":14,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateuserdto.defaultroleid",{"_index":1608,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["updateuserdto.email",{"_index":1530,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["updateuserdto.firstname",{"_index":1542,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["updateuserdto.lastname",{"_index":1544,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["updateuserdto.middlename",{"_index":1543,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["updateuserdto.nameextension",{"_index":1545,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["updateuserdto.password",{"_index":1536,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["updateuserdto.roleids",{"_index":1597,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["updateuserdto.roleids.includes(updateuserdto.defaultroleid",{"_index":1616,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["updateuserdto.roleids.join",{"_index":1606,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["updateuserdto.roleids.length",{"_index":1598,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["updateuserdto.username",{"_index":1533,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["updateuserdto:22",{"_index":61,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:27",{"_index":86,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:37",{"_index":84,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:42",{"_index":65,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:47",{"_index":71,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:52",{"_index":68,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:60",{"_index":77,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:68",{"_index":59,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto:76",{"_index":56,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["updateuserdto['name",{"_index":1551,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["updateuserinfo(userid",{"_index":1529,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["updateuserstatusdto",{"_index":2532,"title":{"classes/UpdateUserStatusDto.html":{}},"body":{"classes/UpdateUserStatusDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["updating",{"_index":96,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"interfaces/LockoutData.html":{},"classes/UpdateUserDto.html":{}}}],["upload",{"_index":1173,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"injectables/MinioService-1.html":{}}}],["uploaddocument",{"_index":1122,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["uploaddocument(id",{"_index":1168,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["uploaded",{"_index":1697,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["uploaded_at",{"_index":1277,"title":{},"body":{"entities/DocumentFile.html":{}}}],["uploadedat",{"_index":1259,"title":{},"body":{"entities/DocumentFile.html":{}}}],["uploadedfile",{"_index":1176,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["uploadfile",{"_index":1657,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["uploadfile(file",{"_index":1664,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["uploading",{"_index":1750,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["uppercase",{"_index":443,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["url",{"_index":1154,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["usage",{"_index":2325,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["use",{"_index":333,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/LockoutData.html":{},"modules/QueueModule.html":{},"injectables/QueueSchedulerService.html":{},"interfaces/RequestWithUser.html":{}}}],["used",{"_index":1797,"title":{},"body":{"injectables/OTPService.html":{},"interfaces/RequestWithUser.html":{}}}],["usefactory",{"_index":319,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["useguards",{"_index":598,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard",{"_index":621,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["useguards(rolesguard",{"_index":631,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"controllers/UsersController.html":{}}}],["useinterceptors",{"_index":1175,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["user",{"_index":12,"title":{"entities/User.html":{}},"body":{"classes/AdminUpdateUserDto.html":{},"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"modules/AuthModule.html":{},"classes/CreateUserDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/QueueDetails.html":{},"controllers/QueuesController.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/RequestWithUser-1.html":{},"interfaces/RequestWithUser-2.html":{},"entities/Role.html":{},"guards/RolesGuard.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"entities/User.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":2230,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["user'})@isoptional()@isnumber",{"_index":1022,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.defaultrole?.name",{"_index":1329,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.defaultroleid",{"_index":1510,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["user.dto",{"_index":1288,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":7,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:102",{"_index":1023,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:19",{"_index":1027,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":2528,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:27",{"_index":1050,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:36",{"_index":1044,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:37",{"_index":2531,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:42",{"_index":2529,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:44",{"_index":1029,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:47",{"_index":2530,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:52",{"_index":1033,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:60",{"_index":1030,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:68",{"_index":1038,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:76",{"_index":1041,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:84",{"_index":1020,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:90",{"_index":40,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["user.dto.ts:94",{"_index":1047,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:99",{"_index":46,"title":{},"body":{"classes/AdminUpdateUserDto.html":{}}}],["user.email",{"_index":1225,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.firstname",{"_index":1315,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.id",{"_index":628,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/LockoutData.html":{}}}],["user.lastname",{"_index":1316,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.middlename",{"_index":1357,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.nameextension",{"_index":1360,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.password",{"_index":1425,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["user.roles",{"_index":2448,"title":{},"body":{"entities/Role.html":{},"injectables/RolesService.html":{}}}],["user.roles.map((role",{"_index":1327,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user.roles.some((role",{"_index":666,"title":{},"body":{"controllers/AppointmentController.html":{},"controllers/DocumentApplicationsController.html":{}}}],["user.username",{"_index":1317,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["user/:userid",{"_index":2238,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["user?.id",{"_index":1218,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["user?.roles.some((role",{"_index":1216,"title":{},"body":{"controllers/DocumentApplicationsController.html":{}}}],["user@example.com",{"_index":392,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/AppointmentNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/QueueNotificationDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["user@example.com'})@isemail",{"_index":1991,"title":{},"body":{"classes/QueueNotificationDto.html":{}}}],["user@example.com'})@isemail()@isnotempty",{"_index":706,"title":{},"body":{"classes/AppointmentNotificationDto.html":{}}}],["user_id",{"_index":1086,"title":{},"body":{"entities/DocumentApplication.html":{},"entities/QueueDetails.html":{},"entities/User.html":{}}}],["user_roles",{"_index":2557,"title":{},"body":{"entities/User.html":{}}}],["userid",{"_index":505,"title":{},"body":{"entities/Appointment.html":{},"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"interfaces/AuthenticatedUser.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateQueueDto.html":{},"entities/DocumentApplication.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"entities/QueueDetails.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{}}}],["username",{"_index":28,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"modules/AppModule.html":{},"classes/CreateUserDto.html":{},"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserQueryDto.html":{},"classes/UserResponseDto.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["username'})@isoptional()@isstring",{"_index":2579,"title":{},"body":{"classes/UserQueryDto.html":{}}}],["userquerydto",{"_index":2570,"title":{"classes/UserQueryDto.html":{}},"body":{"classes/UserQueryDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["userqueues",{"_index":2152,"title":{},"body":{"controllers/QueuesController.html":{}}}],["userqueues.length",{"_index":2154,"title":{},"body":{"controllers/QueuesController.html":{}}}],["userqueues.map((queue",{"_index":2155,"title":{},"body":{"controllers/QueuesController.html":{}}}],["userresponsedto",{"_index":1832,"title":{"classes/UserResponseDto.html":{}},"body":{"classes/PaginatedUsersResponseDto.html":{},"classes/UserResponseDto.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["userroles",{"_index":1610,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["userroles.map((role",{"_index":2433,"title":{},"body":{"interfaces/RequestWithUser-2.html":{},"guards/RolesGuard.html":{}}}],["userroles.some",{"_index":1613,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["users",{"_index":1135,"title":{},"body":{"controllers/DocumentApplicationsController.html":{},"interfaces/FindAllOptions.html":{},"classes/PaginatedUsersResponseDto.html":{},"entities/Role.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users.controller",{"_index":2671,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.map((user",{"_index":1325,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["users.service",{"_index":2640,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/entities/user.entity",{"_index":529,"title":{},"body":{"entities/Appointment.html":{},"modules/AuthModule.html":{},"entities/DocumentApplication.html":{},"interfaces/LockoutData.html":{},"entities/QueueDetails.html":{},"entities/Role.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{}}}],["users/users.module",{"_index":301,"title":{},"body":{"modules/AppModule.html":{}}}],["usersbyrole",{"_index":1296,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"injectables/UsersService.html":{}}}],["usersbyroledto",{"_index":2607,"title":{"classes/UsersByRoleDto.html":{}},"body":{"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"coverage.html":{}}}],["userscontroller",{"_index":2610,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":290,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":1304,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"injectables/RolesService.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{}}}],["usersservice",{"_index":1301,"title":{"injectables/UsersService.html":{}},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["userstats",{"_index":1292,"title":{"interfaces/UserStats.html":{}},"body":{"interfaces/FindAllOptions.html":{},"interfaces/UserStats.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userstatsresponsedto",{"_index":2600,"title":{"classes/UserStatsResponseDto.html":{}},"body":{"classes/UserStatsResponseDto.html":{},"classes/UsersByRoleDto.html":{},"coverage.html":{}}}],["userupdatefields",{"_index":1556,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["userwithhashedpassword",{"_index":2661,"title":{},"body":{"controllers/UsersController.html":{}}}],["userwithoutpassword",{"_index":1326,"title":{},"body":{"interfaces/FindAllOptions.html":{},"interfaces/LockoutData.html":{},"interfaces/UserStats.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["userwithroles",{"_index":2664,"title":{},"body":{"controllers/UsersController.html":{}}}],["uses",{"_index":2301,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["usessl",{"_index":1677,"title":{},"body":{"injectables/MinioService.html":{},"injectables/MinioService-1.html":{}}}],["usesslvalue",{"_index":1728,"title":{},"body":{"injectables/MinioService-1.html":{}}}],["using",{"_index":365,"title":{},"body":{"modules/AppModule.html":{},"controllers/QueuesController.html":{},"interfaces/RequestWithUser.html":{},"injectables/RolesService.html":{},"index.html":{}}}],["valid",{"_index":398,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["validate",{"_index":1405,"title":{},"body":{"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["validate(payload",{"_index":906,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["validatepasswordstrength(password",{"_index":1635,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["validates",{"_index":2285,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["validateuser(logindto",{"_index":1422,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["validating",{"_index":894,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["validation",{"_index":907,"title":{},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["validator",{"_index":93,"title":{},"body":{"classes/AdminUpdateUserDto.html":{},"classes/ApplicationNotificationDto.html":{},"classes/AppointmentNotificationDto.html":{},"classes/CreateAnnouncementDto.html":{},"classes/CreateAppointmentDto.html":{},"classes/CreateDocumentApplicationDto.html":{},"classes/CreateQueueDto.html":{},"classes/CreateUserDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/LoginDto.html":{},"classes/QueueNotificationDto.html":{},"classes/RegisterDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/UpdateAppointmentDto.html":{},"classes/UpdateDocumentApplicationDto.html":{},"classes/UpdateQueueDto.html":{},"classes/UpdateUserDto.html":{},"classes/UpdateUserStatusDto.html":{},"classes/UserQueryDto.html":{},"classes/VerifyOtpDto.html":{},"dependencies.html":{}}}],["validity",{"_index":762,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["value",{"_index":172,"title":{},"body":{"controllers/AnnouncementController.html":{},"injectables/AnnouncementService.html":{},"injectables/AppointmentService.html":{},"injectables/MinioService.html":{},"injectables/MinioService-1.html":{},"injectables/OTPService.html":{},"classes/QueueGateway.html":{},"injectables/QueueSchedulerService.html":{},"classes/SendOtpDto.html":{},"classes/UserQueryDto.html":{},"injectables/UsersService.html":{},"classes/VerifyOtpDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["varchar",{"_index":126,"title":{},"body":{"entities/Announcement.html":{}}}],["variable",{"_index":335,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{}}}],["variables",{"_index":900,"title":{"miscellaneous/variables.html":{}},"body":{"interfaces/AuthenticatedUser.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["vars",{"_index":1432,"title":{},"body":{"interfaces/LockoutData.html":{},"controllers/UsersController.html":{}}}],["verification",{"_index":409,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"entities/OTP.html":{},"injectables/OTPService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["verification'})@isstring()@isoptional",{"_index":2505,"title":{},"body":{"classes/SendOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["verified",{"_index":1766,"title":{},"body":{"entities/OTP.html":{},"injectables/OTPService.html":{},"interfaces/RequestWithUser.html":{}}}],["verifies",{"_index":2283,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["verify",{"_index":1573,"title":{},"body":{"interfaces/LockoutData.html":{},"interfaces/RequestWithUser.html":{}}}],["verifying",{"_index":2295,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["verifyotp",{"_index":1780,"title":{},"body":{"injectables/OTPService.html":{},"interfaces/RequestWithUser.html":{}}}],["verifyotp(email",{"_index":1787,"title":{},"body":{"injectables/OTPService.html":{}}}],["verifyotpdto",{"_index":411,"title":{"classes/VerifyOtpDto.html":{}},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{},"coverage.html":{}}}],["version",{"_index":2886,"title":{},"body":{"properties.html":{}}}],["via",{"_index":429,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["video",{"_index":2842,"title":{},"body":{"index.html":{}}}],["view",{"_index":2650,"title":{},"body":{"controllers/UsersController.html":{}}}],["visit",{"_index":2832,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":2845,"title":{},"body":{"index.html":{}}}],["void",{"_index":1915,"title":{},"body":{"classes/QueueGateway.html":{}}}],["vs",{"_index":2292,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["waiting",{"_index":1994,"title":{},"body":{"classes/QueueNotificationDto.html":{}}}],["walk",{"_index":2148,"title":{},"body":{"controllers/QueuesController.html":{}}}],["watch",{"_index":2792,"title":{},"body":{"index.html":{}}}],["we'll",{"_index":1589,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["website",{"_index":2876,"title":{},"body":{"index.html":{}}}],["websocketgateway",{"_index":1935,"title":{},"body":{"classes/QueueGateway.html":{}}}],["websocketserver",{"_index":1910,"title":{},"body":{"classes/QueueGateway.html":{}}}],["weekend",{"_index":766,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["weekends",{"_index":771,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["welcome",{"_index":2215,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["what's",{"_index":2245,"title":{},"body":{"interfaces/RequestWithUser.html":{}}}],["willbeassigned",{"_index":1615,"title":{},"body":{"interfaces/LockoutData.html":{}}}],["without",{"_index":2663,"title":{},"body":{"controllers/UsersController.html":{}}}],["wk001",{"_index":2004,"title":{},"body":{"classes/QueueNotificationDto.html":{}}}],["wk001'})@isstring",{"_index":2000,"title":{},"body":{"classes/QueueNotificationDto.html":{}}}],["working",{"_index":2242,"title":{},"body":{"interfaces/RequestWithUser.html":{},"index.html":{}}}],["world",{"_index":378,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":2855,"title":{},"body":{"index.html":{}}}],["yes",{"_index":563,"title":{},"body":{"controllers/AppointmentController.html":{},"injectables/AppointmentService.html":{},"controllers/DocumentApplicationsController.html":{},"interfaces/LockoutData.html":{},"injectables/MinioService-1.html":{}}}],["you'd",{"_index":2869,"title":{},"body":{"index.html":{}}}],["you're",{"_index":2800,"title":{},"body":{"index.html":{}}}],["yyyy",{"_index":845,"title":{},"body":{"injectables/AppointmentService.html":{}}}],["z\\\\d@$!%*?&]{8",{"_index":437,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["z\\d",{"_index":442,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["z\\d@$!%*?&]{8,}$'})@isstring()@length(8",{"_index":2437,"title":{},"body":{"classes/ResetPasswordDto.html":{}}}],["z])(?=.*[a",{"_index":434,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["z])(?=.*\\\\d)(?=.*[@$!%*?&])[a",{"_index":435,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*?&])[a",{"_index":441,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["za",{"_index":436,"title":{},"body":{"classes/ApplicationNotificationDto.html":{},"classes/ForgotPasswordDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ResetPasswordDto.html":{},"classes/SendOtpDto.html":{},"classes/TestOtpDto.html":{},"classes/VerifyOtpDto.html":{}}}],["zone",{"_index":364,"title":{},"body":{"modules/AppModule.html":{}}}],["zoom",{"_index":221,"title":{},"body":{"modules/AnnouncementModule.html":{},"modules/AppModule.html":{},"modules/AppointmentModule.html":{},"modules/AuthModule.html":{},"modules/DocumentApplicationsModule.html":{},"modules/QueueModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AdminUpdateUserDto.html":{"url":"classes/AdminUpdateUserDto.html","title":"class - AdminUpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AdminUpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/update-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for admin to update any user\n\n            \n\n            \n                Extends\n            \n            \n                            UpdateUserDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                defaultRoleId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                roleIds\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                contactNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                middleName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                nameExtension\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        defaultRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Default role ID for the user', example: 2})@IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        roleIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Array of role IDs to assign to the user', example: undefined, type: undefined})@IsArray()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:99\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Complete address', example: '123 Main St, San Ildefonso, Bulacan'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:76\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        contactNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Contact number', example: '09123456789'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:68\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User email address', example: 'test@example.com'})@IsEmail()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:22\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'First name', example: 'John'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:42\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Last name', example: 'Doe'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:52\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Middle name', example: 'Robert'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:47\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        nameExtension\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Name extension (e.g., Jr., III)', example: 'Jr.'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:60\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User password (min 8 characters)', example: 'password123', minLength: 8})@IsString()@IsOptional()@MinLength(8)\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:37\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Username', example: 'john_doe'})@IsString()@IsOptional()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         UpdateUserDto\n\n                            \n                        \n                    \n                        \n                                Defined in         UpdateUserDto:27\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsOptional,\n  IsString,\n  MinLength,\n  IsNumber,\n  IsArray,\n} from 'class-validator';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\n/**\n * DTO for updating user information (citizen)\n * @class UpdateUserDto\n */\nexport class UpdateUserDto {\n  @ApiPropertyOptional({\n    description: 'User email address',\n    example: 'test@example.com',\n  })\n  @IsEmail()\n  @IsOptional()\n  email?: string;\n\n  @ApiPropertyOptional({ description: 'Username', example: 'john_doe' })\n  @IsString()\n  @IsOptional()\n  username?: string;\n\n  @ApiPropertyOptional({\n    description: 'User password (min 8 characters)',\n    example: 'password123',\n    minLength: 8,\n  })\n  @IsString()\n  @IsOptional()\n  @MinLength(8)\n  password?: string;\n\n  @ApiPropertyOptional({ description: 'First name', example: 'John' })\n  @IsString()\n  @IsOptional()\n  firstName?: string;\n\n  @ApiPropertyOptional({ description: 'Middle name', example: 'Robert' })\n  @IsString()\n  @IsOptional()\n  middleName?: string;\n\n  @ApiPropertyOptional({ description: 'Last name', example: 'Doe' })\n  @IsString()\n  @IsOptional()\n  lastName?: string;\n\n  @ApiPropertyOptional({\n    description: 'Name extension (e.g., Jr., III)',\n    example: 'Jr.',\n  })\n  @IsString()\n  @IsOptional()\n  nameExtension?: string;\n\n  @ApiPropertyOptional({\n    description: 'Contact number',\n    example: '09123456789',\n  })\n  @IsString()\n  @IsOptional()\n  contactNumber?: string;\n\n  @ApiPropertyOptional({\n    description: 'Complete address',\n    example: '123 Main St, San Ildefonso, Bulacan',\n  })\n  @IsString()\n  @IsOptional()\n  address?: string;\n}\n\n/**\n * DTO for admin to update any user\n * @class AdminUpdateUserDto\n */\nexport class AdminUpdateUserDto extends UpdateUserDto {\n  @ApiPropertyOptional({\n    description: 'Default role ID for the user',\n    example: 2,\n  })\n  @IsNumber()\n  @IsOptional()\n  defaultRoleId?: number;\n\n  @ApiPropertyOptional({\n    description: 'Array of role IDs to assign to the user',\n    example: [1, 2],\n    type: [Number],\n  })\n  @IsArray()\n  @IsOptional()\n  roleIds?: number[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Announcement.html":{"url":"entities/Announcement.html","title":"entity - Announcement","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Announcement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/announcement/entities/announcement.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                createdBy\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                image\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                title\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/entities/announcement.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 100, default: 'admin'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/entities/announcement.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/entities/announcement.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/entities/announcement.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 500, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/entities/announcement.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'boolean', default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/entities/announcement.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/entities/announcement.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/entities/announcement.entity.ts:33\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  CreateDateColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity('announcements')\nexport class Announcement {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ type: 'varchar', length: 255 })\n  title: string;\n\n  @Column({ type: 'text' })\n  description: string;\n\n  @Column({ type: 'varchar', length: 500, nullable: true })\n  image: string;\n\n  @Column({ type: 'boolean', default: true })\n  isActive: boolean;\n\n  @Column({ type: 'varchar', length: 100, default: 'admin' })\n  createdBy: string;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AnnouncementController.html":{"url":"controllers/AnnouncementController.html","title":"controller - AnnouncementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AnnouncementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/announcement/announcement.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                announcements\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                getRecentAnnouncements\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createAnnouncementDto: CreateAnnouncementDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createAnnouncementDto\n                                            \n                                                            CreateAnnouncementDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getRecentAnnouncements\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRecentAnnouncements(limit: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('recent')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    5\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.controller.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateAnnouncementDto: UpdateAnnouncementDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.controller.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateAnnouncementDto\n                                            \n                                                            UpdateAnnouncementDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  ParseIntPipe,\n  Query,\n} from '@nestjs/common';\nimport { AnnouncementService } from './announcement.service';\nimport { CreateAnnouncementDto } from './dto/create-announcement.dto';\nimport { UpdateAnnouncementDto } from './dto/update-announcement.dto';\n\n@Controller('announcements')\nexport class AnnouncementController {\n  constructor(private readonly announcementService: AnnouncementService) {}\n\n  @Post()\n  create(@Body() createAnnouncementDto: CreateAnnouncementDto) {\n    return this.announcementService.create(createAnnouncementDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.announcementService.findAll();\n  }\n\n  @Get('recent')\n  getRecentAnnouncements(@Query('limit', ParseIntPipe) limit: number = 5) {\n    return this.announcementService.getRecentAnnouncements(limit);\n  }\n\n  @Get(':id')\n  findOne(@Param('id', ParseIntPipe) id: number) {\n    return this.announcementService.findOne(id);\n  }\n\n  @Patch(':id')\n  update(\n    @Param('id', ParseIntPipe) id: number,\n    @Body() updateAnnouncementDto: UpdateAnnouncementDto,\n  ) {\n    return this.announcementService.update(id, updateAnnouncementDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id', ParseIntPipe) id: number) {\n    return this.announcementService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AnnouncementModule.html":{"url":"modules/AnnouncementModule.html","title":"module - AnnouncementModule","body":"\n                   \n\n\n\n\n    Modules\n    AnnouncementModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AnnouncementModule\n\n\n\ncluster_AnnouncementModule_exports\n\n\n\ncluster_AnnouncementModule_providers\n\n\n\n\nAnnouncementService \n\nAnnouncementService \n\n\n\nAnnouncementModule\n\nAnnouncementModule\n\nAnnouncementService  -->\n\nAnnouncementModule->AnnouncementService \n\n\n\n\n\nAnnouncementService\n\nAnnouncementService\n\nAnnouncementModule -->\n\nAnnouncementService->AnnouncementModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/announcement/announcement.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AnnouncementService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AnnouncementController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AnnouncementService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AnnouncementService } from './announcement.service';\nimport { AnnouncementController } from './announcement.controller';\nimport { Announcement } from './entities/announcement.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Announcement])],\n  controllers: [AnnouncementController],\n  providers: [AnnouncementService],\n  exports: [AnnouncementService],\n})\nexport class AnnouncementModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AnnouncementService.html":{"url":"injectables/AnnouncementService.html","title":"injectable - AnnouncementService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AnnouncementService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/announcement/announcement.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getRecentAnnouncements\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(announcementRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/announcement/announcement.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        announcementRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createAnnouncementDto: CreateAnnouncementDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createAnnouncementDto\n                                            \n                                                            CreateAnnouncementDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getRecentAnnouncements\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRecentAnnouncements(limit: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.service.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    5\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.service.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateAnnouncementDto: UpdateAnnouncementDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/announcement/announcement.service.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateAnnouncementDto\n                                            \n                                                            UpdateAnnouncementDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Announcement } from './entities/announcement.entity';\nimport { CreateAnnouncementDto } from './dto/create-announcement.dto';\nimport { UpdateAnnouncementDto } from './dto/update-announcement.dto';\n\n@Injectable()\nexport class AnnouncementService {\n  constructor(\n    @InjectRepository(Announcement)\n    private announcementRepository: Repository,\n  ) {}\n\n  async create(\n    createAnnouncementDto: CreateAnnouncementDto,\n  ): Promise {\n    const announcement = this.announcementRepository.create(\n      createAnnouncementDto,\n    );\n    return await this.announcementRepository.save(announcement);\n  }\n\n  async findAll(): Promise {\n    return await this.announcementRepository.find({\n      where: { isActive: true },\n      order: { createdAt: 'DESC' },\n    });\n  }\n\n  async findOne(id: number): Promise {\n    const announcement = await this.announcementRepository.findOne({\n      where: { id, isActive: true },\n    });\n\n    if (!announcement) {\n      throw new NotFoundException(`Announcement with ID ${id} not found`);\n    }\n\n    return announcement;\n  }\n\n  async update(\n    id: number,\n    updateAnnouncementDto: UpdateAnnouncementDto,\n  ): Promise {\n    const announcement = await this.findOne(id);\n\n    Object.assign(announcement, updateAnnouncementDto);\n    return await this.announcementRepository.save(announcement);\n  }\n\n  async remove(id: number): Promise {\n    const announcement = await this.findOne(id);\n    announcement.isActive = false; // Soft delete\n    await this.announcementRepository.save(announcement);\n  }\n\n  async getRecentAnnouncements(limit: number = 5): Promise {\n    return await this.announcementRepository.find({\n      where: { isActive: true },\n      order: { createdAt: 'DESC' },\n      take: limit,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                            \n                                    \n                                healthCheck\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        healthCheck\n                        \n                    \n                \n            \n            \n                \n                        \n                    healthCheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('health')\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     { status: string; }\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n\n  @Get('health')\n  healthCheck() {\n    return { status: 'ok' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAnnouncementModule\n\nAnnouncementModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAnnouncementModule->AppModule\n\n\n\n\n\nAppointmentModule\n\nAppointmentModule\n\nAppModule -->\n\nAppointmentModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nDocumentApplicationsModule\n\nDocumentApplicationsModule\n\nAppModule -->\n\nDocumentApplicationsModule->AppModule\n\n\n\n\n\nQueueModule\n\nQueueModule\n\nAppModule -->\n\nQueueModule->AppModule\n\n\n\n\n\nRolesModule\n\nRolesModule\n\nAppModule -->\n\nRolesModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nAppModule -->\n\nEmailService->AppModule\n\n\n\n\n\nOTPService\n\nOTPService\n\nAppModule -->\n\nOTPService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            EmailService\n                        \n                        \n                            OTPService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AnnouncementModule\n                        \n                        \n                            AppointmentModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            DocumentApplicationsModule\n                        \n                        \n                            QueueModule\n                        \n                        \n                            RolesModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ScheduleModule } from '@nestjs/schedule';\n// import { databaseConfig } from './config/database.config';\nimport { UsersModule } from './users/users.module';\nimport { AuthModule } from './auth/auth.module';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { RolesModule } from './roles/roles.module';\nimport { QueueModule } from './modules/queue/queue.module';\nimport { AppointmentModule } from './modules/appointment/appointment.module';\nimport { AnnouncementModule } from './modules/announcement/announcement.module';\nimport { DocumentApplicationsModule } from './modules/document-applications/document-applications.module';\nimport { OTP } from './entities/otp.entity';\nimport { OTPService } from './services/otp.service';\nimport { EmailService } from './services/email.service';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'mysql',\n        host: configService.get('DB_HOST'),\n        port: configService.get('DB_PORT'),\n        username: configService.get('DB_USERNAME'),\n        password: configService.get('DB_PASSWORD'),\n        database: configService.get('DB_NAME'),\n        entities: [__dirname + '/**/*.entity{.ts,.js}'],\n        synchronize: configService.get('DB_SYNCHRONIZE') === 'true', // Use environment variable\n        logging: configService.get('DB_LOGGING') === 'true', // Use environment variable\n        logger: 'advanced-console',\n        // Prevent data loss in development (below code is for development only)\n        // synchronize: true,\n        migrationsRun: false,\n        dropSchema: false,\n\n        // Only for development environments!\n        beforeConnect: async (connection): Promise => {\n          if (configService.get('NODE_ENV') !== 'production') {\n            const conn = connection as {\n              query: (sql: string) => Promise;\n            };\n            // Disable foreign key checks for development\n            await conn.query('SET FOREIGN_KEY_CHECKS=0;');\n            // Set time zone using environment variable\n            await conn.query(\n              `SET time_zone = '${configService.get('DB_TIMEZONE') || '+08:00'}';`,\n            );\n          }\n        },\n        afterConnect: async (connection): Promise => {\n          if (configService.get('NODE_ENV') !== 'production') {\n            await (\n              connection as { query: (sql: string) => Promise }\n            ).query('SET FOREIGN_KEY_CHECKS=1;');\n          }\n        },\n      }),\n    }),\n    UsersModule,\n    AuthModule,\n    RolesModule,\n    QueueModule,\n    AppointmentModule,\n    AnnouncementModule,\n    DocumentApplicationsModule,\n    ScheduleModule.forRoot(),\n    TypeOrmModule.forFeature([OTP]),\n  ],\n  controllers: [AppController],\n  providers: [AppService, OTPService, EmailService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ApplicationNotificationDto.html":{"url":"classes/ApplicationNotificationDto.html","title":"class - ApplicationNotificationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ApplicationNotificationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/otp.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                applicationId\n                            \n                            \n                                    \n                                    \n                                applicationType\n                            \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        applicationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Application ID', example: 'APP-001'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/otp.dto.ts:133\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        applicationType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Type of application', example: 'Birth Certificate'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/otp.dto.ts:148\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Recipient email address', example: 'user@example.com', format: 'email'})@IsEmail({}, {message: 'Please provide a valid email address'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/otp.dto.ts:126\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Application status', example: 'Approved', enum: undefined})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/otp.dto.ts:141\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsString,\n  IsOptional,\n  Length,\n  Matches,\n} from 'class-validator';\n\nexport class SendOtpDto {\n  @ApiProperty({\n    description: 'Email address to send OTP to',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiPropertyOptional({\n    description: 'Purpose of the OTP',\n    example: 'verification',\n    enum: ['verification', 'password_reset'],\n    default: 'verification',\n  })\n  @IsString()\n  @IsOptional()\n  purpose?: string = 'verification';\n}\n\nexport class VerifyOtpDto {\n  @ApiProperty({\n    description: 'Email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    description: '6-digit OTP code',\n    example: '123456',\n    minLength: 6,\n    maxLength: 6,\n    pattern: '^[0-9]{6}$',\n  })\n  @IsString()\n  @Length(6, 6, { message: 'OTP must be exactly 6 digits' })\n  @Matches(/^[0-9]{6}$/, { message: 'OTP must contain only numbers' })\n  otp: string;\n\n  @ApiPropertyOptional({\n    description: 'Purpose of the OTP verification',\n    example: 'verification',\n    enum: ['verification', 'password_reset'],\n    default: 'verification',\n  })\n  @IsString()\n  @IsOptional()\n  purpose?: string = 'verification';\n}\n\nexport class ForgotPasswordDto {\n  @ApiProperty({\n    description: 'Registered email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n}\n\nexport class ResetPasswordDto {\n  @ApiProperty({\n    description: 'Email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    description: '6-digit OTP code received via email',\n    example: '123456',\n    minLength: 6,\n    maxLength: 6,\n    pattern: '^[0-9]{6}$',\n  })\n  @IsString()\n  @Length(6, 6, { message: 'OTP must be exactly 6 digits' })\n  @Matches(/^[0-9]{6}$/, { message: 'OTP must contain only numbers' })\n  otp: string;\n\n  @ApiProperty({\n    description: 'New password (must meet complexity requirements)',\n    example: 'NewSecure123!',\n    minLength: 8,\n    pattern:\n      '^(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)(?=.*[@$!%*?&])[A-Za-z\\\\d@$!%*?&]{8,}$',\n  })\n  @IsString()\n  @Length(8, 100, { message: 'Password must be at least 8 characters long' })\n  @Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/, {\n    message:\n      'Password must contain uppercase, lowercase, numbers, and special characters',\n  })\n  newPassword: string;\n}\n\nexport class TestOtpDto {\n  @ApiProperty({\n    description: 'Email address for testing OTP generation',\n    example: 'test@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n}\n\nexport class ApplicationNotificationDto {\n  @ApiProperty({\n    description: 'Recipient email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    description: 'Application ID',\n    example: 'APP-001',\n  })\n  @IsString()\n  applicationId: string;\n\n  @ApiProperty({\n    description: 'Application status',\n    example: 'Approved',\n    enum: ['Pending', 'Approved', 'Rejected', 'Ready for Pickup'],\n  })\n  @IsString()\n  status: string;\n\n  @ApiProperty({\n    description: 'Type of application',\n    example: 'Birth Certificate',\n  })\n  @IsString()\n  applicationType: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/ApplicationStatusHistory.html":{"url":"entities/ApplicationStatusHistory.html","title":"entity - ApplicationStatusHistory","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  ApplicationStatusHistory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/document-applications/entities/application-status-history.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                application\n                            \n                            \n                                    \n                                applicationId\n                            \n                            \n                                    \n                                changedAt\n                            \n                            \n                                    \n                                changedBy\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                newStatus\n                            \n                            \n                                    \n                                oldStatus\n                            \n                            \n                                    \n                                statusMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        application\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DocumentApplication\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, app => app.statusHistory, {onDelete: 'CASCADE', nullable: false})@JoinColumn({name: 'application_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/application-status-history.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        applicationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'application_id', length: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/application-status-history.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        changedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'changed_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/application-status-history.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        changedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'changed_by', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/application-status-history.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/application-status-history.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        newStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'new_status', length: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/application-status-history.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        oldStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'old_status', length: 50, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/application-status-history.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        statusMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'status_message', type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/application-status-history.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  CreateDateColumn,\n  ManyToOne,\n  JoinColumn,\n  Index,\n} from 'typeorm';\nimport { DocumentApplication } from './document-application.entity';\n\n@Entity('application_status_history')\n@Index(['applicationId'])\n@Index(['changedAt'])\nexport class ApplicationStatusHistory {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ name: 'application_id', length: 50 })\n  applicationId: string;\n\n  @Column({ name: 'old_status', length: 50, nullable: true })\n  oldStatus: string;\n\n  @Column({ name: 'new_status', length: 50 })\n  newStatus: string;\n\n  @Column({ name: 'status_message', type: 'text', nullable: true })\n  statusMessage: string;\n\n  @Column({ name: 'changed_by', nullable: true })\n  changedBy: number;\n\n  @CreateDateColumn({ name: 'changed_at' })\n  changedAt: Date;\n\n  // Relations\n  @ManyToOne(() => DocumentApplication, (app) => app.statusHistory, {\n    onDelete: 'CASCADE',\n    nullable: false,\n  })\n  @JoinColumn({ name: 'application_id' })\n  application: DocumentApplication;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Appointment.html":{"url":"entities/Appointment.html","title":"entity - Appointment","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Appointment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/appointment/entities/appointment.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                address\n                            \n                            \n                                    \n                                appointmentDate\n                            \n                            \n                                    \n                                appointmentNumber\n                            \n                            \n                                    \n                                appointmentTime\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isGuest\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                middleInitial\n                            \n                            \n                                    \n                                phoneNumber\n                            \n                            \n                                    \n                                reasonOfVisit\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    \n                                user\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        appointmentDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'date'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        appointmentNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        appointmentTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isGuest\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        middleInitial\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reasonOfVisit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AppointmentStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: AppointmentStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {nullable: true})@JoinColumn({name: 'userId', foreignKeyConstraintName: 'FK_appointment_user'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/entities/appointment.entity.ts:59\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  ManyToOne,\n  JoinColumn,\n} from 'typeorm';\nimport { User } from '../../../users/entities/user.entity';\n\nexport enum AppointmentStatus {\n  PENDING = 'pending',\n  CONFIRMED = 'confirmed',\n  COMPLETED = 'completed',\n  CANCELLED = 'cancelled',\n}\n\n@Entity('appointments')\nexport class Appointment {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true })\n  appointmentNumber: string;\n\n  @Column()\n  firstName: string;\n\n  @Column()\n  lastName: string;\n\n  @Column({ nullable: true })\n  middleInitial: string;\n\n  @Column()\n  address: string;\n\n  @Column()\n  phoneNumber: string;\n\n  @Column()\n  reasonOfVisit: string;\n\n  @Column({ type: 'date' })\n  appointmentDate: string;\n\n  @Column()\n  appointmentTime: string;\n\n  @Column({\n    type: 'enum',\n    enum: AppointmentStatus,\n    default: AppointmentStatus.PENDING,\n  })\n  status: AppointmentStatus;\n\n  @Column({ nullable: true })\n  userId: number;\n\n  @ManyToOne(() => User, { nullable: true })\n  @JoinColumn({\n    name: 'userId',\n    foreignKeyConstraintName: 'FK_appointment_user',\n  })\n  user: User;\n\n  @Column({ default: false })\n  isGuest: boolean;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppointmentController.html":{"url":"controllers/AppointmentController.html","title":"controller - AppointmentController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppointmentController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/appointment/appointment.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                appointments\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    Async\n                                findByAppointmentNumber\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findUserAppointments\n                            \n                            \n                                    \n                                    Async\n                                getAvailableSlots\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getByDate\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getByDateRange\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getStats\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createAppointmentDto: CreateAppointmentDto, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create new appointment'})@ApiResponse({status: 201, description: 'Appointment created successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createAppointmentDto\n                                            \n                                                            CreateAppointmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(includeUser?: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(RolesGuard)@Roles('admin', 'staff', 'super_admin')@ApiOperation({summary: 'Get all appointments (Admin/Staff only)'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                includeUser\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        findByAppointmentNumber\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByAppointmentNumber(appointmentNumber: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('by-number/:number')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:135\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                appointmentNumber\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string, includeUser?: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'Get appointment by ID'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:123\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                includeUser\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findUserAppointments\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserAppointments(user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('mine')@ApiOperation({summary: 'Get user appointments'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getAvailableSlots\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAvailableSlots(date: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('available-slots')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:113\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getByDate\n                        \n                    \n                \n            \n            \n                \n                        \n                    getByDate(date: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('by-date')@UseGuards(JwtAuthGuard, RolesGuard)@Roles('admin', 'staff', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getByDateRange\n                        \n                    \n                \n            \n            \n                \n                        \n                    getByDateRange(startDate: string, endDate: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('date-range')@UseGuards(JwtAuthGuard, RolesGuard)@Roles('admin', 'staff', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:96\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                startDate\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                endDate\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('stats')@UseGuards(JwtAuthGuard, RolesGuard)@Roles('admin', 'staff', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:77\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.NO_CONTENT)@ApiOperation({summary: 'Delete appointment'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:188\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateAppointmentDto: UpdateAppointmentDto, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOperation({summary: 'Update appointment'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:142\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateAppointmentDto\n                                            \n                                                            UpdateAppointmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(id: string, status: AppointmentStatus)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/status')@UseGuards(JwtAuthGuard, RolesGuard)@Roles('admin', 'staff', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.controller.ts:169\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                status\n                                            \n                                                            AppointmentStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n  Query,\n  BadRequestException,\n  HttpCode,\n  HttpStatus,\n  Logger,\n} from '@nestjs/common';\nimport { AppointmentService } from './appointment.service';\nimport { CreateAppointmentDto } from './dto/create-appointment.dto';\nimport { UpdateAppointmentDto } from './dto/update-appointment.dto';\nimport { JwtAuthGuard } from '../../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../../auth/guards/roles.guard';\nimport { Roles } from '../../auth/decorators/roles.decorator';\nimport { AppointmentStatus } from './entities/appointment.entity';\nimport { User } from '../../auth/decorators/user.decorator';\nimport { AuthenticatedUser } from '../../auth/jwt.strategy';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n} from '@nestjs/swagger';\n\n@ApiTags('Appointments')\n@Controller('appointments')\n@UseGuards(JwtAuthGuard)\n@ApiBearerAuth('JWT-auth')\nexport class AppointmentController {\n  private readonly logger = new Logger(AppointmentController.name);\n\n  constructor(private readonly appointmentService: AppointmentService) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Create new appointment' })\n  @ApiResponse({ status: 201, description: 'Appointment created successfully' })\n  async create(\n    @Body() createAppointmentDto: CreateAppointmentDto,\n    @User() user: AuthenticatedUser,\n  ) {\n    // Set the userId from the authenticated user\n    createAppointmentDto.userId = user.id;\n\n    this.logger.log(`Creating appointment for user ${user.id}`);\n    return this.appointmentService.create(createAppointmentDto);\n  }\n\n  @Get()\n  @UseGuards(RolesGuard)\n  @Roles('admin', 'staff', 'super_admin')\n  @ApiOperation({ summary: 'Get all appointments (Admin/Staff only)' })\n  async findAll(@Query('includeUser') includeUser?: string) {\n    this.logger.log('Fetching all appointments');\n\n    const relations = includeUser === 'false' ? [] : ['user'];\n\n    return this.appointmentService.findAll({ relations });\n  }\n\n  @Get('mine')\n  @ApiOperation({ summary: 'Get user appointments' })\n  async findUserAppointments(@User() user: AuthenticatedUser) {\n    this.logger.log(`Fetching appointments for user ${user.id}`);\n    return this.appointmentService.findAllByUser(user.id);\n  }\n\n  @Get('stats')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles('admin', 'staff', 'super_admin')\n  async getStats() {\n    this.logger.log('Fetching appointment statistics');\n    return this.appointmentService.getAppointmentsStats();\n  }\n\n  @Get('by-date')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles('admin', 'staff', 'super_admin')\n  async getByDate(@Query('date') date: string) {\n    if (!date) {\n      throw new BadRequestException('Date parameter is required');\n    }\n    this.logger.log(`Fetching appointments for date: ${date}`);\n    return this.appointmentService.getAppointmentsByDate(date);\n  }\n\n  @Get('date-range')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles('admin', 'staff', 'super_admin')\n  async getByDateRange(\n    @Query('start') startDate: string,\n    @Query('end') endDate: string,\n  ) {\n    if (!startDate || !endDate) {\n      throw new BadRequestException(\n        'Start and end date parameters are required',\n      );\n    }\n    this.logger.log(`Fetching appointments from ${startDate} to ${endDate}`);\n    return this.appointmentService.getAppointmentsByDateRange(\n      startDate,\n      endDate,\n    );\n  }\n\n  @Get('available-slots')\n  async getAvailableSlots(@Query('date') date: string) {\n    if (!date) {\n      throw new BadRequestException('Date parameter is required');\n    }\n    this.logger.log(`Fetching available slots for date: ${date}`);\n    return this.appointmentService.getAvailableSlots(date);\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: 'Get appointment by ID' })\n  async findOne(\n    @Param('id') id: string,\n    @Query('includeUser') includeUser?: string,\n  ) {\n    this.logger.log(`Fetching appointment ${id}`);\n\n    const relations = includeUser === 'false' ? [] : ['user'];\n\n    return this.appointmentService.findOne(+id, { relations });\n  }\n\n  @Get('by-number/:number')\n  async findByAppointmentNumber(@Param('number') appointmentNumber: string) {\n    this.logger.log(`Fetching appointment with number: ${appointmentNumber}`);\n    return this.appointmentService.findByAppointmentNumber(appointmentNumber);\n  }\n\n  @Patch(':id')\n  @ApiOperation({ summary: 'Update appointment' })\n  async update(\n    @Param('id') id: string,\n    @Body() updateAppointmentDto: UpdateAppointmentDto,\n    @User() user: AuthenticatedUser,\n  ) {\n    // Get the appointment to check if it belongs to the user\n    const appointment = await this.appointmentService.findOne(+id);\n\n    // If not admin and not the appointment owner, don't allow update\n    if (\n      !user.roles.some((role) =>\n        ['admin', 'staff', 'super_admin'].includes(role.name),\n      ) &&\n      appointment.userId !== user.id\n    ) {\n      throw new BadRequestException(\n        'You do not have permission to update this appointment',\n      );\n    }\n\n    this.logger.log(`Updating appointment with ID: ${id}`);\n    return this.appointmentService.update(+id, updateAppointmentDto);\n  }\n\n  @Patch(':id/status')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles('admin', 'staff', 'super_admin')\n  async updateStatus(\n    @Param('id') id: string,\n    @Body('status') status: AppointmentStatus,\n  ) {\n    if (!Object.values(AppointmentStatus).includes(status)) {\n      throw new BadRequestException(\n        `Invalid status. Must be one of: ${Object.values(AppointmentStatus).join(', ')}`,\n      );\n    }\n\n    this.logger.log(\n      `Updating status for appointment with ID: ${id} to ${status}`,\n    );\n    return this.appointmentService.updateStatus(+id, status);\n  }\n\n  @Delete(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  @ApiOperation({ summary: 'Delete appointment' })\n  async remove(@Param('id') id: string, @User() user: AuthenticatedUser) {\n    // Get the appointment to check if it belongs to the user\n    const appointment = await this.appointmentService.findOne(+id);\n\n    // If not admin and not the appointment owner, don't allow deletion\n    if (\n      !user.roles.some((role) =>\n        ['admin', 'staff', 'super_admin'].includes(role.name),\n      ) &&\n      appointment.userId !== user.id\n    ) {\n      throw new BadRequestException(\n        'You do not have permission to delete this appointment',\n      );\n    }\n\n    this.logger.log(`Deleting appointment with ID: ${id}`);\n    await this.appointmentService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppointmentModule.html":{"url":"modules/AppointmentModule.html","title":"module - AppointmentModule","body":"\n                   \n\n\n\n\n    Modules\n    AppointmentModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppointmentModule\n\n\n\ncluster_AppointmentModule_exports\n\n\n\ncluster_AppointmentModule_providers\n\n\n\n\nAppointmentService \n\nAppointmentService \n\n\n\nAppointmentModule\n\nAppointmentModule\n\nAppointmentService  -->\n\nAppointmentModule->AppointmentService \n\n\n\n\n\nAppointmentService\n\nAppointmentService\n\nAppointmentModule -->\n\nAppointmentService->AppointmentModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/appointment/appointment.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppointmentService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppointmentController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AppointmentService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AppointmentService } from './appointment.service';\nimport { AppointmentController } from './appointment.controller';\nimport { Appointment } from './entities/appointment.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Appointment])],\n  controllers: [AppointmentController],\n  providers: [AppointmentService],\n  exports: [AppointmentService],\n})\nexport class AppointmentModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AppointmentNotificationDto.html":{"url":"classes/AppointmentNotificationDto.html","title":"class - AppointmentNotificationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AppointmentNotificationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/appointment-notification.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                appointmentDetails\n                            \n                            \n                                    \n                                    \n                                    \n                                appointmentNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                reason\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        appointmentDetails\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Appointment details object', type: 'object', additionalProperties: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/appointment-notification.dto.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        appointmentNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Appointment number/ID', example: 'APPT-2024-001'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/appointment-notification.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Email address of the appointment holder', example: 'user@example.com'})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/appointment-notification.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        reason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Cancellation reason (for cancellations)', example: 'Cancelled by administrator'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/appointment-notification.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'New appointment status (for status updates)', example: 'confirmed'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/appointment-notification.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"confirmation\" | \"status_update\" | \"cancellation\" | \"reminder\"\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Type of notification to send', enum: undefined, example: 'confirmation'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/appointment-notification.dto.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsString,\n  IsNotEmpty,\n  IsOptional,\n  IsDateString,\n} from 'class-validator';\n\nexport class AppointmentNotificationDto {\n  @ApiProperty({\n    description: 'Email address of the appointment holder',\n    example: 'user@example.com',\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @ApiProperty({\n    description: 'Appointment number/ID',\n    example: 'APPT-2024-001',\n  })\n  @IsString()\n  @IsNotEmpty()\n  appointmentNumber: string;\n\n  @ApiProperty({\n    description: 'Type of notification to send',\n    enum: ['confirmation', 'status_update', 'cancellation', 'reminder'],\n    example: 'confirmation',\n  })\n  @IsString()\n  @IsNotEmpty()\n  type: 'confirmation' | 'status_update' | 'cancellation' | 'reminder';\n\n  @ApiPropertyOptional({\n    description: 'New appointment status (for status updates)',\n    example: 'confirmed',\n  })\n  @IsString()\n  @IsOptional()\n  status?: string;\n\n  @ApiPropertyOptional({\n    description: 'Cancellation reason (for cancellations)',\n    example: 'Cancelled by administrator',\n  })\n  @IsString()\n  @IsOptional()\n  reason?: string;\n\n  @ApiProperty({\n    description: 'Appointment details object',\n    type: 'object',\n    additionalProperties: true,\n  })\n  appointmentDetails: {\n    type: string;\n    date: string;\n    time: string;\n    firstName: string;\n    lastName: string;\n    phoneNumber?: string;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppointmentService.html":{"url":"injectables/AppointmentService.html","title":"injectable - AppointmentService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppointmentService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/appointment/appointment.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                checkTimeSlotAvailability\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllByUser\n                            \n                            \n                                    Async\n                                findByAppointmentNumber\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Private\n                                generateAllTimeSlots\n                            \n                            \n                                    Async\n                                getAppointmentsByDate\n                            \n                            \n                                    Async\n                                getAppointmentsByDateRange\n                            \n                            \n                                    Async\n                                getAppointmentsStats\n                            \n                            \n                                    Async\n                                getAvailableSlots\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(appointmentRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/appointment/appointment.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        appointmentRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        checkTimeSlotAvailability\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkTimeSlotAvailability(date: string, time: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:313\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                time\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createAppointmentDto: CreateAppointmentDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createAppointmentDto\n                                            \n                                                            CreateAppointmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(options?: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAllByUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllByUser(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:82\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByAppointmentNumber\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByAppointmentNumber(appointmentNumber: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:108\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                appointmentNumber\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number, options?: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:92\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        generateAllTimeSlots\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateAllTimeSlots()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:338\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     string[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAppointmentsByDate\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAppointmentsByDate(date: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:217\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAppointmentsByDateRange\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAppointmentsByDateRange(startDate: string, endDate: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:238\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                startDate\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                endDate\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAppointmentsStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAppointmentsStats()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:261\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAvailableSlots\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAvailableSlots(date: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:185\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                date\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:157\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateAppointmentDto: UpdateAppointmentDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:122\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateAppointmentDto\n                                            \n                                                            UpdateAppointmentDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(id: number, status: AppointmentStatus)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/appointment/appointment.service.ts:170\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                status\n                                            \n                                                            AppointmentStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(AppointmentService.name)\n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/appointment.service.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  BadRequestException,\n  Logger,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, Between } from 'typeorm';\nimport { Appointment, AppointmentStatus } from './entities/appointment.entity';\nimport { CreateAppointmentDto } from './dto/create-appointment.dto';\nimport { UpdateAppointmentDto } from './dto/update-appointment.dto';\nimport { format, addDays, parseISO, isValid } from 'date-fns';\n\n@Injectable()\nexport class AppointmentService {\n  private readonly logger = new Logger(AppointmentService.name);\n\n  constructor(\n    @InjectRepository(Appointment)\n    private appointmentRepository: Repository,\n  ) {}\n\n  async create(\n    createAppointmentDto: CreateAppointmentDto,\n  ): Promise {\n    try {\n      // Check date validity\n      const date = parseISO(createAppointmentDto.appointmentDate);\n      if (!isValid(date)) {\n        throw new BadRequestException('Invalid appointment date');\n      }\n\n      // Check if date is a weekend\n      const dayOfWeek = date.getDay();\n      if (dayOfWeek === 0 || dayOfWeek === 6) {\n        throw new BadRequestException('Cannot book appointments on weekends');\n      }\n\n      // Check if date is in the past\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      if (date  {\n    return this.appointmentRepository.find({\n      relations: options?.relations || ['user'],\n      order: {\n        appointmentDate: 'ASC',\n        appointmentTime: 'ASC',\n      },\n    });\n  }\n\n  async findAllByUser(userId: number): Promise {\n    return this.appointmentRepository.find({\n      where: { userId },\n      order: {\n        appointmentDate: 'DESC',\n        appointmentTime: 'ASC',\n      },\n    });\n  }\n\n  async findOne(\n    id: number,\n    options?: { relations?: string[] },\n  ): Promise {\n    const appointment = await this.appointmentRepository.findOne({\n      where: { id },\n      relations: options?.relations || ['user'],\n    });\n\n    if (!appointment) {\n      throw new NotFoundException(`Appointment with ID ${id} not found`);\n    }\n\n    return appointment;\n  }\n\n  async findByAppointmentNumber(\n    appointmentNumber: string,\n  ): Promise {\n    const appointment = await this.appointmentRepository.findOne({\n      where: { appointmentNumber },\n    });\n\n    if (!appointment) {\n      throw new NotFoundException(`Appointment ${appointmentNumber} not found`);\n    }\n\n    return appointment;\n  }\n\n  async update(\n    id: number,\n    updateAppointmentDto: UpdateAppointmentDto,\n  ): Promise {\n    try {\n      const appointment = await this.findOne(id);\n\n      // If changing date or time, check availability\n      if (\n        updateAppointmentDto.appointmentDate ||\n        updateAppointmentDto.appointmentTime\n      ) {\n        const newDate =\n          updateAppointmentDto.appointmentDate || appointment.appointmentDate;\n        const newTime =\n          updateAppointmentDto.appointmentTime || appointment.appointmentTime;\n\n        if (\n          newDate !== appointment.appointmentDate ||\n          newTime !== appointment.appointmentTime\n        ) {\n          await this.checkTimeSlotAvailability(newDate, newTime);\n        }\n      }\n\n      // Update the appointment\n      const updated = Object.assign(appointment, updateAppointmentDto);\n      this.logger.log(`Updated appointment ${id}:`, updated);\n      return this.appointmentRepository.save(updated);\n    } catch (error) {\n      this.logger.error(`Error updating appointment ${id}:`, error);\n      throw error;\n    }\n  }\n\n  async remove(id: number): Promise {\n    try {\n      const result = await this.appointmentRepository.delete(id);\n      if (result.affected === 0) {\n        throw new NotFoundException(`Appointment with ID ${id} not found`);\n      }\n      this.logger.log(`Deleted appointment ${id}`);\n    } catch (error) {\n      this.logger.error(`Error deleting appointment ${id}:`, error);\n      throw error;\n    }\n  }\n\n  async updateStatus(\n    id: number,\n    status: AppointmentStatus,\n  ): Promise {\n    try {\n      const appointment = await this.findOne(id);\n      appointment.status = status;\n      this.logger.log(`Updated status for appointment ${id} to ${status}`);\n      return this.appointmentRepository.save(appointment);\n    } catch (error) {\n      this.logger.error(`Error updating status for appointment ${id}:`, error);\n      throw error;\n    }\n  }\n\n  async getAvailableSlots(date: string): Promise {\n    try {\n      // Parse the date\n      const parsedDate = parseISO(date);\n      if (!isValid(parsedDate)) {\n        throw new BadRequestException('Invalid date format');\n      }\n\n      // Get all appointments for the specified date\n      const existingAppointments = await this.appointmentRepository.find({\n        where: {\n          appointmentDate: date,\n          status: AppointmentStatus.PENDING || AppointmentStatus.CONFIRMED,\n        },\n        select: ['appointmentTime'],\n      });\n\n      const bookedSlots = existingAppointments.map(\n        (app) => app.appointmentTime,\n      );\n\n      // Generate all time slots (8:00 AM - 5:00 PM with 30min intervals)\n      const allTimeSlots = this.generateAllTimeSlots();\n\n      // Return only available slots\n      return allTimeSlots.filter((slot) => !bookedSlots.includes(slot));\n    } catch (error) {\n      this.logger.error(`Error getting available slots for date ${date}:`, error);\n      throw error;\n    }\n  }\n\n  async getAppointmentsByDate(date: string): Promise {\n    try {\n      const parsedDate = parseISO(date);\n      if (!isValid(parsedDate)) {\n        throw new BadRequestException('Invalid date format');\n      }\n\n      return this.appointmentRepository.find({\n        where: {\n          appointmentDate: date,\n        },\n        order: {\n          appointmentTime: 'ASC',\n        },\n      });\n    } catch (error) {\n      this.logger.error(`Error getting appointments for date ${date}:`, error);\n      throw error;\n    }\n  }\n\n  async getAppointmentsByDateRange(\n    startDate: string,\n    endDate: string,\n  ): Promise {\n    try {\n      return this.appointmentRepository.find({\n        where: {\n          appointmentDate: Between(startDate, endDate),\n        },\n        order: {\n          appointmentDate: 'ASC',\n          appointmentTime: 'ASC',\n        },\n      });\n    } catch (error) {\n      this.logger.error(\n        `Error getting appointments in range ${startDate} to ${endDate}:`,\n        error,\n      );\n      throw error;\n    }\n  }\n\n  async getAppointmentsStats() {\n    try {\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n\n      const tomorrow = addDays(today, 1);\n      tomorrow.setHours(0, 0, 0, 0);\n\n      // Get counts for different statuses\n      const [\n        pendingCount,\n        confirmedCount,\n        completedCount,\n        cancelledCount,\n        totalCount,\n      ] = await Promise.all([\n        this.appointmentRepository.count({\n          where: { status: AppointmentStatus.PENDING },\n        }),\n        this.appointmentRepository.count({\n          where: { status: AppointmentStatus.CONFIRMED },\n        }),\n        this.appointmentRepository.count({\n          where: { status: AppointmentStatus.COMPLETED },\n        }),\n        this.appointmentRepository.count({\n          where: { status: AppointmentStatus.CANCELLED },\n        }),\n        this.appointmentRepository.count(),\n      ]);\n\n      // Get today's appointments\n      const todayAppointments = await this.appointmentRepository.count({\n        where: {\n          appointmentDate: format(today, 'yyyy-MM-dd'),\n        },\n      });\n\n      return {\n        pending: pendingCount,\n        confirmed: confirmedCount,\n        completed: completedCount,\n        cancelled: cancelledCount,\n        total: totalCount,\n        today: todayAppointments,\n      };\n    } catch (error) {\n      this.logger.error('Error getting appointment stats:', error);\n      throw error;\n    }\n  }\n\n  private async checkTimeSlotAvailability(\n    date: string,\n    time: string,\n  ): Promise {\n    try {\n      // Check if time slot is already booked\n      const existingAppointment = await this.appointmentRepository.findOne({\n        where: {\n          appointmentDate: date,\n          appointmentTime: time,\n          status: AppointmentStatus.PENDING || AppointmentStatus.CONFIRMED,\n        },\n      });\n\n      if (existingAppointment) {\n        throw new BadRequestException('This time slot is already booked');\n      }\n    } catch (error) {\n      this.logger.error(\n        `Error checking time slot availability for ${date} at ${time}:`,\n        error,\n      );\n      throw error;\n    }\n  }\n  private generateAllTimeSlots(): string[] {\n    const slots: string[] = [];\n    let hour = 8;\n    let minute = 0;\n\n    while (hour \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nRolesModule\n\nRolesModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nRolesModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nEmailService \n\nEmailService \n\nEmailService  -->\n\nAuthModule->EmailService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nOTPService \n\nOTPService \n\nOTPService  -->\n\nAuthModule->OTPService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nAuthModule -->\n\nEmailService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nOTPService\n\nOTPService\n\nAuthModule -->\n\nOTPService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            EmailService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            OTPService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RolesModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            EmailService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            OTPService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { User } from '../users/entities/user.entity';\nimport { JwtStrategy } from './jwt.strategy';\nimport { RolesModule } from '../roles/roles.module';\nimport { OTP } from '../entities/otp.entity';\nimport { OTPService } from '../services/otp.service';\nimport { EmailService } from '../services/email.service';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([User, OTP]),\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        secret: configService.get('JWT_SECRET'),\n        signOptions: { expiresIn: '24h' },\n      }),\n    }),\n    RolesModule,\n  ],\n  providers: [AuthService, JwtStrategy, OTPService, EmailService],\n  controllers: [AuthController],\n  exports: [AuthService, JwtStrategy, PassportModule, OTPService, EmailService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthenticatedUser.html":{"url":"interfaces/AuthenticatedUser.html","title":"interface - AuthenticatedUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AuthenticatedUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            roles\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        roles:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\n\ninterface JwtPayload {\n  sub: number;\n  email: string;\n  roles?: string[];\n}\n\n// Strategy for validating JWT tokens in NestJS\nexport interface AuthenticatedUser {\n  id: number;\n  email: string;\n  roles: Array;\n}\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private configService: ConfigService) {\n    const secretKey = configService.get('JWT_SECRET');\n\n    if (!secretKey) {\n      throw new Error('JWT_SECRET is not defined in environment variables');\n    }\n\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: secretKey,\n    });\n  }\n\n  validate(payload: JwtPayload): AuthenticatedUser {\n    // Validation for the payload\n    if (!payload || payload.sub === undefined || isNaN(Number(payload.sub))) {\n      throw new UnauthorizedException('Invalid token payload');\n    }\n\n    const userId = Number(payload.sub);\n    const email = String(payload.email || '');\n    const roles = Array.isArray(payload.roles)\n      ? payload.roles.map((role) => ({ name: role }))\n      : [];\n\n    return {\n      id: userId,\n      email,\n      roles,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Counter.html":{"url":"entities/Counter.html","title":"entity - Counter","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Counter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/counter/entities/counter.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                currentQueue\n                            \n                            \n                                    \n                                currentQueueId\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        currentQueue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Queue | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, queue => queue.counter, {nullable: true})@JoinColumn({name: 'current_queue_id', foreignKeyConstraintName: 'fk_current_queue'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        currentQueueId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'current_queue_id', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CounterStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: CounterStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/counter/entities/counter.entity.ts:28\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  OneToOne,\n  JoinColumn,\n} from 'typeorm';\nimport { Queue } from '../../queue/entities/queue.entity';\n\nexport enum CounterStatus {\n  ACTIVE = 'active',\n  INACTIVE = 'inactive',\n}\n\n@Entity('counters')\nexport class Counter {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  name: string;\n\n  @Column({\n    type: 'enum',\n    enum: CounterStatus,\n    default: CounterStatus.ACTIVE,\n  })\n  status: CounterStatus;\n\n  @Column({ name: 'current_queue_id', nullable: true })\n  currentQueueId: number | null;\n\n  @OneToOne(() => Queue, (queue) => queue.counter, { nullable: true })\n  @JoinColumn({\n    name: 'current_queue_id',\n    foreignKeyConstraintName: 'fk_current_queue',\n  })\n  currentQueue: Queue | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAnnouncementDto.html":{"url":"classes/CreateAnnouncementDto.html","title":"class - CreateAnnouncementDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAnnouncementDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/announcement/dto/create-announcement.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                createdBy\n                            \n                            \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                image\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                isActive\n                            \n                            \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        createdBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/dto/create-announcement.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/dto/create-announcement.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/dto/create-announcement.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/dto/create-announcement.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/announcement/dto/create-announcement.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsOptional, IsBoolean } from 'class-validator';\n\nexport class CreateAnnouncementDto {\n  @IsString()\n  @IsNotEmpty()\n  title: string;\n\n  @IsString()\n  @IsNotEmpty()\n  description: string;\n\n  @IsOptional()\n  @IsString()\n  image?: string;\n\n  @IsOptional()\n  @IsString()\n  createdBy?: string;\n\n  @IsOptional()\n  @IsBoolean()\n  isActive?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAppointmentDto.html":{"url":"classes/CreateAppointmentDto.html","title":"class - CreateAppointmentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAppointmentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/appointment/dto/create-appointment.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                address\n                            \n                            \n                                    \n                                    \n                                appointmentDate\n                            \n                            \n                                    \n                                    \n                                appointmentTime\n                            \n                            \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    Optional\n                                isGuest\n                            \n                            \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                middleInitial\n                            \n                            \n                                    \n                                    \n                                phoneNumber\n                            \n                            \n                                    \n                                    \n                                reasonOfVisit\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                            \n                                    \n                                    Optional\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        appointmentDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        appointmentTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        isGuest\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        middleInitial\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        reasonOfVisit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AppointmentStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEnum(AppointmentStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/create-appointment.dto.ts:48\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsNotEmpty,\n  IsString,\n  IsOptional,\n  IsEnum,\n  IsDateString,\n} from 'class-validator';\nimport { AppointmentStatus } from '../entities/appointment.entity';\n\nexport class CreateAppointmentDto {\n  @IsNotEmpty()\n  @IsString()\n  firstName: string;\n\n  @IsNotEmpty()\n  @IsString()\n  lastName: string;\n\n  @IsOptional()\n  @IsString()\n  middleInitial: string;\n\n  @IsNotEmpty()\n  @IsString()\n  address: string;\n\n  @IsNotEmpty()\n  @IsString()\n  phoneNumber: string;\n\n  @IsNotEmpty()\n  @IsString()\n  reasonOfVisit: string;\n\n  @IsNotEmpty()\n  @IsDateString()\n  appointmentDate: string;\n\n  @IsNotEmpty()\n  @IsString()\n  appointmentTime: string;\n\n  @IsOptional()\n  @IsEnum(AppointmentStatus)\n  status?: AppointmentStatus;\n\n  @IsOptional()\n  userId?: number;\n\n  @IsOptional()\n  isGuest?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateDocumentApplicationDto.html":{"url":"classes/CreateDocumentApplicationDto.html","title":"class - CreateDocumentApplicationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateDocumentApplicationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/document-applications/dto/create-document-application.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                applicationSubtype\n                            \n                            \n                                    \n                                    \n                                applicationType\n                            \n                            \n                                    \n                                    \n                                formData\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                statusMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        applicationSubtype\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Application subtype (optional)', example: 'Copy of Birth Certificate', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/dto/create-document-application.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        applicationType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ApplicationType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: ApplicationType, description: 'Type of document application', example: undefined})@IsEnum(ApplicationType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/dto/create-document-application.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        formData\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Form data containing all application details', example: undefined})@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/dto/create-document-application.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        statusMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Optional status message', example: 'Initial application submission', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/dto/create-document-application.dto.ts:42\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsOptional, IsObject, IsString } from 'class-validator';\nimport { ApplicationType } from '../entities/document-application.entity';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateDocumentApplicationDto {\n  @ApiProperty({\n    enum: ApplicationType,\n    description: 'Type of document application',\n    example: ApplicationType.BIRTH_CERTIFICATE,\n  })\n  @IsEnum(ApplicationType)\n  applicationType: ApplicationType;\n\n  @ApiProperty({\n    description: 'Application subtype (optional)',\n    example: 'Copy of Birth Certificate',\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  applicationSubtype?: string;\n\n  @ApiProperty({\n    description: 'Form data containing all application details',\n    example: {\n      firstName: 'Juan',\n      lastName: 'Dela Cruz',\n      birthDate: '1990-01-01',\n      birthPlace: 'Manila',\n    },\n  })\n  @IsObject()\n  formData: Record;\n\n  @ApiProperty({\n    description: 'Optional status message',\n    example: 'Initial application submission',\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  statusMessage?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateQueueDto.html":{"url":"classes/CreateQueueDto.html","title":"class - CreateQueueDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateQueueDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/dto/create-queue.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                    \n                                    \n                                appointmentType\n                            \n                            \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                isGuest\n                            \n                            \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                middleInitial\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                phoneNumber\n                            \n                            \n                                    \n                                    \n                                reasonOfVisit\n                            \n                            \n                                    \n                                    Optional\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        appointmentType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        isGuest\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        middleInitial\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        reasonOfVisit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/create-queue.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsOptional, IsNotEmpty, IsBoolean } from 'class-validator';\n\nexport class CreateQueueDto {\n  @IsOptional()\n  userId?: number | string;\n\n  @IsString()\n  @IsNotEmpty()\n  firstName: string;\n\n  @IsString()\n  @IsNotEmpty()\n  lastName: string;\n\n  @IsString()\n  @IsOptional()\n  middleInitial?: string;\n\n  @IsString()\n  @IsOptional()\n  address?: string;\n\n  @IsString()\n  @IsOptional()\n  phoneNumber?: string;\n\n  @IsString()\n  @IsNotEmpty()\n  reasonOfVisit: string;\n\n  @IsString()\n  @IsNotEmpty()\n  appointmentType: string;\n\n  @IsBoolean()\n  @IsOptional()\n  isGuest?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                contactNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                defaultRoleId\n                            \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                middleName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                nameExtension\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                roleIds\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        contactNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: '+639123456789', description: 'Contact number'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        defaultRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 4, description: 'Default role ID for the user'})@IsOptional()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:102\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'john.doe@example.com', description: 'User email address'})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'John', description: 'User first name'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Doe', description: 'User last name'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'Miguel', description: 'User middle name (optional)'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'John Miguel Doe Jr.', description: 'Full name (auto-generated if not provided)'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        nameExtension\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'Jr.', description: 'Name extension (e.g., Jr., Sr., III)'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'password123', description: 'User password (minimum 6 characters)', minLength: 6})@IsString()@MinLength(6)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        roleIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: undefined, description: 'Array of role IDs to assign to the user', type: undefined})@IsOptional()@IsArray()@IsNumber({}, {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'johndoe', description: 'Username (optional, will use email if not provided)'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsString,\n  IsOptional,\n  MinLength,\n  IsArray,\n  IsNumber,\n  IsNotEmpty,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @ApiProperty({\n    example: 'john.doe@example.com',\n    description: 'User email address',\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @ApiPropertyOptional({\n    example: 'johndoe',\n    description: 'Username (optional, will use email if not provided)',\n  })\n  @IsOptional()\n  @IsString()\n  username?: string;\n\n  @ApiProperty({\n    example: 'password123',\n    description: 'User password (minimum 6 characters)',\n    minLength: 6,\n  })\n  @IsString()\n  @MinLength(6)\n  password: string;\n\n  @ApiProperty({\n    example: 'John',\n    description: 'User first name',\n  })\n  @IsString()\n  @IsNotEmpty()\n  firstName: string;\n\n  @ApiPropertyOptional({\n    example: 'Miguel',\n    description: 'User middle name (optional)',\n  })\n  @IsOptional()\n  @IsString()\n  middleName?: string;\n\n  @ApiProperty({\n    example: 'Doe',\n    description: 'User last name',\n  })\n  @IsString()\n  @IsNotEmpty()\n  lastName: string;\n\n  @ApiPropertyOptional({\n    example: 'John Miguel Doe Jr.',\n    description: 'Full name (auto-generated if not provided)',\n  })\n  @IsString()\n  @IsOptional()\n  name?: string;\n\n  @ApiPropertyOptional({\n    example: 'Jr.',\n    description: 'Name extension (e.g., Jr., Sr., III)',\n  })\n  @IsOptional()\n  @IsString()\n  nameExtension?: string;\n\n  @ApiPropertyOptional({\n    example: '+639123456789',\n    description: 'Contact number',\n  })\n  @IsOptional()\n  @IsString()\n  contactNumber?: string;\n\n  @ApiPropertyOptional({\n    example: [2, 3],\n    description: 'Array of role IDs to assign to the user',\n    type: [Number],\n  })\n  @IsOptional()\n  @IsArray()\n  @IsNumber({}, { each: true })\n  roleIds?: number[];\n\n  @ApiPropertyOptional({\n    example: 4,\n    description: 'Default role ID for the user',\n  })\n  @IsOptional()\n  @IsNumber()\n  defaultRoleId?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DocumentApplication.html":{"url":"entities/DocumentApplication.html","title":"entity - DocumentApplication","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DocumentApplication\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/document-applications/entities/document-application.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                applicationSubtype\n                            \n                            \n                                    \n                                applicationType\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                files\n                            \n                            \n                                    \n                                formData\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastModifiedBy\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                statusHistory\n                            \n                            \n                                    \n                                statusMessage\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    \n                                user\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        applicationSubtype\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'application_subtype', length: 100, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        applicationType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ApplicationType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: ApplicationType, name: 'application_type'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        files\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DocumentFile[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, file => file.application, {cascade: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        formData\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'form_data', type: 'json'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn({length: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastModifiedBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'last_modified_by', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ApplicationStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: ApplicationStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        statusHistory\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ApplicationStatusHistory[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, history => history.application, {cascade: false, eager: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        statusMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'status_message', type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({name: 'updated_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {nullable: true})@JoinColumn({name: 'user_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'user_id', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-application.entity.ts:44\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryColumn,\n  Column,\n  CreateDateColumn,\n  UpdateDateColumn,\n  OneToMany,\n  ManyToOne,\n  JoinColumn,\n  Index,\n} from 'typeorm';\nimport { User } from '../../../users/entities/user.entity';\nimport { DocumentFile } from './document-file.entity';\nimport { ApplicationStatusHistory } from './application-status-history.entity';\n\nexport enum ApplicationType {\n  BIRTH_CERTIFICATE = 'Birth Certificate',\n  MARRIAGE_CERTIFICATE = 'Marriage Certificate',\n  MARRIAGE_LICENSE = 'Marriage License',\n  DEATH_CERTIFICATE = 'Death Certificate',\n  BUSINESS_PERMIT = 'Business Permit',\n}\n\nexport enum ApplicationStatus {\n  PENDING = 'Pending',\n  PROCESSING = 'Processing',\n  APPROVED = 'Approved',\n  REJECTED = 'Rejected',\n  DECLINE = 'Decline',\n  READY_FOR_PICKUP = 'Ready for Pickup',\n  REQUIRES_ADDITIONAL_INFO = 'Requires Additional Info',\n}\n\n@Entity('document_applications')\n@Index(['userId'])\n@Index(['applicationType'])\n@Index(['status'])\n@Index(['createdAt'])\nexport class DocumentApplication {\n  @PrimaryColumn({ length: 50 })\n  id: string;\n\n  @Column({ name: 'user_id', nullable: true })\n  userId: number;\n\n  @Column({\n    type: 'enum',\n    enum: ApplicationType,\n    name: 'application_type',\n  })\n  applicationType: ApplicationType;\n\n  @Column({ name: 'application_subtype', length: 100, nullable: true })\n  applicationSubtype: string;\n\n  @Column({\n    type: 'enum',\n    enum: ApplicationStatus,\n    default: ApplicationStatus.PENDING,\n  })\n  status: ApplicationStatus;\n\n  @Column({ name: 'status_message', type: 'text', nullable: true })\n  statusMessage: string;\n\n  @Column({ name: 'form_data', type: 'json' })\n  formData: Record;\n\n  @CreateDateColumn({ name: 'created_at' })\n  createdAt: Date;\n\n  @UpdateDateColumn({ name: 'updated_at' })\n  updatedAt: Date;\n\n  @Column({ name: 'last_modified_by', nullable: true })\n  lastModifiedBy: number;\n\n  // Relations\n  @ManyToOne(() => User, { nullable: true })\n  @JoinColumn({ name: 'user_id' })\n  user: User;\n\n  @OneToMany(() => DocumentFile, (file) => file.application, { cascade: true })\n  files: DocumentFile[];\n\n  @OneToMany(() => ApplicationStatusHistory, (history) => history.application, {\n    cascade: false,\n    eager: false,\n  })\n  statusHistory: ApplicationStatusHistory[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/DocumentApplicationsController.html":{"url":"controllers/DocumentApplicationsController.html","title":"controller - DocumentApplicationsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  DocumentApplicationsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/document-applications/document-applications.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                document-applications\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getAllApplicationFiles\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getAllApplications\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getApplicationFiles\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getFileDownloadUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getStats\n                            \n                            \n                                    \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                updateStatus\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                uploadDocument\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createDto: CreateDocumentApplicationDto, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create new document application'})@ApiResponse({status: 201, description: 'Application created successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createDto\n                                            \n                                                            CreateDocumentApplicationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(status?: string, includeUser?: string, user?: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Get user applications'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:99\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                includeUser\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string, user: AuthenticatedUser, includeUser?: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'Get specific application'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:164\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                includeUser\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getAllApplicationFiles\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllApplicationFiles(id: string, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/files/all')@ApiOperation({summary: 'Get all application files (privileged users only)'})@ApiResponse({status: 200, description: 'All files retrieved successfully'})@ApiResponse({status: 404, description: 'Application not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:146\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getAllApplications\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllApplications()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('admin/all')@Roles('admin', 'staff', 'super_admin')@UseGuards(RolesGuard)@ApiOperation({summary: 'Get all applications (Privileged users only)'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:261\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getApplicationFiles\n                        \n                    \n                \n            \n            \n                \n                        \n                    getApplicationFiles(id: string, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id/files')@ApiOperation({summary: 'Get application files (latest per category)'})@ApiResponse({status: 200, description: 'Files retrieved successfully'})@ApiResponse({status: 404, description: 'Application not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:120\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getFileDownloadUrl\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFileDownloadUrl(fileId: string, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('files/:fileId/download')@ApiOperation({summary: 'Get file download URL'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:183\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fileId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('admin/stats')@Roles('admin', 'super_admin')@UseGuards(RolesGuard)@ApiOperation({summary: 'Get application statistics (Admin/Super Admin only)'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:271\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise>\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({summary: 'Delete application'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:246\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateDto: UpdateDocumentApplicationDto, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOperation({summary: 'Update application'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:201\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateDto\n                                            \n                                                            UpdateDocumentApplicationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(id: string, statusDto: literal type, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/status')@Roles('admin', 'staff', 'super_admin')@UseGuards(RolesGuard)@ApiOperation({summary: 'Update application status (Privileged users only)'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:231\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                statusDto\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        uploadDocument\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadDocument(id: string, file: Express.Multer.File, documentCategory: string, user: AuthenticatedUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':id/files')@UseInterceptors(undefined)@ApiConsumes('multipart/form-data')@ApiOperation({summary: 'Upload document file'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/document-applications/document-applications.controller.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                documentCategory\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            AuthenticatedUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseInterceptors,\n  UploadedFile,\n  Query,\n  UseGuards,\n  //Request, // Uncomment if you need to use Request object\n  BadRequestException,\n  Logger,\n} from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { DocumentApplicationsService } from './document-applications.service';\nimport { CreateDocumentApplicationDto } from './dto/create-document-application.dto';\nimport { UpdateDocumentApplicationDto } from './dto/update-document-application.dto';\nimport { JwtAuthGuard } from '../../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../../auth/guards/roles.guard';\nimport { Roles } from '../../auth/decorators/roles.decorator';\nimport { User } from '../../auth/decorators/user.decorator';\nimport { AuthenticatedUser } from '../../auth/jwt.strategy';\nimport { ApplicationStatus } from './entities/document-application.entity';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n  ApiConsumes,\n} from '@nestjs/swagger';\n\n@ApiTags('Document Applications')\n@Controller('document-applications')\n@UseGuards(JwtAuthGuard)\n@ApiBearerAuth('JWT-auth')\nexport class DocumentApplicationsController {\n  private readonly logger = new Logger(DocumentApplicationsController.name);\n\n  constructor(\n    private readonly documentApplicationsService: DocumentApplicationsService,\n  ) {}\n\n  @Post()\n  @ApiOperation({ summary: 'Create new document application' })\n  @ApiResponse({ status: 201, description: 'Application created successfully' })\n  async create(\n    @Body() createDto: CreateDocumentApplicationDto,\n    @User() user: AuthenticatedUser,\n  ) {\n    return this.documentApplicationsService.create(createDto, user.id);\n  }\n\n  @Post(':id/files')\n  @UseInterceptors(\n    FileInterceptor('file', {\n      limits: {\n        fileSize: 10 * 1024 * 1024, // 10MB limit\n      },\n      fileFilter: (req, file, callback) => {\n        if (!file.mimetype.match(/\\/(jpg|jpeg|png|pdf)$/)) {\n          return callback(\n            new BadRequestException(\n              'Only JPEG, PNG, and PDF files are allowed',\n            ),\n            false,\n          );\n        }\n        callback(null, true);\n      },\n    }),\n  )\n  @ApiConsumes('multipart/form-data')\n  @ApiOperation({ summary: 'Upload document file' })\n  async uploadDocument(\n    @Param('id') id: string,\n    @UploadedFile() file: Express.Multer.File,\n    @Body('documentCategory') documentCategory: string,\n    @User() user: AuthenticatedUser,\n  ) {\n    this.logger.log('Received document category:', documentCategory); // Debug log\n\n    if (!documentCategory) {\n      throw new BadRequestException('Document category is required');\n    }\n\n    return this.documentApplicationsService.uploadFile(\n      id,\n      file,\n      documentCategory,\n      user.id,\n    );\n  }\n\n  @Get()\n  @ApiOperation({ summary: 'Get user applications' })\n  async findAll(\n    @Query('status') status?: string,\n    @Query('includeUser') includeUser?: string,\n    @User() user?: AuthenticatedUser,\n  ) {\n    const userId = user?.roles.some((role) =>\n      ['admin', 'super_admin', 'staff'].includes(role.name),\n    )\n      ? undefined\n      : user?.id;\n\n    // Include user relationship when requested (for admin notifications)\n    const relations = includeUser === 'true' ? ['user'] : [];\n\n    return this.documentApplicationsService.findAll(userId, { relations });\n  }\n\n  @Get(':id/files')\n  @ApiOperation({ summary: 'Get application files (latest per category)' })\n  @ApiResponse({ status: 200, description: 'Files retrieved successfully' })\n  @ApiResponse({ status: 404, description: 'Application not found' })\n  async getApplicationFiles(\n    @Param('id') id: string,\n    @User() user: AuthenticatedUser,\n  ) {\n    const userId = user.roles.some((role) =>\n      ['admin', 'super_admin', 'staff'].includes(role.name),\n    )\n      ? undefined\n      : user.id;\n\n    this.logger.log(\n      `Getting files for application ${id}, user: ${user.email}, isPrivileged: ${!userId}`,\n    );\n\n    return await this.documentApplicationsService.getApplicationFiles(\n      id,\n      userId,\n    );\n  }\n\n  @Get(':id/files/all')\n  @ApiOperation({\n    summary: 'Get all application files (privileged users only)',\n  })\n  @ApiResponse({ status: 200, description: 'All files retrieved successfully' })\n  @ApiResponse({ status: 404, description: 'Application not found' })\n  async getAllApplicationFiles(\n    @Param('id') id: string,\n    @User() user: AuthenticatedUser,\n  ) {\n    const userId = user.roles.some((role) =>\n      ['admin', 'super_admin', 'staff'].includes(role.name),\n    )\n      ? undefined\n      : user.id;\n\n    return await this.documentApplicationsService.getAllApplicationFiles(\n      id,\n      userId,\n    );\n  }\n\n  @Get(':id')\n  @ApiOperation({ summary: 'Get specific application' })\n  async findOne(\n    @Param('id') id: string,\n    @User() user: AuthenticatedUser,\n    @Query('includeUser') includeUser?: string,\n  ) {\n    const userId = user.roles.some((role) =>\n      ['admin', 'super_admin', 'staff'].includes(role.name),\n    )\n      ? undefined\n      : user.id;\n\n    // Include user relationship when requested (for admin notifications)\n    const relations = includeUser === 'true' ? ['user'] : [];\n\n    return this.documentApplicationsService.findOne(id, userId, { relations });\n  }\n\n  @Get('files/:fileId/download')\n  @ApiOperation({ summary: 'Get file download URL' })\n  async getFileDownloadUrl(\n    @Param('fileId') fileId: string,\n    @User() user: AuthenticatedUser,\n  ) {\n    const userId = user.roles.some((role) =>\n      ['admin', 'super_admin', 'staff'].includes(role.name),\n    )\n      ? undefined\n      : user.id;\n    const url = await this.documentApplicationsService.getFileDownloadUrl(\n      +fileId,\n      userId,\n    );\n    return { url };\n  }\n\n  @Patch(':id')\n  @ApiOperation({ summary: 'Update application' })\n  async update(\n    @Param('id') id: string,\n    @Body() updateDto: UpdateDocumentApplicationDto,\n    @User() user: AuthenticatedUser,\n  ) {\n    const userId = user.roles.some((role) =>\n      ['admin', 'super_admin', 'staff'].includes(role.name),\n    )\n      ? undefined\n      : user.id;\n    const adminId = user.roles.some((role) =>\n      ['admin', 'super_admin', 'staff'].includes(role.name),\n    )\n      ? user.id\n      : undefined;\n\n    return this.documentApplicationsService.update(\n      id,\n      updateDto,\n      userId,\n      adminId,\n    );\n  }\n\n  @Patch(':id/status')\n  @Roles('admin', 'staff', 'super_admin')\n  @UseGuards(RolesGuard)\n  @ApiOperation({\n    summary: 'Update application status (Privileged users only)',\n  })\n  async updateStatus(\n    @Param('id') id: string,\n    @Body() statusDto: { status: string; statusMessage?: string },\n    @User() user: AuthenticatedUser,\n  ) {\n    return this.documentApplicationsService.updateStatus(\n      id,\n      statusDto.status as ApplicationStatus,\n      statusDto.statusMessage,\n      user.id,\n    );\n  }\n\n  @Delete(':id')\n  @ApiOperation({ summary: 'Delete application' })\n  async remove(@Param('id') id: string, @User() user: AuthenticatedUser) {\n    const userId = user.roles.some((role) =>\n      ['admin', 'super_admin', 'staff'].includes(role.name),\n    )\n      ? undefined\n      : user.id;\n    await this.documentApplicationsService.remove(id, userId);\n    return { message: 'Application deleted successfully' };\n  }\n\n  // Admin endpoints\n  @Get('admin/all')\n  @Roles('admin', 'staff', 'super_admin')\n  @UseGuards(RolesGuard)\n  @ApiOperation({ summary: 'Get all applications (Privileged users only)' })\n  async getAllApplications() {\n    return this.documentApplicationsService.findAll();\n  }\n\n  @Get('admin/stats')\n  @Roles('admin', 'super_admin')\n  @UseGuards(RolesGuard)\n  @ApiOperation({\n    summary: 'Get application statistics (Admin/Super Admin only)',\n  })\n  async getStats(): Promise\n  > {\n    return this.documentApplicationsService.getApplicationStats();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DocumentApplicationsModule.html":{"url":"modules/DocumentApplicationsModule.html","title":"module - DocumentApplicationsModule","body":"\n                   \n\n\n\n\n    Modules\n    DocumentApplicationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DocumentApplicationsModule\n\n\n\ncluster_DocumentApplicationsModule_exports\n\n\n\ncluster_DocumentApplicationsModule_providers\n\n\n\n\nDocumentApplicationsService \n\nDocumentApplicationsService \n\n\n\nMinioService \n\nMinioService \n\n\n\nDocumentApplicationsModule\n\nDocumentApplicationsModule\n\nDocumentApplicationsService  -->\n\nDocumentApplicationsModule->DocumentApplicationsService \n\n\n\nMinioService  -->\n\nDocumentApplicationsModule->MinioService \n\n\n\n\n\nDocumentApplicationsService\n\nDocumentApplicationsService\n\nDocumentApplicationsModule -->\n\nDocumentApplicationsService->DocumentApplicationsModule\n\n\n\n\n\nMinioService\n\nMinioService\n\nDocumentApplicationsModule -->\n\nMinioService->DocumentApplicationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/document-applications/document-applications.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DocumentApplicationsService\n                        \n                        \n                            MinioService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            DocumentApplicationsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            DocumentApplicationsService\n                        \n                        \n                            MinioService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { DocumentApplicationsService } from './document-applications.service';\nimport { DocumentApplicationsController } from './document-applications.controller';\nimport { DocumentApplication } from './entities/document-application.entity';\nimport { DocumentFile } from './entities/document-file.entity';\nimport { ApplicationStatusHistory } from './entities/application-status-history.entity';\nimport { MinioService } from './services/minio.service';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      DocumentApplication,\n      DocumentFile,\n      ApplicationStatusHistory,\n    ]),\n  ],\n  controllers: [DocumentApplicationsController],\n  providers: [DocumentApplicationsService, MinioService],\n  exports: [DocumentApplicationsService, MinioService],\n})\nexport class DocumentApplicationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DocumentFile.html":{"url":"entities/DocumentFile.html","title":"entity - DocumentFile","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DocumentFile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/document-applications/entities/document-file.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                application\n                            \n                            \n                                    \n                                applicationId\n                            \n                            \n                                    \n                                documentCategory\n                            \n                            \n                                    \n                                fileName\n                            \n                            \n                                    \n                                fileSize\n                            \n                            \n                                    \n                                fileType\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                minioObjectName\n                            \n                            \n                                    \n                                uploadedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        application\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DocumentApplication\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, app => app.files, {onDelete: 'CASCADE'})@JoinColumn({name: 'application_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        applicationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'application_id', length: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        documentCategory\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'document_category', length: 250, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        fileName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'file_name', length: 255})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        fileSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'file_size', type: 'bigint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        fileType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'file_type', length: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        minioObjectName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'minio_object_name', length: 500})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        uploadedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'uploaded_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/entities/document-file.entity.ts:38\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  CreateDateColumn,\n  ManyToOne,\n  JoinColumn,\n  Index,\n} from 'typeorm';\nimport { DocumentApplication } from './document-application.entity';\n\n@Entity('document_files')\n@Index(['applicationId'])\n@Index(['documentCategory'])\nexport class DocumentFile {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ name: 'application_id', length: 50 })\n  applicationId: string;\n\n  @Column({ name: 'file_name', length: 255 })\n  fileName: string;\n\n  @Column({ name: 'file_type', length: 100 })\n  fileType: string;\n\n  @Column({ name: 'file_size', type: 'bigint' })\n  fileSize: number;\n\n  @Column({ name: 'minio_object_name', length: 500 })\n  minioObjectName: string;\n\n  @Column({ name: 'document_category', length: 250, nullable: true })\n  documentCategory: string;\n\n  @CreateDateColumn({ name: 'uploaded_at' })\n  uploadedAt: Date;\n\n  // Relations\n  @ManyToOne(() => DocumentApplication, (app) => app.files, {\n    onDelete: 'CASCADE',\n  })\n  @JoinColumn({ name: 'application_id' })\n  application: DocumentApplication;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FindAllOptions.html":{"url":"interfaces/FindAllOptions.html","title":"interface - FindAllOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FindAllOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            limit\n                                        \n                                \n                                \n                                        \n                                            page\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            role\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            search\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        limit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        limit:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        page\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        page:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        search\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        search:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  BadRequestException,\n  ConflictException,\n  Logger,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, Like, In } from 'typeorm';\nimport { User } from './entities/user.entity';\nimport { AdminUpdateUserDto } from '../auth/dto/update-user.dto'; // Import from auth module\nimport { RolesService } from '../roles/roles.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport * as bcrypt from 'bcrypt';\n\ninterface FindAllOptions {\n  page: number;\n  limit: number;\n  search?: string;\n  role?: string;\n}\n\nexport interface UserStats {\n  totalUsers: number;\n  activeUsers: number;\n  inactiveUsers: number;\n  usersByRole: { roleName: string; count: number }[];\n  recentUsers: Omit[];\n}\n\n@Injectable()\nexport class UsersService {\n  private readonly logger = new Logger(UsersService.name);\n\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n    private rolesService: RolesService,\n  ) {}\n\n  async findAll(options: FindAllOptions) {\n    const { page, limit, search, role } = options;\n    const skip = (page - 1) * limit;\n\n    const queryBuilder = this.usersRepository\n      .createQueryBuilder('user')\n      .leftJoinAndSelect('user.defaultRole', 'defaultRole')\n      .leftJoinAndSelect('user.roles', 'roles');\n\n    // Apply search filter\n    if (search) {\n      queryBuilder.where(\n        '(user.firstName LIKE :search OR user.lastName LIKE :search OR user.email LIKE :search OR user.username LIKE :search)',\n        { search: `%${search}%` },\n      );\n    }\n\n    // Apply role filter\n    if (role) {\n      queryBuilder.andWhere('roles.name = :role', { role });\n    }\n\n    queryBuilder.orderBy('user.createdAt', 'DESC').skip(skip).take(limit);\n\n    const [users, total] = await queryBuilder.getManyAndCount();\n\n    // Remove passwords from response\n    const sanitizedUsers = users.map((user) => {\n      const { password, ...userWithoutPassword } = user;\n      return {\n        ...userWithoutPassword,\n        roles: user.roles.map((role) => role.name),\n        defaultRole: user.defaultRole?.name || 'citizen',\n      };\n    });\n\n    return {\n      users: sanitizedUsers,\n      total,\n      page,\n      limit,\n      totalPages: Math.ceil(total / limit),\n    };\n  }\n\n  async findOne(id: number): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id },\n      relations: ['defaultRole', 'roles'],\n    });\n\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    // Remove password and format response\n\n    const { password, ...userWithoutPassword } = user;\n    return {\n      ...userWithoutPassword,\n      roles: user.roles.map((role) => role.name),\n      defaultRole: user.defaultRole?.name || 'citizen',\n    };\n  }\n\n  // Admin-only update method\n  async adminUpdate(\n    id: number,\n    updateUserDto: AdminUpdateUserDto,\n  ): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id },\n      relations: ['roles'],\n    });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    const {\n      email,\n\n      username,\n\n      firstName,\n\n      middleName,\n\n      lastName,\n\n      nameExtension,\n\n      contactNumber,\n\n      roleIds,\n\n      defaultRoleId,\n    } = updateUserDto;\n\n    // Check email uniqueness if being updated\n    if (email && email !== user.email) {\n      const existingUser = await this.usersRepository.findOne({\n        where: { email },\n      });\n      if (existingUser) {\n        throw new ConflictException('Email already exists');\n      }\n    }\n\n    // Check username uniqueness if being updated\n    if (username && username !== user.username) {\n      const existingUser = await this.usersRepository.findOne({\n        where: { username },\n      });\n      if (existingUser) {\n        throw new ConflictException('Username already exists');\n      }\n    }\n\n    // Update fields\n    const updateData: any = {};\n\n    if (email) updateData.email = email;\n    if (username) updateData.username = username;\n    if (firstName) updateData.firstName = firstName;\n    if (lastName) updateData.lastName = lastName;\n    if (contactNumber) updateData.contactNumber = contactNumber;\n\n    // Handle optional fields\n    if (middleName !== undefined) updateData.middleName = middleName;\n    if (nameExtension !== undefined) updateData.nameExtension = nameExtension;\n    if (defaultRoleId !== undefined) updateData.defaultRoleId = defaultRoleId;\n\n    // Update name if name components changed\n    if (\n      firstName ||\n      middleName !== undefined ||\n      lastName ||\n      nameExtension !== undefined\n    ) {\n      const newFirstName = firstName || user.firstName;\n      const newMiddleName =\n        middleName !== undefined ? middleName : user.middleName;\n      const newLastName = lastName || user.lastName;\n      const newNameExtension =\n        nameExtension !== undefined ? nameExtension : user.nameExtension;\n\n      updateData.name = `${newFirstName} ${newMiddleName ? newMiddleName + ' ' : ''}${newLastName}${newNameExtension ? ' ' + newNameExtension : ''}`;\n    }\n\n    await this.usersRepository.update(id, updateData);\n\n    // Update roles if provided\n    if (roleIds !== undefined) {\n      // Remove existing roles and assign new ones\n      await this.usersRepository\n        .createQueryBuilder()\n        .relation(User, 'roles')\n        .of(id)\n        .remove(user.roles);\n\n      if (roleIds.length > 0) {\n        await this.rolesService.assignRolesToUser(id, roleIds);\n      }\n    }\n\n    return this.findOne(id);\n  }\n\n  async remove(id: number): Promise {\n    const user = await this.usersRepository.findOne({ where: { id } });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    await this.usersRepository.delete(id);\n    return { message: `User with ID ${id} has been deleted` };\n  }\n\n  async updateStatus(id: number, isActive: boolean): Promise {\n    const user = await this.usersRepository.findOne({ where: { id } });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    await this.usersRepository.update(id, { isActive });\n    return this.findOne(id);\n  }\n\n  async getStats(): Promise {\n    const totalUsers = await this.usersRepository.count();\n    const activeUsers = await this.usersRepository.count({\n      where: { isActive: true },\n    });\n    const inactiveUsers = totalUsers - activeUsers;\n\n    // Get user count by role\n    const roleStats = await this.usersRepository\n      .createQueryBuilder('user')\n      .leftJoin('user.roles', 'role')\n      .select('role.name', 'roleName')\n      .addSelect('COUNT(user.id)', 'count')\n      .groupBy('role.name')\n      .getRawMany();\n\n    const usersByRole = roleStats.map((stat) => ({\n      roleName: stat.roleName || 'No Role',\n\n      count: parseInt(stat.count),\n    }));\n\n    // Get recent users (last 10)\n    const recentUsers = await this.usersRepository.find({\n      order: { createdAt: 'DESC' },\n      take: 10,\n      relations: ['defaultRole', 'roles'],\n    });\n\n    const sanitizedRecentUsers = recentUsers.map((user) => {\n      const { password, ...userWithoutPassword } = user;\n      return userWithoutPassword as Omit;\n    });\n\n    return {\n      totalUsers,\n      activeUsers,\n      inactiveUsers,\n      usersByRole,\n      recentUsers: sanitizedRecentUsers,\n    };\n  }\n\n  async findByEmail(email: string): Promise {\n    return this.usersRepository.findOne({\n      where: { email },\n      relations: ['defaultRole', 'roles'],\n    });\n  }\n\n  async findByUsername(username: string): Promise {\n    return this.usersRepository.findOne({\n      where: { username },\n      relations: ['defaultRole', 'roles'],\n    });\n  }\n\n  async create(createUserDto: CreateUserDto) {\n    const {\n      email,\n      username,\n      password,\n      firstName,\n      middleName,\n      lastName,\n      nameExtension,\n      contactNumber,\n      name,\n      roleIds,\n      defaultRoleId,\n    } = createUserDto;\n\n    // Generate full name if not provided\n    const fullName =\n      name ||\n      `${firstName} ${middleName ? middleName + ' ' : ''}${lastName}${nameExtension ? ' ' + nameExtension : ''}`;\n\n    // Check if user already exists\n    const existingUserByEmail = await this.usersRepository.findOne({\n      where: { email },\n    });\n    if (existingUserByEmail) {\n      throw new ConflictException('Email already exists');\n    }\n\n    if (username) {\n      const existingUserByUsername = await this.usersRepository.findOne({\n        where: { username },\n      });\n      if (existingUserByUsername) {\n        throw new ConflictException('Username already exists');\n      }\n    }\n\n    try {\n      // Create user\n      const user = this.usersRepository.create({\n        email,\n        username,\n        password, // Should be hashed by the caller\n        firstName,\n        middleName,\n        lastName,\n        nameExtension,\n        contactNumber,\n        name: fullName,\n        defaultRoleId: defaultRoleId || 4, // Default to citizen\n      });\n\n      await this.usersRepository.save(user);\n\n      // Assign roles if provided\n      if (roleIds && roleIds.length > 0) {\n        await this.rolesService.assignRolesToUser(user.id, roleIds);\n      }\n\n      return user;\n    } catch (error) {\n      this.logger.error('Error creating user:', error);\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ForgotPasswordDto.html":{"url":"classes/ForgotPasswordDto.html","title":"class - ForgotPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ForgotPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/otp.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Registered email address', example: 'user@example.com', format: 'email'})@IsEmail({}, {message: 'Please provide a valid email address'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/otp.dto.ts:69\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsString,\n  IsOptional,\n  Length,\n  Matches,\n} from 'class-validator';\n\nexport class SendOtpDto {\n  @ApiProperty({\n    description: 'Email address to send OTP to',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiPropertyOptional({\n    description: 'Purpose of the OTP',\n    example: 'verification',\n    enum: ['verification', 'password_reset'],\n    default: 'verification',\n  })\n  @IsString()\n  @IsOptional()\n  purpose?: string = 'verification';\n}\n\nexport class VerifyOtpDto {\n  @ApiProperty({\n    description: 'Email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    description: '6-digit OTP code',\n    example: '123456',\n    minLength: 6,\n    maxLength: 6,\n    pattern: '^[0-9]{6}$',\n  })\n  @IsString()\n  @Length(6, 6, { message: 'OTP must be exactly 6 digits' })\n  @Matches(/^[0-9]{6}$/, { message: 'OTP must contain only numbers' })\n  otp: string;\n\n  @ApiPropertyOptional({\n    description: 'Purpose of the OTP verification',\n    example: 'verification',\n    enum: ['verification', 'password_reset'],\n    default: 'verification',\n  })\n  @IsString()\n  @IsOptional()\n  purpose?: string = 'verification';\n}\n\nexport class ForgotPasswordDto {\n  @ApiProperty({\n    description: 'Registered email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n}\n\nexport class ResetPasswordDto {\n  @ApiProperty({\n    description: 'Email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    description: '6-digit OTP code received via email',\n    example: '123456',\n    minLength: 6,\n    maxLength: 6,\n    pattern: '^[0-9]{6}$',\n  })\n  @IsString()\n  @Length(6, 6, { message: 'OTP must be exactly 6 digits' })\n  @Matches(/^[0-9]{6}$/, { message: 'OTP must contain only numbers' })\n  otp: string;\n\n  @ApiProperty({\n    description: 'New password (must meet complexity requirements)',\n    example: 'NewSecure123!',\n    minLength: 8,\n    pattern:\n      '^(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)(?=.*[@$!%*?&])[A-Za-z\\\\d@$!%*?&]{8,}$',\n  })\n  @IsString()\n  @Length(8, 100, { message: 'Password must be at least 8 characters long' })\n  @Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/, {\n    message:\n      'Password must contain uppercase, lowercase, numbers, and special characters',\n  })\n  newPassword: string;\n}\n\nexport class TestOtpDto {\n  @ApiProperty({\n    description: 'Email address for testing OTP generation',\n    example: 'test@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n}\n\nexport class ApplicationNotificationDto {\n  @ApiProperty({\n    description: 'Recipient email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    description: 'Application ID',\n    example: 'APP-001',\n  })\n  @IsString()\n  applicationId: string;\n\n  @ApiProperty({\n    description: 'Application status',\n    example: 'Approved',\n    enum: ['Pending', 'Approved', 'Rejected', 'Ready for Pickup'],\n  })\n  @IsString()\n  status: string;\n\n  @ApiProperty({\n    description: 'Type of application',\n    example: 'Birth Certificate',\n  })\n  @IsString()\n  applicationType: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            roles\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        roles:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\n\ninterface JwtPayload {\n  sub: number;\n  email: string;\n  roles?: string[];\n}\n\n// Strategy for validating JWT tokens in NestJS\nexport interface AuthenticatedUser {\n  id: number;\n  email: string;\n  roles: Array;\n}\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private configService: ConfigService) {\n    const secretKey = configService.get('JWT_SECRET');\n\n    if (!secretKey) {\n      throw new Error('JWT_SECRET is not defined in environment variables');\n    }\n\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: secretKey,\n    });\n  }\n\n  validate(payload: JwtPayload): AuthenticatedUser {\n    // Validation for the payload\n    if (!payload || payload.sub === undefined || isNaN(Number(payload.sub))) {\n      throw new UnauthorizedException('Invalid token payload');\n    }\n\n    const userId = Number(payload.sub);\n    const email = String(payload.email || '');\n    const roles = Array.isArray(payload.roles)\n      ? payload.roles.map((role) => ({ name: role }))\n      : [];\n\n    return {\n      id: userId,\n      email,\n      roles,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(payload: JwtPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            JwtPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         AuthenticatedUser\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\n\ninterface JwtPayload {\n  sub: number;\n  email: string;\n  roles?: string[];\n}\n\n// Strategy for validating JWT tokens in NestJS\nexport interface AuthenticatedUser {\n  id: number;\n  email: string;\n  roles: Array;\n}\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private configService: ConfigService) {\n    const secretKey = configService.get('JWT_SECRET');\n\n    if (!secretKey) {\n      throw new Error('JWT_SECRET is not defined in environment variables');\n    }\n\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: secretKey,\n    });\n  }\n\n  validate(payload: JwtPayload): AuthenticatedUser {\n    // Validation for the payload\n    if (!payload || payload.sub === undefined || isNaN(Number(payload.sub))) {\n      throw new UnauthorizedException('Invalid token payload');\n    }\n\n    const userId = Number(payload.sub);\n    const email = String(payload.email || '');\n    const roles = Array.isArray(payload.roles)\n      ? payload.roles.map((role) => ({ name: role }))\n      : [];\n\n    return {\n      id: userId,\n      email,\n      roles,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LockoutData.html":{"url":"interfaces/LockoutData.html","title":"interface - LockoutData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LockoutData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            attempts\n                                        \n                                \n                                \n                                        \n                                            lastAttempt\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            lockedUntil\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        attempts\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        attempts:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastAttempt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastAttempt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lockedUntil\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lockedUntil:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Injectable,\n  UnauthorizedException,\n  ConflictException,\n  BadRequestException,\n  Logger,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from '../users/entities/user.entity';\nimport * as bcrypt from 'bcrypt';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { RolesService } from '../roles/roles.service';\nimport { UpdateUserDto, AdminUpdateUserDto } from './dto/update-user.dto';\n\ninterface LockoutData {\n  attempts: number;\n  lastAttempt: Date;\n  lockedUntil?: Date;\n}\n\n@Injectable()\nexport class AuthService {\n  private readonly logger = new Logger(AuthService.name);\n\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n    private jwtService: JwtService,\n    private rolesService: RolesService,\n  ) {}\n\n  private readonly failedAttempts = new Map();\n\n  async validateUser(loginDto: LoginDto): Promise {\n    const user = await this.usersRepository.findOne({\n      where: [\n        { email: loginDto.emailOrUsername },\n        { username: loginDto.emailOrUsername },\n      ],\n    });\n    if (user && (await bcrypt.compare(loginDto.password, user.password))) {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { password: __password, ...result } = user;\n      return result;\n    }\n    return null;\n  }\n\n  async getAccountLockout(identifier: string) {\n    const key = identifier.toLowerCase();\n    return this.failedAttempts.get(key) || null;\n  }\n\n  async recordFailedLoginAttempt(identifier: string) {\n    const key = identifier.toLowerCase();\n    const current = this.failedAttempts.get(key) || {\n      attempts: 0,\n      lastAttempt: new Date(),\n    };\n\n    current.attempts++;\n    current.lastAttempt = new Date();\n\n    // Lock account after 5 attempts for 3 minutes (was 15 minutes)\n    if (current.attempts >= 5) {\n      current.lockedUntil = new Date(Date.now() + 3 * 60 * 1000); // 3 minutes\n      this.logger.warn(\n        `Account locked for ${identifier} after ${current.attempts} failed attempts`,\n      );\n    }\n\n    this.failedAttempts.set(key, current);\n\n    return {\n      attempts: current.attempts,\n      isLocked: current.attempts >= 5,\n      lockedUntil: current.lockedUntil,\n      timeRemaining: current.lockedUntil\n        ? Math.ceil(\n            (current.lockedUntil.getTime() - Date.now()) / 1000,\n          )\n        : 0,\n    };\n  }\n\n  async clearAccountLockout(identifier: string) {\n    const key = identifier.toLowerCase();\n    this.failedAttempts.delete(key);\n    this.logger.log(`Account lockout cleared for ${identifier}`);\n    return { success: true };\n  }\n\n  async login(loginDto: LoginDto) {\n    const identifier = loginDto.emailOrUsername.toLowerCase();\n\n    // Check if account is locked\n    const lockoutData = await this.getAccountLockout(identifier);\n    if (lockoutData?.lockedUntil && lockoutData.lockedUntil > new Date()) {\n      const timeRemaining = Math.ceil(\n        (lockoutData.lockedUntil.getTime() - Date.now()) / 1000,\n      );\n      const minutesRemaining = Math.ceil(timeRemaining / 60);\n      throw new UnauthorizedException(\n        `Account locked due to multiple failed attempts. Try again in ${minutesRemaining} minutes or use \"Forgot Password\".`,\n      );\n    }\n\n    this.logger.log('Login attempt with:', loginDto);\n\n    try {\n      const user = await this.usersRepository.findOne({\n        where: [\n          { email: loginDto.emailOrUsername },\n          { username: loginDto.emailOrUsername },\n        ],\n        relations: ['defaultRole'],\n      });\n\n      this.logger.log('User found:', user ? 'Yes' : 'No');\n\n      if (!user) {\n        throw new UnauthorizedException('Invalid email or password');\n      }\n\n      // Debug password check\n      this.logger.log('Stored password hash:', user.password);\n      this.logger.log('Comparing with:', loginDto.password);\n\n      const isPasswordValid = await bcrypt.compare(\n        loginDto.password,\n        user.password,\n      );\n      this.logger.log('Password valid:', isPasswordValid);\n\n      if (!isPasswordValid) {\n        throw new UnauthorizedException('Invalid email or password');\n      }\n\n      // Get user roles\n      const roles = await this.rolesService.getUserRoles(user.id);\n      const roleNames = roles.map((role) => role.name);\n\n      const payload = {\n        sub: user.id,\n        email: user.email,\n        roles: roleNames,\n      };\n\n      const token = this.jwtService.sign(payload);\n      this.logger.log('Generated token:', token ? 'Success' : 'Failed');\n\n      // Remove password from response\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { password: __password, ...userWithoutPassword } = user;\n\n      return {\n        access_token: token,\n        user: {\n          ...userWithoutPassword,\n          roles: roleNames,\n          defaultRole: user.defaultRole?.name || 'citizen',\n        },\n      };\n    } catch (error) {\n      this.logger.error('Login error:', error);\n      throw error;\n    }\n  }\n\n  async register(registerDto: RegisterDto) {\n    const {\n      email,\n      username,\n      password,\n      firstName,\n      middleName,\n      lastName,\n      nameExtension,\n      contactNumber,\n    } = registerDto;\n\n    // Generate full name\n    const name = `${firstName} ${middleName ? middleName + ' ' : ''}${lastName}${nameExtension ? ' ' + nameExtension : ''}`;\n\n    // Validate email format\n    if (!this.isValidEmail(email)) {\n      throw new BadRequestException('Invalid email format');\n    }\n\n    // Check if user exists by email\n    const existingUserByEmail = await this.usersRepository.findOne({\n      where: { email },\n    });\n    if (existingUserByEmail) {\n      throw new ConflictException('Email already exists');\n    }\n\n    // Check if username is taken\n    if (username) {\n      const existingUserByUsername = await this.usersRepository.findOne({\n        where: { username },\n      });\n      if (existingUserByUsername) {\n        throw new ConflictException('Username already exists');\n      }\n    }\n\n    // Validate password strength\n    const passwordValidation = this.validatePasswordStrength(password);\n    if (!passwordValidation.isValid) {\n      throw new BadRequestException(passwordValidation.message);\n    }\n\n    // Hash password\n    const salt = await bcrypt.genSalt();\n    const hashedPassword = await bcrypt.hash(password, salt);\n\n    try {\n      // Create new user with all fields\n      const user = this.usersRepository.create({\n        email,\n        username,\n        password: hashedPassword,\n        firstName,\n        middleName,\n        lastName,\n        nameExtension,\n        contactNumber,\n        name,\n      });\n\n      await this.usersRepository.save(user);\n\n      // Add citizen role to the user\n      try {\n        const citizenRole = await this.rolesService.findByName('citizen');\n        await this.rolesService.assignRolesToUser(user.id, [citizenRole.id]);\n\n        // Set default role\n        user.defaultRoleId = citizenRole.id;\n        await this.usersRepository.save(user);\n      } catch (error) {\n        this.logger.error('Error assigning citizen role:', error);\n        // Rollback: Delete the user to maintain a consistent state\n        await this.usersRepository.delete(user.id);\n        throw new ConflictException(\n          'Failed to assign citizen role. Registration rolled back.',\n        );\n      }\n\n      // Generate JWT token\n      const payload = { sub: user.id, email: user.email, roles: ['citizen'] };\n\n      // Remove password from response\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { password: __password, ...userWithoutPassword } = user;\n\n      return {\n        access_token: this.jwtService.sign(payload),\n        user: {\n          ...userWithoutPassword,\n          roles: ['citizen'],\n          defaultRole: 'citizen',\n        },\n      };\n    } catch (error) {\n      this.logger.error('Registration error:', error);\n      throw error;\n    }\n  }\n\n  private isValidEmail(email: string): boolean {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  }\n\n  async getProfile(userId: number) {\n    // Validation for userId\n    if (!userId || isNaN(userId)) {\n      throw new UnauthorizedException('Invalid user ID');\n    }\n\n    const user = await this.usersRepository.findOne({\n      where: { id: userId },\n      relations: ['defaultRole'],\n    });\n    if (!user) {\n      throw new UnauthorizedException('User not found');\n    }\n\n    // Get user roles\n    const roles = await this.rolesService.getUserRoles(userId);\n    const roleNames = roles.map((role) => role.name);\n\n    // Remove password from response\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { password: __password, ...result } = user;\n    return {\n      ...result,\n      roles: roleNames,\n      defaultRole: user.defaultRole?.name || 'citizen',\n    };\n  }\n\n  async updateUserInfo(userId: number, updateUserDto: UpdateUserDto) {\n    try {\n      // First get the existing user\n      const user = await this.usersRepository.findOne({\n        where: { id: userId },\n      });\n\n      if (!user) {\n        throw new UnauthorizedException('User not found');\n      }\n\n      // Check if email is being updated and not already taken\n      if (updateUserDto.email && updateUserDto.email !== user.email) {\n        // Validate email format\n        if (!this.isValidEmail(updateUserDto.email)) {\n          throw new BadRequestException('Invalid email format');\n        }\n\n        const existingUserByEmail = await this.usersRepository.findOne({\n          where: { email: updateUserDto.email },\n        });\n\n        if (existingUserByEmail && existingUserByEmail.id !== userId) {\n          throw new ConflictException('Email already exists');\n        }\n      }\n\n      // Check if username is being updated and not already taken\n      if (updateUserDto.username && updateUserDto.username !== user.username) {\n        const existingUserByUsername = await this.usersRepository.findOne({\n          where: { username: updateUserDto.username },\n        });\n\n        if (existingUserByUsername && existingUserByUsername.id !== userId) {\n          throw new ConflictException('Username already exists');\n        }\n      }\n\n      // Handle password change if provided\n      if (updateUserDto.password) {\n        // Validate password strength\n        const passwordValidation = this.validatePasswordStrength(\n          updateUserDto.password,\n        );\n        if (!passwordValidation.isValid) {\n          throw new BadRequestException(passwordValidation.message);\n        }\n\n        // Hash new password\n        const salt = await bcrypt.genSalt();\n        const hashedPassword = await bcrypt.hash(updateUserDto.password, salt);\n        updateUserDto.password = hashedPassword;\n      } else {\n        // Remove password from DTO if not being updated\n        delete updateUserDto.password;\n      }\n\n      // Update name if name parts are changed\n      let shouldUpdateName = false;\n      const nameComponents = {\n        firstName: updateUserDto.firstName || user.firstName,\n        middleName:\n          updateUserDto.middleName !== undefined\n            ? updateUserDto.middleName\n            : user.middleName,\n        lastName: updateUserDto.lastName || user.lastName,\n        nameExtension:\n          updateUserDto.nameExtension !== undefined\n            ? updateUserDto.nameExtension\n            : user.nameExtension,\n      };\n\n      if (\n        updateUserDto.firstName ||\n        updateUserDto.middleName !== undefined ||\n        updateUserDto.lastName ||\n        updateUserDto.nameExtension !== undefined\n      ) {\n        shouldUpdateName = true;\n      }\n\n      // Generate full name if any name component changed\n      if (shouldUpdateName) {\n        const fullName = `${nameComponents.firstName} ${\n          nameComponents.middleName ? nameComponents.middleName + ' ' : ''\n        }${nameComponents.lastName}${\n          nameComponents.nameExtension ? ' ' + nameComponents.nameExtension : ''\n        }`;\n        updateUserDto['name'] = fullName;\n      }\n\n      try {\n        // 🔥 CRITICAL FIX: Remove role-related fields before updating User entity\n        const { roleIds, defaultRoleId, ...userUpdateFields } =\n          updateUserDto as any;\n\n        // Update user with only valid User entity fields\n        await this.usersRepository.update(userId, userUpdateFields);\n\n        // Get updated user with relations\n        const updatedUser = await this.usersRepository.findOne({\n          where: { id: userId },\n          relations: ['defaultRole'],\n        });\n\n        if (!updatedUser) {\n          throw new BadRequestException('Failed to retrieve updated user');\n        }\n\n        // Get user roles\n        const roles = await this.rolesService.getUserRoles(userId);\n        const roleNames = roles.map((role) => role.name);\n\n        // Remove password from response\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { password: __password, ...result } = updatedUser;\n\n        return {\n          ...result,\n          roles: roleNames,\n          defaultRole: updatedUser.defaultRole?.name || 'citizen',\n        };\n      } catch (error: unknown) {\n        this.logger.error('User update database error:', error);\n        if (\n          typeof error === 'object' &&\n          error !== null &&\n          'code' in error &&\n          error.code === 'ER_DUP_ENTRY'\n        ) {\n          throw new ConflictException('Email or username already exists');\n        }\n        throw new BadRequestException(\n          'Failed to update user information in database',\n        );\n      }\n    } catch (error) {\n      this.logger.error('User update error:', error);\n      // Re-throw specific errors\n      if (\n        error instanceof UnauthorizedException ||\n        error instanceof BadRequestException ||\n        error instanceof ConflictException\n      ) {\n        throw error;\n      }\n      // For any other unexpected error\n      throw new BadRequestException('Failed to update user information');\n    }\n  }\n  async adminUpdateUser(\n    adminId: number,\n    targetUserId: number,\n    updateUserDto: AdminUpdateUserDto,\n  ) {\n    this.logger.log(\n      `Admin ${adminId} attempting to update user ${targetUserId}`,\n      updateUserDto,\n    );\n\n    try {\n      // Verify the admin has proper permissions\n      const admin = await this.usersRepository.findOne({\n        where: { id: adminId },\n      });\n\n      if (!admin) {\n        throw new UnauthorizedException('Admin not found');\n      }\n\n      // Get admin roles\n      const adminRoles = await this.rolesService.getUserRoles(adminId);\n      const adminRoleNames = adminRoles.map((role) => role.name);\n\n      // Check if the user has admin or super_admin role\n      const isAuthorized = adminRoleNames.some(\n        (role) => role === 'admin' || role === 'super_admin',\n      );\n\n      if (!isAuthorized) {\n        throw new UnauthorizedException('Insufficient permissions');\n      }\n\n      // Check if target user exists\n      const targetUser = await this.usersRepository.findOne({\n        where: { id: targetUserId },\n      });\n\n      if (!targetUser) {\n        throw new BadRequestException(`User with ID ${targetUserId} not found`);\n      }\n\n      // First perform the basic user update\n      // We'll catch any errors here to handle them appropriately\n      try {\n        await this.updateUserInfo(targetUserId, updateUserDto);\n      } catch (err) {\n        this.logger.error('Error during basic user update:', err);\n        throw err; // Re-throw to be caught by outer try-catch\n      }\n\n      // Handle role updates if provided\n      if (updateUserDto.roleIds && updateUserDto.roleIds.length > 0) {\n        try {\n          // Verify all roles exist before assigning\n          for (const roleId of updateUserDto.roleIds) {\n            try {\n              await this.rolesService.findOne(roleId);\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            } catch (_) {\n              throw new BadRequestException(`Role with ID ${roleId} not found`);\n            }\n          }\n\n          // Assign roles\n          await this.rolesService.assignRolesToUser(\n            targetUserId,\n            updateUserDto.roleIds,\n          );\n          this.logger.log(\n            `Assigned roles ${updateUserDto.roleIds.join(', ')} to user ${targetUserId}`,\n          );\n        } catch (error) {\n          this.logger.error('Error assigning roles:', error);\n          throw new BadRequestException(\n            error instanceof Error ? error.message : 'Failed to assign roles',\n          );\n        }\n      }\n\n      // Update default role if provided\n      if (updateUserDto.defaultRoleId) {\n        try {\n          // Verify the role exists\n          try {\n            await this.rolesService.findOne(updateUserDto.defaultRoleId);\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          } catch (_) {\n            throw new BadRequestException(\n              `Default role with ID ${updateUserDto.defaultRoleId} not found`,\n            );\n          }\n\n          // Verify user has this role assigned or will have it assigned\n          const userRoles = await this.rolesService.getUserRoles(targetUserId);\n          const hasRoleAssigned = userRoles.some(\n            (role) => role.id === updateUserDto.defaultRoleId,\n          );\n\n          const willBeAssigned =\n            updateUserDto.roleIds &&\n            updateUserDto.roleIds.includes(updateUserDto.defaultRoleId);\n\n          if (!hasRoleAssigned && !willBeAssigned) {\n            throw new BadRequestException(\n              'Cannot set default role to a role the user does not have',\n            );\n          }\n\n          // Update the default role\n          await this.usersRepository.update(targetUserId, {\n            defaultRoleId: updateUserDto.defaultRoleId,\n          });\n          this.logger.log(\n            `Updated default role to ${updateUserDto.defaultRoleId} for user ${targetUserId}`,\n          );\n        } catch (error) {\n          this.logger.error('Error updating default role:', error);\n          throw new BadRequestException(\n            error instanceof Error\n              ? error.message\n              : 'Failed to update default role',\n          );\n        }\n      }\n\n      // Return the fully updated user\n      try {\n        const updatedUser = await this.getProfile(targetUserId);\n        return updatedUser;\n      } catch (error) {\n        this.logger.error('Error retrieving updated user profile:', error);\n        throw new BadRequestException(\n          'User was updated but profile could not be retrieved',\n        );\n      }\n    } catch (error) {\n      this.logger.error('Admin update user error:', error);\n\n      // Re-throw specific exceptions\n      if (\n        error instanceof UnauthorizedException ||\n        error instanceof BadRequestException ||\n        error instanceof ConflictException\n      ) {\n        throw error;\n      }\n\n      // For any other errors\n      throw new BadRequestException(\n        'Failed to update user: Unexpected error occurred',\n      );\n    }\n  }\n\n  // Add this method to find user by email\n  async findUserByEmail(email: string): Promise {\n    try {\n      const user = await this.usersRepository.findOne({\n        where: { email },\n        relations: ['defaultRole'],\n      });\n      return user;\n    } catch (error) {\n      this.logger.error('Error finding user by email:', error);\n      return null;\n    }\n  }\n\n  // Add this method to update password\n  async updatePassword(email: string, newPassword: string): Promise {\n    try {\n      // Validate password strength\n      const passwordValidation = this.validatePasswordStrength(newPassword);\n      if (!passwordValidation.isValid) {\n        throw new BadRequestException(passwordValidation.message);\n      }\n\n      // Find user by email\n      const user = await this.findUserByEmail(email);\n      if (!user) {\n        throw new BadRequestException('User not found');\n      }\n\n      // Hash new password\n      const salt = await bcrypt.genSalt();\n      const hashedPassword = await bcrypt.hash(newPassword, salt);\n\n      // Update password in database\n      await this.usersRepository.update(\n        { id: user.id },\n        { password: hashedPassword },\n      );\n\n      this.logger.log(`Password updated successfully for user: ${email}`);\n    } catch (error) {\n      this.logger.error('Error updating password:', error);\n      throw error;\n    }\n  }\n\n  private validatePasswordStrength(password: string): {\n    isValid: boolean;\n    message?: string;\n  } {\n    if (!password) {\n      return { isValid: false, message: 'Password is required' };\n    }\n\n    if (password.length ]/.test(password);\n\n    if (!hasUpperCase) {\n      return {\n        isValid: false,\n        message: 'Password must contain at least one uppercase letter',\n      };\n    }\n\n    if (!hasLowerCase) {\n      return {\n        isValid: false,\n        message: 'Password must contain at least one lowercase letter',\n      };\n    }\n\n    if (!hasNumbers) {\n      return {\n        isValid: false,\n        message: 'Password must contain at least one number',\n      };\n    }\n\n    if (!hasSpecialChars) {\n      return {\n        isValid: false,\n        message:\n          'Password must contain at least one special character (!@#$%^&*(),.?\":{}|<>)',\n      };\n    }\n\n    return { isValid: true };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for user login\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                emailOrUsername\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        emailOrUsername\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Email or username for login', example: 'test@example.com'})@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Test User password', example: 'password123'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\n/**\n * DTO for user login\n * @class LoginDto\n */\n\nexport class LoginDto {\n  @ApiProperty({\n    description: 'Email or username for login',\n    example: 'test@example.com',\n  })\n  @IsNotEmpty()\n  emailOrUsername: string;\n\n  @ApiProperty({\n    description: 'Test User password',\n    example: 'password123',\n  })\n  @IsString()\n  @IsNotEmpty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MinioService.html":{"url":"injectables/MinioService.html","title":"injectable - MinioService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MinioService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/minio.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                bucketName\n                            \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                minioClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteFile\n                            \n                            \n                                    Async\n                                getDownloadUrl\n                            \n                            \n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/services/minio.service.ts:8\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteFile(objectName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/minio.service.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                objectName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getDownloadUrl\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDownloadUrl(objectName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/minio.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                objectName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(file: Express.Multer.File, objectName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/minio.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                objectName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        bucketName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/services/minio.service.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(MinioService.name)\n                    \n                \n                    \n                        \n                                Defined in src/services/minio.service.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        minioClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Minio.Client\n\n                    \n                \n                    \n                        \n                                Defined in src/services/minio.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport * as Minio from 'minio';\n\n@Injectable()\nexport class MinioService {\n  private readonly logger = new Logger(MinioService.name);\n  private minioClient: Minio.Client;\n  private bucketName: string;\n\n  constructor() {\n    this.minioClient = new Minio.Client({\n      endPoint: process.env.MINIO_ENDPOINT || 'localhost',\n      port: parseInt(process.env.MINIO_PORT || '9000'),\n      useSSL: process.env.MINIO_USE_SSL === 'true',\n      accessKey: process.env.MINIO_ACCESS_KEY || 'minioadmin',\n      secretKey: process.env.MINIO_SECRET_KEY || 'minioadmin123',\n    });\n\n    this.bucketName = process.env.MINIO_BUCKET_NAME || 'bulak-smart-connect';\n  }\n\n  async uploadFile(\n    file: Express.Multer.File,\n    objectName: string,\n  ): Promise {\n    try {\n      await this.minioClient.putObject(\n        this.bucketName,\n        objectName,\n        file.buffer,\n        file.size,\n        {\n          'Content-Type': file.mimetype,\n          'Original-Name': file.originalname,\n        },\n      );\n\n      this.logger.log(`File uploaded: ${objectName}`);\n      return objectName;\n    } catch (error) {\n      this.logger.error('Upload failed:', error);\n      throw error;\n    }\n  }\n\n  async getDownloadUrl(objectName: string): Promise {\n    try {\n      return await this.minioClient.presignedGetObject(\n        this.bucketName,\n        objectName,\n        3600,\n      );\n    } catch (error) {\n      this.logger.error('Get URL failed:', error);\n      throw error;\n    }\n  }\n\n  async deleteFile(objectName: string): Promise {\n    try {\n      await this.minioClient.removeObject(this.bucketName, objectName);\n      this.logger.log(`File deleted: ${objectName}`);\n    } catch (error) {\n      this.logger.error('Delete failed:', error);\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MinioService-1.html":{"url":"injectables/MinioService-1.html","title":"injectable - MinioService-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MinioService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/document-applications/services/minio.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                bucketName\n                            \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                minioClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteFile\n                            \n                            \n                                    Async\n                                ensureBucketExists\n                            \n                            \n                                    Async\n                                getFileInfo\n                            \n                            \n                                    Async\n                                getPresignedUrl\n                            \n                            \n                                    Async\n                                listFiles\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                            \n                                    Async\n                                uploadFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/document-applications/services/minio.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteFile(objectName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/document-applications/services/minio.service.ts:109\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                objectName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        ensureBucketExists\n                        \n                    \n                \n            \n            \n                \n                        \n                    ensureBucketExists()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/document-applications/services/minio.service.ts:50\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getFileInfo\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFileInfo(objectName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/document-applications/services/minio.service.ts:119\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                objectName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPresignedUrl\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPresignedUrl(objectName: string, expiry: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/document-applications/services/minio.service.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                objectName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                expiry\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    3600\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        listFiles\n                        \n                    \n                \n            \n            \n                \n                        \n                    listFiles(prefix?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/document-applications/services/minio.service.ts:128\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                prefix\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/document-applications/services/minio.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        uploadFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    uploadFile(file: Express.Multer.File, objectName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/document-applications/services/minio.service.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                objectName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        bucketName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/services/minio.service.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(MinioService.name)\n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/services/minio.service.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        minioClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Minio.Client\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/services/minio.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, OnModuleInit } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport * as Minio from 'minio';\n\n@Injectable()\nexport class MinioService implements OnModuleInit {\n  private readonly logger = new Logger(MinioService.name);\n  private minioClient: Minio.Client;\n  private bucketName: string;\n\n  constructor(private configService: ConfigService) {\n    const endpoint = this.configService.get(\n      'MINIO_ENDPOINT',\n      'localhost',\n    );\n    const port = this.configService.get('MINIO_PORT', 9000);\n    const useSSLValue = this.configService\n      .get('MINIO_USE_SSL', 'false')\n      .toLowerCase();\n    const useSSL = ['true', '1', 'yes', 'on'].includes(useSSLValue);\n    const accessKey = this.configService.get(\n      'MINIO_ACCESS_KEY',\n      'minioadmin',\n    );\n    const secretKey = this.configService.get(\n      'MINIO_SECRET_KEY',\n      'minioadmin123',\n    );\n\n    this.minioClient = new Minio.Client({\n      endPoint: endpoint,\n      port: port,\n      useSSL: useSSL,\n      accessKey: accessKey,\n      secretKey: secretKey,\n    });\n\n    this.bucketName = this.configService.get(\n      'MINIO_BUCKET_NAME',\n      'bulak-smart-connect',\n    );\n\n    this.logger.log(`MinIO configured with endpoint: ${endpoint}:${port}`);\n  }\n\n  async onModuleInit() {\n    await this.ensureBucketExists();\n  }\n\n  async ensureBucketExists(): Promise {\n    try {\n      const exists = await this.minioClient.bucketExists(this.bucketName);\n      if (!exists) {\n        await this.minioClient.makeBucket(this.bucketName, 'us-east-1');\n        this.logger.log(`Bucket ${this.bucketName} created successfully`);\n      } else {\n        this.logger.log(`Bucket ${this.bucketName} already exists`);\n      }\n    } catch (error) {\n      this.logger.error('Error ensuring bucket exists:', error);\n      throw error;\n    }\n  }\n\n  async uploadFile(\n    file: Express.Multer.File,\n    objectName: string,\n  ): Promise {\n    try {\n      const metaData = {\n        'Content-Type': file.mimetype,\n        'Original-Name': file.originalname,\n        'Upload-Date': new Date().toISOString(),\n        'File-Size': file.size.toString(),\n      };\n\n      await this.minioClient.putObject(\n        this.bucketName,\n        objectName,\n        file.buffer,\n        file.size,\n        metaData,\n      );\n\n      this.logger.log(`File uploaded successfully: ${objectName}`);\n      return objectName;\n    } catch (error) {\n      this.logger.error('Error uploading file:', error);\n      throw error;\n    }\n  }\n\n  async getPresignedUrl(\n    objectName: string,\n    expiry: number = 3600,\n  ): Promise {\n    try {\n      return await this.minioClient.presignedGetObject(\n        this.bucketName,\n        objectName,\n        expiry,\n      );\n    } catch (error) {\n      this.logger.error('Error generating presigned URL:', error);\n      throw error;\n    }\n  }\n\n  async deleteFile(objectName: string): Promise {\n    try {\n      await this.minioClient.removeObject(this.bucketName, objectName);\n      this.logger.log(`File deleted successfully: ${objectName}`);\n    } catch (error) {\n      this.logger.error('Error deleting file:', error);\n      throw error;\n    }\n  }\n\n  async getFileInfo(objectName: string): Promise {\n    try {\n      return await this.minioClient.statObject(this.bucketName, objectName);\n    } catch (error) {\n      this.logger.error('Error getting file info:', error);\n      throw error;\n    }\n  }\n\n  async listFiles(prefix?: string): Promise {\n    return new Promise((resolve, reject) => {\n      const files: any[] = [];\n      const stream = this.minioClient.listObjects(\n        this.bucketName,\n        prefix,\n        true,\n      );\n\n      stream.on('data', (obj) => files.push(obj));\n      stream.on('error', reject);\n      stream.on('end', () => resolve(files));\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/OTP.html":{"url":"entities/OTP.html","title":"entity - OTP","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  OTP\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/otp.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                expiresAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                otp\n                            \n                            \n                                    \n                                purpose\n                            \n                            \n                                    \n                                verified\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/otp.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/otp.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        expiresAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/otp.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/otp.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        otp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/otp.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        purpose\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/otp.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        verified\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/otp.entity.ts:23\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  CreateDateColumn,\n} from 'typeorm';\n\n@Entity('otps')\nexport class OTP {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  email: string;\n\n  @Column()\n  otp: string;\n\n  @Column()\n  purpose: string; // 'verification', 'password_reset', etc.\n\n  @Column({ default: false })\n  verified: boolean;\n\n  @Column({ type: 'timestamp' })\n  expiresAt: Date;\n\n  @CreateDateColumn()\n  createdAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OTPService.html":{"url":"injectables/OTPService.html","title":"injectable - OTPService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OTPService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/otp.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                cleanupExpiredOTPs\n                            \n                            \n                                    Async\n                                generateOTP\n                            \n                            \n                                    Async\n                                verifyOTP\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(otpRepository: Repository, emailService: EmailService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/services/otp.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        otpRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        emailService\n                                                  \n                                                        \n                                                                        EmailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        cleanupExpiredOTPs\n                        \n                    \n                \n            \n            \n                \n                        \n                    cleanupExpiredOTPs()\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/otp.service.ts:92\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateOTP\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateOTP(email: string, purpose: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/otp.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                purpose\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'verification'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyOTP\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyOTP(email: string, otp: string, purpose: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/otp.service.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                otp\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                purpose\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'verification'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { LessThan } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport * as speakeasy from 'speakeasy';\nimport { ConfigService } from '@nestjs/config';\nimport { EmailService } from './email.service';\nimport { OTP } from '../entities/otp.entity';\n\n@Injectable()\nexport class OTPService {\n  constructor(\n    @InjectRepository(OTP)\n    private otpRepository: Repository,\n    private emailService: EmailService,\n    private configService: ConfigService,\n  ) {}\n\n  async generateOTP(\n    email: string,\n    purpose: string = 'verification',\n  ): Promise {\n    // Invalidate any existing OTPs for this email and purpose\n    await this.otpRepository.update(\n      { email, purpose, verified: false },\n      { verified: true }, // Mark as used\n    );\n\n    // Generate new OTP\n    const otpLength = parseInt(this.configService.get('OTP_LENGTH', '6'));\n    const otp = speakeasy.totp({\n      secret: this.configService.get('OTP_SECRET') || 'default-secret-key',\n      digits: otpLength,\n      step: 300, // 5 minutes\n      encoding: 'base32',\n    });\n\n    // Calculate expiry time\n    const expiryMinutes = parseInt(\n      this.configService.get('OTP_EXPIRY_MINUTES', '5'),\n    );\n    const expiresAt = new Date();\n    expiresAt.setMinutes(expiresAt.getMinutes() + expiryMinutes);\n\n    // Save OTP to database\n    const otpEntity = this.otpRepository.create({\n      email,\n      otp,\n      purpose,\n      expiresAt,\n      verified: false,\n    });\n\n    await this.otpRepository.save(otpEntity);\n\n    // Send email\n    await this.emailService.sendOTP(email, otp, purpose);\n\n    return otp; // Only return for testing purposes\n  }\n\n  async verifyOTP(\n    email: string,\n    otp: string,\n    purpose: string = 'verification',\n  ): Promise {\n    const otpEntity = await this.otpRepository.findOne({\n      where: {\n        email,\n        otp,\n        purpose,\n        verified: false,\n      },\n    });\n\n    if (!otpEntity) {\n      return false;\n    }\n\n    // Check if expired\n    if (new Date() > otpEntity.expiresAt) {\n      return false;\n    }\n\n    // Mark as verified\n    otpEntity.verified = true;\n    await this.otpRepository.save(otpEntity);\n\n    return true;\n  }\n\n  async cleanupExpiredOTPs(): Promise {\n    await this.otpRepository.delete({\n      expiresAt: LessThan(new Date()),\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginatedUsersResponseDto.html":{"url":"classes/PaginatedUsersResponseDto.html","title":"class - PaginatedUsersResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginatedUsersResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/paginated-users-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                limit\n                            \n                            \n                                    \n                                page\n                            \n                            \n                                    \n                                total\n                            \n                            \n                                    \n                                totalPages\n                            \n                            \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 10, description: 'Number of items per page'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/paginated-users-response.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 1, description: 'Current page number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/paginated-users-response.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        total\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 100, description: 'Total number of users'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/paginated-users-response.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        totalPages\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 10, description: 'Total number of pages'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/paginated-users-response.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserResponseDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined, description: 'Array of users'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/paginated-users-response.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { UserResponseDto } from './user-response.dto';\n\nexport class PaginatedUsersResponseDto {\n  @ApiProperty({\n    type: [UserResponseDto],\n    description: 'Array of users',\n  })\n  users: UserResponseDto[];\n\n  @ApiProperty({\n    example: 100,\n    description: 'Total number of users',\n  })\n  total: number;\n\n  @ApiProperty({\n    example: 1,\n    description: 'Current page number',\n  })\n  page: number;\n\n  @ApiProperty({\n    example: 10,\n    description: 'Number of items per page',\n  })\n  limit: number;\n\n  @ApiProperty({\n    example: 10,\n    description: 'Total number of pages',\n  })\n  totalPages: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Queue.html":{"url":"entities/Queue.html","title":"entity - Queue","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Queue\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/entities/queue.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                completedAt\n                            \n                            \n                                    \n                                counter\n                            \n                            \n                                    \n                                counterNumber\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                details\n                            \n                            \n                                    \n                                estimatedWaitTime\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                queueNumber\n                            \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        completedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'completed_at', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        counter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Counter\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, counter => counter.currentQueue, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        counterNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'counter_number', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        details\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueueDetails[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, details => details.queue)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        estimatedWaitTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'estimated_wait_time', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        queueNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'queue_number', unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueueStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: QueueStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue.entity.ts:32\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  OneToMany,\n  CreateDateColumn,\n  OneToOne,\n} from 'typeorm';\nimport { QueueDetails } from './queue-details.entity';\nimport { Counter } from '../../counter/entities/counter.entity';\n\nexport enum QueueStatus {\n  PENDING = 'pending',\n  SERVING = 'serving',\n  COMPLETED = 'completed',\n  CANCELLED = 'cancelled',\n}\n\n@Entity('queues')\nexport class Queue {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ name: 'queue_number', unique: true })\n  queueNumber: string;\n\n  @Column({\n    type: 'enum',\n    enum: QueueStatus,\n    default: QueueStatus.PENDING,\n  })\n  status: QueueStatus;\n\n  @Column({ name: 'counter_number', nullable: true })\n  counterNumber: string;\n\n  @CreateDateColumn({ name: 'created_at' })\n  createdAt: Date;\n\n  @Column({ name: 'completed_at', nullable: true })\n  completedAt: Date;\n\n  @Column({ name: 'estimated_wait_time', nullable: true })\n  estimatedWaitTime: number;\n\n  @OneToMany(() => QueueDetails, (details) => details.queue)\n  details: QueueDetails[];\n\n  @OneToOne(() => Counter, (counter) => counter.currentQueue, {\n    nullable: true,\n  })\n  counter: Counter;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/QueueDetails.html":{"url":"entities/QueueDetails.html","title":"entity - QueueDetails","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  QueueDetails\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/entities/queue-details.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                address\n                            \n                            \n                                    \n                                appointmentType\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isGuest\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                middleInitial\n                            \n                            \n                                    \n                                phoneNumber\n                            \n                            \n                                    \n                                    \n                                queue\n                            \n                            \n                                    \n                                queueId\n                            \n                            \n                                    \n                                reasonOfVisit\n                            \n                            \n                                    \n                                    \n                                user\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        appointmentType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'appointment_type'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'first_name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isGuest\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'is_guest', default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'last_name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        middleInitial\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'middle_initial', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'phone_number', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        queue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Queue\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, queue => queue.details, {onDelete: 'CASCADE'})@JoinColumn({name: 'queue_id', foreignKeyConstraintName: 'fk_queue_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        queueId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'queue_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reasonOfVisit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'reason_of_visit'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {onDelete: 'SET NULL', nullable: true})@JoinColumn({name: 'user_id', foreignKeyConstraintName: 'fk_user_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'user_id', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/entities/queue-details.entity.ts:24\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  JoinColumn,\n} from 'typeorm';\nimport { Queue } from './queue.entity';\nimport { User } from '../../../users/entities/user.entity';\n\n@Entity('queue_details')\nexport class QueueDetails {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ name: 'queue_id' })\n  queueId: number;\n\n  @ManyToOne(() => Queue, (queue) => queue.details, { onDelete: 'CASCADE' })\n  @JoinColumn({ name: 'queue_id', foreignKeyConstraintName: 'fk_queue_id' })\n  queue: Queue;\n\n  @Column({ name: 'user_id', nullable: true })\n  userId: number;\n\n  @ManyToOne(() => User, { onDelete: 'SET NULL', nullable: true })\n  @JoinColumn({ name: 'user_id', foreignKeyConstraintName: 'fk_user_id' })\n  user: User;\n\n  @Column({ name: 'first_name' })\n  firstName: string;\n\n  @Column({ name: 'last_name' })\n  lastName: string;\n\n  @Column({ name: 'middle_initial', nullable: true })\n  middleInitial: string;\n\n  @Column({ nullable: true })\n  address: string;\n\n  @Column({ name: 'phone_number', nullable: true })\n  phoneNumber: string;\n\n  @Column({ name: 'reason_of_visit' })\n  reasonOfVisit: string;\n\n  @Column({ name: 'appointment_type' })\n  appointmentType: string;\n\n  @Column({ name: 'is_guest', default: false })\n  isGuest: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QueueGateway.html":{"url":"classes/QueueGateway.html","title":"class - QueueGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QueueGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/queue.gateway.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        OnGatewayConnection\n                        OnGatewayDisconnect\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleConnection\n                            \n                            \n                                handleDisconnect\n                            \n                            \n                                    \n                                    Async\n                                handleGetQueuePosition\n                            \n                            \n                                    \n                                    Async\n                                handleJoinCounter\n                            \n                            \n                                    \n                                    Async\n                                handleJoinQueue\n                            \n                            \n                                    \n                                    Async\n                                handleJoinQueueUpdates\n                            \n                            \n                                notifyCounterUpdate\n                            \n                            \n                                notifyQueueUpdate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(queueService: QueueService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/queue/queue.gateway.ts:26\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        queueService\n                                                  \n                                                        \n                                                                        QueueService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(QueueGateway.name)\n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/queue.gateway.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/queue.gateway.ts:26\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handleConnection\n                        \n                    \n                \n            \n            \n                \nhandleConnection(client: Socket)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleDisconnect\n                        \n                    \n                \n            \n            \n                \nhandleDisconnect(client: Socket)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleGetQueuePosition\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleGetQueuePosition(client: Socket, queueId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('getQueuePosition')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleJoinCounter\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleJoinCounter(client: Socket, counterId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('joinCounter')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                counterId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleJoinQueue\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleJoinQueue(client: Socket, queueId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('joinQueue')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleJoinQueueUpdates\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleJoinQueueUpdates(client: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('join_queue_updates')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                client\n                                            \n                                                        Socket\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notifyCounterUpdate\n                        \n                    \n                \n            \n            \n                \nnotifyCounterUpdate(counterId: number, data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                counterId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notifyQueueUpdate\n                        \n                    \n                \n            \n            \n                \nnotifyQueueUpdate(queueId: number, data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue.gateway.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queueId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  WebSocketGateway,\n  WebSocketServer,\n  SubscribeMessage,\n  OnGatewayConnection,\n  OnGatewayDisconnect,\n} from '@nestjs/websockets';\nimport { Server, Socket } from 'socket.io';\nimport { QueueService } from './queue.service';\nimport { Logger, Inject, forwardRef } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\n@WebSocketGateway({\n  cors: {\n    origin: process.env.WS_CORS_ORIGIN || 'http://localhost:5173',\n    methods: ['GET', 'POST'],\n    credentials: true,\n    allowedHeaders: ['Content-Type', 'Authorization'],\n  },\n  namespace: 'socket.io', // Add this to match client expectation\n})\nexport class QueueGateway implements OnGatewayConnection, OnGatewayDisconnect {\n  private readonly logger = new Logger(QueueGateway.name);\n\n  @WebSocketServer()\n  server: Server;\n\n  constructor(\n    @Inject(forwardRef(() => QueueService))\n    private readonly queueService: QueueService,\n    private readonly configService: ConfigService,\n  ) {}\n\n  handleConnection(client: Socket) {\n    this.logger.log(`Client connected: ${client.id}`);\n    this.logger.log(\n      `CORS origin configured: ${this.configService.get('WS_CORS_ORIGIN')}`,\n    );\n  }\n\n  handleDisconnect(client: Socket) {\n    this.logger.log(`Client disconnected: ${client.id}`);\n  }\n\n  @SubscribeMessage('joinQueue')\n  async handleJoinQueue(client: Socket, queueId: number) {\n    await client.join(`queue_${queueId}`);\n    const queueData = await this.queueService.getQueueDetails(queueId);\n    return queueData;\n  }\n\n  @SubscribeMessage('getQueuePosition')\n  async handleGetQueuePosition(client: Socket, queueId: number) {\n    const position = await this.queueService.getQueuePosition(queueId);\n    return { position };\n  }\n\n  @SubscribeMessage('joinCounter')\n  async handleJoinCounter(client: Socket, counterId: number) {\n    await client.join(`counter_${counterId}`);\n    return { success: true };\n  }\n\n  @SubscribeMessage('join_queue_updates')\n  async handleJoinQueueUpdates(client: Socket) {\n    this.logger.log(`Socket ${client.id} joined queue updates`);\n    await client.join('queue_updates');\n    return { event: 'joined', data: 'Successfully joined queue updates' };\n  }\n\n  // Send updates to all clients or specific rooms\n  notifyQueueUpdate(queueId: number, data: any) {\n    void this.server.to(`queue_${queueId}`).emit('queueUpdate', data);\n    void this.server.emit('queueListUpdate'); // Global queue update\n  }\n\n  notifyCounterUpdate(counterId: number, data: any) {\n    void this.server.to(`counter_${counterId}`).emit('counterUpdate', data);\n    void this.server.emit('counterListUpdate'); // Global counter update\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/QueueModule.html":{"url":"modules/QueueModule.html","title":"module - QueueModule","body":"\n                   \n\n\n\n\n    Modules\n    QueueModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_QueueModule\n\n\n\ncluster_QueueModule_providers\n\n\n\ncluster_QueueModule_exports\n\n\n\n\nQueueGateway \n\nQueueGateway \n\n\n\nQueueSchedulerService \n\nQueueSchedulerService \n\n\n\nQueueService \n\nQueueService \n\n\n\nQueueModule\n\nQueueModule\n\nQueueGateway  -->\n\nQueueModule->QueueGateway \n\n\n\nQueueSchedulerService  -->\n\nQueueModule->QueueSchedulerService \n\n\n\nQueueService  -->\n\nQueueModule->QueueService \n\n\n\n\n\nQueueSchedulerService\n\nQueueSchedulerService\n\nQueueModule -->\n\nQueueSchedulerService->QueueModule\n\n\n\n\n\nQueueService\n\nQueueService\n\nQueueModule -->\n\nQueueService->QueueModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/queue/queue.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            QueueSchedulerService\n                        \n                        \n                            QueueService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            QueueController\n                        \n                        \n                            QueuesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            QueueGateway\n                        \n                        \n                            QueueSchedulerService\n                        \n                        \n                            QueueService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {\n  Module,\n  //forwardRef, // Uncomment if you need to use forwardRef\n} from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ScheduleModule } from '@nestjs/schedule';\nimport { QueueService } from './queue.service';\nimport { QueueController } from './queue.controller';\nimport { QueuesController } from './queues.controller';\nimport { QueueGateway } from './queue.gateway';\nimport { QueueSchedulerService } from './queue-scheduler.service';\nimport { Queue } from './entities/queue.entity';\nimport { QueueDetails } from './entities/queue-details.entity';\nimport { Counter } from '../counter/entities/counter.entity';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Queue, QueueDetails, Counter]),\n    ScheduleModule.forRoot(),\n  ],\n  controllers: [QueueController, QueuesController],\n  providers: [QueueService, QueueGateway, QueueSchedulerService],\n  exports: [QueueService, QueueGateway, QueueSchedulerService],\n})\nexport class QueueModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/QueueNotificationDto.html":{"url":"classes/QueueNotificationDto.html","title":"class - QueueNotificationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  QueueNotificationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/queue-notification.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                estimatedTime\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                message\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                position\n                            \n                            \n                                    \n                                    \n                                queueNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                            \n                                    \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Recipient email address', example: 'user@example.com'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/queue-notification.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        estimatedTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Estimated waiting time', example: '10 minutes', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/queue-notification.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Additional message', example: 'Please proceed to the counter', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/queue-notification.dto.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        position\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Queue position (for position alerts)', example: 3, required: false})@IsOptional()@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/queue-notification.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        queueNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Queue number', example: 'WK001'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/queue-notification.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Queue status (for status updates)', example: 'now_serving', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/queue-notification.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Notification type', example: 'position_alert', enum: undefined})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/queue-notification.dto.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsString, IsOptional, IsNumber } from 'class-validator';\n\nexport class QueueNotificationDto {\n  @ApiProperty({\n    description: 'Recipient email address',\n    example: 'user@example.com',\n  })\n  @IsEmail()\n  email: string;\n\n  @ApiProperty({\n    description: 'Queue number',\n    example: 'WK001',\n  })\n  @IsString()\n  queueNumber: string;\n\n  @ApiProperty({\n    description: 'Notification type',\n    example: 'position_alert',\n    enum: ['position_alert', 'status_update'],\n  })\n  @IsString()\n  type: string;\n\n  @ApiProperty({\n    description: 'Queue position (for position alerts)',\n    example: 3,\n    required: false,\n  })\n  @IsOptional()\n  @IsNumber()\n  position?: number;\n\n  @ApiProperty({\n    description: 'Estimated waiting time',\n    example: '10 minutes',\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  estimatedTime?: string;\n\n  @ApiProperty({\n    description: 'Queue status (for status updates)',\n    example: 'now_serving',\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  status?: string;\n\n  @ApiProperty({\n    description: 'Additional message',\n    example: 'Please proceed to the counter',\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  message?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QueueSchedulerService.html":{"url":"injectables/QueueSchedulerService.html","title":"injectable - QueueSchedulerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  QueueSchedulerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/queue-scheduler.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                isResetInProgress\n                            \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getTodayPendingCount\n                            \n                            \n                                    \n                                    Async\n                                handleDailyQueueReset\n                            \n                            \n                                    Private\n                                    Async\n                                logDailyStatistics\n                            \n                            \n                                    Async\n                                manualDailyReset\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(queueRepository: Repository, queueGateway: QueueGateway)\n                    \n                \n                        \n                            \n                                Defined in src/modules/queue/queue-scheduler.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        queueRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queueGateway\n                                                  \n                                                        \n                                                                        QueueGateway\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getTodayPendingCount\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTodayPendingCount()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue-scheduler.service.ts:178\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleDailyQueueReset\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleDailyQueueReset()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron('59 23 * * *', {name: 'daily-queue-reset', timeZone: 'Asia/Manila'})\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queue-scheduler.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        logDailyStatistics\n                        \n                    \n                \n            \n            \n                \n                        \n                    logDailyStatistics(startOfDay: Date, endOfDay: Date)\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue-scheduler.service.ts:137\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                startOfDay\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                endOfDay\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        manualDailyReset\n                        \n                    \n                \n            \n            \n                \n                        \n                    manualDailyReset()\n                \n            \n\n\n                    \n                        \n                            Defined in src/modules/queue/queue-scheduler.service.ts:172\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isResetInProgress\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/queue-scheduler.service.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(QueueSchedulerService.name)\n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/queue-scheduler.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { Cron } from '@nestjs/schedule';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, Between } from 'typeorm';\nimport { Queue, QueueStatus } from './entities/queue.entity';\nimport { QueueGateway } from './queue.gateway';\n\n@Injectable()\nexport class QueueSchedulerService {\n  private readonly logger = new Logger(QueueSchedulerService.name);\n  private isResetInProgress = false;\n\n  constructor(\n    @InjectRepository(Queue)\n    private queueRepository: Repository,\n    private queueGateway: QueueGateway,\n  ) {}\n\n  // Run every day at 11:59 PM (23:59)\n  @Cron('59 23 * * *', {\n    name: 'daily-queue-reset',\n    timeZone: 'Asia/Manila',\n  })\n  async handleDailyQueueReset() {\n    // ✅ FIXED: Prevent concurrent execution\n    if (this.isResetInProgress) {\n      this.logger.warn('🚫 Daily reset already in progress, skipping...');\n      return;\n    }\n\n    this.isResetInProgress = true;\n    this.logger.log('🔄 Starting daily queue reset process...');\n\n    try {\n      // ✅ FIXED: Better timezone handling\n      const today = new Date();\n      const startOfDay = new Date(\n        today.getFullYear(),\n        today.getMonth(),\n        today.getDate(),\n        0,\n        0,\n        0,\n        0,\n      );\n      const endOfDay = new Date(\n        today.getFullYear(),\n        today.getMonth(),\n        today.getDate(),\n        23,\n        59,\n        59,\n        999,\n      );\n\n      this.logger.log(\n        `🗓️ Searching for queues between: ${startOfDay.toISOString()} and ${endOfDay.toISOString()}`,\n      );\n\n      // Get all pending queues created today\n      const pendingQueues = await this.queueRepository.find({\n        where: {\n          status: QueueStatus.PENDING,\n          createdAt: Between(startOfDay, endOfDay),\n        },\n      });\n\n      this.logger.log(\n        `📋 Found ${pendingQueues.length} pending queues to cancel`,\n      );\n\n      if (pendingQueues.length > 0) {\n        // Mark all pending queues as cancelled\n        const cancelledQueues = await this.queueRepository.save(\n          pendingQueues.map((queue) => ({\n            ...queue,\n            status: QueueStatus.CANCELLED,\n            completedAt: new Date(),\n          })),\n        );\n\n        this.logger.log(\n          `❌ Cancelled ${cancelledQueues.length} pending queues`,\n        );\n\n        // Notify clients about cancellations\n        for (const queue of cancelledQueues) {\n          this.queueGateway.notifyQueueUpdate(queue.id, {\n            action: 'cancelled',\n            reason: 'End of day auto-cancellation',\n            queue: queue,\n          });\n        }\n\n        // Send general notification\n        this.queueGateway.server.emit('dailyQueueReset', {\n          cancelledCount: cancelledQueues.length,\n          timestamp: new Date(),\n          message:\n            'Daily queue reset completed. All pending queues have been cancelled.',\n        });\n      }\n\n      // Also cancel any serving queues\n      const servingQueues = await this.queueRepository.find({\n        where: {\n          status: QueueStatus.SERVING,\n          createdAt: Between(startOfDay, endOfDay),\n        },\n      });\n\n      if (servingQueues.length > 0) {\n        const cancelledServingQueues = await this.queueRepository.save(\n          servingQueues.map((queue) => ({\n            ...queue,\n            status: QueueStatus.CANCELLED,\n            completedAt: new Date(),\n          })),\n        );\n\n        this.logger.log(\n          `❌ Cancelled ${cancelledServingQueues.length} serving queues`,\n        );\n      }\n\n      this.logger.log('✅ Daily queue reset completed successfully');\n      await this.logDailyStatistics(startOfDay, endOfDay);\n    } catch (error) {\n      this.logger.error('❌ Error during daily queue reset:', error);\n      throw error; // ✅ FIXED: Propagate error for proper handling\n    } finally {\n      this.isResetInProgress = false; // ✅ FIXED: Always reset flag\n    }\n  }\n\n  // Optional: Log daily statistics\n  private async logDailyStatistics(startOfDay: Date, endOfDay: Date) {\n    try {\n      const [completed, cancelled, total] = await Promise.all([\n        this.queueRepository.count({\n          where: {\n            status: QueueStatus.COMPLETED,\n            createdAt: Between(startOfDay, endOfDay),\n          },\n        }),\n        this.queueRepository.count({\n          where: {\n            status: QueueStatus.CANCELLED,\n            createdAt: Between(startOfDay, endOfDay),\n          },\n        }),\n        this.queueRepository.count({\n          where: {\n            createdAt: Between(startOfDay, endOfDay),\n          },\n        }),\n      ]);\n\n      this.logger.log(`📊 Daily Statistics for ${startOfDay.toDateString()}:`);\n      this.logger.log(`   Total Queues: ${total}`);\n      this.logger.log(`   Completed: ${completed}`);\n      this.logger.log(`   Cancelled: ${cancelled}`);\n      this.logger.log(\n        `   Completion Rate: ${total > 0 ? ((completed / total) * 100).toFixed(1) : 0}%`,\n      );\n    } catch (error) {\n      this.logger.error('Error logging daily statistics:', error);\n    }\n  }\n\n  // Manual trigger for testing or admin use\n  async manualDailyReset() {\n    this.logger.log('🔄 Manual daily queue reset triggered');\n    return await this.handleDailyQueueReset(); // ✅ FIXED: Return result\n  }\n\n  // Get pending queues count for today\n  async getTodayPendingCount(): Promise {\n    const today = new Date();\n    const startOfDay = new Date(\n      today.getFullYear(),\n      today.getMonth(),\n      today.getDate(),\n      0,\n      0,\n      0,\n      0,\n    );\n    const endOfDay = new Date(\n      today.getFullYear(),\n      today.getMonth(),\n      today.getDate(),\n      23,\n      59,\n      59,\n      999,\n    );\n\n    return await this.queueRepository.count({\n      where: {\n        status: QueueStatus.PENDING,\n        createdAt: Between(startOfDay, endOfDay),\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/QueuesController.html":{"url":"controllers/QueuesController.html","title":"controller - QueuesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  QueuesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/queues.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                queues\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                getQueueById\n                            \n                            \n                                    \n                                    Async\n                                getUserQueues\n                            \n                            \n                                    \n                                    Async\n                                getWalkInQueues\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getQueueById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQueueById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queues.controller.ts:111\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getUserQueues\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserQueues(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('user/:userId')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queues.controller.ts:76\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getWalkInQueues\n                        \n                    \n                \n            \n            \n                \n                        \n                    getWalkInQueues()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('walk-in')\n                \n            \n\n                    \n                        \n                            Defined in src/modules/queue/queues.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Logger } from '@nestjs/common';\nimport { QueueService } from './queue.service';\nimport { QueueStatus } from './entities/queue.entity';\n\ninterface QueueDetails {\n  firstName?: string;\n  lastName?: string;\n  middleInitial?: string;\n  reasonOfVisit?: string;\n  address?: string;\n  phoneNumber?: string;\n}\n\n@Controller('queues')\nexport class QueuesController {\n  private readonly logger = new Logger(QueuesController.name);\n\n  constructor(private readonly queueService: QueueService) {}\n  // This endpoint is for supporting the legacy API path that the frontend is using\n  @Get('walk-in')\n  async getWalkInQueues() {\n    this.logger.log('GET /queues/walk-in endpoint called');\n    try {\n      // Get both pending and serving queues with details using the service methods\n      const [pendingQueuesWithDetails, servingQueuesWithDetails] =\n        await Promise.all([\n          this.queueService.findByStatusWithDetails(QueueStatus.PENDING),\n          this.queueService.findByStatusWithDetails(QueueStatus.SERVING),\n        ]);\n\n      this.logger.log('Found pending queues:', pendingQueuesWithDetails.length);\n      this.logger.log('Found serving queues:', servingQueuesWithDetails.length);\n\n      // Combine all queues\n      const allQueues = [\n        ...pendingQueuesWithDetails,\n        ...servingQueuesWithDetails,\n      ];\n\n      // Extract details from the nested structure and flatten them for the frontend\n      const result = allQueues.map((queue) => {\n        // For debugging\n        this.logger.log('Processing queue:', queue.id, 'status:', queue.status);\n\n        // Handle potential null/undefined details\n        const details: QueueDetails | null = Array.isArray(queue.details)\n          ? (queue.details[0] as QueueDetails)\n          : (queue.details as QueueDetails);\n\n        return {\n          id: queue.id,\n          queueNumber: queue.queueNumber,\n          status: queue.status,\n          counterNumber: queue.counterNumber,\n          createdAt: queue.createdAt,\n          completedAt: queue.completedAt,\n          estimatedWaitTime: queue.estimatedWaitTime,\n          firstName: details?.firstName || null,\n          lastName: details?.lastName || null,\n          middleInitial: details?.middleInitial || null,\n          reasonOfVisit: details?.reasonOfVisit || null,\n          address: details?.address || null,\n          phoneNumber: details?.phoneNumber || null,\n        };\n      });\n\n      this.logger.log(`Returning ${result.length} walk-in queues`);\n      return result;\n    } catch (err: unknown) {\n      this.logger.error('Error fetching walk-in queues:', err);\n      throw err;\n    }\n  }\n\n  @Get('user/:userId')\n  async getUserQueues(@Param('userId') userId: string) {\n    this.logger.log('GET /queues/user/' + userId + ' endpoint called');\n    try {\n      // Find queues for the specific user that are not completed\n      const userQueues =\n        await this.queueService.findByUserIdWithDetails(userId);\n\n      this.logger.log('Found user queues:', userQueues.length);\n\n      const result = userQueues.map((queue) => {\n        const details = Array.isArray(queue.details)\n          ? queue.details[0]\n          : queue.details;\n\n        return {\n          id: queue.id,\n          queueNumber: queue.queueNumber,\n          status: queue.status,\n          counterNumber: queue.counterNumber,\n          createdAt: queue.createdAt,\n          completedAt: queue.completedAt,\n          firstName: details?.firstName || null,\n          lastName: details?.lastName || null,\n          reasonOfVisit: details?.reasonOfVisit || null,\n        };\n      });\n\n      return result;\n    } catch (err) {\n      this.logger.error('Error fetching user queues:', err);\n      throw err;\n    }\n  }\n\n  @Get(':id')\n  async getQueueById(@Param('id') id: string) {\n    this.logger.log('GET /queues/' + id + ' endpoint called');\n    try {\n      const queueId = parseInt(id, 10);\n      if (isNaN(queueId)) {\n        throw new Error('Invalid queue ID');\n      }\n\n      const queue = await this.queueService.findOne(queueId);\n\n      if (!queue) {\n        throw new Error('Queue not found');\n      }\n\n      const details = Array.isArray(queue.details)\n        ? queue.details[0]\n        : queue.details;\n\n      return {\n        id: queue.id,\n        queueNumber: queue.queueNumber,\n        status: queue.status,\n        counterNumber: queue.counterNumber,\n        createdAt: queue.createdAt,\n        completedAt: queue.completedAt,\n        firstName: details?.firstName || null,\n        lastName: details?.lastName || null,\n        reasonOfVisit: details?.reasonOfVisit || null,\n      };\n    } catch (err) {\n      this.logger.error('Error fetching queue:', err);\n      throw err;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/register.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for user registration\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                contactNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                middleName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                nameExtension\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                otp\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        contactNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Contact number', example: '09123456789'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User email address', example: 'test@example.com'})@IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User first name', example: 'John'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User last name', example: 'Doe'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User middle name (optional)', example: 'Robert'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Full name (auto-generated)', example: 'John Robert Doe'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        nameExtension\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Name extension (e.g., Jr., III)', example: 'Jr.'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        otp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'OTP code for email verification (optional)', example: '123456'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:95\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User password (min 8 characters)', example: 'password123', minLength: 8})@IsString()@IsNotEmpty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Username for login', example: 'john_doe'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register.dto.ts:29\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  MinLength,\n} from 'class-validator';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\n/**\n * DTO for user registration\n * @class RegisterDto\n */\nexport class RegisterDto {\n  @ApiProperty({\n    description: 'User email address',\n    example: 'test@example.com',\n  })\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @ApiProperty({\n    description: 'Username for login',\n    example: 'john_doe',\n  })\n  @IsString()\n  @IsNotEmpty()\n  username: string;\n\n  @ApiProperty({\n    description: 'User password (min 8 characters)',\n    example: 'password123',\n    minLength: 8,\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  password: string;\n\n  @ApiProperty({\n    description: 'User first name',\n    example: 'John',\n  })\n  @IsString()\n  @IsNotEmpty()\n  firstName: string;\n\n  @ApiPropertyOptional({\n    description: 'User middle name (optional)',\n    example: 'Robert',\n  })\n  @IsString()\n  @IsOptional()\n  middleName?: string;\n\n  @ApiProperty({\n    description: 'User last name',\n    example: 'Doe',\n  })\n  @IsString()\n  @IsNotEmpty()\n  lastName: string;\n\n  @ApiPropertyOptional({\n    description: 'Full name (auto-generated)',\n    example: 'John Robert Doe',\n  })\n  @IsString()\n  @IsOptional()\n  name?: string;\n\n  @ApiPropertyOptional({\n    description: 'Name extension (e.g., Jr., III)',\n    example: 'Jr.',\n  })\n  @IsString()\n  @IsOptional()\n  nameExtension?: string;\n\n  @ApiPropertyOptional({\n    description: 'Contact number',\n    example: '09123456789',\n  })\n  @IsString()\n  contactNumber?: string;\n\n  // OTP field for email verification\n  @ApiPropertyOptional({\n    description: 'OTP code for email verification (optional)',\n    example: '123456',\n  })\n  @IsString()\n  @IsOptional()\n  otp?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser.html":{"url":"interfaces/RequestWithUser.html","title":"interface - RequestWithUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         AuthenticatedUser\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AuthenticatedUser\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  Get,\n  UseGuards,\n  Request,\n  UnauthorizedException,\n  Param,\n  BadRequestException,\n  Logger,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LoginDto } from './dto/login.dto';\nimport { RegisterDto } from './dto/register.dto';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\nimport { UpdateUserDto, AdminUpdateUserDto } from './dto/update-user.dto';\nimport { Roles } from './decorators/roles.decorator';\nimport { RolesGuard } from './guards/roles.guard';\nimport { AuthenticatedUser } from './jwt.strategy';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n  ApiParam,\n  ApiBody,\n  ApiQuery,\n  ApiProperty,\n  ApiPropertyOptional,\n} from '@nestjs/swagger';\nimport { OTPService } from '../services/otp.service';\nimport { EmailService } from '../services/email.service';\nimport {\n  SendOtpDto,\n  VerifyOtpDto,\n  ForgotPasswordDto,\n  ResetPasswordDto,\n  TestOtpDto,\n  ApplicationNotificationDto,\n} from './dto/otp.dto';\nimport { QueueNotificationDto } from './dto/queue-notification.dto';\nimport { AppointmentNotificationDto } from './dto/appointment-notification.dto';\n\ninterface RequestWithUser extends Request {\n  user: AuthenticatedUser;\n}\n\n@ApiTags('Authentication & OTP')\n@Controller('auth')\nexport class AuthController {\n  private readonly logger = new Logger(AuthController.name);\n\n  constructor(\n    private authService: AuthService,\n    private otpService: OTPService,\n    private emailService: EmailService,\n  ) {}\n\n  @ApiOperation({ summary: 'User login' })\n  @ApiResponse({\n    status: 200,\n    description: 'Login successful',\n    schema: {\n      properties: {\n        access_token: { type: 'string' },\n        user: {\n          type: 'object',\n          properties: {\n            id: { type: 'number' },\n            email: { type: 'string' },\n            username: { type: 'string' },\n            roles: { type: 'array', items: { type: 'string' } },\n            defaultRole: { type: 'string' },\n          },\n        },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Unauthorized - invalid credentials',\n  })\n  @ApiBody({ type: LoginDto })\n  @Post('login')\n  async login(@Body() loginDto: LoginDto) {\n    this.logger.log('Login request received:', loginDto);\n    try {\n      const result = await this.authService.login(loginDto);\n      return result;\n    } catch (error) {\n      throw new UnauthorizedException(\n        error instanceof Error ? error.message : 'Invalid credentials',\n      );\n    }\n  }\n\n  @ApiOperation({ summary: 'User registration' })\n  @ApiResponse({\n    status: 201,\n    description: 'Registration successful',\n    schema: {\n      properties: {\n        access_token: { type: 'string' },\n        user: {\n          type: 'object',\n          properties: {\n            id: { type: 'number' },\n            email: { type: 'string' },\n            username: { type: 'string' },\n            roles: { type: 'array', items: { type: 'string' } },\n            defaultRole: { type: 'string' },\n          },\n        },\n      },\n    },\n  })\n  @ApiResponse({ status: 400, description: 'Bad request - invalid data' })\n  @ApiResponse({\n    status: 409,\n    description: 'Conflict - email or username already exists',\n  })\n  @ApiBody({ type: RegisterDto })\n  @Post('register')\n  async register(@Body() createUserDto: RegisterDto) {\n    try {\n      // First verify OTP if email verification is enabled\n      if (createUserDto.email && createUserDto.otp) {\n        const isOtpValid = await this.otpService.verifyOTP(\n          createUserDto.email,\n          createUserDto.otp,\n          'verification',\n        );\n\n        if (!isOtpValid) {\n          throw new BadRequestException('Invalid or expired OTP');\n        }\n      }\n\n      const result = await this.authService.register(createUserDto);\n\n      // Send welcome email\n      if (createUserDto.email) {\n        await this.emailService.sendApplicationNotification(\n          createUserDto.email,\n          'Welcome!',\n          'Account Created',\n          'Welcome to Bulak LGU Smart Connect',\n        );\n      }\n\n      return result;\n    } catch (error) {\n      this.logger.error('Registration error:', error);\n      throw error;\n    }\n  }\n  @ApiOperation({ summary: 'Get user profile' })\n  @ApiResponse({ status: 200, description: 'Profile retrieved successfully' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @ApiBearerAuth('JWT-auth')\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  getProfile(@Request() req: RequestWithUser) {\n    // Add null check before converting to number\n    if (!req.user || req.user.id === undefined || req.user.id === null) {\n      throw new UnauthorizedException('Invalid user ID');\n    }\n    return this.authService.getProfile(Number(req.user.id));\n  }\n  @ApiOperation({\n    summary: 'Update user profile',\n    description: 'Allows a user to update their own profile information',\n  })\n  @ApiResponse({ status: 200, description: 'Profile updated successfully' })\n  @ApiResponse({ status: 400, description: 'Bad request - invalid data' })\n  @ApiResponse({ status: 401, description: 'Unauthorized' })\n  @ApiResponse({\n    status: 409,\n    description: 'Conflict - email or username already exists',\n  })\n  @ApiBearerAuth('JWT-auth')\n  @ApiBody({ type: UpdateUserDto })\n  @UseGuards(JwtAuthGuard)\n  @Post('update-profile')\n  async updateProfile(\n    @Request() req: RequestWithUser,\n    @Body() updateUserDto: UpdateUserDto,\n  ) {\n    // Add null check before converting to number\n    if (!req.user || req.user.id === undefined || req.user.id === null) {\n      throw new UnauthorizedException('Invalid user ID');\n    }\n\n    try {\n      return await this.authService.updateUserInfo(\n        Number(req.user.id),\n        updateUserDto,\n      );\n    } catch (error) {\n      throw new UnauthorizedException(\n        error instanceof Error ? error.message : 'Failed to update profile',\n      );\n    }\n  }\n  @ApiOperation({\n    summary: 'Admin update user',\n    description:\n      \"Allows administrators to update any user's information including role assignments\",\n  })\n  @ApiParam({ name: 'userId', description: 'ID of the user to update' })\n  @ApiBody({ type: AdminUpdateUserDto })\n  @ApiResponse({ status: 200, description: 'User successfully updated' })\n  @ApiResponse({ status: 400, description: 'Bad request - invalid input data' })\n  @ApiResponse({\n    status: 401,\n    description: 'Unauthorized - invalid credentials',\n  })\n  @ApiResponse({\n    status: 403,\n    description: 'Forbidden - insufficient permissions',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Not found - user or role not found',\n  })\n  @ApiResponse({\n    status: 409,\n    description: 'Conflict - email or username already exists',\n  })\n  @ApiBearerAuth('JWT-auth')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles('admin', 'super_admin')\n  @Post('admin/update-user/:userId')\n  @UseGuards(JwtAuthGuard) // Make sure this guard is working\n  async adminUpdateUser(\n    @Request() req: RequestWithUser,\n    @Param('userId') targetUserId: string,\n    @Body() updateUserDto: AdminUpdateUserDto,\n  ) {\n    // Add logging to see what's happening\n    this.logger.log('🔍 Admin update request received:');\n    this.logger.log('Admin ID:', req.user?.id);\n    this.logger.log('Admin roles:', req.user?.roles);\n    this.logger.log('Target User ID:', targetUserId);\n    this.logger.log('Update data:', updateUserDto);\n\n    if (!req.user || req.user.id === undefined || req.user.id === null) {\n      this.logger.error('❌ No user in request object');\n      throw new UnauthorizedException('Invalid admin ID');\n    }\n\n    try {\n      return await this.authService.adminUpdateUser(\n        Number(req.user.id),\n        Number(targetUserId),\n        updateUserDto,\n      );\n    } catch (error) {\n      this.logger.error('❌ Admin update error:', error);\n      throw new UnauthorizedException(\n        error instanceof Error ? error.message : 'Failed to update user',\n      );\n    }\n  }\n\n  @ApiOperation({\n    summary: 'Send OTP for email verification or password reset',\n    description: `\n    Generates and sends a 6-digit OTP code to the specified email address.\n    \n    **Use Cases:**\n    - Email verification during registration\n    - Password reset verification\n    - Two-factor authentication\n    \n    **Security Features:**\n    - OTP expires after 5 minutes\n    - Previous OTPs are invalidated when new one is generated\n    - Rate limiting to prevent spam\n    \n    **Email Templates:**\n    - Verification: Blue gradient professional template\n    - Password Reset: Red themed security alert template\n    `,\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'OTP sent successfully',\n    schema: {\n      type: 'object',\n      properties: {\n        success: { type: 'boolean', example: true },\n        message: { type: 'string', example: 'OTP sent successfully' },\n        email: { type: 'string', example: 'user@example.com' },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Bad Request - Invalid email format or missing fields',\n    schema: {\n      type: 'object',\n      properties: {\n        statusCode: { type: 'number', example: 400 },\n        message: { type: 'string', example: 'Invalid email format' },\n        error: { type: 'string', example: 'Bad Request' },\n      },\n    },\n  })\n  @ApiBody({\n    description: 'Email and purpose for OTP generation',\n    schema: {\n      type: 'object',\n      properties: {\n        email: {\n          type: 'string',\n          format: 'email',\n          example: 'user@example.com',\n          description: 'Email address to send OTP to',\n        },\n        purpose: {\n          type: 'string',\n          enum: ['verification', 'password_reset'],\n          example: 'verification',\n          description: 'Purpose of the OTP',\n          default: 'verification',\n        },\n      },\n      required: ['email'],\n    },\n  })\n  @Post('send-otp')\n  async sendOTP(@Body() sendOtpDto: { email: string; purpose?: string }) {\n    try {\n      const { email, purpose = 'verification' } = sendOtpDto;\n\n      // Validate email format\n      if (!email || !/\\S+@\\S+\\.\\S+/.test(email)) {\n        throw new BadRequestException('Invalid email format');\n      }\n\n      await this.otpService.generateOTP(email, purpose);\n\n      return {\n        success: true,\n        message: 'OTP sent successfully',\n        email: email,\n      };\n    } catch (error) {\n      this.logger.error('Error sending OTP:', error);\n      throw new BadRequestException('Failed to send OTP');\n    }\n  }\n\n  @ApiOperation({\n    summary: 'Verify OTP code',\n    description: `\n    Verifies a 6-digit OTP code against the email and purpose.\n    \n    **Verification Process:**\n    1. Checks if OTP exists and is not expired\n    2. Validates the code matches\n    3. Marks OTP as verified (single-use)\n    4. Returns verification status\n    \n    **Security Features:**\n    - Single-use OTPs (marked as verified after use)\n    - Time-based expiration (5 minutes)\n    - Purpose isolation (verification vs password_reset)\n    `,\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'OTP verified successfully',\n    schema: {\n      type: 'object',\n      properties: {\n        success: { type: 'boolean', example: true },\n        message: { type: 'string', example: 'OTP verified successfully' },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Unauthorized - Invalid or expired OTP',\n    schema: {\n      type: 'object',\n      properties: {\n        statusCode: { type: 'number', example: 401 },\n        message: { type: 'string', example: 'Invalid or expired OTP' },\n        error: { type: 'string', example: 'Unauthorized' },\n      },\n    },\n  })\n  @ApiBody({\n    description: 'Email, OTP code, and purpose for verification',\n    schema: {\n      type: 'object',\n      properties: {\n        email: {\n          type: 'string',\n          format: 'email',\n          example: 'user@example.com',\n          description: 'Email address',\n        },\n        otp: {\n          type: 'string',\n          example: '123456',\n          pattern: '^[0-9]{6}$',\n          description: '6-digit OTP code',\n        },\n        purpose: {\n          type: 'string',\n          enum: ['verification', 'password_reset'],\n          example: 'verification',\n          description: 'Purpose of the OTP verification',\n          default: 'verification',\n        },\n      },\n      required: ['email', 'otp'],\n    },\n  })\n  @Post('verify-otp')\n  async verifyOTP(\n    @Body() verifyOtpDto: { email: string; otp: string; purpose?: string },\n  ) {\n    try {\n      const { email, otp, purpose = 'verification' } = verifyOtpDto;\n\n      const isValid = await this.otpService.verifyOTP(email, otp, purpose);\n\n      if (!isValid) {\n        throw new UnauthorizedException('Invalid or expired OTP');\n      }\n\n      return {\n        success: true,\n        message: 'OTP verified successfully',\n      };\n    } catch (error) {\n      this.logger.error('Error verifying OTP:', error);\n      throw new UnauthorizedException('Invalid or expired OTP');\n    }\n  }\n\n  // Add password reset endpoints\n  @ApiOperation({\n    summary: 'Request password reset OTP',\n    description: `\n    Initiates password reset process by sending OTP to registered email.\n    \n    **Security Features:**\n    - Does not reveal if email exists (security best practice)\n    - Generates secure 6-digit OTP\n    - Uses dedicated password reset email template\n    - OTP expires after 5 minutes\n    \n    **Process:**\n    1. Validates email format\n    2. Checks if user exists (internally)\n    3. Generates OTP for password_reset purpose\n    4. Sends formatted email with reset instructions\n    5. Returns success message regardless of email existence\n    `,\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Password reset process initiated',\n    schema: {\n      type: 'object',\n      properties: {\n        success: { type: 'boolean', example: true },\n        message: {\n          type: 'string',\n          example:\n            'If this email is registered, you will receive a password reset code',\n        },\n      },\n    },\n  })\n  @ApiBody({\n    description: 'Email address for password reset',\n    schema: {\n      type: 'object',\n      properties: {\n        email: {\n          type: 'string',\n          format: 'email',\n          example: 'user@example.com',\n          description: 'Registered email address',\n        },\n      },\n      required: ['email'],\n    },\n  })\n  @Post('forgot-password')\n  async forgotPassword(@Body() { email }: { email: string }) {\n    try {\n      // Check if user exists\n      const user = await this.authService.findUserByEmail(email);\n      if (!user) {\n        // Don't reveal if email exists for security\n        return {\n          success: true,\n          message:\n            'If this email is registered, you will receive a password reset code',\n        };\n      }\n\n      await this.otpService.generateOTP(email, 'password_reset');\n\n      return {\n        success: true,\n        message: 'Password reset code sent to your email',\n      };\n    } catch (error) {\n      this.logger.error('Forgot password error:', error);\n      throw new BadRequestException('Failed to send password reset code');\n    }\n  }\n\n  @ApiOperation({\n    summary: 'Reset password with OTP verification',\n    description: `\n    Completes password reset process using OTP verification.\n    \n    **Process:**\n    1. Verifies OTP code is valid and not expired\n    2. Validates new password meets complexity requirements\n    3. Updates user password with secure hashing\n    4. Marks OTP as used\n    \n    **Password Requirements:**\n    - Minimum 8 characters\n    - At least 1 uppercase letter\n    - At least 1 lowercase letter  \n    - At least 1 number\n    - At least 1 special character (@$!%*?&)\n    \n    **Security Features:**\n    - bcrypt password hashing\n    - OTP single-use enforcement\n    - Password strength validation\n    `,\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Password reset successfully',\n    schema: {\n      type: 'object',\n      properties: {\n        success: { type: 'boolean', example: true },\n        message: { type: 'string', example: 'Password reset successfully' },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Unauthorized - Invalid or expired reset code',\n    schema: {\n      type: 'object',\n      properties: {\n        statusCode: { type: 'number', example: 401 },\n        message: { type: 'string', example: 'Invalid or expired reset code' },\n        error: { type: 'string', example: 'Unauthorized' },\n      },\n    },\n  })\n  @ApiBody({\n    description: 'Email, OTP, and new password for reset',\n    schema: {\n      type: 'object',\n      properties: {\n        email: {\n          type: 'string',\n          format: 'email',\n          example: 'user@example.com',\n          description: 'Email address',\n        },\n        otp: {\n          type: 'string',\n          example: '123456',\n          pattern: '^[0-9]{6}$',\n          description: '6-digit OTP code received via email',\n        },\n        newPassword: {\n          type: 'string',\n          example: 'NewSecure123!',\n          minLength: 8,\n          pattern:\n            '^(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)(?=.*[@$!%*?&])[A-Za-z\\\\d@$!%*?&]{8,}$',\n          description: 'New password (must meet complexity requirements)',\n        },\n      },\n      required: ['email', 'otp', 'newPassword'],\n    },\n  })\n  @Post('reset-password')\n  async resetPassword(\n    @Body() resetDto: { email: string; otp: string; newPassword: string },\n  ) {\n    try {\n      const { email, otp, newPassword } = resetDto;\n\n      // Verify OTP\n      const isOtpValid = await this.otpService.verifyOTP(\n        email,\n        otp,\n        'password_reset',\n      );\n      if (!isOtpValid) {\n        throw new UnauthorizedException('Invalid or expired reset code');\n      }\n\n      // Update password\n      await this.authService.updatePassword(email, newPassword);\n\n      return {\n        success: true,\n        message: 'Password reset successfully',\n      };\n    } catch (error) {\n      this.logger.error('Reset password error:', error);\n      throw error;\n    }\n  }\n\n  @ApiOperation({\n    summary: 'Test OTP generation (Development Only)',\n    description: `\n    **⚠️ DEVELOPMENT ONLY - Disabled in Production**\n    \n    Generates test OTP and optionally returns the code for testing purposes.\n    \n    **Usage:**\n    - Frontend testing and debugging\n    - Integration testing\n    - Email service verification\n    \n    **Security:**\n    - Only available when NODE_ENV=development\n    - Returns OTP code in response for testing\n    - Disabled automatically in production\n    `,\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Test OTP generated successfully',\n    schema: {\n      type: 'object',\n      properties: {\n        success: { type: 'boolean', example: true },\n        message: { type: 'string', example: 'OTP generated and sent' },\n        otp: {\n          type: 'string',\n          example: '123456',\n          description: 'OTP code (only in development mode)',\n        },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 403,\n    description: 'Forbidden - Not available in production',\n    schema: {\n      type: 'object',\n      properties: {\n        statusCode: { type: 'number', example: 403 },\n        message: {\n          type: 'string',\n          example: 'Test endpoints not available in production',\n        },\n        error: { type: 'string', example: 'Forbidden' },\n      },\n    },\n  })\n  @ApiBody({\n    description: 'Email address for testing OTP generation',\n    schema: {\n      type: 'object',\n      properties: {\n        email: {\n          type: 'string',\n          format: 'email',\n          example: 'test@example.com',\n          description: 'Email address for testing OTP generation',\n        },\n      },\n      required: ['email'],\n    },\n  })\n  @Post('test-otp')\n  async testOTP(@Body() { email }: { email: string }) {\n    // Add environment check to your existing implementation\n    if (process.env.NODE_ENV === 'production') {\n      throw new BadRequestException(\n        'Test endpoints not available in production',\n      );\n    }\n\n    try {\n      const otp = await this.otpService.generateOTP(email, 'verification');\n      return {\n        success: true,\n        message: 'OTP generated and sent',\n        // Remove this in production - only for testing\n        otp: process.env.NODE_ENV === 'development' ? otp : undefined,\n      };\n    } catch (error) {\n      this.logger.error('Test OTP error:', error);\n      throw new BadRequestException('Failed to generate OTP');\n    }\n  }\n\n  @ApiOperation({\n    summary: 'Send application status notification',\n    description: `\n    Sends formatted email notification for application status updates.\n    \n    **Supported Statuses:**\n    - Pending (Orange theme)\n    - Approved (Green theme)\n    - Rejected (Red theme)\n    - Ready for Pickup (Blue theme)\n    \n    **Email Features:**\n    - Professional branded templates\n    - Status-specific color coding\n    - Application details included\n    - Responsive design\n    `,\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Application notification sent successfully',\n    schema: {\n      type: 'object',\n      properties: {\n        success: { type: 'boolean', example: true },\n        message: {\n          type: 'string',\n          example: 'Application notification sent successfully',\n        },\n      },\n    },\n  })\n  @ApiBody({\n    description: 'Application notification details',\n    schema: {\n      type: 'object',\n      properties: {\n        email: {\n          type: 'string',\n          format: 'email',\n          example: 'user@example.com',\n          description: 'Recipient email address',\n        },\n        applicationId: {\n          type: 'string',\n          example: 'APP-001',\n          description: 'Application ID',\n        },\n        status: {\n          type: 'string',\n          enum: ['Pending', 'Approved', 'Rejected', 'Ready for Pickup'],\n          example: 'Approved',\n          description: 'Application status',\n        },\n        applicationType: {\n          type: 'string',\n          example: 'Birth Certificate',\n          description: 'Type of application',\n        },\n      },\n      required: ['email', 'applicationId', 'status', 'applicationType'],\n    },\n  })\n  @Post('send-application-notification')\n  async sendApplicationNotification(\n    @Body()\n    notificationDto: {\n      email: string;\n      applicationId: string;\n      status: string;\n      applicationType: string;\n    },\n  ) {\n    try {\n      const { email, applicationId, status, applicationType } = notificationDto;\n\n      await this.emailService.sendApplicationNotification(\n        email,\n        applicationId,\n        status,\n        applicationType,\n      );\n\n      return {\n        success: true,\n        message: 'Application notification sent successfully',\n      };\n    } catch (error) {\n      this.logger.error('Error sending application notification:', error);\n      throw new BadRequestException('Failed to send application notification');\n    }\n  }\n\n  @ApiOperation({\n    summary: 'Send queue notification',\n    description: 'Send email notification for queue position or status updates',\n  })\n  @Post('send-queue-notification')\n  async sendQueueNotification(@Body() notificationDto: QueueNotificationDto) {\n    try {\n      const {\n        email,\n        queueNumber,\n        type,\n        position,\n        estimatedTime,\n        status,\n        message,\n      } = notificationDto;\n\n      if (type === 'position_alert') {\n        // Fix: Ensure position is defined for position alerts\n        if (position === undefined) {\n          throw new BadRequestException(\n            'Position is required for position alerts',\n          );\n        }\n\n        await this.emailService.sendQueuePositionAlert(\n          email,\n          queueNumber,\n          position, // Now guaranteed to be a number\n          estimatedTime || '10 minutes', // Provide default if undefined\n        );\n      } else if (type === 'status_update') {\n        await this.emailService.sendQueueStatusUpdate(\n          email,\n          queueNumber,\n          status || 'now_serving', // Provide default if undefined\n          message || 'Please proceed to the counter',\n        );\n      }\n\n      return {\n        success: true,\n        message: 'Queue notification sent successfully',\n      };\n    } catch (error) {\n      // Don't throw error to avoid breaking queue functionality\n      this.logger.error('Queue notification error:', error);\n      return {\n        success: false,\n        message: 'Failed to send notification, but queue operation continues',\n      };\n    }\n  }\n\n  @ApiOperation({\n    summary: 'Send appointment confirmation notification',\n    description: 'Send email notification when appointment is confirmed',\n  })\n  @ApiBody({\n    description: 'Appointment confirmation notification details',\n    schema: {\n      type: 'object',\n      properties: {\n        email: {\n          type: 'string',\n          format: 'email',\n          example: 'user@example.com',\n          description: 'Email address of appointment holder',\n        },\n        appointmentNumber: {\n          type: 'string',\n          example: 'APPT-2024-001',\n          description: 'Appointment number/ID',\n        },\n        type: {\n          type: 'string',\n          example: 'confirmation',\n          description: 'Type of notification',\n        },\n        appointmentDetails: {\n          type: 'object',\n          description: 'Appointment details',\n          properties: {\n            type: { type: 'string', example: 'Birth Certificate' },\n            date: { type: 'string', example: '2024-01-15' },\n            time: { type: 'string', example: '10:00 AM - 10:30 AM' },\n            firstName: { type: 'string', example: 'John' },\n            lastName: { type: 'string', example: 'Doe' },\n            phoneNumber: { type: 'string', example: '09123456789' },\n          },\n        },\n      },\n      required: ['email', 'appointmentNumber', 'appointmentDetails'],\n    },\n  })\n  @Post('notifications/appointment-confirmation')\n  async sendAppointmentConfirmation(@Body() notificationDto: any) {\n    try {\n      const { email, appointmentNumber, appointmentDetails } = notificationDto;\n\n      // Validate required fields\n      if (!email || !appointmentNumber || !appointmentDetails) {\n        throw new BadRequestException(\n          'Missing required fields: email, appointmentNumber, or appointmentDetails',\n        );\n      }\n\n      await this.emailService.sendAppointmentConfirmation(\n        email,\n        appointmentNumber,\n        appointmentDetails,\n      );\n\n      return {\n        success: true,\n        message: 'Appointment confirmation sent successfully',\n      };\n    } catch (error) {\n      this.logger.error('Error sending appointment confirmation:', error);\n      throw new BadRequestException('Failed to send appointment confirmation');\n    }\n  }\n\n  @ApiOperation({\n    summary: 'Send appointment status update notification',\n    description: 'Send email notification when appointment status changes',\n  })\n  @ApiBody({\n    description: 'Appointment status update notification details',\n    schema: {\n      type: 'object',\n      properties: {\n        email: {\n          type: 'string',\n          format: 'email',\n          example: 'user@example.com',\n          description: 'Email address of appointment holder',\n        },\n        appointmentNumber: {\n          type: 'string',\n          example: 'APPT-2024-001',\n          description: 'Appointment number/ID',\n        },\n        type: {\n          type: 'string',\n          example: 'status_update',\n          description: 'Type of notification',\n        },\n        status: {\n          type: 'string',\n          example: 'confirmed',\n          description: 'New appointment status',\n        },\n        appointmentDetails: {\n          type: 'object',\n          description: 'Appointment details',\n        },\n      },\n      required: ['email', 'appointmentNumber', 'status', 'appointmentDetails'],\n    },\n  })\n  @Post('notifications/appointment-status-update')\n  async sendAppointmentStatusUpdate(@Body() notificationDto: any) {\n    try {\n      const { email, appointmentNumber, status, appointmentDetails } =\n        notificationDto;\n\n      // Validate required fields\n      if (!email || !appointmentNumber || !status || !appointmentDetails) {\n        throw new BadRequestException(\n          'Missing required fields: email, appointmentNumber, status, or appointmentDetails',\n        );\n      }\n\n      await this.emailService.sendAppointmentStatusUpdate(\n        email,\n        appointmentNumber,\n        status,\n        appointmentDetails,\n      );\n\n      return {\n        success: true,\n        message: 'Appointment status update sent successfully',\n      };\n    } catch (error) {\n      this.logger.error('Error sending appointment status update:', error);\n      throw new BadRequestException('Failed to send appointment status update');\n    }\n  }\n\n  @ApiOperation({\n    summary: 'Send appointment cancellation notification',\n    description: 'Send email notification when appointment is cancelled',\n  })\n  @ApiBody({\n    description: 'Appointment cancellation notification details',\n    schema: {\n      type: 'object',\n      properties: {\n        email: {\n          type: 'string',\n          format: 'email',\n          example: 'user@example.com',\n          description: 'Email address of appointment holder',\n        },\n        appointmentNumber: {\n          type: 'string',\n          example: 'APPT-2024-001',\n          description: 'Appointment number/ID',\n        },\n        type: {\n          type: 'string',\n          example: 'cancellation',\n          description: 'Type of notification',\n        },\n        reason: {\n          type: 'string',\n          example: 'Cancelled by administrator',\n          description: 'Cancellation reason',\n        },\n        appointmentDetails: {\n          type: 'object',\n          description: 'Appointment details',\n        },\n      },\n      required: ['email', 'appointmentNumber', 'appointmentDetails'],\n    },\n  })\n  @Post('notifications/appointment-cancellation')\n  async sendAppointmentCancellation(@Body() notificationDto: any) {\n    try {\n      const { email, appointmentNumber, appointmentDetails, reason } =\n        notificationDto;\n\n      // Validate required fields\n      if (!email || !appointmentNumber || !appointmentDetails) {\n        throw new BadRequestException(\n          'Missing required fields: email, appointmentNumber, or appointmentDetails',\n        );\n      }\n\n      await this.emailService.sendAppointmentCancellation(\n        email,\n        appointmentNumber,\n        appointmentDetails,\n        reason,\n      );\n\n      return {\n        success: true,\n        message: 'Appointment cancellation sent successfully',\n      };\n    } catch (error) {\n      this.logger.error('Error sending appointment cancellation:', error);\n      throw new BadRequestException('Failed to send appointment cancellation');\n    }\n  }\n\n  @ApiOperation({\n    summary: 'Send appointment reminder notification',\n    description: 'Send email reminder 24 hours before appointment',\n  })\n  @ApiBody({ type: AppointmentNotificationDto })\n  @Post('notifications/appointment-reminder')\n  async sendAppointmentReminder(\n    @Body() notificationDto: AppointmentNotificationDto,\n  ) {\n    try {\n      const { email, appointmentNumber, appointmentDetails } = notificationDto;\n\n      await this.emailService.sendAppointmentReminder(\n        email,\n        appointmentNumber,\n        appointmentDetails,\n      );\n\n      return {\n        success: true,\n        message: 'Appointment reminder sent successfully',\n      };\n    } catch (error) {\n      this.logger.error('Error sending appointment reminder:', error);\n      throw new BadRequestException('Failed to send appointment reminder');\n    }\n  }\n\n  @Post('notifications/application-confirmation')\n  @ApiOperation({ summary: 'Send application confirmation notification' })\n  async sendApplicationConfirmation(\n    @Body()\n    dto: {\n      email: string;\n      applicationId: string;\n      applicationType: string;\n      applicationSubtype?: string;\n      applicantName: string;\n      submissionDate: string;\n      status: string;\n    },\n  ) {\n    try {\n      this.logger.log(\n        `Sending application confirmation notification to: ${dto.email}`,\n      );\n\n      // Use your existing email service to send application confirmation\n      await this.emailService.sendDocumentApplicationConfirmation(\n        dto.email,\n        dto.applicationId,\n        dto.applicationType,\n        dto.applicationSubtype,\n        dto.applicantName,\n        dto.submissionDate,\n        dto.status,\n      );\n\n      return {\n        success: true,\n        message: 'Application confirmation notification sent successfully',\n      };\n    } catch (error) {\n      this.logger.error(\n        'Error sending application confirmation notification:',\n        error,\n      );\n      throw new BadRequestException(\n        'Failed to send application confirmation notification',\n      );\n    }\n  }\n\n  @Post('notifications/application-status-update')\n  @ApiOperation({ summary: 'Send application status update notification' })\n  async sendApplicationStatusUpdate(\n    @Body()\n    dto: {\n      email: string;\n      applicationId: string;\n      newStatus: string;\n      applicationType: string;\n      applicationSubtype?: string;\n      applicantName: string;\n      previousStatus?: string;\n    },\n  ) {\n    try {\n      this.logger.log(\n        `Sending application status update notification to: ${dto.email}`,\n      );\n\n      // Use your existing email service\n      await this.emailService.sendDocumentApplicationStatusUpdate(\n        dto.email,\n        dto.applicationId,\n        dto.newStatus,\n        dto.applicationType,\n        dto.applicationSubtype,\n        dto.applicantName,\n        dto.previousStatus,\n      );\n\n      return {\n        success: true,\n        message: 'Application status update notification sent successfully',\n      };\n    } catch (error) {\n      this.logger.error(\n        'Error sending application status update notification:',\n        error,\n      );\n      throw new BadRequestException(\n        'Failed to send application status update notification',\n      );\n    }\n  }\n\n  @Post('notifications/application-approval')\n  @ApiOperation({ summary: 'Send application approval notification' })\n  async sendApplicationApproval(\n    @Body()\n    dto: {\n      email: string;\n      applicationId: string;\n      applicationType: string;\n      applicationSubtype?: string;\n      applicantName: string;\n    },\n  ) {\n    try {\n      this.logger.log(\n        `Sending application approval notification to: ${dto.email}`,\n      );\n\n      // Use your existing email service\n      await this.emailService.sendDocumentApplicationApproval(\n        dto.email,\n        dto.applicationId,\n        dto.applicationType,\n        dto.applicationSubtype,\n        dto.applicantName,\n      );\n\n      return {\n        success: true,\n        message: 'Application approval notification sent successfully',\n      };\n    } catch (error) {\n      this.logger.error(\n        'Error sending application approval notification:',\n        error,\n      );\n      throw new BadRequestException(\n        'Failed to send application approval notification',\n      );\n    }\n  }\n\n  @Post('notifications/application-rejection')\n  @ApiOperation({ summary: 'Send application rejection notification' })\n  async sendApplicationRejection(\n    @Body()\n    dto: {\n      email: string;\n      applicationId: string;\n      applicationType: string;\n      applicationSubtype?: string;\n      applicantName: string;\n      rejectionReason: string;\n    },\n  ) {\n    try {\n      this.logger.log(\n        `Sending application rejection notification to: ${dto.email}`,\n      );\n\n      // Use your existing email service\n      await this.emailService.sendDocumentApplicationRejection(\n        dto.email,\n        dto.applicationId,\n        dto.applicationType,\n        dto.applicationSubtype,\n        dto.applicantName,\n        dto.rejectionReason,\n      );\n\n      return {\n        success: true,\n        message: 'Application rejection notification sent successfully',\n      };\n    } catch (error) {\n      this.logger.error(\n        'Error sending application rejection notification:',\n        error,\n      );\n      throw new BadRequestException(\n        'Failed to send application rejection notification',\n      );\n    }\n  }\n\n  @Post('check-lockout')\n  @ApiOperation({ summary: 'Check if account is locked' })\n  async checkAccountLockout(@Body() { identifier }: { identifier: string }) {\n    try {\n      const lockoutData = await this.authService.getAccountLockout(identifier);\n\n      if (lockoutData?.lockedUntil && lockoutData.lockedUntil > new Date()) {\n        const timeRemaining = Math.ceil(\n          (lockoutData.lockedUntil.getTime() - Date.now()) / 1000,\n        );\n        return {\n          isLocked: true,\n          timeRemaining,\n          attemptsUsed: lockoutData.attempts,\n          lockedUntil: lockoutData.lockedUntil,\n        };\n      }\n\n      return {\n        isLocked: false,\n        attempts: lockoutData?.attempts || 0,\n      };\n    } catch (error) {\n      this.logger.error('Error checking account lockout:', error);\n      return {\n        isLocked: false,\n        attempts: 0,\n      };\n    }\n  }\n\n  @Post('record-failed-attempt')\n  @ApiOperation({ summary: 'Record failed login attempt' })\n  async recordFailedAttempt(@Body() { identifier }: { identifier: string }) {\n    try {\n      return await this.authService.recordFailedLoginAttempt(identifier);\n    } catch (error) {\n      this.logger.error('Error recording failed attempt:', error);\n      throw new BadRequestException('Failed to record login attempt');\n    }\n  }\n\n  @Post('clear-lockout')\n  @ApiOperation({ summary: 'Clear account lockout on successful login' })\n  async clearAccountLockout(@Body() { identifier }: { identifier: string }) {\n    try {\n      return await this.authService.clearAccountLockout(identifier);\n    } catch (error) {\n      this.logger.error('Error clearing account lockout:', error);\n      throw new BadRequestException('Failed to clear account lockout');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser-1.html":{"url":"interfaces/RequestWithUser-1.html","title":"interface - RequestWithUser-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/decorators/user.decorator.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         AuthenticatedUser\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AuthenticatedUser\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { createParamDecorator, ExecutionContext } from '@nestjs/common';\nimport { AuthenticatedUser } from '../jwt.strategy';\n\ninterface RequestWithUser {\n  user: AuthenticatedUser;\n}\n\nexport const User = createParamDecorator(\n  (data: unknown, ctx: ExecutionContext): AuthenticatedUser => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.user;\n  },\n);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser-2.html":{"url":"interfaces/RequestWithUser-2.html","title":"interface - RequestWithUser-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/roles.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ROLES_KEY } from '../decorators/roles.decorator';\n\n// Define interface for request with user\ninterface RequestWithUser extends Request {\n  user?: {\n    roles?: Array | string[];\n  };\n}\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(\n      ROLES_KEY,\n      [context.getHandler(), context.getClass()],\n    );\n\n    if (!requiredRoles) {\n      return true;\n    }\n\n    const request = context.switchToHttp().getRequest();\n    const userRoles = request.user?.roles || [];\n\n    // Handle both string array and object array formats\n    const roleNames = userRoles.map((role: string | { name: string }) =>\n      typeof role === 'string' ? role : (role as { name: string }).name,\n    );\n\n    return requiredRoles.some((role) => roleNames.includes(role));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResetPasswordDto.html":{"url":"classes/ResetPasswordDto.html","title":"class - ResetPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResetPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/otp.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                newPassword\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                otp\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Email address', example: 'user@example.com', format: 'email'})@IsEmail({}, {message: 'Please provide a valid email address'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/otp.dto.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'New password (must meet complexity requirements)', example: 'NewSecure123!', minLength: 8, pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$'})@IsString()@Length(8, 100, {message: 'Password must be at least 8 characters long'})@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/, {message: 'Password must contain uppercase, lowercase, numbers, and special characters'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/otp.dto.ts:106\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        otp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: '6-digit OTP code received via email', example: '123456', minLength: 6, maxLength: 6, pattern: '^[0-9]{6}$'})@IsString()@Length(6, 6, {message: 'OTP must be exactly 6 digits'})@Matches(/^[0-9]{6}$/, {message: 'OTP must contain only numbers'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/otp.dto.ts:91\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsString,\n  IsOptional,\n  Length,\n  Matches,\n} from 'class-validator';\n\nexport class SendOtpDto {\n  @ApiProperty({\n    description: 'Email address to send OTP to',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiPropertyOptional({\n    description: 'Purpose of the OTP',\n    example: 'verification',\n    enum: ['verification', 'password_reset'],\n    default: 'verification',\n  })\n  @IsString()\n  @IsOptional()\n  purpose?: string = 'verification';\n}\n\nexport class VerifyOtpDto {\n  @ApiProperty({\n    description: 'Email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    description: '6-digit OTP code',\n    example: '123456',\n    minLength: 6,\n    maxLength: 6,\n    pattern: '^[0-9]{6}$',\n  })\n  @IsString()\n  @Length(6, 6, { message: 'OTP must be exactly 6 digits' })\n  @Matches(/^[0-9]{6}$/, { message: 'OTP must contain only numbers' })\n  otp: string;\n\n  @ApiPropertyOptional({\n    description: 'Purpose of the OTP verification',\n    example: 'verification',\n    enum: ['verification', 'password_reset'],\n    default: 'verification',\n  })\n  @IsString()\n  @IsOptional()\n  purpose?: string = 'verification';\n}\n\nexport class ForgotPasswordDto {\n  @ApiProperty({\n    description: 'Registered email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n}\n\nexport class ResetPasswordDto {\n  @ApiProperty({\n    description: 'Email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    description: '6-digit OTP code received via email',\n    example: '123456',\n    minLength: 6,\n    maxLength: 6,\n    pattern: '^[0-9]{6}$',\n  })\n  @IsString()\n  @Length(6, 6, { message: 'OTP must be exactly 6 digits' })\n  @Matches(/^[0-9]{6}$/, { message: 'OTP must contain only numbers' })\n  otp: string;\n\n  @ApiProperty({\n    description: 'New password (must meet complexity requirements)',\n    example: 'NewSecure123!',\n    minLength: 8,\n    pattern:\n      '^(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)(?=.*[@$!%*?&])[A-Za-z\\\\d@$!%*?&]{8,}$',\n  })\n  @IsString()\n  @Length(8, 100, { message: 'Password must be at least 8 characters long' })\n  @Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/, {\n    message:\n      'Password must contain uppercase, lowercase, numbers, and special characters',\n  })\n  newPassword: string;\n}\n\nexport class TestOtpDto {\n  @ApiProperty({\n    description: 'Email address for testing OTP generation',\n    example: 'test@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n}\n\nexport class ApplicationNotificationDto {\n  @ApiProperty({\n    description: 'Recipient email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    description: 'Application ID',\n    example: 'APP-001',\n  })\n  @IsString()\n  applicationId: string;\n\n  @ApiProperty({\n    description: 'Application status',\n    example: 'Approved',\n    enum: ['Pending', 'Approved', 'Rejected', 'Ready for Pickup'],\n  })\n  @IsString()\n  status: string;\n\n  @ApiProperty({\n    description: 'Type of application',\n    example: 'Birth Certificate',\n  })\n  @IsString()\n  applicationType: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Role.html":{"url":"entities/Role.html","title":"entity - Role","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Role\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/entities/role.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, user => user.roles)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/entities/role.entity.ts:16\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity, Column, PrimaryGeneratedColumn, ManyToMany } from 'typeorm';\nimport { User } from '../../users/entities/user.entity';\n\n@Entity('roles')\nexport class Role {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true, nullable: false })\n  name: string;\n\n  @Column({ nullable: true })\n  description: string;\n\n  @ManyToMany(() => User, (user) => user.roles)\n  users: User[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RolesController.html":{"url":"controllers/RolesController.html","title":"controller - RolesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RolesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/roles.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                roles\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                getUserRoles\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@Roles('admin', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/roles/roles.controller.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@Roles('admin', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/roles/roles.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getUserRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserRoles(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('user/:userId')@Roles('admin', 'super_admin')\n                \n            \n\n                    \n                        \n                            Defined in src/roles/roles.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, UseGuards } from '@nestjs/common';\nimport { RolesService } from './roles.service';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../auth/guards/roles.guard';\nimport { Roles } from '../auth/decorators/roles.decorator';\n\n@Controller('roles')\n@UseGuards(JwtAuthGuard, RolesGuard)\nexport class RolesController {\n  constructor(private readonly rolesService: RolesService) {}\n\n  @Get()\n  @Roles('admin', 'super_admin')\n  findAll() {\n    return this.rolesService.findAll();\n  }\n\n  @Get(':id')\n  @Roles('admin', 'super_admin')\n  findOne(@Param('id') id: string) {\n    return this.rolesService.findOne(+id);\n  }\n\n  @Get('user/:userId')\n  @Roles('admin', 'super_admin')\n  getUserRoles(@Param('userId') userId: string) {\n    return this.rolesService.getUserRoles(+userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/roles.guard.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/roles.guard.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ROLES_KEY } from '../decorators/roles.decorator';\n\n// Define interface for request with user\ninterface RequestWithUser extends Request {\n  user?: {\n    roles?: Array | string[];\n  };\n}\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride(\n      ROLES_KEY,\n      [context.getHandler(), context.getClass()],\n    );\n\n    if (!requiredRoles) {\n      return true;\n    }\n\n    const request = context.switchToHttp().getRequest();\n    const userRoles = request.user?.roles || [];\n\n    // Handle both string array and object array formats\n    const roleNames = userRoles.map((role: string | { name: string }) =>\n      typeof role === 'string' ? role : (role as { name: string }).name,\n    );\n\n    return requiredRoles.some((role) => roleNames.includes(role));\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RolesModule.html":{"url":"modules/RolesModule.html","title":"module - RolesModule","body":"\n                   \n\n\n\n\n    Modules\n    RolesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_providers\n\n\n\ncluster_RolesModule_exports\n\n\n\n\nRolesService \n\nRolesService \n\n\n\nRolesModule\n\nRolesModule\n\nRolesService  -->\n\nRolesModule->RolesService \n\n\n\n\n\nRolesService\n\nRolesService\n\nRolesModule -->\n\nRolesService->RolesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/roles/roles.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RolesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RolesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RolesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Role } from './entities/role.entity';\nimport { User } from '../users/entities/user.entity';\nimport { RolesService } from './roles.service';\nimport { RolesController } from './roles.controller';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Role, User])],\n  providers: [RolesService],\n  controllers: [RolesController],\n  exports: [RolesService],\n})\nexport class RolesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RolesService.html":{"url":"injectables/RolesService.html","title":"injectable - RolesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RolesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/roles.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                assignRolesToUser\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByName\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getUserRoles\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(rolesRepository: Repository, usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/roles/roles.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        rolesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        assignRolesToUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    assignRolesToUser(userId: number, roleIds: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                roleIds\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByName\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByName(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserRoles(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/roles/roles.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, In } from 'typeorm';\nimport { Role } from './entities/role.entity';\nimport { User } from '../users/entities/user.entity';\n\n@Injectable()\nexport class RolesService {\n  constructor(\n    @InjectRepository(Role)\n    private rolesRepository: Repository,\n\n    @InjectRepository(User)\n    private usersRepository: Repository,\n  ) {}\n\n  async findAll(): Promise {\n    return this.rolesRepository.find();\n  }\n\n  async findOne(id: number): Promise {\n    const role = await this.rolesRepository.findOne({ where: { id } });\n    if (!role) {\n      throw new NotFoundException(`Role with ID ${id} not found`);\n    }\n    return role;\n  }\n\n  async findByName(name: string): Promise {\n    const role = await this.rolesRepository.findOne({ where: { name } });\n    if (!role) {\n      throw new NotFoundException(`Role with name ${name} not found`);\n    }\n    return role;\n  }\n\n  async getUserRoles(userId: number): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id: userId },\n      relations: ['roles'],\n    });\n    return user ? user.roles : [];\n  }\n\n  async assignRolesToUser(userId: number, roleIds: number[]): Promise {\n    // Find the user\n    const user = await this.usersRepository.findOne({\n      where: { id: userId },\n      relations: ['roles'],\n    });\n\n    if (!user) {\n      throw new Error('User not found');\n    }\n\n    // Find the roles using In operator (replaces deprecated findByIds)\n    const roles = await this.rolesRepository.findBy({\n      id: In(roleIds),\n    });\n\n    // Assign roles to user\n    user.roles = roles;\n    await this.usersRepository.save(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SendOtpDto.html":{"url":"classes/SendOtpDto.html","title":"class - SendOtpDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SendOtpDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/otp.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                purpose\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Email address to send OTP to', example: 'user@example.com', format: 'email'})@IsEmail({}, {message: 'Please provide a valid email address'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/otp.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        purpose\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'verification'\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Purpose of the OTP', example: 'verification', enum: undefined, default: 'verification'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/otp.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsString,\n  IsOptional,\n  Length,\n  Matches,\n} from 'class-validator';\n\nexport class SendOtpDto {\n  @ApiProperty({\n    description: 'Email address to send OTP to',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiPropertyOptional({\n    description: 'Purpose of the OTP',\n    example: 'verification',\n    enum: ['verification', 'password_reset'],\n    default: 'verification',\n  })\n  @IsString()\n  @IsOptional()\n  purpose?: string = 'verification';\n}\n\nexport class VerifyOtpDto {\n  @ApiProperty({\n    description: 'Email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    description: '6-digit OTP code',\n    example: '123456',\n    minLength: 6,\n    maxLength: 6,\n    pattern: '^[0-9]{6}$',\n  })\n  @IsString()\n  @Length(6, 6, { message: 'OTP must be exactly 6 digits' })\n  @Matches(/^[0-9]{6}$/, { message: 'OTP must contain only numbers' })\n  otp: string;\n\n  @ApiPropertyOptional({\n    description: 'Purpose of the OTP verification',\n    example: 'verification',\n    enum: ['verification', 'password_reset'],\n    default: 'verification',\n  })\n  @IsString()\n  @IsOptional()\n  purpose?: string = 'verification';\n}\n\nexport class ForgotPasswordDto {\n  @ApiProperty({\n    description: 'Registered email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n}\n\nexport class ResetPasswordDto {\n  @ApiProperty({\n    description: 'Email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    description: '6-digit OTP code received via email',\n    example: '123456',\n    minLength: 6,\n    maxLength: 6,\n    pattern: '^[0-9]{6}$',\n  })\n  @IsString()\n  @Length(6, 6, { message: 'OTP must be exactly 6 digits' })\n  @Matches(/^[0-9]{6}$/, { message: 'OTP must contain only numbers' })\n  otp: string;\n\n  @ApiProperty({\n    description: 'New password (must meet complexity requirements)',\n    example: 'NewSecure123!',\n    minLength: 8,\n    pattern:\n      '^(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)(?=.*[@$!%*?&])[A-Za-z\\\\d@$!%*?&]{8,}$',\n  })\n  @IsString()\n  @Length(8, 100, { message: 'Password must be at least 8 characters long' })\n  @Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/, {\n    message:\n      'Password must contain uppercase, lowercase, numbers, and special characters',\n  })\n  newPassword: string;\n}\n\nexport class TestOtpDto {\n  @ApiProperty({\n    description: 'Email address for testing OTP generation',\n    example: 'test@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n}\n\nexport class ApplicationNotificationDto {\n  @ApiProperty({\n    description: 'Recipient email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    description: 'Application ID',\n    example: 'APP-001',\n  })\n  @IsString()\n  applicationId: string;\n\n  @ApiProperty({\n    description: 'Application status',\n    example: 'Approved',\n    enum: ['Pending', 'Approved', 'Rejected', 'Ready for Pickup'],\n  })\n  @IsString()\n  status: string;\n\n  @ApiProperty({\n    description: 'Type of application',\n    example: 'Birth Certificate',\n  })\n  @IsString()\n  applicationType: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TestOtpDto.html":{"url":"classes/TestOtpDto.html","title":"class - TestOtpDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TestOtpDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/otp.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Email address for testing OTP generation', example: 'test@example.com', format: 'email'})@IsEmail({}, {message: 'Please provide a valid email address'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/otp.dto.ts:116\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsString,\n  IsOptional,\n  Length,\n  Matches,\n} from 'class-validator';\n\nexport class SendOtpDto {\n  @ApiProperty({\n    description: 'Email address to send OTP to',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiPropertyOptional({\n    description: 'Purpose of the OTP',\n    example: 'verification',\n    enum: ['verification', 'password_reset'],\n    default: 'verification',\n  })\n  @IsString()\n  @IsOptional()\n  purpose?: string = 'verification';\n}\n\nexport class VerifyOtpDto {\n  @ApiProperty({\n    description: 'Email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    description: '6-digit OTP code',\n    example: '123456',\n    minLength: 6,\n    maxLength: 6,\n    pattern: '^[0-9]{6}$',\n  })\n  @IsString()\n  @Length(6, 6, { message: 'OTP must be exactly 6 digits' })\n  @Matches(/^[0-9]{6}$/, { message: 'OTP must contain only numbers' })\n  otp: string;\n\n  @ApiPropertyOptional({\n    description: 'Purpose of the OTP verification',\n    example: 'verification',\n    enum: ['verification', 'password_reset'],\n    default: 'verification',\n  })\n  @IsString()\n  @IsOptional()\n  purpose?: string = 'verification';\n}\n\nexport class ForgotPasswordDto {\n  @ApiProperty({\n    description: 'Registered email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n}\n\nexport class ResetPasswordDto {\n  @ApiProperty({\n    description: 'Email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    description: '6-digit OTP code received via email',\n    example: '123456',\n    minLength: 6,\n    maxLength: 6,\n    pattern: '^[0-9]{6}$',\n  })\n  @IsString()\n  @Length(6, 6, { message: 'OTP must be exactly 6 digits' })\n  @Matches(/^[0-9]{6}$/, { message: 'OTP must contain only numbers' })\n  otp: string;\n\n  @ApiProperty({\n    description: 'New password (must meet complexity requirements)',\n    example: 'NewSecure123!',\n    minLength: 8,\n    pattern:\n      '^(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)(?=.*[@$!%*?&])[A-Za-z\\\\d@$!%*?&]{8,}$',\n  })\n  @IsString()\n  @Length(8, 100, { message: 'Password must be at least 8 characters long' })\n  @Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/, {\n    message:\n      'Password must contain uppercase, lowercase, numbers, and special characters',\n  })\n  newPassword: string;\n}\n\nexport class TestOtpDto {\n  @ApiProperty({\n    description: 'Email address for testing OTP generation',\n    example: 'test@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n}\n\nexport class ApplicationNotificationDto {\n  @ApiProperty({\n    description: 'Recipient email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    description: 'Application ID',\n    example: 'APP-001',\n  })\n  @IsString()\n  applicationId: string;\n\n  @ApiProperty({\n    description: 'Application status',\n    example: 'Approved',\n    enum: ['Pending', 'Approved', 'Rejected', 'Ready for Pickup'],\n  })\n  @IsString()\n  status: string;\n\n  @ApiProperty({\n    description: 'Type of application',\n    example: 'Birth Certificate',\n  })\n  @IsString()\n  applicationType: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAnnouncementDto.html":{"url":"classes/UpdateAnnouncementDto.html","title":"class - UpdateAnnouncementDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAnnouncementDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/announcement/dto/update-announcement.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateAnnouncementDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateAnnouncementDto } from './create-announcement.dto';\n\nexport class UpdateAnnouncementDto extends PartialType(CreateAnnouncementDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAppointmentDto.html":{"url":"classes/UpdateAppointmentDto.html","title":"class - UpdateAppointmentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAppointmentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/appointment/dto/update-appointment.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateAppointmentDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AppointmentStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsEnum(AppointmentStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/appointment/dto/update-appointment.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { IsOptional, IsEnum } from 'class-validator';\nimport { CreateAppointmentDto } from './create-appointment.dto';\nimport { AppointmentStatus } from '../entities/appointment.entity';\n\nexport class UpdateAppointmentDto extends PartialType(CreateAppointmentDto) {\n  @IsOptional()\n  @IsEnum(AppointmentStatus)\n  status?: AppointmentStatus;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateDocumentApplicationDto.html":{"url":"classes/UpdateDocumentApplicationDto.html","title":"class - UpdateDocumentApplicationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateDocumentApplicationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/document-applications/dto/update-document-application.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(\n  CreateDocumentApplicationDto,\n)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                statusMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ApplicationStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: ApplicationStatus, description: 'Application status', example: undefined, required: false})@IsOptional()@IsEnum(ApplicationStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/dto/update-document-application.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        statusMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Status message', example: 'Application approved and ready for pickup', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/document-applications/dto/update-document-application.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateDocumentApplicationDto } from './create-document-application.dto';\nimport { IsEnum, IsOptional, IsString } from 'class-validator';\nimport { ApplicationStatus } from '../entities/document-application.entity';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class UpdateDocumentApplicationDto extends PartialType(\n  CreateDocumentApplicationDto,\n) {\n  @ApiProperty({\n    enum: ApplicationStatus,\n    description: 'Application status',\n    example: ApplicationStatus.APPROVED,\n    required: false,\n  })\n  @IsOptional()\n  @IsEnum(ApplicationStatus)\n  status?: ApplicationStatus;\n\n  @ApiProperty({\n    description: 'Status message',\n    example: 'Application approved and ready for pickup',\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  statusMessage?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateQueueDto.html":{"url":"classes/UpdateQueueDto.html","title":"class - UpdateQueueDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateQueueDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/queue/dto/update-queue.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                counterNumber\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        counterNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/update-queue.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         QueueStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(QueueStatus)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/queue/dto/update-queue.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsEnum, IsOptional } from 'class-validator';\nimport { QueueStatus } from '../entities/queue.entity';\n\nexport class UpdateQueueDto {\n  @IsEnum(QueueStatus)\n  @IsOptional()\n  status?: QueueStatus;\n\n  @IsString()\n  @IsOptional()\n  counterNumber?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/update-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for updating user information (citizen)\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                address\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                contactNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                middleName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                nameExtension\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Complete address', example: '123 Main St, San Ildefonso, Bulacan'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        contactNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Contact number', example: '09123456789'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User email address', example: 'test@example.com'})@IsEmail()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'First name', example: 'John'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Last name', example: 'Doe'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Middle name', example: 'Robert'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        nameExtension\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Name extension (e.g., Jr., III)', example: 'Jr.'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'User password (min 8 characters)', example: 'password123', minLength: 8})@IsString()@IsOptional()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Username', example: 'john_doe'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/update-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsOptional,\n  IsString,\n  MinLength,\n  IsNumber,\n  IsArray,\n} from 'class-validator';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\n/**\n * DTO for updating user information (citizen)\n * @class UpdateUserDto\n */\nexport class UpdateUserDto {\n  @ApiPropertyOptional({\n    description: 'User email address',\n    example: 'test@example.com',\n  })\n  @IsEmail()\n  @IsOptional()\n  email?: string;\n\n  @ApiPropertyOptional({ description: 'Username', example: 'john_doe' })\n  @IsString()\n  @IsOptional()\n  username?: string;\n\n  @ApiPropertyOptional({\n    description: 'User password (min 8 characters)',\n    example: 'password123',\n    minLength: 8,\n  })\n  @IsString()\n  @IsOptional()\n  @MinLength(8)\n  password?: string;\n\n  @ApiPropertyOptional({ description: 'First name', example: 'John' })\n  @IsString()\n  @IsOptional()\n  firstName?: string;\n\n  @ApiPropertyOptional({ description: 'Middle name', example: 'Robert' })\n  @IsString()\n  @IsOptional()\n  middleName?: string;\n\n  @ApiPropertyOptional({ description: 'Last name', example: 'Doe' })\n  @IsString()\n  @IsOptional()\n  lastName?: string;\n\n  @ApiPropertyOptional({\n    description: 'Name extension (e.g., Jr., III)',\n    example: 'Jr.',\n  })\n  @IsString()\n  @IsOptional()\n  nameExtension?: string;\n\n  @ApiPropertyOptional({\n    description: 'Contact number',\n    example: '09123456789',\n  })\n  @IsString()\n  @IsOptional()\n  contactNumber?: string;\n\n  @ApiPropertyOptional({\n    description: 'Complete address',\n    example: '123 Main St, San Ildefonso, Bulacan',\n  })\n  @IsString()\n  @IsOptional()\n  address?: string;\n}\n\n/**\n * DTO for admin to update any user\n * @class AdminUpdateUserDto\n */\nexport class AdminUpdateUserDto extends UpdateUserDto {\n  @ApiPropertyOptional({\n    description: 'Default role ID for the user',\n    example: 2,\n  })\n  @IsNumber()\n  @IsOptional()\n  defaultRoleId?: number;\n\n  @ApiPropertyOptional({\n    description: 'Array of role IDs to assign to the user',\n    example: [1, 2],\n    type: [Number],\n  })\n  @IsArray()\n  @IsOptional()\n  roleIds?: number[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserStatusDto.html":{"url":"classes/UpdateUserStatusDto.html","title":"class - UpdateUserStatusDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserStatusDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user-status.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                isActive\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: true, description: 'User active status'})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user-status.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsBoolean } from 'class-validator';\n\nexport class UpdateUserStatusDto {\n  @ApiProperty({\n    example: true,\n    description: 'User active status',\n  })\n  @IsBoolean()\n  isActive: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                contactNumber\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                defaultRole\n                            \n                            \n                                    \n                                defaultRoleId\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                middleName\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                nameExtension\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                roles\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        contactNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'contact_number', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn({name: 'created_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        defaultRole\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {nullable: true})@JoinColumn({name: 'default_role_id'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        defaultRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'default_role_id', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'first_name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'is_active', default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'last_name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'middle_name', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        nameExtension\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({name: 'name_extension', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined)@JoinTable({name: 'user_roles', joinColumn: undefined, inverseJoinColumn: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn({name: 'updated_at'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:23\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  ManyToOne,\n  JoinColumn,\n  ManyToMany,\n  JoinTable,\n} from 'typeorm';\nimport { Role } from '../../roles/entities/role.entity';\n\n@Entity('users')\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true })\n  email: string;\n\n  @Column({ unique: true })\n  username: string;\n\n  @Column()\n  password: string;\n\n  @Column({ name: 'first_name' })\n  firstName: string;\n\n  @Column({ name: 'middle_name', nullable: true })\n  middleName: string;\n\n  @Column({ name: 'last_name' })\n  lastName: string;\n\n  @Column()\n  name: string; // Keep for backward compatibility\n\n  @Column({ name: 'name_extension', nullable: true })\n  nameExtension: string;\n\n  @Column({ name: 'contact_number', nullable: true })\n  contactNumber: string;\n\n  @Column({ name: 'is_active', default: true })\n  isActive: boolean;\n\n  @CreateDateColumn({ name: 'created_at' })\n  createdAt: Date;\n\n  @UpdateDateColumn({ name: 'updated_at' })\n  updatedAt: Date;\n\n  @ManyToOne(() => Role, { nullable: true })\n  @JoinColumn({ name: 'default_role_id' })\n  defaultRole: Role;\n\n  @Column({ name: 'default_role_id', nullable: true })\n  defaultRoleId: number;\n\n  @ManyToMany(() => Role)\n  @JoinTable({\n    name: 'user_roles',\n    joinColumn: {\n      name: 'user_id',\n      referencedColumnName: 'id',\n    },\n    inverseJoinColumn: {\n      name: 'role_id',\n      referencedColumnName: 'id',\n    },\n  })\n  roles: Role[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserQueryDto.html":{"url":"classes/UserQueryDto.html","title":"class - UserQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/user-query.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                role\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                search\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 10, description: 'Number of items per page', minimum: 1})@IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-query.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 1, description: 'Page number', minimum: 1})@IsOptional()@Type(undefined)@IsNumber()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-query.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'citizen', description: 'Filter by role'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-query.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        search\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'john', description: 'Search term for name, email, or username'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-query.dto.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { IsOptional, IsString, IsNumber, Min } from 'class-validator';\nimport { Type } from 'class-transformer';\n\nexport class UserQueryDto {\n  @ApiPropertyOptional({\n    example: 1,\n    description: 'Page number',\n    minimum: 1,\n  })\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  page?: number = 1;\n\n  @ApiPropertyOptional({\n    example: 10,\n    description: 'Number of items per page',\n    minimum: 1,\n  })\n  @IsOptional()\n  @Type(() => Number)\n  @IsNumber()\n  @Min(1)\n  limit?: number = 10;\n\n  @ApiPropertyOptional({\n    example: 'john',\n    description: 'Search term for name, email, or username',\n  })\n  @IsOptional()\n  @IsString()\n  search?: string;\n\n  @ApiPropertyOptional({\n    example: 'citizen',\n    description: 'Filter by role',\n  })\n  @IsOptional()\n  @IsString()\n  role?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserResponseDto.html":{"url":"classes/UserResponseDto.html","title":"class - UserResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/user-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                contactNumber\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                defaultRole\n                            \n                            \n                                    \n                                    Optional\n                                defaultRoleId\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                isActive\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    Optional\n                                middleName\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    Optional\n                                nameExtension\n                            \n                            \n                                    \n                                roles\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    Optional\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        contactNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '+639123456789', description: 'Contact number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2024-01-01T00:00:00.000Z', description: 'User creation date'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        defaultRole\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'citizen', description: 'Default role name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:87\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        defaultRoleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 4, description: 'Default role ID'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'john.doe@example.com', description: 'User email address'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'John', description: 'User first name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 1, description: 'User ID'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: true, description: 'User active status'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Doe', description: 'User last name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        middleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'Miguel', description: 'User middle name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'John Miguel Doe', description: 'Full name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        nameExtension\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'Jr.', description: 'Name extension'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined, description: 'User roles', type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2024-01-01T00:00:00.000Z', description: 'User last update date'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({example: 'johndoe', description: 'Username'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-response.dto.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class UserResponseDto {\n  @ApiProperty({\n    example: 1,\n    description: 'User ID',\n  })\n  id: number;\n\n  @ApiProperty({\n    example: 'john.doe@example.com',\n    description: 'User email address',\n  })\n  email: string;\n\n  @ApiPropertyOptional({\n    example: 'johndoe',\n    description: 'Username',\n  })\n  username?: string;\n\n  @ApiProperty({\n    example: 'John',\n    description: 'User first name',\n  })\n  firstName: string;\n\n  @ApiPropertyOptional({\n    example: 'Miguel',\n    description: 'User middle name',\n  })\n  middleName?: string;\n\n  @ApiProperty({\n    example: 'Doe',\n    description: 'User last name',\n  })\n  lastName: string;\n\n  @ApiProperty({\n    example: 'John Miguel Doe',\n    description: 'Full name',\n  })\n  name: string;\n\n  @ApiPropertyOptional({\n    example: 'Jr.',\n    description: 'Name extension',\n  })\n  nameExtension?: string;\n\n  @ApiProperty({\n    example: '+639123456789',\n    description: 'Contact number',\n  })\n  contactNumber: string;\n\n  @ApiProperty({\n    example: true,\n    description: 'User active status',\n  })\n  isActive: boolean;\n\n  @ApiProperty({\n    example: '2024-01-01T00:00:00.000Z',\n    description: 'User creation date',\n  })\n  createdAt: Date;\n\n  @ApiProperty({\n    example: '2024-01-01T00:00:00.000Z',\n    description: 'User last update date',\n  })\n  updatedAt: Date;\n\n  @ApiProperty({\n    example: ['citizen', 'staff'],\n    description: 'User roles',\n    type: [String],\n  })\n  roles: string[];\n\n  @ApiProperty({\n    example: 'citizen',\n    description: 'Default role name',\n  })\n  defaultRole: string;\n\n  @ApiPropertyOptional({\n    example: 4,\n    description: 'Default role ID',\n  })\n  defaultRoleId?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserStats.html":{"url":"interfaces/UserStats.html","title":"interface - UserStats","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserStats\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            activeUsers\n                                        \n                                \n                                \n                                        \n                                            inactiveUsers\n                                        \n                                \n                                \n                                        \n                                            recentUsers\n                                        \n                                \n                                \n                                        \n                                            totalUsers\n                                        \n                                \n                                \n                                        \n                                            usersByRole\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        activeUsers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        activeUsers:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        inactiveUsers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        inactiveUsers:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        recentUsers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        recentUsers:         Omit[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Omit[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        totalUsers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        totalUsers:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        usersByRole\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        usersByRole:     literal type[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  BadRequestException,\n  ConflictException,\n  Logger,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, Like, In } from 'typeorm';\nimport { User } from './entities/user.entity';\nimport { AdminUpdateUserDto } from '../auth/dto/update-user.dto'; // Import from auth module\nimport { RolesService } from '../roles/roles.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport * as bcrypt from 'bcrypt';\n\ninterface FindAllOptions {\n  page: number;\n  limit: number;\n  search?: string;\n  role?: string;\n}\n\nexport interface UserStats {\n  totalUsers: number;\n  activeUsers: number;\n  inactiveUsers: number;\n  usersByRole: { roleName: string; count: number }[];\n  recentUsers: Omit[];\n}\n\n@Injectable()\nexport class UsersService {\n  private readonly logger = new Logger(UsersService.name);\n\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n    private rolesService: RolesService,\n  ) {}\n\n  async findAll(options: FindAllOptions) {\n    const { page, limit, search, role } = options;\n    const skip = (page - 1) * limit;\n\n    const queryBuilder = this.usersRepository\n      .createQueryBuilder('user')\n      .leftJoinAndSelect('user.defaultRole', 'defaultRole')\n      .leftJoinAndSelect('user.roles', 'roles');\n\n    // Apply search filter\n    if (search) {\n      queryBuilder.where(\n        '(user.firstName LIKE :search OR user.lastName LIKE :search OR user.email LIKE :search OR user.username LIKE :search)',\n        { search: `%${search}%` },\n      );\n    }\n\n    // Apply role filter\n    if (role) {\n      queryBuilder.andWhere('roles.name = :role', { role });\n    }\n\n    queryBuilder.orderBy('user.createdAt', 'DESC').skip(skip).take(limit);\n\n    const [users, total] = await queryBuilder.getManyAndCount();\n\n    // Remove passwords from response\n    const sanitizedUsers = users.map((user) => {\n      const { password, ...userWithoutPassword } = user;\n      return {\n        ...userWithoutPassword,\n        roles: user.roles.map((role) => role.name),\n        defaultRole: user.defaultRole?.name || 'citizen',\n      };\n    });\n\n    return {\n      users: sanitizedUsers,\n      total,\n      page,\n      limit,\n      totalPages: Math.ceil(total / limit),\n    };\n  }\n\n  async findOne(id: number): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id },\n      relations: ['defaultRole', 'roles'],\n    });\n\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    // Remove password and format response\n\n    const { password, ...userWithoutPassword } = user;\n    return {\n      ...userWithoutPassword,\n      roles: user.roles.map((role) => role.name),\n      defaultRole: user.defaultRole?.name || 'citizen',\n    };\n  }\n\n  // Admin-only update method\n  async adminUpdate(\n    id: number,\n    updateUserDto: AdminUpdateUserDto,\n  ): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id },\n      relations: ['roles'],\n    });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    const {\n      email,\n\n      username,\n\n      firstName,\n\n      middleName,\n\n      lastName,\n\n      nameExtension,\n\n      contactNumber,\n\n      roleIds,\n\n      defaultRoleId,\n    } = updateUserDto;\n\n    // Check email uniqueness if being updated\n    if (email && email !== user.email) {\n      const existingUser = await this.usersRepository.findOne({\n        where: { email },\n      });\n      if (existingUser) {\n        throw new ConflictException('Email already exists');\n      }\n    }\n\n    // Check username uniqueness if being updated\n    if (username && username !== user.username) {\n      const existingUser = await this.usersRepository.findOne({\n        where: { username },\n      });\n      if (existingUser) {\n        throw new ConflictException('Username already exists');\n      }\n    }\n\n    // Update fields\n    const updateData: any = {};\n\n    if (email) updateData.email = email;\n    if (username) updateData.username = username;\n    if (firstName) updateData.firstName = firstName;\n    if (lastName) updateData.lastName = lastName;\n    if (contactNumber) updateData.contactNumber = contactNumber;\n\n    // Handle optional fields\n    if (middleName !== undefined) updateData.middleName = middleName;\n    if (nameExtension !== undefined) updateData.nameExtension = nameExtension;\n    if (defaultRoleId !== undefined) updateData.defaultRoleId = defaultRoleId;\n\n    // Update name if name components changed\n    if (\n      firstName ||\n      middleName !== undefined ||\n      lastName ||\n      nameExtension !== undefined\n    ) {\n      const newFirstName = firstName || user.firstName;\n      const newMiddleName =\n        middleName !== undefined ? middleName : user.middleName;\n      const newLastName = lastName || user.lastName;\n      const newNameExtension =\n        nameExtension !== undefined ? nameExtension : user.nameExtension;\n\n      updateData.name = `${newFirstName} ${newMiddleName ? newMiddleName + ' ' : ''}${newLastName}${newNameExtension ? ' ' + newNameExtension : ''}`;\n    }\n\n    await this.usersRepository.update(id, updateData);\n\n    // Update roles if provided\n    if (roleIds !== undefined) {\n      // Remove existing roles and assign new ones\n      await this.usersRepository\n        .createQueryBuilder()\n        .relation(User, 'roles')\n        .of(id)\n        .remove(user.roles);\n\n      if (roleIds.length > 0) {\n        await this.rolesService.assignRolesToUser(id, roleIds);\n      }\n    }\n\n    return this.findOne(id);\n  }\n\n  async remove(id: number): Promise {\n    const user = await this.usersRepository.findOne({ where: { id } });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    await this.usersRepository.delete(id);\n    return { message: `User with ID ${id} has been deleted` };\n  }\n\n  async updateStatus(id: number, isActive: boolean): Promise {\n    const user = await this.usersRepository.findOne({ where: { id } });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    await this.usersRepository.update(id, { isActive });\n    return this.findOne(id);\n  }\n\n  async getStats(): Promise {\n    const totalUsers = await this.usersRepository.count();\n    const activeUsers = await this.usersRepository.count({\n      where: { isActive: true },\n    });\n    const inactiveUsers = totalUsers - activeUsers;\n\n    // Get user count by role\n    const roleStats = await this.usersRepository\n      .createQueryBuilder('user')\n      .leftJoin('user.roles', 'role')\n      .select('role.name', 'roleName')\n      .addSelect('COUNT(user.id)', 'count')\n      .groupBy('role.name')\n      .getRawMany();\n\n    const usersByRole = roleStats.map((stat) => ({\n      roleName: stat.roleName || 'No Role',\n\n      count: parseInt(stat.count),\n    }));\n\n    // Get recent users (last 10)\n    const recentUsers = await this.usersRepository.find({\n      order: { createdAt: 'DESC' },\n      take: 10,\n      relations: ['defaultRole', 'roles'],\n    });\n\n    const sanitizedRecentUsers = recentUsers.map((user) => {\n      const { password, ...userWithoutPassword } = user;\n      return userWithoutPassword as Omit;\n    });\n\n    return {\n      totalUsers,\n      activeUsers,\n      inactiveUsers,\n      usersByRole,\n      recentUsers: sanitizedRecentUsers,\n    };\n  }\n\n  async findByEmail(email: string): Promise {\n    return this.usersRepository.findOne({\n      where: { email },\n      relations: ['defaultRole', 'roles'],\n    });\n  }\n\n  async findByUsername(username: string): Promise {\n    return this.usersRepository.findOne({\n      where: { username },\n      relations: ['defaultRole', 'roles'],\n    });\n  }\n\n  async create(createUserDto: CreateUserDto) {\n    const {\n      email,\n      username,\n      password,\n      firstName,\n      middleName,\n      lastName,\n      nameExtension,\n      contactNumber,\n      name,\n      roleIds,\n      defaultRoleId,\n    } = createUserDto;\n\n    // Generate full name if not provided\n    const fullName =\n      name ||\n      `${firstName} ${middleName ? middleName + ' ' : ''}${lastName}${nameExtension ? ' ' + nameExtension : ''}`;\n\n    // Check if user already exists\n    const existingUserByEmail = await this.usersRepository.findOne({\n      where: { email },\n    });\n    if (existingUserByEmail) {\n      throw new ConflictException('Email already exists');\n    }\n\n    if (username) {\n      const existingUserByUsername = await this.usersRepository.findOne({\n        where: { username },\n      });\n      if (existingUserByUsername) {\n        throw new ConflictException('Username already exists');\n      }\n    }\n\n    try {\n      // Create user\n      const user = this.usersRepository.create({\n        email,\n        username,\n        password, // Should be hashed by the caller\n        firstName,\n        middleName,\n        lastName,\n        nameExtension,\n        contactNumber,\n        name: fullName,\n        defaultRoleId: defaultRoleId || 4, // Default to citizen\n      });\n\n      await this.usersRepository.save(user);\n\n      // Assign roles if provided\n      if (roleIds && roleIds.length > 0) {\n        await this.rolesService.assignRolesToUser(user.id, roleIds);\n      }\n\n      return user;\n    } catch (error) {\n      this.logger.error('Error creating user:', error);\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserStatsResponseDto.html":{"url":"classes/UserStatsResponseDto.html","title":"class - UserStatsResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserStatsResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/user-stats-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                activeUsers\n                            \n                            \n                                    \n                                inactiveUsers\n                            \n                            \n                                    \n                                recentUsers\n                            \n                            \n                                    \n                                totalUsers\n                            \n                            \n                                    \n                                usersByRole\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        activeUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 85, description: 'Number of active users'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-stats-response.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        inactiveUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 15, description: 'Number of inactive users'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-stats-response.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        recentUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserResponseDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined, description: 'Recently created users'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-stats-response.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        totalUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 100, description: 'Total number of users'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-stats-response.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        usersByRole\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UsersByRoleDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined, description: 'User count by role'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-stats-response.dto.ts:41\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { UserResponseDto } from './user-response.dto';\n\nclass UsersByRoleDto {\n  @ApiProperty({\n    example: 'citizen',\n    description: 'Role name',\n  })\n  roleName: string;\n\n  @ApiProperty({\n    example: 25,\n    description: 'Number of users with this role',\n  })\n  count: number;\n}\n\nexport class UserStatsResponseDto {\n  @ApiProperty({\n    example: 100,\n    description: 'Total number of users',\n  })\n  totalUsers: number;\n\n  @ApiProperty({\n    example: 85,\n    description: 'Number of active users',\n  })\n  activeUsers: number;\n\n  @ApiProperty({\n    example: 15,\n    description: 'Number of inactive users',\n  })\n  inactiveUsers: number;\n\n  @ApiProperty({\n    type: [UsersByRoleDto],\n    description: 'User count by role',\n  })\n  usersByRole: UsersByRoleDto[];\n\n  @ApiProperty({\n    type: [UserResponseDto],\n    description: 'Recently created users',\n  })\n  recentUsers: UserResponseDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UsersByRoleDto.html":{"url":"classes/UsersByRoleDto.html","title":"class - UsersByRoleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UsersByRoleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/user-stats-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                count\n                            \n                            \n                                    \n                                roleName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 25, description: 'Number of users with this role'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-stats-response.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        roleName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'citizen', description: 'Role name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-stats-response.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { UserResponseDto } from './user-response.dto';\n\nclass UsersByRoleDto {\n  @ApiProperty({\n    example: 'citizen',\n    description: 'Role name',\n  })\n  roleName: string;\n\n  @ApiProperty({\n    example: 25,\n    description: 'Number of users with this role',\n  })\n  count: number;\n}\n\nexport class UserStatsResponseDto {\n  @ApiProperty({\n    example: 100,\n    description: 'Total number of users',\n  })\n  totalUsers: number;\n\n  @ApiProperty({\n    example: 85,\n    description: 'Number of active users',\n  })\n  activeUsers: number;\n\n  @ApiProperty({\n    example: 15,\n    description: 'Number of inactive users',\n  })\n  inactiveUsers: number;\n\n  @ApiProperty({\n    type: [UsersByRoleDto],\n    description: 'User count by role',\n  })\n  usersByRole: UsersByRoleDto[];\n\n  @ApiProperty({\n    type: [UserResponseDto],\n    description: 'Recently created users',\n  })\n  recentUsers: UserResponseDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                adminCreateUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getProfile\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getStats\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        adminCreateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    adminCreateUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('admin-create')@UseGuards(JwtAuthGuard, RolesGuard)@Roles('admin', 'super_admin')@ApiOperation({summary: 'Admin creates user with role assignment'})@ApiResponse({status: 201, description: 'User created successfully', type: UserResponseDto})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:156\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(query: UserQueryDto, req: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(RolesGuard)@Roles('admin', 'staff', 'super_admin')@ApiOperation({summary: 'Get all users (Admin only)'})@ApiResponse({status: 200, description: 'Users retrieved successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                            UserQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string, req: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@UseGuards(RolesGuard)@Roles('admin', 'staff', 'super_admin')@ApiOperation({summary: 'Get user by ID (Admin only)'})@ApiResponse({status: 200, description: 'User found'})@ApiResponse({status: 404, description: 'User not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:83\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(req: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('profile')@ApiOperation({summary: 'Get current user profile'})@ApiResponse({status: 200, description: 'Profile retrieved successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('stats')@UseGuards(RolesGuard)@Roles('admin', 'staff', 'super_admin')@ApiOperation({summary: 'Get user statistics (Admin only)'})@ApiResponse({status: 200, description: 'Statistics retrieved successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:73\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string, req: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@UseGuards(RolesGuard)@Roles('admin', 'super_admin')@ApiOperation({summary: 'Delete user (Admin only)'})@ApiResponse({status: 200, description: 'User deleted successfully'})@ApiResponse({status: 404, description: 'User not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:124\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateUserDto: AdminUpdateUserDto, req: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@UseGuards(RolesGuard)@Roles('admin', 'super_admin')@ApiOperation({summary: 'Update user (Admin only)'})@ApiResponse({status: 200, description: 'User updated successfully'})@ApiResponse({status: 404, description: 'User not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:109\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            AdminUpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(id: string, updateStatusDto: UpdateUserStatusDto, req: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id/status')@UseGuards(RolesGuard)@Roles('admin', 'super_admin')@ApiOperation({summary: 'Update user status (Admin only)'})@ApiResponse({status: 200, description: 'User status updated successfully'})@ApiResponse({status: 404, description: 'User not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:138\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateStatusDto\n                                            \n                                                            UpdateUserStatusDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        /* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-unsafe-return */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nimport {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n  Request,\n  Query,\n  Logger,\n} from '@nestjs/common';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n} from '@nestjs/swagger';\nimport { UsersService } from './users.service';\nimport { AdminUpdateUserDto } from '../auth/dto/update-user.dto'; // Import from auth module\nimport { UpdateUserStatusDto } from './dto/update-user-status.dto';\nimport { UserQueryDto } from './dto/user-query.dto';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../auth/guards/roles.guard';\nimport { Roles } from '../auth/decorators/roles.decorator';\nimport { AuthenticatedUser } from '../auth/jwt.strategy';\nimport * as bcrypt from 'bcrypt';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UserResponseDto } from './dto/user-response.dto';\n\n@ApiTags('users')\n@Controller('users')\n@UseGuards(JwtAuthGuard)\n@ApiBearerAuth()\nexport class UsersController {\n  private readonly logger = new Logger(UsersController.name);\n  \n  constructor(private readonly usersService: UsersService) {}\n\n  @Get()\n  @UseGuards(RolesGuard)\n  @Roles('admin', 'staff', 'super_admin')\n  @ApiOperation({ summary: 'Get all users (Admin only)' })\n  @ApiResponse({ status: 200, description: 'Users retrieved successfully' })\n  async findAll(\n    @Query() query: UserQueryDto,\n\n    @Request() req: { user: AuthenticatedUser },\n  ) {\n    const { page = 1, limit = 10, search, role } = query;\n    return this.usersService.findAll({ page, limit, search, role });\n  }\n\n  @Get('profile')\n  @ApiOperation({ summary: 'Get current user profile' })\n  @ApiResponse({ status: 200, description: 'Profile retrieved successfully' })\n  async getProfile(@Request() req: { user: AuthenticatedUser }) {\n    return this.usersService.findOne(req.user.id);\n  }\n\n  @Get('stats')\n  @UseGuards(RolesGuard)\n  @Roles('admin', 'staff', 'super_admin')\n  @ApiOperation({ summary: 'Get user statistics (Admin only)' })\n  @ApiResponse({\n    status: 200,\n    description: 'Statistics retrieved successfully',\n  })\n  async getStats() {\n    return this.usersService.getStats();\n  }\n\n  @Get(':id')\n  @UseGuards(RolesGuard)\n  @Roles('admin', 'staff', 'super_admin')\n  @ApiOperation({ summary: 'Get user by ID (Admin only)' })\n  @ApiResponse({ status: 200, description: 'User found' })\n  @ApiResponse({ status: 404, description: 'User not found' })\n  async findOne(\n    @Param('id') id: string,\n    @Request() req: { user: AuthenticatedUser },\n  ) {\n    // Allow users to view their own profile\n    const userId = +id;\n    const currentUser = req.user;\n\n    if (\n      userId === currentUser.id ||\n      currentUser.roles.some((role) =>\n        ['admin', 'staff', 'super_admin'].includes(role.name),\n      )\n    ) {\n      return this.usersService.findOne(userId);\n    }\n\n    throw new Error('Unauthorized');\n  }\n\n  @Patch(':id')\n  @UseGuards(RolesGuard)\n  @Roles('admin', 'super_admin')\n  @ApiOperation({ summary: 'Update user (Admin only)' })\n  @ApiResponse({ status: 200, description: 'User updated successfully' })\n  @ApiResponse({ status: 404, description: 'User not found' })\n  async update(\n    @Param('id') id: string,\n    @Body() updateUserDto: AdminUpdateUserDto,\n\n    @Request() req: { user: AuthenticatedUser },\n  ) {\n    return this.usersService.adminUpdate(+id, updateUserDto);\n  }\n\n  @Delete(':id')\n  @UseGuards(RolesGuard)\n  @Roles('admin', 'super_admin')\n  @ApiOperation({ summary: 'Delete user (Admin only)' })\n  @ApiResponse({ status: 200, description: 'User deleted successfully' })\n  @ApiResponse({ status: 404, description: 'User not found' })\n  async remove(\n    @Param('id') id: string,\n\n    @Request() req: { user: AuthenticatedUser },\n  ) {\n    return this.usersService.remove(+id);\n  }\n\n  @Patch(':id/status')\n  @UseGuards(RolesGuard)\n  @Roles('admin', 'super_admin')\n  @ApiOperation({ summary: 'Update user status (Admin only)' })\n  @ApiResponse({ status: 200, description: 'User status updated successfully' })\n  @ApiResponse({ status: 404, description: 'User not found' })\n  async updateStatus(\n    @Param('id') id: string,\n    @Body() updateStatusDto: UpdateUserStatusDto,\n\n    @Request() req: { user: AuthenticatedUser },\n  ) {\n    return this.usersService.updateStatus(+id, updateStatusDto.isActive);\n  }\n\n  @Post('admin-create')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles('admin', 'super_admin')\n  @ApiOperation({ summary: 'Admin creates user with role assignment' })\n  @ApiResponse({\n    status: 201,\n    description: 'User created successfully',\n    type: UserResponseDto,\n  })\n  async adminCreateUser(\n    @Body() createUserDto: CreateUserDto,\n  ): Promise {\n    try {\n      // Hash password\n      const salt = await bcrypt.genSalt();\n      const hashedPassword = await bcrypt.hash(createUserDto.password, salt);\n\n      // Create user with hashed password\n      const userWithHashedPassword = {\n        ...createUserDto,\n        password: hashedPassword,\n      };\n\n      const user = await this.usersService.create(userWithHashedPassword);\n\n      // Return user without password\n\n      const { password, ...userWithoutPassword } = user;\n\n      // Get user with roles for response\n\n      const userWithRoles = await this.usersService.findOne(user.id);\n\n      return userWithRoles;\n    } catch (error) {\n      this.logger.error('Error in admin create user:', error);\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nRolesModule\n\nRolesModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nRolesModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RolesModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { User } from './entities/user.entity';\nimport { RolesModule } from '../roles/roles.module';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User]), RolesModule],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService, TypeOrmModule],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                adminUpdate\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findByEmail\n                            \n                            \n                                    Async\n                                findByUsername\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getStats\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, rolesService: RolesService)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:37\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        rolesService\n                                                  \n                                                        \n                                                                        RolesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        adminUpdate\n                        \n                    \n                \n            \n            \n                \n                        \n                    adminUpdate(id: number, updateUserDto: AdminUpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:111\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            AdminUpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:290\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(options: FindAllOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                            FindAllOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:276\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByUsername\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByUsername(username: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:283\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:90\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats()\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:233\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:213\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(id: number, isActive: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:223\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                isActive\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(UsersService.name)\n                    \n                \n                    \n                        \n                                Defined in src/users/users.service.ts:37\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  BadRequestException,\n  ConflictException,\n  Logger,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, Like, In } from 'typeorm';\nimport { User } from './entities/user.entity';\nimport { AdminUpdateUserDto } from '../auth/dto/update-user.dto'; // Import from auth module\nimport { RolesService } from '../roles/roles.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport * as bcrypt from 'bcrypt';\n\ninterface FindAllOptions {\n  page: number;\n  limit: number;\n  search?: string;\n  role?: string;\n}\n\nexport interface UserStats {\n  totalUsers: number;\n  activeUsers: number;\n  inactiveUsers: number;\n  usersByRole: { roleName: string; count: number }[];\n  recentUsers: Omit[];\n}\n\n@Injectable()\nexport class UsersService {\n  private readonly logger = new Logger(UsersService.name);\n\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n    private rolesService: RolesService,\n  ) {}\n\n  async findAll(options: FindAllOptions) {\n    const { page, limit, search, role } = options;\n    const skip = (page - 1) * limit;\n\n    const queryBuilder = this.usersRepository\n      .createQueryBuilder('user')\n      .leftJoinAndSelect('user.defaultRole', 'defaultRole')\n      .leftJoinAndSelect('user.roles', 'roles');\n\n    // Apply search filter\n    if (search) {\n      queryBuilder.where(\n        '(user.firstName LIKE :search OR user.lastName LIKE :search OR user.email LIKE :search OR user.username LIKE :search)',\n        { search: `%${search}%` },\n      );\n    }\n\n    // Apply role filter\n    if (role) {\n      queryBuilder.andWhere('roles.name = :role', { role });\n    }\n\n    queryBuilder.orderBy('user.createdAt', 'DESC').skip(skip).take(limit);\n\n    const [users, total] = await queryBuilder.getManyAndCount();\n\n    // Remove passwords from response\n    const sanitizedUsers = users.map((user) => {\n      const { password, ...userWithoutPassword } = user;\n      return {\n        ...userWithoutPassword,\n        roles: user.roles.map((role) => role.name),\n        defaultRole: user.defaultRole?.name || 'citizen',\n      };\n    });\n\n    return {\n      users: sanitizedUsers,\n      total,\n      page,\n      limit,\n      totalPages: Math.ceil(total / limit),\n    };\n  }\n\n  async findOne(id: number): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id },\n      relations: ['defaultRole', 'roles'],\n    });\n\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    // Remove password and format response\n\n    const { password, ...userWithoutPassword } = user;\n    return {\n      ...userWithoutPassword,\n      roles: user.roles.map((role) => role.name),\n      defaultRole: user.defaultRole?.name || 'citizen',\n    };\n  }\n\n  // Admin-only update method\n  async adminUpdate(\n    id: number,\n    updateUserDto: AdminUpdateUserDto,\n  ): Promise {\n    const user = await this.usersRepository.findOne({\n      where: { id },\n      relations: ['roles'],\n    });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    const {\n      email,\n\n      username,\n\n      firstName,\n\n      middleName,\n\n      lastName,\n\n      nameExtension,\n\n      contactNumber,\n\n      roleIds,\n\n      defaultRoleId,\n    } = updateUserDto;\n\n    // Check email uniqueness if being updated\n    if (email && email !== user.email) {\n      const existingUser = await this.usersRepository.findOne({\n        where: { email },\n      });\n      if (existingUser) {\n        throw new ConflictException('Email already exists');\n      }\n    }\n\n    // Check username uniqueness if being updated\n    if (username && username !== user.username) {\n      const existingUser = await this.usersRepository.findOne({\n        where: { username },\n      });\n      if (existingUser) {\n        throw new ConflictException('Username already exists');\n      }\n    }\n\n    // Update fields\n    const updateData: any = {};\n\n    if (email) updateData.email = email;\n    if (username) updateData.username = username;\n    if (firstName) updateData.firstName = firstName;\n    if (lastName) updateData.lastName = lastName;\n    if (contactNumber) updateData.contactNumber = contactNumber;\n\n    // Handle optional fields\n    if (middleName !== undefined) updateData.middleName = middleName;\n    if (nameExtension !== undefined) updateData.nameExtension = nameExtension;\n    if (defaultRoleId !== undefined) updateData.defaultRoleId = defaultRoleId;\n\n    // Update name if name components changed\n    if (\n      firstName ||\n      middleName !== undefined ||\n      lastName ||\n      nameExtension !== undefined\n    ) {\n      const newFirstName = firstName || user.firstName;\n      const newMiddleName =\n        middleName !== undefined ? middleName : user.middleName;\n      const newLastName = lastName || user.lastName;\n      const newNameExtension =\n        nameExtension !== undefined ? nameExtension : user.nameExtension;\n\n      updateData.name = `${newFirstName} ${newMiddleName ? newMiddleName + ' ' : ''}${newLastName}${newNameExtension ? ' ' + newNameExtension : ''}`;\n    }\n\n    await this.usersRepository.update(id, updateData);\n\n    // Update roles if provided\n    if (roleIds !== undefined) {\n      // Remove existing roles and assign new ones\n      await this.usersRepository\n        .createQueryBuilder()\n        .relation(User, 'roles')\n        .of(id)\n        .remove(user.roles);\n\n      if (roleIds.length > 0) {\n        await this.rolesService.assignRolesToUser(id, roleIds);\n      }\n    }\n\n    return this.findOne(id);\n  }\n\n  async remove(id: number): Promise {\n    const user = await this.usersRepository.findOne({ where: { id } });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    await this.usersRepository.delete(id);\n    return { message: `User with ID ${id} has been deleted` };\n  }\n\n  async updateStatus(id: number, isActive: boolean): Promise {\n    const user = await this.usersRepository.findOne({ where: { id } });\n    if (!user) {\n      throw new NotFoundException(`User with ID ${id} not found`);\n    }\n\n    await this.usersRepository.update(id, { isActive });\n    return this.findOne(id);\n  }\n\n  async getStats(): Promise {\n    const totalUsers = await this.usersRepository.count();\n    const activeUsers = await this.usersRepository.count({\n      where: { isActive: true },\n    });\n    const inactiveUsers = totalUsers - activeUsers;\n\n    // Get user count by role\n    const roleStats = await this.usersRepository\n      .createQueryBuilder('user')\n      .leftJoin('user.roles', 'role')\n      .select('role.name', 'roleName')\n      .addSelect('COUNT(user.id)', 'count')\n      .groupBy('role.name')\n      .getRawMany();\n\n    const usersByRole = roleStats.map((stat) => ({\n      roleName: stat.roleName || 'No Role',\n\n      count: parseInt(stat.count),\n    }));\n\n    // Get recent users (last 10)\n    const recentUsers = await this.usersRepository.find({\n      order: { createdAt: 'DESC' },\n      take: 10,\n      relations: ['defaultRole', 'roles'],\n    });\n\n    const sanitizedRecentUsers = recentUsers.map((user) => {\n      const { password, ...userWithoutPassword } = user;\n      return userWithoutPassword as Omit;\n    });\n\n    return {\n      totalUsers,\n      activeUsers,\n      inactiveUsers,\n      usersByRole,\n      recentUsers: sanitizedRecentUsers,\n    };\n  }\n\n  async findByEmail(email: string): Promise {\n    return this.usersRepository.findOne({\n      where: { email },\n      relations: ['defaultRole', 'roles'],\n    });\n  }\n\n  async findByUsername(username: string): Promise {\n    return this.usersRepository.findOne({\n      where: { username },\n      relations: ['defaultRole', 'roles'],\n    });\n  }\n\n  async create(createUserDto: CreateUserDto) {\n    const {\n      email,\n      username,\n      password,\n      firstName,\n      middleName,\n      lastName,\n      nameExtension,\n      contactNumber,\n      name,\n      roleIds,\n      defaultRoleId,\n    } = createUserDto;\n\n    // Generate full name if not provided\n    const fullName =\n      name ||\n      `${firstName} ${middleName ? middleName + ' ' : ''}${lastName}${nameExtension ? ' ' + nameExtension : ''}`;\n\n    // Check if user already exists\n    const existingUserByEmail = await this.usersRepository.findOne({\n      where: { email },\n    });\n    if (existingUserByEmail) {\n      throw new ConflictException('Email already exists');\n    }\n\n    if (username) {\n      const existingUserByUsername = await this.usersRepository.findOne({\n        where: { username },\n      });\n      if (existingUserByUsername) {\n        throw new ConflictException('Username already exists');\n      }\n    }\n\n    try {\n      // Create user\n      const user = this.usersRepository.create({\n        email,\n        username,\n        password, // Should be hashed by the caller\n        firstName,\n        middleName,\n        lastName,\n        nameExtension,\n        contactNumber,\n        name: fullName,\n        defaultRoleId: defaultRoleId || 4, // Default to citizen\n      });\n\n      await this.usersRepository.save(user);\n\n      // Assign roles if provided\n      if (roleIds && roleIds.length > 0) {\n        await this.rolesService.assignRolesToUser(user.id, roleIds);\n      }\n\n      return user;\n    } catch (error) {\n      this.logger.error('Error creating user:', error);\n      throw error;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VerifyOtpDto.html":{"url":"classes/VerifyOtpDto.html","title":"class - VerifyOtpDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VerifyOtpDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/otp.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                otp\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                purpose\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Email address', example: 'user@example.com', format: 'email'})@IsEmail({}, {message: 'Please provide a valid email address'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/otp.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        otp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: '6-digit OTP code', example: '123456', minLength: 6, maxLength: 6, pattern: '^[0-9]{6}$'})@IsString()@Length(6, 6, {message: 'OTP must be exactly 6 digits'})@Matches(/^[0-9]{6}$/, {message: 'OTP must contain only numbers'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/otp.dto.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        purpose\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'verification'\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Purpose of the OTP verification', example: 'verification', enum: undefined, default: 'verification'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/otp.dto.ts:59\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsString,\n  IsOptional,\n  Length,\n  Matches,\n} from 'class-validator';\n\nexport class SendOtpDto {\n  @ApiProperty({\n    description: 'Email address to send OTP to',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiPropertyOptional({\n    description: 'Purpose of the OTP',\n    example: 'verification',\n    enum: ['verification', 'password_reset'],\n    default: 'verification',\n  })\n  @IsString()\n  @IsOptional()\n  purpose?: string = 'verification';\n}\n\nexport class VerifyOtpDto {\n  @ApiProperty({\n    description: 'Email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    description: '6-digit OTP code',\n    example: '123456',\n    minLength: 6,\n    maxLength: 6,\n    pattern: '^[0-9]{6}$',\n  })\n  @IsString()\n  @Length(6, 6, { message: 'OTP must be exactly 6 digits' })\n  @Matches(/^[0-9]{6}$/, { message: 'OTP must contain only numbers' })\n  otp: string;\n\n  @ApiPropertyOptional({\n    description: 'Purpose of the OTP verification',\n    example: 'verification',\n    enum: ['verification', 'password_reset'],\n    default: 'verification',\n  })\n  @IsString()\n  @IsOptional()\n  purpose?: string = 'verification';\n}\n\nexport class ForgotPasswordDto {\n  @ApiProperty({\n    description: 'Registered email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n}\n\nexport class ResetPasswordDto {\n  @ApiProperty({\n    description: 'Email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    description: '6-digit OTP code received via email',\n    example: '123456',\n    minLength: 6,\n    maxLength: 6,\n    pattern: '^[0-9]{6}$',\n  })\n  @IsString()\n  @Length(6, 6, { message: 'OTP must be exactly 6 digits' })\n  @Matches(/^[0-9]{6}$/, { message: 'OTP must contain only numbers' })\n  otp: string;\n\n  @ApiProperty({\n    description: 'New password (must meet complexity requirements)',\n    example: 'NewSecure123!',\n    minLength: 8,\n    pattern:\n      '^(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)(?=.*[@$!%*?&])[A-Za-z\\\\d@$!%*?&]{8,}$',\n  })\n  @IsString()\n  @Length(8, 100, { message: 'Password must be at least 8 characters long' })\n  @Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/, {\n    message:\n      'Password must contain uppercase, lowercase, numbers, and special characters',\n  })\n  newPassword: string;\n}\n\nexport class TestOtpDto {\n  @ApiProperty({\n    description: 'Email address for testing OTP generation',\n    example: 'test@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n}\n\nexport class ApplicationNotificationDto {\n  @ApiProperty({\n    description: 'Recipient email address',\n    example: 'user@example.com',\n    format: 'email',\n  })\n  @IsEmail({}, { message: 'Please provide a valid email address' })\n  email: string;\n\n  @ApiProperty({\n    description: 'Application ID',\n    example: 'APP-001',\n  })\n  @IsString()\n  applicationId: string;\n\n  @ApiProperty({\n    description: 'Application status',\n    example: 'Approved',\n    enum: ['Pending', 'Approved', 'Rejected', 'Ready for Pickup'],\n  })\n  @IsString()\n  status: string;\n\n  @ApiProperty({\n    description: 'Type of application',\n    example: 'Birth Certificate',\n  })\n  @IsString()\n  applicationType: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/24)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            interface\n            LockoutData\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/auth/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/decorators/roles.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/user.decorator.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                        src/auth/decorators/user.decorator.ts\n            \n            variable\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/appointment-notification.dto.ts\n            \n            class\n            AppointmentNotificationDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/auth/dto/otp.dto.ts\n            \n            class\n            ApplicationNotificationDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/dto/otp.dto.ts\n            \n            class\n            ForgotPasswordDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dto/otp.dto.ts\n            \n            class\n            ResetPasswordDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/dto/otp.dto.ts\n            \n            class\n            SendOtpDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/otp.dto.ts\n            \n            class\n            TestOtpDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dto/otp.dto.ts\n            \n            class\n            VerifyOtpDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/dto/queue-notification.dto.ts\n            \n            class\n            QueueNotificationDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/auth/dto/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                9 %\n                (1/11)\n            \n        \n        \n            \n                \n                src/auth/dto/update-user.dto.ts\n            \n            class\n            AdminUpdateUserDto\n            \n                8 %\n                (1/12)\n            \n        \n        \n            \n                \n                src/auth/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                10 %\n                (1/10)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/roles.guard.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            interface\n            AuthenticatedUser\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            interface\n            JwtPayload\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/config/database.config.ts\n            \n            variable\n            databaseConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/entities/otp.entity.ts\n            \n            entity\n            OTP\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            overrideConsoleInProduction\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            seedDatabaseIfNeeded\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            testMinIOConnection\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/announcement/announcement.controller.ts\n            \n            controller\n            AnnouncementController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/announcement/announcement.service.ts\n            \n            injectable\n            AnnouncementService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/announcement/dto/create-announcement.dto.ts\n            \n            class\n            CreateAnnouncementDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/announcement/dto/update-announcement.dto.ts\n            \n            class\n            UpdateAnnouncementDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/announcement/entities/announcement.entity.ts\n            \n            entity\n            Announcement\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/appointment/appointment.controller.ts\n            \n            controller\n            AppointmentController\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/modules/appointment/appointment.service.ts\n            \n            injectable\n            AppointmentService\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                src/modules/appointment/dto/create-appointment.dto.ts\n            \n            class\n            CreateAppointmentDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/modules/appointment/dto/update-appointment.dto.ts\n            \n            class\n            UpdateAppointmentDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/appointment/entities/appointment.entity.ts\n            \n            entity\n            Appointment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/counter/entities/counter.entity.ts\n            \n            entity\n            Counter\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/document-applications/document-applications.controller.ts\n            \n            controller\n            DocumentApplicationsController\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/modules/document-applications/document-applications.service.ts\n            \n            injectable\n            DocumentApplicationsService\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/modules/document-applications/dto/create-document-application.dto.ts\n            \n            class\n            CreateDocumentApplicationDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/document-applications/dto/update-document-application.dto.ts\n            \n            class\n            UpdateDocumentApplicationDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/document-applications/entities/application-status-history.entity.ts\n            \n            entity\n            ApplicationStatusHistory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/document-applications/entities/application-status-history.entity.ts\n            \n            class\n            ApplicationStatusHistory\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/modules/document-applications/entities/document-application.entity.ts\n            \n            entity\n            DocumentApplication\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/document-applications/entities/document-application.entity.ts\n            \n            class\n            DocumentApplication\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/modules/document-applications/entities/document-file.entity.ts\n            \n            entity\n            DocumentFile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/document-applications/entities/document-file.entity.ts\n            \n            class\n            DocumentFile\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/document-applications/services/minio.service.ts\n            \n            injectable\n            MinioService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/modules/queue/dto/create-queue.dto.ts\n            \n            class\n            CreateQueueDto\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/modules/queue/dto/update-queue.dto.ts\n            \n            class\n            UpdateQueueDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/queue/entities/queue-details.entity.ts\n            \n            entity\n            QueueDetails\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/queue/entities/queue.entity.ts\n            \n            entity\n            Queue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/queue/queue-scheduler.service.ts\n            \n            injectable\n            QueueSchedulerService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/queue/queue.controller.ts\n            \n            controller\n            QueueController\n            \n                0 %\n                (0/24)\n            \n        \n        \n            \n                \n                src/modules/queue/queue.gateway.ts\n            \n            class\n            QueueGateway\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/modules/queue/queue.service.ts\n            \n            injectable\n            QueueService\n            \n                0 %\n                (0/19)\n            \n        \n        \n            \n                \n                src/modules/queue/queues.controller.ts\n            \n            controller\n            QueuesController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/queue/queues.controller.ts\n            \n            interface\n            QueueDetails\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/roles/entities/role.entity.ts\n            \n            entity\n            Role\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/roles/roles.controller.ts\n            \n            controller\n            RolesController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/roles/roles.service.ts\n            \n            injectable\n            RolesService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/services/email.service.ts\n            \n            injectable\n            EmailService\n            \n                50 %\n                (8/16)\n            \n        \n        \n            \n                \n                src/services/minio.service.ts\n            \n            injectable\n            MinioService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/services/otp.service.ts\n            \n            injectable\n            OTPService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/users/dto/paginated-users-response.dto.ts\n            \n            class\n            PaginatedUsersResponseDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/dto/update-user-status.dto.ts\n            \n            class\n            UpdateUserStatusDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dto/user-query.dto.ts\n            \n            class\n            UserQueryDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dto/user-response.dto.ts\n            \n            class\n            UserResponseDto\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/users/dto/user-stats-response.dto.ts\n            \n            class\n            UsersByRoleDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dto/user-stats-response.dto.ts\n            \n            class\n            UserStatsResponseDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            interface\n            FindAllOptions\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            interface\n            UserStats\n            \n                0 %\n                (0/6)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^11.1.0\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.1.0\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/passport : ^11.0.5\n        \n            @nestjs/platform-express : ^11.1.0\n        \n            @nestjs/platform-socket.io : ^11.1.0\n        \n            @nestjs/schedule : ^6.0.0\n        \n            @nestjs/swagger : ^11.2.0\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            @nestjs/websockets : ^11.1.0\n        \n            @types/nodemailer : ^6.4.17\n        \n            @types/qrcode : ^1.5.5\n        \n            @types/speakeasy : ^2.0.10\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            date-fns : ^4.1.0\n        \n            dotenv : ^16.5.0\n        \n            minio : ^8.0.5\n        \n            multer : ^2.0.0\n        \n            mysql2 : ^3.14.1\n        \n            nodemailer : ^7.0.4\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            qrcode : ^1.5.4\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.2\n        \n            socket.io : ^4.8.1\n        \n            speakeasy : ^2.0.0\n        \n            swagger-ui-express : ^5.0.1\n        \n            typeorm : ^0.3.22\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ApplicationStatus   (src/.../document-application.entity.ts)\n                        \n                        \n                            ApplicationType   (src/.../document-application.entity.ts)\n                        \n                        \n                            AppointmentStatus   (src/.../appointment.entity.ts)\n                        \n                        \n                            CounterStatus   (src/.../counter.entity.ts)\n                        \n                        \n                            QueueStatus   (src/.../queue.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/document-applications/entities/document-application.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        ApplicationStatus\n                    \n                \n                        \n                            \n                                 PENDING\n                            \n                        \n                        \n                            \n                                Value : Pending\n                            \n                        \n                        \n                            \n                                 PROCESSING\n                            \n                        \n                        \n                            \n                                Value : Processing\n                            \n                        \n                        \n                            \n                                 APPROVED\n                            \n                        \n                        \n                            \n                                Value : Approved\n                            \n                        \n                        \n                            \n                                 REJECTED\n                            \n                        \n                        \n                            \n                                Value : Rejected\n                            \n                        \n                        \n                            \n                                 DECLINE\n                            \n                        \n                        \n                            \n                                Value : Decline\n                            \n                        \n                        \n                            \n                                 READY_FOR_PICKUP\n                            \n                        \n                        \n                            \n                                Value : Ready for Pickup\n                            \n                        \n                        \n                            \n                                 REQUIRES_ADDITIONAL_INFO\n                            \n                        \n                        \n                            \n                                Value : Requires Additional Info\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ApplicationType\n                    \n                \n                        \n                            \n                                 BIRTH_CERTIFICATE\n                            \n                        \n                        \n                            \n                                Value : Birth Certificate\n                            \n                        \n                        \n                            \n                                 MARRIAGE_CERTIFICATE\n                            \n                        \n                        \n                            \n                                Value : Marriage Certificate\n                            \n                        \n                        \n                            \n                                 MARRIAGE_LICENSE\n                            \n                        \n                        \n                            \n                                Value : Marriage License\n                            \n                        \n                        \n                            \n                                 DEATH_CERTIFICATE\n                            \n                        \n                        \n                            \n                                Value : Death Certificate\n                            \n                        \n                        \n                            \n                                 BUSINESS_PERMIT\n                            \n                        \n                        \n                            \n                                Value : Business Permit\n                            \n                        \n            \n        \n\n    src/modules/appointment/entities/appointment.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        AppointmentStatus\n                    \n                \n                        \n                            \n                                 PENDING\n                            \n                        \n                        \n                            \n                                Value : pending\n                            \n                        \n                        \n                            \n                                 CONFIRMED\n                            \n                        \n                        \n                            \n                                Value : confirmed\n                            \n                        \n                        \n                            \n                                 COMPLETED\n                            \n                        \n                        \n                            \n                                Value : completed\n                            \n                        \n                        \n                            \n                                 CANCELLED\n                            \n                        \n                        \n                            \n                                Value : cancelled\n                            \n                        \n            \n        \n\n    src/modules/counter/entities/counter.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        CounterStatus\n                    \n                \n                        \n                            \n                                 ACTIVE\n                            \n                        \n                        \n                            \n                                Value : active\n                            \n                        \n                        \n                            \n                                 INACTIVE\n                            \n                        \n                        \n                            \n                                Value : inactive\n                            \n                        \n            \n        \n\n    src/modules/queue/entities/queue.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        QueueStatus\n                    \n                \n                        \n                            \n                                 PENDING\n                            \n                        \n                        \n                            \n                                Value : pending\n                            \n                        \n                        \n                            \n                                 SERVING\n                            \n                        \n                        \n                            \n                                Value : serving\n                            \n                        \n                        \n                            \n                                 COMPLETED\n                            \n                        \n                        \n                            \n                                Value : completed\n                            \n                        \n                        \n                            \n                                 CANCELLED\n                            \n                        \n                        \n                            \n                                Value : cancelled\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            overrideConsoleInProduction   (src/.../main.ts)\n                        \n                        \n                            seedDatabaseIfNeeded   (src/.../main.ts)\n                        \n                        \n                            testMinIOConnection   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        overrideConsoleInProduction\n                        \n                    \n                \n            \n            \n                \noverrideConsoleInProduction()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        seedDatabaseIfNeeded\n                        \n                    \n                \n            \n            \n                \nseedDatabaseIfNeeded(dataSource: DataSource)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dataSource\n                                            \n                                                        DataSource\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        testMinIOConnection\n                        \n                    \n                \n            \n            \n                \ntestMinIOConnection()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AnnouncementModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppointmentModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DocumentApplicationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        QueueModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RolesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AnnouncementModule\n\n\n\ncluster_AnnouncementModule_exports\n\n\n\ncluster_AnnouncementModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppointmentModule\n\n\n\ncluster_AppointmentModule_exports\n\n\n\ncluster_AppointmentModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_DocumentApplicationsModule\n\n\n\ncluster_DocumentApplicationsModule_exports\n\n\n\ncluster_DocumentApplicationsModule_providers\n\n\n\ncluster_QueueModule\n\n\n\ncluster_QueueModule_exports\n\n\n\ncluster_QueueModule_providers\n\n\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_exports\n\n\n\ncluster_RolesModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAnnouncementService \n\nAnnouncementService \n\n\n\nAnnouncementModule\n\nAnnouncementModule\n\nAnnouncementService  -->\n\nAnnouncementModule->AnnouncementService \n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAnnouncementModule->AppModule\n\n\n\n\n\nAnnouncementService\n\nAnnouncementService\n\nAnnouncementModule -->\n\nAnnouncementService->AnnouncementModule\n\n\n\n\n\nAppointmentModule\n\nAppointmentModule\n\nAppModule -->\n\nAppointmentModule->AppModule\n\n\n\n\n\nAppointmentService \n\nAppointmentService \n\nAppointmentService  -->\n\nAppointmentModule->AppointmentService \n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nEmailService \n\nEmailService \n\nEmailService  -->\n\nAuthModule->EmailService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nOTPService \n\nOTPService \n\nOTPService  -->\n\nAuthModule->OTPService \n\n\n\n\n\nDocumentApplicationsModule\n\nDocumentApplicationsModule\n\nAppModule -->\n\nDocumentApplicationsModule->AppModule\n\n\n\n\n\nDocumentApplicationsService \n\nDocumentApplicationsService \n\nDocumentApplicationsService  -->\n\nDocumentApplicationsModule->DocumentApplicationsService \n\n\n\n\n\nMinioService \n\nMinioService \n\nMinioService  -->\n\nDocumentApplicationsModule->MinioService \n\n\n\n\n\nQueueModule\n\nQueueModule\n\nAppModule -->\n\nQueueModule->AppModule\n\n\n\n\n\nQueueGateway \n\nQueueGateway \n\nQueueGateway  -->\n\nQueueModule->QueueGateway \n\n\n\n\n\nQueueSchedulerService \n\nQueueSchedulerService \n\nQueueSchedulerService  -->\n\nQueueModule->QueueSchedulerService \n\n\n\n\n\nQueueService \n\nQueueService \n\nQueueService  -->\n\nQueueModule->QueueService \n\n\n\n\n\nRolesModule\n\nRolesModule\n\nAuthModule -->\n\nRolesModule->AuthModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nRolesModule->UsersModule\n\n\n\nAppModule -->\n\nRolesModule->AppModule\n\n\n\n\n\nRolesService \n\nRolesService \n\nRolesService  -->\n\nRolesModule->RolesService \n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nAuthModule -->\n\nEmailService->AuthModule\n\n\n\nAppModule -->\n\nEmailService->AppModule\n\n\n\n\n\nOTPService\n\nOTPService\n\nAuthModule -->\n\nOTPService->AuthModule\n\n\n\nAppModule -->\n\nOTPService->AppModule\n\n\n\n\n\nAppointmentService\n\nAppointmentService\n\nAppointmentModule -->\n\nAppointmentService->AppointmentModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nDocumentApplicationsService\n\nDocumentApplicationsService\n\nDocumentApplicationsModule -->\n\nDocumentApplicationsService->DocumentApplicationsModule\n\n\n\n\n\nMinioService\n\nMinioService\n\nDocumentApplicationsModule -->\n\nMinioService->DocumentApplicationsModule\n\n\n\n\n\nQueueSchedulerService\n\nQueueSchedulerService\n\nQueueModule -->\n\nQueueSchedulerService->QueueModule\n\n\n\n\n\nQueueService\n\nQueueService\n\nQueueModule -->\n\nQueueService->QueueModule\n\n\n\n\n\nRolesService\n\nRolesService\n\nRolesModule -->\n\nRolesService->RolesModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        8 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    9 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    11 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    15 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    31 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    9 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            databaseConfig   (src/.../database.config.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles.decorator.ts)\n                        \n                        \n                            User   (src/.../user.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/database.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        databaseConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TypeOrmModuleOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'mysql',\n  host: process.env.DB_HOST || 'localhost',\n  port: parseInt(process.env.DB_PORT || '3306'),\n  username: process.env.DB_USERNAME || 'root',\n  password: process.env.DB_PASSWORD || '',\n  database: process.env.DB_NAME || 'bulak_smart_connect',\n  entities: [__dirname + '/../**/*.entity{.ts,.js}'],\n  synchronize: process.env.NODE_ENV !== 'production',\n  logging: process.env.NODE_ENV !== 'production',\n}\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: string[]) => SetMetadata(ROLES_KEY, roles)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        User\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext): AuthenticatedUser => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.user;\n  },\n)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
